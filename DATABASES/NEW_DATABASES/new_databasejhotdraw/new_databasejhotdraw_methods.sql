-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: new_databasejhotdraw
-- ------------------------------------------------------
-- Server version	8.0.11

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `methods`
--

DROP TABLE IF EXISTS `methods`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `methods` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` longtext,
  `fullmethod` longtext,
  `ownerclassid` longtext,
  `ownerclassname` longtext,
  `sourcecode` longtext,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6521 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `methods`
--

LOCK TABLES `methods` WRITE;
/*!40000 ALTER TABLE `methods` DISABLE KEYS */;
INSERT INTO `methods` VALUES (1,'-init-()','org.jhotdraw.app.AbstractApplication.-init-()','1','org.jhotdraw.app.AbstractApplication','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractApplication() {\r\n}'),(2,'add(org.jhotdraw.app.View)','org.jhotdraw.app.AbstractApplication.add(org.jhotdraw.app.View)','1','org.jhotdraw.app.AbstractApplication','public void add(View p) {\r\n    if ((p.getApplication()) != (this)) {\r\n        int oldCount = views.size();\r\n        views.add(p);\r\n        p.setApplication(this);\r\n        firePropertyChange(AbstractApplication.VIEW_COUNT_PROPERTY, oldCount, views.size());\r\n    }\r\n}'),(3,'addPalette(java.awt.Window)','org.jhotdraw.app.AbstractApplication.addPalette(java.awt.Window)','1','org.jhotdraw.app.AbstractApplication','public void addPalette(Window palette) {\r\n}'),(4,'addRecentFile(java.io.File)','org.jhotdraw.app.AbstractApplication.addRecentFile(java.io.File)','1','org.jhotdraw.app.AbstractApplication','public void addRecentFile(File file) {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<File> oldValue = ((List<File>) (recentFiles.clone()));\r\n    if (recentFiles.contains(file)) {\r\n        recentFiles.remove(file);\r\n    }\r\n    recentFiles.addFirst(file);\r\n    if ((recentFiles.size()) > (AbstractApplication.maxRecentFilesCount)) {\r\n        recentFiles.removeLast();\r\n    }\r\n    prefs.putInt(\"recentFileCount\", recentFiles.size());\r\n    int i = 0;\r\n    for (File f : recentFiles) {\r\n        prefs.put((\"recentFile.\" + i), f.getPath());\r\n        i++;\r\n    }\r\n    firePropertyChange(\"recentFiles\", oldValue, 0);\r\n    firePropertyChange(\"recentFiles\", Collections.unmodifiableList(oldValue), Collections.unmodifiableList(recentFiles));\r\n}'),(5,'addWindow(java.awt.Window,org.jhotdraw.app.View)','org.jhotdraw.app.AbstractApplication.addWindow(java.awt.Window,org.jhotdraw.app.View)','1','org.jhotdraw.app.AbstractApplication','public void addWindow(Window window, View p) {\r\n}'),(6,'basicCreateView()','org.jhotdraw.app.AbstractApplication.basicCreateView()','1','org.jhotdraw.app.AbstractApplication','protected View basicCreateView() {\r\n    return model.createView();\r\n}'),(7,'clearRecentFiles()','org.jhotdraw.app.AbstractApplication.clearRecentFiles()','1','org.jhotdraw.app.AbstractApplication','public void clearRecentFiles() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<File> oldValue = ((List<File>) (recentFiles.clone()));\r\n    recentFiles.clear();\r\n    prefs.putInt(\"recentFileCount\", recentFiles.size());\r\n    firePropertyChange(\"recentFiles\", Collections.unmodifiableList(oldValue), Collections.unmodifiableList(recentFiles));\r\n}'),(8,'configure(java.lang.String[])','org.jhotdraw.app.AbstractApplication.configure(java.lang.String[])','1','org.jhotdraw.app.AbstractApplication','public void configure(String[] args) {\r\n}'),(9,'createContainer()','org.jhotdraw.app.AbstractApplication.createContainer()','1','org.jhotdraw.app.AbstractApplication','public Container createContainer() {\r\n    return new JFrame();\r\n}'),(10,'createView()','org.jhotdraw.app.AbstractApplication.createView()','1','org.jhotdraw.app.AbstractApplication','public final View createView() {\r\n    View p = basicCreateView();\r\n    p.init();\r\n    if ((getModel()) != null) {\r\n        getModel().initView(this, p);\r\n    }\r\n    initViewActions(p);\r\n    return p;\r\n}'),(11,'dispose(org.jhotdraw.app.View)','org.jhotdraw.app.AbstractApplication.dispose(org.jhotdraw.app.View)','1','org.jhotdraw.app.AbstractApplication','public void dispose(View p) {\r\n    remove(p);\r\n    p.dispose();\r\n}'),(12,'getActiveView()','org.jhotdraw.app.AbstractApplication.getActiveView()','1','org.jhotdraw.app.AbstractApplication','/**\r\n * Gets the active view.\r\n *\r\n * @return The active view, can be null.\r\n */\r\npublic View getActiveView() {\r\n    if (((activeView) == null) && ((views.size()) > 0)) {\r\n        return views.getLast();\r\n    }\r\n    return activeView;\r\n}'),(13,'getCopyright()','org.jhotdraw.app.AbstractApplication.getCopyright()','1','org.jhotdraw.app.AbstractApplication','public String getCopyright() {\r\n    return model.getCopyright();\r\n}'),(14,'getModel()','org.jhotdraw.app.AbstractApplication.getModel()','1','org.jhotdraw.app.AbstractApplication','public ApplicationModel getModel() {\r\n    return model;\r\n}'),(15,'getName()','org.jhotdraw.app.AbstractApplication.getName()','1','org.jhotdraw.app.AbstractApplication','public String getName() {\r\n    return model.getName();\r\n}'),(16,'getVersion()','org.jhotdraw.app.AbstractApplication.getVersion()','1','org.jhotdraw.app.AbstractApplication','public String getVersion() {\r\n    return model.getVersion();\r\n}'),(17,'init()','org.jhotdraw.app.AbstractApplication.init()','1','org.jhotdraw.app.AbstractApplication','public void init() {\r\n    prefs = Preferences.userNodeForPackage(((getModel()) == null ? getClass() : getModel().getClass()));\r\n    int count = prefs.getInt(\"recentFileCount\", 0);\r\n    for (int i = 0; i < count; i++) {\r\n        String path = prefs.get((\"recentFile.\" + i), null);\r\n        if (path != null) {\r\n            recentFiles.add(new File(path));\r\n        }\r\n    }\r\n    if ((model) != null) {\r\n        model.initApplication(this);\r\n    }\r\n}'),(18,'initLabels()','org.jhotdraw.app.AbstractApplication.initLabels()','1','org.jhotdraw.app.AbstractApplication','protected void initLabels() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n}'),(19,'initViewActions(org.jhotdraw.app.View)','org.jhotdraw.app.AbstractApplication.initViewActions(org.jhotdraw.app.View)','1','org.jhotdraw.app.AbstractApplication','protected abstract void initViewActions(View p);'),(20,'isEnabled()','org.jhotdraw.app.AbstractApplication.isEnabled()','1','org.jhotdraw.app.AbstractApplication','public boolean isEnabled() {\r\n    return isEnabled;\r\n}'),(21,'launch(java.lang.String[])','org.jhotdraw.app.AbstractApplication.launch(java.lang.String[])','1','org.jhotdraw.app.AbstractApplication','public void launch(String[] args) {\r\n    configure(args);\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            init();\r\n            start();\r\n        }\r\n    });\r\n}'),(22,'recentFiles()','org.jhotdraw.app.AbstractApplication.recentFiles()','1','org.jhotdraw.app.AbstractApplication','public List<File> recentFiles() {\r\n    return Collections.unmodifiableList(recentFiles);\r\n}'),(23,'remove(org.jhotdraw.app.View)','org.jhotdraw.app.AbstractApplication.remove(org.jhotdraw.app.View)','1','org.jhotdraw.app.AbstractApplication','public void remove(View p) {\r\n    hide(p);\r\n    int oldCount = views.size();\r\n    views.remove(p);\r\n    p.setApplication(null);\r\n    firePropertyChange(AbstractApplication.VIEW_COUNT_PROPERTY, oldCount, views.size());\r\n}'),(24,'removePalette(java.awt.Window)','org.jhotdraw.app.AbstractApplication.removePalette(java.awt.Window)','1','org.jhotdraw.app.AbstractApplication','public void removePalette(Window palette) {\r\n}'),(25,'removeWindow(java.awt.Window)','org.jhotdraw.app.AbstractApplication.removeWindow(java.awt.Window)','1','org.jhotdraw.app.AbstractApplication','public void removeWindow(Window window) {\r\n}'),(26,'setActiveView(org.jhotdraw.app.View)','org.jhotdraw.app.AbstractApplication.setActiveView(org.jhotdraw.app.View)','1','org.jhotdraw.app.AbstractApplication','/**\r\n * Sets the active view. Calls deactivate on the previously\r\n * active view, and then calls activate on the given view.\r\n *\r\n * @param newValue\r\n * 		Active view, can be null.\r\n */\r\npublic void setActiveView(View newValue) {\r\n    View oldValue = activeView;\r\n    if ((activeView) != null) {\r\n        activeView.deactivate();\r\n    }\r\n    activeView = newValue;\r\n    if ((activeView) != null) {\r\n        activeView.activate();\r\n    }\r\n    firePropertyChange(Application.ACTIVE_VIEW_PROPERTY, oldValue, newValue);\r\n}'),(27,'setEnabled(boolean)','org.jhotdraw.app.AbstractApplication.setEnabled(boolean)','1','org.jhotdraw.app.AbstractApplication','public void setEnabled(boolean newValue) {\r\n    boolean oldValue = isEnabled;\r\n    isEnabled = newValue;\r\n    firePropertyChange(\"enabled\", oldValue, newValue);\r\n}'),(28,'setModel(org.jhotdraw.app.ApplicationModel)','org.jhotdraw.app.AbstractApplication.setModel(org.jhotdraw.app.ApplicationModel)','1','org.jhotdraw.app.AbstractApplication','public void setModel(ApplicationModel newValue) {\r\n    ApplicationModel oldValue = model;\r\n    model = newValue;\r\n    firePropertyChange(\"model\", oldValue, newValue);\r\n}'),(29,'start()','org.jhotdraw.app.AbstractApplication.start()','1','org.jhotdraw.app.AbstractApplication','public void start() {\r\n    final View p = createView();\r\n    add(p);\r\n    p.setEnabled(false);\r\n    show(p);\r\n    p.execute(new Worker() {\r\n        public Object construct() {\r\n            p.clear();\r\n            return null;\r\n        }\r\n\r\n        public void finished(Object result) {\r\n            p.setEnabled(true);\r\n        }\r\n    });\r\n}'),(30,'stop()','org.jhotdraw.app.AbstractApplication.stop()','1','org.jhotdraw.app.AbstractApplication','public void stop() {\r\n    for (View p : new LinkedList<View>(views())) {\r\n        dispose(p);\r\n    }\r\n    System.exit(0);\r\n}'),(31,'views()','org.jhotdraw.app.AbstractApplication.views()','1','org.jhotdraw.app.AbstractApplication','public Collection<View> views() {\r\n    if ((unmodifiableDocuments) == null) {\r\n        unmodifiableDocuments = Collections.unmodifiableCollection(views);\r\n    }\r\n    return unmodifiableDocuments;\r\n}'),(32,'-init-()','org.jhotdraw.app.AbstractView.-init-()','2','org.jhotdraw.app.AbstractView','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractView() {\r\n    preferences = Preferences.userNodeForPackage(getClass());\r\n}'),(33,'activate()','org.jhotdraw.app.AbstractView.activate()','2','org.jhotdraw.app.AbstractView','/**\r\n * Activates the view.\r\n * This method does nothing, subclasses dont neet to call super.\r\n */\r\npublic void activate() {\r\n}'),(34,'canSaveTo(java.io.File)','org.jhotdraw.app.AbstractView.canSaveTo(java.io.File)','2','org.jhotdraw.app.AbstractView','public boolean canSaveTo(File file) {\r\n    return true;\r\n}'),(35,'createOpenChooser()','org.jhotdraw.app.AbstractView.createOpenChooser()','2','org.jhotdraw.app.AbstractView','protected JFileChooser createOpenChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(36,'createSaveChooser()','org.jhotdraw.app.AbstractView.createSaveChooser()','2','org.jhotdraw.app.AbstractView','protected JFileChooser createSaveChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    if ((preferences) != null) {\r\n        c.setCurrentDirectory(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(37,'deactivate()','org.jhotdraw.app.AbstractView.deactivate()','2','org.jhotdraw.app.AbstractView','/**\r\n * Deactivates the view.\r\n * This method does nothing, subclasses dont neet to call super.\r\n */\r\npublic void deactivate() {\r\n}'),(38,'dispose()','org.jhotdraw.app.AbstractView.dispose()','2','org.jhotdraw.app.AbstractView','/**\r\n * Gets rid of all the resources of the view.\r\n * No other methods should be invoked on the view afterwards.\r\n */\r\npublic void dispose() {\r\n    if ((executor) != null) {\r\n        executor.shutdown();\r\n        executor = null;\r\n    }\r\n}'),(39,'execute(java.lang.Runnable)','org.jhotdraw.app.AbstractView.execute(java.lang.Runnable)','2','org.jhotdraw.app.AbstractView','/**\r\n * Executes the specified runnable on the worker thread of the view.\r\n * Execution is perfomred sequentially in the same sequence as the\r\n * runnables have been passed to this method.\r\n */\r\npublic void execute(Runnable worker) {\r\n    if ((executor) == null) {\r\n        executor = Executors.newSingleThreadExecutor();\r\n    }\r\n    executor.execute(worker);\r\n}'),(40,'getAction(java.lang.String)','org.jhotdraw.app.AbstractView.getAction(java.lang.String)','2','org.jhotdraw.app.AbstractView','/**\r\n * Returns the action with the specified id.\r\n */\r\npublic Action getAction(String id) {\r\n    return (actions) == null ? null : ((Action) (actions.get(id)));\r\n}'),(41,'getApplication()','org.jhotdraw.app.AbstractView.getApplication()','2','org.jhotdraw.app.AbstractView','public Application getApplication() {\r\n    return application;\r\n}'),(42,'getComponent()','org.jhotdraw.app.AbstractView.getComponent()','2','org.jhotdraw.app.AbstractView','public JComponent getComponent() {\r\n    return this;\r\n}'),(43,'getFile()','org.jhotdraw.app.AbstractView.getFile()','2','org.jhotdraw.app.AbstractView','public File getFile() {\r\n    return file;\r\n}'),(44,'getMultipleOpenId()','org.jhotdraw.app.AbstractView.getMultipleOpenId()','2','org.jhotdraw.app.AbstractView','public int getMultipleOpenId() {\r\n    return multipleOpenId;\r\n}'),(45,'getOpenChooser()','org.jhotdraw.app.AbstractView.getOpenChooser()','2','org.jhotdraw.app.AbstractView','/**\r\n * Gets the open file chooser for the view.\r\n */\r\npublic JFileChooser getOpenChooser() {\r\n    if ((openChooser) == null) {\r\n        openChooser = createOpenChooser();\r\n    }\r\n    return openChooser;\r\n}'),(46,'getSaveChooser()','org.jhotdraw.app.AbstractView.getSaveChooser()','2','org.jhotdraw.app.AbstractView','/**\r\n * Gets the save file chooser for the view.\r\n */\r\npublic JFileChooser getSaveChooser() {\r\n    if ((saveChooser) == null) {\r\n        saveChooser = createSaveChooser();\r\n    }\r\n    return saveChooser;\r\n}'),(47,'getTitle()','org.jhotdraw.app.AbstractView.getTitle()','2','org.jhotdraw.app.AbstractView','public String getTitle() {\r\n    return title;\r\n}'),(48,'hasUnsavedChanges()','org.jhotdraw.app.AbstractView.hasUnsavedChanges()','2','org.jhotdraw.app.AbstractView','/**\r\n * Returns true, if the view has unsaved changes.\r\n * This is a bound property.\r\n */\r\npublic boolean hasUnsavedChanges() {\r\n    return hasUnsavedChanges;\r\n}'),(49,'init()','org.jhotdraw.app.AbstractView.init()','2','org.jhotdraw.app.AbstractView','/**\r\n * Initializes the view.\r\n * This method does nothing, subclasses dont neet to call super.\r\n */\r\npublic void init() {\r\n}'),(50,'initComponents()','org.jhotdraw.app.AbstractView.initComponents()','2','org.jhotdraw.app.AbstractView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setLayout(new BorderLayout());\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(51,'isShowing()','org.jhotdraw.app.AbstractView.isShowing()','2','org.jhotdraw.app.AbstractView','public boolean isShowing() {\r\n    return isShowing;\r\n}'),(52,'markChangesAsSaved()','org.jhotdraw.app.AbstractView.markChangesAsSaved()','2','org.jhotdraw.app.AbstractView','public void markChangesAsSaved() {\r\n    setHasUnsavedChanges(false);\r\n}'),(53,'putAction(java.lang.String,javax.swing.Action)','org.jhotdraw.app.AbstractView.putAction(java.lang.String,javax.swing.Action)','2','org.jhotdraw.app.AbstractView','/**\r\n * Puts an action with the specified id.\r\n */\r\npublic void putAction(String id, Action action) {\r\n    if ((actions) == null) {\r\n        actions = new HashMap<String, Action>();\r\n    }\r\n    if (action == null) {\r\n        actions.remove(id);\r\n    } else {\r\n        actions.put(id, action);\r\n    }\r\n}'),(54,'setApplication(org.jhotdraw.app.Application)','org.jhotdraw.app.AbstractView.setApplication(org.jhotdraw.app.Application)','2','org.jhotdraw.app.AbstractView','// Variables declaration - do not modify//GEN-BEGIN:variables\r\n// End of variables declaration//GEN-END:variables\r\npublic void setApplication(Application newValue) {\r\n    Application oldValue = application;\r\n    application = newValue;\r\n    firePropertyChange(\"application\", oldValue, newValue);\r\n}'),(55,'setFile(java.io.File)','org.jhotdraw.app.AbstractView.setFile(java.io.File)','2','org.jhotdraw.app.AbstractView','public void setFile(File newValue) {\r\n    File oldValue = file;\r\n    file = newValue;\r\n    if (((preferences) != null) && (newValue != null)) {\r\n        preferences.put(\"projectFile\", newValue.getPath());\r\n    }\r\n    firePropertyChange(View.FILE_PROPERTY, oldValue, newValue);\r\n}'),(56,'setHasUnsavedChanges(boolean)','org.jhotdraw.app.AbstractView.setHasUnsavedChanges(boolean)','2','org.jhotdraw.app.AbstractView','protected void setHasUnsavedChanges(boolean newValue) {\r\n    boolean oldValue = hasUnsavedChanges;\r\n    hasUnsavedChanges = newValue;\r\n    firePropertyChange(View.HAS_UNSAVED_CHANGES_PROPERTY, oldValue, newValue);\r\n}'),(57,'setMultipleOpenId(int)','org.jhotdraw.app.AbstractView.setMultipleOpenId(int)','2','org.jhotdraw.app.AbstractView','public void setMultipleOpenId(int newValue) {\r\n    int oldValue = multipleOpenId;\r\n    multipleOpenId = newValue;\r\n    firePropertyChange(View.MULTIPLE_OPEN_ID_PROPERTY, oldValue, newValue);\r\n}'),(58,'setShowing(boolean)','org.jhotdraw.app.AbstractView.setShowing(boolean)','2','org.jhotdraw.app.AbstractView','public void setShowing(boolean newValue) {\r\n    boolean oldValue = isShowing;\r\n    isShowing = newValue;\r\n    firePropertyChange(View.SHOWING_PROPERTY, oldValue, newValue);\r\n}'),(59,'setTitle(java.lang.String)','org.jhotdraw.app.AbstractView.setTitle(java.lang.String)','2','org.jhotdraw.app.AbstractView','public void setTitle(String newValue) {\r\n    String oldValue = title;\r\n    title = newValue;\r\n    firePropertyChange(View.TITLE_PROPERTY, oldValue, newValue);\r\n}'),(60,'start()','org.jhotdraw.app.AbstractView.start()','2','org.jhotdraw.app.AbstractView','/**\r\n * Starts the view.\r\n * This method does nothing, subclasses dont neet to call super.\r\n */\r\npublic void start() {\r\n}'),(61,'stop()','org.jhotdraw.app.AbstractView.stop()','2','org.jhotdraw.app.AbstractView','/**\r\n * Stops the view.\r\n * This method does nothing, subclasses dont neet to call super.\r\n */\r\npublic void stop() {\r\n}'),(62,'add(org.jhotdraw.app.View)','org.jhotdraw.app.Application.add(org.jhotdraw.app.View)','3','org.jhotdraw.app.Application','/**\r\n * Adds a view to this application.\r\n * Fires a \"documentCount\" property change event.\r\n * Invokes method setApplication(this) on the view object.\r\n */\r\npublic void add(View p);'),(63,'addPalette(java.awt.Window)','org.jhotdraw.app.Application.addPalette(java.awt.Window)','3','org.jhotdraw.app.Application','/**\r\n * Adds a palette window to the application.\r\n */\r\npublic void addPalette(Window palette);'),(64,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.app.Application.addPropertyChangeListener(java.beans.PropertyChangeListener)','3','org.jhotdraw.app.Application','/**\r\n * Adds a property change listener.\r\n */\r\npublic void addPropertyChangeListener(PropertyChangeListener l);'),(65,'addRecentFile(java.io.File)','org.jhotdraw.app.Application.addRecentFile(java.io.File)','3','org.jhotdraw.app.Application','/**\r\n * Appends a file to the list of recent files.\r\n * This fires a property change event for the property \"recentFiles\".\r\n */\r\npublic void addRecentFile(File file);'),(66,'addWindow(java.awt.Window,org.jhotdraw.app.View)','org.jhotdraw.app.Application.addWindow(java.awt.Window,org.jhotdraw.app.View)','3','org.jhotdraw.app.Application','/**\r\n * Adds a (non-palette) window to the application.\r\n *\r\n * @param window\r\n * 		The window.\r\n * @param view\r\n * 		The View to which this window is associated, or null,\r\n * 		if the window is associated to the application.\r\n */\r\npublic void addWindow(Window window, View view);'),(67,'clearRecentFiles()','org.jhotdraw.app.Application.clearRecentFiles()','3','org.jhotdraw.app.Application','/**\r\n * Clears the list of recent files.\r\n * This fires a property change event for the property \"recentFiles\".\r\n */\r\npublic void clearRecentFiles();'),(68,'configure(java.lang.String[])','org.jhotdraw.app.Application.configure(java.lang.String[])','3','org.jhotdraw.app.Application','/**\r\n * Configures the application using the provided arguments array.\r\n */\r\npublic void configure(String[] args);'),(69,'createView()','org.jhotdraw.app.Application.createView()','3','org.jhotdraw.app.Application','/**\r\n * Creates a new view for this application.\r\n */\r\npublic View createView();'),(70,'dispose(org.jhotdraw.app.View)','org.jhotdraw.app.Application.dispose(org.jhotdraw.app.View)','3','org.jhotdraw.app.Application','/**\r\n * This is a convenience method for removing a view and disposing it.\r\n */\r\npublic void dispose(View p);'),(71,'getActiveView()','org.jhotdraw.app.Application.getActiveView()','3','org.jhotdraw.app.Application','/**\r\n * Returns the active view. This is used for OSXApplication and\r\n * MDIApplication which share actions among multiple View instances.\r\n * Active view may be become null, if the\r\n * application has no view.\r\n * <p>\r\n * This is a bound property.\r\n */\r\npublic View getActiveView();'),(72,'getComponent()','org.jhotdraw.app.Application.getComponent()','3','org.jhotdraw.app.Application','/**\r\n * Returns the application component.\r\n * This may return null, if the application is not represented by a component\r\n * of its own on the user interface.\r\n */\r\npublic Component getComponent();'),(73,'getCopyright()','org.jhotdraw.app.Application.getCopyright()','3','org.jhotdraw.app.Application','/**\r\n * Returns the copyright of the application.\r\n */\r\npublic String getCopyright();'),(74,'getModel()','org.jhotdraw.app.Application.getModel()','3','org.jhotdraw.app.Application','/**\r\n * Returns the application model.\r\n */\r\npublic ApplicationModel getModel();'),(75,'getName()','org.jhotdraw.app.Application.getName()','3','org.jhotdraw.app.Application','/**\r\n * Returns the name of the application.\r\n */\r\npublic String getName();'),(76,'getVersion()','org.jhotdraw.app.Application.getVersion()','3','org.jhotdraw.app.Application','/**\r\n * Returns the version of the application.\r\n */\r\npublic String getVersion();'),(77,'hide(org.jhotdraw.app.View)','org.jhotdraw.app.Application.hide(org.jhotdraw.app.View)','3','org.jhotdraw.app.Application','/**\r\n * Hides a view.\r\n */\r\npublic void hide(View p);'),(78,'init()','org.jhotdraw.app.Application.init()','3','org.jhotdraw.app.Application','/**\r\n * Initializes the application.\r\n * <code>configure()</code> should have been invoked before the application\r\n * is inited. Alternatively an application can be configured using setter\r\n * methods.\r\n */\r\npublic void init();'),(79,'isEnabled()','org.jhotdraw.app.Application.isEnabled()','3','org.jhotdraw.app.Application','/**\r\n * Returns the enabled state of the application.\r\n */\r\npublic boolean isEnabled();'),(80,'isSharingToolsAmongViews()','org.jhotdraw.app.Application.isSharingToolsAmongViews()','3','org.jhotdraw.app.Application','/**\r\n * Returns true, if this application shares tools among multiple views.\r\n */\r\npublic boolean isSharingToolsAmongViews();'),(81,'launch(java.lang.String[])','org.jhotdraw.app.Application.launch(java.lang.String[])','3','org.jhotdraw.app.Application','/**\r\n * Launches the application from the main method.\r\n * This method is typically invoked on the main Thread.\r\n * This will invoke configure() on the current thread and then\r\n * init() and start() on the AWT Event Dispatcher Thread.\r\n */\r\npublic void launch(String[] args);'),(82,'recentFiles()','org.jhotdraw.app.Application.recentFiles()','3','org.jhotdraw.app.Application','/**\r\n * Returns the recently opened files.\r\n * By convention, this is an immutable list.\r\n */\r\npublic List<File> recentFiles();'),(83,'remove(org.jhotdraw.app.View)','org.jhotdraw.app.Application.remove(org.jhotdraw.app.View)','3','org.jhotdraw.app.Application','/**\r\n * Removes a view from this application and removes it from the users\r\n * view.\r\n * Fires a \"documentCount\" property change event.\r\n * Invokes method setApplication(null) on the view object.\r\n */\r\npublic void remove(View p);'),(84,'removePalette(java.awt.Window)','org.jhotdraw.app.Application.removePalette(java.awt.Window)','3','org.jhotdraw.app.Application','/**\r\n * Removes a palette window from the application.\r\n */\r\npublic void removePalette(Window palette);'),(85,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.app.Application.removePropertyChangeListener(java.beans.PropertyChangeListener)','3','org.jhotdraw.app.Application','/**\r\n * Removes a property change listener.\r\n */\r\npublic void removePropertyChangeListener(PropertyChangeListener l);'),(86,'removeWindow(java.awt.Window)','org.jhotdraw.app.Application.removeWindow(java.awt.Window)','3','org.jhotdraw.app.Application','/**\r\n * Removes a (non-palette) window from the application.\r\n */\r\npublic void removeWindow(Window window);'),(87,'setEnabled(boolean)','org.jhotdraw.app.Application.setEnabled(boolean)','3','org.jhotdraw.app.Application','/**\r\n * Sets the enabled state of the application.\r\n *\r\n * The enabled state is used to prevent parallel invocation of actions\r\n * on the application. If an action consists of a sequential part and a\r\n * concurrent part, it must disable the application only for the sequential\r\n * part.\r\n *\r\n * Actions that act on the application must check in their actionPerformed\r\n * method whether the application is enabled.\r\n * If the application is disabled, they must do nothing.\r\n * If the application is enabled, they must disable the application,\r\n * perform the action and then enable the application again.\r\n *\r\n * This is a bound property.\r\n */\r\npublic void setEnabled(boolean newValue);'),(88,'setModel(org.jhotdraw.app.ApplicationModel)','org.jhotdraw.app.Application.setModel(org.jhotdraw.app.ApplicationModel)','3','org.jhotdraw.app.Application','/**\r\n * Sets the application model.\r\n */\r\npublic void setModel(ApplicationModel newValue);'),(89,'show(org.jhotdraw.app.View)','org.jhotdraw.app.Application.show(org.jhotdraw.app.View)','3','org.jhotdraw.app.Application','/**\r\n * Shows a view.\r\n */\r\npublic void show(View p);'),(90,'start()','org.jhotdraw.app.Application.start()','3','org.jhotdraw.app.Application','/**\r\n * Starts the application.\r\n * This usually creates a new view, and adds it to the application.\r\n * <code>init()</code> must have been invoked before the application is started.\r\n */\r\npublic void start();'),(91,'stop()','org.jhotdraw.app.Application.stop()','3','org.jhotdraw.app.Application','/**\r\n * Stops the application without saving any unsaved views.\r\n * <code>init()</code> must have been invoked before the application is stopped.\r\n */\r\npublic void stop();'),(92,'views()','org.jhotdraw.app.Application.views()','3','org.jhotdraw.app.Application','/**\r\n * Returns a read only collection view of the views of this application.\r\n */\r\npublic Collection<View> views();'),(93,'createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.ApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Creates menus.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * 		Application.\r\n * @param v\r\n * 		The view for which the toolbars need to be created, or null\r\n * 		if the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JMenu> createMenus(Application a, View v);'),(94,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.ApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Creates tool bars.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * 		Application.\r\n * @param v\r\n * 		The view for which the toolbars need to be created, or null\r\n * 		if the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View v);'),(95,'createView()','org.jhotdraw.app.ApplicationModel.createView()','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Creates a new view for the application.\r\n */\r\npublic View createView();'),(96,'getAction(java.lang.String)','org.jhotdraw.app.ApplicationModel.getAction(java.lang.String)','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Returns the action with the specified id.\r\n */\r\npublic Action getAction(String id);'),(97,'getCopyright()','org.jhotdraw.app.ApplicationModel.getCopyright()','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Returns the copyright of the application.\r\n */\r\npublic String getCopyright();'),(98,'getName()','org.jhotdraw.app.ApplicationModel.getName()','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Returns the name of the application.\r\n */\r\npublic String getName();'),(99,'getVersion()','org.jhotdraw.app.ApplicationModel.getVersion()','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Returns the version of the application.\r\n */\r\npublic String getVersion();'),(100,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.app.ApplicationModel.initApplication(org.jhotdraw.app.Application)','4','org.jhotdraw.app.ApplicationModel','public void initApplication(Application a);'),(101,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.ApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','4','org.jhotdraw.app.ApplicationModel','public void initView(Application a, View v);'),(102,'putAction(java.lang.String,javax.swing.Action)','org.jhotdraw.app.ApplicationModel.putAction(java.lang.String,javax.swing.Action)','4','org.jhotdraw.app.ApplicationModel','/**\r\n * Puts an action with the specified id.\r\n */\r\npublic void putAction(String id, Action action);'),(103,'-init-(javax.swing.JApplet)','org.jhotdraw.app.DefaultAppletApplication.-init-(javax.swing.JApplet)','5','org.jhotdraw.app.DefaultAppletApplication','/**\r\n * Creates a new instance of DefaultAppletApplication\r\n */\r\npublic DefaultAppletApplication(JApplet applet) {\r\n    this.applet = applet;\r\n}'),(104,'getActiveView()','org.jhotdraw.app.DefaultAppletApplication.getActiveView()','5','org.jhotdraw.app.DefaultAppletApplication','public View getActiveView() {\r\n    return view;\r\n}'),(105,'getComponent()','org.jhotdraw.app.DefaultAppletApplication.getComponent()','5','org.jhotdraw.app.DefaultAppletApplication','public Component getComponent() {\r\n    return applet;\r\n}'),(106,'hide(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultAppletApplication.hide(org.jhotdraw.app.View)','5','org.jhotdraw.app.DefaultAppletApplication','public void hide(View v) {\r\n    v.deactivate();\r\n    v.stop();\r\n    applet.getContentPane().removeAll();\r\n    this.view = null;\r\n}'),(107,'initViewActions(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultAppletApplication.initViewActions(org.jhotdraw.app.View)','5','org.jhotdraw.app.DefaultAppletApplication','protected void initViewActions(View p) {\r\n}'),(108,'isSharingToolsAmongViews()','org.jhotdraw.app.DefaultAppletApplication.isSharingToolsAmongViews()','5','org.jhotdraw.app.DefaultAppletApplication','public boolean isSharingToolsAmongViews() {\r\n    return false;\r\n}'),(109,'show(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultAppletApplication.show(org.jhotdraw.app.View)','5','org.jhotdraw.app.DefaultAppletApplication','public void show(View v) {\r\n    this.view = v;\r\n    applet.getContentPane().removeAll();\r\n    applet.getContentPane().add(v.getComponent());\r\n    v.start();\r\n    v.activate();\r\n}'),(110,'-init-()','org.jhotdraw.app.DefaultApplicationModel.-init-()','6','org.jhotdraw.app.DefaultApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultApplicationModel() {\r\n}'),(111,'createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.DefaultApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)','6','org.jhotdraw.app.DefaultApplicationModel','protected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"edit\");\r\n    mi = m.add(getAction(UndoAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(RedoAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(CutAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(CopyAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(PasteAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DuplicateAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DeleteAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(SelectAllAction.ID));\r\n    mi.setIcon(null);\r\n    if ((getAction(FindAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(getAction(FindAction.ID));\r\n    }\r\n    return m;\r\n}'),(112,'createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.DefaultApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','6','org.jhotdraw.app.DefaultApplicationModel','public List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> list = new LinkedList<JMenu>();\r\n    list.add(createEditMenu(a, p));\r\n    return list;\r\n}'),(113,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.DefaultApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','6','org.jhotdraw.app.DefaultApplicationModel','/**\r\n * Creates toolbars for the application.\r\n * This class creates a standard toolbar with the following buttons in it:\r\n * <ul>\r\n * <li>File New</li>\r\n * <li>File Open</li>\r\n * <li>File Save</li>\r\n * <li>Undo</li>\r\n * <li>Redo</li>\r\n * <li>Cut</li>\r\n * <li>Copy</li>\r\n * <li>Paste</li>\r\n * </ul>\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JToolBar tb = new JToolBar();\r\n    tb.setName(labels.getString(\"standardToolBarTitle\"));\r\n    JButton b;\r\n    Action a;\r\n    if (null != (a = getAction(NewAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(OpenAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(LoadAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    b = tb.add(getAction(SaveAction.ID));\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(UndoAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(RedoAction.ID));\r\n    b.setFocusable(false);\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(CutAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(CopyAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(PasteAction.ID));\r\n    b.setFocusable(false);\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    list.add(tb);\r\n    return list;\r\n}'),(114,'createView()','org.jhotdraw.app.DefaultApplicationModel.createView()','6','org.jhotdraw.app.DefaultApplicationModel','public View createView() {\r\n    try {\r\n        return ((View) (getViewClass().newInstance()));\r\n    } catch (Exception e) {\r\n        InternalError error = new InternalError(\"unable to create view\");\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(115,'getAction(java.lang.String)','org.jhotdraw.app.DefaultApplicationModel.getAction(java.lang.String)','6','org.jhotdraw.app.DefaultApplicationModel','/**\r\n * Returns the action with the specified id.\r\n */\r\npublic Action getAction(String id) {\r\n    return (actions) == null ? null : ((Action) (actions.get(id)));\r\n}'),(116,'getCopyright()','org.jhotdraw.app.DefaultApplicationModel.getCopyright()','6','org.jhotdraw.app.DefaultApplicationModel','public String getCopyright() {\r\n    return copyright;\r\n}'),(117,'getName()','org.jhotdraw.app.DefaultApplicationModel.getName()','6','org.jhotdraw.app.DefaultApplicationModel','public String getName() {\r\n    return name;\r\n}'),(118,'getVersion()','org.jhotdraw.app.DefaultApplicationModel.getVersion()','6','org.jhotdraw.app.DefaultApplicationModel','public String getVersion() {\r\n    return version;\r\n}'),(119,'getViewClass()','org.jhotdraw.app.DefaultApplicationModel.getViewClass()','6','org.jhotdraw.app.DefaultApplicationModel','public Class getViewClass() {\r\n    if ((viewClass) == null) {\r\n        if ((viewClassName) != null) {\r\n            try {\r\n                viewClass = Class.forName(viewClassName);\r\n            } catch (Exception e) {\r\n                InternalError error = new InternalError(\"unable to get view class\");\r\n                error.initCause(e);\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    return viewClass;\r\n}'),(120,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.app.DefaultApplicationModel.initApplication(org.jhotdraw.app.Application)','6','org.jhotdraw.app.DefaultApplicationModel','public void initApplication(Application a) {\r\n}'),(121,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.app.DefaultApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','6','org.jhotdraw.app.DefaultApplicationModel','public void initView(Application a, View p) {\r\n}'),(122,'putAction(java.lang.String,javax.swing.Action)','org.jhotdraw.app.DefaultApplicationModel.putAction(java.lang.String,javax.swing.Action)','6','org.jhotdraw.app.DefaultApplicationModel','/**\r\n * Puts an action with the specified id.\r\n */\r\npublic void putAction(String id, Action action) {\r\n    if ((actions) == null) {\r\n        actions = new HashMap<String, Action>();\r\n    }\r\n    if (action == null) {\r\n        actions.remove(id);\r\n    } else {\r\n        actions.put(id, action);\r\n    }\r\n}'),(123,'setCopyright(java.lang.String)','org.jhotdraw.app.DefaultApplicationModel.setCopyright(java.lang.String)','6','org.jhotdraw.app.DefaultApplicationModel','public void setCopyright(String newValue) {\r\n    String oldValue = copyright;\r\n    copyright = newValue;\r\n    firePropertyChange(DefaultApplicationModel.COPYRIGHT_PROPERTY, oldValue, newValue);\r\n}'),(124,'setName(java.lang.String)','org.jhotdraw.app.DefaultApplicationModel.setName(java.lang.String)','6','org.jhotdraw.app.DefaultApplicationModel','public void setName(String newValue) {\r\n    String oldValue = name;\r\n    name = newValue;\r\n    firePropertyChange(DefaultApplicationModel.NAME_PROPERTY, oldValue, newValue);\r\n}'),(125,'setVersion(java.lang.String)','org.jhotdraw.app.DefaultApplicationModel.setVersion(java.lang.String)','6','org.jhotdraw.app.DefaultApplicationModel','public void setVersion(String newValue) {\r\n    String oldValue = version;\r\n    version = newValue;\r\n    firePropertyChange(DefaultApplicationModel.VERSION_PROPERTY, oldValue, newValue);\r\n}'),(126,'setViewClass(java.lang.Class)','org.jhotdraw.app.DefaultApplicationModel.setViewClass(java.lang.Class)','6','org.jhotdraw.app.DefaultApplicationModel','/**\r\n * Use this method only, if setViewClassName() does not suit you.\r\n */\r\npublic void setViewClass(Class newValue) {\r\n    Class oldValue = viewClass;\r\n    viewClass = newValue;\r\n    firePropertyChange(DefaultApplicationModel.VIEW_CLASS_PROPERTY, oldValue, newValue);\r\n}'),(127,'setViewClassName(java.lang.String)','org.jhotdraw.app.DefaultApplicationModel.setViewClassName(java.lang.String)','6','org.jhotdraw.app.DefaultApplicationModel','/**\r\n * Use this method for best application startup performance.\r\n */\r\npublic void setViewClassName(String newValue) {\r\n    String oldValue = viewClassName;\r\n    viewClassName = newValue;\r\n    firePropertyChange(DefaultApplicationModel.VIEW_CLASS_NAME_PROPERTY, oldValue, newValue);\r\n}'),(128,'-init-()','org.jhotdraw.app.DefaultMDIApplication.-init-()','7','org.jhotdraw.app.DefaultMDIApplication','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultMDIApplication() {\r\n}'),(129,'configure(java.lang.String[])','org.jhotdraw.app.DefaultMDIApplication.configure(java.lang.String[])','7','org.jhotdraw.app.DefaultMDIApplication','public void configure(String[] args) {\r\n    System.setProperty(\"apple.laf.useScreenMenuBar\", \"false\");\r\n    System.setProperty(\"com.apple.macos.useScreenMenuBar\", \"false\");\r\n    System.setProperty(\"apple.awt.graphics.UseQuartz\", \"false\");\r\n    System.setProperty(\"swing.aatext\", \"true\");\r\n}'),(130,'createFileMenu()','org.jhotdraw.app.DefaultMDIApplication.createFileMenu()','7','org.jhotdraw.app.DefaultMDIApplication','protected JMenu createFileMenu() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel model = getModel();\r\n    JMenuBar mb = new JMenuBar();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    m.add(model.getAction(NewAction.ID));\r\n    m.add(model.getAction(OpenAction.ID));\r\n    if ((model.getAction(OpenDirectoryAction.ID)) != null) {\r\n        mi = m.add(model.getAction(OpenDirectoryAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    m.add(model.getAction(CloseAction.ID));\r\n    m.add(model.getAction(SaveAction.ID));\r\n    m.add(model.getAction(SaveAsAction.ID));\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(model.getAction(PrintAction.ID));\r\n    }\r\n    m.addSeparator();\r\n    m.add(model.getAction(ExitAction.ID));\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            ApplicationModel mo = getModel();\r\n            if (name == \"recentFiles\") {\r\n                updateOpenRecentMenu(openRecentMenu);\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}'),(131,'createHelpMenu()','org.jhotdraw.app.DefaultMDIApplication.createHelpMenu()','7','org.jhotdraw.app.DefaultMDIApplication','protected JMenu createHelpMenu() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel mo = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, labels.getString(\"help\"));\r\n    m.add(mo.getAction(AboutAction.ID));\r\n    return m;\r\n}'),(132,'createMenuBar()','org.jhotdraw.app.DefaultMDIApplication.createMenuBar()','7','org.jhotdraw.app.DefaultMDIApplication','/* protected void addStandardActionsTo(JToolBar tb) {\nJButton b;\nApplicationModel model = getModel();\nb = tb.add(model.getAction(NewAction.ID));\nb.setFocusable(false);\nb = tb.add(model.getAction(OpenAction.ID));\nb.setFocusable(false);\nb = tb.add(model.getAction(SaveAction.ID));\ntb.addSeparator();\nb = tb.add(model.getAction(UndoAction.ID));\nb.setFocusable(false);\nb = tb.add(model.getAction(RedoAction.ID));\nb.setFocusable(false);\ntb.addSeparator();\nb = tb.add(model.getAction(CutAction.ID));\nb.setFocusable(false);\nb = tb.add(model.getAction(CopyAction.ID));\nb.setFocusable(false);\nb = tb.add(model.getAction(PasteAction.ID));\nb.setFocusable(false);\n}\n */\r\n/**\r\n * Creates a menu bar.\r\n */\r\nprotected JMenuBar createMenuBar() {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu());\r\n    for (JMenu mm : getModel().createMenus(this, null)) {\r\n        mb.add(mm);\r\n    }\r\n    mb.add(createWindowMenu());\r\n    mb.add(createHelpMenu());\r\n    return mb;\r\n}'),(133,'createWindowMenu()','org.jhotdraw.app.DefaultMDIApplication.createWindowMenu()','7','org.jhotdraw.app.DefaultMDIApplication','protected JMenu createWindowMenu() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel mo = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    final JMenu windowMenu = m;\r\n    labels.configureMenu(m, \"window\");\r\n    m.add(mo.getAction(ArrangeAction.CASCADE_ID));\r\n    m.add(mo.getAction(ArrangeAction.VERTICAL_ID));\r\n    m.add(mo.getAction(ArrangeAction.HORIZONTAL_ID));\r\n    m.addSeparator();\r\n    for (View pr : views()) {\r\n        if ((pr.getAction(FocusAction.ID)) != null) {\r\n            windowMenu.add(pr.getAction(FocusAction.ID));\r\n        }\r\n    }\r\n    if ((toolBarActions.size()) > 0) {\r\n        m.addSeparator();\r\n        for (Action a : toolBarActions) {\r\n            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            m.add(cbmi);\r\n        }\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            ApplicationModel mo = getModel();\r\n            if (name == \"viewCount\") {\r\n                JMenu m = windowMenu;\r\n                m.removeAll();\r\n                m.add(mo.getAction(ArrangeAction.CASCADE_ID));\r\n                m.add(mo.getAction(ArrangeAction.VERTICAL_ID));\r\n                m.add(mo.getAction(ArrangeAction.HORIZONTAL_ID));\r\n                m.addSeparator();\r\n                for (Iterator i = views().iterator(); i.hasNext();) {\r\n                    View pr = ((View) (i.next()));\r\n                    if ((pr.getAction(FocusAction.ID)) != null) {\r\n                        m.add(pr.getAction(FocusAction.ID));\r\n                    }\r\n                }\r\n                if ((toolBarActions.size()) > 0) {\r\n                    m.addSeparator();\r\n                    for (Action a : toolBarActions) {\r\n                        JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n                        Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n                        m.add(cbmi);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}'),(134,'getComponent()','org.jhotdraw.app.DefaultMDIApplication.getComponent()','7','org.jhotdraw.app.DefaultMDIApplication','public Component getComponent() {\r\n    return parentFrame;\r\n}'),(135,'hide(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultMDIApplication.hide(org.jhotdraw.app.View)','7','org.jhotdraw.app.DefaultMDIApplication','public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        JInternalFrame f = ((JInternalFrame) (SwingUtilities.getRootPane(p.getComponent()).getParent()));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        desktopPane.remove(f);\r\n        f.dispose();\r\n    }\r\n}'),(136,'init()','org.jhotdraw.app.DefaultMDIApplication.init()','7','org.jhotdraw.app.DefaultMDIApplication','public void init() {\r\n    initLookAndFeel();\r\n    super.init();\r\n    prefs = Preferences.userNodeForPackage(((getModel()) == null ? getClass() : getModel().getClass()));\r\n    initLabels();\r\n    parentFrame = new JFrame(getName());\r\n    parentFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n    desktopPane = new MDIDesktopPane();\r\n    scrollPane = new JScrollPane();\r\n    scrollPane.setViewportView(desktopPane);\r\n    toolBarActions = new LinkedList<Action>();\r\n    initApplicationActions();\r\n    parentFrame.getContentPane().add(wrapDesktopPane(scrollPane, toolBarActions));\r\n    parentFrame.addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(final WindowEvent evt) {\r\n            getModel().getAction(ExitAction.ID).actionPerformed(new ActionEvent(parentFrame, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n        }\r\n    });\r\n    parentFrame.setJMenuBar(createMenuBar());\r\n    PreferencesUtil.installFramePrefsHandler(prefs, \"parentFrame\", parentFrame);\r\n    parentFrame.setVisible(true);\r\n}'),(137,'initApplicationActions()','org.jhotdraw.app.DefaultMDIApplication.initApplicationActions()','7','org.jhotdraw.app.DefaultMDIApplication','protected void initApplicationActions() {\r\n    ApplicationModel mo = getModel();\r\n    mo.putAction(AboutAction.ID, new AboutAction(this));\r\n    mo.putAction(ExitAction.ID, new ExitAction(this));\r\n    mo.putAction(NewAction.ID, new NewAction(this));\r\n    mo.putAction(OpenAction.ID, new OpenAction(this));\r\n    mo.putAction(ClearRecentFilesAction.ID, new ClearRecentFilesAction(this));\r\n    mo.putAction(SaveAction.ID, new SaveAction(this));\r\n    mo.putAction(SaveAsAction.ID, new SaveAsAction(this));\r\n    mo.putAction(CloseAction.ID, new CloseAction(this));\r\n    mo.putAction(PrintAction.ID, new PrintAction(this));\r\n    mo.putAction(UndoAction.ID, new UndoAction(this));\r\n    mo.putAction(RedoAction.ID, new RedoAction(this));\r\n    mo.putAction(CutAction.ID, new CutAction());\r\n    mo.putAction(CopyAction.ID, new CopyAction());\r\n    mo.putAction(PasteAction.ID, new PasteAction());\r\n    mo.putAction(DeleteAction.ID, new DeleteAction());\r\n    mo.putAction(DuplicateAction.ID, new DuplicateAction());\r\n    mo.putAction(SelectAllAction.ID, new SelectAllAction());\r\n    /* model.putAction(MaximizeAction.ID, new MaximizeAction(this));\n    model.putAction(MinimizeAction.ID, new MinimizeAction(this));\n     */\r\n    mo.putAction(ArrangeAction.VERTICAL_ID, new ArrangeAction(desktopPane, Arrangeable.Arrangement.VERTICAL));\r\n    mo.putAction(ArrangeAction.HORIZONTAL_ID, new ArrangeAction(desktopPane, Arrangeable.Arrangement.HORIZONTAL));\r\n    mo.putAction(ArrangeAction.CASCADE_ID, new ArrangeAction(desktopPane, Arrangeable.Arrangement.CASCADE));\r\n}'),(138,'initLookAndFeel()','org.jhotdraw.app.DefaultMDIApplication.initLookAndFeel()','7','org.jhotdraw.app.DefaultMDIApplication','protected void initLookAndFeel() {\r\n    try {\r\n        String lafName;\r\n        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"mac os x\")) {\r\n            JFrame.setDefaultLookAndFeelDecorated(true);\r\n            JDialog.setDefaultLookAndFeelDecorated(true);\r\n            lafName = UIManager.getCrossPlatformLookAndFeelClassName();\r\n        } else {\r\n            lafName = UIManager.getSystemLookAndFeelClassName();\r\n        }\r\n        UIManager.setLookAndFeel(lafName);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    if ((UIManager.getString(\"OptionPane.css\")) == null) {\r\n        UIManager.put(\"OptionPane.css\", \"\");\r\n    }\r\n}'),(139,'initViewActions(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultMDIApplication.initViewActions(org.jhotdraw.app.View)','7','org.jhotdraw.app.DefaultMDIApplication','protected void initViewActions(View p) {\r\n    p.putAction(FocusAction.ID, new FocusAction(p));\r\n}'),(140,'isSharingToolsAmongViews()','org.jhotdraw.app.DefaultMDIApplication.isSharingToolsAmongViews()','7','org.jhotdraw.app.DefaultMDIApplication','public boolean isSharingToolsAmongViews() {\r\n    return true;\r\n}'),(141,'launch(java.lang.String[])','org.jhotdraw.app.DefaultMDIApplication.launch(java.lang.String[])','7','org.jhotdraw.app.DefaultMDIApplication','public void launch(String[] args) {\r\n    super.launch(args);\r\n}'),(142,'show(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultMDIApplication.show(org.jhotdraw.app.View)','7','org.jhotdraw.app.DefaultMDIApplication','public void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JInternalFrame f = new JInternalFrame();\r\n        f.setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE);\r\n        f.setClosable(true);\r\n        f.setMaximizable(true);\r\n        f.setResizable(true);\r\n        f.setIconifiable(false);\r\n        updateViewTitle(p, f);\r\n        PreferencesUtil.installInternalFramePrefsHandler(prefs, \"view\", f, desktopPane);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && (aView.isShowing())) && (SwingUtilities.getRootPane(aView.getComponent()).getParent().getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        // paletteHandler.add(f, v);\r\n        f.addInternalFrameListener(new InternalFrameAdapter() {\r\n            @Override\r\n            public void internalFrameClosing(final InternalFrameEvent evt) {\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void internalFrameClosed(final InternalFrameEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if ((name == (View.HAS_UNSAVED_CHANGES_PROPERTY)) || (name == (View.FILE_PROPERTY))) {\r\n                    updateViewTitle(p, f);\r\n                }\r\n            }\r\n        });\r\n        f.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name.equals(\"selected\")) {\r\n                    if (evt.getNewValue().equals(Boolean.TRUE)) {\r\n                        setActiveView(p);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // f.setJMenuBar(createMenuBar(v));\r\n        f.getContentPane().add(p.getComponent());\r\n        f.setVisible(true);\r\n        desktopPane.add(f);\r\n        f.toFront();\r\n        try {\r\n            f.setSelected(true);\r\n        } catch (PropertyVetoException e) {\r\n            // Dont care.\r\n        }\r\n        p.getComponent().requestFocusInWindow();\r\n        p.start();\r\n    }\r\n}'),(143,'updateOpenRecentMenu(javax.swing.JMenu)','org.jhotdraw.app.DefaultMDIApplication.updateOpenRecentMenu(javax.swing.JMenu)','7','org.jhotdraw.app.DefaultMDIApplication','/**\r\n * Updates the \"File &gt; Open Recent\" menu.\r\n *\r\n * @param openRecentMenu\r\n * 		\r\n */\r\nprotected void updateOpenRecentMenu(JMenu openRecentMenu) {\r\n    if ((openRecentMenu.getItemCount()) > 0) {\r\n        JMenuItem clearRecentFilesItem = ((JMenuItem) (openRecentMenu.getItem(((openRecentMenu.getItemCount()) - 1))));\r\n        openRecentMenu.removeAll();\r\n        for (File f : recentFiles()) {\r\n            openRecentMenu.add(new OpenRecentAction(this, f));\r\n        }\r\n        if ((recentFiles().size()) > 0) {\r\n            openRecentMenu.addSeparator();\r\n        }\r\n        openRecentMenu.add(clearRecentFilesItem);\r\n    }\r\n}'),(144,'updateViewTitle(org.jhotdraw.app.View,javax.swing.JInternalFrame)','org.jhotdraw.app.DefaultMDIApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JInternalFrame)','7','org.jhotdraw.app.DefaultMDIApplication','/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param v\r\n * 		The view.\r\n * @param f\r\n * 		The frame.\r\n */\r\nprotected void updateViewTitle(View v, JInternalFrame f) {\r\n    File file = v.getFile();\r\n    String title;\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    if (v.hasUnsavedChanges()) {\r\n        title += \"*\";\r\n    }\r\n    v.setTitle(labels.getFormatted(\"internalFrame.title\", title, getName(), v.getMultipleOpenId()));\r\n    f.setTitle(v.getTitle());\r\n}'),(145,'wrapDesktopPane(java.awt.Component,java.util.LinkedList)','org.jhotdraw.app.DefaultMDIApplication.wrapDesktopPane(java.awt.Component,java.util.LinkedList)','7','org.jhotdraw.app.DefaultMDIApplication','/**\r\n * Returns the wrapped desktop pane.\r\n */\r\nprotected Component wrapDesktopPane(Component c, LinkedList<Action> toolBarActions) {\r\n    if ((getModel()) != null) {\r\n        int id = 0;\r\n        for (JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this, null))) {\r\n            id++;\r\n            JPanel panel = new JPanel(new BorderLayout());\r\n            panel.add(tb, BorderLayout.NORTH);\r\n            panel.add(c, BorderLayout.CENTER);\r\n            c = panel;\r\n            PreferencesUtil.installToolBarPrefsHandler(prefs, (\"toolbar.\" + id), tb);\r\n            toolBarActions.addFirst(new ToggleToolBarAction(tb, tb.getName()));\r\n        }\r\n        /* JToolBar tb = new JToolBar();\n        tb.setName(labels.getString(\"standardToolBarTitle\"));\n        addStandardActionsTo(tb);\n        id++;\n        JPanel panel = new JPanel(new BorderLayout());\n        panel.add(tb, BorderLayout.NORTH);\n        panel.add(c, BorderLayout.CENTER);\n        c = panel;\n        PreferencesUtil.installToolBarPrefsHandler(prefs, \"toolbar.\"+id, tb);\n        toolBarActions.addFirst(new ToggleToolBarAction(tb, tb.getName()));\n        panel.putClientProperty(\"toolBarActions\", toolBarActions);\n         */\r\n    }\r\n    return c;\r\n}'),(146,'-init-()','org.jhotdraw.app.DefaultOSXApplication.-init-()','8','org.jhotdraw.app.DefaultOSXApplication','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultOSXApplication() {\r\n}'),(147,'addPalette(java.awt.Window)','org.jhotdraw.app.DefaultOSXApplication.addPalette(java.awt.Window)','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void addPalette(Window palette) {\r\n    paletteHandler.addPalette(palette);\r\n}'),(148,'addViewWindowMenuItems(javax.swing.JMenu,org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.addViewWindowMenuItems(javax.swing.JMenu,org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','protected void addViewWindowMenuItems(JMenu m, View p) {\r\n    JMenuItem mi;\r\n    ApplicationModel model = getModel();\r\n    mi = m.add(model.getAction(MinimizeAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(MaximizeAction.ID));\r\n    mi.setIcon(null);\r\n}'),(149,'addWindow(java.awt.Window,org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.addWindow(java.awt.Window,org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void addWindow(Window window, final View p) {\r\n    if (window instanceof JFrame) {\r\n        ((JFrame) (window)).setJMenuBar(createMenuBar(p));\r\n    } else\r\n        if (window instanceof JDialog) {\r\n            // ((JDialog) window).setJMenuBar(createMenuBar(null));\r\n        }\r\n\r\n    paletteHandler.add(window, p);\r\n}'),(150,'configure(java.lang.String[])','org.jhotdraw.app.DefaultOSXApplication.configure(java.lang.String[])','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void configure(String[] args) {\r\n    System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\r\n    System.setProperty(\"com.apple.macos.useScreenMenuBar\", \"true\");\r\n}'),(151,'createFileMenu(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.createFileMenu(org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','protected JMenu createFileMenu(View p) {\r\n    // ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel model = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    mi = m.add(model.getAction(NewAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(OpenAction.ID));\r\n    mi.setIcon(null);\r\n    if ((model.getAction(OpenDirectoryAction.ID)) != null) {\r\n        mi = m.add(model.getAction(OpenDirectoryAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.setIcon(null);\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    mi = m.add(model.getAction(CloseAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(SaveAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(SaveAsAction.ID));\r\n    mi.setIcon(null);\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        mi = m.add(model.getAction(PrintAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == \"recentFiles\") {\r\n                updateOpenRecentMenu(openRecentMenu);\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}'),(152,'createMenuBar(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.createMenuBar(org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','/**\r\n * Creates a menu bar.\r\n *\r\n * @param p\r\n * 		The view for which the menu bar is created. This may be\r\n * 		<code>null</code> if the menu bar is attached to an application\r\n * 		component, such as the screen menu bar or a floating palette window.\r\n */\r\nprotected JMenuBar createMenuBar(View p) {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu(p));\r\n    for (JMenu mm : getModel().createMenus(this, p)) {\r\n        mb.add(mm);\r\n    }\r\n    // Determine the index of the help menu, if one has been provided\r\n    // Merge the help menu if one has been provided by the application model,\r\n    // otherwise just add it.\r\n    String helpMenuText = labels.getString(\"help.text\");\r\n    int index = mb.getComponentCount();\r\n    for (int i = 0, n = mb.getComponentCount(); i < n; i++) {\r\n        JMenu m = ((JMenu) (mb.getComponent(i)));\r\n        if (((m.getText()) != null) && (m.getText().equals(helpMenuText))) {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    mb.add(createWindowMenu(p), index);\r\n    return mb;\r\n}'),(153,'createWindowMenu(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.createWindowMenu(org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','protected JMenu createWindowMenu(final View p) {\r\n    ApplicationModel model = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    final JMenu windowMenu = m;\r\n    labels.configureMenu(m, \"window\");\r\n    addViewWindowMenuItems(m, p);\r\n    m.addSeparator();\r\n    for (View pr : views()) {\r\n        if ((pr.getAction(FocusAction.ID)) != null) {\r\n            windowMenu.add(pr.getAction(FocusAction.ID));\r\n        }\r\n    }\r\n    if ((paletteActions.size()) > 0) {\r\n        m.addSeparator();\r\n        for (Action a : paletteActions) {\r\n            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            cbmi.setIcon(null);\r\n            m.add(cbmi);\r\n        }\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if ((name == \"viewCount\") || (name == \"paletteCount\")) {\r\n                if ((p == null) || (views().contains(p))) {\r\n                    JMenu m = windowMenu;\r\n                    m.removeAll();\r\n                    addViewWindowMenuItems(m, p);\r\n                    m.addSeparator();\r\n                    for (Iterator i = views().iterator(); i.hasNext();) {\r\n                        View pr = ((View) (i.next()));\r\n                        if ((pr.getAction(FocusAction.ID)) != null) {\r\n                            m.add(pr.getAction(FocusAction.ID));\r\n                        }\r\n                    }\r\n                    if ((paletteActions.size()) > 0) {\r\n                        m.addSeparator();\r\n                        for (Action a : paletteActions) {\r\n                            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n                            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n                            cbmi.setIcon(null);\r\n                            m.add(cbmi);\r\n                        }\r\n                    }\r\n                } else {\r\n                    removePropertyChangeListener(this);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}'),(154,'getComponent()','org.jhotdraw.app.DefaultOSXApplication.getComponent()','8','org.jhotdraw.app.DefaultOSXApplication','public Component getComponent() {\r\n    return null;\r\n}'),(155,'hide(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.hide(org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        JFrame f = ((JFrame) (SwingUtilities.getWindowAncestor(p.getComponent())));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        // paletteHandler.remove(f, p);\r\n        removeWindow(f);\r\n        f.dispose();\r\n    }\r\n}'),(156,'init()','org.jhotdraw.app.DefaultOSXApplication.init()','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void init() {\r\n    ResourceBundleUtil.putPropertyNameModifier(\"os\", \"mac\", \"default\");\r\n    super.init();\r\n    prefs = Preferences.userNodeForPackage(((getModel()) == null ? getClass() : getModel().getClass()));\r\n    initLookAndFeel();\r\n    paletteHandler = new OSXPaletteHandler(this);\r\n    initLabels();\r\n    initApplicationActions();\r\n    getModel().initApplication(this);\r\n    paletteActions = new LinkedList<Action>();\r\n    initPalettes(paletteActions);\r\n    initScreenMenuBar();\r\n}'),(157,'initApplicationActions()','org.jhotdraw.app.DefaultOSXApplication.initApplicationActions()','8','org.jhotdraw.app.DefaultOSXApplication','protected void initApplicationActions() {\r\n    ApplicationModel mo = getModel();\r\n    mo.putAction(AboutAction.ID, new AboutAction(this));\r\n    mo.putAction(ExitAction.ID, new ExitAction(this));\r\n    mo.putAction(OSXDropOnDockAction.ID, new OSXDropOnDockAction(this));\r\n    mo.putAction(NewAction.ID, new NewAction(this));\r\n    mo.putAction(OpenAction.ID, new OpenAction(this));\r\n    mo.putAction(ClearRecentFilesAction.ID, new ClearRecentFilesAction(this));\r\n    mo.putAction(SaveAction.ID, new SaveAction(this));\r\n    mo.putAction(SaveAsAction.ID, new SaveAsAction(this));\r\n    mo.putAction(PrintAction.ID, new PrintAction(this));\r\n    mo.putAction(CloseAction.ID, new CloseAction(this));\r\n    mo.putAction(UndoAction.ID, new UndoAction(this));\r\n    mo.putAction(RedoAction.ID, new RedoAction(this));\r\n    mo.putAction(CutAction.ID, new CutAction());\r\n    mo.putAction(CopyAction.ID, new CopyAction());\r\n    mo.putAction(PasteAction.ID, new PasteAction());\r\n    mo.putAction(DeleteAction.ID, new DeleteAction());\r\n    mo.putAction(DuplicateAction.ID, new DuplicateAction());\r\n    mo.putAction(SelectAllAction.ID, new SelectAllAction());\r\n    mo.putAction(MaximizeAction.ID, new MaximizeAction(this));\r\n    mo.putAction(MinimizeAction.ID, new MinimizeAction(this));\r\n}'),(158,'initLookAndFeel()','org.jhotdraw.app.DefaultOSXApplication.initLookAndFeel()','8','org.jhotdraw.app.DefaultOSXApplication','protected void initLookAndFeel() {\r\n    try {\r\n        UIManager.setLookAndFeel(QuaquaManager.getLookAndFeelClassName());\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}'),(159,'initPalettes(java.util.LinkedList)','org.jhotdraw.app.DefaultOSXApplication.initPalettes(java.util.LinkedList)','8','org.jhotdraw.app.DefaultOSXApplication','protected void initPalettes(final LinkedList<Action> paletteActions) {\r\n    SwingUtilities.invokeLater(new Worker() {\r\n        public Object construct() {\r\n            LinkedList<JFrame> palettes = new LinkedList<JFrame>();\r\n            LinkedList<JToolBar> toolBars = new LinkedList<JToolBar>(getModel().createToolBars(DefaultOSXApplication.this, null));\r\n            int i = 0;\r\n            int x = 0;\r\n            for (JToolBar tb : toolBars) {\r\n                i++;\r\n                tb.setFloatable(false);\r\n                tb.setOrientation(JToolBar.VERTICAL);\r\n                tb.setFocusable(false);\r\n                JFrame d = new JFrame();\r\n                d.setFocusable(false);\r\n                d.setResizable(false);\r\n                d.getContentPane().setLayout(new BorderLayout());\r\n                d.getContentPane().add(tb, BorderLayout.CENTER);\r\n                d.setAlwaysOnTop(true);\r\n                d.setUndecorated(true);\r\n                d.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);\r\n                d.getRootPane().setFont(new Font(\"Lucida Grande\", Font.PLAIN, 11));\r\n                d.getRootPane().putClientProperty(\"Quaqua.RootPane.isVertical\", Boolean.FALSE);\r\n                d.getRootPane().putClientProperty(\"Quaqua.RootPane.isPalette\", Boolean.TRUE);\r\n                d.setJMenuBar(createMenuBar(null));\r\n                d.pack();\r\n                d.setFocusableWindowState(false);\r\n                PreferencesUtil.installPalettePrefsHandler(prefs, (\"toolbar.\" + i), d, x);\r\n                x += d.getWidth();\r\n                paletteActions.add(new OSXTogglePaletteAction(DefaultOSXApplication.this, d, tb.getName()));\r\n                palettes.add(d);\r\n            }\r\n            return palettes;\r\n        }\r\n\r\n        public void finished(Object result) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            LinkedList<JFrame> palettes = ((LinkedList<JFrame>) (result));\r\n            if (palettes != null) {\r\n                for (JFrame p : palettes) {\r\n                    addPalette(p);\r\n                }\r\n                firePropertyChange(\"paletteCount\", 0, palettes.size());\r\n            }\r\n        }\r\n    });\r\n}'),(160,'initScreenMenuBar()','org.jhotdraw.app.DefaultOSXApplication.initScreenMenuBar()','8','org.jhotdraw.app.DefaultOSXApplication','protected void initScreenMenuBar() {\r\n    ApplicationModel model = getModel();\r\n    Application mrjapp = Application.getInstance();\r\n    mrjapp.setFramelessJMenuBar(createMenuBar(null));\r\n    paletteHandler.add(SwingUtilities.getWindowAncestor(mrjapp.getFramelessJMenuBar()), null);\r\n    mrjapp.getAboutJMenuItem().setAction(model.getAction(AboutAction.ID));\r\n    mrjapp.getQuitJMenuItem().setAction(model.getAction(ExitAction.ID));\r\n    mrjapp.addOpenDocumentListener(model.getAction(OSXDropOnDockAction.ID));\r\n}'),(161,'initViewActions(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.initViewActions(org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','protected void initViewActions(View p) {\r\n    p.putAction(FocusAction.ID, new FocusAction(p));\r\n}'),(162,'isSharingToolsAmongViews()','org.jhotdraw.app.DefaultOSXApplication.isSharingToolsAmongViews()','8','org.jhotdraw.app.DefaultOSXApplication','public boolean isSharingToolsAmongViews() {\r\n    return true;\r\n}'),(163,'launch(java.lang.String[])','org.jhotdraw.app.DefaultOSXApplication.launch(java.lang.String[])','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void launch(String[] args) {\r\n    System.setProperty(\"apple.awt.graphics.UseQuartz\", \"false\");\r\n    super.launch(args);\r\n}'),(164,'removePalette(java.awt.Window)','org.jhotdraw.app.DefaultOSXApplication.removePalette(java.awt.Window)','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void removePalette(Window palette) {\r\n    paletteHandler.removePalette(palette);\r\n}'),(165,'removeWindow(java.awt.Window)','org.jhotdraw.app.DefaultOSXApplication.removeWindow(java.awt.Window)','8','org.jhotdraw.app.DefaultOSXApplication','@Override\r\npublic void removeWindow(Window window) {\r\n    paletteHandler.remove(window);\r\n}'),(166,'show(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultOSXApplication.show(org.jhotdraw.app.View)','8','org.jhotdraw.app.DefaultOSXApplication','public void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        f.setPreferredSize(new Dimension(400, 400));\r\n        updateViewTitle(p, f);\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"view\", f);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && (aView.isShowing())) && (SwingUtilities.getWindowAncestor(aView.getComponent()).getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        f.addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(final WindowEvent evt) {\r\n                setActiveView(p);\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(final WindowEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n\r\n            @Override\r\n            public void windowActivated(WindowEvent evt) {\r\n                setActiveView(p);\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name.equals(View.HAS_UNSAVED_CHANGES_PROPERTY)) {\r\n                    f.getRootPane().putClientProperty(\"windowModified\", new Boolean(p.hasUnsavedChanges()));\r\n                } else\r\n                    if (name.equals(View.FILE_PROPERTY)) {\r\n                        updateViewTitle(p, f);\r\n                    }\r\n\r\n            }\r\n        });\r\n        // f.setJMenuBar(createMenuBar(p));\r\n        // paletteHandler.add(f, p);\r\n        addWindow(f, p);\r\n        f.getContentPane().add(p.getComponent());\r\n        f.setVisible(true);\r\n        p.start();\r\n    }\r\n}'),(167,'updateOpenRecentMenu(javax.swing.JMenu)','org.jhotdraw.app.DefaultOSXApplication.updateOpenRecentMenu(javax.swing.JMenu)','8','org.jhotdraw.app.DefaultOSXApplication','protected void updateOpenRecentMenu(JMenu openRecentMenu) {\r\n    if ((openRecentMenu.getItemCount()) > 0) {\r\n        JMenuItem clearRecentFilesItem = ((JMenuItem) (openRecentMenu.getItem(((openRecentMenu.getItemCount()) - 1))));\r\n        openRecentMenu.removeAll();\r\n        for (File f : recentFiles()) {\r\n            openRecentMenu.add(new OpenRecentAction(this, f));\r\n        }\r\n        if ((recentFiles().size()) > 0) {\r\n            openRecentMenu.addSeparator();\r\n        }\r\n        openRecentMenu.add(clearRecentFilesItem);\r\n    }\r\n}'),(168,'updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)','org.jhotdraw.app.DefaultOSXApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)','8','org.jhotdraw.app.DefaultOSXApplication','/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param p\r\n * 		The view.\r\n * @param f\r\n * 		The frame.\r\n */\r\nprotected void updateViewTitle(View p, JFrame f) {\r\n    String title;\r\n    File file = p.getFile();\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    p.setTitle(labels.getFormatted(\"frame.title\", title, getName(), p.getMultipleOpenId()));\r\n    f.setTitle(p.getTitle());\r\n    // Adds a proxy icon for the file to the title bar\r\n    // See http://developer.apple.com/technotes/tn2007/tn2196.html#WINDOW_DOCUMENTFILE\r\n    f.getRootPane().putClientProperty(\"Window.documentFile\", file);\r\n}'),(169,'-init-()','org.jhotdraw.app.DefaultSDIApplication.-init-()','9','org.jhotdraw.app.DefaultSDIApplication','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultSDIApplication() {\r\n}'),(170,'configure(java.lang.String[])','org.jhotdraw.app.DefaultSDIApplication.configure(java.lang.String[])','9','org.jhotdraw.app.DefaultSDIApplication','@Override\r\npublic void configure(String[] args) {\r\n    System.setProperty(\"apple.laf.useScreenMenuBar\", \"false\");\r\n    System.setProperty(\"com.apple.macos.useScreenMenuBar\", \"false\");\r\n    System.setProperty(\"apple.awt.graphics.UseQuartz\", \"false\");\r\n    System.setProperty(\"swing.aatext\", \"true\");\r\n}'),(171,'createFileMenu(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.createFileMenu(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','protected JMenu createFileMenu(final View p) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenuBar mb = new JMenuBar();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    m.add(model.getAction(ClearAction.ID));\r\n    m.add(model.getAction(NewAction.ID));\r\n    m.add(model.getAction(LoadAction.ID));\r\n    if ((model.getAction(LoadDirectoryAction.ID)) != null) {\r\n        m.add(model.getAction(LoadDirectoryAction.ID));\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    m.add(model.getAction(SaveAction.ID));\r\n    m.add(model.getAction(SaveAsAction.ID));\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(model.getAction(PrintAction.ID));\r\n    }\r\n    m.addSeparator();\r\n    m.add(model.getAction(ExitAction.ID));\r\n    mb.add(m);\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == \"viewCount\") {\r\n                if ((p == null) || (views().contains(p))) {\r\n                } else {\r\n                    removePropertyChangeListener(this);\r\n                }\r\n            } else\r\n                if (name == \"recentFiles\") {\r\n                    updateOpenRecentMenu(openRecentMenu);\r\n                }\r\n\r\n        }\r\n    });\r\n    return m;\r\n}'),(172,'createHelpMenu(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.createHelpMenu(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','protected JMenu createHelpMenu(View p) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"help\");\r\n    m.add(model.getAction(AboutAction.ID));\r\n    return m;\r\n}'),(173,'createMenuBar(org.jhotdraw.app.View,java.util.List)','org.jhotdraw.app.DefaultSDIApplication.createMenuBar(org.jhotdraw.app.View,java.util.List)','9','org.jhotdraw.app.DefaultSDIApplication','/**\r\n * The view menu bar is displayed for a view.\r\n * The default implementation returns a new screen menu bar.\r\n */\r\nprotected JMenuBar createMenuBar(final View p, List<Action> toolBarActions) {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu(p));\r\n    JMenu lastMenu = null;\r\n    for (JMenu mm : getModel().createMenus(this, p)) {\r\n        mb.add(mm);\r\n        lastMenu = mm;\r\n    }\r\n    JMenu viewMenu = createViewMenu(p, toolBarActions);\r\n    if (viewMenu != null) {\r\n        if ((lastMenu != null) && (lastMenu.getText().equals(viewMenu.getText()))) {\r\n            for (Component c : lastMenu.getMenuComponents()) {\r\n                viewMenu.add(c);\r\n            }\r\n            mb.remove(lastMenu);\r\n        }\r\n        mb.add(viewMenu);\r\n    }\r\n    // Merge the help menu if one has been provided by the application model,\r\n    // otherwise just add it.\r\n    JMenu helpMenu = createHelpMenu(p);\r\n    for (Component mc : mb.getComponents()) {\r\n        JMenu m = ((JMenu) (mc));\r\n        if (m.getText().equals(helpMenu.getText())) {\r\n            for (Component c : helpMenu.getMenuComponents()) {\r\n                m.add(c);\r\n            }\r\n            helpMenu = null;\r\n            break;\r\n        }\r\n    }\r\n    if (helpMenu != null) {\r\n        mb.add(helpMenu);\r\n    }\r\n    return mb;\r\n}'),(174,'createViewMenu(org.jhotdraw.app.View,java.util.List)','org.jhotdraw.app.DefaultSDIApplication.createViewMenu(org.jhotdraw.app.View,java.util.List)','9','org.jhotdraw.app.DefaultSDIApplication','/**\r\n * Creates the view menu.\r\n *\r\n * @param p\r\n * 		The View\r\n * @param viewActions\r\n * 		Actions for the view menu\r\n * @return A JMenu or null, if no view actions are provided\r\n */\r\nprotected JMenu createViewMenu(final View p, List<Action> viewActions) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JCheckBoxMenuItem cbmi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    if ((viewActions != null) && ((viewActions.size()) > 0)) {\r\n        m2 = ((viewActions.size()) == 1) ? m : new JMenu(labels.getString(\"toolBars\"));\r\n        labels.configureMenu(m, \"view\");\r\n        for (Action a : viewActions) {\r\n            cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            m2.add(cbmi);\r\n        }\r\n        if (m2 != m) {\r\n            m.add(m2);\r\n        }\r\n    }\r\n    return (m.getComponentCount()) > 0 ? m : null;\r\n}'),(175,'dispose(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.dispose(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','public void dispose(View p) {\r\n    super.dispose(p);\r\n    if ((views().size()) == 0) {\r\n        stop();\r\n    }\r\n}'),(176,'getComponent()','org.jhotdraw.app.DefaultSDIApplication.getComponent()','9','org.jhotdraw.app.DefaultSDIApplication','public Component getComponent() {\r\n    View p = getActiveView();\r\n    return p == null ? null : p.getComponent();\r\n}'),(177,'hide(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.hide(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        p.setShowing(false);\r\n        JFrame f = ((JFrame) (SwingUtilities.getWindowAncestor(p.getComponent())));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        f.dispose();\r\n    }\r\n}'),(178,'init()','org.jhotdraw.app.DefaultSDIApplication.init()','9','org.jhotdraw.app.DefaultSDIApplication','@Override\r\npublic void init() {\r\n    initLookAndFeel();\r\n    super.init();\r\n    prefs = Preferences.userNodeForPackage(((getModel()) == null ? getClass() : getModel().getClass()));\r\n    initLabels();\r\n    initApplicationActions();\r\n}'),(179,'initApplicationActions()','org.jhotdraw.app.DefaultSDIApplication.initApplicationActions()','9','org.jhotdraw.app.DefaultSDIApplication','protected void initApplicationActions() {\r\n    ResourceBundleUtil appLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel m = getModel();\r\n    m.putAction(AboutAction.ID, new AboutAction(this));\r\n    m.putAction(ExitAction.ID, new ExitAction(this));\r\n    m.putAction(ClearAction.ID, new ClearAction(this));\r\n    m.putAction(NewAction.ID, new NewAction(this));\r\n    appLabels.configureAction(m.getAction(NewAction.ID), \"window.new\");\r\n    m.putAction(LoadAction.ID, new LoadAction(this));\r\n    m.putAction(ClearRecentFilesAction.ID, new ClearRecentFilesAction(this));\r\n    m.putAction(SaveAction.ID, new SaveAction(this));\r\n    m.putAction(SaveAsAction.ID, new SaveAsAction(this));\r\n    m.putAction(CloseAction.ID, new CloseAction(this));\r\n    m.putAction(PrintAction.ID, new PrintAction(this));\r\n    m.putAction(UndoAction.ID, new UndoAction(this));\r\n    m.putAction(RedoAction.ID, new RedoAction(this));\r\n    m.putAction(CutAction.ID, new CutAction());\r\n    m.putAction(CopyAction.ID, new CopyAction());\r\n    m.putAction(PasteAction.ID, new PasteAction());\r\n    m.putAction(DeleteAction.ID, new DeleteAction());\r\n    m.putAction(DuplicateAction.ID, new DuplicateAction());\r\n    m.putAction(SelectAllAction.ID, new SelectAllAction());\r\n}'),(180,'initLookAndFeel()','org.jhotdraw.app.DefaultSDIApplication.initLookAndFeel()','9','org.jhotdraw.app.DefaultSDIApplication','protected void initLookAndFeel() {\r\n    try {\r\n        String lafName;\r\n        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"mac os x\")) {\r\n            JFrame.setDefaultLookAndFeelDecorated(true);\r\n            JDialog.setDefaultLookAndFeelDecorated(true);\r\n            lafName = UIManager.getCrossPlatformLookAndFeelClassName();\r\n        } else {\r\n            lafName = UIManager.getSystemLookAndFeelClassName();\r\n        }\r\n        UIManager.setLookAndFeel(lafName);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    if ((UIManager.getString(\"OptionPane.css\")) == null) {\r\n        UIManager.put(\"OptionPane.css\", \"\");\r\n    }\r\n}'),(181,'initViewActions(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.initViewActions(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','protected void initViewActions(View p) {\r\n    ApplicationModel m = getModel();\r\n    p.putAction(LoadAction.ID, m.getAction(LoadAction.ID));\r\n}'),(182,'isSharingToolsAmongViews()','org.jhotdraw.app.DefaultSDIApplication.isSharingToolsAmongViews()','9','org.jhotdraw.app.DefaultSDIApplication','public boolean isSharingToolsAmongViews() {\r\n    return false;\r\n}'),(183,'launch(java.lang.String[])','org.jhotdraw.app.DefaultSDIApplication.launch(java.lang.String[])','9','org.jhotdraw.app.DefaultSDIApplication','@Override\r\npublic void launch(String[] args) {\r\n    System.setProperty(\"apple.awt.graphics.UseQuartz\", \"false\");\r\n    super.launch(args);\r\n}'),(184,'remove(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.remove(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','@Override\r\npublic void remove(View p) {\r\n    super.remove(p);\r\n    if ((views().size()) == 0) {\r\n        stop();\r\n    }\r\n}'),(185,'show(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.show(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','@SuppressWarnings(\"unchecked\")\r\npublic void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        updateViewTitle(p, f);\r\n        JPanel panel = ((JPanel) (wrapViewComponent(p)));\r\n        f.add(panel);\r\n        f.setMinimumSize(new Dimension(200, 200));\r\n        f.setPreferredSize(new Dimension(600, 400));\r\n        f.setJMenuBar(createMenuBar(p, ((List<Action>) (panel.getClientProperty(\"toolBarActions\")))));\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"view\", f);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && ((SwingUtilities.getWindowAncestor(aView.getComponent())) != null)) && (SwingUtilities.getWindowAncestor(aView.getComponent()).getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        f.addWindowListener(new WindowAdapter() {\r\n            public void windowClosing(final WindowEvent evt) {\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(final WindowEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n\r\n            public void windowActivated(WindowEvent e) {\r\n                setActiveView(p);\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (((name.equals(View.HAS_UNSAVED_CHANGES_PROPERTY)) || (name.equals(View.FILE_PROPERTY))) || (name.equals(View.MULTIPLE_OPEN_ID_PROPERTY))) {\r\n                    updateViewTitle(p, f);\r\n                }\r\n            }\r\n        });\r\n        f.setVisible(true);\r\n        p.start();\r\n    }\r\n}'),(186,'updateOpenRecentMenu(javax.swing.JMenu)','org.jhotdraw.app.DefaultSDIApplication.updateOpenRecentMenu(javax.swing.JMenu)','9','org.jhotdraw.app.DefaultSDIApplication','/**\r\n * Updates the \"file &gt; open recent\" menu item.\r\n *\r\n * @param openRecentMenu\r\n * 		\r\n */\r\nprotected void updateOpenRecentMenu(JMenu openRecentMenu) {\r\n    if ((openRecentMenu.getItemCount()) > 0) {\r\n        JMenuItem clearRecentFilesItem = ((JMenuItem) (openRecentMenu.getItem(((openRecentMenu.getItemCount()) - 1))));\r\n        openRecentMenu.removeAll();\r\n        for (File f : recentFiles()) {\r\n            openRecentMenu.add(new LoadRecentAction(this, f));\r\n        }\r\n        if ((recentFiles().size()) > 0) {\r\n            openRecentMenu.addSeparator();\r\n        }\r\n        openRecentMenu.add(clearRecentFilesItem);\r\n    }\r\n}'),(187,'updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)','org.jhotdraw.app.DefaultSDIApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)','9','org.jhotdraw.app.DefaultSDIApplication','/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param p\r\n * 		The view.\r\n * @param f\r\n * 		The frame.\r\n */\r\nprotected void updateViewTitle(View p, JFrame f) {\r\n    File file = p.getFile();\r\n    String title;\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    if (p.hasUnsavedChanges()) {\r\n        title += \"*\";\r\n    }\r\n    p.setTitle(labels.getFormatted(\"frame.title\", title, getName(), p.getMultipleOpenId()));\r\n    f.setTitle(p.getTitle());\r\n}'),(188,'wrapViewComponent(org.jhotdraw.app.View)','org.jhotdraw.app.DefaultSDIApplication.wrapViewComponent(org.jhotdraw.app.View)','9','org.jhotdraw.app.DefaultSDIApplication','/**\r\n * Returns the view component. Eventually wraps it into\r\n * another component in order to provide additional functionality.\r\n */\r\nprotected Component wrapViewComponent(View p) {\r\n    JComponent c = p.getComponent();\r\n    if ((getModel()) != null) {\r\n        LinkedList<Action> toolBarActions = new LinkedList<Action>();\r\n        int id = 0;\r\n        for (JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this, p))) {\r\n            id++;\r\n            JPanel panel = new JPanel(new BorderLayout());\r\n            panel.add(tb, BorderLayout.NORTH);\r\n            panel.add(c, BorderLayout.CENTER);\r\n            c = panel;\r\n            PreferencesUtil.installToolBarPrefsHandler(prefs, (\"toolbar.\" + id), tb);\r\n            toolBarActions.addFirst(new ToggleVisibleAction(tb, tb.getName()));\r\n        }\r\n        c.putClientProperty(\"toolBarActions\", toolBarActions);\r\n    }\r\n    return c;\r\n}'),(189,'getOpenDirectoryChooser()','org.jhotdraw.app.DirectoryView.getOpenDirectoryChooser()','10','org.jhotdraw.app.DirectoryView','/**\r\n * Gets the file chooser for opening a directory for the view.\r\n */\r\npublic JFileChooser getOpenDirectoryChooser();'),(190,'clearSelection()','org.jhotdraw.app.EditableComponent.clearSelection()','11','org.jhotdraw.app.EditableComponent','/**\r\n * Selects nothing.\r\n */\r\npublic void clearSelection();'),(191,'delete()','org.jhotdraw.app.EditableComponent.delete()','11','org.jhotdraw.app.EditableComponent','/**\r\n * Deletes the component at (or after) the caret position.\r\n */\r\npublic void delete();'),(192,'duplicate()','org.jhotdraw.app.EditableComponent.duplicate()','11','org.jhotdraw.app.EditableComponent','/**\r\n * Duplicates the selected region.\r\n */\r\npublic void duplicate();'),(193,'selectAll()','org.jhotdraw.app.EditableComponent.selectAll()','11','org.jhotdraw.app.EditableComponent','/**\r\n * Selects all.\r\n */\r\npublic void selectAll();'),(194,'export(java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','org.jhotdraw.app.ExportableView.export(java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','12','org.jhotdraw.app.ExportableView','/**\r\n * Exports the view.\r\n * By convention this method is never invoked on the AWT Event Dispatcher Thread.\r\n *\r\n * @param f\r\n * 		The file to which export the view.\r\n * @param filter\r\n * 		The FileFilter that was used to choose the file. This can be null.\r\n * @param accessory\r\n * 		The Accessory used by the JFileChooser. This can be null.\r\n */\r\npublic void export(File f, FileFilter filter, Component accessory) throws IOException;'),(195,'getExportChooser()','org.jhotdraw.app.ExportableView.getExportChooser()','12','org.jhotdraw.app.ExportableView','/**\r\n * Gets the file chooser for exporting the view.\r\n */\r\npublic JFileChooser getExportChooser();'),(196,'-init-()','org.jhotdraw.app.OSXPaletteHandler.-init-()','13','org.jhotdraw.app.OSXPaletteHandler','1() {\r\n}'),(197,'-init-(org.jhotdraw.app.DefaultOSXApplication)','org.jhotdraw.app.OSXPaletteHandler.-init-(org.jhotdraw.app.DefaultOSXApplication)','13','org.jhotdraw.app.OSXPaletteHandler','/**\r\n * Creates a new instance.\r\n */\r\npublic OSXPaletteHandler(DefaultOSXApplication app) {\r\n    this.app = app;\r\n    timer = new Timer(60, new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            maybeHidePalettes();\r\n        }\r\n    });\r\n    timer.setRepeats(false);\r\n}'),(198,'add(java.awt.Window,org.jhotdraw.app.View)','org.jhotdraw.app.OSXPaletteHandler.add(java.awt.Window,org.jhotdraw.app.View)','13','org.jhotdraw.app.OSXPaletteHandler','public void add(Window window, View view) {\r\n    window.addWindowFocusListener(focusHandler);\r\n    windows.put(window, view);\r\n}'),(199,'addPalette(java.awt.Window)','org.jhotdraw.app.OSXPaletteHandler.addPalette(java.awt.Window)','13','org.jhotdraw.app.OSXPaletteHandler','public void addPalette(Window palette) {\r\n    palette.addWindowFocusListener(focusHandler);\r\n    palettes.add(palette);\r\n}'),(200,'addWindow(java.awt.Window)','org.jhotdraw.app.OSXPaletteHandler.addWindow(java.awt.Window)','13','org.jhotdraw.app.OSXPaletteHandler','public void addWindow(Window window) {\r\n    window.addWindowFocusListener(focusHandler);\r\n    windows.put(window, null);\r\n}'),(201,'getPalettes()','org.jhotdraw.app.OSXPaletteHandler.getPalettes()','13','org.jhotdraw.app.OSXPaletteHandler','public Set<Window> getPalettes() {\r\n    return Collections.unmodifiableSet(palettes);\r\n}'),(202,'isFocused(java.awt.Window)','org.jhotdraw.app.OSXPaletteHandler.isFocused(java.awt.Window)','13','org.jhotdraw.app.OSXPaletteHandler','private boolean isFocused(Window w) {\r\n    if (w.isFocused())\r\n        return true;\r\n\r\n    Window[] ownedWindows = w.getOwnedWindows();\r\n    for (int i = 0; i < (ownedWindows.length); i++) {\r\n        if (isFocused(ownedWindows[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(203,'maybeHidePalettes()','org.jhotdraw.app.OSXPaletteHandler.maybeHidePalettes()','13','org.jhotdraw.app.OSXPaletteHandler','private void maybeHidePalettes() {\r\n    boolean hasFocus = false;\r\n    for (Window window : windows.keySet()) {\r\n        if (isFocused(window)) {\r\n            hasFocus = true;\r\n            break;\r\n        }\r\n    }\r\n    if ((!hasFocus) && ((windows.size()) > 0)) {\r\n        for (Window palette : palettes) {\r\n            if (isFocused(palette)) {\r\n                hasFocus = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!hasFocus) {\r\n        for (Window palette : palettes) {\r\n            palette.setVisible(false);\r\n        }\r\n    }\r\n}'),(204,'remove(java.awt.Window)','org.jhotdraw.app.OSXPaletteHandler.remove(java.awt.Window)','13','org.jhotdraw.app.OSXPaletteHandler','public void remove(Window window) {\r\n    windows.remove(window);\r\n    window.removeWindowFocusListener(focusHandler);\r\n}'),(205,'removePalette(java.awt.Window)','org.jhotdraw.app.OSXPaletteHandler.removePalette(java.awt.Window)','13','org.jhotdraw.app.OSXPaletteHandler','public void removePalette(Window palette) {\r\n    palettes.remove(palette);\r\n    palette.removeWindowFocusListener(focusHandler);\r\n}'),(206,'removeWindow(java.awt.Window)','org.jhotdraw.app.OSXPaletteHandler.removeWindow(java.awt.Window)','13','org.jhotdraw.app.OSXPaletteHandler','public void removeWindow(Window window) {\r\n    windows.remove(window);\r\n    window.removeWindowFocusListener(focusHandler);\r\n}'),(207,'showPalettes()','org.jhotdraw.app.OSXPaletteHandler.showPalettes()','13','org.jhotdraw.app.OSXPaletteHandler','private void showPalettes() {\r\n    for (Window palette : palettes) {\r\n        if (!(palette.isVisible())) {\r\n            palette.setVisible(true);\r\n        }\r\n    }\r\n}'),(208,'createPageable()','org.jhotdraw.app.PrintableView.createPageable()','14','org.jhotdraw.app.PrintableView','public Pageable createPageable();'),(209,'activate()','org.jhotdraw.app.View.activate()','15','org.jhotdraw.app.View','/**\r\n * Activates the view.\r\n * This occurs, when the user activated the parent window of the view.\r\n * Only one view can be active at any given time.\r\n * This method is only invoked on a started view.\r\n */\r\npublic void activate();'),(210,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.app.View.addPropertyChangeListener(java.beans.PropertyChangeListener)','15','org.jhotdraw.app.View','/**\r\n * Adds a property change listener.\r\n */\r\npublic void addPropertyChangeListener(PropertyChangeListener l);'),(211,'canSaveTo(java.io.File)','org.jhotdraw.app.View.canSaveTo(java.io.File)','15','org.jhotdraw.app.View','/**\r\n * Returns true, if this view can be saved to the specified file.\r\n * A reason why the view cant be saved to a file, is that the\r\n * view is unable to write to a file with the given filename\r\n * extension without losing data.\r\n * <p>\r\n * The SaveAction uses this method to decide, whether to display\r\n * a file dialog before saving the file.\r\n *\r\n * @param file\r\n * 		A file. If this parameter is null, a NullPointerException\r\n * 		is thrown.\r\n */\r\npublic boolean canSaveTo(File file);'),(212,'clear()','org.jhotdraw.app.View.clear()','15','org.jhotdraw.app.View','/**\r\n * Clears the view, for example by emptying the contents of\r\n * the view, or by reading a template contents from a file.\r\n * By convention this method is never invoked on the AWT Event Dispatcher Thread.\r\n */\r\npublic void clear();'),(213,'deactivate()','org.jhotdraw.app.View.deactivate()','15','org.jhotdraw.app.View','/**\r\n * Deactivates the view.\r\n * This occurs, when the user closes the view, or activated another view.\r\n * This method is only invoked on a started view.\r\n */\r\npublic void deactivate();'),(214,'dispose()','org.jhotdraw.app.View.dispose()','15','org.jhotdraw.app.View','/**\r\n * Gets rid of all the resources of the view.\r\n * No other methods should be invoked on the view afterwards.\r\n * A view must not consume many resources after method dispose() has been called.\r\n * This is crucial for the responsivenes of an application.\r\n */\r\npublic void dispose();'),(215,'execute(java.lang.Runnable)','org.jhotdraw.app.View.execute(java.lang.Runnable)','15','org.jhotdraw.app.View','/**\r\n * Executes the specified runnable on the worker thread of the view.\r\n * Execution is perfomred sequentially in the same sequence as the\r\n * runnables have been passed to this method.\r\n */\r\npublic void execute(Runnable worker);'),(216,'getAction(java.lang.String)','org.jhotdraw.app.View.getAction(java.lang.String)','15','org.jhotdraw.app.View','/**\r\n * Returns the action with the specified id.\r\n */\r\npublic Action getAction(String id);'),(217,'getApplication()','org.jhotdraw.app.View.getApplication()','15','org.jhotdraw.app.View','/**\r\n * Gets the application to which this view belongs.\r\n */\r\npublic Application getApplication();'),(218,'getComponent()','org.jhotdraw.app.View.getComponent()','15','org.jhotdraw.app.View','/**\r\n * Returns the visual component of the view.\r\n */\r\npublic JComponent getComponent();'),(219,'getFile()','org.jhotdraw.app.View.getFile()','15','org.jhotdraw.app.View','/**\r\n * Returns the file which holds the document of the view.\r\n */\r\npublic File getFile();'),(220,'getMultipleOpenId()','org.jhotdraw.app.View.getMultipleOpenId()','15','org.jhotdraw.app.View','/**\r\n * Returns the multiple open id.\r\n * If a view is open only once this should be 1.\r\n */\r\npublic int getMultipleOpenId();'),(221,'getOpenChooser()','org.jhotdraw.app.View.getOpenChooser()','15','org.jhotdraw.app.View','/**\r\n * Gets the open file chooser for the view.\r\n */\r\npublic JFileChooser getOpenChooser();'),(222,'getSaveChooser()','org.jhotdraw.app.View.getSaveChooser()','15','org.jhotdraw.app.View','/**\r\n * Gets the save file chooser for the view.\r\n */\r\npublic JFileChooser getSaveChooser();'),(223,'getTitle()','org.jhotdraw.app.View.getTitle()','15','org.jhotdraw.app.View','/**\r\n * Gets the title of the view.\r\n */\r\npublic String getTitle();'),(224,'hasUnsavedChanges()','org.jhotdraw.app.View.hasUnsavedChanges()','15','org.jhotdraw.app.View','/**\r\n * Returns true, if the view has unsaved changes.\r\n * This is a bound property.\r\n */\r\npublic boolean hasUnsavedChanges();'),(225,'init()','org.jhotdraw.app.View.init()','15','org.jhotdraw.app.View','/**\r\n * Initializes the view.\r\n * This is invoked right before the application shows the view.\r\n * A view must not consume many resources before method init() is called.\r\n * This is crucial for the responsivenes of an application.\r\n * <p>\r\n * After a view has been initialized using init(),\r\n * either method clear() must be called\r\n * or method read, in order to fully initialize a  View.\r\n */\r\npublic void init();'),(226,'isEnabled()','org.jhotdraw.app.View.isEnabled()','15','org.jhotdraw.app.View','/**\r\n * Returns the enabled state of the view.\r\n */\r\npublic boolean isEnabled();'),(227,'isShowing()','org.jhotdraw.app.View.isShowing()','15','org.jhotdraw.app.View','/**\r\n * This is used by Application to keep track if a view is showing.\r\n */\r\npublic boolean isShowing();'),(228,'markChangesAsSaved()','org.jhotdraw.app.View.markChangesAsSaved()','15','org.jhotdraw.app.View','/**\r\n * Marks all changes as saved.\r\n * This changes the state of hasUnsavedChanges to false.\r\n */\r\npublic void markChangesAsSaved();'),(229,'putAction(java.lang.String,javax.swing.Action)','org.jhotdraw.app.View.putAction(java.lang.String,javax.swing.Action)','15','org.jhotdraw.app.View','/**\r\n * Puts an action with the specified id.\r\n */\r\npublic void putAction(String id, Action action);'),(230,'read(java.io.File)','org.jhotdraw.app.View.read(java.io.File)','15','org.jhotdraw.app.View','/**\r\n * Reads the view from the specified file.\r\n * By convention this method is never invoked on the AWT Event Dispatcher Thread.\r\n */\r\npublic void read(File f) throws IOException;'),(231,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.app.View.removePropertyChangeListener(java.beans.PropertyChangeListener)','15','org.jhotdraw.app.View','/**\r\n * Removes a property change listener.\r\n */\r\npublic void removePropertyChangeListener(PropertyChangeListener l);'),(232,'setApplication(org.jhotdraw.app.Application)','org.jhotdraw.app.View.setApplication(org.jhotdraw.app.Application)','15','org.jhotdraw.app.View','/**\r\n * Sets the application of the view.\r\n * By convention, this is only invoked by Application.add() and\r\n * Application.remove().\r\n * This is a bound property.\r\n */\r\npublic void setApplication(Application newValue);'),(233,'setEnabled(boolean)','org.jhotdraw.app.View.setEnabled(boolean)','15','org.jhotdraw.app.View','/**\r\n * Sets the enabled state of the view.\r\n *\r\n * The enabled state is used to prevent parallel invocation of actions\r\n * on the view. If an action consists of a sequential part and a\r\n * concurrent part, it must disable the view only for the sequential\r\n * part.\r\n *\r\n * Actions that act on the view must check in their actionPerformed\r\n * method whether the view is enabled.\r\n * If the view is disabled, they must do nothing.\r\n * If the view is enabled, they must disable the view,\r\n * perform the action and then enable the view again.\r\n *\r\n * This is a bound property.\r\n */\r\npublic void setEnabled(boolean newValue);'),(234,'setFile(java.io.File)','org.jhotdraw.app.View.setFile(java.io.File)','15','org.jhotdraw.app.View','/**\r\n * Sets the file of the view.\r\n * This is a bound property.\r\n */\r\npublic void setFile(File newValue);'),(235,'setMultipleOpenId(int)','org.jhotdraw.app.View.setMultipleOpenId(int)','15','org.jhotdraw.app.View','/**\r\n * Sets the multiple open id.\r\n * The id is used to help distinguish multiply opened views.\r\n * The id should be displayed in the title of the view.\r\n */\r\npublic void setMultipleOpenId(int newValue);'),(236,'setShowing(boolean)','org.jhotdraw.app.View.setShowing(boolean)','15','org.jhotdraw.app.View','/**\r\n * This is used by Application to keep track if a view is showing.\r\n */\r\npublic void setShowing(boolean newValue);'),(237,'setTitle(java.lang.String)','org.jhotdraw.app.View.setTitle(java.lang.String)','15','org.jhotdraw.app.View','/**\r\n * Sets the title of the view.\r\n * <p>\r\n * The title is generated by the application, based on the current\r\n * file of the view. The application ensures that the title uniquely\r\n * identifies each open view.\r\n * <p>\r\n * The application displays the title in the title bar of the view\r\n * window and in all windows which are associated to the view.\r\n * <p>\r\n * This is a bound property.\r\n */\r\npublic void setTitle(String newValue);'),(238,'start()','org.jhotdraw.app.View.start()','15','org.jhotdraw.app.View','/**\r\n * Starts the view.\r\n * Invoked after a view has been made visible to the user.\r\n * Multiple view can be visible at the same time.\r\n */\r\npublic void start();'),(239,'stop()','org.jhotdraw.app.View.stop()','15','org.jhotdraw.app.View','/**\r\n * Stops the view.\r\n * Invoked after a view window has been minimized or made invisible.\r\n */\r\npublic void stop();'),(240,'write(java.io.File)','org.jhotdraw.app.View.write(java.io.File)','15','org.jhotdraw.app.View','/**\r\n * Writes the view to the specified file.\r\n * By convention this method is never invoked on the AWT Event Dispatcher Thread.\r\n */\r\npublic void write(File f) throws IOException;'),(241,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.AboutAction.-init-(org.jhotdraw.app.Application)','16','org.jhotdraw.app.action.AboutAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AboutAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, AboutAction.ID);\r\n}'),(242,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.AboutAction.actionPerformed(java.awt.event.ActionEvent)','16','org.jhotdraw.app.action.AboutAction','public void actionPerformed(ActionEvent evt) {\r\n    Application app = getApplication();\r\n    JOptionPane.showMessageDialog(app.getComponent(), (((((((((app.getName()) + \" \") + (app.getVersion())) + \"\n\") + (app.getCopyright())) + \"\n\nRunning on Java \") + (System.getProperty(\"java.vm.version\"))) + \", \") + (System.getProperty(\"java.vendor\"))), \"About\", JOptionPane.PLAIN_MESSAGE);\r\n}'),(243,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.AbstractApplicationAction.-init-(org.jhotdraw.app.Application)','17','org.jhotdraw.app.action.AbstractApplicationAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractApplicationAction(Application app) {\r\n    this.app = app;\r\n    installApplicationListeners(app);\r\n    updateApplicationEnabled();\r\n}'),(244,'-init-()','org.jhotdraw.app.action.AbstractApplicationAction.-init-()','17','org.jhotdraw.app.action.AbstractApplicationAction','1() {\r\n}'),(245,'createApplicationListener()','org.jhotdraw.app.action.AbstractApplicationAction.createApplicationListener()','17','org.jhotdraw.app.action.AbstractApplicationAction','private PropertyChangeListener createApplicationListener() {\r\n    return new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if ((evt.getPropertyName()) == \"enabled\") {\r\n                // Strings get interned\r\n                updateApplicationEnabled();\r\n            }\r\n        }\r\n    };\r\n}'),(246,'getApplication()','org.jhotdraw.app.action.AbstractApplicationAction.getApplication()','17','org.jhotdraw.app.action.AbstractApplicationAction','public Application getApplication() {\r\n    return app;\r\n}'),(247,'installApplicationListeners(org.jhotdraw.app.Application)','org.jhotdraw.app.action.AbstractApplicationAction.installApplicationListeners(org.jhotdraw.app.Application)','17','org.jhotdraw.app.action.AbstractApplicationAction','/**\r\n * Installs listeners on the application object.\r\n */\r\nprotected void installApplicationListeners(Application app) {\r\n    if ((applicationListener) == null) {\r\n        applicationListener = createApplicationListener();\r\n    }\r\n    app.addPropertyChangeListener(applicationListener);\r\n}'),(248,'isEnabled()','org.jhotdraw.app.action.AbstractApplicationAction.isEnabled()','17','org.jhotdraw.app.action.AbstractApplicationAction','/**\r\n * Returns true if the action is enabled.\r\n * The enabled state of the action depends on the state that has been set\r\n * using setEnabled() and on the enabled state of the application.\r\n *\r\n * @return true if the action is enabled, false otherwise\r\n * @see Action#isEnabled\r\n */\r\n@Override\r\npublic boolean isEnabled() {\r\n    return (app.isEnabled()) && (enabled);\r\n}'),(249,'setEnabled(boolean)','org.jhotdraw.app.action.AbstractApplicationAction.setEnabled(boolean)','17','org.jhotdraw.app.action.AbstractApplicationAction','/**\r\n * Enables or disables the action. The enabled state of the action\r\n * depends on the value that is set here and on the enabled state of\r\n * the application.\r\n *\r\n * @param newValue\r\n * 		true to enable the action, false to\r\n * 		disable it\r\n * @see Action#setEnabled\r\n */\r\n@Override\r\npublic void setEnabled(boolean newValue) {\r\n    boolean oldValue = this.enabled;\r\n    this.enabled = newValue;\r\n    firePropertyChange(\"enabled\", Boolean.valueOf((oldValue && (app.isEnabled()))), Boolean.valueOf((newValue && (app.isEnabled()))));\r\n}'),(250,'uninstallApplicationListeners(org.jhotdraw.app.Application)','org.jhotdraw.app.action.AbstractApplicationAction.uninstallApplicationListeners(org.jhotdraw.app.Application)','17','org.jhotdraw.app.action.AbstractApplicationAction','/**\r\n * Installs listeners on the application object.\r\n */\r\nprotected void uninstallApplicationListeners(Application app) {\r\n    app.removePropertyChangeListener(applicationListener);\r\n}'),(251,'updateApplicationEnabled()','org.jhotdraw.app.action.AbstractApplicationAction.updateApplicationEnabled()','17','org.jhotdraw.app.action.AbstractApplicationAction','/**\r\n * Updates the enabled state of this action depending on the new enabled\r\n * state of the application.\r\n */\r\nprotected void updateApplicationEnabled() {\r\n    firePropertyChange(\"enabled\", Boolean.valueOf((!(isEnabled()))), Boolean.valueOf(isEnabled()));\r\n}'),(252,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.AbstractSaveBeforeAction.-init-(org.jhotdraw.app.Application)','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractSaveBeforeAction(Application app) {\r\n    super(app);\r\n}'),(253,'-init-()','org.jhotdraw.app.action.AbstractSaveBeforeAction.-init-()','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','1() {\r\n}'),(254,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.AbstractSaveBeforeAction.actionPerformed(java.awt.event.ActionEvent)','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','public void actionPerformed(ActionEvent evt) {\r\n    final View p = getActiveView();\r\n    if (p.isEnabled()) {\r\n        final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        Window wAncestor = SwingUtilities.getWindowAncestor(p.getComponent());\r\n        oldFocusOwner = (wAncestor == null) ? null : wAncestor.getFocusOwner();\r\n        p.setEnabled(false);\r\n        if (p.hasUnsavedChanges()) {\r\n            JOptionPane pane = new JOptionPane(((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + (labels.getString(\"file.saveBefore.doYouWantToSave.message\"))), JOptionPane.WARNING_MESSAGE);\r\n            Object[] options = new Object[]{ // \r\n            labels.getString(\"file.saveBefore.saveOption.text\")// \r\n            , labels.getString(\"file.saveBefore.cancelOption.text\")// \r\n            , labels.getString(\"file.saveBefore.dontSaveOption.text\")// \r\n             };\r\n            pane.setOptions(options);\r\n            pane.setInitialValue(options[0]);\r\n            pane.putClientProperty(\"Quaqua.OptionPane.destructiveOption\", new Integer(2));\r\n            JSheet.showSheet(pane, p.getComponent(), new SheetListener() {\r\n                public void optionSelected(SheetEvent evt) {\r\n                    Object value = evt.getValue();\r\n                    if ((value == null) || (value.equals(labels.getString(\"file.saveBefore.cancelOption.text\")))) {\r\n                        p.setEnabled(true);\r\n                    } else\r\n                        if (value.equals(labels.getString(\"file.saveBefore.dontSaveOption.text\"))) {\r\n                            doIt(p);\r\n                            p.setEnabled(true);\r\n                        } else\r\n                            if (value.equals(labels.getString(\"file.saveBefore.saveOption.text\"))) {\r\n                                saveChanges(p);\r\n                            }\r\n\r\n\r\n                }\r\n            });\r\n        } else {\r\n            doIt(p);\r\n            p.setEnabled(true);\r\n            if ((oldFocusOwner) != null) {\r\n                oldFocusOwner.requestFocus();\r\n            }\r\n        }\r\n    }\r\n}'),(255,'doIt(org.jhotdraw.app.View)','org.jhotdraw.app.action.AbstractSaveBeforeAction.doIt(org.jhotdraw.app.View)','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','protected abstract void doIt(View p);'),(256,'fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.AbstractSaveBeforeAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','protected void fileSaved(View p, File file, Object value) {\r\n    if (value == null) {\r\n        p.setFile(file);\r\n        p.markChangesAsSaved();\r\n        doIt(p);\r\n    } else {\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n        } else {\r\n            message = value.toString();\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(getActiveView().getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.saveBefore.couldntSave.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    p.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}'),(257,'saveChanges(org.jhotdraw.app.View)','org.jhotdraw.app.action.AbstractSaveBeforeAction.saveChanges(org.jhotdraw.app.View)','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','protected void saveChanges(final View p) {\r\n    if ((p.getFile()) == null) {\r\n        JFileChooser fileChooser = p.getSaveChooser();\r\n        // int option = fileChooser.showSaveDialog(this);\r\n        JSheet.showSaveSheet(fileChooser, p.getComponent(), new SheetListener() {\r\n            public void optionSelected(final SheetEvent evt) {\r\n                if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                    final File file;\r\n                    if ((evt.getFileChooser().getFileFilter()) instanceof ExtensionFileFilter) {\r\n                        file = ((ExtensionFileFilter) (evt.getFileChooser().getFileFilter())).makeAcceptable(evt.getFileChooser().getSelectedFile());\r\n                    } else {\r\n                        file = evt.getFileChooser().getSelectedFile();\r\n                    }\r\n                    saveToFile(p, file);\r\n                } else {\r\n                    p.setEnabled(true);\r\n                    if ((oldFocusOwner) != null) {\r\n                        oldFocusOwner.requestFocus();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        saveToFile(p, p.getFile());\r\n    }\r\n}'),(258,'saveToFile(org.jhotdraw.app.View,java.io.File)','org.jhotdraw.app.action.AbstractSaveBeforeAction.saveToFile(org.jhotdraw.app.View,java.io.File)','18','org.jhotdraw.app.action.AbstractSaveBeforeAction','protected void saveToFile(final View p, final File file) {\r\n    p.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                p.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(p, file, value);\r\n        }\r\n    });\r\n}'),(259,'-init-()','org.jhotdraw.app.action.AbstractViewAction.-init-()','19','org.jhotdraw.app.action.AbstractViewAction','1() {\r\n}'),(260,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.AbstractViewAction.-init-(org.jhotdraw.app.Application)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractViewAction(Application app) {\r\n    this.app = app;\r\n    this.enabled = true;\r\n    if (app != null) {\r\n        app.addPropertyChangeListener(applicationListener);\r\n        updateView(null, app.getActiveView());\r\n    }\r\n}'),(261,'getActiveView()','org.jhotdraw.app.action.AbstractViewAction.getActiveView()','19','org.jhotdraw.app.action.AbstractViewAction','public View getActiveView() {\r\n    return app.getActiveView();\r\n}'),(262,'getApplication()','org.jhotdraw.app.action.AbstractViewAction.getApplication()','19','org.jhotdraw.app.action.AbstractViewAction','public Application getApplication() {\r\n    return app;\r\n}'),(263,'getPropertyName()','org.jhotdraw.app.action.AbstractViewAction.getPropertyName()','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Gets the property name.\r\n */\r\nprotected String getPropertyName() {\r\n    return propertyName;\r\n}'),(264,'installViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.AbstractViewAction.installViewListeners(org.jhotdraw.app.View)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Installs listeners on the view object.\r\n */\r\nprotected void installViewListeners(View p) {\r\n    p.addPropertyChangeListener(viewListener);\r\n}'),(265,'isEnabled()','org.jhotdraw.app.action.AbstractViewAction.isEnabled()','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Returns true if the action is enabled.\r\n * The enabled state of the action depends on the state that has been set\r\n * using setEnabled() and on the enabled state of the application.\r\n *\r\n * @return true if the action is enabled, false otherwise\r\n * @see Action#isEnabled\r\n */\r\n@Override\r\npublic boolean isEnabled() {\r\n    return (((getActiveView()) != null) && (getActiveView().isEnabled())) && (this.enabled);\r\n}'),(266,'setEnabled(boolean)','org.jhotdraw.app.action.AbstractViewAction.setEnabled(boolean)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Enables or disables the action. The enabled state of the action\r\n * depends on the value that is set here and on the enabled state of\r\n * the application.\r\n *\r\n * @param newValue\r\n * 		true to enable the action, false to\r\n * 		disable it\r\n * @see Action#setEnabled\r\n */\r\n@Override\r\npublic void setEnabled(boolean newValue) {\r\n    boolean oldValue = this.enabled;\r\n    this.enabled = newValue;\r\n    boolean projIsEnabled = ((getActiveView()) != null) && (getActiveView().isEnabled());\r\n    firePropertyChange(AbstractViewAction.ENABLED_PROPERTY, Boolean.valueOf((oldValue && projIsEnabled)), Boolean.valueOf((newValue && projIsEnabled)));\r\n}'),(267,'setPropertyName(java.lang.String)','org.jhotdraw.app.action.AbstractViewAction.setPropertyName(java.lang.String)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Sets the property name.\r\n */\r\nprotected void setPropertyName(String name) {\r\n    this.propertyName = name;\r\n    if (name != null) {\r\n        updateView();\r\n    }\r\n}'),(268,'uninstallViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.AbstractViewAction.uninstallViewListeners(org.jhotdraw.app.View)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Uninstalls listeners on the view object.\r\n */\r\nprotected void uninstallViewListeners(View p) {\r\n    p.removePropertyChangeListener(viewListener);\r\n}'),(269,'updateEnabled(boolean,boolean)','org.jhotdraw.app.action.AbstractViewAction.updateEnabled(boolean,boolean)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Updates the enabled state of this action depending on the new enabled\r\n * state of the view.\r\n */\r\nprotected void updateEnabled(boolean oldValue, boolean newValue) {\r\n    // System.out.println(\"AbstractViewAction updateEnabled\"+oldValue+\",\"+newValue);\r\n    firePropertyChange(\"enabled\", oldValue, (newValue && (isEnabled())));\r\n}'),(270,'updateView()','org.jhotdraw.app.action.AbstractViewAction.updateView()','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * This method is invoked, when the property changed and when\r\n * the view changed.\r\n */\r\nprotected void updateView() {\r\n}'),(271,'updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)','org.jhotdraw.app.action.AbstractViewAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)','19','org.jhotdraw.app.action.AbstractViewAction','/**\r\n * Updates the listeners of this action depending on the current view\r\n * of the application.\r\n */\r\nprotected void updateView(View oldValue, View newValue) {\r\n    if (oldValue != null) {\r\n        uninstallViewListeners(oldValue);\r\n    }\r\n    if (newValue != null) {\r\n        installViewListeners(newValue);\r\n    }\r\n    firePropertyChange(AbstractViewAction.VIEW_PROPERTY, oldValue, newValue);\r\n    updateEnabled(((oldValue != null) && (oldValue.isEnabled())), ((newValue != null) && (newValue.isEnabled())));\r\n    updateView();\r\n}'),(272,'-init-()','org.jhotdraw.app.action.Actions.-init-()','20','org.jhotdraw.app.action.Actions','/**\r\n * Prevent instance creation.\r\n */\r\nprivate Actions() {\r\n}'),(273,'configureJCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem,javax.swing.Action)','org.jhotdraw.app.action.Actions.configureJCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem,javax.swing.Action)','20','org.jhotdraw.app.action.Actions','/**\r\n * Configures a JCheckBoxMenuItem for an Action.\r\n */\r\npublic static void configureJCheckBoxMenuItem(final JCheckBoxMenuItem mi, final Action a) {\r\n    mi.setSelected(((Boolean) (a.getValue(Actions.SELECTED_KEY))));\r\n    PropertyChangeListener propertyHandler = new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(Actions.SELECTED_KEY)) {\r\n                mi.setSelected(((Boolean) (a.getValue(Actions.SELECTED_KEY))));\r\n            }\r\n        }\r\n    };\r\n    a.addPropertyChangeListener(propertyHandler);\r\n    mi.putClientProperty(\"actionPropertyHandler\", propertyHandler);\r\n}'),(274,'unconfigureJCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem,javax.swing.Action)','org.jhotdraw.app.action.Actions.unconfigureJCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem,javax.swing.Action)','20','org.jhotdraw.app.action.Actions','/**\r\n * Unconfigures a JCheckBoxMenuItem for an Action.\r\n */\r\npublic static void unconfigureJCheckBoxMenuItem(JCheckBoxMenuItem mi, Action a) {\r\n    PropertyChangeListener propertyHandler = ((PropertyChangeListener) (mi.getClientProperty(\"actionPropertyHandler\")));\r\n    if (propertyHandler != null) {\r\n        a.removePropertyChangeListener(propertyHandler);\r\n        mi.putClientProperty(\"actionPropertyHandler\", null);\r\n    }\r\n}'),(275,'-init-(org.jhotdraw.gui.Arrangeable,org.jhotdraw.gui.Arrangeable$Arrangement)','org.jhotdraw.app.action.ArrangeAction.-init-(org.jhotdraw.gui.Arrangeable,org.jhotdraw.gui.Arrangeable$Arrangement)','21','org.jhotdraw.app.action.ArrangeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ArrangeAction(Arrangeable arrangeable, Arrangeable.Arrangement arrangement) {\r\n    this.arrangeable = arrangeable;\r\n    this.arrangement = arrangement;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    String labelID;\r\n    switch (arrangement) {\r\n        case VERTICAL :\r\n            labelID = ArrangeAction.VERTICAL_ID;\r\n            break;\r\n        case HORIZONTAL :\r\n            labelID = ArrangeAction.HORIZONTAL_ID;\r\n            break;\r\n        case CASCADE :\r\n        default :\r\n            labelID = ArrangeAction.CASCADE_ID;\r\n            break;\r\n    }\r\n    labels.configureAction(this, labelID);\r\n}'),(276,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ArrangeAction.actionPerformed(java.awt.event.ActionEvent)','21','org.jhotdraw.app.action.ArrangeAction','public void actionPerformed(ActionEvent e) {\r\n    arrangeable.setArrangement(arrangement);\r\n}'),(277,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.ClearAction.-init-(org.jhotdraw.app.Application)','22','org.jhotdraw.app.action.ClearAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ClearAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.new\");\r\n}'),(278,'-init-()','org.jhotdraw.app.action.ClearAction.-init-()','22','org.jhotdraw.app.action.ClearAction','1() {\r\n}'),(279,'doIt(org.jhotdraw.app.View)','org.jhotdraw.app.action.ClearAction.doIt(org.jhotdraw.app.View)','22','org.jhotdraw.app.action.ClearAction','@Override\r\npublic void doIt(final View view) {\r\n    view.setEnabled(false);\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            view.clear();\r\n            return null;\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            view.setEnabled(true);\r\n        }\r\n    });\r\n}'),(280,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.ClearRecentFilesAction.-init-(org.jhotdraw.app.Application)','23','org.jhotdraw.app.action.ClearRecentFilesAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ClearRecentFilesAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ClearRecentFilesAction.ID);\r\n    updateEnabled();\r\n}'),(281,'-init-()','org.jhotdraw.app.action.ClearRecentFilesAction.-init-()','23','org.jhotdraw.app.action.ClearRecentFilesAction','1() {\r\n}'),(282,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ClearRecentFilesAction.actionPerformed(java.awt.event.ActionEvent)','23','org.jhotdraw.app.action.ClearRecentFilesAction','public void actionPerformed(ActionEvent e) {\r\n    getApplication().clearRecentFiles();\r\n}'),(283,'createApplicationListener()','org.jhotdraw.app.action.ClearRecentFilesAction.createApplicationListener()','23','org.jhotdraw.app.action.ClearRecentFilesAction','private PropertyChangeListener createApplicationListener() {\r\n    return new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if ((evt.getPropertyName()) == \"recentFiles\") {\r\n                // Strings get interned\r\n                updateEnabled();\r\n            }\r\n        }\r\n    };\r\n}'),(284,'installApplicationListeners(org.jhotdraw.app.Application)','org.jhotdraw.app.action.ClearRecentFilesAction.installApplicationListeners(org.jhotdraw.app.Application)','23','org.jhotdraw.app.action.ClearRecentFilesAction','/**\r\n * Installs listeners on the application object.\r\n */\r\n@Override\r\nprotected void installApplicationListeners(Application app) {\r\n    super.installApplicationListeners(app);\r\n    if ((applicationListener) == null) {\r\n        applicationListener = createApplicationListener();\r\n    }\r\n    app.addPropertyChangeListener(applicationListener);\r\n}'),(285,'uninstallApplicationListeners(org.jhotdraw.app.Application)','org.jhotdraw.app.action.ClearRecentFilesAction.uninstallApplicationListeners(org.jhotdraw.app.Application)','23','org.jhotdraw.app.action.ClearRecentFilesAction','/**\r\n * Installs listeners on the application object.\r\n */\r\n@Override\r\nprotected void uninstallApplicationListeners(Application app) {\r\n    super.uninstallApplicationListeners(app);\r\n    app.removePropertyChangeListener(applicationListener);\r\n}'),(286,'updateEnabled()','org.jhotdraw.app.action.ClearRecentFilesAction.updateEnabled()','23','org.jhotdraw.app.action.ClearRecentFilesAction','private void updateEnabled() {\r\n    setEnabled(((getApplication().recentFiles().size()) > 0));\r\n}'),(287,'-init-()','org.jhotdraw.app.action.ClearSelectionAction.-init-()','24','org.jhotdraw.app.action.ClearSelectionAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ClearSelectionAction() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ClearSelectionAction.ID);\r\n}'),(288,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ClearSelectionAction.actionPerformed(java.awt.event.ActionEvent)','24','org.jhotdraw.app.action.ClearSelectionAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if (focusOwner != null) {\r\n        if (focusOwner instanceof EditableComponent) {\r\n            ((EditableComponent) (focusOwner)).clearSelection();\r\n        } else\r\n            if (focusOwner instanceof JTextComponent) {\r\n                JTextComponent tc = ((JTextComponent) (focusOwner));\r\n                tc.select(tc.getSelectionStart(), tc.getSelectionStart());\r\n            } else {\r\n                focusOwner.getToolkit().beep();\r\n            }\r\n\r\n    }\r\n}'),(289,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.CloseAction.-init-(org.jhotdraw.app.Application)','25','org.jhotdraw.app.action.CloseAction','/**\r\n * Creates a new instance.\r\n */\r\npublic CloseAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, CloseAction.ID);\r\n}'),(290,'doIt(org.jhotdraw.app.View)','org.jhotdraw.app.action.CloseAction.doIt(org.jhotdraw.app.View)','25','org.jhotdraw.app.action.CloseAction','@Override\r\nprotected void doIt(View view) {\r\n    if ((view != null) && ((view.getApplication()) != null)) {\r\n        view.getApplication().dispose(view);\r\n    }\r\n}'),(291,'-init-()','org.jhotdraw.app.action.CopyAction.-init-()','26','org.jhotdraw.app.action.CopyAction','/**\r\n * Creates a new instance.\r\n */\r\npublic CopyAction() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, CopyAction.ID);\r\n}'),(292,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.CopyAction.actionPerformed(java.awt.event.ActionEvent)','26','org.jhotdraw.app.action.CopyAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if ((focusOwner != null) && (focusOwner instanceof JComponent)) {\r\n        JComponent component = ((JComponent) (focusOwner));\r\n        component.getTransferHandler().exportToClipboard(component, component.getToolkit().getSystemClipboard(), TransferHandler.COPY);\r\n    }\r\n}'),(293,'-init-()','org.jhotdraw.app.action.CutAction.-init-()','27','org.jhotdraw.app.action.CutAction','/**\r\n * Creates a new instance.\r\n */\r\npublic CutAction() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, CutAction.ID);\r\n}'),(294,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.CutAction.actionPerformed(java.awt.event.ActionEvent)','27','org.jhotdraw.app.action.CutAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if ((focusOwner != null) && (focusOwner instanceof JComponent)) {\r\n        JComponent component = ((JComponent) (focusOwner));\r\n        component.getTransferHandler().exportToClipboard(component, component.getToolkit().getSystemClipboard(), TransferHandler.MOVE);\r\n    }\r\n}'),(295,'-init-()','org.jhotdraw.app.action.DeleteAction.-init-()','28','org.jhotdraw.app.action.DeleteAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DeleteAction() {\r\n    super(DeleteAction.ID);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, DeleteAction.ID);\r\n}'),(296,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.DeleteAction.actionPerformed(java.awt.event.ActionEvent)','28','org.jhotdraw.app.action.DeleteAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if ((focusOwner != null) && (focusOwner instanceof EditableComponent)) {\r\n        ((EditableComponent) (focusOwner)).delete();\r\n    } else {\r\n        deleteNextChar(evt);\r\n    }\r\n}'),(297,'deleteNextChar(java.awt.event.ActionEvent)','org.jhotdraw.app.action.DeleteAction.deleteNextChar(java.awt.event.ActionEvent)','28','org.jhotdraw.app.action.DeleteAction','/**\r\n * This method was copied from\r\n * DefaultEditorKit.DeleteNextCharAction.actionPerformed(ActionEvent).\r\n */\r\npublic void deleteNextChar(ActionEvent e) {\r\n    JTextComponent target = getTextComponent(e);\r\n    boolean beep = true;\r\n    if ((target != null) && (target.isEditable())) {\r\n        try {\r\n            Document doc = target.getDocument();\r\n            Caret caret = target.getCaret();\r\n            int dot = caret.getDot();\r\n            int mark = caret.getMark();\r\n            if (dot != mark) {\r\n                doc.remove(Math.min(dot, mark), Math.abs((dot - mark)));\r\n                beep = false;\r\n            } else\r\n                if (dot < (doc.getLength())) {\r\n                    doc.remove(dot, 1);\r\n                    beep = false;\r\n                }\r\n\r\n        } catch (BadLocationException bl) {\r\n        }\r\n    }\r\n    if (beep) {\r\n        Toolkit.getDefaultToolkit().beep();\r\n    }\r\n}'),(298,'-init-()','org.jhotdraw.app.action.DuplicateAction.-init-()','29','org.jhotdraw.app.action.DuplicateAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DuplicateAction() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, DuplicateAction.ID);\r\n}'),(299,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.DuplicateAction.actionPerformed(java.awt.event.ActionEvent)','29','org.jhotdraw.app.action.DuplicateAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if (focusOwner != null) {\r\n        if (focusOwner instanceof EditableComponent) {\r\n            ((EditableComponent) (focusOwner)).duplicate();\r\n        } else {\r\n            focusOwner.getToolkit().beep();\r\n        }\r\n    }\r\n}'),(300,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.ExitAction.-init-(org.jhotdraw.app.Application)','30','org.jhotdraw.app.action.ExitAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ExitAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ExitAction.ID);\r\n}'),(301,'-init-()','org.jhotdraw.app.action.ExitAction.-init-()','30','org.jhotdraw.app.action.ExitAction','1() {\r\n}'),(302,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ExitAction.actionPerformed(java.awt.event.ActionEvent)','30','org.jhotdraw.app.action.ExitAction','public void actionPerformed(ActionEvent evt) {\r\n    final Application app = getApplication();\r\n    if (app.isEnabled()) {\r\n        app.setEnabled(false);\r\n        int unsavedViewsCount = 0;\r\n        View documentToBeReviewed = null;\r\n        for (View p : app.views()) {\r\n            if (p.hasUnsavedChanges()) {\r\n                if (p.isEnabled()) {\r\n                    documentToBeReviewed = p;\r\n                }\r\n                unsavedViewsCount++;\r\n            }\r\n        }\r\n        if ((unsavedViewsCount > 0) && (documentToBeReviewed == null)) {\r\n            // Silently abort, if no view can be reviewed.\r\n            app.setEnabled(true);\r\n            return;\r\n        }\r\n        switch (unsavedViewsCount) {\r\n            case 0 :\r\n                {\r\n                    doExit();\r\n                    break;\r\n                }\r\n            case 1 :\r\n                {\r\n                    unsavedView = documentToBeReviewed;\r\n                    oldFocusOwner = SwingUtilities.getWindowAncestor(unsavedView.getComponent()).getFocusOwner();\r\n                    unsavedView.setEnabled(false);\r\n                    JOptionPane pane = new JOptionPane(((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Do you want to save changes to this document \") + \"before exiting?</b><p>\") + \"If you dont save, your changes will be lost.\"), JOptionPane.WARNING_MESSAGE);\r\n                    Object[] options = new Object[]{ \"Save\", \"Cancel\", \"Dont Save\" };\r\n                    pane.setOptions(options);\r\n                    pane.setInitialValue(options[0]);\r\n                    pane.putClientProperty(\"Quaqua.OptionPane.destructiveOption\", new Integer(2));\r\n                    JSheet.showSheet(pane, unsavedView.getComponent(), new SheetListener() {\r\n                        public void optionSelected(SheetEvent evt) {\r\n                            Object value = evt.getValue();\r\n                            if ((value == null) || (value.equals(\"Cancel\"))) {\r\n                                unsavedView.setEnabled(true);\r\n                                app.setEnabled(true);\r\n                            } else\r\n                                if (value.equals(\"Dont Save\")) {\r\n                                    doExit();\r\n                                    unsavedView.setEnabled(true);\r\n                                } else\r\n                                    if (value.equals(\"Save\")) {\r\n                                        saveChanges();\r\n                                    }\r\n\r\n\r\n                        }\r\n                    });\r\n                    break;\r\n                }\r\n            default :\r\n                {\r\n                    JOptionPane pane = new JOptionPane(((((((((\"<html>\" + (UIManager.get(\"OptionPane.css\"))) + \"<b>You have \") + unsavedViewsCount) + \" documents with unsaved changes. \") + \"Do you want to \") + \"review these changes before quitting?</b><p>\") + \"If you dont review your documents, \") + \"all your changes will be lost.\"), JOptionPane.QUESTION_MESSAGE);\r\n                    Object[] options = new Object[]{ \"Review Changes\", \"Cancel\", \"Discard Changes\" };\r\n                    pane.setOptions(options);\r\n                    pane.setInitialValue(options[0]);\r\n                    pane.putClientProperty(\"Quaqua.OptionPane.destructiveOption\", new Integer(2));\r\n                    JDialog dialog = pane.createDialog(app.getComponent(), null);\r\n                    dialog.setVisible(true);\r\n                    Object value = pane.getValue();\r\n                    if ((value == null) || (value.equals(\"Cancel\"))) {\r\n                        app.setEnabled(true);\r\n                    } else\r\n                        if (value.equals(\"Discard Changes\")) {\r\n                            doExit();\r\n                            app.setEnabled(true);\r\n                        } else\r\n                            if (value.equals(\"Review Changes\")) {\r\n                                unsavedView = documentToBeReviewed;\r\n                                reviewChanges();\r\n                            }\r\n\r\n\r\n                }\r\n        }\r\n    }\r\n}'),(303,'doExit()','org.jhotdraw.app.action.ExitAction.doExit()','30','org.jhotdraw.app.action.ExitAction','protected void doExit() {\r\n    getApplication().stop();\r\n    System.exit(0);\r\n}'),(304,'fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.ExitAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)','30','org.jhotdraw.app.action.ExitAction','protected void fileSaved(View unsavedView, File file, Object value) {\r\n    if (value == null) {\r\n        unsavedView.setFile(file);\r\n        doExit();\r\n    } else {\r\n        JSheet.showMessageSheet(unsavedView.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 save to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    unsavedView.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n    getApplication().setEnabled(true);\r\n}'),(305,'fileSavedAndReviewNext(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.ExitAction.fileSavedAndReviewNext(org.jhotdraw.app.View,java.io.File,java.lang.Object)','30','org.jhotdraw.app.action.ExitAction','protected void fileSavedAndReviewNext(View unsavedView, File file, Object value) {\r\n    if (value == null) {\r\n        unsavedView.setFile(file);\r\n        getApplication().dispose(unsavedView);\r\n        reviewNext();\r\n        return;\r\n    } else {\r\n        JSheet.showMessageSheet(unsavedView.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 save to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    unsavedView.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n    getApplication().setEnabled(true);\r\n}'),(306,'reviewChanges()','org.jhotdraw.app.action.ExitAction.reviewChanges()','30','org.jhotdraw.app.action.ExitAction','protected void reviewChanges() {\r\n    if (unsavedView.isEnabled()) {\r\n        oldFocusOwner = SwingUtilities.getWindowAncestor(unsavedView.getComponent()).getFocusOwner();\r\n        unsavedView.setEnabled(false);\r\n        JOptionPane pane = new JOptionPane(((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Do you want to save changes to this document \") + \"before exiting?</b><p>\") + \"If you dont save, your changes will be lost.\"), JOptionPane.WARNING_MESSAGE);\r\n        Object[] options = new Object[]{ \"Save\", \"Cancel\", \"Dont Save\" };\r\n        pane.setOptions(options);\r\n        pane.setInitialValue(options[0]);\r\n        pane.putClientProperty(\"Quaqua.OptionPane.destructiveOption\", new Integer(2));\r\n        JSheet.showSheet(pane, unsavedView.getComponent(), new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                Object value = evt.getValue();\r\n                if ((value == null) || (value.equals(\"Cancel\"))) {\r\n                    unsavedView.setEnabled(true);\r\n                    getApplication().setEnabled(true);\r\n                } else\r\n                    if (value.equals(\"Dont Save\")) {\r\n                        getApplication().dispose(unsavedView);\r\n                        reviewNext();\r\n                    } else\r\n                        if (value.equals(\"Save\")) {\r\n                            saveChangesAndReviewNext();\r\n                        }\r\n\r\n\r\n            }\r\n        });\r\n    } else {\r\n        getApplication().setEnabled(true);\r\n        System.out.println(\"review silently aborted\");\r\n    }\r\n}'),(307,'reviewNext()','org.jhotdraw.app.action.ExitAction.reviewNext()','30','org.jhotdraw.app.action.ExitAction','protected void reviewNext() {\r\n    int unsavedViewsCount = 0;\r\n    View documentToBeReviewed = null;\r\n    for (View p : getApplication().views()) {\r\n        if (p.hasUnsavedChanges()) {\r\n            if (p.isEnabled()) {\r\n                documentToBeReviewed = p;\r\n            }\r\n            unsavedViewsCount++;\r\n        }\r\n    }\r\n    if (unsavedViewsCount == 0) {\r\n        doExit();\r\n    } else\r\n        if (documentToBeReviewed != null) {\r\n            unsavedView = documentToBeReviewed;\r\n            reviewChanges();\r\n        } else {\r\n            getApplication().setEnabled(true);\r\n            // System.out.println(\"exit silently aborted\");\r\n        }\r\n\r\n}'),(308,'saveChanges()','org.jhotdraw.app.action.ExitAction.saveChanges()','30','org.jhotdraw.app.action.ExitAction','protected void saveChanges() {\r\n    if ((unsavedView.getFile()) == null) {\r\n        JFileChooser fileChooser = unsavedView.getSaveChooser();\r\n        // int option = fileChooser.showSaveDialog(this);\r\n        JSheet.showSaveSheet(fileChooser, unsavedView.getComponent(), new SheetListener() {\r\n            public void optionSelected(final SheetEvent evt) {\r\n                if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                    final File file = evt.getFileChooser().getSelectedFile();\r\n                    saveToFile(file);\r\n                } else {\r\n                    unsavedView.setEnabled(true);\r\n                    if ((oldFocusOwner) != null) {\r\n                        oldFocusOwner.requestFocus();\r\n                    }\r\n                    getApplication().setEnabled(true);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        saveToFile(unsavedView.getFile());\r\n    }\r\n}'),(309,'saveChangesAndReviewNext()','org.jhotdraw.app.action.ExitAction.saveChangesAndReviewNext()','30','org.jhotdraw.app.action.ExitAction','protected void saveChangesAndReviewNext() {\r\n    if ((unsavedView.getFile()) == null) {\r\n        JFileChooser fileChooser = unsavedView.getSaveChooser();\r\n        // int option = fileChooser.showSaveDialog(this);\r\n        JSheet.showSaveSheet(fileChooser, unsavedView.getComponent(), new SheetListener() {\r\n            public void optionSelected(final SheetEvent evt) {\r\n                if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                    final File file = evt.getFileChooser().getSelectedFile();\r\n                    saveToFileAndReviewNext(file);\r\n                } else {\r\n                    unsavedView.setEnabled(true);\r\n                    if ((oldFocusOwner) != null) {\r\n                        oldFocusOwner.requestFocus();\r\n                    }\r\n                    getApplication().setEnabled(true);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        saveToFileAndReviewNext(unsavedView.getFile());\r\n    }\r\n}'),(310,'saveToFile(java.io.File)','org.jhotdraw.app.action.ExitAction.saveToFile(java.io.File)','30','org.jhotdraw.app.action.ExitAction','protected void saveToFile(final File file) {\r\n    unsavedView.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                unsavedView.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(unsavedView, file, value);\r\n        }\r\n    });\r\n}'),(311,'saveToFileAndReviewNext(java.io.File)','org.jhotdraw.app.action.ExitAction.saveToFileAndReviewNext(java.io.File)','30','org.jhotdraw.app.action.ExitAction','protected void saveToFileAndReviewNext(final File file) {\r\n    unsavedView.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                unsavedView.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSavedAndReviewNext(unsavedView, file, value);\r\n        }\r\n    });\r\n}'),(312,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.ExportAction.-init-(org.jhotdraw.app.Application)','31','org.jhotdraw.app.action.ExportAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ExportAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ExportAction.ID);\r\n}'),(313,'-init-()','org.jhotdraw.app.action.ExportAction.-init-()','31','org.jhotdraw.app.action.ExportAction','1() {\r\n}'),(314,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ExportAction.actionPerformed(java.awt.event.ActionEvent)','31','org.jhotdraw.app.action.ExportAction','public void actionPerformed(ActionEvent evt) {\r\n    final ExportableView view = ((ExportableView) (getActiveView()));\r\n    if (view.isEnabled()) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        oldFocusOwner = SwingUtilities.getWindowAncestor(view.getComponent()).getFocusOwner();\r\n        view.setEnabled(false);\r\n        File saveToFile;\r\n        JFileChooser fileChooser = view.getExportChooser();\r\n        JSheet.showSheet(fileChooser, view.getComponent(), labels.getString(\"filechooser.export\"), new SheetListener() {\r\n            public void optionSelected(final SheetEvent evt) {\r\n                if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                    final File file = evt.getFileChooser().getSelectedFile();\r\n                    exportToFile(view, file, evt.getFileChooser().getFileFilter(), evt.getFileChooser().getAccessory());\r\n                } else {\r\n                    view.setEnabled(true);\r\n                    if ((oldFocusOwner) != null) {\r\n                        oldFocusOwner.requestFocus();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}'),(315,'exportToFile(org.jhotdraw.app.ExportableView,java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','org.jhotdraw.app.action.ExportAction.exportToFile(org.jhotdraw.app.ExportableView,java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','31','org.jhotdraw.app.action.ExportAction','protected void exportToFile(final ExportableView view, final File file, final FileFilter filter, final Component accessory) {\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.export(file, filter, accessory);\r\n                return null;\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileExported(view, file, value);\r\n        }\r\n    });\r\n}'),(316,'fileExported(org.jhotdraw.app.ExportableView,java.io.File,java.lang.Object)','org.jhotdraw.app.action.ExportAction.fileExported(org.jhotdraw.app.ExportableView,java.io.File,java.lang.Object)','31','org.jhotdraw.app.action.ExportAction','protected void fileExported(ExportableView view, File file, Object value) {\r\n    if (value != null) {\r\n        System.out.flush();\r\n        ((Throwable) (value)).printStackTrace();\r\n        // FIXME localize this error messsage\r\n        JSheet.showMessageSheet(view.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 export to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    view.setEnabled(true);\r\n    SwingUtilities.getWindowAncestor(view.getComponent()).toFront();\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}'),(317,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.FindAction.-init-(org.jhotdraw.app.Application)','32','org.jhotdraw.app.action.FindAction','/**\r\n * Creates a new instance.\r\n */\r\npublic FindAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, FindAction.ID);\r\n}'),(318,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.FindAction.actionPerformed(java.awt.event.ActionEvent)','32','org.jhotdraw.app.action.FindAction','public void actionPerformed(ActionEvent evt) {\r\n    View view = getActiveView();\r\n    try {\r\n        Methods.invoke(view, \"find\");\r\n    } catch (NoSuchMethodException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(319,'-init-(org.jhotdraw.app.View)','org.jhotdraw.app.action.FocusAction.-init-(org.jhotdraw.app.View)','33','org.jhotdraw.app.action.FocusAction','/**\r\n * Creates a new instance.\r\n */\r\npublic FocusAction(View view) {\r\n    this.view = view;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, FocusAction.ID);\r\n    // setEnabled(false);\r\n    setEnabled((view != null));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n            String name = evt.getPropertyName();\r\n            if (name.equals(View.FILE_PROPERTY)) {\r\n                putValue(Action.NAME, ((evt.getNewValue()) == null ? labels.getString(\"unnamedFile\") : ((File) (evt.getNewValue())).getName()));\r\n            }\r\n        }\r\n    });\r\n}'),(320,'-init-()','org.jhotdraw.app.action.FocusAction.-init-()','33','org.jhotdraw.app.action.FocusAction','1() {\r\n}'),(321,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.FocusAction.actionPerformed(java.awt.event.ActionEvent)','33','org.jhotdraw.app.action.FocusAction','public void actionPerformed(ActionEvent evt) {\r\n    /* JFrame frame = getFrame();\n    if (frame != null) {\n    frame.setExtendedState(frame.getExtendedState() & ~Frame.ICONIFIED);\n    frame.toFront();\n    frame.requestFocus();\n    JRootPane rp = SwingUtilities.getRootPane(view.getComponent());\n    if (rp != null && (rp.getParent() instanceof JInternalFrame)) {\n    ((JInternalFrame) rp.getParent()).toFront();\n    }\n    view.getComponent().requestFocus();\n    } else {\n    Toolkit.getDefaultToolkit().beep();\n    }\n     */\r\n    Component rpContainer = getRootPaneContainer();\r\n    if (rpContainer instanceof Frame) {\r\n        Frame frame = ((Frame) (rpContainer));\r\n        frame.setExtendedState(((frame.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n        frame.toFront();\r\n    } else\r\n        if (rpContainer instanceof JInternalFrame) {\r\n            JInternalFrame frame = ((JInternalFrame) (rpContainer));\r\n            frame.toFront();\r\n            try {\r\n                frame.setSelected(true);\r\n            } catch (PropertyVetoException e) {\r\n                // Dont care.\r\n            }\r\n        }\r\n\r\n    view.getComponent().requestFocusInWindow();\r\n}'),(322,'getFrame()','org.jhotdraw.app.action.FocusAction.getFrame()','33','org.jhotdraw.app.action.FocusAction','private JFrame getFrame() {\r\n    return ((JFrame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n}'),(323,'getRootPaneContainer()','org.jhotdraw.app.action.FocusAction.getRootPaneContainer()','33','org.jhotdraw.app.action.FocusAction','private Component getRootPaneContainer() {\r\n    return SwingUtilities.getRootPane(view.getComponent()).getParent();\r\n}'),(324,'getTitle()','org.jhotdraw.app.action.FocusAction.getTitle()','33','org.jhotdraw.app.action.FocusAction','private String getTitle() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    String title = labels.getString(\"unnamedFile\");\r\n    if ((view) != null) {\r\n        File file = view.getFile();\r\n        if (file == null) {\r\n            title = labels.getString(\"unnamedFile\");\r\n        } else {\r\n            title = file.getName();\r\n        }\r\n        if (view.hasUnsavedChanges()) {\r\n            title += \"*\";\r\n        }\r\n        title = labels.getFormatted(\"internalFrame.title\", title, view.getApplication().getName(), view.getMultipleOpenId());\r\n    }\r\n    return title;\r\n}'),(325,'getValue(java.lang.String)','org.jhotdraw.app.action.FocusAction.getValue(java.lang.String)','33','org.jhotdraw.app.action.FocusAction','public Object getValue(String key) {\r\n    if ((key == (Action.NAME)) && ((view) != null)) {\r\n        return getTitle();\r\n    } else {\r\n        return super.getValue(key);\r\n    }\r\n}'),(326,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.LoadAction.-init-(org.jhotdraw.app.Application)','34','org.jhotdraw.app.action.LoadAction','/**\r\n * Creates a new instance.\r\n */\r\npublic LoadAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.open\");\r\n}'),(327,'-init-()','org.jhotdraw.app.action.LoadAction.-init-()','34','org.jhotdraw.app.action.LoadAction','1() {\r\n}'),(328,'doIt(org.jhotdraw.app.View)','org.jhotdraw.app.action.LoadAction.doIt(org.jhotdraw.app.View)','34','org.jhotdraw.app.action.LoadAction','public void doIt(View view) {\r\n    JFileChooser fileChooser = getFileChooser(view);\r\n    if ((fileChooser.showOpenDialog(view.getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n        openFile(view, fileChooser);\r\n    } else {\r\n        view.setEnabled(true);\r\n    }\r\n}'),(329,'fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.LoadAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','34','org.jhotdraw.app.action.LoadAction','protected void fileOpened(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        getApplication().addRecentFile(file);\r\n    } else {\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 open the file \"\") + file) + \"\".</b><br>\") + value), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                view.clear();\r\n                view.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n}'),(330,'getFileChooser(org.jhotdraw.app.View)','org.jhotdraw.app.action.LoadAction.getFileChooser(org.jhotdraw.app.View)','34','org.jhotdraw.app.action.LoadAction','protected JFileChooser getFileChooser(View view) {\r\n    return view.getOpenChooser();\r\n}'),(331,'openFile(org.jhotdraw.app.View,javax.swing.JFileChooser)','org.jhotdraw.app.action.LoadAction.openFile(org.jhotdraw.app.View,javax.swing.JFileChooser)','34','org.jhotdraw.app.action.LoadAction','protected void openFile(final View view, JFileChooser fileChooser) {\r\n    final File file = fileChooser.getSelectedFile();\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.read(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(332,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.LoadDirectoryAction.-init-(org.jhotdraw.app.Application)','35','org.jhotdraw.app.action.LoadDirectoryAction','/**\r\n * Creates a new instance.\r\n */\r\npublic LoadDirectoryAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.openDirectory\");\r\n}'),(333,'getFileChooser(org.jhotdraw.app.View)','org.jhotdraw.app.action.LoadDirectoryAction.getFileChooser(org.jhotdraw.app.View)','35','org.jhotdraw.app.action.LoadDirectoryAction','@Override\r\nprotected JFileChooser getFileChooser(View view) {\r\n    return ((DirectoryView) (view)).getOpenDirectoryChooser();\r\n}'),(334,'-init-(org.jhotdraw.app.Application,java.io.File)','org.jhotdraw.app.action.LoadRecentAction.-init-(org.jhotdraw.app.Application,java.io.File)','36','org.jhotdraw.app.action.LoadRecentAction','/**\r\n * Creates a new instance.\r\n */\r\npublic LoadRecentAction(Application app, File file) {\r\n    super(app);\r\n    this.file = file;\r\n    putValue(Action.NAME, file.getName());\r\n}'),(335,'-init-()','org.jhotdraw.app.action.LoadRecentAction.-init-()','36','org.jhotdraw.app.action.LoadRecentAction','1() {\r\n}'),(336,'doIt(org.jhotdraw.app.View)','org.jhotdraw.app.action.LoadRecentAction.doIt(org.jhotdraw.app.View)','36','org.jhotdraw.app.action.LoadRecentAction','public void doIt(final View view) {\r\n    final Application app = getApplication();\r\n    app.setEnabled(true);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.read(file);\r\n                return null;\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(337,'fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.LoadRecentAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','36','org.jhotdraw.app.action.LoadRecentAction','protected void fileOpened(final View view, File file, Object value) {\r\n    final Application app = getApplication();\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.getComponent().requestFocus();\r\n        if (app != null) {\r\n            app.setEnabled(true);\r\n        }\r\n    } else {\r\n        if (value instanceof Throwable) {\r\n            ((Throwable) (value)).printStackTrace();\r\n        }\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 open the file \"\") + file) + \"\".</b><br>\") + value), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                // app.dispose(view);\r\n            }\r\n        });\r\n    }\r\n}'),(338,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.MaximizeAction.-init-(org.jhotdraw.app.Application)','37','org.jhotdraw.app.action.MaximizeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic MaximizeAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, MaximizeAction.ID);\r\n}'),(339,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.MaximizeAction.actionPerformed(java.awt.event.ActionEvent)','37','org.jhotdraw.app.action.MaximizeAction','public void actionPerformed(ActionEvent evt) {\r\n    JFrame frame = getFrame();\r\n    if (frame != null) {\r\n        frame.setExtendedState(((frame.getExtendedState()) ^ (Frame.MAXIMIZED_BOTH)));\r\n    } else {\r\n        Toolkit.getDefaultToolkit().beep();\r\n    }\r\n}'),(340,'getFrame()','org.jhotdraw.app.action.MaximizeAction.getFrame()','37','org.jhotdraw.app.action.MaximizeAction','private JFrame getFrame() {\r\n    return ((JFrame) (SwingUtilities.getWindowAncestor(getActiveView().getComponent())));\r\n}'),(341,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.MinimizeAction.-init-(org.jhotdraw.app.Application)','38','org.jhotdraw.app.action.MinimizeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic MinimizeAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, MinimizeAction.ID);\r\n}'),(342,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.MinimizeAction.actionPerformed(java.awt.event.ActionEvent)','38','org.jhotdraw.app.action.MinimizeAction','public void actionPerformed(ActionEvent evt) {\r\n    JFrame frame = getFrame();\r\n    if (frame != null) {\r\n        frame.setExtendedState(((frame.getExtendedState()) ^ (Frame.ICONIFIED)));\r\n    } else {\r\n        Toolkit.getDefaultToolkit().beep();\r\n    }\r\n}'),(343,'getFrame()','org.jhotdraw.app.action.MinimizeAction.getFrame()','38','org.jhotdraw.app.action.MinimizeAction','private JFrame getFrame() {\r\n    return ((JFrame) (SwingUtilities.getWindowAncestor(getActiveView().getComponent())));\r\n}'),(344,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.NewAction.-init-(org.jhotdraw.app.Application)','39','org.jhotdraw.app.action.NewAction','/**\r\n * Creates a new instance.\r\n */\r\npublic NewAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, NewAction.ID);\r\n}'),(345,'-init-()','org.jhotdraw.app.action.NewAction.-init-()','39','org.jhotdraw.app.action.NewAction','1() {\r\n}'),(346,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.NewAction.actionPerformed(java.awt.event.ActionEvent)','39','org.jhotdraw.app.action.NewAction','public void actionPerformed(ActionEvent evt) {\r\n    Application app = getApplication();\r\n    final View newP = app.createView();\r\n    int multiOpenId = 1;\r\n    for (View existingP : app.views()) {\r\n        if ((existingP.getFile()) == null) {\r\n            multiOpenId = Math.max(multiOpenId, ((existingP.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    newP.setMultipleOpenId(multiOpenId);\r\n    app.add(newP);\r\n    newP.execute(new Runnable() {\r\n        public void run() {\r\n            newP.clear();\r\n        }\r\n    });\r\n    app.show(newP);\r\n}'),(347,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.OSXDropOnDockAction.-init-(org.jhotdraw.app.Application)','40','org.jhotdraw.app.action.OSXDropOnDockAction','/**\r\n * Creates a new instance.\r\n */\r\npublic OSXDropOnDockAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    putValue(Action.NAME, \"OSX Drop On Dock\");\r\n}'),(348,'-init-()','org.jhotdraw.app.action.OSXDropOnDockAction.-init-()','40','org.jhotdraw.app.action.OSXDropOnDockAction','1() {\r\n}'),(349,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.OSXDropOnDockAction.actionPerformed(java.awt.event.ActionEvent)','40','org.jhotdraw.app.action.OSXDropOnDockAction','public void actionPerformed(ActionEvent evt) {\r\n    final Application app = getApplication();\r\n    if (evt instanceof ApplicationEvent) {\r\n        final ApplicationEvent ae = ((ApplicationEvent) (evt));\r\n        final View p = app.createView();\r\n        p.setEnabled(false);\r\n        app.add(p);\r\n        p.execute(new Worker() {\r\n            public Object construct() {\r\n                try {\r\n                    p.read(ae.getFile());\r\n                    return null;\r\n                } catch (IOException e) {\r\n                    return e;\r\n                }\r\n            }\r\n\r\n            public void finished(Object value) {\r\n                if (value == null) {\r\n                    p.setFile(ae.getFile());\r\n                    p.setEnabled(true);\r\n                } else {\r\n                    app.dispose(p);\r\n                    JOptionPane.showMessageDialog(null, (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Cant open file \") + (ae.getFile())) + \"</b><p>\") + value), \"\", JOptionPane.ERROR_MESSAGE);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}'),(350,'-init-(org.jhotdraw.app.DefaultOSXApplication,java.awt.Window,java.lang.String)','org.jhotdraw.app.action.OSXTogglePaletteAction.-init-(org.jhotdraw.app.DefaultOSXApplication,java.awt.Window,java.lang.String)','41','org.jhotdraw.app.action.OSXTogglePaletteAction','/**\r\n * Creates a new instance.\r\n */\r\npublic OSXTogglePaletteAction(DefaultOSXApplication app, Window palette, String label) {\r\n    super(label);\r\n    this.app = app;\r\n    windowHandler = new WindowAdapter() {\r\n        public void windowClosing(WindowEvent evt) {\r\n            putValue(Actions.SELECTED_KEY, false);\r\n        }\r\n    };\r\n    setPalette(palette);\r\n    putValue(Actions.SELECTED_KEY, true);\r\n}'),(351,'-init-()','org.jhotdraw.app.action.OSXTogglePaletteAction.-init-()','41','org.jhotdraw.app.action.OSXTogglePaletteAction','1() {\r\n}'),(352,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.OSXTogglePaletteAction.actionPerformed(java.awt.event.ActionEvent)','41','org.jhotdraw.app.action.OSXTogglePaletteAction','public void actionPerformed(ActionEvent e) {\r\n    if ((palette) != null) {\r\n        putValue(Actions.SELECTED_KEY, (!(palette.isVisible())));\r\n    }\r\n}'),(353,'putValue(java.lang.String,java.lang.Object)','org.jhotdraw.app.action.OSXTogglePaletteAction.putValue(java.lang.String,java.lang.Object)','41','org.jhotdraw.app.action.OSXTogglePaletteAction','public void putValue(String key, Object newValue) {\r\n    super.putValue(key, newValue);\r\n    if (key == (Actions.SELECTED_KEY)) {\r\n        if ((palette) != null) {\r\n            boolean b = ((Boolean) (newValue));\r\n            if (b) {\r\n                app.addPalette(palette);\r\n                palette.setVisible(true);\r\n            } else {\r\n                app.removePalette(palette);\r\n                palette.setVisible(false);\r\n            }\r\n        }\r\n    }\r\n}'),(354,'setPalette(java.awt.Window)','org.jhotdraw.app.action.OSXTogglePaletteAction.setPalette(java.awt.Window)','41','org.jhotdraw.app.action.OSXTogglePaletteAction','public void setPalette(Window newValue) {\r\n    if ((palette) != null) {\r\n        palette.removeWindowListener(windowHandler);\r\n    }\r\n    palette = newValue;\r\n    if ((palette) != null) {\r\n        palette.addWindowListener(windowHandler);\r\n        if ((getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)) {\r\n            app.addPalette(palette);\r\n            palette.setVisible(true);\r\n        } else {\r\n            app.removePalette(palette);\r\n            palette.setVisible(false);\r\n        }\r\n    }\r\n}'),(355,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.OpenAction.-init-(org.jhotdraw.app.Application)','42','org.jhotdraw.app.action.OpenAction','/**\r\n * Creates a new instance.\r\n */\r\npublic OpenAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, OpenAction.ID);\r\n}'),(356,'-init-()','org.jhotdraw.app.action.OpenAction.-init-()','42','org.jhotdraw.app.action.OpenAction','1() {\r\n}'),(357,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.OpenAction.actionPerformed(java.awt.event.ActionEvent)','42','org.jhotdraw.app.action.OpenAction','public void actionPerformed(ActionEvent evt) {\r\n    final Application app = getApplication();\r\n    if (app.isEnabled()) {\r\n        app.setEnabled(false);\r\n        // Search for an empty view\r\n        View emptyView = app.getActiveView();\r\n        if (((emptyView == null) || ((emptyView.getFile()) != null)) || (emptyView.hasUnsavedChanges())) {\r\n            emptyView = null;\r\n        }\r\n        final View view;\r\n        boolean removeMe;\r\n        if (emptyView == null) {\r\n            view = app.createView();\r\n            app.add(view);\r\n            removeMe = true;\r\n        } else {\r\n            view = emptyView;\r\n            removeMe = false;\r\n        }\r\n        JFileChooser fileChooser = getFileChooser(view);\r\n        if ((fileChooser.showOpenDialog(app.getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            app.show(view);\r\n            openFile(fileChooser, view);\r\n        } else {\r\n            if (removeMe) {\r\n                app.remove(view);\r\n            }\r\n            app.setEnabled(true);\r\n        }\r\n    }\r\n}'),(358,'fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.OpenAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','42','org.jhotdraw.app.action.OpenAction','protected void fileOpened(final View view, File file, Object value) {\r\n    final Application app = getApplication();\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.getComponent().requestFocus();\r\n        app.addRecentFile(file);\r\n        app.setEnabled(true);\r\n    } else {\r\n        view.setEnabled(true);\r\n        app.setEnabled(true);\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n            ((Throwable) (value)).printStackTrace();\r\n        } else\r\n            if (value instanceof Throwable) {\r\n                message = value.toString();\r\n                ((Throwable) (value)).printStackTrace();\r\n            } else {\r\n                message = value.toString();\r\n            }\r\n\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.open.couldntOpen.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n}'),(359,'getFileChooser(org.jhotdraw.app.View)','org.jhotdraw.app.action.OpenAction.getFileChooser(org.jhotdraw.app.View)','42','org.jhotdraw.app.action.OpenAction','protected JFileChooser getFileChooser(View view) {\r\n    return view.getOpenChooser();\r\n}'),(360,'openFile(javax.swing.JFileChooser,org.jhotdraw.app.View)','org.jhotdraw.app.action.OpenAction.openFile(javax.swing.JFileChooser,org.jhotdraw.app.View)','42','org.jhotdraw.app.action.OpenAction','protected void openFile(JFileChooser fileChooser, final View view) {\r\n    final Application app = getApplication();\r\n    final File file = fileChooser.getSelectedFile();\r\n    app.setEnabled(true);\r\n    view.setEnabled(false);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                if (file.exists()) {\r\n                    view.read(file);\r\n                    return null;\r\n                } else {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                    return new IOException(labels.getFormatted(\"file.open.fileDoesNotExist.message\", file.getName()));\r\n                }\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(361,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.OpenDirectoryAction.-init-(org.jhotdraw.app.Application)','43','org.jhotdraw.app.action.OpenDirectoryAction','/**\r\n * Creates a new instance.\r\n */\r\npublic OpenDirectoryAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, OpenDirectoryAction.ID);\r\n}'),(362,'getFileChooser(org.jhotdraw.app.View)','org.jhotdraw.app.action.OpenDirectoryAction.getFileChooser(org.jhotdraw.app.View)','43','org.jhotdraw.app.action.OpenDirectoryAction','@Override\r\nprotected JFileChooser getFileChooser(View view) {\r\n    return ((DirectoryView) (view)).getOpenDirectoryChooser();\r\n}'),(363,'-init-(org.jhotdraw.app.Application,java.io.File)','org.jhotdraw.app.action.OpenRecentAction.-init-(org.jhotdraw.app.Application,java.io.File)','44','org.jhotdraw.app.action.OpenRecentAction','/**\r\n * Creates a new instance.\r\n */\r\npublic OpenRecentAction(Application app, File file) {\r\n    super(app);\r\n    this.file = file;\r\n    putValue(Action.NAME, file.getName());\r\n}'),(364,'-init-()','org.jhotdraw.app.action.OpenRecentAction.-init-()','44','org.jhotdraw.app.action.OpenRecentAction','1() {\r\n}'),(365,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.OpenRecentAction.actionPerformed(java.awt.event.ActionEvent)','44','org.jhotdraw.app.action.OpenRecentAction','public void actionPerformed(ActionEvent evt) {\r\n    final Application app = getApplication();\r\n    if (app.isEnabled()) {\r\n        app.setEnabled(false);\r\n        // Search for an empty view\r\n        View emptyView = app.getActiveView();\r\n        if (((emptyView == null) || ((emptyView.getFile()) != null)) || (emptyView.hasUnsavedChanges())) {\r\n            emptyView = null;\r\n        }\r\n        final View p;\r\n        if (emptyView == null) {\r\n            p = app.createView();\r\n            app.add(p);\r\n            app.show(p);\r\n        } else {\r\n            p = emptyView;\r\n        }\r\n        openFile(p);\r\n    }\r\n}'),(366,'fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.OpenRecentAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)','44','org.jhotdraw.app.action.OpenRecentAction','protected void fileOpened(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.setEnabled(true);\r\n        view.getComponent().requestFocus();\r\n    } else {\r\n        String message = null;\r\n        if (value instanceof Throwable) {\r\n            ((Throwable) (value)).printStackTrace();\r\n            message = ((Throwable) (value)).getMessage();\r\n            if (message == null) {\r\n                message = value.toString();\r\n            }\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.open.couldntOpen.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                view.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n}'),(367,'openFile(org.jhotdraw.app.View)','org.jhotdraw.app.action.OpenRecentAction.openFile(org.jhotdraw.app.View)','44','org.jhotdraw.app.action.OpenRecentAction','protected void openFile(final View view) {\r\n    final Application app = getApplication();\r\n    app.setEnabled(true);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                if (file.exists()) {\r\n                    view.read(file);\r\n                    return null;\r\n                } else {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                    return new IOException(labels.getFormatted(\"file.open.fileDoesNotExist.message\", file.getName()));\r\n                }\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(368,'-init-()','org.jhotdraw.app.action.PasteAction.-init-()','45','org.jhotdraw.app.action.PasteAction','/**\r\n * Creates a new instance.\r\n */\r\npublic PasteAction() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, PasteAction.ID);\r\n}'),(369,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.PasteAction.actionPerformed(java.awt.event.ActionEvent)','45','org.jhotdraw.app.action.PasteAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if ((focusOwner != null) && (focusOwner instanceof JComponent)) {\r\n        JComponent component = ((JComponent) (focusOwner));\r\n        Transferable t = component.getToolkit().getSystemClipboard().getContents(component);\r\n        if ((t != null) && ((component.getTransferHandler()) != null)) {\r\n            component.getTransferHandler().importData(component, t);\r\n        }\r\n    }\r\n}'),(370,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.PrintAction.-init-(org.jhotdraw.app.Application)','46','org.jhotdraw.app.action.PrintAction','/**\r\n * Creates a new instance.\r\n */\r\npublic PrintAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, PrintAction.ID);\r\n}'),(371,'-init-()','org.jhotdraw.app.action.PrintAction.-init-()','46','org.jhotdraw.app.action.PrintAction','1() {\r\n}'),(372,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.PrintAction.actionPerformed(java.awt.event.ActionEvent)','46','org.jhotdraw.app.action.PrintAction','public void actionPerformed(ActionEvent evt) {\r\n    View view = getActiveView();\r\n    view.setEnabled(false);\r\n    if (System.getProperty(\"apple.awt.graphics.UseQuartz\", \"false\").equals(\"true\")) {\r\n        printQuartz();\r\n    } else {\r\n        printJava2D();\r\n    }\r\n    view.setEnabled(true);\r\n}'),(373,'isEnabled()','org.jhotdraw.app.action.PrintAction.isEnabled()','46','org.jhotdraw.app.action.PrintAction','/**\r\n * Returns true if the action is enabled.\r\n * The enabled state of the action depends on the state that has been set\r\n * using setEnabled() and on the enabled state of the application.\r\n *\r\n * @return true if the action is enabled, false otherwise\r\n * @see Action#isEnabled\r\n */\r\n@Override\r\npublic boolean isEnabled() {\r\n    return (super.isEnabled()) && ((getActiveView()) instanceof PrintableView);\r\n}'),(374,'printJava2D()','org.jhotdraw.app.action.PrintAction.printJava2D()','46','org.jhotdraw.app.action.PrintAction','/* This prints at 72 DPI only. We might need this for some JVM versions on\nMac OS X.\n */\r\npublic void printJava2D() {\r\n    Pageable pageable = ((PrintableView) (getActiveView())).createPageable();\r\n    if (pageable == null) {\r\n        throw new InternalError(\"View does not have a method named java.awt.Pageable createPageable()\");\r\n    }\r\n    try {\r\n        PrinterJob job = PrinterJob.getPrinterJob();\r\n        // FIXME - PrintRequestAttributeSet should be retrieved from View\r\n        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\r\n        attr.add(new PrinterResolution(300, 300, PrinterResolution.DPI));\r\n        job.setPageable(pageable);\r\n        if (job.printDialog()) {\r\n            try {\r\n                job.print();\r\n            } catch (PrinterException e) {\r\n                String message = ((e.getMessage()) == null) ? e.toString() : e.getMessage();\r\n                View view = getActiveView();\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getString(\"couldntPrint\"))) + \"</b><br>\") + (message == null ? \"\" : message)));\r\n            }\r\n        } else {\r\n            System.out.println(\"JOB ABORTED!\");\r\n        }\r\n    } catch (Throwable t) {\r\n        t.printStackTrace();\r\n    }\r\n}'),(375,'printJava2DAlternative()','org.jhotdraw.app.action.PrintAction.printJava2DAlternative()','46','org.jhotdraw.app.action.PrintAction','/* This prints at 72 DPI only. We might need this for some JVM versions on\nMac OS X.\n */\r\npublic void printJava2DAlternative() {\r\n    Pageable pageable = ((Pageable) (Methods.invokeGetter(getActiveView(), \"createPageable\", null)));\r\n    if (pageable == null) {\r\n        throw new InternalError(\"View does not have a method named java.awt.Pageable createPageable()\");\r\n    }\r\n    try {\r\n        final PrinterJob job = PrinterJob.getPrinterJob();\r\n        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\r\n        attr.add(new PrinterResolution(300, 300, PrinterResolution.DPI));\r\n        job.setPageable(pageable);\r\n        if (job.printDialog(attr)) {\r\n            try {\r\n                job.print();\r\n            } catch (PrinterException e) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                JSheet.showMessageSheet(getActiveView().getComponent(), labels.getFormatted(\"couldntPrint\", e));\r\n            }\r\n        } else {\r\n            System.out.println(\"JOB ABORTED!\");\r\n        }\r\n    } catch (Throwable t) {\r\n        t.printStackTrace();\r\n    }\r\n}'),(376,'printQuartz()','org.jhotdraw.app.action.PrintAction.printQuartz()','46','org.jhotdraw.app.action.PrintAction','/**\r\n * On Mac OS X with the Quartz rendering engine, the following code achieves\r\n * the best results.\r\n */\r\npublic void printQuartz() {\r\n    Frame frame = ((Frame) (SwingUtilities.getWindowAncestor(getActiveView().getComponent())));\r\n    final Pageable pageable = ((Pageable) (Methods.invokeGetter(getActiveView(), \"createPageable\", null)));\r\n    final double resolution = 300.0;\r\n    JobAttributes jobAttr = new JobAttributes();\r\n    // FIXME - PageAttributes should be retrieved from View\r\n    PageAttributes pageAttr = new PageAttributes();\r\n    pageAttr.setMedia(PageAttributes.MediaType.A4);\r\n    pageAttr.setPrinterResolution(((int) (resolution)));\r\n    final PrintJob pj = frame.getToolkit().getPrintJob(frame, \"Job Title\", jobAttr, pageAttr);\r\n    getActiveView().setEnabled(false);\r\n    new Worker() {\r\n        public Object construct() {\r\n            // Compute page format from settings of the print job\r\n            Paper paper = new Paper();\r\n            paper.setSize((((pj.getPageDimension().width) / resolution) * 72.0), (((pj.getPageDimension().height) / resolution) * 72.0));\r\n            paper.setImageableArea(64.0, 32.0, ((paper.getWidth()) - 96.0), ((paper.getHeight()) - 64));\r\n            PageFormat pageFormat = new PageFormat();\r\n            pageFormat.setPaper(paper);\r\n            // Print the job\r\n            try {\r\n                for (int i = 0, n = pageable.getNumberOfPages(); i < n; i++) {\r\n                    PageFormat pf = pageable.getPageFormat(i);\r\n                    pf = pageFormat;\r\n                    Graphics g = pj.getGraphics();\r\n                    if (g instanceof Graphics2D) {\r\n                        pageable.getPrintable(i).print(g, pf, i);\r\n                    } else {\r\n                        BufferedImage buf = new BufferedImage(((int) (((pf.getImageableWidth()) * resolution) / 72.0)), ((int) (((pf.getImageableHeight()) * resolution) / 72.0)), BufferedImage.TYPE_INT_RGB);\r\n                        Graphics2D bufG = buf.createGraphics();\r\n                        bufG.setBackground(Color.WHITE);\r\n                        bufG.fillRect(0, 0, buf.getWidth(), buf.getHeight());\r\n                        bufG.scale((resolution / 72.0), (resolution / 72.0));\r\n                        bufG.translate((-(pf.getImageableX())), (-(pf.getImageableY())));\r\n                        pageable.getPrintable(i).print(bufG, pf, i);\r\n                        bufG.dispose();\r\n                        g.drawImage(buf, ((int) (((pf.getImageableX()) * resolution) / 72.0)), ((int) (((pf.getImageableY()) * resolution) / 72.0)), null);\r\n                        buf.flush();\r\n                    }\r\n                    g.dispose();\r\n                }\r\n            } catch (Throwable t) {\r\n                t.printStackTrace();\r\n            } finally {\r\n                pj.end();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            getActiveView().setEnabled(true);\r\n        }\r\n    }.start();\r\n}'),(377,'-init-()','org.jhotdraw.app.action.RedoAction.-init-()','47','org.jhotdraw.app.action.RedoAction','1() {\r\n}'),(378,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.RedoAction.-init-(org.jhotdraw.app.Application)','47','org.jhotdraw.app.action.RedoAction','/**\r\n * Creates a new instance.\r\n */\r\npublic RedoAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, RedoAction.ID);\r\n}'),(379,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.RedoAction.actionPerformed(java.awt.event.ActionEvent)','47','org.jhotdraw.app.action.RedoAction','public void actionPerformed(ActionEvent e) {\r\n    Action realRedoAction = getRealRedoAction();\r\n    if (realRedoAction != null) {\r\n        realRedoAction.actionPerformed(e);\r\n    }\r\n}'),(380,'getRealRedoAction()','org.jhotdraw.app.action.RedoAction.getRealRedoAction()','47','org.jhotdraw.app.action.RedoAction','private Action getRealRedoAction() {\r\n    return (getActiveView()) == null ? null : getActiveView().getAction(RedoAction.ID);\r\n}'),(381,'installViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.RedoAction.installViewListeners(org.jhotdraw.app.View)','47','org.jhotdraw.app.action.RedoAction','/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    if ((p.getAction(RedoAction.ID)) != null) {\r\n        p.getAction(RedoAction.ID).addPropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(382,'uninstallViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.RedoAction.uninstallViewListeners(org.jhotdraw.app.View)','47','org.jhotdraw.app.action.RedoAction','/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    if ((p.getAction(RedoAction.ID)) != null) {\r\n        p.getAction(RedoAction.ID).removePropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(383,'updateEnabledState()','org.jhotdraw.app.action.RedoAction.updateEnabledState()','47','org.jhotdraw.app.action.RedoAction','protected void updateEnabledState() {\r\n    boolean isEnabled = false;\r\n    Action realRedoAction = getRealRedoAction();\r\n    if (realRedoAction != null) {\r\n        isEnabled = realRedoAction.isEnabled();\r\n    }\r\n    setEnabled(isEnabled);\r\n}'),(384,'updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)','org.jhotdraw.app.action.RedoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)','47','org.jhotdraw.app.action.RedoAction','@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(RedoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(RedoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}'),(385,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.SaveAction.-init-(org.jhotdraw.app.Application)','48','org.jhotdraw.app.action.SaveAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAction(Application app) {\r\n    this(app, false);\r\n}'),(386,'-init-(org.jhotdraw.app.Application,boolean)','org.jhotdraw.app.action.SaveAction.-init-(org.jhotdraw.app.Application,boolean)','48','org.jhotdraw.app.action.SaveAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAction(Application app, boolean saveAs) {\r\n    super(app);\r\n    this.saveAs = saveAs;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SaveAction.ID);\r\n}'),(387,'-init-()','org.jhotdraw.app.action.SaveAction.-init-()','48','org.jhotdraw.app.action.SaveAction','1() {\r\n}'),(388,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.SaveAction.actionPerformed(java.awt.event.ActionEvent)','48','org.jhotdraw.app.action.SaveAction','public void actionPerformed(ActionEvent evt) {\r\n    final View view = getActiveView();\r\n    if (view.isEnabled()) {\r\n        oldFocusOwner = SwingUtilities.getWindowAncestor(view.getComponent()).getFocusOwner();\r\n        view.setEnabled(false);\r\n        File saveToFile;\r\n        if (((!(saveAs)) && ((view.getFile()) != null)) && (view.canSaveTo(view.getFile()))) {\r\n            saveToFile(view, view.getFile());\r\n        } else {\r\n            JFileChooser fileChooser = view.getSaveChooser();\r\n            JSheet.showSaveSheet(fileChooser, view.getComponent(), new SheetListener() {\r\n                public void optionSelected(final SheetEvent evt) {\r\n                    if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                        final File file;\r\n                        if ((evt.getFileChooser().getFileFilter()) instanceof ExtensionFileFilter) {\r\n                            file = ((ExtensionFileFilter) (evt.getFileChooser().getFileFilter())).makeAcceptable(evt.getFileChooser().getSelectedFile());\r\n                        } else {\r\n                            file = evt.getFileChooser().getSelectedFile();\r\n                        }\r\n                        saveToFile(view, file);\r\n                    } else {\r\n                        view.setEnabled(true);\r\n                        if ((oldFocusOwner) != null) {\r\n                            oldFocusOwner.requestFocus();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}'),(389,'fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)','org.jhotdraw.app.action.SaveAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)','48','org.jhotdraw.app.action.SaveAction','/**\r\n * XXX - Change type of value to Throwable\r\n *\r\n * @param value\r\n * 		is either null for success or a Throwable on failure.\r\n */\r\nprotected void fileSaved(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.markChangesAsSaved();\r\n        int multiOpenId = 1;\r\n        for (View p : view.getApplication().views()) {\r\n            if (((p != view) && ((p.getFile()) != null)) && (p.getFile().equals(file))) {\r\n                multiOpenId = Math.max(multiOpenId, ((p.getMultipleOpenId()) + 1));\r\n            }\r\n        }\r\n        getApplication().addRecentFile(file);\r\n        view.setMultipleOpenId(multiOpenId);\r\n    } else {\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n        } else {\r\n            message = value.toString();\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(getActiveView().getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"couldntSave\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    view.setEnabled(true);\r\n    SwingUtilities.getWindowAncestor(view.getComponent()).toFront();\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}'),(390,'saveToFile(org.jhotdraw.app.View,java.io.File)','org.jhotdraw.app.action.SaveAction.saveToFile(org.jhotdraw.app.View,java.io.File)','48','org.jhotdraw.app.action.SaveAction','protected void saveToFile(final View view, final File file) {\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(view, file, value);\r\n        }\r\n    });\r\n}'),(391,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.SaveAsAction.-init-(org.jhotdraw.app.Application)','49','org.jhotdraw.app.action.SaveAsAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAsAction(Application app) {\r\n    super(app, true);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SaveAsAction.ID);\r\n}'),(392,'-init-()','org.jhotdraw.app.action.SelectAllAction.-init-()','50','org.jhotdraw.app.action.SelectAllAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SelectAllAction() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SelectAllAction.ID);\r\n}'),(393,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.SelectAllAction.actionPerformed(java.awt.event.ActionEvent)','50','org.jhotdraw.app.action.SelectAllAction','public void actionPerformed(ActionEvent evt) {\r\n    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n    if (focusOwner != null) {\r\n        if (focusOwner instanceof EditableComponent) {\r\n            ((EditableComponent) (focusOwner)).selectAll();\r\n        } else\r\n            if (focusOwner instanceof JTextComponent) {\r\n                ((JTextComponent) (focusOwner)).selectAll();\r\n            } else {\r\n                focusOwner.getToolkit().beep();\r\n            }\r\n\r\n    }\r\n}'),(394,'-init-(javax.swing.JToolBar,java.lang.String)','org.jhotdraw.app.action.ToggleToolBarAction.-init-(javax.swing.JToolBar,java.lang.String)','51','org.jhotdraw.app.action.ToggleToolBarAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleToolBarAction(JToolBar toolBar, String label) {\r\n    super(label);\r\n    propertyHandler = new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name.equals(\"visible\")) {\r\n                putValue(Actions.SELECTED_KEY, evt.getNewValue());\r\n            }\r\n        }\r\n    };\r\n    putValue(Actions.SELECTED_KEY, true);\r\n    setToolBar(toolBar);\r\n}'),(395,'-init-()','org.jhotdraw.app.action.ToggleToolBarAction.-init-()','51','org.jhotdraw.app.action.ToggleToolBarAction','1() {\r\n}'),(396,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ToggleToolBarAction.actionPerformed(java.awt.event.ActionEvent)','51','org.jhotdraw.app.action.ToggleToolBarAction','public void actionPerformed(ActionEvent e) {\r\n    if ((toolBar) != null) {\r\n        putValue(Actions.SELECTED_KEY, (!(toolBar.isVisible())));\r\n    }\r\n}'),(397,'putValue(java.lang.String,java.lang.Object)','org.jhotdraw.app.action.ToggleToolBarAction.putValue(java.lang.String,java.lang.Object)','51','org.jhotdraw.app.action.ToggleToolBarAction','public void putValue(String key, Object newValue) {\r\n    super.putValue(key, newValue);\r\n    if (key == (Actions.SELECTED_KEY)) {\r\n        if ((toolBar) != null) {\r\n            toolBar.setVisible(((Boolean) (newValue)));\r\n        }\r\n    }\r\n}'),(398,'setToolBar(javax.swing.JToolBar)','org.jhotdraw.app.action.ToggleToolBarAction.setToolBar(javax.swing.JToolBar)','51','org.jhotdraw.app.action.ToggleToolBarAction','public void setToolBar(JToolBar newValue) {\r\n    if ((toolBar) != null) {\r\n        toolBar.removePropertyChangeListener(propertyHandler);\r\n    }\r\n    toolBar = newValue;\r\n    if ((toolBar) != null) {\r\n        toolBar.addPropertyChangeListener(propertyHandler);\r\n        putValue(Actions.SELECTED_KEY, toolBar.isVisible());\r\n    }\r\n}'),(399,'-init-()','org.jhotdraw.app.action.ToggleViewPropertyAction.-init-()','52','org.jhotdraw.app.action.ToggleViewPropertyAction','1() {\r\n}'),(400,'-init-(org.jhotdraw.app.Application,java.lang.String)','org.jhotdraw.app.action.ToggleViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String)','52','org.jhotdraw.app.action.ToggleViewPropertyAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleViewPropertyAction(Application app, String propertyName) {\r\n    this(app, propertyName, Boolean.TYPE, true, false);\r\n}'),(401,'-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object)','org.jhotdraw.app.action.ToggleViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object)','52','org.jhotdraw.app.action.ToggleViewPropertyAction','public ToggleViewPropertyAction(Application app, String propertyName, Class propertyClass, Object selectedPropertyValue, Object deselectedPropertyValue) {\r\n    super(app);\r\n    this.propertyName = propertyName;\r\n    this.parameterClass = new Class[]{ propertyClass };\r\n    this.selectedPropertyValue = selectedPropertyValue;\r\n    this.deselectedPropertyValue = deselectedPropertyValue;\r\n    setterName = (\"set\" + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    getterName = (((propertyClass == (Boolean.TYPE)) || (propertyClass == (Boolean.class)) ? \"is\" : \"get\") + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    updateView();\r\n}'),(402,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ToggleViewPropertyAction.actionPerformed(java.awt.event.ActionEvent)','52','org.jhotdraw.app.action.ToggleViewPropertyAction','public void actionPerformed(ActionEvent evt) {\r\n    View p = getActiveView();\r\n    Object value = getCurrentValue();\r\n    Object newValue = ((value == (selectedPropertyValue)) || (((value != null) && ((selectedPropertyValue) != null)) && (value.equals(selectedPropertyValue)))) ? deselectedPropertyValue : selectedPropertyValue;\r\n    try {\r\n        p.getClass().getMethod(setterName, parameterClass).invoke(p, new Object[]{ newValue });\r\n    } catch (Throwable e) {\r\n        InternalError error = new InternalError((((\"No \" + (setterName)) + \" method on \") + p));\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(403,'getCurrentValue()','org.jhotdraw.app.action.ToggleViewPropertyAction.getCurrentValue()','52','org.jhotdraw.app.action.ToggleViewPropertyAction','private Object getCurrentValue() {\r\n    View p = getActiveView();\r\n    if (p != null) {\r\n        try {\r\n            return p.getClass().getMethod(getterName, ((Class[]) (null))).invoke(p);\r\n        } catch (Throwable e) {\r\n            InternalError error = new InternalError((((\"No \" + (getterName)) + \" method on \") + p));\r\n            error.initCause(e);\r\n            throw error;\r\n        }\r\n    }\r\n    return null;\r\n}'),(404,'installViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.ToggleViewPropertyAction.installViewListeners(org.jhotdraw.app.View)','52','org.jhotdraw.app.action.ToggleViewPropertyAction','protected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    p.addPropertyChangeListener(viewListener);\r\n    updateView();\r\n}'),(405,'uninstallViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.ToggleViewPropertyAction.uninstallViewListeners(org.jhotdraw.app.View)','52','org.jhotdraw.app.action.ToggleViewPropertyAction','/**\r\n * Installs listeners on the view object.\r\n */\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    p.removePropertyChangeListener(viewListener);\r\n}'),(406,'updateView()','org.jhotdraw.app.action.ToggleViewPropertyAction.updateView()','52','org.jhotdraw.app.action.ToggleViewPropertyAction','@Override\r\nprotected void updateView() {\r\n    boolean isSelected = false;\r\n    View p = getActiveView();\r\n    if (p != null) {\r\n        try {\r\n            Object value = p.getClass().getMethod(getterName, ((Class[]) (null))).invoke(p);\r\n            isSelected = (value == (selectedPropertyValue)) || (((value != null) && ((selectedPropertyValue) != null)) && (value.equals(selectedPropertyValue)));\r\n        } catch (Throwable e) {\r\n            InternalError error = new InternalError((((\"No \" + (getterName)) + \" method on \") + p));\r\n            error.initCause(e);\r\n            throw error;\r\n        }\r\n    }\r\n    putValue(Actions.SELECTED_KEY, isSelected);\r\n}'),(407,'-init-(java.awt.Component,java.lang.String)','org.jhotdraw.app.action.ToggleVisibleAction.-init-(java.awt.Component,java.lang.String)','53','org.jhotdraw.app.action.ToggleVisibleAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleVisibleAction(Component c, String name) {\r\n    this.component = c;\r\n    putValue(Action.NAME, name);\r\n    putValue(Actions.SELECTED_KEY, c.isVisible());\r\n    c.addComponentListener(new ComponentAdapter() {\r\n        public void componentShown(ComponentEvent e) {\r\n            putValue(Actions.SELECTED_KEY, component.isVisible());\r\n        }\r\n\r\n        public void componentHidden(ComponentEvent e) {\r\n            putValue(Actions.SELECTED_KEY, component.isVisible());\r\n        }\r\n    });\r\n}'),(408,'-init-()','org.jhotdraw.app.action.ToggleVisibleAction.-init-()','53','org.jhotdraw.app.action.ToggleVisibleAction','1() {\r\n}'),(409,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ToggleVisibleAction.actionPerformed(java.awt.event.ActionEvent)','53','org.jhotdraw.app.action.ToggleVisibleAction','public void actionPerformed(ActionEvent e) {\r\n    component.setVisible((!(component.isVisible())));\r\n}'),(410,'-init-()','org.jhotdraw.app.action.UndoAction.-init-()','54','org.jhotdraw.app.action.UndoAction','1() {\r\n}'),(411,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.app.action.UndoAction.-init-(org.jhotdraw.app.Application)','54','org.jhotdraw.app.action.UndoAction','/**\r\n * Creates a new instance.\r\n */\r\npublic UndoAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, UndoAction.ID);\r\n}'),(412,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.UndoAction.actionPerformed(java.awt.event.ActionEvent)','54','org.jhotdraw.app.action.UndoAction','public void actionPerformed(ActionEvent e) {\r\n    Action realRedoAction = getRealRedoAction();\r\n    if (realRedoAction != null) {\r\n        realRedoAction.actionPerformed(e);\r\n    }\r\n}'),(413,'getRealRedoAction()','org.jhotdraw.app.action.UndoAction.getRealRedoAction()','54','org.jhotdraw.app.action.UndoAction','private Action getRealRedoAction() {\r\n    return (getActiveView()) == null ? null : getActiveView().getAction(UndoAction.ID);\r\n}'),(414,'installViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.UndoAction.installViewListeners(org.jhotdraw.app.View)','54','org.jhotdraw.app.action.UndoAction','/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    if ((p.getAction(UndoAction.ID)) != null) {\r\n        p.getAction(UndoAction.ID).addPropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(415,'uninstallViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.UndoAction.uninstallViewListeners(org.jhotdraw.app.View)','54','org.jhotdraw.app.action.UndoAction','/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    if ((p.getAction(UndoAction.ID)) != null) {\r\n        p.getAction(UndoAction.ID).removePropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(416,'updateEnabledState()','org.jhotdraw.app.action.UndoAction.updateEnabledState()','54','org.jhotdraw.app.action.UndoAction','protected void updateEnabledState() {\r\n    boolean isEnabled = false;\r\n    Action realRedoAction = getRealRedoAction();\r\n    if (realRedoAction != null) {\r\n        isEnabled = realRedoAction.isEnabled();\r\n    }\r\n    setEnabled(isEnabled);\r\n}'),(417,'updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)','org.jhotdraw.app.action.UndoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)','54','org.jhotdraw.app.action.UndoAction','@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(UndoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(UndoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}'),(418,'-init-()','org.jhotdraw.app.action.ViewPropertyAction.-init-()','55','org.jhotdraw.app.action.ViewPropertyAction','1() {\r\n}'),(419,'-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Object)','org.jhotdraw.app.action.ViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Object)','55','org.jhotdraw.app.action.ViewPropertyAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ViewPropertyAction(Application app, String propertyName, Object propertyValue) {\r\n    this(app, propertyName, propertyValue.getClass(), propertyValue);\r\n}'),(420,'-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object)','org.jhotdraw.app.action.ViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object)','55','org.jhotdraw.app.action.ViewPropertyAction','public ViewPropertyAction(Application app, String propertyName, Class propertyClass, Object propertyValue) {\r\n    super(app);\r\n    this.propertyName = propertyName;\r\n    this.parameterClass = new Class[]{ propertyClass };\r\n    this.propertyValue = propertyValue;\r\n    setterName = (\"set\" + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    getterName = (((propertyClass == (Boolean.TYPE)) || (propertyClass == (Boolean.class)) ? \"is\" : \"get\") + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    updateSelectedState();\r\n}'),(421,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.app.action.ViewPropertyAction.actionPerformed(java.awt.event.ActionEvent)','55','org.jhotdraw.app.action.ViewPropertyAction','public void actionPerformed(ActionEvent evt) {\r\n    View p = getActiveView();\r\n    try {\r\n        p.getClass().getMethod(setterName, parameterClass).invoke(p, new Object[]{ propertyValue });\r\n    } catch (Throwable e) {\r\n        InternalError error = new InternalError((((\"Method invocation failed. setter:\" + (setterName)) + \" object:\") + p));\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(422,'installViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.ViewPropertyAction.installViewListeners(org.jhotdraw.app.View)','55','org.jhotdraw.app.action.ViewPropertyAction','@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    p.addPropertyChangeListener(viewListener);\r\n    updateSelectedState();\r\n}'),(423,'uninstallViewListeners(org.jhotdraw.app.View)','org.jhotdraw.app.action.ViewPropertyAction.uninstallViewListeners(org.jhotdraw.app.View)','55','org.jhotdraw.app.action.ViewPropertyAction','/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    p.removePropertyChangeListener(viewListener);\r\n}'),(424,'updateSelectedState()','org.jhotdraw.app.action.ViewPropertyAction.updateSelectedState()','55','org.jhotdraw.app.action.ViewPropertyAction','private void updateSelectedState() {\r\n    boolean isSelected = false;\r\n    View p = getActiveView();\r\n    if (p != null) {\r\n        try {\r\n            Object value = p.getClass().getMethod(getterName, ((Class[]) (null))).invoke(p);\r\n            isSelected = (value == (propertyValue)) || (((value != null) && ((propertyValue) != null)) && (value.equals(propertyValue)));\r\n        } catch (Throwable e) {\r\n            InternalError error = new InternalError((((\"Method invocation failed. getter:\" + (getterName)) + \" object:\") + p));\r\n            error.initCause(e);\r\n            throw error;\r\n        }\r\n    }\r\n    putValue(Actions.SELECTED_KEY, isSelected);\r\n}'),(425,'-init-()','org.jhotdraw.beans.AbstractBean.-init-()','56','org.jhotdraw.beans.AbstractBean','AbstractBean() {\r\n}'),(426,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.beans.AbstractBean.addPropertyChangeListener(java.beans.PropertyChangeListener)','56','org.jhotdraw.beans.AbstractBean','public void addPropertyChangeListener(PropertyChangeListener listener) {\r\n    propertySupport.addPropertyChangeListener(listener);\r\n}'),(427,'addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','org.jhotdraw.beans.AbstractBean.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','56','org.jhotdraw.beans.AbstractBean','public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {\r\n    propertySupport.addPropertyChangeListener(propertyName, listener);\r\n}'),(428,'clone()','org.jhotdraw.beans.AbstractBean.clone()','56','org.jhotdraw.beans.AbstractBean','public AbstractBean clone() {\r\n    AbstractBean that;\r\n    try {\r\n        that = ((AbstractBean) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(\"Clone failed\");\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n    that.propertySupport = new PropertyChangeSupport(that);\r\n    return that;\r\n}'),(429,'firePropertyChange(java.lang.String,boolean,boolean)','org.jhotdraw.beans.AbstractBean.firePropertyChange(java.lang.String,boolean,boolean)','56','org.jhotdraw.beans.AbstractBean','protected void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(430,'firePropertyChange(java.lang.String,int,int)','org.jhotdraw.beans.AbstractBean.firePropertyChange(java.lang.String,int,int)','56','org.jhotdraw.beans.AbstractBean','protected void firePropertyChange(String propertyName, int oldValue, int newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(431,'firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','org.jhotdraw.beans.AbstractBean.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','56','org.jhotdraw.beans.AbstractBean','protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(432,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.beans.AbstractBean.removePropertyChangeListener(java.beans.PropertyChangeListener)','56','org.jhotdraw.beans.AbstractBean','public void removePropertyChangeListener(PropertyChangeListener listener) {\r\n    propertySupport.removePropertyChangeListener(listener);\r\n}'),(433,'removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','org.jhotdraw.beans.AbstractBean.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','56','org.jhotdraw.beans.AbstractBean','public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\r\n    propertySupport.removePropertyChangeListener(propertyName, listener);\r\n}'),(434,'-init-()','org.jhotdraw.color.AbstractColorSlidersModel.-init-()','57','org.jhotdraw.color.AbstractColorSlidersModel','AbstractColorSlidersModel() {\r\n}'),(435,'addChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.color.AbstractColorSlidersModel.addChangeListener(javax.swing.event.ChangeListener)','57','org.jhotdraw.color.AbstractColorSlidersModel','public void addChangeListener(ChangeListener l) {\r\n    if ((listeners) == null) {\r\n        listeners = new LinkedList<ChangeListener>();\r\n    }\r\n    listeners.add(l);\r\n}'),(436,'fireStateChanged()','org.jhotdraw.color.AbstractColorSlidersModel.fireStateChanged()','57','org.jhotdraw.color.AbstractColorSlidersModel','public void fireStateChanged() {\r\n    if ((listeners) != null) {\r\n        ChangeEvent event = new ChangeEvent(this);\r\n        for (ChangeListener l : listeners) {\r\n            l.stateChanged(event);\r\n        }\r\n    }\r\n}'),(437,'removeChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.color.AbstractColorSlidersModel.removeChangeListener(javax.swing.event.ChangeListener)','57','org.jhotdraw.color.AbstractColorSlidersModel','public void removeChangeListener(ChangeListener l) {\r\n    listeners.remove(l);\r\n}'),(438,'-init-()','org.jhotdraw.color.AbstractColorSystem.-init-()','58','org.jhotdraw.color.AbstractColorSystem','AbstractColorSystem() {\r\n}'),(439,'toComponents(int,float[])','org.jhotdraw.color.AbstractColorSystem.toComponents(int,float[])','58','org.jhotdraw.color.AbstractColorSystem','public float[] toComponents(int rgb, float[] components) {\r\n    return toComponents(((rgb & 16711680) >> 16), ((rgb & 65280) >> 8), (rgb & 255), components);\r\n}'),(440,'toComponents(int,int,int,float[])','org.jhotdraw.color.AbstractColorSystem.toComponents(int,int,int,float[])','58','org.jhotdraw.color.AbstractColorSystem','public abstract float[] toComponents(int r, int g, int b, float[] components);'),(441,'-init-()','org.jhotdraw.color.AbstractHarmonicRule.-init-()','59','org.jhotdraw.color.AbstractHarmonicRule','AbstractHarmonicRule() {\r\n}'),(442,'getBaseIndex()','org.jhotdraw.color.AbstractHarmonicRule.getBaseIndex()','59','org.jhotdraw.color.AbstractHarmonicRule','public int getBaseIndex() {\r\n    return baseIndex;\r\n}'),(443,'getDerivedIndices()','org.jhotdraw.color.AbstractHarmonicRule.getDerivedIndices()','59','org.jhotdraw.color.AbstractHarmonicRule','public int[] getDerivedIndices() {\r\n    return derivedIndices;\r\n}'),(444,'setBaseIndex()','org.jhotdraw.color.AbstractHarmonicRule.setBaseIndex()','59','org.jhotdraw.color.AbstractHarmonicRule','public void setBaseIndex() {\r\n    this.baseIndex = baseIndex;\r\n}'),(445,'setDerivedIndices(int[])','org.jhotdraw.color.AbstractHarmonicRule.setDerivedIndices(int[])','59','org.jhotdraw.color.AbstractHarmonicRule','public void setDerivedIndices(int... indices) {\r\n    this.derivedIndices = indices;\r\n}'),(446,'-init-()','org.jhotdraw.color.CMYKICCColorSystem.-init-()','60','org.jhotdraw.color.CMYKICCColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic CMYKICCColorSystem() {\r\n    try {\r\n        read(getClass().getResourceAsStream(\"Generic CMYK Profile.icc\"));\r\n    } catch (IOException e) {\r\n        InternalError err = new InternalError(\"Couldn	 load \"Generic CMYK Profile.icc\".\");\r\n        err.initCause(e);\r\n        throw err;\r\n    }\r\n}'),(447,'-init-(java.io.InputStream)','org.jhotdraw.color.CMYKICCColorSystem.-init-(java.io.InputStream)','60','org.jhotdraw.color.CMYKICCColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic CMYKICCColorSystem(InputStream iccProfile) throws IOException {\r\n    read(iccProfile);\r\n}'),(448,'getComponentCount()','org.jhotdraw.color.CMYKICCColorSystem.getComponentCount()','60','org.jhotdraw.color.CMYKICCColorSystem','public int getComponentCount() {\r\n    return 4;\r\n}'),(449,'read(java.io.InputStream)','org.jhotdraw.color.CMYKICCColorSystem.read(java.io.InputStream)','60','org.jhotdraw.color.CMYKICCColorSystem','public void read(InputStream iccProfile) throws IOException {\r\n    this.colorSpace = new ICC_ColorSpace(ICC_Profile.getInstance(iccProfile));\r\n}'),(450,'toComponents(int,int,int,float[])','org.jhotdraw.color.CMYKICCColorSystem.toComponents(int,int,int,float[])','60','org.jhotdraw.color.CMYKICCColorSystem','public float[] toComponents(int r, int g, int b, float[] component) {\r\n    if ((component == null) || ((component.length) != 4)) {\r\n        component = new float[4];\r\n    }\r\n    component[0] = r / 255.0F;\r\n    component[1] = g / 255.0F;\r\n    component[2] = b / 255.0F;\r\n    float[] cmyk = colorSpace.fromRGB(component);\r\n    System.arraycopy(cmyk, 0, component, 0, 4);\r\n    return component;\r\n}'),(451,'toRGB(float[])','org.jhotdraw.color.CMYKICCColorSystem.toRGB(float[])','60','org.jhotdraw.color.CMYKICCColorSystem','public int toRGB(float... component) {\r\n    float[] rgb = colorSpace.toRGB(component);\r\n    return ((-16777216 | (((int) ((rgb[0]) * 255.0F)) << 16)) | (((int) ((rgb[1]) * 255.0F)) << 8)) | ((int) ((rgb[2]) * 255.0F));\r\n}'),(452,'-init-()','org.jhotdraw.color.CMYKNominalColorSystem.-init-()','61','org.jhotdraw.color.CMYKNominalColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic CMYKNominalColorSystem() {\r\n}'),(453,'getComponentCount()','org.jhotdraw.color.CMYKNominalColorSystem.getComponentCount()','61','org.jhotdraw.color.CMYKNominalColorSystem','public int getComponentCount() {\r\n    return 4;\r\n}'),(454,'toComponents(int,int,int,float[])','org.jhotdraw.color.CMYKNominalColorSystem.toComponents(int,int,int,float[])','61','org.jhotdraw.color.CMYKNominalColorSystem','public float[] toComponents(int r, int g, int b, float[] component) {\r\n    if ((component == null) || ((component.length) != 4)) {\r\n        component = new float[4];\r\n    }\r\n    float cyan;\r\n    float magenta;\r\n    float yellow;\r\n    float black;\r\n    cyan = 1.0F - (r / 255.0F);\r\n    magenta = 1.0F - (g / 255.0F);\r\n    yellow = 1.0F - (b / 255.0F);\r\n    if ((Math.min(Math.min(cyan, magenta), yellow)) >= 1.0F) {\r\n        cyan = magenta = yellow = 0.0F;\r\n        black = 1.0F;\r\n    } else {\r\n        black = Math.min(Math.min(cyan, magenta), yellow);\r\n        if (black > 0.0F) {\r\n            cyan = (cyan - black) / (1 - black);\r\n            magenta = (magenta - black) / (1 - black);\r\n            yellow = (yellow - black) / (1 - black);\r\n        }\r\n    }\r\n    component[0] = cyan;\r\n    component[1] = magenta;\r\n    component[2] = yellow;\r\n    component[3] = black;\r\n    return component;\r\n}'),(455,'toRGB(float[])','org.jhotdraw.color.CMYKNominalColorSystem.toRGB(float[])','61','org.jhotdraw.color.CMYKNominalColorSystem','public int toRGB(float... component) {\r\n    float cyan;\r\n    float magenta;\r\n    float yellow;\r\n    float black;\r\n    cyan = component[0];\r\n    magenta = component[1];\r\n    yellow = component[2];\r\n    black = component[3];\r\n    float red;\r\n    float green;\r\n    float blue;\r\n    red = (1.0F - (cyan * (1.0F - black))) - black;\r\n    green = (1.0F - (magenta * (1.0F - black))) - black;\r\n    blue = (1.0F - (yellow * (1.0F - black))) - black;\r\n    return ((-16777216 | (((int) (red * 255)) << 16)) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));\r\n}'),(456,'-init-()','org.jhotdraw.color.ColorListCellRenderer.-init-()','63','org.jhotdraw.color.ColorListCellRenderer','ColorIcon() {\r\n}'),(457,'getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)','org.jhotdraw.color.ColorListCellRenderer.getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)','63','org.jhotdraw.color.ColorListCellRenderer','@Override\r\npublic Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\r\n    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\r\n    if (value instanceof CompositeColor) {\r\n        value = ((CompositeColor) (value)).getColor();\r\n    }\r\n    if (value instanceof Color) {\r\n        Color c = ((Color) (value));\r\n        icon.setColor(c);\r\n        String text = \"000000\" + (Integer.toHexString(c.getRGB()));\r\n        text = # + (text.substring(((text.length()) - 6)));\r\n        // setText(text);\r\n        setToolTipText(text);\r\n        setText(\"\");\r\n    } else {\r\n        icon.setColor(null);\r\n        setText(\"\");\r\n    }\r\n    setIcon(icon);\r\n    return this;\r\n}'),(458,'-init-()','org.jhotdraw.color.ColorListCellRenderer$ColorIcon.-init-()','62','org.jhotdraw.color.ColorListCellRenderer$ColorIcon','ColorIcon() {\r\n}'),(459,'getIconHeight()','org.jhotdraw.color.ColorListCellRenderer$ColorIcon.getIconHeight()','62','org.jhotdraw.color.ColorListCellRenderer$ColorIcon','public int getIconHeight() {\r\n    return 18;\r\n}'),(460,'getIconWidth()','org.jhotdraw.color.ColorListCellRenderer$ColorIcon.getIconWidth()','62','org.jhotdraw.color.ColorListCellRenderer$ColorIcon','public int getIconWidth() {\r\n    return 24;\r\n}'),(461,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.color.ColorListCellRenderer$ColorIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','62','org.jhotdraw.color.ColorListCellRenderer$ColorIcon','public void paintIcon(Component c, Graphics g, int x, int y) {\r\n    if ((color) != null) {\r\n        g.setColor(new Color(3355443));\r\n        g.drawRect(x, y, ((getIconWidth()) - 1), ((getIconHeight()) - 1));\r\n        g.setColor(Color.WHITE);\r\n        g.drawRect((x + 1), (y + 1), ((getIconWidth()) - 3), ((getIconHeight()) - 3));\r\n        g.setColor(color);\r\n        g.fillRect((x + 2), (y + 2), ((getIconWidth()) - 4), ((getIconHeight()) - 4));\r\n    }\r\n}'),(462,'setColor(java.awt.Color)','org.jhotdraw.color.ColorListCellRenderer$ColorIcon.setColor(java.awt.Color)','62','org.jhotdraw.color.ColorListCellRenderer$ColorIcon','public void setColor(Color newValue) {\r\n    color = newValue;\r\n}'),(463,'addChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.color.ColorSliderModel.addChangeListener(javax.swing.event.ChangeListener)','64','org.jhotdraw.color.ColorSliderModel','public void addChangeListener(ChangeListener l);'),(464,'configureSlider(int,javax.swing.JSlider)','org.jhotdraw.color.ColorSliderModel.configureSlider(int,javax.swing.JSlider)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Configures a JSlider.\r\n */\r\npublic void configureSlider(int componentIndex, JSlider slider);'),(465,'getBoundedRangeModel(int)','org.jhotdraw.color.ColorSliderModel.getBoundedRangeModel(int)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Returns the BoundedRangeModel used for the specified component\r\n * index.\r\n *\r\n * @param componentIndex\r\n * 		.\r\n * @return BoundedRangeModel.\r\n */\r\npublic BoundedRangeModel getBoundedRangeModel(int componentIndex);'),(466,'getColor()','org.jhotdraw.color.ColorSliderModel.getColor()','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Returns the color value of the model.\r\n * This is a convenience method for calling getCompositeColor().getColor().\r\n *\r\n * @return color.\r\n */\r\npublic Color getColor();'),(467,'getColorSystem()','org.jhotdraw.color.ColorSliderModel.getColorSystem()','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Returns the ColorSystem used by this ColorSliderModel.\r\n *\r\n * @return ColorSystem.\r\n */\r\npublic ColorSystem getColorSystem();'),(468,'getComponentCount()','org.jhotdraw.color.ColorSliderModel.getComponentCount()','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Returns the number of components used by this ColorSliderModel.\r\n *\r\n * @return Component count.\r\n */\r\npublic int getComponentCount();'),(469,'getComponentValue(int)','org.jhotdraw.color.ColorSliderModel.getComponentValue(int)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Gets a value of an individual component.\r\n *\r\n * @param componentIndex\r\n * 		\r\n * @return Value\r\n */\r\npublic float getComponentValue(int componentIndex);'),(470,'getCompositeColor()','org.jhotdraw.color.ColorSliderModel.getCompositeColor()','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Returns a CompositeColor representing the current value of the ColorSliderModel.\r\n *\r\n * @return CompositeColor.\r\n */\r\npublic CompositeColor getCompositeColor();'),(471,'getInterpolatedRGB(int,float)','org.jhotdraw.color.ColorSliderModel.getInterpolatedRGB(int,float)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Returns an RGB value based on the value of the specified component index\r\n * and value, based on the values of all other components of the model.\r\n *\r\n * @param componentIndex\r\n * 		\r\n * @param componentValue\r\n * 		\r\n * @return RGB value.\r\n */\r\npublic int getInterpolatedRGB(int componentIndex, float componentValue);'),(472,'removeChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.color.ColorSliderModel.removeChangeListener(javax.swing.event.ChangeListener)','64','org.jhotdraw.color.ColorSliderModel','public void removeChangeListener(ChangeListener l);'),(473,'setColor(java.awt.Color)','org.jhotdraw.color.ColorSliderModel.setColor(java.awt.Color)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Sets the color value of the model.\r\n * This is a convenience method for calling setCompositeColor(new CompositeColor(getColorSystem(), color.getRGB());\r\n *\r\n * @param newValue\r\n * 		.\r\n */\r\npublic void setColor(Color newValue);'),(474,'setColorSystem(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.ColorSliderModel.setColorSystem(org.jhotdraw.color.ColorSystem)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Changes the ColorSystem used by this ColorSliderModel.\r\n *\r\n * @param newValue\r\n * 		ColorSystem.\r\n */\r\npublic void setColorSystem(ColorSystem newValue);'),(475,'setComponentValue(int,float)','org.jhotdraw.color.ColorSliderModel.setComponentValue(int,float)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Sets a value for an individual component.\r\n *\r\n * @param componentIndex\r\n * 		\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setComponentValue(int componentIndex, float newValue);'),(476,'setCompositeColor(org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.ColorSliderModel.setCompositeColor(org.jhotdraw.color.CompositeColor)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Sets the composite color value of the model.\r\n *\r\n * @param newValue\r\n * 		.\r\n */\r\npublic void setCompositeColor(CompositeColor newValue);'),(477,'unconfigureSlider(javax.swing.JSlider)','org.jhotdraw.color.ColorSliderModel.unconfigureSlider(javax.swing.JSlider)','64','org.jhotdraw.color.ColorSliderModel','/**\r\n * Unconfigures a JSlider.\r\n */\r\npublic void unconfigureSlider(JSlider slider);'),(478,'-init-(javax.swing.JSlider)','org.jhotdraw.color.ColorSliderUI.-init-(javax.swing.JSlider)','67','org.jhotdraw.color.ColorSliderUI','/**\r\n * Creates a new instance.\r\n */\r\npublic ColorSliderUI(JSlider b) {\r\n    super(b);\r\n}'),(479,'-init-()','org.jhotdraw.color.ColorSliderUI.-init-()','67','org.jhotdraw.color.ColorSliderUI','CSUIPropertyChangeHandler() {\r\n}'),(480,'calculateThumbLocation()','org.jhotdraw.color.ColorSliderUI.calculateThumbLocation()','67','org.jhotdraw.color.ColorSliderUI','protected void calculateThumbLocation() {\r\n    super.calculateThumbLocation();\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        thumbRect.y -= 3;\r\n    } else {\r\n        thumbRect.x -= 3;\r\n    }\r\n}'),(481,'calculateTickRect()','org.jhotdraw.color.ColorSliderUI.calculateTickRect()','67','org.jhotdraw.color.ColorSliderUI','protected void calculateTickRect() {\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        tickRect.x = trackRect.x;\r\n        // tickRect.y = trackRect.y + trackRect.height;\r\n        tickRect.y = (trackRect.y) - (getTickLength());\r\n        tickRect.width = trackRect.width;\r\n        tickRect.height = getTickLength();\r\n        if (!(slider.getPaintTicks())) {\r\n            --(tickRect.y);\r\n            tickRect.height = 0;\r\n        }\r\n    } else {\r\n        /* if(! QuaquaUtilities.isLeftToRight(slider)) {\n        tickRect.x = trackRect.x + trackRect.width;\n        tickRect.width = getTickLength();\n        }\n        else {\n        tickRect.width = getTickLength();\n        tickRect.x = trackRect.x - tickRect.width;\n        }\n         */\r\n        tickRect.width = getTickLength();\r\n        tickRect.x = contentRect.x;// trackRect.x - tickRect.width - 1;\r\n\r\n        tickRect.y = trackRect.y;\r\n        tickRect.height = trackRect.height;\r\n        if (!(slider.getPaintTicks())) {\r\n            --(tickRect.x);\r\n            tickRect.width = 0;\r\n        }\r\n    }\r\n}'),(482,'calculateTrackRect()','org.jhotdraw.color.ColorSliderUI.calculateTrackRect()','67','org.jhotdraw.color.ColorSliderUI','protected void calculateTrackRect() {\r\n    int centerSpacing = 0;// used to center sliders added using BorderLayout.CENTER (bug 4275631)\r\n\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        centerSpacing = thumbRect.height;\r\n        if (slider.getPaintTicks())\r\n            centerSpacing += getTickLength();\r\n\r\n        if (slider.getPaintLabels())\r\n            centerSpacing += getHeightOfTallestLabel();\r\n\r\n        trackRect.x = ((contentRect.x) + (trackBuffer)) + 1;\r\n        // trackRect.y = contentRect.y + (contentRect.height - centerSpacing - 1)/2;\r\n        trackRect.height = 13;\r\n        trackRect.y = ((contentRect.y) + (contentRect.height)) - (trackRect.height);\r\n        trackRect.width = ((contentRect.width) - ((trackBuffer) * 2)) - 1;\r\n    } else {\r\n        /* centerSpacing = thumbRect.width;\n        if (! QuaquaUtilities.isLeftToRight(slider)) {\n        if ( slider.getPaintTicks() ) centerSpacing += getTickLength();\n        if ( slider.getPaintLabels() ) centerSpacing += getWidthOfWidestLabel();\n        } else {\n        if ( slider.getPaintTicks() ) centerSpacing -= getTickLength();\n        if ( slider.getPaintLabels() ) centerSpacing -= getWidthOfWidestLabel();\n        }\n        trackRect.x = contentRect.x + (contentRect.width - centerSpacing - 1)/2 + 2;\n         */\r\n        trackRect.width = 14;\r\n        trackRect.x = ((contentRect.x) + (contentRect.width)) - (trackRect.width);\r\n        trackRect.y = (contentRect.y) + (trackBuffer);\r\n        trackRect.height = ((contentRect.height) - ((trackBuffer) * 2)) + 1;\r\n    }\r\n}'),(483,'createPropertyChangeListener(javax.swing.JSlider)','org.jhotdraw.color.ColorSliderUI.createPropertyChangeListener(javax.swing.JSlider)','67','org.jhotdraw.color.ColorSliderUI','protected PropertyChangeListener createPropertyChangeListener(JSlider slider) {\r\n    return new ColorSliderUI.CSUIPropertyChangeHandler();\r\n}'),(484,'createTrackListener(javax.swing.JSlider)','org.jhotdraw.color.ColorSliderUI.createTrackListener(javax.swing.JSlider)','67','org.jhotdraw.color.ColorSliderUI','protected BasicSliderUI.TrackListener createTrackListener(JSlider slider) {\r\n    return new ColorSliderUI.QuaquaTrackListener();\r\n}'),(485,'createUI(javax.swing.JComponent)','org.jhotdraw.color.ColorSliderUI.createUI(javax.swing.JComponent)','67','org.jhotdraw.color.ColorSliderUI','public static ComponentUI createUI(JComponent b) {\r\n    if (null == (UIManager.getIcon(\"Slider.northThumb.small\"))) {\r\n        UIManager.put(\"Slider.northThumb.small\", new SliderThumbIcon(Images.createImage(ColorSliderUI.class.getResource(\"/org/jhotdraw/color/images/Slider.northThumbs.small.png\")), 6, true));\r\n    }\r\n    if (null == (UIManager.getIcon(\"Slider.westThumb.small\"))) {\r\n        UIManager.put(\"Slider.westThumb.small\", new SliderThumbIcon(Images.createImage(ColorSliderUI.class.getResource(\"/org/jhotdraw/color/images/Slider.westThumbs.small.png\")), 6, true));\r\n    }\r\n    return new ColorSliderUI(((JSlider) (b)));\r\n}'),(486,'getMinimumHorizontalSize()','org.jhotdraw.color.ColorSliderUI.getMinimumHorizontalSize()','67','org.jhotdraw.color.ColorSliderUI','public Dimension getMinimumHorizontalSize() {\r\n    return ColorSliderUI.MINIMUM_HORIZONTAL_SIZE;\r\n}'),(487,'getMinimumVerticalSize()','org.jhotdraw.color.ColorSliderUI.getMinimumVerticalSize()','67','org.jhotdraw.color.ColorSliderUI','public Dimension getMinimumVerticalSize() {\r\n    return ColorSliderUI.MINIMUM_VERTICAL_SIZE;\r\n}'),(488,'getPreferredHorizontalSize()','org.jhotdraw.color.ColorSliderUI.getPreferredHorizontalSize()','67','org.jhotdraw.color.ColorSliderUI','public Dimension getPreferredHorizontalSize() {\r\n    return ColorSliderUI.PREFERRED_HORIZONTAL_SIZE;\r\n}'),(489,'getPreferredVerticalSize()','org.jhotdraw.color.ColorSliderUI.getPreferredVerticalSize()','67','org.jhotdraw.color.ColorSliderUI','public Dimension getPreferredVerticalSize() {\r\n    return ColorSliderUI.PREFERRED_VERTICAL_SIZE;\r\n}'),(490,'getThumbIcon()','org.jhotdraw.color.ColorSliderUI.getThumbIcon()','67','org.jhotdraw.color.ColorSliderUI','/* public void paint( Graphics g, JComponent c )   {\ng.setColor(Color.green);\ng.fillRect(0,0,c.getWidth(), c.getHeight());\nsuper.paint(g,c);\n}\n */\r\nprotected Icon getThumbIcon() {\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        return UIManager.getIcon(\"Slider.northThumb.small\");\r\n    } else {\r\n        return UIManager.getIcon(\"Slider.westThumb.small\");\r\n    }\r\n}'),(491,'getThumbSize()','org.jhotdraw.color.ColorSliderUI.getThumbSize()','67','org.jhotdraw.color.ColorSliderUI','protected Dimension getThumbSize() {\r\n    Icon thumb = getThumbIcon();\r\n    return new Dimension(thumb.getIconWidth(), thumb.getIconHeight());\r\n}'),(492,'getTickLength()','org.jhotdraw.color.ColorSliderUI.getTickLength()','67','org.jhotdraw.color.ColorSliderUI','/**\r\n * Gets the height of the tick area for horizontal sliders and the width of the\r\n * tick area for vertical sliders.  BasicSliderUI uses the returned value to\r\n * determine the tick area rectangle.  If you want to give your ticks some room,\r\n * make this larger than you need and paint your ticks away from the sides in paintTicks().\r\n */\r\nprotected int getTickLength() {\r\n    return 4;\r\n}'),(493,'installDefaults(javax.swing.JSlider)','org.jhotdraw.color.ColorSliderUI.installDefaults(javax.swing.JSlider)','67','org.jhotdraw.color.ColorSliderUI','protected void installDefaults(JSlider slider) {\r\n    super.installDefaults(slider);\r\n    focusInsets = new Insets(0, 0, 0, 0);\r\n    slider.setOpaque(false);\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        slider.setBorder(new EmptyBorder(0, 1, (-1), 1));\r\n    } else {\r\n        slider.setBorder(new EmptyBorder(0, 0, 0, 1));\r\n    }\r\n    // slider.setRequestFocusEnabled(QuaquaManager.getBoolean(\"Slider.requestFocusEnabled\"));\r\n    slider.setRequestFocusEnabled(true);\r\n}'),(494,'paintColorTrack(java.awt.Graphics,int,int,int,int,int)','org.jhotdraw.color.ColorSliderUI.paintColorTrack(java.awt.Graphics,int,int,int,int,int)','67','org.jhotdraw.color.ColorSliderUI','public void paintColorTrack(Graphics g, int x, int y, int width, int height, int buffer) {\r\n    // g.setColor(Color.black);\r\n    // g.fillRect(x, y, width, height);\r\n    if ((((colorTrackImageProducer) == null) || ((colorTrackImageProducer.getWidth()) != width)) || ((colorTrackImageProducer.getHeight()) != height)) {\r\n        if ((colorTrackImage) != null) {\r\n            colorTrackImage.flush();\r\n        }\r\n        colorTrackImageProducer = new ColorTrackImageProducer(width, height, (buffer + 2), ((slider.getOrientation()) == (JSlider.HORIZONTAL)));\r\n        if ((slider.getClientProperty(\"colorSliderModel\")) != null) {\r\n            colorTrackImageProducer.setColorSliderModel(((ColorSliderModel) (slider.getClientProperty(\"colorSliderModel\"))));\r\n        }\r\n        if ((slider.getClientProperty(\"colorComponentIndex\")) != null) {\r\n            colorTrackImageProducer.setColorComponentIndex(((Integer) (slider.getClientProperty(\"colorComponentIndex\"))).intValue());\r\n        }\r\n        colorTrackImageProducer.generateColorTrack();\r\n        colorTrackImage = slider.createImage(colorTrackImageProducer);\r\n    } else {\r\n        colorTrackImageProducer.regenerateColorTrack();\r\n    }\r\n    g.drawImage(colorTrackImage, x, y, slider);\r\n}'),(495,'paintFocus(java.awt.Graphics)','org.jhotdraw.color.ColorSliderUI.paintFocus(java.awt.Graphics)','67','org.jhotdraw.color.ColorSliderUI','public void paintFocus(Graphics g) {\r\n}'),(496,'paintMajorTickForHorizSlider(java.awt.Graphics,java.awt.Rectangle,int)','org.jhotdraw.color.ColorSliderUI.paintMajorTickForHorizSlider(java.awt.Graphics,java.awt.Rectangle,int)','67','org.jhotdraw.color.ColorSliderUI','protected void paintMajorTickForHorizSlider(Graphics g, Rectangle tickBounds, int x) {\r\n    g.drawLine(x, 0, x, ((tickBounds.height) - 1));\r\n}'),(497,'paintMajorTickForVertSlider(java.awt.Graphics,java.awt.Rectangle,int)','org.jhotdraw.color.ColorSliderUI.paintMajorTickForVertSlider(java.awt.Graphics,java.awt.Rectangle,int)','67','org.jhotdraw.color.ColorSliderUI','protected void paintMajorTickForVertSlider(Graphics g, Rectangle tickBounds, int y) {\r\n    g.drawLine(0, y, ((tickBounds.width) - 1), y);\r\n}'),(498,'paintMinorTickForHorizSlider(java.awt.Graphics,java.awt.Rectangle,int)','org.jhotdraw.color.ColorSliderUI.paintMinorTickForHorizSlider(java.awt.Graphics,java.awt.Rectangle,int)','67','org.jhotdraw.color.ColorSliderUI','protected void paintMinorTickForHorizSlider(Graphics g, Rectangle tickBounds, int x) {\r\n    // g.drawLine( x, 0, x, tickBounds.height / 2 - 1 );\r\n    g.drawLine(x, 0, x, ((tickBounds.height) - 1));\r\n}'),(499,'paintMinorTickForVertSlider(java.awt.Graphics,java.awt.Rectangle,int)','org.jhotdraw.color.ColorSliderUI.paintMinorTickForVertSlider(java.awt.Graphics,java.awt.Rectangle,int)','67','org.jhotdraw.color.ColorSliderUI','protected void paintMinorTickForVertSlider(Graphics g, Rectangle tickBounds, int y) {\r\n    g.drawLine(((tickBounds.width) / 2), y, (((tickBounds.width) / 2) - 1), y);\r\n}'),(500,'paintThumb(java.awt.Graphics)','org.jhotdraw.color.ColorSliderUI.paintThumb(java.awt.Graphics)','67','org.jhotdraw.color.ColorSliderUI','public void paintThumb(Graphics g) {\r\n    Rectangle knobBounds = thumbRect;\r\n    int w = knobBounds.width;\r\n    int h = knobBounds.height;\r\n    getThumbIcon().paintIcon(slider, g, knobBounds.x, knobBounds.y);\r\n    /* g.setColor(Color.green);\n    ((Graphics2D) g).draw(knobBounds);\n     */\r\n}'),(501,'paintTicks(java.awt.Graphics)','org.jhotdraw.color.ColorSliderUI.paintTicks(java.awt.Graphics)','67','org.jhotdraw.color.ColorSliderUI','public void paintTicks(Graphics g) {\r\n    Rectangle tickBounds = tickRect;\r\n    int i;\r\n    int maj;\r\n    int min;\r\n    int max;\r\n    int w = tickBounds.width;\r\n    int h = tickBounds.height;\r\n    int centerEffect;\r\n    int tickHeight;\r\n    /* g.setColor(slider.getBackground());\n    g.fillRect(tickBounds.x, tickBounds.y, tickBounds.width, tickBounds.height);\n     */\r\n    g.setColor(ColorSliderUI.foreground);\r\n    maj = slider.getMajorTickSpacing();\r\n    min = slider.getMinorTickSpacing();\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        g.translate(0, tickBounds.y);\r\n        int value = slider.getMinimum();\r\n        int xPos = 0;\r\n        if ((slider.getMinorTickSpacing()) > 0) {\r\n            while (value <= (slider.getMaximum())) {\r\n                xPos = xPositionForValue(value);\r\n                paintMinorTickForHorizSlider(g, tickBounds, xPos);\r\n                value += slider.getMinorTickSpacing();\r\n            } \r\n        }\r\n        if ((slider.getMajorTickSpacing()) > 0) {\r\n            value = slider.getMinimum();\r\n            while (value <= (slider.getMaximum())) {\r\n                xPos = xPositionForValue(value);\r\n                paintMajorTickForHorizSlider(g, tickBounds, xPos);\r\n                value += slider.getMajorTickSpacing();\r\n            } \r\n        }\r\n        g.translate(0, (-(tickBounds.y)));\r\n    } else {\r\n        g.translate(tickBounds.x, 0);\r\n        int value = slider.getMinimum();\r\n        int yPos = 0;\r\n        if ((slider.getMinorTickSpacing()) > 0) {\r\n            int offset = 0;\r\n            if (!(slider.getComponentOrientation().isLeftToRight())) {\r\n                offset = (tickBounds.width) - ((tickBounds.width) / 2);\r\n                g.translate(offset, 0);\r\n            }\r\n            while (value <= (slider.getMaximum())) {\r\n                yPos = yPositionForValue(value);\r\n                paintMinorTickForVertSlider(g, tickBounds, yPos);\r\n                value += slider.getMinorTickSpacing();\r\n            } \r\n            if (!(slider.getComponentOrientation().isLeftToRight())) {\r\n                g.translate((-offset), 0);\r\n            }\r\n        }\r\n        if ((slider.getMajorTickSpacing()) > 0) {\r\n            value = slider.getMinimum();\r\n            if (!(slider.getComponentOrientation().isLeftToRight())) {\r\n                g.translate(2, 0);\r\n            }\r\n            while (value <= (slider.getMaximum())) {\r\n                yPos = yPositionForValue(value);\r\n                paintMajorTickForVertSlider(g, tickBounds, yPos);\r\n                value += slider.getMajorTickSpacing();\r\n            } \r\n            if (!(slider.getComponentOrientation().isLeftToRight())) {\r\n                g.translate((-2), 0);\r\n            }\r\n        }\r\n        g.translate((-(tickBounds.x)), 0);\r\n    }\r\n    /* g.setColor(Color.red);\n    ((Graphics2D) g).draw(tickBounds);\n     */\r\n}'),(502,'paintTrack(java.awt.Graphics)','org.jhotdraw.color.ColorSliderUI.paintTrack(java.awt.Graphics)','67','org.jhotdraw.color.ColorSliderUI','public void paintTrack(Graphics g) {\r\n    int cx;\r\n    int cy;\r\n    int cw;\r\n    int ch;\r\n    int pad;\r\n    Rectangle trackBounds = trackRect;\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        pad = trackBuffer;// - thumbRect.width / 2 + 2;\r\n\r\n        cx = ((trackBounds.x) - pad) + 1;\r\n        cy = trackBounds.y;\r\n        // cy = (trackBounds.height / 2) - 4;\r\n        cw = ((trackBounds.width) + (pad * 2)) - 2;\r\n        ch = trackBounds.height;\r\n    } else {\r\n        pad = trackBuffer;\r\n        // cx = (trackBounds.width / 2) - 4;\r\n        // cx = (trackBounds.width / 2);\r\n        // cx = thumbRect.x + 2;\r\n        cx = trackBounds.x;\r\n        // cy = pad;\r\n        cy = (contentRect.y) + 2;\r\n        cw = (trackBounds.width) - 1;\r\n        // ch = trackBounds.height;\r\n        ch = ((trackBounds.height) + (pad * 2)) - 5;\r\n    }\r\n    g.setColor(ColorSliderUI.trackBackground);\r\n    g.fillRect(cx, cy, cw, ch);\r\n    g.setColor(ColorSliderUI.foreground);\r\n    g.drawRect(cx, cy, (cw - 1), (ch - 1));\r\n    paintColorTrack(g, (cx + 2), (cy + 2), (cw - 4), (ch - 4), trackBuffer);\r\n}'),(503,'-init-()','org.jhotdraw.color.ColorSliderUI$CSUIPropertyChangeHandler.-init-()','65','org.jhotdraw.color.ColorSliderUI$CSUIPropertyChangeHandler','CSUIPropertyChangeHandler() {\r\n}'),(504,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.color.ColorSliderUI$CSUIPropertyChangeHandler.propertyChange(java.beans.PropertyChangeEvent)','65','org.jhotdraw.color.ColorSliderUI$CSUIPropertyChangeHandler','public void propertyChange(PropertyChangeEvent e) {\r\n    String propertyName = e.getPropertyName();\r\n    if (propertyName.equals(\"Frame.active\")) {\r\n        // calculateGeometry();\r\n        slider.repaint();\r\n    } else\r\n        if (propertyName.equals(\"colorSliderModel\")) {\r\n            if ((colorTrackImageProducer) != null) {\r\n                colorTrackImageProducer.setColorSliderModel(((ColorSliderModel) (e.getNewValue())));\r\n                if (colorTrackImageProducer.needsGeneration()) {\r\n                    slider.repaint();\r\n                }\r\n            }\r\n        } else\r\n            if (propertyName.equals(\"snapToTicks\")) {\r\n                if ((colorTrackImageProducer) != null) {\r\n                    colorTrackImageProducer.markAsDirty();\r\n                    slider.repaint();\r\n                }\r\n            } else\r\n                if (propertyName.equals(\"colorComponentIndex\")) {\r\n                    if (((colorTrackImageProducer) != null) && ((e.getNewValue()) != null)) {\r\n                        colorTrackImageProducer.setColorComponentIndex(((Integer) (e.getNewValue())).intValue());\r\n                        if (colorTrackImageProducer.needsGeneration()) {\r\n                            slider.repaint();\r\n                        }\r\n                    }\r\n                } else\r\n                    if (propertyName.equals(\"colorComponentChange\")) {\r\n                        Integer value = ((Integer) (e.getNewValue()));\r\n                        if ((value != null) && ((colorTrackImageProducer) != null)) {\r\n                            colorTrackImageProducer.componentChanged(value.intValue());\r\n                            if (colorTrackImageProducer.needsGeneration()) {\r\n                                slider.repaint();\r\n                            }\r\n                        }\r\n                    } else\r\n                        if (propertyName.equals(\"colorComponentValue\")) {\r\n                            Integer value = ((Integer) (slider.getClientProperty(\"colorComponentChange\")));\r\n                            if ((value != null) && ((colorTrackImageProducer) != null)) {\r\n                                colorTrackImageProducer.componentChanged(value.intValue());\r\n                                if (colorTrackImageProducer.needsGeneration()) {\r\n                                    slider.repaint();\r\n                                }\r\n                            }\r\n                        } else\r\n                            if (propertyName.equals(\"orientation\")) {\r\n                                if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n                                    slider.setBorder(new EmptyBorder(0, 1, (-1), 1));\r\n                                } else {\r\n                                    slider.setBorder(new EmptyBorder(0, 0, 0, 1));\r\n                                }\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    super.propertyChange(e);\r\n}'),(505,'-init-()','org.jhotdraw.color.ColorSliderUI$QuaquaTrackListener.-init-()','66','org.jhotdraw.color.ColorSliderUI$QuaquaTrackListener','QuaquaTrackListener() {\r\n}'),(506,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.color.ColorSliderUI$QuaquaTrackListener.mousePressed(java.awt.event.MouseEvent)','66','org.jhotdraw.color.ColorSliderUI$QuaquaTrackListener','/**\r\n * If the mouse is pressed above the \"thumb\" component\r\n * then reduce the scrollbars value by one page (\"page up\"),\r\n * otherwise increase it by one page.  If there is no\r\n * thumb then page up if the mouse is in the upper half\r\n * of the track.\r\n */\r\npublic void mousePressed(MouseEvent e) {\r\n    if (!(slider.isEnabled()))\r\n        return;\r\n\r\n    currentMouseX = e.getX();\r\n    currentMouseY = e.getY();\r\n    if (slider.isRequestFocusEnabled()) {\r\n        slider.requestFocus();\r\n    }\r\n    // Clicked inside the Thumb area?\r\n    if (thumbRect.contains(currentMouseX, currentMouseY)) {\r\n        super.mousePressed(e);\r\n    } else {\r\n        Dimension sbSize = slider.getSize();\r\n        int direction = BasicSliderUI.POSITIVE_SCROLL;\r\n        switch (slider.getOrientation()) {\r\n            case JSlider.VERTICAL :\r\n                slider.setValue(valueForYPosition(currentMouseY));\r\n                break;\r\n            case JSlider.HORIZONTAL :\r\n                slider.setValue(valueForXPosition(currentMouseX));\r\n                break;\r\n        }\r\n        // FIXME:\r\n        // We should set isDragging to false here. Unfortunately,\r\n        // we can not access this variable in class BasicSliderUI.\r\n    }\r\n}'),(507,'getComponentCount()','org.jhotdraw.color.ColorSystem.getComponentCount()','68','org.jhotdraw.color.ColorSystem','/**\r\n * Returns the number of color components used by the color system.\r\n *\r\n * @return component count.\r\n */\r\npublic int getComponentCount();'),(508,'toComponents(int,float[])','org.jhotdraw.color.ColorSystem.toComponents(int,float[])','68','org.jhotdraw.color.ColorSystem','/**\r\n * Converts the specified color components to RGB.\r\n *\r\n * @param rgb\r\n * 		value.\r\n * @param components\r\n * 		A component array for reuse.\r\n * @return color components for the rgb value.\r\n */\r\npublic float[] toComponents(int rgb, float[] components);'),(509,'toRGB(float[])','org.jhotdraw.color.ColorSystem.toRGB(float[])','68','org.jhotdraw.color.ColorSystem','/**\r\n * Converts the specified color components to RGB.\r\n *\r\n * @param components\r\n * 		The color components.\r\n * @return rgb value.\r\n */\r\npublic int toRGB(float... components);'),(510,'-init-(int,int,int,boolean)','org.jhotdraw.color.ColorTrackImageProducer.-init-(int,int,int,boolean)','69','org.jhotdraw.color.ColorTrackImageProducer','/**\r\n * Creates a new instance.\r\n */\r\npublic ColorTrackImageProducer(int w, int h, int trackBuffer, boolean isHorizontal) {\r\n    super(w, h, null, 0, w);\r\n    pixels = new int[w * h];\r\n    this.w = w;\r\n    this.h = h;\r\n    // trackBuffer must be even\r\n    this.trackBuffer = ((trackBuffer % 2) == 1) ? trackBuffer - 1 : trackBuffer;\r\n    this.componentIndex = componentIndex;\r\n    this.isHorizontal = isHorizontal;\r\n    newPixels(pixels, // Red\r\n    // Green\r\n    // Blue\r\n    new DirectColorModel(24, 16711680, 65280, 255), 0, w);\r\n    setAnimated(true);\r\n}'),(511,'componentChanged(int)','org.jhotdraw.color.ColorTrackImageProducer.componentChanged(int)','69','org.jhotdraw.color.ColorTrackImageProducer','public void componentChanged(int index) {\r\n    isDirty |= (this.componentIndex) != index;\r\n}'),(512,'generateColorTrack()','org.jhotdraw.color.ColorTrackImageProducer.generateColorTrack()','69','org.jhotdraw.color.ColorTrackImageProducer','public void generateColorTrack() {\r\n    if (isHorizontal) {\r\n        generateHorizontalColorTrack();\r\n    } else {\r\n        generateVerticalColorTrack();\r\n    }\r\n    newPixels();\r\n    isDirty = false;\r\n}'),(513,'generateHorizontalColorTrack()','org.jhotdraw.color.ColorTrackImageProducer.generateHorizontalColorTrack()','69','org.jhotdraw.color.ColorTrackImageProducer','private void generateHorizontalColorTrack() {\r\n    float[] components = colorizer.getCompositeColor().getComponents();\r\n    ColorSystem sys = colorizer.getColorSystem();\r\n    int offset = (trackBuffer) / 2;\r\n    for (int x = 0, n = ((w) - (trackBuffer)) - 1; x <= n; x++) {\r\n        components[componentIndex] = x / ((float) (n));\r\n        pixels[(x + offset)] = sys.toRGB(components);\r\n    }\r\n    for (int x = 0; x < offset; x++) {\r\n        pixels[x] = pixels[offset];\r\n        pixels[(((w) - x) - 1)] = pixels[(((w) - offset) - 1)];\r\n    }\r\n    for (int y = w, n = (w) * (h); y < n; y += w) {\r\n        System.arraycopy(pixels, 0, pixels, y, w);\r\n    }\r\n}'),(514,'generateVerticalColorTrack()','org.jhotdraw.color.ColorTrackImageProducer.generateVerticalColorTrack()','69','org.jhotdraw.color.ColorTrackImageProducer','private void generateVerticalColorTrack() {\r\n    float[] components = colorizer.getCompositeColor().getComponents();\r\n    ColorSystem sys = colorizer.getColorSystem();\r\n    int offset = (trackBuffer) / 2;\r\n    for (int y = 0, n = ((h) - (trackBuffer)) - 1; y <= n; y++) {\r\n        components[componentIndex] = 1.0F - (y / ((float) (n)));\r\n        pixels[((y + offset) * (w))] = sys.toRGB(components);\r\n    }\r\n    for (int y = 0; y < offset; y++) {\r\n        pixels[(y * (w))] = pixels[(offset * (w))];\r\n        pixels[((((h) - y) - 1) * (w))] = pixels[((((h) - offset) - 1) * (w))];\r\n    }\r\n    for (int x = 1; x < (w); x++) {\r\n        for (int y = 0, n = (w) * (h); y < n; y += w) {\r\n            pixels[(x + y)] = pixels[((x - 1) + y)];\r\n        }\r\n    }\r\n}'),(515,'getHeight()','org.jhotdraw.color.ColorTrackImageProducer.getHeight()','69','org.jhotdraw.color.ColorTrackImageProducer','public int getHeight() {\r\n    return h;\r\n}'),(516,'getWidth()','org.jhotdraw.color.ColorTrackImageProducer.getWidth()','69','org.jhotdraw.color.ColorTrackImageProducer','public int getWidth() {\r\n    return w;\r\n}'),(517,'markAsDirty()','org.jhotdraw.color.ColorTrackImageProducer.markAsDirty()','69','org.jhotdraw.color.ColorTrackImageProducer','public void markAsDirty() {\r\n    isDirty = true;\r\n}'),(518,'needsGeneration()','org.jhotdraw.color.ColorTrackImageProducer.needsGeneration()','69','org.jhotdraw.color.ColorTrackImageProducer','public boolean needsGeneration() {\r\n    return isDirty;\r\n}'),(519,'regenerateColorTrack()','org.jhotdraw.color.ColorTrackImageProducer.regenerateColorTrack()','69','org.jhotdraw.color.ColorTrackImageProducer','public void regenerateColorTrack() {\r\n    if (isDirty) {\r\n        generateColorTrack();\r\n    }\r\n}'),(520,'setBaseComponents(javax.swing.BoundedRangeModel[])','org.jhotdraw.color.ColorTrackImageProducer.setBaseComponents(javax.swing.BoundedRangeModel[])','69','org.jhotdraw.color.ColorTrackImageProducer','public void setBaseComponents(BoundedRangeModel[] components) {\r\n    isDirty = true;\r\n    // isDirty = isDirty || colorizer.needsRegeneration(this.baseRGB, baseRGB);\r\n    // this.baseRGB = baseRGB;\r\n    for (int i = 0; i < (components.length); i++) {\r\n        baseComponents[i] = (components[i].getValue()) / ((float) (components[i].getMaximum()));\r\n    }\r\n}'),(521,'setColorComponentIndex(int)','org.jhotdraw.color.ColorTrackImageProducer.setColorComponentIndex(int)','69','org.jhotdraw.color.ColorTrackImageProducer','public void setColorComponentIndex(int index) {\r\n    this.componentIndex = index;\r\n    isDirty = true;\r\n}'),(522,'setColorSliderModel(org.jhotdraw.color.ColorSliderModel)','org.jhotdraw.color.ColorTrackImageProducer.setColorSliderModel(org.jhotdraw.color.ColorSliderModel)','69','org.jhotdraw.color.ColorTrackImageProducer','public void setColorSliderModel(ColorSliderModel colorizer) {\r\n    this.colorizer = colorizer;\r\n    isDirty = true;\r\n}'),(523,'-init-()','org.jhotdraw.color.ColorWheelChooser.-init-()','70','org.jhotdraw.color.ColorWheelChooser','/**\r\n * Creates a new instance.\r\n */\r\npublic ColorWheelChooser() {\r\n    initComponents();\r\n    int textSliderGap = UIManager.getInt(\"ColorChooser.textSliderGap\");\r\n    if (textSliderGap != 0) {\r\n        BorderLayout layout = ((BorderLayout) (getLayout()));\r\n        layout.setHgap(textSliderGap);\r\n    }\r\n    colorWheel = new JColorWheel();\r\n    add(colorWheel);\r\n    ccModel.configureSlider(2, brightnessSlider);\r\n    colorWheel.setModel(ccModel);\r\n    ccModel.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent evt) {\r\n            setColorToModel(ccModel.getColor());\r\n        }\r\n    });\r\n}'),(524,'buildChooser()','org.jhotdraw.color.ColorWheelChooser.buildChooser()','70','org.jhotdraw.color.ColorWheelChooser','protected void buildChooser() {\r\n}'),(525,'getDisplayName()','org.jhotdraw.color.ColorWheelChooser.getDisplayName()','70','org.jhotdraw.color.ColorWheelChooser','public String getDisplayName() {\r\n    return UIManager.getString(\"ColorChooser.colorWheel\");\r\n}'),(526,'getLargeDisplayIcon()','org.jhotdraw.color.ColorWheelChooser.getLargeDisplayIcon()','70','org.jhotdraw.color.ColorWheelChooser','public Icon getLargeDisplayIcon() {\r\n    return UIManager.getIcon(\"ColorChooser.colorWheelIcon\");\r\n}'),(527,'getSmallDisplayIcon()','org.jhotdraw.color.ColorWheelChooser.getSmallDisplayIcon()','70','org.jhotdraw.color.ColorWheelChooser','public Icon getSmallDisplayIcon() {\r\n    return getLargeDisplayIcon();\r\n}'),(528,'initComponents()','org.jhotdraw.color.ColorWheelChooser.initComponents()','70','org.jhotdraw.color.ColorWheelChooser','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\nprivate void initComponents() {\r\n    // GEN-BEGIN:initComponents\r\n    brightnessSlider = new JSlider();\r\n    setLayout(new BorderLayout());\r\n    brightnessSlider.setMajorTickSpacing(50);\r\n    brightnessSlider.setOrientation(JSlider.VERTICAL);\r\n    brightnessSlider.setPaintTicks(true);\r\n    add(brightnessSlider, BorderLayout.EAST);\r\n}// GEN-END:initComponents\r\n'),(529,'setColorToModel(java.awt.Color)','org.jhotdraw.color.ColorWheelChooser.setColorToModel(java.awt.Color)','70','org.jhotdraw.color.ColorWheelChooser','public void setColorToModel(Color color) {\r\n    if ((updatingChooser) == 0) {\r\n        getColorSelectionModel().setSelectedColor(color);\r\n    }\r\n}'),(530,'updateChooser()','org.jhotdraw.color.ColorWheelChooser.updateChooser()','70','org.jhotdraw.color.ColorWheelChooser','public void updateChooser() {\r\n    (updatingChooser)++;\r\n    ccModel.setColor(getColorFromModel());\r\n    (updatingChooser)--;\r\n}'),(531,'-init-(org.jhotdraw.color.ColorSystem,int,int)','org.jhotdraw.color.ColorWheelImageProducer.-init-(org.jhotdraw.color.ColorSystem,int,int)','71','org.jhotdraw.color.ColorWheelImageProducer','/**\r\n * Creates a new instance.\r\n */\r\npublic ColorWheelImageProducer(ColorSystem sys, int w, int h) {\r\n    super(w, h, null, 0, w);\r\n    pixels = new int[w * h];\r\n    this.w = w;\r\n    this.h = h;\r\n    this.colorSystem = sys;\r\n    setAnimated(true);\r\n    newPixels(pixels, ColorModel.getRGBdefault(), 0, w);\r\n}'),(532,'generateColorWheel()','org.jhotdraw.color.ColorWheelImageProducer.generateColorWheel()','71','org.jhotdraw.color.ColorWheelImageProducer','public void generateColorWheel() {\r\n    if (!(isLookupValid)) {\r\n        generateLookupTables();\r\n    }\r\n    float[] components = new float[colorSystem.getComponentCount()];\r\n    float radius = ((float) (Math.min(w, h)));\r\n    for (int index = 0; index < (pixels.length); index++) {\r\n        if ((alphas[index]) != 0) {\r\n            components[angularIndex] = angulars[index];\r\n            components[radialIndex] = radials[index];\r\n            components[verticalIndex] = verticalValue;\r\n            pixels[index] = (alphas[index]) | (16777215 & (colorSystem.toRGB(components)));\r\n        }\r\n    }\r\n    newPixels();\r\n    isPixelsValid = true;\r\n}'),(533,'generateLookupTables()','org.jhotdraw.color.ColorWheelImageProducer.generateLookupTables()','71','org.jhotdraw.color.ColorWheelImageProducer','protected void generateLookupTables() {\r\n    radials = new float[(w) * (h)];\r\n    angulars = new float[(w) * (h)];\r\n    alphas = new int[(w) * (h)];\r\n    float radius = getRadius();\r\n    // blend is used to create a linear alpha gradient of two extra pixels\r\n    float blend = ((radius + 2.0F) / radius) - 1.0F;\r\n    // Center of the color wheel circle\r\n    int cx = (w) / 2;\r\n    int cy = (h) / 2;\r\n    for (int x = 0; x < (w); x++) {\r\n        int kx = x - cx;// Kartesian coordinates of x\r\n\r\n        int squarekx = kx * kx;// Square of kartesian x\r\n\r\n        for (int y = 0; y < (h); y++) {\r\n            int ky = cy - y;// Kartesian coordinates of y\r\n\r\n            int index = x + (y * (w));\r\n            radials[index] = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;\r\n            if ((radials[index]) <= 1.0F) {\r\n                alphas[index] = -16777216;\r\n            } else {\r\n                alphas[index] = ((int) (((blend - (Math.min(blend, ((radials[index]) - 1.0F)))) * 255) / blend)) << 24;\r\n                radials[index] = 1.0F;\r\n            }\r\n            if ((alphas[index]) != 0) {\r\n                angulars[index] = ((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0));\r\n            }\r\n        }\r\n    }\r\n    isLookupValid = true;\r\n}'),(534,'getColorAt(int,int,int,int)','org.jhotdraw.color.ColorWheelImageProducer.getColorAt(int,int,int,int)','71','org.jhotdraw.color.ColorWheelImageProducer','protected float[] getColorAt(int x, int y, int width, int height) {\r\n    x -= width / 2;\r\n    y -= height / 2;\r\n    float r = ((float) (Math.sqrt(((x * x) + (y * y)))));\r\n    float theta = ((float) (Math.atan2(y, (-x))));\r\n    float angular = ((float) (0.5 + ((theta / (Math.PI)) / 2.0)));\r\n    float[] hsb = new float[3];\r\n    hsb[angularIndex] = angular;\r\n    hsb[radialIndex] = Math.min(1.0F, (((float) (r)) / (getRadius())));\r\n    hsb[verticalIndex] = verticalValue;\r\n    return hsb;\r\n}'),(535,'getColorLocation(float,float,float,int,int)','org.jhotdraw.color.ColorWheelImageProducer.getColorLocation(float,float,float,int,int)','71','org.jhotdraw.color.ColorWheelImageProducer','protected Point getColorLocation(float hue, float saturation, float brightness, int width, int height) {\r\n    float radial;\r\n    float angular;\r\n    switch (angularIndex) {\r\n        case 0 :\r\n        default :\r\n            angular = hue;\r\n            break;\r\n        case 1 :\r\n            angular = saturation;\r\n            break;\r\n        case 2 :\r\n            angular = brightness;\r\n            break;\r\n    }\r\n    switch (radialIndex) {\r\n        case 0 :\r\n        default :\r\n            radial = hue;\r\n            break;\r\n        case 1 :\r\n            radial = saturation;\r\n            break;\r\n        case 2 :\r\n            radial = brightness;\r\n            break;\r\n    }\r\n    float radius = (Math.min(width, height)) / 2.0F;\r\n    radial = Math.max(0.0F, Math.min(1.0F, radial));\r\n    Point p = new Point(((width / 2) + ((int) ((radius * radial) * (Math.cos(((angular * (Math.PI)) * 2.0)))))), ((height / 2) - ((int) ((radius * radial) * (Math.sin(((angular * (Math.PI)) * 2.0)))))));\r\n    return p;\r\n}'),(536,'getColorLocation(float[],int,int)','org.jhotdraw.color.ColorWheelImageProducer.getColorLocation(float[],int,int)','71','org.jhotdraw.color.ColorWheelImageProducer','protected Point getColorLocation(float[] components, int width, int height) {\r\n    return getColorLocation(components[0], components[1], components[2], width, height);\r\n}'),(537,'getColorLocation(java.awt.Color,int,int)','org.jhotdraw.color.ColorWheelImageProducer.getColorLocation(java.awt.Color,int,int)','71','org.jhotdraw.color.ColorWheelImageProducer','protected Point getColorLocation(Color c, int width, int height) {\r\n    float[] hsb = new float[3];\r\n    hsb = colorSystem.toComponents(c.getRGB(), hsb);\r\n    return getColorLocation(hsb[0], hsb[1], hsb[2], width, height);\r\n}'),(538,'getColorLocation(org.jhotdraw.color.CompositeColor,int,int)','org.jhotdraw.color.ColorWheelImageProducer.getColorLocation(org.jhotdraw.color.CompositeColor,int,int)','71','org.jhotdraw.color.ColorWheelImageProducer','protected Point getColorLocation(CompositeColor c, int width, int height) {\r\n    return getColorLocation(c.getComponents(), width, height);\r\n}'),(539,'getRadius()','org.jhotdraw.color.ColorWheelImageProducer.getRadius()','71','org.jhotdraw.color.ColorWheelImageProducer','public int getRadius() {\r\n    return ((Math.min(w, h)) / 2) - 2;\r\n}'),(540,'needsGeneration()','org.jhotdraw.color.ColorWheelImageProducer.needsGeneration()','71','org.jhotdraw.color.ColorWheelImageProducer','public boolean needsGeneration() {\r\n    return !(isPixelsValid);\r\n}'),(541,'regenerateColorWheel()','org.jhotdraw.color.ColorWheelImageProducer.regenerateColorWheel()','71','org.jhotdraw.color.ColorWheelImageProducer','public void regenerateColorWheel() {\r\n    if (!(isPixelsValid)) {\r\n        generateColorWheel();\r\n    }\r\n}'),(542,'setAngularComponentIndex(int)','org.jhotdraw.color.ColorWheelImageProducer.setAngularComponentIndex(int)','71','org.jhotdraw.color.ColorWheelImageProducer','public void setAngularComponentIndex(int newValue) {\r\n    angularIndex = newValue;\r\n    isPixelsValid = false;\r\n}'),(543,'setRadialComponentIndex(int)','org.jhotdraw.color.ColorWheelImageProducer.setRadialComponentIndex(int)','71','org.jhotdraw.color.ColorWheelImageProducer','public void setRadialComponentIndex(int newValue) {\r\n    radialIndex = newValue;\r\n    isPixelsValid = false;\r\n}'),(544,'setVerticalComponentIndex(int)','org.jhotdraw.color.ColorWheelImageProducer.setVerticalComponentIndex(int)','71','org.jhotdraw.color.ColorWheelImageProducer','public void setVerticalComponentIndex(int newValue) {\r\n    verticalIndex = newValue;\r\n    isPixelsValid = false;\r\n}'),(545,'setVerticalValue(float)','org.jhotdraw.color.ColorWheelImageProducer.setVerticalValue(float)','71','org.jhotdraw.color.ColorWheelImageProducer','public void setVerticalValue(float newValue) {\r\n    isPixelsValid = (isPixelsValid) && ((verticalValue) == newValue);\r\n    verticalValue = newValue;\r\n}'),(546,'-init-(org.jhotdraw.color.ColorSystem,float[])','org.jhotdraw.color.CompositeColor.-init-(org.jhotdraw.color.ColorSystem,float[])','72','org.jhotdraw.color.CompositeColor','public CompositeColor(ColorSystem system, float... components) {\r\n    this.system = system;\r\n    this.components = components.clone();\r\n}'),(547,'-init-(org.jhotdraw.color.ColorSystem,java.awt.Color)','org.jhotdraw.color.CompositeColor.-init-(org.jhotdraw.color.ColorSystem,java.awt.Color)','72','org.jhotdraw.color.CompositeColor','public CompositeColor(ColorSystem system, Color color) {\r\n    this.system = system;\r\n    this.components = system.toComponents(color.getRGB(), null);\r\n}'),(548,'clone()','org.jhotdraw.color.CompositeColor.clone()','72','org.jhotdraw.color.CompositeColor','public CompositeColor clone() {\r\n    try {\r\n        CompositeColor that = ((CompositeColor) (super.clone()));\r\n        that.components = this.components.clone();\r\n        return that;\r\n    } catch (CloneNotSupportedException ex) {\r\n        throw new InternalError(\"CompositeColor not cloneable.\");\r\n    }\r\n}'),(549,'getColor()','org.jhotdraw.color.CompositeColor.getColor()','72','org.jhotdraw.color.CompositeColor','public Color getColor() {\r\n    if ((color) == null) {\r\n        color = new Color(system.toRGB(components));\r\n    }\r\n    return color;\r\n}'),(550,'getComponent(int)','org.jhotdraw.color.CompositeColor.getComponent(int)','72','org.jhotdraw.color.CompositeColor','public float getComponent(int i) {\r\n    return components[i];\r\n}'),(551,'getComponents()','org.jhotdraw.color.CompositeColor.getComponents()','72','org.jhotdraw.color.CompositeColor','public float[] getComponents() {\r\n    return components.clone();\r\n}'),(552,'getComponents(float[])','org.jhotdraw.color.CompositeColor.getComponents(float[])','72','org.jhotdraw.color.CompositeColor','public float[] getComponents(float[] reuse) {\r\n    if ((reuse == null) || ((reuse.length) != (system.getComponentCount()))) {\r\n        reuse = new float[system.getComponentCount()];\r\n    }\r\n    System.arraycopy(components, 0, reuse, 0, system.getComponentCount());\r\n    return reuse;\r\n}'),(553,'getSystem()','org.jhotdraw.color.CompositeColor.getSystem()','72','org.jhotdraw.color.CompositeColor','public ColorSystem getSystem() {\r\n    return system;\r\n}'),(554,'toString()','org.jhotdraw.color.CompositeColor.toString()','72','org.jhotdraw.color.CompositeColor','public String toString() {\r\n    StringBuffer buf = new StringBuffer();\r\n    buf.append(\"CompositeColor[\");\r\n    for (int i = 0; i < (components.length); i++) {\r\n        if (i != 0) {\r\n            buf.append(,);\r\n        }\r\n        buf.append(((int) ((components[i]) * 100)));\r\n    }\r\n    buf.append(\"]\");\r\n    return buf.toString();\r\n}'),(555,'-init-()','org.jhotdraw.color.DefaultColorSliderModel.-init-()','73','org.jhotdraw.color.DefaultColorSliderModel','public DefaultColorSliderModel() {\r\n    setColorSystem(new HSLRGBColorSystem());\r\n}'),(556,'-init-(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.DefaultColorSliderModel.-init-(org.jhotdraw.color.ColorSystem)','73','org.jhotdraw.color.DefaultColorSliderModel','public DefaultColorSliderModel(ColorSystem sys) {\r\n    setColorSystem(sys);\r\n}'),(557,'addColorSlider(javax.swing.JSlider)','org.jhotdraw.color.DefaultColorSliderModel.addColorSlider(javax.swing.JSlider)','73','org.jhotdraw.color.DefaultColorSliderModel','protected void addColorSlider(JSlider slider) {\r\n    sliders.add(slider);\r\n}'),(558,'configureSlider(int,javax.swing.JSlider)','org.jhotdraw.color.DefaultColorSliderModel.configureSlider(int,javax.swing.JSlider)','73','org.jhotdraw.color.DefaultColorSliderModel','/**\r\n * Configures a JSlider for this AbstractColorSystem.\r\n * If the JSlider is already configured for another AbstractColorSystem,\r\n * it is unconfigured first.\r\n */\r\npublic void configureSlider(int componentIndex, JSlider slider) {\r\n    if ((slider.getClientProperty(\"colorSliderModel\")) != null) {\r\n        ((DefaultColorSliderModel) (slider.getClientProperty(\"colorSliderModel\"))).unconfigureSlider(slider);\r\n    }\r\n    if (!((slider.getUI()) instanceof ColorSliderUI)) {\r\n        slider.setUI(((ColorSliderUI) (ColorSliderUI.createUI(slider))));\r\n    }\r\n    slider.setModel(getBoundedRangeModel(componentIndex));\r\n    slider.putClientProperty(\"colorSliderModel\", this);\r\n    slider.putClientProperty(\"colorComponentIndex\", new Integer(componentIndex));\r\n    addColorSlider(slider);\r\n}'),(559,'fireColorChanged(int)','org.jhotdraw.color.DefaultColorSliderModel.fireColorChanged(int)','73','org.jhotdraw.color.DefaultColorSliderModel','protected void fireColorChanged(int componentIndex) {\r\n    Integer index = new Integer(componentIndex);\r\n    CompositeColor value = getCompositeColor();\r\n    for (JSlider slider : sliders) {\r\n        slider.putClientProperty(\"colorComponentChange\", index);\r\n        slider.putClientProperty(\"colorComponentValue\", value);\r\n    }\r\n}'),(560,'getBoundedRangeModel(int)','org.jhotdraw.color.DefaultColorSliderModel.getBoundedRangeModel(int)','73','org.jhotdraw.color.DefaultColorSliderModel','/**\r\n * Returns the bounded range model of the specified color componentIndex.\r\n */\r\npublic DefaultBoundedRangeModel getBoundedRangeModel(int componentIndex) {\r\n    return componentModels[componentIndex];\r\n}'),(561,'getColor()','org.jhotdraw.color.DefaultColorSliderModel.getColor()','73','org.jhotdraw.color.DefaultColorSliderModel','public Color getColor() {\r\n    return getCompositeColor().getColor();\r\n}'),(562,'getColorSystem()','org.jhotdraw.color.DefaultColorSliderModel.getColorSystem()','73','org.jhotdraw.color.DefaultColorSliderModel','public ColorSystem getColorSystem() {\r\n    return system;\r\n}'),(563,'getComponentCount()','org.jhotdraw.color.DefaultColorSliderModel.getComponentCount()','73','org.jhotdraw.color.DefaultColorSliderModel','public int getComponentCount() {\r\n    return system.getComponentCount();\r\n}'),(564,'getComponentValue(int)','org.jhotdraw.color.DefaultColorSliderModel.getComponentValue(int)','73','org.jhotdraw.color.DefaultColorSliderModel','public float getComponentValue(int componentIndex) {\r\n    BoundedRangeModel brm = componentModels[componentIndex];\r\n    return ((brm.getValue()) - (brm.getMinimum())) / ((float) ((brm.getMaximum()) - (brm.getMinimum())));\r\n}'),(565,'getCompositeColor()','org.jhotdraw.color.DefaultColorSliderModel.getCompositeColor()','73','org.jhotdraw.color.DefaultColorSliderModel','public CompositeColor getCompositeColor() {\r\n    float[] c = new float[system.getComponentCount()];\r\n    int i = 0;\r\n    for (DefaultBoundedRangeModel m : componentModels) {\r\n        c[i] = ((m.getValue()) - (m.getMinimum())) / ((float) ((m.getMaximum()) - (m.getMinimum())));\r\n        i++;\r\n    }\r\n    return new CompositeColor(system, c);\r\n}'),(566,'getInterpolatedRGB(int,float)','org.jhotdraw.color.DefaultColorSliderModel.getInterpolatedRGB(int,float)','73','org.jhotdraw.color.DefaultColorSliderModel','public int getInterpolatedRGB(int componentIndex, float componentValue) {\r\n    float[] c = new float[system.getComponentCount()];\r\n    int i = 0;\r\n    for (DefaultBoundedRangeModel m : componentModels) {\r\n        c[i] = ((m.getValue()) - (m.getMinimum())) / ((float) ((m.getMaximum()) - (m.getMinimum())));\r\n        i++;\r\n    }\r\n    c[componentIndex] = componentValue;\r\n    return system.toRGB(c);\r\n}'),(567,'getSliderValue(int)','org.jhotdraw.color.DefaultColorSliderModel.getSliderValue(int)','73','org.jhotdraw.color.DefaultColorSliderModel','/**\r\n * Returns the value of the specified color componentIndex.\r\n */\r\npublic int getSliderValue(int componentIndex) {\r\n    return componentModels[componentIndex].getValue();\r\n}'),(568,'removeColorSlider(javax.swing.JSlider)','org.jhotdraw.color.DefaultColorSliderModel.removeColorSlider(javax.swing.JSlider)','73','org.jhotdraw.color.DefaultColorSliderModel','protected void removeColorSlider(JSlider slider) {\r\n    sliders.remove(slider);\r\n}'),(569,'setColor(java.awt.Color)','org.jhotdraw.color.DefaultColorSliderModel.setColor(java.awt.Color)','73','org.jhotdraw.color.DefaultColorSliderModel','public void setColor(Color newValue) {\r\n    setCompositeColor(new CompositeColor(system, newValue));\r\n}'),(570,'setColorSystem(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.DefaultColorSliderModel.setColorSystem(org.jhotdraw.color.ColorSystem)','73','org.jhotdraw.color.DefaultColorSliderModel','public void setColorSystem(ColorSystem newValue) {\r\n    ColorSystem oldValue = system;\r\n    system = newValue;\r\n    componentModels = new DefaultBoundedRangeModel[system.getComponentCount()];\r\n    for (int i = 0; i < (componentModels.length); i++) {\r\n        componentModels[i] = new DefaultBoundedRangeModel();\r\n        final int componentIndex = i;\r\n        componentModels[i].addChangeListener(new ChangeListener() {\r\n            public void stateChanged(ChangeEvent e) {\r\n                fireColorChanged(componentIndex);\r\n                fireStateChanged();\r\n            }\r\n        });\r\n    }\r\n}'),(571,'setComponentValue(int,float)','org.jhotdraw.color.DefaultColorSliderModel.setComponentValue(int,float)','73','org.jhotdraw.color.DefaultColorSliderModel','public void setComponentValue(int componentIndex, float newValue) {\r\n    BoundedRangeModel brm = componentModels[componentIndex];\r\n    brm.setValue((((int) (((brm.getMaximum()) - (brm.getMinimum())) * newValue)) + (brm.getMinimum())));\r\n}'),(572,'setCompositeColor(org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.DefaultColorSliderModel.setCompositeColor(org.jhotdraw.color.CompositeColor)','73','org.jhotdraw.color.DefaultColorSliderModel','public void setCompositeColor(CompositeColor newValue) {\r\n    float[] c = newValue.getComponents();\r\n    int i = 0;\r\n    for (DefaultBoundedRangeModel m : componentModels) {\r\n        m.setValue(((int) ((c[i]) * (((m.getMaximum()) - (m.getMinimum())) + (m.getMinimum())))));\r\n        i++;\r\n    }\r\n}'),(573,'setSliderValue(int,int)','org.jhotdraw.color.DefaultColorSliderModel.setSliderValue(int,int)','73','org.jhotdraw.color.DefaultColorSliderModel','/**\r\n * Sets the value of the specified color componentIndex.\r\n */\r\npublic void setSliderValue(int componentIndex, int value) {\r\n    componentModels[componentIndex].setValue(value);\r\n}'),(574,'unconfigureSlider(javax.swing.JSlider)','org.jhotdraw.color.DefaultColorSliderModel.unconfigureSlider(javax.swing.JSlider)','73','org.jhotdraw.color.DefaultColorSliderModel','/**\r\n * Unconfigures a JSlider from this AbstractColorSystem.\r\n */\r\npublic void unconfigureSlider(JSlider slider) {\r\n    if ((slider.getClientProperty(\"colorSliderModel\")) == (this)) {\r\n        // XXX - This creates a NullPointerException ??\r\n        // slider.setUI((SliderUI) UIManager.getUI(slider));\r\n        slider.setModel(new DefaultBoundedRangeModel());\r\n        slider.putClientProperty(\"colorSliderModel\", null);\r\n        slider.putClientProperty(\"colorComponentIndex\", null);\r\n        removeColorSlider(slider);\r\n    }\r\n}'),(575,'-init-()','org.jhotdraw.color.DefaultHarmonicColorModel.-init-()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public DefaultHarmonicColorModel() {\r\n    ColorSystem sys = new HSLRYBColorSystem();\r\n    sliderModel = new DefaultColorSliderModel(sys);\r\n    colors = new ArrayList<CompositeColor>();\r\n    rules = new ArrayList<HarmonicRule>();\r\n    base = 0;\r\n    add(new CompositeColor(sys, Color.RED));\r\n    DefaultListModel x;\r\n}'),(576,'RGBtoComponent(int,float[])','org.jhotdraw.color.DefaultHarmonicColorModel.RGBtoComponent(int,float[])','74','org.jhotdraw.color.DefaultHarmonicColorModel','public float[] RGBtoComponent(int rgb, float[] hsb) {\r\n    return sliderModel.getColorSystem().toComponents(rgb, hsb);\r\n}'),(577,'add(org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.DefaultHarmonicColorModel.add(org.jhotdraw.color.CompositeColor)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public boolean add(CompositeColor c) {\r\n    boolean b = colors.add(c);\r\n    if (b) {\r\n        fireIntervalAdded(this, ((size()) - 1), ((size()) - 1));\r\n    }\r\n    return b;\r\n}'),(578,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.color.DefaultHarmonicColorModel.addPropertyChangeListener(java.beans.PropertyChangeListener)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void addPropertyChangeListener(PropertyChangeListener listener) {\r\n    propertySupport.addPropertyChangeListener(listener);\r\n}'),(579,'addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','org.jhotdraw.color.DefaultHarmonicColorModel.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {\r\n    propertySupport.addPropertyChangeListener(propertyName, listener);\r\n}'),(580,'addRule(org.jhotdraw.color.HarmonicRule)','org.jhotdraw.color.DefaultHarmonicColorModel.addRule(org.jhotdraw.color.HarmonicRule)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void addRule(HarmonicRule newValue) {\r\n    rules.add(newValue);\r\n}'),(581,'applyRules()','org.jhotdraw.color.DefaultHarmonicColorModel.applyRules()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void applyRules() {\r\n    for (HarmonicRule r : rules) {\r\n        if ((r.getBaseIndex()) == (base)) {\r\n            r.apply(this);\r\n        }\r\n    }\r\n}'),(582,'clone()','org.jhotdraw.color.DefaultHarmonicColorModel.clone()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public DefaultHarmonicColorModel clone() {\r\n    DefaultHarmonicColorModel that;\r\n    try {\r\n        that = ((DefaultHarmonicColorModel) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(\"Clone failed\");\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n    that.propertySupport = new PropertyChangeSupport(that);\r\n    return that;\r\n}'),(583,'componentToRGB(float,float,float)','org.jhotdraw.color.DefaultHarmonicColorModel.componentToRGB(float,float,float)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public int componentToRGB(float h, float s, float b) {\r\n    return sliderModel.getColorSystem().toRGB(h, s, b);\r\n}'),(584,'firePropertyChange(java.lang.String,boolean,boolean)','org.jhotdraw.color.DefaultHarmonicColorModel.firePropertyChange(java.lang.String,boolean,boolean)','74','org.jhotdraw.color.DefaultHarmonicColorModel','protected void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(585,'firePropertyChange(java.lang.String,int,int)','org.jhotdraw.color.DefaultHarmonicColorModel.firePropertyChange(java.lang.String,int,int)','74','org.jhotdraw.color.DefaultHarmonicColorModel','protected void firePropertyChange(String propertyName, int oldValue, int newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(586,'firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','org.jhotdraw.color.DefaultHarmonicColorModel.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','74','org.jhotdraw.color.DefaultHarmonicColorModel','protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(587,'get(int)','org.jhotdraw.color.DefaultHarmonicColorModel.get(int)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public CompositeColor get(int index) {\r\n    return colors.get(index);\r\n}'),(588,'getBase()','org.jhotdraw.color.DefaultHarmonicColorModel.getBase()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public int getBase() {\r\n    return base;\r\n}'),(589,'getColorSystem()','org.jhotdraw.color.DefaultHarmonicColorModel.getColorSystem()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public ColorSystem getColorSystem() {\r\n    return sliderModel.getColorSystem();\r\n}'),(590,'getElementAt(int)','org.jhotdraw.color.DefaultHarmonicColorModel.getElementAt(int)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public Object getElementAt(int index) {\r\n    return get(index);\r\n}'),(591,'getSize()','org.jhotdraw.color.DefaultHarmonicColorModel.getSize()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public int getSize() {\r\n    return size();\r\n}'),(592,'isAdjusting()','org.jhotdraw.color.DefaultHarmonicColorModel.isAdjusting()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public boolean isAdjusting() {\r\n    return (adjusting) > 0;\r\n}'),(593,'removeAllRules()','org.jhotdraw.color.DefaultHarmonicColorModel.removeAllRules()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void removeAllRules() {\r\n    rules.clear();\r\n}'),(594,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.color.DefaultHarmonicColorModel.removePropertyChangeListener(java.beans.PropertyChangeListener)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void removePropertyChangeListener(PropertyChangeListener listener) {\r\n    propertySupport.removePropertyChangeListener(listener);\r\n}'),(595,'removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','org.jhotdraw.color.DefaultHarmonicColorModel.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\r\n    propertySupport.removePropertyChangeListener(propertyName, listener);\r\n}'),(596,'set(int,org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.DefaultHarmonicColorModel.set(int,org.jhotdraw.color.CompositeColor)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void set(int index, CompositeColor newValue) {\r\n    (adjusting)++;\r\n    CompositeColor oldValue = colors.set(index, newValue);\r\n    for (HarmonicRule r : rules) {\r\n        r.colorChanged(this, index, oldValue, newValue);\r\n    }\r\n    for (HarmonicRule r : rules) {\r\n        if ((r.getBaseIndex()) == index) {\r\n            r.apply(this);\r\n        }\r\n    }\r\n    (adjusting)--;\r\n    fireContentsChanged(this, index, index);\r\n}'),(597,'setBase(int)','org.jhotdraw.color.DefaultHarmonicColorModel.setBase(int)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void setBase(int newValue) {\r\n    base = newValue;\r\n}'),(598,'setColorSystem(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.DefaultHarmonicColorModel.setColorSystem(org.jhotdraw.color.ColorSystem)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void setColorSystem(ColorSystem newValue) {\r\n    ColorSystem oldValue = sliderModel.getColorSystem();\r\n    sliderModel.setColorSystem(newValue);\r\n    firePropertyChange(HarmonicColorModel.COLOR_SYSTEM_PROPERTY, oldValue, newValue);\r\n    for (int i = 0; i < (colors.size()); i++) {\r\n        if ((get(i)) != null) {\r\n            set(i, new CompositeColor(newValue, get(i).getColor()));\r\n        }\r\n    }\r\n    fireContentsChanged(this, 0, ((size()) - 1));\r\n}'),(599,'setSize(int)','org.jhotdraw.color.DefaultHarmonicColorModel.setSize(int)','74','org.jhotdraw.color.DefaultHarmonicColorModel','public void setSize(int newValue) {\r\n    int oldSize = size();\r\n    while ((colors.size()) > newValue) {\r\n        colors.remove(((colors.size()) - 1));\r\n    } \r\n    ColorSystem sys = sliderModel.getColorSystem();\r\n    while ((colors.size()) < newValue) {\r\n        colors.add(null);\r\n    } \r\n    if (oldSize < newValue) {\r\n        fireIntervalRemoved(this, oldSize, (newValue - 1));\r\n    } else\r\n        if (oldSize > newValue) {\r\n            fireIntervalRemoved(this, newValue, (oldSize - 1));\r\n        }\r\n\r\n}'),(600,'size()','org.jhotdraw.color.DefaultHarmonicColorModel.size()','74','org.jhotdraw.color.DefaultHarmonicColorModel','public int size() {\r\n    return colors.size();\r\n}'),(601,'-init-(int,int)','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.-init-(int,int)','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','public HSLHarmonicColorWheelImageProducer(int w, int h) {\r\n    super(new HSLRYBColorSystem(), w, h);\r\n}'),(602,'-init-(org.jhotdraw.color.ColorSystem,int,int)','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.-init-(org.jhotdraw.color.ColorSystem,int,int)','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','public HSLHarmonicColorWheelImageProducer(ColorSystem sys, int w, int h) {\r\n    super(sys, w, h);\r\n}'),(603,'generateColorWheel()','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.generateColorWheel()','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','@Override\r\npublic void generateColorWheel() {\r\n    float radius = ((float) (Math.min(w, h)));\r\n    for (int index = 0; index < (pixels.length); index++) {\r\n        if ((alphas[index]) != 0) {\r\n            pixels[index] = (alphas[index]) | (16777215 & (colorSystem.toRGB(angulars[index], radials[index], brights[index])));\r\n        }\r\n    }\r\n    newPixels();\r\n    isPixelsValid = false;\r\n}'),(604,'generateContiguousLookupTables()','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.generateContiguousLookupTables()','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','protected void generateContiguousLookupTables() {\r\n    radials = new float[(w) * (h)];\r\n    angulars = new float[(w) * (h)];\r\n    brights = new float[(w) * (h)];\r\n    alphas = new int[(w) * (h)];\r\n    float radius = getRadius();\r\n    // blend is used to create a linear alpha gradient of two extra pixels\r\n    float blend = ((radius + 2.0F) / radius) - 1.0F;\r\n    // Center of the color wheel circle\r\n    int cx = (w) / 2;\r\n    int cy = (h) / 2;\r\n    for (int x = 0; x < (w); x++) {\r\n        int kx = x - cx;// Kartesian coordinates of x\r\n\r\n        int squarekx = kx * kx;// Square of kartesian x\r\n\r\n        for (int y = 0; y < (h); y++) {\r\n            int ky = cy - y;// Kartesian coordinates of y\r\n\r\n            int index = x + (y * (w));\r\n            float r = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;\r\n            float sat = r;\r\n            if (r <= 1.0F) {\r\n                alphas[index] = -16777216;\r\n                radials[index] = 1.0F;\r\n                brights[index] = 1.0F - sat;\r\n            } else {\r\n                alphas[index] = ((int) (((blend - (Math.min(blend, (r - 1.0F)))) * 255) / blend)) << 24;\r\n                radials[index] = 1.0F;\r\n                brights[index] = 0;\r\n            }\r\n            if ((alphas[index]) != 0) {\r\n                angulars[index] = ((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0));\r\n            }\r\n        }\r\n    }\r\n}'),(605,'generateDiscreteLookupTables()','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.generateDiscreteLookupTables()','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','protected void generateDiscreteLookupTables() {\r\n    radials = new float[(w) * (h)];\r\n    angulars = new float[(w) * (h)];\r\n    brights = new float[(w) * (h)];\r\n    alphas = new int[(w) * (h)];\r\n    float radius = getRadius();\r\n    // blend is used to create a linear alpha gradient of two extra pixels\r\n    float blend = ((radius + 2.0F) / radius) - 1.0F;\r\n    // Center of the color wheel circle\r\n    int cx = (w) / 2;\r\n    int cy = (h) / 2;\r\n    for (int x = 0; x < (w); x++) {\r\n        int kx = x - cx;// Kartesian coordinates of x\r\n\r\n        int squarekx = kx * kx;// Square of kartesian x\r\n\r\n        for (int y = 0; y < (h); y++) {\r\n            int ky = cy - y;// Kartesian coordinates of y\r\n\r\n            int index = x + (y * (w));\r\n            float r = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;\r\n            float sat = r;\r\n            if (r <= 1.0F) {\r\n                alphas[index] = -16777216;\r\n                radials[index] = 1.0F;\r\n                brights[index] = ((float) (Math.round(((1.0F - sat) * 12.0F)))) / 12.0F;\r\n            } else {\r\n                alphas[index] = ((int) (((blend - (Math.min(blend, (r - 1.0F)))) * 255) / blend)) << 24;\r\n                radials[index] = 1.0F;\r\n                brights[index] = 0.0F;\r\n            }\r\n            if ((alphas[index]) != 0) {\r\n                angulars[index] = (Math.round((((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0)) * 12.0F))) / 12.0F;\r\n            }\r\n        }\r\n    }\r\n}'),(606,'generateLookupTables()','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.generateLookupTables()','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','@Override\r\nprotected void generateLookupTables() {\r\n    isDiscrete = false;\r\n    if (isDiscrete) {\r\n        generateDiscreteLookupTables();\r\n    } else {\r\n        generateContiguousLookupTables();\r\n    }\r\n}'),(607,'getColorAt(int,int,int,int)','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.getColorAt(int,int,int,int)','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','@Override\r\nprotected float[] getColorAt(int x, int y, int width, int height) {\r\n    x -= width / 2;\r\n    y -= height / 2;\r\n    float r = ((float) (Math.sqrt(((x * x) + (y * y)))));\r\n    float theta = ((float) (Math.atan2((-y), x)));\r\n    float radius = (Math.min(width, height)) / 2.0F;\r\n    float[] hsb;\r\n    float sat = ((float) (r)) / radius;\r\n    float hue = ((float) ((theta / (Math.PI)) / 2.0));\r\n    if (hue < 0) {\r\n        hue += 1.0F;\r\n    }\r\n    hsb = new float[]{ hue, 1.0F, 1.0F - sat };\r\n    return hsb;\r\n}'),(608,'getColorLocation(float,float,float,int,int)','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.getColorLocation(float,float,float,int,int)','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','@Override\r\nprotected Point getColorLocation(float hue, float saturation, float brightness, int width, int height) {\r\n    float radius = (Math.min(width, height)) / 2.0F;\r\n    float radiusH = radius / 2.0F;\r\n    saturation = Math.max(0.0F, Math.min(1.0F, saturation));\r\n    brightness = Math.max(0.0F, Math.min(1.0F, brightness));\r\n    Point p;\r\n    p = new Point(((width / 2) + ((int) ((radius - (radius * brightness)) * (Math.cos(((hue * (Math.PI)) * 2.0)))))), ((height / 2) - ((int) ((radius - (radius * brightness)) * (Math.sin(((hue * (Math.PI)) * 2.0)))))));\r\n    return p;\r\n}'),(609,'getColorLocation(java.awt.Color,int,int)','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.getColorLocation(java.awt.Color,int,int)','75','org.jhotdraw.color.HSLHarmonicColorWheelImageProducer','@Override\r\nprotected Point getColorLocation(Color c, int width, int height) {\r\n    float[] hsb = new float[3];\r\n    hsb = colorSystem.toComponents(c.getRGB(), hsb);\r\n    return getColorLocation(hsb[0], hsb[1], hsb[2], width, height);\r\n}'),(610,'-init-()','org.jhotdraw.color.HSLRGBColorSystem.-init-()','76','org.jhotdraw.color.HSLRGBColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic HSLRGBColorSystem() {\r\n}'),(611,'getComponentCount()','org.jhotdraw.color.HSLRGBColorSystem.getComponentCount()','76','org.jhotdraw.color.HSLRGBColorSystem','public int getComponentCount() {\r\n    return 3;\r\n}'),(612,'toComponents(int,int,int,float[])','org.jhotdraw.color.HSLRGBColorSystem.toComponents(int,int,int,float[])','76','org.jhotdraw.color.HSLRGBColorSystem','public float[] toComponents(int red, int green, int blue, float[] components) {\r\n    if ((components == null) || ((components.length) != 3)) {\r\n        components = new float[3];\r\n    }\r\n    float r = red / 255.0F;\r\n    float g = green / 255.0F;\r\n    float b = blue / 255.0F;\r\n    float max = Math.max(Math.max(r, g), b);\r\n    float min = Math.min(Math.min(r, g), b);\r\n    float hue;\r\n    float saturation;\r\n    float luminance;\r\n    if (max == min) {\r\n        hue = 0;\r\n    } else\r\n        if ((max == r) && (g >= b)) {\r\n            hue = (60.0F * (g - b)) / (max - min);\r\n        } else\r\n            if ((max == r) && (g < b)) {\r\n                hue = ((60.0F * (g - b)) / (max - min)) + 360.0F;\r\n            } else\r\n                if (max == g) {\r\n                    hue = ((60.0F * (b - r)) / (max - min)) + 120.0F;\r\n                } else {\r\n                    hue = ((60.0F * (r - g)) / (max - min)) + 240.0F;\r\n                }\r\n\r\n\r\n\r\n    luminance = (max + min) / 2.0F;\r\n    if (max == min) {\r\n        saturation = 0;\r\n    } else\r\n        if (luminance <= 0.5F) {\r\n            saturation = (max - min) / (max + min);\r\n        } else {\r\n            saturation = (max - min) / (2 - (max + min));\r\n        }\r\n\r\n    components[0] = hue / 360.0F;\r\n    components[1] = saturation;\r\n    components[2] = luminance;\r\n    return components;\r\n}'),(613,'toRGB(float[])','org.jhotdraw.color.HSLRGBColorSystem.toRGB(float[])','76','org.jhotdraw.color.HSLRGBColorSystem','public int toRGB(float... components) {\r\n    float hue = components[0];\r\n    float saturation = components[1];\r\n    float lightness = components[2];\r\n    // compute p and q from saturation and lightness\r\n    float q;\r\n    if (lightness < 0.5F) {\r\n        q = lightness * (1.0F + saturation);\r\n    } else {\r\n        q = (lightness + saturation) - (lightness * saturation);\r\n    }\r\n    float p = (2.0F * lightness) - q;\r\n    // normalize hue to -1..+1\r\n    float hk = hue - ((float) (Math.floor(hue)));// / 360f;\r\n\r\n    // compute red, green and blue\r\n    float red = hk + (1.0F / 3.0F);\r\n    float green = hk;\r\n    float blue = hk - (1.0F / 3.0F);\r\n    // normalize rgb values\r\n    if (red < 0) {\r\n        red = red + 1.0F;\r\n    } else\r\n        if (red > 1) {\r\n            red = red - 1.0F;\r\n        }\r\n\r\n    if (green < 0) {\r\n        green = green + 1.0F;\r\n    } else\r\n        if (green > 1) {\r\n            green = green - 1.0F;\r\n        }\r\n\r\n    if (blue < 0) {\r\n        blue = blue + 1.0F;\r\n    } else\r\n        if (blue > 1) {\r\n            blue = blue - 1.0F;\r\n        }\r\n\r\n    // adjust rgb values\r\n    if (red < (1.0F / 6.0F)) {\r\n        red = p + (((q - p) * 6) * red);\r\n    } else\r\n        if (red < 0.5F) {\r\n            red = q;\r\n        } else\r\n            if (red < (2.0F / 3.0F)) {\r\n                red = p + (((q - p) * 6) * ((2.0F / 3.0F) - red));\r\n            } else {\r\n                red = p;\r\n            }\r\n\r\n\r\n    if (green < (1.0F / 6.0F)) {\r\n        green = p + (((q - p) * 6) * green);\r\n    } else\r\n        if (green < 0.5F) {\r\n            green = q;\r\n        } else\r\n            if (green < (2.0F / 3.0F)) {\r\n                green = p + (((q - p) * 6) * ((2.0F / 3.0F) - green));\r\n            } else {\r\n                green = p;\r\n            }\r\n\r\n\r\n    if (blue < (1.0F / 6.0F)) {\r\n        blue = p + (((q - p) * 6) * blue);\r\n    } else\r\n        if (blue < 0.5F) {\r\n            blue = q;\r\n        } else\r\n            if (blue < (2.0F / 3.0F)) {\r\n                blue = p + (((q - p) * 6) * ((2.0F / 3.0F) - blue));\r\n            } else {\r\n                blue = p;\r\n            }\r\n\r\n\r\n    // pack red, green and blue into 24-bit rgb\r\n    int rgb = ((((int) (red * 255)) << 16) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));\r\n    return rgb;\r\n}'),(614,'-init-()','org.jhotdraw.color.HSLRYBColorSystem.-init-()','77','org.jhotdraw.color.HSLRYBColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic HSLRYBColorSystem() {\r\n}'),(615,'getComponentCount()','org.jhotdraw.color.HSLRYBColorSystem.getComponentCount()','77','org.jhotdraw.color.HSLRYBColorSystem','public int getComponentCount() {\r\n    return 3;\r\n}'),(616,'toComponents(int,int,int,float[])','org.jhotdraw.color.HSLRYBColorSystem.toComponents(int,int,int,float[])','77','org.jhotdraw.color.HSLRYBColorSystem','public float[] toComponents(int red, int green, int blue, float[] components) {\r\n    if ((components == null) || ((components.length) != 3)) {\r\n        components = new float[3];\r\n    }\r\n    float r = red / 255.0F;\r\n    float g = green / 255.0F;\r\n    float b = blue / 255.0F;\r\n    float max = Math.max(Math.max(r, g), b);\r\n    float min = Math.min(Math.min(r, g), b);\r\n    float hue;\r\n    float saturation;\r\n    float luminance;\r\n    if (max == min) {\r\n        hue = 0;\r\n    } else\r\n        if ((max == r) && (g >= b)) {\r\n            // red to yellow\r\n            hue = (120.0F * (g - b)) / (max - min);\r\n        } else\r\n            if (max == r) {\r\n                // red to purple\r\n                hue = ((20.0F * (g - b)) / (max - min)) + 360.0F;\r\n            } else\r\n                if ((max == g) && (r >= b)) {\r\n                    // yellow to green\r\n                    hue = (((40.0F * (b - r)) / (max - min)) + 120.0F) + 40.0F;\r\n                } else\r\n                    if (max == g) {\r\n                        // green to cyan\r\n                        hue = (((60.0F * (b - r)) / (max - min)) + 120.0F) + 40.0F;\r\n                    } else\r\n                        if (g >= r) {\r\n                            // cyan to blue\r\n                            hue = (((60.0F * (r - g)) / (max - min)) + 240.0F) + 40.0F;\r\n                        } else {\r\n                            // blue to purple\r\n                            hue = (((60.0F * (r - g)) / (max - min)) + 240.0F) + 40.0F;\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    luminance = (max + min) / 2.0F;\r\n    if (max == min) {\r\n        saturation = 0;\r\n    } else\r\n        if (luminance <= 0.5F) {\r\n            saturation = (max - min) / (max + min);\r\n        } else {\r\n            saturation = (max - min) / (2 - (max + min));\r\n        }\r\n\r\n    components[0] = hue / 360.0F;\r\n    components[1] = saturation;\r\n    components[2] = luminance;\r\n    return components;\r\n}'),(617,'toRGB(float[])','org.jhotdraw.color.HSLRYBColorSystem.toRGB(float[])','77','org.jhotdraw.color.HSLRYBColorSystem','public int toRGB(float... components) {\r\n    float hue = components[0];\r\n    float saturation = components[1];\r\n    float lightness = components[2];\r\n    // normalize hue\r\n    hue = hue - ((float) (Math.floor(hue)));\r\n    if (hue < 0) {\r\n        hue = 1.0F + hue;\r\n    }\r\n    // normalize saturation\r\n    if (saturation > 1.0F) {\r\n        saturation = 1.0F;\r\n    } else\r\n        if (saturation < 0.0F) {\r\n            saturation = 0.0F;\r\n        }\r\n\r\n    // normalize value\r\n    if (lightness > 1.0F) {\r\n        lightness = 1.0F;\r\n    } else\r\n        if (lightness < 0.0F) {\r\n            lightness = 0.0F;\r\n        }\r\n\r\n    float hueDeg = hue * 360.0F;\r\n    if (hueDeg < 0) {\r\n        hueDeg += 360.0F;\r\n    }\r\n    // compute hi and f from hue\r\n    // float f;\r\n    float hk = hue - ((float) (Math.floor(hue)));// / 360f;\r\n\r\n    if (hueDeg < 120.0F) {\r\n        // red to yellow\r\n        hk /= 2.0F;\r\n    } else\r\n        if (hueDeg < 160.0F) {\r\n            // yellow to green\r\n            hk = (((hk - (120.0F / 360.0F)) * 3.0F) / 2.0F) + (60.0F / 360.0F);\r\n        } else\r\n            if (hueDeg < 220.0F) {\r\n                // green to cyan\r\n                hk = (hk - (160.0F / 360.0F)) + (120.0F / 360.0F);\r\n            } else\r\n                if (hueDeg < 280.0F) {\r\n                    // cyan to blue\r\n                    hk = (hk - (220.0F / 360.0F)) + (180.0F / 360.0F);\r\n                } else\r\n                    if (hueDeg < 340.0F) {\r\n                        // blue to purple\r\n                        hk = (hk - (280.0F / 360.0F)) + (240.0F / 360.0F);\r\n                    } else {\r\n                        // purple to red\r\n                        hk = ((hk - (340.0F / 360.0F)) * 3.0F) + (300.0F / 360.0F);\r\n                    }\r\n\r\n\r\n\r\n\r\n    // compute p and q from saturation and lightness\r\n    float q;\r\n    if (lightness < 0.5F) {\r\n        q = lightness * (1.0F + saturation);\r\n    } else {\r\n        q = (lightness + saturation) - (lightness * saturation);\r\n    }\r\n    float p = (2.0F * lightness) - q;\r\n    // compute red, green and blue\r\n    float red = hk + (1.0F / 3.0F);\r\n    float green = hk;\r\n    float blue = hk - (1.0F / 3.0F);\r\n    if (red < 0) {\r\n        red = red + 1.0F;\r\n    }\r\n    if (green < 0) {\r\n        green = green + 1.0F;\r\n    }\r\n    if (blue < 0) {\r\n        blue = blue + 1.0F;\r\n    }\r\n    if (red > 1) {\r\n        red = red - 1.0F;\r\n    }\r\n    if (green > 1) {\r\n        green = green - 1.0F;\r\n    }\r\n    if (blue > 1) {\r\n        blue = blue - 1.0F;\r\n    }\r\n    if (red < (1.0F / 6.0F)) {\r\n        red = p + (((q - p) * 6) * red);\r\n    } else\r\n        if (red < 0.5F) {\r\n            red = q;\r\n        } else\r\n            if (red < (2.0F / 3.0F)) {\r\n                red = p + (((q - p) * 6) * ((2.0F / 3.0F) - red));\r\n            } else {\r\n                red = p;\r\n            }\r\n\r\n\r\n    if (green < (1.0F / 6.0F)) {\r\n        green = p + (((q - p) * 6) * green);\r\n    } else\r\n        if (green < 0.5F) {\r\n            green = q;\r\n        } else\r\n            if (green < (2.0F / 3.0F)) {\r\n                green = p + (((q - p) * 6) * ((2.0F / 3.0F) - green));\r\n            } else {\r\n                green = p;\r\n            }\r\n\r\n\r\n    if (blue < (1.0F / 6.0F)) {\r\n        blue = p + (((q - p) * 6) * blue);\r\n    } else\r\n        if (blue < 0.5F) {\r\n            blue = q;\r\n        } else\r\n            if (blue < (2.0F / 3.0F)) {\r\n                blue = p + (((q - p) * 6) * ((2.0F / 3.0F) - blue));\r\n            } else {\r\n                blue = p;\r\n            }\r\n\r\n\r\n    // pack red, green and blue into 24-bit rgb\r\n    int rgb = ((((int) (red * 255)) << 16) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));\r\n    return rgb;\r\n}'),(618,'-init-(int,int)','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.-init-(int,int)','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','public HSVHarmonicColorWheelImageProducer(int w, int h) {\r\n    super(new HSVRYBColorSystem(), w, h);\r\n}'),(619,'generateColorWheel()','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.generateColorWheel()','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','@Override\r\npublic void generateColorWheel() {\r\n    float radius = ((float) (Math.min(w, h)));\r\n    for (int index = 0; index < (pixels.length); index++) {\r\n        if ((alphas[index]) != 0) {\r\n            pixels[index] = (alphas[index]) | (16777215 & (colorSystem.toRGB(angulars[index], radials[index], brights[index])));\r\n        }\r\n    }\r\n    newPixels();\r\n    isPixelsValid = false;\r\n}'),(620,'generateContiguousLookupTables()','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.generateContiguousLookupTables()','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','protected void generateContiguousLookupTables() {\r\n    radials = new float[(w) * (h)];\r\n    angulars = new float[(w) * (h)];\r\n    brights = new float[(w) * (h)];\r\n    alphas = new int[(w) * (h)];\r\n    float radius = getRadius();\r\n    // blend is used to create a linear alpha gradient of two extra pixels\r\n    float blend = ((radius + 2.0F) / radius) - 1.0F;\r\n    // Center of the color wheel circle\r\n    int cx = (w) / 2;\r\n    int cy = (h) / 2;\r\n    for (int x = 0; x < (w); x++) {\r\n        int kx = x - cx;// Kartesian coordinates of x\r\n\r\n        int squarekx = kx * kx;// Square of kartesian x\r\n\r\n        for (int y = 0; y < (h); y++) {\r\n            int ky = cy - y;// Kartesian coordinates of y\r\n\r\n            int index = x + (y * (w));\r\n            float r = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;\r\n            float sat = r * (wheelScaleFactor);\r\n            if (r <= 1.0F) {\r\n                alphas[index] = -16777216;\r\n                // radials[index] = Math.min(1f, sat * 2f);\r\n                // brights[index] = Math.min(1f, 2f - sat * 2f);\r\n                radials[index] = Math.min(1.0F, (sat * 2.0F));\r\n                brights[index] = Math.min(1.0F, (1.5F - sat));\r\n            } else {\r\n                alphas[index] = ((int) (((blend - (Math.min(blend, (r - 1.0F)))) * 255) / blend)) << 24;\r\n                radials[index] = 1.0F;\r\n                // brights[index] = 0f;\r\n                brights[index] = Math.max(0, Math.min(1.0F, (1.5F - sat)));\r\n            }\r\n            if ((alphas[index]) != 0) {\r\n                angulars[index] = ((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0));\r\n            }\r\n        }\r\n    }\r\n}'),(621,'generateDiscreteLookupTables()','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.generateDiscreteLookupTables()','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','protected void generateDiscreteLookupTables() {\r\n    radials = new float[(w) * (h)];\r\n    angulars = new float[(w) * (h)];\r\n    brights = new float[(w) * (h)];\r\n    alphas = new int[(w) * (h)];\r\n    float radius = getRadius();\r\n    // blend is used to create a linear alpha gradient of two extra pixels\r\n    float blend = ((radius + 2.0F) / radius) - 1.0F;\r\n    // Center of the color wheel circle\r\n    int cx = (w) / 2;\r\n    int cy = (h) / 2;\r\n    for (int x = 0; x < (w); x++) {\r\n        int kx = x - cx;// Kartesian coordinates of x\r\n\r\n        int squarekx = kx * kx;// Square of kartesian x\r\n\r\n        for (int y = 0; y < (h); y++) {\r\n            int ky = cy - y;// Kartesian coordinates of y\r\n\r\n            int index = x + (y * (w));\r\n            float r = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;\r\n            float sat = r * (wheelScaleFactor);\r\n            if (r <= 1.0F) {\r\n                alphas[index] = -16777216;\r\n                radials[index] = ((float) (Math.round(((Math.min(1.0F, (sat * 2.0F))) * 5.0F)))) / 5.0F;\r\n                brights[index] = ((float) (Math.round(((Math.min(1.0F, (1.5F - sat))) * 10.0F)))) / 10.0F;\r\n            } else {\r\n                alphas[index] = ((int) (((blend - (Math.min(blend, (r - 1.0F)))) * 255) / blend)) << 24;\r\n                radials[index] = 1.0F;\r\n                brights[index] = Math.max(0, ((Math.round(((Math.min(1.0F, (1.5F - (sat * 1.0F)))) * 10.0F))) / 10.0F));\r\n                // brights[index] = 0f;\r\n            }\r\n            if ((alphas[index]) != 0) {\r\n                angulars[index] = (Math.round((((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0)) * 12.0F))) / 12.0F;\r\n            }\r\n        }\r\n    }\r\n}'),(622,'generateLookupTables()','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.generateLookupTables()','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','@Override\r\nprotected void generateLookupTables() {\r\n    wheelScaleFactor = 1.35F;\r\n    isDiscrete = false;\r\n    if (isDiscrete) {\r\n        generateDiscreteLookupTables();\r\n    } else {\r\n        generateContiguousLookupTables();\r\n    }\r\n}'),(623,'getColorAt(int,int,int,int)','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.getColorAt(int,int,int,int)','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','@Override\r\nprotected float[] getColorAt(int x, int y, int width, int height) {\r\n    x -= width / 2;\r\n    y -= height / 2;\r\n    float r = ((float) (Math.sqrt(((x * x) + (y * y)))));\r\n    float theta = ((float) (Math.atan2((-y), x)));\r\n    float radius = (Math.min(width, height)) / 2.0F;\r\n    float[] hsb;\r\n    float sat = (((float) (r)) / radius) * (wheelScaleFactor);\r\n    float hue = ((float) ((theta / (Math.PI)) / 2.0));\r\n    if (hue < 0) {\r\n        hue += 1.0F;\r\n    }\r\n    hsb = new float[]{ hue, Math.min(1.0F, (sat * 2.0F)), // Math.min(1f, 2f - sat * 2f)\r\n    Math.min(1.0F, (1.5F - sat)) };\r\n    return hsb;\r\n}'),(624,'getColorLocation(float,float,float,int,int)','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.getColorLocation(float,float,float,int,int)','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','@Override\r\nprotected Point getColorLocation(float hue, float saturation, float brightness, int width, int height) {\r\n    float radius = (Math.min(width, height)) / 2.0F;\r\n    float radiusH = radius / 2.0F;\r\n    saturation = Math.max(0.0F, Math.min(1.0F, saturation));\r\n    brightness = Math.max(0.0F, Math.min(1.0F, brightness));\r\n    Point p;\r\n    if (brightness == 1.0F) {\r\n        p = new Point(((width / 2) + ((int) (((radiusH * saturation) * (Math.cos(((hue * (Math.PI)) * 2.0)))) / (wheelScaleFactor)))), ((height / 2) - ((int) (((radiusH * saturation) * (Math.sin(((hue * (Math.PI)) * 2.0)))) / (wheelScaleFactor)))));\r\n    } else {\r\n        p = new Point(((width / 2) + ((int) ((((radius + radiusH) - (radius * brightness)) * (Math.cos(((hue * (Math.PI)) * 2.0)))) / (wheelScaleFactor)))), ((height / 2) - ((int) ((((radius + radiusH) - (radius * brightness)) * (Math.sin(((hue * (Math.PI)) * 2.0)))) / (wheelScaleFactor)))));\r\n    }\r\n    return p;\r\n}'),(625,'getColorLocation(java.awt.Color,int,int)','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer.getColorLocation(java.awt.Color,int,int)','78','org.jhotdraw.color.HSVHarmonicColorWheelImageProducer','@Override\r\nprotected Point getColorLocation(Color c, int width, int height) {\r\n    float[] hsb = new float[3];\r\n    hsb = colorSystem.toComponents(c.getRGB(), hsb);\r\n    return getColorLocation(hsb[0], hsb[1], hsb[2], width, height);\r\n}'),(626,'-init-()','org.jhotdraw.color.HSVRGBColorSystem.-init-()','79','org.jhotdraw.color.HSVRGBColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic HSVRGBColorSystem() {\r\n}'),(627,'getComponentCount()','org.jhotdraw.color.HSVRGBColorSystem.getComponentCount()','79','org.jhotdraw.color.HSVRGBColorSystem','public int getComponentCount() {\r\n    return 3;\r\n}'),(628,'toComponents(int,int,int,float[])','org.jhotdraw.color.HSVRGBColorSystem.toComponents(int,int,int,float[])','79','org.jhotdraw.color.HSVRGBColorSystem','public float[] toComponents(int red, int green, int blue, float[] components) {\r\n    if ((components == null) || ((components.length) != 3)) {\r\n        components = new float[3];\r\n    }\r\n    float r = red / 255.0F;\r\n    float g = green / 255.0F;\r\n    float b = blue / 255.0F;\r\n    float max = Math.max(Math.max(r, g), b);\r\n    float min = Math.min(Math.min(r, g), b);\r\n    float hue;\r\n    float saturation;\r\n    float value;\r\n    if (max == min) {\r\n        hue = 0;\r\n    } else\r\n        if ((max == r) && (g >= b)) {\r\n            hue = (60.0F * (g - b)) / (max - min);\r\n        } else\r\n            if ((max == r) && (g < b)) {\r\n                hue = ((60.0F * (g - b)) / (max - min)) + 360.0F;\r\n            } else\r\n                if (max == g) {\r\n                    hue = ((60.0F * (b - r)) / (max - min)) + 120.0F;\r\n                } else {\r\n                    hue = ((60.0F * (r - g)) / (max - min)) + 240.0F;\r\n                }\r\n\r\n\r\n\r\n    value = max;\r\n    if (max == 0) {\r\n        saturation = 0;\r\n    } else {\r\n        saturation = (max - min) / max;\r\n    }\r\n    components[0] = hue / 360.0F;\r\n    components[1] = saturation;\r\n    components[2] = value;\r\n    return components;\r\n}'),(629,'toRGB(float[])','org.jhotdraw.color.HSVRGBColorSystem.toRGB(float[])','79','org.jhotdraw.color.HSVRGBColorSystem','public int toRGB(float... components) {\r\n    float hue = (components[0]) * 360.0F;\r\n    float saturation = components[1];\r\n    float value = components[2];\r\n    // compute hi and f from hue\r\n    int hi = ((int) ((Math.floor((hue / 60.0F))) % 6));\r\n    float f = ((float) ((hue / 60.0F) - (Math.floor((hue / 60.0F)))));\r\n    // compute p and q from saturation\r\n    float p = value * (1 - saturation);\r\n    float q = value * (1 - (f * saturation));\r\n    float t = value * (1 - ((1 - f) * saturation));\r\n    // compute red, green and blue\r\n    float red;\r\n    float green;\r\n    float blue;\r\n    switch (hi) {\r\n        case 0 :\r\n            red = value;\r\n            green = t;\r\n            blue = p;\r\n            break;\r\n        case 1 :\r\n            red = q;\r\n            green = value;\r\n            blue = p;\r\n            break;\r\n        case 2 :\r\n            red = p;\r\n            green = value;\r\n            blue = t;\r\n            break;\r\n        case -3 :\r\n        case 3 :\r\n            red = p;\r\n            green = q;\r\n            blue = value;\r\n            break;\r\n        case -2 :\r\n        case 4 :\r\n            red = t;\r\n            green = p;\r\n            blue = value;\r\n            break;\r\n        case -1 :\r\n        case 5 :\r\n            // default :\r\n            red = value;\r\n            green = p;\r\n            blue = q;\r\n            break;\r\n        default :\r\n            red = green = blue = 0;\r\n            break;\r\n    }\r\n    // pack red, green and blue into 24-bit rgb\r\n    int rgb = ((((int) (red * 255)) << 16) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));\r\n    return rgb;\r\n}'),(630,'-init-()','org.jhotdraw.color.HSVRYBColorSystem.-init-()','80','org.jhotdraw.color.HSVRYBColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic HSVRYBColorSystem() {\r\n}'),(631,'getComponentCount()','org.jhotdraw.color.HSVRYBColorSystem.getComponentCount()','80','org.jhotdraw.color.HSVRYBColorSystem','public int getComponentCount() {\r\n    return 3;\r\n}'),(632,'toComponents(int,int,int,float[])','org.jhotdraw.color.HSVRYBColorSystem.toComponents(int,int,int,float[])','80','org.jhotdraw.color.HSVRYBColorSystem','public float[] toComponents(int red, int green, int blue, float[] components) {\r\n    if ((components == null) || ((components.length) != 3)) {\r\n        components = new float[3];\r\n    }\r\n    float r = (red & 255) / 255.0F;\r\n    float g = (green & 255) / 255.0F;\r\n    float b = (blue & 255) / 255.0F;\r\n    float max = Math.max(Math.max(r, g), b);\r\n    float min = Math.min(Math.min(r, g), b);\r\n    float hue;\r\n    float saturation;\r\n    float value;\r\n    if (max == min) {\r\n        hue = 0;\r\n    } else\r\n        if ((max == r) && (g >= b)) {\r\n            // red to yellow\r\n            hue = (120.0F * (g - b)) / (max - min);\r\n        } else\r\n            if (max == r) {\r\n                // red to purple\r\n                hue = ((20.0F * (g - b)) / (max - min)) + 360.0F;\r\n            } else\r\n                if ((max == g) && (r >= b)) {\r\n                    // yellow to green\r\n                    hue = (((40.0F * (b - r)) / (max - min)) + 120.0F) + 40.0F;\r\n                } else\r\n                    if (max == g) {\r\n                        // green to cyan\r\n                        hue = (((60.0F * (b - r)) / (max - min)) + 120.0F) + 40.0F;\r\n                    } else\r\n                        if (g >= r) {\r\n                            // cyan to blue\r\n                            hue = (((60.0F * (r - g)) / (max - min)) + 240.0F) + 40.0F;\r\n                        } else {\r\n                            // blue to purple\r\n                            hue = (((60.0F * (r - g)) / (max - min)) + 240.0F) + 40.0F;\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    value = max;\r\n    if (max == 0) {\r\n        saturation = 0;\r\n    } else {\r\n        saturation = (max - min) / max;\r\n    }\r\n    components[0] = hue / 360.0F;\r\n    components[1] = saturation;\r\n    components[2] = value;\r\n    return components;\r\n}'),(633,'toRGB(float[])','org.jhotdraw.color.HSVRYBColorSystem.toRGB(float[])','80','org.jhotdraw.color.HSVRYBColorSystem','public int toRGB(float... components) {\r\n    float hue = components[0];\r\n    float saturation = components[1];\r\n    float value = components[2];\r\n    // normalize hue\r\n    hue = hue - ((float) (Math.floor(hue)));\r\n    if (hue < 0) {\r\n        hue -= 1.0F;\r\n    }\r\n    // normalize saturation\r\n    if (saturation > 1.0F) {\r\n        saturation = 1.0F;\r\n    } else\r\n        if (saturation < 0.0F) {\r\n            saturation = 0.0F;\r\n        }\r\n\r\n    // normalize value\r\n    if (value > 1.0F) {\r\n        value = 1.0F;\r\n    } else\r\n        if (value < 0.0F) {\r\n            value = 0.0F;\r\n        }\r\n\r\n    // compute hi and f from hue\r\n    int hi;\r\n    float f;\r\n    float hueDeg = hue * 360.0F;\r\n    if (hueDeg < 120.0F) {\r\n        // red to yellow\r\n        hi = 0;\r\n        f = hueDeg / 120.0F;\r\n    } else\r\n        if (hueDeg < 160.0F) {\r\n            // yellow to green\r\n            hi = 1;\r\n            f = (hueDeg - 120.0F) / 40.0F;\r\n        } else\r\n            if (hueDeg < 220.0F) {\r\n                // green to cyan\r\n                hi = 2;\r\n                f = (hueDeg - 160.0F) / 60.0F;\r\n            } else\r\n                if (hueDeg < 280.0F) {\r\n                    // cyan to blue\r\n                    hi = 3;\r\n                    f = (hueDeg - 220.0F) / 60.0F;\r\n                } else\r\n                    if (hueDeg < 340.0F) {\r\n                        // blue to purple\r\n                        hi = 4;\r\n                        f = (hueDeg - 280.0F) / 60.0F;\r\n                    } else {\r\n                        // purple to red\r\n                        f = (hueDeg - 340.0F) / 20.0F;\r\n                        hi = 5;\r\n                    }\r\n\r\n\r\n\r\n\r\n    // compute p, q, t from saturation\r\n    float p = value * (1 - saturation);\r\n    float q = value * (1 - (f * saturation));\r\n    float t = value * (1 - ((1 - f) * saturation));\r\n    // compute red, green and blue\r\n    float red;\r\n    float green;\r\n    float blue;\r\n    switch (hi) {\r\n        case 0 :\r\n            red = value;\r\n            green = t;\r\n            blue = p;\r\n            break;\r\n        case 1 :\r\n            red = q;\r\n            green = value;\r\n            blue = p;\r\n            break;\r\n        case 2 :\r\n            red = p;\r\n            green = value;\r\n            blue = t;\r\n            break;\r\n        case -3 :\r\n        case 3 :\r\n            red = p;\r\n            green = q;\r\n            blue = value;\r\n            break;\r\n        case -2 :\r\n        case 4 :\r\n            red = t;\r\n            green = p;\r\n            blue = value;\r\n            break;\r\n        case -1 :\r\n        case 5 :\r\n            // default :\r\n            red = value;\r\n            green = p;\r\n            blue = q;\r\n            break;\r\n        default :\r\n            red = green = blue = 0;\r\n            break;\r\n    }\r\n    int rgb = ((((int) (red * 255)) << 16) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));\r\n    return rgb;\r\n}'),(634,'RGBtoComponent(int,float[])','org.jhotdraw.color.HarmonicColorModel.RGBtoComponent(int,float[])','81','org.jhotdraw.color.HarmonicColorModel','public float[] RGBtoComponent(int rgb, float[] hsb);'),(635,'add(org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.HarmonicColorModel.add(org.jhotdraw.color.CompositeColor)','81','org.jhotdraw.color.HarmonicColorModel','public boolean add(CompositeColor c);'),(636,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.color.HarmonicColorModel.addPropertyChangeListener(java.beans.PropertyChangeListener)','81','org.jhotdraw.color.HarmonicColorModel','public void addPropertyChangeListener(PropertyChangeListener listener);'),(637,'addRule(org.jhotdraw.color.HarmonicRule)','org.jhotdraw.color.HarmonicColorModel.addRule(org.jhotdraw.color.HarmonicRule)','81','org.jhotdraw.color.HarmonicColorModel','public void addRule(HarmonicRule rule);'),(638,'applyRules()','org.jhotdraw.color.HarmonicColorModel.applyRules()','81','org.jhotdraw.color.HarmonicColorModel','public void applyRules();'),(639,'componentToRGB(float,float,float)','org.jhotdraw.color.HarmonicColorModel.componentToRGB(float,float,float)','81','org.jhotdraw.color.HarmonicColorModel','public int componentToRGB(float h, float s, float b);'),(640,'get(int)','org.jhotdraw.color.HarmonicColorModel.get(int)','81','org.jhotdraw.color.HarmonicColorModel','public CompositeColor get(int index);'),(641,'getBase()','org.jhotdraw.color.HarmonicColorModel.getBase()','81','org.jhotdraw.color.HarmonicColorModel','public int getBase();'),(642,'getColorSystem()','org.jhotdraw.color.HarmonicColorModel.getColorSystem()','81','org.jhotdraw.color.HarmonicColorModel','public ColorSystem getColorSystem();'),(643,'isAdjusting()','org.jhotdraw.color.HarmonicColorModel.isAdjusting()','81','org.jhotdraw.color.HarmonicColorModel','public boolean isAdjusting();'),(644,'removeAllRules()','org.jhotdraw.color.HarmonicColorModel.removeAllRules()','81','org.jhotdraw.color.HarmonicColorModel','public void removeAllRules();'),(645,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.color.HarmonicColorModel.removePropertyChangeListener(java.beans.PropertyChangeListener)','81','org.jhotdraw.color.HarmonicColorModel','public void removePropertyChangeListener(PropertyChangeListener listener);'),(646,'set(int,org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.HarmonicColorModel.set(int,org.jhotdraw.color.CompositeColor)','81','org.jhotdraw.color.HarmonicColorModel','public void set(int index, CompositeColor color);'),(647,'setBase(int)','org.jhotdraw.color.HarmonicColorModel.setBase(int)','81','org.jhotdraw.color.HarmonicColorModel','public void setBase(int newValue);'),(648,'setColorSystem(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.HarmonicColorModel.setColorSystem(org.jhotdraw.color.ColorSystem)','81','org.jhotdraw.color.HarmonicColorModel','public void setColorSystem(ColorSystem newValue);'),(649,'setSize(int)','org.jhotdraw.color.HarmonicColorModel.setSize(int)','81','org.jhotdraw.color.HarmonicColorModel','public void setSize(int newValue);'),(650,'size()','org.jhotdraw.color.HarmonicColorModel.size()','81','org.jhotdraw.color.HarmonicColorModel','public int size();'),(651,'apply(org.jhotdraw.color.HarmonicColorModel)','org.jhotdraw.color.HarmonicRule.apply(org.jhotdraw.color.HarmonicColorModel)','82','org.jhotdraw.color.HarmonicRule','public void apply(HarmonicColorModel model);'),(652,'colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)','82','org.jhotdraw.color.HarmonicRule','public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);'),(653,'getBaseIndex()','org.jhotdraw.color.HarmonicRule.getBaseIndex()','82','org.jhotdraw.color.HarmonicRule','public int getBaseIndex();'),(654,'getDerivedIndices()','org.jhotdraw.color.HarmonicRule.getDerivedIndices()','82','org.jhotdraw.color.HarmonicRule','public int[] getDerivedIndices();'),(655,'setBaseIndex()','org.jhotdraw.color.HarmonicRule.setBaseIndex()','82','org.jhotdraw.color.HarmonicRule','public void setBaseIndex();'),(656,'setDerivedIndices(int[])','org.jhotdraw.color.HarmonicRule.setDerivedIndices(int[])','82','org.jhotdraw.color.HarmonicRule','public void setDerivedIndices(int... indices);'),(657,'-init-()','org.jhotdraw.color.JColorWheel.-init-()','85','org.jhotdraw.color.JColorWheel','MouseHandler() {\r\n}'),(658,'-init-(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.JColorWheel.-init-(org.jhotdraw.color.ColorSystem)','85','org.jhotdraw.color.JColorWheel','public JColorWheel(ColorSystem sys) {\r\n    this.sys = sys;\r\n    wheelInsets = new Insets(0, 0, 0, 0);\r\n    model = new DefaultColorSliderModel(sys);\r\n    initComponents();\r\n    colorWheelProducer = createWheelProducer(0, 0);\r\n    modelHandler = new JColorWheel.ModelHandler();\r\n    model.addChangeListener(modelHandler);\r\n    installMouseListeners();\r\n    setOpaque(false);\r\n}'),(659,'createWheelProducer(int,int)','org.jhotdraw.color.JColorWheel.createWheelProducer(int,int)','85','org.jhotdraw.color.JColorWheel','protected ColorWheelImageProducer createWheelProducer(int w, int h) {\r\n    ColorWheelImageProducer p = new ColorWheelImageProducer(model.getColorSystem(), w, h);\r\n    p.setAngularComponentIndex(angularIndex);\r\n    p.setRadialComponentIndex(radialIndex);\r\n    p.setVerticalComponentIndex(verticalIndex);\r\n    return p;\r\n}'),(660,'getCenter()','org.jhotdraw.color.JColorWheel.getCenter()','85','org.jhotdraw.color.JColorWheel','protected Point getCenter() {\r\n    int w = ((getWidth()) - (wheelInsets.left)) - (wheelInsets.right);\r\n    int h = ((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom);\r\n    return new Point(((wheelInsets.left) + (w / 2)), ((wheelInsets.top) + (h / 2)));\r\n}'),(661,'getColorAt(int,int)','org.jhotdraw.color.JColorWheel.getColorAt(int,int)','85','org.jhotdraw.color.JColorWheel','protected float[] getColorAt(int x, int y) {\r\n    float[] cc = colorWheelProducer.getColorAt((x - (wheelInsets.left)), (y - (wheelInsets.top)), (((getWidth()) - (wheelInsets.left)) - (wheelInsets.right)), (((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom)));\r\n    return cc;\r\n}'),(662,'getColorLocation(float,float,float)','org.jhotdraw.color.JColorWheel.getColorLocation(float,float,float)','85','org.jhotdraw.color.JColorWheel','protected Point getColorLocation(float hue, float saturation, float brightness) {\r\n    Point p = colorWheelProducer.getColorLocation(hue, saturation, brightness, (((getWidth()) - (wheelInsets.left)) - (wheelInsets.right)), (((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom)));\r\n    p.x += wheelInsets.left;\r\n    p.y += wheelInsets.top;\r\n    return p;\r\n}'),(663,'getColorLocation(java.awt.Color)','org.jhotdraw.color.JColorWheel.getColorLocation(java.awt.Color)','85','org.jhotdraw.color.JColorWheel','protected Point getColorLocation(Color c) {\r\n    Point p = colorWheelProducer.getColorLocation(c, (((getWidth()) - (wheelInsets.left)) - (wheelInsets.right)), (((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom)));\r\n    p.x += wheelInsets.left;\r\n    p.y += wheelInsets.top;\r\n    return p;\r\n}'),(664,'getModel()','org.jhotdraw.color.JColorWheel.getModel()','85','org.jhotdraw.color.JColorWheel','public ColorSliderModel getModel() {\r\n    return model;\r\n}'),(665,'getPreferredSize()','org.jhotdraw.color.JColorWheel.getPreferredSize()','85','org.jhotdraw.color.JColorWheel','public Dimension getPreferredSize() {\r\n    return new Dimension(100, 100);\r\n}'),(666,'getRadius()','org.jhotdraw.color.JColorWheel.getRadius()','85','org.jhotdraw.color.JColorWheel','protected int getRadius() {\r\n    return colorWheelProducer.getRadius();\r\n}'),(667,'getThumbLocation()','org.jhotdraw.color.JColorWheel.getThumbLocation()','85','org.jhotdraw.color.JColorWheel','protected Point getThumbLocation() {\r\n    return getColorLocation(model.getComponentValue(0), model.getComponentValue(1), model.getComponentValue(2));\r\n}'),(668,'getWheelInsets()','org.jhotdraw.color.JColorWheel.getWheelInsets()','85','org.jhotdraw.color.JColorWheel','public Insets getWheelInsets() {\r\n    return wheelInsets;\r\n}'),(669,'initComponents()','org.jhotdraw.color.JColorWheel.initComponents()','85','org.jhotdraw.color.JColorWheel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setLayout(new BorderLayout());\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(670,'installMouseListeners()','org.jhotdraw.color.JColorWheel.installMouseListeners()','85','org.jhotdraw.color.JColorWheel','protected void installMouseListeners() {\r\n    mouseHandler = new JColorWheel.MouseHandler();\r\n    addMouseListener(mouseHandler);\r\n    addMouseMotionListener(mouseHandler);\r\n}'),(671,'paintComponent(java.awt.Graphics)','org.jhotdraw.color.JColorWheel.paintComponent(java.awt.Graphics)','85','org.jhotdraw.color.JColorWheel','public void paintComponent(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    paintWheel(g);\r\n    paintThumb(g);\r\n}'),(672,'paintThumb(java.awt.Graphics2D)','org.jhotdraw.color.JColorWheel.paintThumb(java.awt.Graphics2D)','85','org.jhotdraw.color.JColorWheel','protected void paintThumb(Graphics2D g) {\r\n    Point p = getThumbLocation();\r\n    g.setColor(Color.white);\r\n    g.fillRect(((p.x) - 1), ((p.y) - 1), 2, 2);\r\n    g.setColor(Color.black);\r\n    g.drawRect(((p.x) - 2), ((p.y) - 2), 3, 3);\r\n}'),(673,'paintWheel(java.awt.Graphics2D)','org.jhotdraw.color.JColorWheel.paintWheel(java.awt.Graphics2D)','85','org.jhotdraw.color.JColorWheel','protected void paintWheel(Graphics2D g) {\r\n    int w = ((getWidth()) - (wheelInsets.left)) - (wheelInsets.right);\r\n    int h = ((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom);\r\n    if ((((colorWheelImage) == null) || ((colorWheelImage.getWidth(this)) != w)) || ((colorWheelImage.getHeight(this)) != h)) {\r\n        if ((colorWheelImage) != null) {\r\n            colorWheelImage.flush();\r\n        }\r\n        colorWheelProducer = createWheelProducer(w, h);\r\n        colorWheelImage = createImage(colorWheelProducer);\r\n    }\r\n    colorWheelProducer.setVerticalValue(model.getComponentValue(verticalIndex));\r\n    colorWheelProducer.regenerateColorWheel();\r\n    g.drawImage(colorWheelImage, wheelInsets.left, wheelInsets.top, this);\r\n}'),(674,'setAngularComponentIndex(int)','org.jhotdraw.color.JColorWheel.setAngularComponentIndex(int)','85','org.jhotdraw.color.JColorWheel','public void setAngularComponentIndex(int newValue) {\r\n    angularIndex = newValue;\r\n    colorWheelImage = null;\r\n    repaint();\r\n}'),(675,'setModel(org.jhotdraw.color.ColorSliderModel)','org.jhotdraw.color.JColorWheel.setModel(org.jhotdraw.color.ColorSliderModel)','85','org.jhotdraw.color.JColorWheel','public void setModel(ColorSliderModel m) {\r\n    if ((model) != null) {\r\n        model.removeChangeListener(modelHandler);\r\n    }\r\n    model = m;\r\n    if ((model) != null) {\r\n        model.addChangeListener(modelHandler);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n        repaint();\r\n    }\r\n}'),(676,'setRadialComponentIndex(int)','org.jhotdraw.color.JColorWheel.setRadialComponentIndex(int)','85','org.jhotdraw.color.JColorWheel','public void setRadialComponentIndex(int newValue) {\r\n    radialIndex = newValue;\r\n    colorWheelImage = null;\r\n    repaint();\r\n}'),(677,'setVerticalComponentIndex(int)','org.jhotdraw.color.JColorWheel.setVerticalComponentIndex(int)','85','org.jhotdraw.color.JColorWheel','public void setVerticalComponentIndex(int newValue) {\r\n    verticalIndex = newValue;\r\n    colorWheelImage = null;\r\n    repaint();\r\n}'),(678,'setWheelInsets(java.awt.Insets)','org.jhotdraw.color.JColorWheel.setWheelInsets(java.awt.Insets)','85','org.jhotdraw.color.JColorWheel','public void setWheelInsets(Insets newValue) {\r\n    wheelInsets = newValue;\r\n    repaint();\r\n}'),(679,'-init-()','org.jhotdraw.color.JColorWheel$ModelHandler.-init-()','83','org.jhotdraw.color.JColorWheel$ModelHandler','ModelHandler() {\r\n}'),(680,'stateChanged(javax.swing.event.ChangeEvent)','org.jhotdraw.color.JColorWheel$ModelHandler.stateChanged(javax.swing.event.ChangeEvent)','83','org.jhotdraw.color.JColorWheel$ModelHandler','public void stateChanged(ChangeEvent e) {\r\n    repaint();\r\n}'),(681,'-init-()','org.jhotdraw.color.JColorWheel$MouseHandler.-init-()','84','org.jhotdraw.color.JColorWheel$MouseHandler','MouseHandler() {\r\n}'),(682,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.color.JColorWheel$MouseHandler.mouseDragged(java.awt.event.MouseEvent)','84','org.jhotdraw.color.JColorWheel$MouseHandler','public void mouseDragged(MouseEvent e) {\r\n    update(e);\r\n}'),(683,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.color.JColorWheel$MouseHandler.mouseMoved(java.awt.event.MouseEvent)','84','org.jhotdraw.color.JColorWheel$MouseHandler','public void mouseMoved(MouseEvent e) {\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(684,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.color.JColorWheel$MouseHandler.mousePressed(java.awt.event.MouseEvent)','84','org.jhotdraw.color.JColorWheel$MouseHandler','@Override\r\npublic void mousePressed(MouseEvent e) {\r\n    update(e);\r\n}'),(685,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.color.JColorWheel$MouseHandler.mouseReleased(java.awt.event.MouseEvent)','84','org.jhotdraw.color.JColorWheel$MouseHandler','@Override\r\npublic void mouseReleased(MouseEvent e) {\r\n    update(e);\r\n}'),(686,'update(java.awt.event.MouseEvent)','org.jhotdraw.color.JColorWheel$MouseHandler.update(java.awt.event.MouseEvent)','84','org.jhotdraw.color.JColorWheel$MouseHandler','private void update(MouseEvent e) {\r\n    float[] hsb = getColorAt(e.getX(), e.getY());\r\n    model.setComponentValue(angularIndex, hsb[angularIndex]);\r\n    model.setComponentValue(radialIndex, hsb[radialIndex]);\r\n    // FIXME - We should only repaint the damaged area\r\n    repaint();\r\n}'),(687,'-init-()','org.jhotdraw.color.JHarmonicColorWheel.-init-()','88','org.jhotdraw.color.JHarmonicColorWheel','MouseHandler() {\r\n}'),(688,'getColorLocation(org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.JHarmonicColorWheel.getColorLocation(org.jhotdraw.color.CompositeColor)','88','org.jhotdraw.color.JHarmonicColorWheel','protected Point getColorLocation(CompositeColor c) {\r\n    Point p = colorWheelProducer.getColorLocation(c, (((getWidth()) - (wheelInsets.left)) - (wheelInsets.right)), (((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom)));\r\n    p.x += wheelInsets.left;\r\n    p.y += wheelInsets.top;\r\n    return p;\r\n}'),(689,'getHarmonicColorModel()','org.jhotdraw.color.JHarmonicColorWheel.getHarmonicColorModel()','88','org.jhotdraw.color.JHarmonicColorWheel','public HarmonicColorModel getHarmonicColorModel() {\r\n    return harmonicModel;\r\n}'),(690,'getSelectedIndex()','org.jhotdraw.color.JHarmonicColorWheel.getSelectedIndex()','88','org.jhotdraw.color.JHarmonicColorWheel','public int getSelectedIndex() {\r\n    return selectedIndex;\r\n}'),(691,'getToolTipText(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel.getToolTipText(java.awt.event.MouseEvent)','88','org.jhotdraw.color.JHarmonicColorWheel','public String getToolTipText(MouseEvent evt) {\r\n    float[] hsb = getColorAt(evt.getX(), evt.getY());\r\n    if (hsb == null) {\r\n        return null;\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(Math.round(((hsb[0]) * 360)));\r\n    buf.append(\",\");\r\n    buf.append(Math.round(((hsb[1]) * 100.0F)));\r\n    buf.append(\",\");\r\n    buf.append(Math.round(((hsb[2]) * 100.0F)));\r\n    if ((buf.length()) > 0) {\r\n        buf.insert(0, \"<html>\");\r\n        return buf.toString();\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(692,'initComponents()','org.jhotdraw.color.JHarmonicColorWheel.initComponents()','88','org.jhotdraw.color.JHarmonicColorWheel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setLayout(new FlowLayout());\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(693,'installMouseListeners()','org.jhotdraw.color.JHarmonicColorWheel.installMouseListeners()','88','org.jhotdraw.color.JHarmonicColorWheel','@Override\r\nprotected void installMouseListeners() {\r\n    mouseHandler = new JHarmonicColorWheel.MouseHandler();\r\n    addMouseListener(mouseHandler);\r\n    addMouseMotionListener(mouseHandler);\r\n}'),(694,'paintComponent(java.awt.Graphics)','org.jhotdraw.color.JHarmonicColorWheel.paintComponent(java.awt.Graphics)','88','org.jhotdraw.color.JHarmonicColorWheel','/* @Override\nprotected ColorWheelImageProducer createWheelProducer(int w, int h) {\nreturn new HSLHarmonicColorWheelImageProducer(harmonicModel == null ? new HSLRYBColorSystem() : harmonicModel.getColorSystem(), w, h);\n}\n */\r\n@Override\r\npublic void paintComponent(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\r\n    super.paintComponent(g);\r\n}'),(695,'paintThumb(java.awt.Graphics2D)','org.jhotdraw.color.JHarmonicColorWheel.paintThumb(java.awt.Graphics2D)','88','org.jhotdraw.color.JHarmonicColorWheel','@Override\r\nprotected void paintThumb(Graphics2D g) {\r\n    paintTicks(g);\r\n    if ((harmonicModel) != null) {\r\n        Point center = getCenter();\r\n        Ellipse2D.Float oval = new Ellipse2D.Float(0, 0, 0, 0);\r\n        float[] comp = null;\r\n        float wheelBrightness = (model.getBoundedRangeModel(2).getValue()) / 100.0F;\r\n        for (int i = (harmonicModel.size()) - 1; i >= 0; i--) {\r\n            if ((harmonicModel.get(i)) != null) {\r\n                Point p = getColorLocation(harmonicModel.get(i));\r\n                g.setColor(Color.black);\r\n                g.drawLine(center.x, center.y, p.x, p.y);\r\n            }\r\n        }\r\n        for (int i = (harmonicModel.size()) - 1; i >= 0; i--) {\r\n            if ((harmonicModel.get(i)) != null) {\r\n                Point p = getColorLocation(harmonicModel.get(i));\r\n                CompositeColor mixerColor = harmonicModel.get(i);\r\n                comp = mixerColor.getComponents();\r\n                if (i == (selectedIndex)) {\r\n                    g.setColor(Color.white);\r\n                    oval.x = (p.x) - (baseRadius);\r\n                    oval.y = (p.y) - (baseRadius);\r\n                    oval.width = (baseRadius) * 2.0F;\r\n                    oval.height = (baseRadius) * 2.0F;\r\n                    g.fill(oval);\r\n                }\r\n                g.setColor(mixerColor.getColor());\r\n                oval.x = (p.x) - (handleRadius);\r\n                oval.y = (p.y) - (handleRadius);\r\n                oval.width = (handleRadius) * 2.0F;\r\n                oval.height = (handleRadius) * 2.0F;\r\n                g.fill(oval);\r\n                g.setColor(Color.black);\r\n                g.draw(oval);\r\n                if (i == (harmonicModel.getBase())) {\r\n                    oval.x = (p.x) - (baseRadius);\r\n                    oval.y = (p.y) - (baseRadius);\r\n                    oval.width = (baseRadius) * 2.0F;\r\n                    oval.height = (baseRadius) * 2.0F;\r\n                    g.draw(oval);\r\n                }\r\n                // g.drawString(i+\"\", p.x, p.y);\r\n            }\r\n        }\r\n    }\r\n}'),(696,'paintTicks(java.awt.Graphics2D)','org.jhotdraw.color.JHarmonicColorWheel.paintTicks(java.awt.Graphics2D)','88','org.jhotdraw.color.JHarmonicColorWheel','protected void paintTicks(Graphics2D g) {\r\n    if (true)\r\n        return;\r\n\r\n    if ((harmonicModel) != null) {\r\n        Point center = getCenter();\r\n        float radius = getRadius();\r\n        Ellipse2D.Float oval = new Ellipse2D.Float(0, 0, 0, 0);\r\n        int baseIndex = harmonicModel.getBase();\r\n        CompositeColor bc = harmonicModel.get(baseIndex);\r\n        g.setColor(Color.DARK_GRAY);\r\n        for (int i = 0; i < 12; i++) {\r\n            float angle = (bc.getComponent(0)) + (i / 12.0F);\r\n            float radial1 = radius;\r\n            /* g.draw(new Line2D.Double(\n            center.x + radius * Math.cos(angle * Math.PI * 2d),\n            center.y - radius * Math.sin(angle * Math.PI * 2d),\n            center.x + (radius + 2) * Math.cos(angle * Math.PI * 2d),\n            center.y - (radius + 2) * Math.sin(angle * Math.PI * 2d)));\n             */\r\n            g.fill(new Ellipse2D.Double((((center.x) + ((radius + 2) * (Math.cos(((angle * (Math.PI)) * 2.0))))) - 2), (((center.y) - ((radius + 2) * (Math.sin(((angle * (Math.PI)) * 2.0))))) - 2), 4, 4));\r\n        }\r\n        for (int i = 0, n = harmonicModel.size(); i < n; i++) {\r\n            if (i != baseIndex) {\r\n                CompositeColor dc = harmonicModel.get(i);\r\n                if (dc != null) {\r\n                    float angle = dc.getComponent(0);\r\n                    float diff = (Math.abs((angle - (bc.getComponent(0))))) * 12;\r\n                    if ((Math.abs((diff - (Math.round(diff))))) < 0.02F) {\r\n                        g.draw(new Line2D.Double(((center.x) + ((radius + 6) * (Math.cos(((angle * (Math.PI)) * 2.0))))), ((center.y) - ((radius + 6) * (Math.sin(((angle * (Math.PI)) * 2.0))))), ((center.x) + ((radius - 2) * (Math.cos(((angle * (Math.PI)) * 2.0))))), ((center.y) - ((radius - 2) * (Math.sin(((angle * (Math.PI)) * 2.0)))))));\r\n                    } else {\r\n                        g.draw(new Line2D.Double(((center.x) + (radius * (Math.cos(((angle * (Math.PI)) * 2.0))))), ((center.y) - (radius * (Math.sin(((angle * (Math.PI)) * 2.0))))), ((center.x) + ((radius - 1) * (Math.cos(((angle * (Math.PI)) * 2.0))))), ((center.y) - ((radius - 1) * (Math.sin(((angle * (Math.PI)) * 2.0)))))));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(697,'setColorSystem(org.jhotdraw.color.ColorSystem)','org.jhotdraw.color.JHarmonicColorWheel.setColorSystem(org.jhotdraw.color.ColorSystem)','88','org.jhotdraw.color.JHarmonicColorWheel','public void setColorSystem(ColorSystem newValue) {\r\n    harmonicModel.setColorSystem(newValue);\r\n    getModel().setColorSystem(newValue);\r\n    getModel().setComponentValue(1, 1.0F);\r\n}'),(698,'setHarmonicColorModel(org.jhotdraw.color.HarmonicColorModel)','org.jhotdraw.color.JHarmonicColorWheel.setHarmonicColorModel(org.jhotdraw.color.HarmonicColorModel)','88','org.jhotdraw.color.JHarmonicColorWheel','public void setHarmonicColorModel(HarmonicColorModel newValue) {\r\n    HarmonicColorModel oldValue = harmonicModel;\r\n    if (oldValue != null) {\r\n        oldValue.removePropertyChangeListener(modelHandler);\r\n        oldValue.removeListDataListener(modelHandler);\r\n    }\r\n    harmonicModel = newValue;\r\n    if (newValue != null) {\r\n        newValue.addPropertyChangeListener(modelHandler);\r\n        newValue.addListDataListener(modelHandler);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n    }\r\n}'),(699,'setSelectedIndex(int)','org.jhotdraw.color.JHarmonicColorWheel.setSelectedIndex(int)','88','org.jhotdraw.color.JHarmonicColorWheel','public void setSelectedIndex(int newValue) {\r\n    int oldValue = selectedIndex;\r\n    selectedIndex = newValue;\r\n    firePropertyChange(JHarmonicColorWheel.SELECTED_INDEX_PROPERTY, oldValue, newValue);\r\n    repaint();\r\n}'),(700,'-init-()','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler.-init-()','86','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler','ModelHandler() {\r\n}'),(701,'contentsChanged(javax.swing.event.ListDataEvent)','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler.contentsChanged(javax.swing.event.ListDataEvent)','86','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler','public void contentsChanged(ListDataEvent e) {\r\n    repaint();\r\n}'),(702,'intervalAdded(javax.swing.event.ListDataEvent)','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler.intervalAdded(javax.swing.event.ListDataEvent)','86','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler','public void intervalAdded(ListDataEvent e) {\r\n    repaint();\r\n}'),(703,'intervalRemoved(javax.swing.event.ListDataEvent)','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler.intervalRemoved(javax.swing.event.ListDataEvent)','86','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler','public void intervalRemoved(ListDataEvent e) {\r\n    repaint();\r\n}'),(704,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler.propertyChange(java.beans.PropertyChangeEvent)','86','org.jhotdraw.color.JHarmonicColorWheel$ModelHandler','public void propertyChange(PropertyChangeEvent evt) {\r\n    String name = evt.getPropertyName();\r\n    if (name == (HarmonicColorModel.COLOR_SYSTEM_PROPERTY)) {\r\n        model.setColorSystem(harmonicModel.getColorSystem());\r\n        model.setComponentValue(1, 1.0F);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n        colorWheelImage = null;\r\n    }\r\n    repaint();\r\n}'),(705,'-init-()','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.-init-()','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','MouseHandler() {\r\n}'),(706,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mouseClicked(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mouseClicked(MouseEvent e) {\r\n}'),(707,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mouseDragged(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mouseDragged(MouseEvent e) {\r\n    update(e);\r\n}'),(708,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mouseEntered(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mouseEntered(MouseEvent e) {\r\n}'),(709,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mouseExited(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mouseExited(MouseEvent e) {\r\n}'),(710,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mouseMoved(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mouseMoved(MouseEvent e) {\r\n}'),(711,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mousePressed(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mousePressed(MouseEvent e) {\r\n    int x = e.getX();\r\n    int y = e.getY();\r\n    int closestIndex = -1;\r\n    if (((harmonicModel) != null) && ((harmonicModel.size()) > 0)) {\r\n        int closestError = Integer.MAX_VALUE;\r\n        for (int i = 0, n = harmonicModel.size(); i < n; i++) {\r\n            CompositeColor c = harmonicModel.get(i);\r\n            if (c != null) {\r\n                Point p = getColorLocation(harmonicModel.get(i));\r\n                int error = (((p.x) - x) * ((p.x) - x)) + (((p.y) - y) * ((p.y) - y));\r\n                if (error < closestError) {\r\n                    closestIndex = i;\r\n                    closestError = error;\r\n                }\r\n            }\r\n        }\r\n        if (closestIndex != (-1)) {\r\n            if (closestError > 20) {\r\n                closestIndex = -1;\r\n            }\r\n        }\r\n    }\r\n    setSelectedIndex(closestIndex);\r\n}'),(712,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.mouseReleased(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','public void mouseReleased(MouseEvent e) {\r\n    // update(e);\r\n}'),(713,'update(java.awt.event.MouseEvent)','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler.update(java.awt.event.MouseEvent)','87','org.jhotdraw.color.JHarmonicColorWheel$MouseHandler','private void update(MouseEvent e) {\r\n    if ((selectedIndex) != (-1)) {\r\n        float[] hsb = getColorAt(e.getX(), e.getY());\r\n        hsb[1] = harmonicModel.get(selectedIndex).getComponent(1);\r\n        // if (hsb != null) {\r\n        harmonicModel.set(selectedIndex, new CompositeColor(harmonicModel.getColorSystem(), hsb));\r\n        // }\r\n        repaint();\r\n    }\r\n}'),(714,'-init-()','org.jhotdraw.color.RGBColorSystem.-init-()','89','org.jhotdraw.color.RGBColorSystem','/**\r\n * Creates a new instance.\r\n */\r\npublic RGBColorSystem() {\r\n}'),(715,'getComponentCount()','org.jhotdraw.color.RGBColorSystem.getComponentCount()','89','org.jhotdraw.color.RGBColorSystem','public int getComponentCount() {\r\n    return 3;\r\n}'),(716,'toComponents(int,int,int,float[])','org.jhotdraw.color.RGBColorSystem.toComponents(int,int,int,float[])','89','org.jhotdraw.color.RGBColorSystem','public float[] toComponents(int r, int g, int b, float[] components) {\r\n    if ((components == null) || ((components.length) != 3)) {\r\n        components = new float[3];\r\n    }\r\n    components[0] = r / 255.0F;\r\n    components[1] = g / 255.0F;\r\n    components[2] = b / 255.0F;\r\n    return components;\r\n}'),(717,'toRGB(float[])','org.jhotdraw.color.RGBColorSystem.toRGB(float[])','89','org.jhotdraw.color.RGBColorSystem','public int toRGB(float... components) {\r\n    return ((-16777216 | (((int) ((components[0]) * 255)) << 16)) | (((int) ((components[1]) * 255)) << 8)) | ((int) ((components[2]) * 255));\r\n}'),(718,'-init-(int,float,int,int[])','org.jhotdraw.color.SimpleHarmonicRule.-init-(int,float,int,int[])','90','org.jhotdraw.color.SimpleHarmonicRule','public SimpleHarmonicRule(int componentIndex, float difference, int baseIndex, int... derivedIndices) {\r\n    this.componentIndex = componentIndex;\r\n    this.difference = difference;\r\n    this.baseIndex = baseIndex;\r\n    this.derivedIndices = derivedIndices;\r\n}'),(719,'apply(org.jhotdraw.color.HarmonicColorModel)','org.jhotdraw.color.SimpleHarmonicRule.apply(org.jhotdraw.color.HarmonicColorModel)','90','org.jhotdraw.color.SimpleHarmonicRule','public void apply(HarmonicColorModel model) {\r\n    if ((derivedIndices) != null) {\r\n        CompositeColor baseColor = model.get(getBaseIndex());\r\n        if (baseColor != null) {\r\n            float[] derivedComponents = null;\r\n            for (int i = 0; i < (derivedIndices.length); i++) {\r\n                derivedComponents = baseColor.getComponents(derivedComponents);\r\n                derivedComponents[componentIndex] = (baseColor.getComponent(componentIndex)) + ((difference) * (i + 1));\r\n                model.set(derivedIndices[i], new CompositeColor(model.getColorSystem(), derivedComponents));\r\n            }\r\n        }\r\n    }\r\n}'),(720,'colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)','org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)','90','org.jhotdraw.color.SimpleHarmonicRule','public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}'),(721,'getComponentIndex()','org.jhotdraw.color.SimpleHarmonicRule.getComponentIndex()','90','org.jhotdraw.color.SimpleHarmonicRule','public int getComponentIndex() {\r\n    return componentIndex;\r\n}'),(722,'getConstraint(float)','org.jhotdraw.color.SimpleHarmonicRule.getConstraint(float)','90','org.jhotdraw.color.SimpleHarmonicRule','public float getConstraint(float constraint) {\r\n    return constraint;\r\n}'),(723,'setComponentIndex(int)','org.jhotdraw.color.SimpleHarmonicRule.setComponentIndex(int)','90','org.jhotdraw.color.SimpleHarmonicRule','public void setComponentIndex(int newValue) {\r\n    this.componentIndex = newValue;\r\n}'),(724,'setConstraint(float)','org.jhotdraw.color.SimpleHarmonicRule.setConstraint(float)','90','org.jhotdraw.color.SimpleHarmonicRule','public void setConstraint(float constraint) {\r\n    this.difference = constraint;\r\n}'),(725,'-init-()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.-init-()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractAttributedCompositeFigure() {\r\n}'),(726,'applyAttributesTo(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.applyAttributesTo(org.jhotdraw.draw.Figure)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}'),(727,'clone()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.clone()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public AbstractAttributedCompositeFigure clone() {\r\n    AbstractAttributedCompositeFigure that = ((AbstractAttributedCompositeFigure) (super.clone()));\r\n    that.attributes = new HashMap<AttributeKey, Object>(this.attributes);\r\n    if ((this.forbiddenAttributes) != null) {\r\n        that.forbiddenAttributes = new HashSet<AttributeKey>(this.forbiddenAttributes);\r\n    }\r\n    return that;\r\n}'),(728,'drawChildren(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.drawChildren(java.awt.Graphics2D)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','protected void drawChildren(Graphics2D g) {\r\n    for (Figure child : getChildren()) {\r\n        child.draw(g);\r\n    }\r\n}'),(729,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.drawFigure(java.awt.Graphics2D)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public void drawFigure(Graphics2D g) {\r\n    drawChildren(g);\r\n    if ((AttributeKeys.FILL_COLOR.get(this)) != null) {\r\n        g.setColor(AttributeKeys.FILL_COLOR.get(this));\r\n        drawFill(g);\r\n    }\r\n    if (((AttributeKeys.STROKE_COLOR.get(this)) != null) && ((AttributeKeys.STROKE_WIDTH.get(this)) > 0.0)) {\r\n        g.setStroke(AttributeKeys.getStroke(this));\r\n        g.setColor(AttributeKeys.STROKE_COLOR.get(this));\r\n        drawStroke(g);\r\n    }\r\n    if ((AttributeKeys.TEXT_COLOR.get(this)) != null) {\r\n        if (((AttributeKeys.TEXT_SHADOW_COLOR.get(this)) != null) && ((AttributeKeys.TEXT_SHADOW_OFFSET.get(this)) != null)) {\r\n            Dimension2DDouble d = AttributeKeys.TEXT_SHADOW_OFFSET.get(this);\r\n            g.translate(d.width, d.height);\r\n            g.setColor(AttributeKeys.TEXT_SHADOW_COLOR.get(this));\r\n            drawText(g);\r\n            g.translate((-(d.width)), (-(d.height)));\r\n        }\r\n        g.setColor(AttributeKeys.TEXT_COLOR.get(this));\r\n        drawText(g);\r\n    }\r\n}'),(730,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.drawFill(java.awt.Graphics2D)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','/**\r\n * This method is called by method draw() to draw the fill\r\n * area of the figure. AttributedFigure configures the Graphics2D\r\n * object with the FILL_COLOR attribute before calling this method.\r\n * If the FILL_COLOR attribute is null, this method is not called.\r\n */\r\nprotected abstract void drawFill(Graphics2D g);'),(731,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.drawStroke(java.awt.Graphics2D)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','/**\r\n * This method is called by method draw() to draw the lines of the figure\r\n * . AttributedFigure configures the Graphics2D object with\r\n * the STROKE_COLOR attribute before calling this method.\r\n * If the STROKE_COLOR attribute is null, this method is not called.\r\n */\r\n/**\r\n * This method is called by method draw() to draw the text of the figure\r\n * . AttributedFigure configures the Graphics2D object with\r\n * the TEXT_COLOR attribute before calling this method.\r\n * If the TEXT_COLOR attribute is null, this method is not called.\r\n */\r\nprotected abstract void drawStroke(Graphics2D g);'),(732,'drawText(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.drawText(java.awt.Graphics2D)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','protected void drawText(Graphics2D g) {\r\n}'),(733,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','/**\r\n * Gets an attribute from the figure.\r\n */\r\n@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return hasAttribute(key) ? key.get(attributes) : key.getDefaultValue();\r\n}'),(734,'getAttributeKey(java.lang.String)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getAttributeKey(java.lang.String)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','protected AttributeKey getAttributeKey(String name) {\r\n    return AttributeKeys.supportedAttributeMap.get(name);\r\n}'),(735,'getAttributes()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getAttributes()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@Override\r\npublic Map<AttributeKey, Object> getAttributes() {\r\n    return new HashMap<AttributeKey, Object>(attributes);\r\n}'),(736,'getAttributesRestoreData()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getAttributesRestoreData()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@Override\r\npublic Object getAttributesRestoreData() {\r\n    LinkedList<Object> list = new LinkedList<Object>();\r\n    list.add(new HashMap<AttributeKey, Object>(getAttributes()));\r\n    for (Figure child : getChildren()) {\r\n        list.add(child.getAttributesRestoreData());\r\n    }\r\n    return list;\r\n}'),(737,'getFigureDrawBounds()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getFigureDrawBounds()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public Rectangle2D.Double getFigureDrawBounds() {\r\n    double width = (AttributeKeys.getStrokeTotalWidth(this)) / 2.0;\r\n    if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n        width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n    }\r\n    width++;\r\n    Rectangle2D.Double r = getBounds();\r\n    Geom.grow(r, width, width);\r\n    return r;\r\n}'),(738,'getStroke()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getStroke()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public Stroke getStroke() {\r\n    return AttributeKeys.getStroke(this);\r\n}'),(739,'getStrokeMiterLimitFactor()','org.jhotdraw.draw.AbstractAttributedCompositeFigure.getStrokeMiterLimitFactor()','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public double getStrokeMiterLimitFactor() {\r\n    Number value = ((Number) (getAttribute(AttributeKeys.STROKE_MITER_LIMIT)));\r\n    return value != null ? value.doubleValue() : 10.0F;\r\n}'),(740,'hasAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.hasAttribute(org.jhotdraw.draw.AttributeKey)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public boolean hasAttribute(AttributeKey key) {\r\n    return attributes.containsKey(key);\r\n}'),(741,'isAttributeEnabled(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.isAttributeEnabled(org.jhotdraw.draw.AttributeKey)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public boolean isAttributeEnabled(AttributeKey key) {\r\n    return ((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)));\r\n}'),(742,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.read(org.jhotdraw.xml.DOMInput)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readAttributes(in);\r\n}'),(743,'readAttributes(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.readAttributes(org.jhotdraw.xml.DOMInput)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    key.basicSet(this, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(744,'removeAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.removeAttribute(org.jhotdraw.draw.AttributeKey)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public <T> void removeAttribute(AttributeKey<T> key) {\r\n    if (hasAttribute(key)) {\r\n        T oldValue = getAttribute(key);\r\n        attributes.remove(key);\r\n        fireAttributeChanged(key, oldValue, key.getDefaultValue());\r\n    }\r\n}'),(745,'restoreAttributesTo(java.lang.Object)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.restoreAttributesTo(java.lang.Object)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void restoreAttributesTo(Object restoreData) {\r\n    Iterator<Object> i = ((LinkedList<Object>) (restoreData)).iterator();\r\n    attributes.clear();\r\n    setAttributes(((Map<AttributeKey, Object>) (i.next())));\r\n    for (Figure child : getChildren()) {\r\n        child.restoreAttributesTo(i.next());\r\n    }\r\n}'),(746,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\n@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        Object oldValue = attributes.put(key, newValue);\r\n        setAttributeOnChildren(key, newValue);\r\n        fireAttributeChanged(key, oldValue, newValue);\r\n    }\r\n}'),(747,'setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}'),(748,'setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','protected <T> void setAttributeOnChildren(AttributeKey<T> key, T newValue) {\r\n    for (Figure child : getChildren()) {\r\n        key.basicSet(child, newValue);\r\n    }\r\n}'),(749,'setAttributes(java.util.Map)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributes(java.util.Map)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@SuppressWarnings(\"unchecked\")\r\npublic void setAttributes(Map<AttributeKey, Object> map) {\r\n    for (Map.Entry<AttributeKey, Object> entry : map.entrySet()) {\r\n        entry.getKey().basicSet(this, entry.getValue());\r\n    }\r\n}'),(750,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.write(org.jhotdraw.xml.DOMOutput)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeAttributes(out);\r\n}'),(751,'writeAttributes(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractAttributedCompositeFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)','91','org.jhotdraw.draw.AbstractAttributedCompositeFigure','protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}'),(752,'-init-()','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.-init-()','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','AbstractAttributedDecoratedFigure() {\r\n}'),(753,'clone()','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.clone()','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public AbstractAttributedDecoratedFigure clone() {\r\n    AbstractAttributedDecoratedFigure that = ((AbstractAttributedDecoratedFigure) (super.clone()));\r\n    if ((this.decorator) != null) {\r\n        that.decorator = ((Figure) (this.decorator.clone()));\r\n    }\r\n    return that;\r\n}'),(754,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.contains(java.awt.geom.Point2D$Double)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public final boolean contains(Point2D.Double p) {\r\n    if ((decorator) != null) {\r\n        updateDecoratorBounds();\r\n        if (decorator.contains(p)) {\r\n            return true;\r\n        }\r\n    }\r\n    return figureContains(p);\r\n}'),(755,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.draw(java.awt.Graphics2D)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public final void draw(Graphics2D g) {\r\n    if ((decorator) != null) {\r\n        drawDecorator(g);\r\n    }\r\n    drawFigure(g);\r\n}'),(756,'drawDecorator(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.drawDecorator(java.awt.Graphics2D)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected void drawDecorator(Graphics2D g) {\r\n    updateDecoratorBounds();\r\n    decorator.draw(g);\r\n}'),(757,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.drawFigure(java.awt.Graphics2D)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected void drawFigure(Graphics2D g) {\r\n    super.draw(g);\r\n}'),(758,'figureContains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.figureContains(java.awt.geom.Point2D$Double)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected abstract boolean figureContains(Point2D.Double p);'),(759,'getDecorator()','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.getDecorator()','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public Figure getDecorator() {\r\n    return decorator;\r\n}'),(760,'getDrawingArea()','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.getDrawingArea()','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public final Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r = getFigureDrawingArea();\r\n    if ((decorator) != null) {\r\n        updateDecoratorBounds();\r\n        r.add(decorator.getDrawingArea());\r\n    }\r\n    return r;\r\n}'),(761,'getFigureDrawingArea()','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.getFigureDrawingArea()','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected Rectangle2D.Double getFigureDrawingArea() {\r\n    return super.getDrawingArea();\r\n}'),(762,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.read(org.jhotdraw.xml.DOMInput)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readDecorator(in);\r\n}'),(763,'readDecorator(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.readDecorator(org.jhotdraw.xml.DOMInput)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected void readDecorator(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"decorator\")) > 0) {\r\n        in.openElement(\"decorator\");\r\n        decorator = ((Figure) (in.readObject()));\r\n        in.closeElement();\r\n    } else {\r\n        decorator = null;\r\n    }\r\n}'),(764,'setDecorator(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.setDecorator(org.jhotdraw.draw.Figure)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public void setDecorator(Figure newValue) {\r\n    willChange();\r\n    decorator = newValue;\r\n    if ((decorator) != null) {\r\n        decorator.setBounds(getStartPoint(), getEndPoint());\r\n    }\r\n    changed();\r\n}'),(765,'updateDecoratorBounds()','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.updateDecoratorBounds()','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected void updateDecoratorBounds() {\r\n    if ((decorator) != null) {\r\n        Point2D.Double sp = getStartPoint();\r\n        Point2D.Double ep = getEndPoint();\r\n        Insets2D.Double decoratorInsets = AttributeKeys.DECORATOR_INSETS.get(this);\r\n        sp.x -= decoratorInsets.left;\r\n        sp.y -= decoratorInsets.top;\r\n        ep.x += decoratorInsets.right;\r\n        ep.y += decoratorInsets.bottom;\r\n        decorator.setBounds(sp, ep);\r\n    }\r\n}'),(766,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.write(org.jhotdraw.xml.DOMOutput)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeDecorator(out);\r\n}'),(767,'writeDecorator(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractAttributedDecoratedFigure.writeDecorator(org.jhotdraw.xml.DOMOutput)','92','org.jhotdraw.draw.AbstractAttributedDecoratedFigure','protected void writeDecorator(DOMOutput out) throws IOException {\r\n    if ((decorator) != null) {\r\n        out.openElement(\"decorator\");\r\n        out.writeObject(decorator);\r\n        out.closeElement();\r\n    }\r\n}'),(768,'-init-()','org.jhotdraw.draw.AbstractAttributedFigure.-init-()','93','org.jhotdraw.draw.AbstractAttributedFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractAttributedFigure() {\r\n}'),(769,'applyAttributesTo(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractAttributedFigure.applyAttributesTo(org.jhotdraw.draw.Figure)','93','org.jhotdraw.draw.AbstractAttributedFigure','/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}'),(770,'clone()','org.jhotdraw.draw.AbstractAttributedFigure.clone()','93','org.jhotdraw.draw.AbstractAttributedFigure','public AbstractAttributedFigure clone() {\r\n    AbstractAttributedFigure that = ((AbstractAttributedFigure) (super.clone()));\r\n    that.attributes = new HashMap<AttributeKey, Object>(this.attributes);\r\n    if ((this.forbiddenAttributes) != null) {\r\n        that.forbiddenAttributes = new HashSet<AttributeKey>(this.forbiddenAttributes);\r\n    }\r\n    return that;\r\n}'),(771,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedFigure.draw(java.awt.Graphics2D)','93','org.jhotdraw.draw.AbstractAttributedFigure','public void draw(Graphics2D g) {\r\n    if ((AttributeKeys.FILL_COLOR.get(this)) != null) {\r\n        g.setColor(AttributeKeys.FILL_COLOR.get(this));\r\n        drawFill(g);\r\n    }\r\n    if (((AttributeKeys.STROKE_COLOR.get(this)) != null) && ((AttributeKeys.STROKE_WIDTH.get(this)) > 0.0)) {\r\n        g.setStroke(AttributeKeys.getStroke(this));\r\n        g.setColor(AttributeKeys.STROKE_COLOR.get(this));\r\n        drawStroke(g);\r\n    }\r\n    if ((AttributeKeys.TEXT_COLOR.get(this)) != null) {\r\n        if (((AttributeKeys.TEXT_SHADOW_COLOR.get(this)) != null) && ((AttributeKeys.TEXT_SHADOW_OFFSET.get(this)) != null)) {\r\n            Dimension2DDouble d = AttributeKeys.TEXT_SHADOW_OFFSET.get(this);\r\n            g.translate(d.width, d.height);\r\n            g.setColor(AttributeKeys.TEXT_SHADOW_COLOR.get(this));\r\n            drawText(g);\r\n            g.translate((-(d.width)), (-(d.height)));\r\n        }\r\n        g.setColor(AttributeKeys.TEXT_COLOR.get(this));\r\n        drawText(g);\r\n    }\r\n}'),(772,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedFigure.drawFill(java.awt.Graphics2D)','93','org.jhotdraw.draw.AbstractAttributedFigure','/**\r\n * This method is called by method draw() to draw the fill\r\n * area of the figure. AbstractAttributedFigure configures the Graphics2D\r\n * object with the FILL_COLOR attribute before calling this method.\r\n * If the FILL_COLOR attribute is null, this method is not called.\r\n */\r\nprotected abstract void drawFill(Graphics2D g);'),(773,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedFigure.drawStroke(java.awt.Graphics2D)','93','org.jhotdraw.draw.AbstractAttributedFigure','/**\r\n * This method is called by method draw() to draw the lines of the figure\r\n * . AttributedFigure configures the Graphics2D object with\r\n * the STROKE_COLOR attribute before calling this method.\r\n * If the STROKE_COLOR attribute is null, this method is not called.\r\n */\r\n/**\r\n * This method is called by method draw() to draw the text of the figure\r\n * . AbstractAttributedFigure configures the Graphics2D object with\r\n * the TEXT_COLOR attribute before calling this method.\r\n * If the TEXT_COLOR attribute is null, this method is not called.\r\n */\r\nprotected abstract void drawStroke(Graphics2D g);'),(774,'drawText(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractAttributedFigure.drawText(java.awt.Graphics2D)','93','org.jhotdraw.draw.AbstractAttributedFigure','protected void drawText(Graphics2D g) {\r\n}'),(775,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedFigure.getAttribute(org.jhotdraw.draw.AttributeKey)','93','org.jhotdraw.draw.AbstractAttributedFigure','/**\r\n * Gets an attribute from the figure.\r\n */\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return hasAttribute(key) ? key.get(attributes) : key.getDefaultValue();\r\n}'),(776,'getAttributeKey(java.lang.String)','org.jhotdraw.draw.AbstractAttributedFigure.getAttributeKey(java.lang.String)','93','org.jhotdraw.draw.AbstractAttributedFigure','protected AttributeKey getAttributeKey(String name) {\r\n    return AttributeKeys.supportedAttributeMap.get(name);\r\n}'),(777,'getAttributes()','org.jhotdraw.draw.AbstractAttributedFigure.getAttributes()','93','org.jhotdraw.draw.AbstractAttributedFigure','public Map<AttributeKey, Object> getAttributes() {\r\n    return new HashMap<AttributeKey, Object>(attributes);\r\n}'),(778,'getAttributesRestoreData()','org.jhotdraw.draw.AbstractAttributedFigure.getAttributesRestoreData()','93','org.jhotdraw.draw.AbstractAttributedFigure','public Object getAttributesRestoreData() {\r\n    return getAttributes();\r\n}'),(779,'getDrawingArea()','org.jhotdraw.draw.AbstractAttributedFigure.getDrawingArea()','93','org.jhotdraw.draw.AbstractAttributedFigure','public Rectangle2D.Double getDrawingArea() {\r\n    double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n    double width = strokeTotalWidth / 2.0;\r\n    if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n        width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n    } else\r\n        if ((AttributeKeys.STROKE_CAP.get(this)) != (BasicStroke.CAP_BUTT)) {\r\n            width += strokeTotalWidth * 2;\r\n        }\r\n\r\n    width++;\r\n    Rectangle2D.Double r = getBounds();\r\n    Geom.grow(r, width, width);\r\n    return r;\r\n}'),(780,'getStroke()','org.jhotdraw.draw.AbstractAttributedFigure.getStroke()','93','org.jhotdraw.draw.AbstractAttributedFigure','public Stroke getStroke() {\r\n    return AttributeKeys.getStroke(this);\r\n}'),(781,'getStrokeMiterLimitFactor()','org.jhotdraw.draw.AbstractAttributedFigure.getStrokeMiterLimitFactor()','93','org.jhotdraw.draw.AbstractAttributedFigure','public double getStrokeMiterLimitFactor() {\r\n    Number value = ((Number) (getAttribute(AttributeKeys.STROKE_MITER_LIMIT)));\r\n    return value != null ? value.doubleValue() : 10.0F;\r\n}'),(782,'hasAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedFigure.hasAttribute(org.jhotdraw.draw.AttributeKey)','93','org.jhotdraw.draw.AbstractAttributedFigure','public boolean hasAttribute(AttributeKey key) {\r\n    return attributes.containsKey(key);\r\n}'),(783,'isAttributeEnabled(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedFigure.isAttributeEnabled(org.jhotdraw.draw.AttributeKey)','93','org.jhotdraw.draw.AbstractAttributedFigure','public boolean isAttributeEnabled(AttributeKey key) {\r\n    return ((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)));\r\n}'),(784,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractAttributedFigure.read(org.jhotdraw.xml.DOMInput)','93','org.jhotdraw.draw.AbstractAttributedFigure','public void read(DOMInput in) throws IOException {\r\n    double x = in.getAttribute(\"x\", 0.0);\r\n    double y = in.getAttribute(\"y\", 0.0);\r\n    double w = in.getAttribute(\"w\", 0.0);\r\n    double h = in.getAttribute(\"h\", 0.0);\r\n    setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    readAttributes(in);\r\n}'),(785,'readAttributes(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractAttributedFigure.readAttributes(org.jhotdraw.xml.DOMInput)','93','org.jhotdraw.draw.AbstractAttributedFigure','@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    setAttribute(key, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(786,'removeAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractAttributedFigure.removeAttribute(org.jhotdraw.draw.AttributeKey)','93','org.jhotdraw.draw.AbstractAttributedFigure','public <T> void removeAttribute(AttributeKey<T> key) {\r\n    if (hasAttribute(key)) {\r\n        T oldValue = key.get(this);\r\n        attributes.remove(key);\r\n        fireAttributeChanged(key, oldValue, key.getDefaultValue());\r\n    }\r\n}'),(787,'restoreAttributesTo(java.lang.Object)','org.jhotdraw.draw.AbstractAttributedFigure.restoreAttributesTo(java.lang.Object)','93','org.jhotdraw.draw.AbstractAttributedFigure','@SuppressWarnings(\"unchecked\")\r\npublic void restoreAttributesTo(Object restoreData) {\r\n    attributes.clear();\r\n    setAttributes(((HashMap<AttributeKey, Object>) (restoreData)));\r\n}'),(788,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.AbstractAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','93','org.jhotdraw.draw.AbstractAttributedFigure','/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        T oldValue = ((T) (key.put(attributes, newValue)));\r\n        fireAttributeChanged(key, oldValue, newValue);\r\n    }\r\n}'),(789,'setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)','org.jhotdraw.draw.AbstractAttributedFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)','93','org.jhotdraw.draw.AbstractAttributedFigure','public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}'),(790,'setAttributes(java.util.Map)','org.jhotdraw.draw.AbstractAttributedFigure.setAttributes(java.util.Map)','93','org.jhotdraw.draw.AbstractAttributedFigure','@SuppressWarnings(\"unchecked\")\r\npublic void setAttributes(Map<AttributeKey, Object> map) {\r\n    for (Map.Entry<AttributeKey, Object> entry : map.entrySet()) {\r\n        setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n}'),(791,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractAttributedFigure.write(org.jhotdraw.xml.DOMOutput)','93','org.jhotdraw.draw.AbstractAttributedFigure','public void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double r = getBounds();\r\n    out.addAttribute(\"x\", r.x);\r\n    out.addAttribute(\"y\", r.y);\r\n    out.addAttribute(\"w\", r.width);\r\n    out.addAttribute(\"h\", r.height);\r\n    writeAttributes(out);\r\n}'),(792,'writeAttributes(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractAttributedFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)','93','org.jhotdraw.draw.AbstractAttributedFigure','protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}'),(793,'-init-()','org.jhotdraw.draw.AbstractCompositeFigure.-init-()','95','org.jhotdraw.draw.AbstractCompositeFigure','EventHandler() {\r\n}'),(794,'add(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.add(int,org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void add(int index, Figure figure) {\r\n    basicAdd(index, figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n    fireFigureAdded(figure, index);\r\n    invalidate();\r\n}'),(795,'add(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.add(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public boolean add(Figure figure) {\r\n    add(getChildCount(), figure);\r\n    return true;\r\n}'),(796,'addAll(int,java.util.Collection)','org.jhotdraw.draw.AbstractCompositeFigure.addAll(int,java.util.Collection)','95','org.jhotdraw.draw.AbstractCompositeFigure','public final void addAll(int index, Collection<? extends Figure> figures) {\r\n    for (Figure f : figures) {\r\n        basicAdd((index++), f);\r\n        if ((getDrawing()) != null) {\r\n            f.addNotify(getDrawing());\r\n        }\r\n        fireFigureAdded(f, index);\r\n    }\r\n    invalidate();\r\n}'),(797,'addAll(java.util.Collection)','org.jhotdraw.draw.AbstractCompositeFigure.addAll(java.util.Collection)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void addAll(Collection<? extends Figure> figures) {\r\n    addAll(getChildCount(), figures);\r\n}'),(798,'addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','org.jhotdraw.draw.AbstractCompositeFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void addCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.add(CompositeFigureListener.class, listener);\r\n}'),(799,'addNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.AbstractCompositeFigure.addNotify(org.jhotdraw.draw.Drawing)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    for (Figure child : getChildren()) {\r\n        child.addNotify(drawing);\r\n    }\r\n}'),(800,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    figure.addFigureListener(eventHandler);\r\n}'),(801,'basicAdd(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.basicAdd(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void basicAdd(Figure figure) {\r\n    basicAdd(getChildCount(), figure);\r\n}'),(802,'basicAddAll(int,java.util.Collection)','org.jhotdraw.draw.AbstractCompositeFigure.basicAddAll(int,java.util.Collection)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void basicAddAll(int index, Collection<? extends Figure> newFigures) {\r\n    for (Figure f : newFigures) {\r\n        basicAdd((index++), f);\r\n    }\r\n}'),(803,'basicRemove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.basicRemove(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public int basicRemove(Figure child) {\r\n    int index = children.indexOf(child);\r\n    if (index != (-1)) {\r\n        basicRemoveChild(index);\r\n    }\r\n    return index;\r\n}'),(804,'basicRemoveAll(java.util.Collection)','org.jhotdraw.draw.AbstractCompositeFigure.basicRemoveAll(java.util.Collection)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Removes all children.\r\n *\r\n * @see #add\r\n */\r\npublic void basicRemoveAll(Collection<? extends Figure> figures) {\r\n    for (Figure f : figures) {\r\n        basicRemove(f);\r\n    }\r\n}'),(805,'basicRemoveAllChildren()','org.jhotdraw.draw.AbstractCompositeFigure.basicRemoveAllChildren()','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Removes all children.\r\n *\r\n * @see #add\r\n */\r\npublic void basicRemoveAllChildren() {\r\n    for (Figure f : new LinkedList<Figure>(getChildren())) {\r\n        basicRemove(f);\r\n    }\r\n}'),(806,'basicRemoveChild(int)','org.jhotdraw.draw.AbstractCompositeFigure.basicRemoveChild(int)','95','org.jhotdraw.draw.AbstractCompositeFigure','public Figure basicRemoveChild(int index) {\r\n    Figure figure = children.remove(index);\r\n    figure.removeFigureListener(eventHandler);\r\n    invalidate();\r\n    return figure;\r\n}'),(807,'bringToFront(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.bringToFront(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Sends a figure to the front of the drawing.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing\r\n */\r\npublic synchronized void bringToFront(Figure figure) {\r\n    if ((basicRemove(figure)) != (-1)) {\r\n        basicAdd(figure);\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(808,'clone()','org.jhotdraw.draw.AbstractCompositeFigure.clone()','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\npublic AbstractCompositeFigure clone() {\r\n    AbstractCompositeFigure that = ((AbstractCompositeFigure) (super.clone()));\r\n    that.children = new ArrayList<Figure>();\r\n    that.eventHandler = that.createEventHandler();\r\n    for (Figure thisChild : this.children) {\r\n        Figure thatChild = ((Figure) (thisChild.clone()));\r\n        that.children.add(thatChild);\r\n        thatChild.addFigureListener(that.eventHandler);\r\n    }\r\n    return that;\r\n}'),(809,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractCompositeFigure.contains(java.awt.geom.Point2D$Double)','95','org.jhotdraw.draw.AbstractCompositeFigure','public boolean contains(Point2D.Double p) {\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            InternalError error = new InternalError(ex.getMessage());\r\n            error.initCause(ex);\r\n            throw error;\r\n        }\r\n    }\r\n    if (getDrawingArea().contains(p)) {\r\n        for (Figure child : getChildrenFrontToBack()) {\r\n            if ((child.isVisible()) && (child.contains(p))) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}'),(810,'contains(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.contains(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(811,'createEventHandler()','org.jhotdraw.draw.AbstractCompositeFigure.createEventHandler()','95','org.jhotdraw.draw.AbstractCompositeFigure','protected AbstractCompositeFigure.EventHandler createEventHandler() {\r\n    return new AbstractCompositeFigure.EventHandler();\r\n}'),(812,'createHandles(int)','org.jhotdraw.draw.AbstractCompositeFigure.createHandles(int)','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    if (detailLevel == 0) {\r\n        handles.add(new BoundsOutlineHandle(this, true, false));\r\n        TransformHandleKit.addScaleMoveTransformHandles(this, handles);\r\n    }\r\n    return handles;\r\n}'),(813,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractCompositeFigure.draw(java.awt.Graphics2D)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void draw(Graphics2D g) {\r\n    Rectangle2D clipBounds = g.getClipBounds();\r\n    if (clipBounds != null) {\r\n        for (Figure child : getChildren()) {\r\n            if ((child.isVisible()) && (child.getDrawingArea().intersects(clipBounds))) {\r\n                child.draw(g);\r\n            }\r\n        }\r\n    } else {\r\n        for (Figure child : getChildren()) {\r\n            if (child.isVisible()) {\r\n                child.draw(g);\r\n            }\r\n        }\r\n    }\r\n}'),(814,'findChild(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractCompositeFigure.findChild(java.awt.geom.Point2D$Double)','95','org.jhotdraw.draw.AbstractCompositeFigure','public Figure findChild(Point2D.Double p) {\r\n    if (getBounds().contains(p)) {\r\n        Figure found = null;\r\n        for (Figure child : getChildrenFrontToBack()) {\r\n            if ((child.isVisible()) && (child.contains(p))) {\r\n                return child;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(815,'findChildIndex(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractCompositeFigure.findChildIndex(java.awt.geom.Point2D$Double)','95','org.jhotdraw.draw.AbstractCompositeFigure','public int findChildIndex(Point2D.Double p) {\r\n    Figure child = findChild(p);\r\n    return child == null ? -1 : children.indexOf(child);\r\n}'),(816,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractCompositeFigure.findFigureInside(java.awt.geom.Point2D$Double)','95','org.jhotdraw.draw.AbstractCompositeFigure','public Figure findFigureInside(Point2D.Double p) {\r\n    if (getDrawingArea().contains(p)) {\r\n        Figure found = null;\r\n        for (Figure child : getChildrenFrontToBack()) {\r\n            if (child.isVisible()) {\r\n                found = child.findFigureInside(p);\r\n                if (found != null) {\r\n                    return found;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(817,'fireFigureAdded(org.jhotdraw.draw.Figure,int)','org.jhotdraw.draw.AbstractCompositeFigure.fireFigureAdded(org.jhotdraw.draw.Figure,int)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n            }\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n        }\r\n    }\r\n}'),(818,'fireFigureRemoved(org.jhotdraw.draw.Figure,int)','org.jhotdraw.draw.AbstractCompositeFigure.fireFigureRemoved(org.jhotdraw.draw.Figure,int)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n            }\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n        }\r\n    }\r\n}'),(819,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.AbstractCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)','95','org.jhotdraw.draw.AbstractCompositeFigure','public <T> T getAttribute(AttributeKey<T> name) {\r\n    return null;\r\n}'),(820,'getAttributes()','org.jhotdraw.draw.AbstractCompositeFigure.getAttributes()','95','org.jhotdraw.draw.AbstractCompositeFigure','public Map<AttributeKey, Object> getAttributes() {\r\n    return new HashMap<AttributeKey, Object>();\r\n}'),(821,'getAttributesRestoreData()','org.jhotdraw.draw.AbstractCompositeFigure.getAttributesRestoreData()','95','org.jhotdraw.draw.AbstractCompositeFigure','public Object getAttributesRestoreData() {\r\n    LinkedList<Object> data = new LinkedList<Object>();\r\n    for (Figure child : getChildren()) {\r\n        data.add(child.getAttributesRestoreData());\r\n    }\r\n    return data;\r\n}'),(822,'getBounds()','org.jhotdraw.draw.AbstractCompositeFigure.getBounds()','95','org.jhotdraw.draw.AbstractCompositeFigure','public Rectangle2D.Double getBounds() {\r\n    if ((cachedBounds) == null) {\r\n        if ((getChildCount()) == 0) {\r\n            cachedBounds = new Rectangle2D.Double();\r\n        } else {\r\n            for (Figure f : children) {\r\n                if (((cachedBounds) == null) || (cachedBounds.isEmpty())) {\r\n                    cachedBounds = f.getBounds();\r\n                } else {\r\n                    cachedBounds.add(f.getBounds());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedBounds.clone()));\r\n}'),(823,'getChild(int)','org.jhotdraw.draw.AbstractCompositeFigure.getChild(int)','95','org.jhotdraw.draw.AbstractCompositeFigure','public Figure getChild(int index) {\r\n    return children.get(index);\r\n}'),(824,'getChildCount()','org.jhotdraw.draw.AbstractCompositeFigure.getChildCount()','95','org.jhotdraw.draw.AbstractCompositeFigure','public int getChildCount() {\r\n    return children.size();\r\n}'),(825,'getChildren()','org.jhotdraw.draw.AbstractCompositeFigure.getChildren()','95','org.jhotdraw.draw.AbstractCompositeFigure','public List<Figure> getChildren() {\r\n    return Collections.unmodifiableList(children);\r\n}'),(826,'getChildrenFrontToBack()','org.jhotdraw.draw.AbstractCompositeFigure.getChildrenFrontToBack()','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Returns an iterator to iterate in\r\n * Z-order front to back over the children.\r\n */\r\npublic List<Figure> getChildrenFrontToBack() {\r\n    return (children.size()) == 0 ? new LinkedList<Figure>() : new ReversedList<Figure>(getChildren());\r\n}'),(827,'getDecomposition()','org.jhotdraw.draw.AbstractCompositeFigure.getDecomposition()','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\npublic Collection<Figure> getDecomposition() {\r\n    LinkedList<Figure> list = new LinkedList<Figure>();\r\n    list.add(this);\r\n    list.addAll(getChildren());\r\n    return list;\r\n}'),(828,'getDrawingArea()','org.jhotdraw.draw.AbstractCompositeFigure.getDrawingArea()','95','org.jhotdraw.draw.AbstractCompositeFigure','public Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        if ((getChildCount()) == 0) {\r\n            cachedDrawingArea = new Rectangle2D.Double();\r\n        } else {\r\n            for (Figure f : children) {\r\n                if (((cachedDrawingArea) == null) || (cachedDrawingArea.isEmpty())) {\r\n                    cachedDrawingArea = f.getDrawingArea();\r\n                } else {\r\n                    cachedDrawingArea.add(f.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(829,'getLayouter()','org.jhotdraw.draw.AbstractCompositeFigure.getLayouter()','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Get a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @return layout strategy used by this figure\r\n */\r\npublic Layouter getLayouter() {\r\n    return layouter;\r\n}'),(830,'getPreferredSize()','org.jhotdraw.draw.AbstractCompositeFigure.getPreferredSize()','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\npublic Dimension2DDouble getPreferredSize() {\r\n    if ((this.layouter) != null) {\r\n        Rectangle2D.Double r = layouter.calculateLayout(this, getStartPoint(), getEndPoint());\r\n        return new Dimension2DDouble(r.width, r.height);\r\n    } else {\r\n        return super.getPreferredSize();\r\n    }\r\n}'),(831,'getTransformRestoreData()','org.jhotdraw.draw.AbstractCompositeFigure.getTransformRestoreData()','95','org.jhotdraw.draw.AbstractCompositeFigure','public Object getTransformRestoreData() {\r\n    LinkedList<Object> list = new LinkedList<Object>();\r\n    for (Figure child : getChildren()) {\r\n        list.add(child.getTransformRestoreData());\r\n    }\r\n    return list;\r\n}'),(832,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.indexOf(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public int indexOf(Figure child) {\r\n    return children.indexOf(child);\r\n}'),(833,'invalidate()','org.jhotdraw.draw.AbstractCompositeFigure.invalidate()','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\nprotected void invalidate() {\r\n    cachedBounds = null;\r\n    cachedDrawingArea = null;\r\n}'),(834,'layout()','org.jhotdraw.draw.AbstractCompositeFigure.layout()','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * A layout algorithm is used to define how the child components\r\n * should be laid out in relation to each other. The task for\r\n * layouting the child components for presentation is delegated\r\n * to a Layouter which can be plugged in at runtime.\r\n */\r\npublic void layout() {\r\n    if ((getLayouter()) != null) {\r\n        Rectangle2D.Double bounds = getBounds();\r\n        Point2D.Double p = new Point2D.Double(bounds.x, bounds.y);\r\n        Rectangle2D.Double r = getLayouter().layout(this, p, p);\r\n        setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n        invalidate();\r\n    }\r\n}'),(835,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractCompositeFigure.read(org.jhotdraw.xml.DOMInput)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void read(DOMInput in) throws IOException {\r\n    in.openElement(\"children\");\r\n    for (int i = 0; i < (in.getElementCount()); i++) {\r\n        basicAdd(((Figure) (in.readObject(i))));\r\n    }\r\n    in.closeElement();\r\n}'),(836,'remove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.remove(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','public boolean remove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index == (-1)) {\r\n        return false;\r\n    } else {\r\n        basicRemoveChild(index);\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n        fireFigureRemoved(figure, index);\r\n        return true;\r\n    }\r\n}'),(837,'removeAll(java.util.Collection)','org.jhotdraw.draw.AbstractCompositeFigure.removeAll(java.util.Collection)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Removes all specified children.\r\n *\r\n * @see #add\r\n */\r\npublic void removeAll(Collection<? extends Figure> figures) {\r\n    for (Figure f : figures) {\r\n        remove(f);\r\n    }\r\n}'),(838,'removeAllChildren()','org.jhotdraw.draw.AbstractCompositeFigure.removeAllChildren()','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Removes all children.\r\n *\r\n * @see #add\r\n */\r\npublic void removeAllChildren() {\r\n    willChange();\r\n    for (Figure f : new LinkedList<Figure>(getChildren())) {\r\n        if ((getDrawing()) != null) {\r\n            f.removeNotify(getDrawing());\r\n        }\r\n        int index = basicRemove(f);\r\n    }\r\n    changed();\r\n}'),(839,'removeChild(int)','org.jhotdraw.draw.AbstractCompositeFigure.removeChild(int)','95','org.jhotdraw.draw.AbstractCompositeFigure','public Figure removeChild(int index) {\r\n    Figure removed = basicRemoveChild(index);\r\n    if ((getDrawing()) != null) {\r\n        removed.removeNotify(getDrawing());\r\n    }\r\n    return removed;\r\n}'),(840,'removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','org.jhotdraw.draw.AbstractCompositeFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void removeCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.remove(CompositeFigureListener.class, listener);\r\n}'),(841,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.AbstractCompositeFigure.removeNotify(org.jhotdraw.draw.Drawing)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void removeNotify(Drawing drawing) {\r\n    super.removeNotify(drawing);\r\n    // Copy children collection to avoid concurrent modification exception\r\n    for (Figure child : new LinkedList<Figure>(getChildren())) {\r\n        child.removeNotify(drawing);\r\n    }\r\n}'),(842,'restoreAttributesTo(java.lang.Object)','org.jhotdraw.draw.AbstractCompositeFigure.restoreAttributesTo(java.lang.Object)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void restoreAttributesTo(Object newData) {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Iterator<Object> data = ((LinkedList<Object>) (newData)).iterator();\r\n    for (Figure child : getChildren()) {\r\n        child.restoreAttributesTo(data.next());\r\n    }\r\n}'),(843,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.AbstractCompositeFigure.restoreTransformTo(java.lang.Object)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void restoreTransformTo(Object geometry) {\r\n    LinkedList list = ((LinkedList) (geometry));\r\n    Iterator i = list.iterator();\r\n    for (Figure child : getChildren()) {\r\n        child.restoreTransformTo(i.next());\r\n    }\r\n    invalidate();\r\n}'),(844,'sendToBack(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractCompositeFigure.sendToBack(org.jhotdraw.draw.Figure)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Sends a figure to the back of the composite figure.\r\n *\r\n * @param figure\r\n * 		that is part of this composite figure\r\n */\r\npublic synchronized void sendToBack(Figure figure) {\r\n    if ((basicRemove(figure)) != (-1)) {\r\n        basicAdd(0, figure);\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(845,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.AbstractCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','95','org.jhotdraw.draw.AbstractCompositeFigure','public <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    for (Figure child : getChildren()) {\r\n        child.setAttribute(key, value);\r\n    }\r\n    invalidate();\r\n}'),(846,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractCompositeFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double oldBounds = getBounds();\r\n    Rectangle2D.Double newBounds = new Rectangle2D.Double(Math.min(anchor.x, lead.x), Math.min(anchor.y, lead.y), Math.abs(((anchor.x) - (lead.x))), Math.abs(((anchor.y) - (lead.y))));\r\n    double sx = (newBounds.width) / (oldBounds.width);\r\n    double sy = (newBounds.height) / (oldBounds.height);\r\n    AffineTransform tx = new AffineTransform();\r\n    tx.translate((-(oldBounds.x)), (-(oldBounds.y)));\r\n    if (((((((!(Double.isNaN(sx))) && (!(Double.isNaN(sy)))) && (!(Double.isInfinite(sx)))) && (!(Double.isInfinite(sy)))) && ((sx != 1.0) || (sy != 1.0))) && (!(sx < 1.0E-4))) && (!(sy < 1.0E-4))) {\r\n        transform(tx);\r\n        tx.setToIdentity();\r\n        tx.scale(sx, sy);\r\n        transform(tx);\r\n        tx.setToIdentity();\r\n    }\r\n    tx.translate(newBounds.x, newBounds.y);\r\n    transform(tx);\r\n}'),(847,'setLayouter(org.jhotdraw.draw.Layouter)','org.jhotdraw.draw.AbstractCompositeFigure.setLayouter(org.jhotdraw.draw.Layouter)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Set a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation. It is a good idea to set\r\n * the Layouter in the protected initialize() method\r\n * so it can be recreated if a GraphicalCompositeFigure is\r\n * read and restored from a StorableInput stream.\r\n *\r\n * @param newLayouter	encapsulation\r\n * 		of a layout algorithm.\r\n */\r\npublic void setLayouter(Layouter newLayouter) {\r\n    this.layouter = newLayouter;\r\n}'),(848,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.AbstractCompositeFigure.transform(java.awt.geom.AffineTransform)','95','org.jhotdraw.draw.AbstractCompositeFigure','/**\r\n * Transforms the figure.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    for (Figure f : getChildren()) {\r\n        f.transform(tx);\r\n    }\r\n    invalidate();\r\n    // invalidate();\r\n}'),(849,'validate()','org.jhotdraw.draw.AbstractCompositeFigure.validate()','95','org.jhotdraw.draw.AbstractCompositeFigure','@Override\r\nprotected void validate() {\r\n    super.validate();\r\n    layout();\r\n}'),(850,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractCompositeFigure.write(org.jhotdraw.xml.DOMOutput)','95','org.jhotdraw.draw.AbstractCompositeFigure','public void write(DOMOutput out) throws IOException {\r\n    out.openElement(\"children\");\r\n    for (Figure child : getChildren()) {\r\n        out.writeObject(child);\r\n    }\r\n    out.closeElement();\r\n}'),(851,'-init-()','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.-init-()','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','EventHandler() {\r\n}'),(852,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    fireAreaInvalidated(e);\r\n}'),(853,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    invalidate();\r\n}'),(854,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureAdded(org.jhotdraw.draw.FigureEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','@Override\r\npublic void figureAdded(FigureEvent e) {\r\n    invalidate();\r\n}'),(855,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    invalidate();\r\n    fireFigureChanged(e.getInvalidatedArea());\r\n}'),(856,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','@Override\r\npublic void figureRemoved(FigureEvent e) {\r\n    invalidate();\r\n}'),(857,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    remove(e.getFigure());\r\n}'),(858,'undoableEditHappened(javax.swing.event.UndoableEditEvent)','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.undoableEditHappened(javax.swing.event.UndoableEditEvent)','94','org.jhotdraw.draw.AbstractCompositeFigure$EventHandler','public void undoableEditHappened(UndoableEditEvent e) {\r\n    fireUndoableEditHappened(e.getEdit());\r\n}'),(859,'-init-(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractConnectionHandle.-init-(org.jhotdraw.draw.ConnectionFigure)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Initializes the change connection handle.\r\n */\r\nprotected AbstractConnectionHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}'),(860,'basicGetBounds()','org.jhotdraw.draw.AbstractConnectionHandle.basicGetBounds()','96','org.jhotdraw.draw.AbstractConnectionHandle','protected Rectangle basicGetBounds() {\r\n    // if (connection.getPointCount() == 0) return new Rectangle(0, 0, getHandlesize(), getHandlesize());\r\n    Point center = view.drawingToView(getLocation());\r\n    return new Rectangle(((center.x) - ((getHandlesize()) / 2)), ((center.y) - ((getHandlesize()) / 2)), getHandlesize(), getHandlesize());\r\n}'),(861,'canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.AbstractConnectionHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','96','org.jhotdraw.draw.AbstractConnectionHandle','protected abstract boolean canConnect(Connector existingEnd, Connector targetEnd);'),(862,'connect(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.AbstractConnectionHandle.connect(org.jhotdraw.draw.Connector)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Connect the connection with the given figure.\r\n */\r\nprotected abstract void connect(Connector c);'),(863,'createSecondaryHandles()','org.jhotdraw.draw.AbstractConnectionHandle.createSecondaryHandles()','96','org.jhotdraw.draw.AbstractConnectionHandle','@Override\r\npublic final Collection<Handle> createSecondaryHandles() {\r\n    LinkedList<Handle> list = new LinkedList<Handle>();\r\n    if (((((ConnectionFigure) (getOwner())).getLiner()) == null) && ((savedLiner) == null)) {\r\n        int index = getBezierNodeIndex();\r\n        BezierFigure f = getBezierFigure();\r\n        BezierPath.Node v = f.getNode(index);\r\n        if ((((v.mask) & (BezierPath.C1_MASK)) != 0) && ((index != 0) || (f.isClosed()))) {\r\n            list.add(new BezierControlPointHandle(f, index, 1));\r\n        }\r\n        if ((((v.mask) & (BezierPath.C2_MASK)) != 0) && ((index < ((f.getNodeCount()) - 1)) || (f.isClosed()))) {\r\n            list.add(new BezierControlPointHandle(f, index, 2));\r\n        }\r\n        if ((index > 0) || (f.isClosed())) {\r\n            int i = (index == 0) ? (f.getNodeCount()) - 1 : index - 1;\r\n            v = f.getNode(i);\r\n            if (((v.mask) & (BezierPath.C2_MASK)) != 0) {\r\n                list.add(new BezierControlPointHandle(f, i, 2));\r\n            }\r\n        }\r\n        if ((index < ((f.getNodeCount()) - 2)) || (f.isClosed())) {\r\n            int i = (index == ((f.getNodeCount()) - 1)) ? 0 : index + 1;\r\n            v = f.getNode(i);\r\n            if (((v.mask) & (BezierPath.C1_MASK)) != 0) {\r\n                list.add(new BezierControlPointHandle(f, i, 1));\r\n            }\r\n        }\r\n    }\r\n    return list;\r\n}'),(864,'disconnect()','org.jhotdraw.draw.AbstractConnectionHandle.disconnect()','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Disconnects the connection.\r\n */\r\nprotected abstract void disconnect();'),(865,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractConnectionHandle.draw(java.awt.Graphics2D)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    Graphics2D gg = ((Graphics2D) (g.create()));\r\n    gg.transform(view.getDrawingToViewTransform());\r\n    for (Connector c : connectors) {\r\n        c.draw(gg);\r\n    }\r\n    gg.dispose();\r\n    if ((getTarget()) == null) {\r\n        drawCircle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.DISCONNECTED_CONNECTION_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.DISCONNECTED_CONNECTION_HANDLE_STROKE_COLOR))));\r\n    } else {\r\n        drawCircle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTION_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTION_HANDLE_STROKE_COLOR))));\r\n    }\r\n}'),(866,'findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.AbstractConnectionHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','96','org.jhotdraw.draw.AbstractConnectionHandle','private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        if (((!(f.includes(getOwner()))) && (f.canConnect())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(867,'findConnectionTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.AbstractConnectionHandle.findConnectionTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','96','org.jhotdraw.draw.AbstractConnectionHandle','private Connector findConnectionTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure targetFigure = findConnectableFigure(p, drawing);\r\n    if (((getSource()) == null) && (targetFigure != null)) {\r\n        return findConnector(p, targetFigure, getOwner());\r\n    } else\r\n        if (targetFigure != null) {\r\n            Connector target = findConnector(p, targetFigure, getOwner());\r\n            if (((((targetFigure != null) && (targetFigure.canConnect()))// \r\n             && (targetFigure != (savedTarget)))// \r\n             && (!(targetFigure.includes(getOwner()))))// \r\n             && (canConnect(getSource(), target))) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n    return null;\r\n}'),(868,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)','96','org.jhotdraw.draw.AbstractConnectionHandle','protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}'),(869,'getBezierFigure()','org.jhotdraw.draw.AbstractConnectionHandle.getBezierFigure()','96','org.jhotdraw.draw.AbstractConnectionHandle','protected BezierFigure getBezierFigure() {\r\n    return ((BezierFigure) (getOwner()));\r\n}'),(870,'getBezierNode()','org.jhotdraw.draw.AbstractConnectionHandle.getBezierNode()','96','org.jhotdraw.draw.AbstractConnectionHandle','protected BezierPath.Node getBezierNode() {\r\n    int index = getBezierNodeIndex();\r\n    return (getBezierFigure().getNodeCount()) > index ? getBezierFigure().getNode(index) : null;\r\n}'),(871,'getBezierNodeIndex()','org.jhotdraw.draw.AbstractConnectionHandle.getBezierNodeIndex()','96','org.jhotdraw.draw.AbstractConnectionHandle','protected abstract int getBezierNodeIndex();'),(872,'getLocation()','org.jhotdraw.draw.AbstractConnectionHandle.getLocation()','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Returns the start point of the connection.\r\n */\r\nprotected abstract Point2D.Double getLocation();'),(873,'getOwner()','org.jhotdraw.draw.AbstractConnectionHandle.getOwner()','96','org.jhotdraw.draw.AbstractConnectionHandle','public ConnectionFigure getOwner() {\r\n    return ((ConnectionFigure) (super.getOwner()));\r\n}'),(874,'getSource()','org.jhotdraw.draw.AbstractConnectionHandle.getSource()','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Gets the side of the connection that is unaffected by\r\n * the change.\r\n */\r\nprotected Connector getSource() {\r\n    if ((getTarget()) == (getOwner().getStartConnector())) {\r\n        return getOwner().getEndConnector();\r\n    }\r\n    return getOwner().getStartConnector();\r\n}'),(875,'getTarget()','org.jhotdraw.draw.AbstractConnectionHandle.getTarget()','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Returns the connector of the change.\r\n */\r\nprotected abstract Connector getTarget();'),(876,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.AbstractConnectionHandle.getToolTipText(java.awt.Point)','96','org.jhotdraw.draw.AbstractConnectionHandle','public String getToolTipText(Point p) {\r\n    ConnectionFigure f = ((ConnectionFigure) (getOwner()));\r\n    if (((f.getLiner()) == null) && ((savedLiner) == null)) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        BezierPath.Node node = getBezierNode();\r\n        return node == null ? null : labels.getFormatted(\"handle.bezierNode.toolTipText\", labels.getFormatted(((node.getMask()) == 0 ? \"bezierNode.linearNode\" : (node.getMask()) == (BezierPath.C1C2_MASK) ? \"bezierNode.cubicNode\" : \"bezierNode.quadraticNode\")));\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(877,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.AbstractConnectionHandle.isCombinableWith(org.jhotdraw.draw.Handle)','96','org.jhotdraw.draw.AbstractConnectionHandle','public boolean isCombinableWith(Handle handle) {\r\n    return false;\r\n}'),(878,'repaintConnectors()','org.jhotdraw.draw.AbstractConnectionHandle.repaintConnectors()','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Updates the list of connectors that we draw when the user\r\n * moves or drags the mouse over a figure to which can connect.\r\n */\r\npublic void repaintConnectors() {\r\n    Rectangle2D.Double invalidArea = null;\r\n    for (Connector c : connectors) {\r\n        if (invalidArea == null) {\r\n            invalidArea = c.getDrawingArea();\r\n        } else {\r\n            invalidArea.add(c.getDrawingArea());\r\n        }\r\n    }\r\n    connectors = ((connectableFigure) == null) ? new LinkedList<Connector>() : connectableFigure.getConnectors(getOwner());\r\n    for (Connector c : connectors) {\r\n        if (invalidArea == null) {\r\n            invalidArea = c.getDrawingArea();\r\n        } else {\r\n            invalidArea.add(c.getDrawingArea());\r\n        }\r\n    }\r\n    if (invalidArea != null) {\r\n        view.getComponent().repaint(view.drawingToView(invalidArea));\r\n    }\r\n}'),(879,'setLocation(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractConnectionHandle.setLocation(java.awt.geom.Point2D$Double)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Sets the location of the connectableConnector point.\r\n */\r\nprotected abstract void setLocation(Point2D.Double p);'),(880,'setPotentialTarget(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.AbstractConnectionHandle.setPotentialTarget(org.jhotdraw.draw.Connector)','96','org.jhotdraw.draw.AbstractConnectionHandle','protected void setPotentialTarget(Connector newTarget) {\r\n    this.connectableConnector = newTarget;\r\n}'),(881,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.AbstractConnectionHandle.trackEnd(java.awt.Point,java.awt.Point,int)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Connects the figure to the new connectableConnector. If there is no\r\n * new connectableConnector the connection reverts to its original one.\r\n */\r\npublic void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    ConnectionFigure f = getOwner();\r\n    // Change node type\r\n    if (((modifiersEx & ((((InputEvent.META_DOWN_MASK) | (InputEvent.CTRL_DOWN_MASK)) | (InputEvent.ALT_DOWN_MASK)) | (InputEvent.SHIFT_DOWN_MASK))) != 0) && ((modifiersEx & (InputEvent.BUTTON2_DOWN_MASK)) == 0)) {\r\n        f.willChange();\r\n        int index = getBezierNodeIndex();\r\n        BezierPath.Node v = f.getNode(index);\r\n        if ((index > 0) && (index < (f.getNodeCount()))) {\r\n            v.mask = ((v.mask) + 3) % 4;\r\n        } else\r\n            if (index == 0) {\r\n                v.mask = (((v.mask) & (BezierPath.C2_MASK)) == 0) ? BezierPath.C2_MASK : 0;\r\n            } else {\r\n                v.mask = (((v.mask) & (BezierPath.C1_MASK)) == 0) ? BezierPath.C1_MASK : 0;\r\n            }\r\n\r\n        f.setNode(index, v);\r\n        f.changed();\r\n        fireHandleRequestSecondaryHandles();\r\n    }\r\n    Point2D.Double p = view.viewToDrawing(lead);\r\n    view.getConstrainer().constrainPoint(p);\r\n    Connector target = findConnectionTarget(p, view.getDrawing());\r\n    if (target == null) {\r\n        target = savedTarget;\r\n    }\r\n    setLocation(p);\r\n    if (target != (savedTarget)) {\r\n        disconnect();\r\n        connect(target);\r\n    }\r\n    getOwner().setLiner(savedLiner);\r\n    getOwner().updateConnection();\r\n    connectableConnector = null;\r\n    connectors = Collections.emptyList();\r\n}'),(882,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.AbstractConnectionHandle.trackStart(java.awt.Point,int)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Disconnects the connection.\r\n */\r\npublic void trackStart(Point anchor, int modifiersEx) {\r\n    savedTarget = getTarget();\r\n    start = anchor;\r\n    savedLiner = getOwner().getLiner();\r\n    getOwner().setLiner(null);\r\n    // disconnect();\r\n    fireHandleRequestSecondaryHandles();\r\n}'),(883,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.AbstractConnectionHandle.trackStep(java.awt.Point,java.awt.Point,int)','96','org.jhotdraw.draw.AbstractConnectionHandle','/**\r\n * Finds a new connectableConnector of the connection.\r\n */\r\npublic void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    Point2D.Double p = view.viewToDrawing(lead);\r\n    view.getConstrainer().constrainPoint(p);\r\n    connectableFigure = findConnectableFigure(p, view.getDrawing());\r\n    if ((connectableFigure) != null) {\r\n        Connector aTarget = findConnectionTarget(p, view.getDrawing());\r\n        if (aTarget != null) {\r\n            p = aTarget.getAnchor();\r\n        }\r\n    }\r\n    getOwner().willChange();\r\n    setLocation(p);\r\n    getOwner().changed();\r\n    repaintConnectors();\r\n}'),(884,'-init-()','org.jhotdraw.draw.AbstractConnector.-init-()','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * Constructs a connector that has no owner. It is only\r\n * used internally to resurrect a connectors from a\r\n * StorableOutput. It should never be called directly.\r\n */\r\npublic AbstractConnector() {\r\n    owner = null;\r\n}'),(885,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractConnector.-init-(org.jhotdraw.draw.Figure)','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * Constructs a connector with the given owner figure.\r\n */\r\npublic AbstractConnector(Figure owner) {\r\n    this.owner = owner;\r\n}'),(886,'clone()','org.jhotdraw.draw.AbstractConnector.clone()','97','org.jhotdraw.draw.AbstractConnector','public Object clone() {\r\n    try {\r\n        AbstractConnector that = ((AbstractConnector) (super.clone()));\r\n        return that;\r\n    } catch (CloneNotSupportedException e) {\r\n        InternalError error = new InternalError(e.toString());\r\n        // error.initCause(e); <- requires JDK 1.4\r\n        throw error;\r\n    }\r\n}'),(887,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractConnector.contains(java.awt.geom.Point2D$Double)','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * Tests if a point is contained in the connector.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    return getOwner().contains(p);\r\n}'),(888,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractConnector.draw(java.awt.Graphics2D)','97','org.jhotdraw.draw.AbstractConnector','public void draw(Graphics2D g) {\r\n    Point2D.Double anchor = getAnchor();\r\n    Ellipse2D.Double e = new Ellipse2D.Double(((anchor.x) - 3), ((anchor.y) - 3), 6, 6);\r\n    g.setColor(Color.BLUE);\r\n    g.fill(e);\r\n    // g.setColor(Color.BLACK);\r\n    // g.draw(e);\r\n}'),(889,'findEnd(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractConnector.findEnd(org.jhotdraw.draw.ConnectionFigure)','97','org.jhotdraw.draw.AbstractConnector','public Point2D.Double findEnd(ConnectionFigure connection) {\r\n    return findPoint(connection);\r\n}'),(890,'findPoint(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractConnector.findPoint(org.jhotdraw.draw.ConnectionFigure)','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * Gets the connection point. Override when the connector\r\n * does not need to distinguish between the start and end\r\n * point of a connection.\r\n */\r\nprotected Point2D.Double findPoint(ConnectionFigure connection) {\r\n    return Geom.center(getBounds());\r\n}'),(891,'findStart(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractConnector.findStart(org.jhotdraw.draw.ConnectionFigure)','97','org.jhotdraw.draw.AbstractConnector','public Point2D.Double findStart(ConnectionFigure connection) {\r\n    return findPoint(connection);\r\n}'),(892,'getAnchor()','org.jhotdraw.draw.AbstractConnector.getAnchor()','97','org.jhotdraw.draw.AbstractConnector','public Point2D.Double getAnchor() {\r\n    return Geom.center(getBounds());\r\n}'),(893,'getBounds()','org.jhotdraw.draw.AbstractConnector.getBounds()','97','org.jhotdraw.draw.AbstractConnector','public Rectangle2D.Double getBounds() {\r\n    return isConnectToDecorator() ? ((DecoratedFigure) (getOwner())).getDecorator().getBounds() : getOwner().getBounds();\r\n}'),(894,'getConnectorTarget(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractConnector.getConnectorTarget(org.jhotdraw.draw.Figure)','97','org.jhotdraw.draw.AbstractConnector','protected final Figure getConnectorTarget(Figure f) {\r\n    return (isConnectToDecorator) && ((((DecoratedFigure) (f)).getDecorator()) != null) ? ((DecoratedFigure) (f)).getDecorator() : f;\r\n}'),(895,'getDrawingArea()','org.jhotdraw.draw.AbstractConnector.getDrawingArea()','97','org.jhotdraw.draw.AbstractConnector','public Rectangle2D.Double getDrawingArea() {\r\n    Point2D.Double anchor = getAnchor();\r\n    return new Rectangle2D.Double(((anchor.x) - 4), ((anchor.y) - 4), 8, 8);\r\n}'),(896,'getOwner()','org.jhotdraw.draw.AbstractConnector.getOwner()','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * Gets the connectors owner.\r\n */\r\npublic Figure getOwner() {\r\n    return owner;\r\n}'),(897,'isConnectToDecorator()','org.jhotdraw.draw.AbstractConnector.isConnectToDecorator()','97','org.jhotdraw.draw.AbstractConnector','public boolean isConnectToDecorator() {\r\n    return isConnectToDecorator;\r\n}'),(898,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractConnector.read(org.jhotdraw.xml.DOMInput)','97','org.jhotdraw.draw.AbstractConnector','public void read(DOMInput in) throws IOException {\r\n    if (isStatePersistent) {\r\n        isConnectToDecorator = in.getAttribute(\"connectToDecorator\", false);\r\n    }\r\n    if ((in.getElementCount(\"Owner\")) != 0) {\r\n        in.openElement(\"Owner\");\r\n    } else {\r\n        in.openElement(\"owner\");\r\n    }\r\n    this.owner = ((Figure) (in.readObject(0)));\r\n    in.closeElement();\r\n}'),(899,'setConnectToDecorator(boolean)','org.jhotdraw.draw.AbstractConnector.setConnectToDecorator(boolean)','97','org.jhotdraw.draw.AbstractConnector','public void setConnectToDecorator(boolean newValue) {\r\n    isConnectToDecorator = newValue;\r\n}'),(900,'setOwner(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractConnector.setOwner(org.jhotdraw.draw.Figure)','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * Sets the connectors owner.\r\n */\r\nprotected void setOwner(Figure newValue) {\r\n    owner = newValue;\r\n}'),(901,'updateAnchor(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractConnector.updateAnchor(java.awt.geom.Point2D$Double)','97','org.jhotdraw.draw.AbstractConnector','public void updateAnchor(Point2D.Double p) {\r\n}'),(902,'updateEndLocation(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractConnector.updateEndLocation(java.awt.geom.Point2D$Double)','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * This is called, when the end location of the connection has been\r\n * moved by the user. The user has this probably done, to adjust the layout.\r\n * The connector may use this as a hint to improve the results for the next\r\n * call to findStart.\r\n */\r\npublic void updateEndLocation(Point2D.Double p) {\r\n}'),(903,'updateStartLocation(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractConnector.updateStartLocation(java.awt.geom.Point2D$Double)','97','org.jhotdraw.draw.AbstractConnector','/**\r\n * This is called, when the start location of the connection has been\r\n * moved by the user. The user has this probably done, to adjust the layout.\r\n * The connector may use this as a hint to improve the results for the next\r\n * call to findEnd.\r\n */\r\npublic void updateStartLocation(Point2D.Double p) {\r\n}'),(904,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractConnector.write(org.jhotdraw.xml.DOMOutput)','97','org.jhotdraw.draw.AbstractConnector','public void write(DOMOutput out) throws IOException {\r\n    if (isStatePersistent) {\r\n        if (isConnectToDecorator) {\r\n            out.addAttribute(\"connectToDecorator\", true);\r\n        }\r\n    }\r\n    out.openElement(\"Owner\");\r\n    out.writeObject(getOwner());\r\n    out.closeElement();\r\n}'),(905,'-init-()','org.jhotdraw.draw.AbstractConstrainer.-init-()','98','org.jhotdraw.draw.AbstractConstrainer','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractConstrainer() {\r\n}'),(906,'addChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.draw.AbstractConstrainer.addChangeListener(javax.swing.event.ChangeListener)','98','org.jhotdraw.draw.AbstractConstrainer','/**\r\n * Adds a <code>ChangeListener</code>.\r\n */\r\npublic void addChangeListener(ChangeListener l) {\r\n    listenerList.add(ChangeListener.class, l);\r\n}'),(907,'clone()','org.jhotdraw.draw.AbstractConstrainer.clone()','98','org.jhotdraw.draw.AbstractConstrainer','public AbstractConstrainer clone() {\r\n    AbstractConstrainer that = ((AbstractConstrainer) (super.clone()));\r\n    that.listenerList = new EventListenerList();\r\n    return that;\r\n}'),(908,'fireStateChanged()','org.jhotdraw.draw.AbstractConstrainer.fireStateChanged()','98','org.jhotdraw.draw.AbstractConstrainer','/**\r\n * Runs each <code>ChangeListener</code>s <code>stateChanged</code> method.\r\n *\r\n * @see EventListenerList\r\n */\r\nprotected void fireStateChanged() {\r\n    Object[] listeners = listenerList.getListenerList();\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ChangeListener.class)) {\r\n            if ((changeEvent) == null) {\r\n                changeEvent = new ChangeEvent(this);\r\n            }\r\n            ((ChangeListener) (listeners[(i + 1)])).stateChanged(changeEvent);\r\n        }\r\n    }\r\n}'),(909,'removeChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.draw.AbstractConstrainer.removeChangeListener(javax.swing.event.ChangeListener)','98','org.jhotdraw.draw.AbstractConstrainer','/**\r\n * Removes a <code>ChangeListener</code>.\r\n */\r\npublic void removeChangeListener(ChangeListener l) {\r\n    listenerList.remove(ChangeListener.class, l);\r\n}'),(910,'-init-()','org.jhotdraw.draw.AbstractDrawing.-init-()','99','org.jhotdraw.draw.AbstractDrawing','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractDrawing() {\r\n}'),(911,'addInputFormat(org.jhotdraw.draw.InputFormat)','org.jhotdraw.draw.AbstractDrawing.addInputFormat(org.jhotdraw.draw.InputFormat)','99','org.jhotdraw.draw.AbstractDrawing','public void addInputFormat(InputFormat format) {\r\n    inputFormats.add(format);\r\n}'),(912,'addOutputFormat(org.jhotdraw.draw.OutputFormat)','org.jhotdraw.draw.AbstractDrawing.addOutputFormat(org.jhotdraw.draw.OutputFormat)','99','org.jhotdraw.draw.AbstractDrawing','public void addOutputFormat(OutputFormat format) {\r\n    outputFormats.add(format);\r\n    if (AbstractDrawing.DEBUG) {\r\n        System.out.println(((((this) + \".addOutputFormat(\") + format) + \")\"));\r\n    }\r\n}'),(913,'addUndoableEditListener(javax.swing.event.UndoableEditListener)','org.jhotdraw.draw.AbstractDrawing.addUndoableEditListener(javax.swing.event.UndoableEditListener)','99','org.jhotdraw.draw.AbstractDrawing','public void addUndoableEditListener(UndoableEditListener l) {\r\n    listenerList.add(UndoableEditListener.class, l);\r\n}'),(914,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.AbstractDrawing.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','99','org.jhotdraw.draw.AbstractDrawing','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\n@Override\r\npublic void fireUndoableEditHappened(UndoableEdit edit) {\r\n    UndoableEditEvent event = null;\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if (event == null) {\r\n                event = new UndoableEditEvent(this, edit);\r\n            }\r\n            if ((listeners[i]) == (UndoableEditListener.class)) {\r\n                ((UndoableEditListener) (listeners[(i + 1)])).undoableEditHappened(event);\r\n            }\r\n        }\r\n    }\r\n}'),(915,'getDrawing()','org.jhotdraw.draw.AbstractDrawing.getDrawing()','99','org.jhotdraw.draw.AbstractDrawing','@Override\r\npublic Drawing getDrawing() {\r\n    return this;\r\n}'),(916,'getFontRenderContext()','org.jhotdraw.draw.AbstractDrawing.getFontRenderContext()','99','org.jhotdraw.draw.AbstractDrawing','public FontRenderContext getFontRenderContext() {\r\n    return fontRenderContext;\r\n}'),(917,'getInputFormats()','org.jhotdraw.draw.AbstractDrawing.getInputFormats()','99','org.jhotdraw.draw.AbstractDrawing','public List<InputFormat> getInputFormats() {\r\n    return inputFormats;\r\n}'),(918,'getLock()','org.jhotdraw.draw.AbstractDrawing.getLock()','99','org.jhotdraw.draw.AbstractDrawing','/**\r\n * The drawing view synchronizes on the lock when drawing a drawing.\r\n */\r\n@Override\r\npublic Object getLock() {\r\n    return AbstractDrawing.lock;\r\n}'),(919,'getOutputFormats()','org.jhotdraw.draw.AbstractDrawing.getOutputFormats()','99','org.jhotdraw.draw.AbstractDrawing','public List<OutputFormat> getOutputFormats() {\r\n    if (AbstractDrawing.DEBUG) {\r\n        System.out.println((((this) + \".getOutputFormats size:\") + (outputFormats.size())));\r\n    }\r\n    return outputFormats;\r\n}'),(920,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.AbstractDrawing.read(org.jhotdraw.xml.DOMInput)','99','org.jhotdraw.draw.AbstractDrawing','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    in.openElement(\"figures\");\r\n    for (int i = 0; i < (in.getElementCount()); i++) {\r\n        Figure f;\r\n        add((f = ((Figure) (in.readObject(i)))));\r\n    }\r\n    in.closeElement();\r\n}'),(921,'removeUndoableEditListener(javax.swing.event.UndoableEditListener)','org.jhotdraw.draw.AbstractDrawing.removeUndoableEditListener(javax.swing.event.UndoableEditListener)','99','org.jhotdraw.draw.AbstractDrawing','public void removeUndoableEditListener(UndoableEditListener l) {\r\n    listenerList.remove(UndoableEditListener.class, l);\r\n}'),(922,'setFontRenderContext(java.awt.font.FontRenderContext)','org.jhotdraw.draw.AbstractDrawing.setFontRenderContext(java.awt.font.FontRenderContext)','99','org.jhotdraw.draw.AbstractDrawing','public void setFontRenderContext(FontRenderContext frc) {\r\n    fontRenderContext = frc;\r\n}'),(923,'setInputFormats(java.util.List)','org.jhotdraw.draw.AbstractDrawing.setInputFormats(java.util.List)','99','org.jhotdraw.draw.AbstractDrawing','public void setInputFormats(List<InputFormat> formats) {\r\n    this.inputFormats = new LinkedList<InputFormat>(formats);\r\n}'),(924,'setOutputFormats(java.util.List)','org.jhotdraw.draw.AbstractDrawing.setOutputFormats(java.util.List)','99','org.jhotdraw.draw.AbstractDrawing','public void setOutputFormats(List<OutputFormat> formats) {\r\n    this.outputFormats = new LinkedList<OutputFormat>(formats);\r\n}'),(925,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.AbstractDrawing.write(org.jhotdraw.xml.DOMOutput)','99','org.jhotdraw.draw.AbstractDrawing','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    out.openElement(\"figures\");\r\n    for (Figure f : getChildren()) {\r\n        out.writeObject(f);\r\n    }\r\n    out.closeElement();\r\n}'),(926,'-init-()','org.jhotdraw.draw.AbstractFigure.-init-()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractFigure() {\r\n}'),(927,'addFigureListener(org.jhotdraw.draw.FigureListener)','org.jhotdraw.draw.AbstractFigure.addFigureListener(org.jhotdraw.draw.FigureListener)','100','org.jhotdraw.draw.AbstractFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\npublic void addFigureListener(FigureListener l) {\r\n    listenerList.add(FigureListener.class, l);\r\n}'),(928,'addNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.AbstractFigure.addNotify(org.jhotdraw.draw.Drawing)','100','org.jhotdraw.draw.AbstractFigure','public void addNotify(Drawing d) {\r\n    this.drawing = d;\r\n    fireFigureAdded();\r\n}'),(929,'basicClone(java.util.HashMap)','org.jhotdraw.draw.AbstractFigure.basicClone(java.util.HashMap)','100','org.jhotdraw.draw.AbstractFigure','public final AbstractFigure basicClone(HashMap<Figure, Figure> oldToNew) {\r\n    // XXX - Delete me\r\n    return null;\r\n}'),(930,'canConnect()','org.jhotdraw.draw.AbstractFigure.canConnect()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Checks if this figure can be connected. By default\r\n * AbstractFigures can be connected.\r\n */\r\npublic boolean canConnect() {\r\n    return true;\r\n}'),(931,'changed()','org.jhotdraw.draw.AbstractFigure.changed()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Informs that a figure changed the area of its display box.\r\n */\r\npublic void changed() {\r\n    if ((changingDepth) == 1) {\r\n        validate();\r\n        fireFigureChanged(getDrawingArea());\r\n    } else\r\n        if ((changingDepth) < 0) {\r\n            throw new InternalError(\"changed was called without a prior call to willChange.\");\r\n        }\r\n\r\n    (changingDepth)--;\r\n}'),(932,'clone()','org.jhotdraw.draw.AbstractFigure.clone()','100','org.jhotdraw.draw.AbstractFigure','/* public Set createHandles() {\nreturn new HashSet();\n}\n */\r\n@Override\r\npublic AbstractFigure clone() {\r\n    AbstractFigure that = ((AbstractFigure) (super.clone()));\r\n    that.listenerList = new EventListenerList();\r\n    that.drawing = null;// Clones need to be explictly added to a drawing\r\n\r\n    return that;\r\n}'),(933,'createHandles(int)','org.jhotdraw.draw.AbstractFigure.createHandles(int)','100','org.jhotdraw.draw.AbstractFigure','public Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(934,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.AbstractFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','100','org.jhotdraw.draw.AbstractFigure','public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopRectangleConnector(this);\r\n}'),(935,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopBoxConnector is returned.\r\n *\r\n * @see ChopRectangleConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRectangleConnector(this);\r\n}'),(936,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractFigure.findFigureInside(java.awt.geom.Point2D$Double)','100','org.jhotdraw.draw.AbstractFigure','public Figure findFigureInside(Point2D.Double p) {\r\n    return contains(p) ? this : null;\r\n}'),(937,'fireAreaInvalidated()','org.jhotdraw.draw.AbstractFigure.fireAreaInvalidated()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\npublic void fireAreaInvalidated() {\r\n    fireAreaInvalidated(getDrawingArea());\r\n}'),(938,'fireAreaInvalidated(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.AbstractFigure.fireAreaInvalidated(java.awt.geom.Rectangle2D$Double)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(Rectangle2D.Double invalidatedArea) {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, invalidatedArea);\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).areaInvalidated(event);\r\n            }\r\n        }\r\n    }\r\n}'),(939,'fireAreaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractFigure.fireAreaInvalidated(org.jhotdraw.draw.FigureEvent)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(FigureEvent event) {\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (FigureListener.class)) {\r\n            ((FigureListener) (listeners[(i + 1)])).areaInvalidated(event);\r\n        }\r\n    }\r\n}'),(940,'fireAttributeChanged(org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','org.jhotdraw.draw.AbstractFigure.fireAttributeChanged(org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAttributeChanged(AttributeKey attribute, Object oldValue, Object newValue) {\r\n    if (((listenerList.getListenerCount()) > 0) && (((oldValue == null) || (newValue == null)) || (!(oldValue.equals(newValue))))) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, attribute, oldValue, newValue);\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).attributeChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(941,'fireFigureAdded()','org.jhotdraw.draw.AbstractFigure.fireFigureAdded()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded() {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, getBounds());\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n            }\r\n        }\r\n    }\r\n}'),(942,'fireFigureChanged()','org.jhotdraw.draw.AbstractFigure.fireFigureChanged()','100','org.jhotdraw.draw.AbstractFigure','public void fireFigureChanged() {\r\n    fireFigureChanged(getBounds());\r\n}'),(943,'fireFigureChanged(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.AbstractFigure.fireFigureChanged(java.awt.geom.Rectangle2D$Double)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureChanged(Rectangle2D.Double changedArea) {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, changedArea);\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).figureChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(944,'fireFigureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractFigure.fireFigureChanged(org.jhotdraw.draw.FigureEvent)','100','org.jhotdraw.draw.AbstractFigure','protected void fireFigureChanged(FigureEvent event) {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                ((FigureListener) (listeners[(i + 1)])).figureChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(945,'fireFigureHandlesChanged()','org.jhotdraw.draw.AbstractFigure.fireFigureHandlesChanged()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureHandlesChanged() {\r\n    Rectangle2D.Double changedArea = getDrawingArea();\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, changedArea);\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).figureHandlesChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(946,'fireFigureRemoved()','org.jhotdraw.draw.AbstractFigure.fireFigureRemoved()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved() {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, getBounds());\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n            }\r\n        }\r\n    }\r\n}'),(947,'fireFigureRequestRemove()','org.jhotdraw.draw.AbstractFigure.fireFigureRequestRemove()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRequestRemove() {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, getBounds());\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).figureRequestRemove(event);\r\n            }\r\n        }\r\n    }\r\n}'),(948,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.AbstractFigure.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Notify all UndoableEditListener of the Drawing, to which this Figure has\r\n * been added to. If this Figure is not part of a Drawing, the event is\r\n * lost.\r\n */\r\nprotected void fireUndoableEditHappened(UndoableEdit edit) {\r\n    if ((getDrawing()) != null) {\r\n        getDrawing().fireUndoableEditHappened(edit);\r\n    }\r\n}'),(949,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractFigure.getActions(java.awt.geom.Point2D$Double)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Returns a collection of actions which are presented to the user\r\n * in a popup menu.\r\n * <p>The collection may contain null entries. These entries are used\r\n * interpreted as separators in the popup menu.\r\n */\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    return Collections.emptyList();\r\n}'),(950,'getChangingDepth()','org.jhotdraw.draw.AbstractFigure.getChangingDepth()','100','org.jhotdraw.draw.AbstractFigure','protected int getChangingDepth() {\r\n    return changingDepth;\r\n}'),(951,'getConnectors(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.AbstractFigure.getConnectors(org.jhotdraw.draw.ConnectionFigure)','100','org.jhotdraw.draw.AbstractFigure','public Collection<Connector> getConnectors(ConnectionFigure prototype) {\r\n    LinkedList<Connector> connectors = new LinkedList<Connector>();\r\n    connectors.add(new ChopRectangleConnector(this));\r\n    return connectors;\r\n}'),(952,'getCursor(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractFigure.getCursor(java.awt.geom.Point2D$Double)','100','org.jhotdraw.draw.AbstractFigure','public Cursor getCursor(Point2D.Double p) {\r\n    if (contains(p)) {\r\n        return Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\r\n    } else {\r\n        return Cursor.getDefaultCursor();\r\n    }\r\n}'),(953,'getDecomposition()','org.jhotdraw.draw.AbstractFigure.getDecomposition()','100','org.jhotdraw.draw.AbstractFigure','public Collection<Figure> getDecomposition() {\r\n    LinkedList<Figure> list = new LinkedList<Figure>();\r\n    list.add(this);\r\n    return list;\r\n}'),(954,'getDrawing()','org.jhotdraw.draw.AbstractFigure.getDrawing()','100','org.jhotdraw.draw.AbstractFigure','protected Drawing getDrawing() {\r\n    return drawing;\r\n}'),(955,'getEndPoint()','org.jhotdraw.draw.AbstractFigure.getEndPoint()','100','org.jhotdraw.draw.AbstractFigure','public Point2D.Double getEndPoint() {\r\n    Rectangle2D.Double r = getBounds();\r\n    return new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height)));\r\n}'),(956,'getFontRenderContext()','org.jhotdraw.draw.AbstractFigure.getFontRenderContext()','100','org.jhotdraw.draw.AbstractFigure','protected FontRenderContext getFontRenderContext() {\r\n    FontRenderContext frc = null;\r\n    if (frc == null) {\r\n        frc = new FontRenderContext(new AffineTransform(), Options.isTextAntialiased(), Options.isFractionalMetrics());\r\n    }\r\n    return frc;\r\n}'),(957,'getLayer()','org.jhotdraw.draw.AbstractFigure.getLayer()','100','org.jhotdraw.draw.AbstractFigure','public int getLayer() {\r\n    return 0;\r\n}'),(958,'getLock()','org.jhotdraw.draw.AbstractFigure.getLock()','100','org.jhotdraw.draw.AbstractFigure','protected Object getLock() {\r\n    return (getDrawing()) == null ? this : getDrawing().getLock();\r\n}'),(959,'getPreferredSize()','org.jhotdraw.draw.AbstractFigure.getPreferredSize()','100','org.jhotdraw.draw.AbstractFigure','/* public Rectangle2D.Double getHitBounds() {\nreturn getBounds();\n}\n */\r\npublic Dimension2DDouble getPreferredSize() {\r\n    Rectangle2D.Double r = getBounds();\r\n    return new Dimension2DDouble(r.width, r.height);\r\n}'),(960,'getStartPoint()','org.jhotdraw.draw.AbstractFigure.getStartPoint()','100','org.jhotdraw.draw.AbstractFigure','public Point2D.Double getStartPoint() {\r\n    Rectangle2D.Double r = getBounds();\r\n    return new Point2D.Double(r.x, r.y);\r\n}'),(961,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractFigure.getTool(java.awt.geom.Point2D$Double)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Returns a specialized tool for the given coordinate.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\npublic Tool getTool(Point2D.Double p) {\r\n    return null;\r\n}'),(962,'getToolTipText(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractFigure.getToolTipText(java.awt.geom.Point2D$Double)','100','org.jhotdraw.draw.AbstractFigure','public String getToolTipText(Point2D.Double p) {\r\n    return null;\r\n}'),(963,'handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.AbstractFigure.handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)','100','org.jhotdraw.draw.AbstractFigure','public boolean handleDrop(Point2D.Double p, Collection<Figure> droppedFigures, DrawingView view) {\r\n    return false;\r\n}'),(964,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.AbstractFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Handles a mouse click.\r\n */\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    return false;\r\n}'),(965,'includes(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractFigure.includes(org.jhotdraw.draw.Figure)','100','org.jhotdraw.draw.AbstractFigure','public boolean includes(Figure figure) {\r\n    return figure == (this);\r\n}'),(966,'invalidate()','org.jhotdraw.draw.AbstractFigure.invalidate()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Invalidates cached data of the Figure.\r\n * This method must execute fast, because it can be called very often.\r\n */\r\nprotected void invalidate() {\r\n}'),(967,'isChanging()','org.jhotdraw.draw.AbstractFigure.isChanging()','100','org.jhotdraw.draw.AbstractFigure','protected boolean isChanging() {\r\n    return (changingDepth) != 0;\r\n}'),(968,'isRemovable()','org.jhotdraw.draw.AbstractFigure.isRemovable()','100','org.jhotdraw.draw.AbstractFigure','public boolean isRemovable() {\r\n    return isRemovable;\r\n}'),(969,'isSelectable()','org.jhotdraw.draw.AbstractFigure.isSelectable()','100','org.jhotdraw.draw.AbstractFigure','public boolean isSelectable() {\r\n    return isSelectable;\r\n}'),(970,'isTransformable()','org.jhotdraw.draw.AbstractFigure.isTransformable()','100','org.jhotdraw.draw.AbstractFigure','public boolean isTransformable() {\r\n    return isTransformable;\r\n}'),(971,'isVisible()','org.jhotdraw.draw.AbstractFigure.isVisible()','100','org.jhotdraw.draw.AbstractFigure','public boolean isVisible() {\r\n    return isVisible;\r\n}'),(972,'remap(java.util.Map,boolean)','org.jhotdraw.draw.AbstractFigure.remap(java.util.Map,boolean)','100','org.jhotdraw.draw.AbstractFigure','public void remap(Map<Figure, Figure> oldToNew, boolean disconnectIfNotInMap) {\r\n}'),(973,'removeFigureListener(org.jhotdraw.draw.FigureListener)','org.jhotdraw.draw.AbstractFigure.removeFigureListener(org.jhotdraw.draw.FigureListener)','100','org.jhotdraw.draw.AbstractFigure','public void removeFigureListener(FigureListener l) {\r\n    listenerList.remove(FigureListener.class, l);\r\n}'),(974,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.AbstractFigure.removeNotify(org.jhotdraw.draw.Drawing)','100','org.jhotdraw.draw.AbstractFigure','public void removeNotify(Drawing d) {\r\n    fireFigureRemoved();\r\n    this.drawing = null;\r\n}'),(975,'requestRemove()','org.jhotdraw.draw.AbstractFigure.requestRemove()','100','org.jhotdraw.draw.AbstractFigure','public void requestRemove() {\r\n    fireFigureRequestRemove();\r\n}'),(976,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','100','org.jhotdraw.draw.AbstractFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    Point2D.Double oldAnchor = getStartPoint();\r\n    Point2D.Double oldLead = getEndPoint();\r\n    if ((!(oldAnchor.equals(anchor))) || (!(oldLead.equals(lead)))) {\r\n        willChange();\r\n        setBounds(anchor, lead);\r\n        changed();\r\n        fireUndoableEditHappened(new SetBoundsEdit(this, oldAnchor, oldLead, anchor, lead));\r\n    }\r\n}'),(977,'setBounds(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.AbstractFigure.setBounds(java.awt.geom.Rectangle2D$Double)','100','org.jhotdraw.draw.AbstractFigure','public final void setBounds(Rectangle2D.Double bounds) {\r\n    setBounds(new Point2D.Double(bounds.x, bounds.y), new Point2D.Double(((bounds.x) + (bounds.width)), ((bounds.y) + (bounds.height))));\r\n}'),(978,'setRemovable(boolean)','org.jhotdraw.draw.AbstractFigure.setRemovable(boolean)','100','org.jhotdraw.draw.AbstractFigure','public void setRemovable(boolean newValue) {\r\n    boolean oldValue = isRemovable;\r\n    isRemovable = newValue;\r\n    firePropertyChange(\"removable\", oldValue, newValue);\r\n}'),(979,'setSelectable(boolean)','org.jhotdraw.draw.AbstractFigure.setSelectable(boolean)','100','org.jhotdraw.draw.AbstractFigure','public void setSelectable(boolean newValue) {\r\n    boolean oldValue = isSelectable;\r\n    isSelectable = newValue;\r\n    firePropertyChange(\"selectable\", oldValue, newValue);\r\n}'),(980,'setTransformable(boolean)','org.jhotdraw.draw.AbstractFigure.setTransformable(boolean)','100','org.jhotdraw.draw.AbstractFigure','public void setTransformable(boolean newValue) {\r\n    boolean oldValue = isTransformable;\r\n    isTransformable = newValue;\r\n    firePropertyChange(\"transformable\", oldValue, newValue);\r\n}'),(981,'setVisible(boolean)','org.jhotdraw.draw.AbstractFigure.setVisible(boolean)','100','org.jhotdraw.draw.AbstractFigure','public void setVisible(boolean newValue) {\r\n    if (newValue != (isVisible)) {\r\n        willChange();\r\n        isVisible = newValue;\r\n        changed();\r\n    }\r\n}'),(982,'toString()','org.jhotdraw.draw.AbstractFigure.toString()','100','org.jhotdraw.draw.AbstractFigure','public String toString() {\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(getClass().getName().substring(((getClass().getName().lastIndexOf(.)) + 1)));\r\n    buf.append(@);\r\n    buf.append(hashCode());\r\n    return buf.toString();\r\n}'),(983,'validate()','org.jhotdraw.draw.AbstractFigure.validate()','100','org.jhotdraw.draw.AbstractFigure','protected void validate() {\r\n}'),(984,'willChange()','org.jhotdraw.draw.AbstractFigure.willChange()','100','org.jhotdraw.draw.AbstractFigure','/**\r\n * Informs that a figure is about to change something that\r\n * affects the contents of its display box.\r\n */\r\npublic void willChange() {\r\n    if ((changingDepth) == 0) {\r\n        fireAreaInvalidated();\r\n        invalidate();\r\n    }\r\n    (changingDepth)++;\r\n}'),(985,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractHandle.-init-(org.jhotdraw.draw.Figure)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractHandle(Figure owner) {\r\n    if (owner == null) {\r\n        throw new IllegalArgumentException(\"owner must not be null\");\r\n    }\r\n    this.owner = owner;\r\n    owner.addFigureListener(this);\r\n}'),(986,'addHandleListener(org.jhotdraw.draw.HandleListener)','org.jhotdraw.draw.AbstractHandle.addHandleListener(org.jhotdraw.draw.HandleListener)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Adds a listener for this handle.\r\n */\r\npublic void addHandleListener(HandleListener l) {\r\n    listenerList.add(HandleListener.class, l);\r\n}'),(987,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.areaInvalidated(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Sent when a region used by the figure needs to be repainted.\r\n * The implementation of this method assumes that the handle\r\n * is located on the bounds of the figure or inside the figure.\r\n * If the handle is located elsewhere this method must be reimpleted\r\n * by the subclass.\r\n */\r\npublic void areaInvalidated(FigureEvent evt) {\r\n    updateBounds();\r\n}'),(988,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.attributeChanged(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','public void attributeChanged(FigureEvent e) {\r\n}'),(989,'basicGetBounds()','org.jhotdraw.draw.AbstractHandle.basicGetBounds()','101','org.jhotdraw.draw.AbstractHandle','protected abstract Rectangle basicGetBounds();'),(990,'contains(java.awt.Point)','org.jhotdraw.draw.AbstractHandle.contains(java.awt.Point)','101','org.jhotdraw.draw.AbstractHandle','public boolean contains(Point p) {\r\n    return getBounds().contains(p);\r\n}'),(991,'createSecondaryHandles()','org.jhotdraw.draw.AbstractHandle.createSecondaryHandles()','101','org.jhotdraw.draw.AbstractHandle','public Collection<Handle> createSecondaryHandles() {\r\n    return Collections.emptyList();\r\n}'),(992,'dispose()','org.jhotdraw.draw.AbstractHandle.dispose()','101','org.jhotdraw.draw.AbstractHandle','public void dispose() {\r\n    owner.removeFigureListener(this);\r\n    // owner = null;\r\n}'),(993,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractHandle.draw(java.awt.Graphics2D)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawCircle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_STROKE_COLOR))));\r\n}'),(994,'drawCircle(java.awt.Graphics2D,java.awt.Color,java.awt.Color)','org.jhotdraw.draw.AbstractHandle.drawCircle(java.awt.Graphics2D,java.awt.Color,java.awt.Color)','101','org.jhotdraw.draw.AbstractHandle','protected void drawCircle(Graphics2D g, Color fill, Color stroke) {\r\n    Rectangle r = getBounds();\r\n    if (fill != null) {\r\n        g.setColor(fill);\r\n        g.fillOval(((r.x) + 1), ((r.y) + 1), ((r.width) - 2), ((r.height) - 2));\r\n    }\r\n    if (stroke != null) {\r\n        g.setStroke(new BasicStroke());\r\n        g.setColor(stroke);\r\n        g.drawOval(r.x, r.y, ((r.width) - 1), ((r.height) - 1));\r\n        if ((getView().getActiveHandle()) == (this)) {\r\n            g.fillOval(((r.x) + 2), ((r.y) + 2), ((r.width) - 4), ((r.height) - 4));\r\n        }\r\n    }\r\n}'),(995,'drawDiamond(java.awt.Graphics2D,java.awt.Color,java.awt.Color)','org.jhotdraw.draw.AbstractHandle.drawDiamond(java.awt.Graphics2D,java.awt.Color,java.awt.Color)','101','org.jhotdraw.draw.AbstractHandle','protected void drawDiamond(Graphics2D g, Color fill, Color stroke) {\r\n    if (stroke != null) {\r\n        Rectangle r = getBounds();\r\n        r.grow(1, 1);\r\n        GeneralPath p = new GeneralPath();\r\n        p.moveTo(((r.x) + ((r.width) / 2.0F)), r.y);\r\n        p.lineTo(((r.x) + (r.width)), ((r.y) + ((r.height) / 2.0F)));\r\n        p.lineTo(((r.x) + ((r.width) / 2.0F)), ((r.y) + (r.height)));\r\n        p.lineTo(r.x, ((r.y) + ((r.height) / 2.0F)));\r\n        p.closePath();\r\n        g.setColor(stroke);\r\n        g.fill(p);\r\n    }\r\n    if (fill != null) {\r\n        Rectangle r = getBounds();\r\n        GeneralPath p = new GeneralPath();\r\n        p.moveTo(((r.x) + ((r.width) / 2.0F)), r.y);\r\n        p.lineTo(((r.x) + (r.width)), ((r.y) + ((r.height) / 2.0F)));\r\n        p.lineTo(((r.x) + ((r.width) / 2.0F)), ((r.y) + (r.height)));\r\n        p.lineTo(r.x, ((r.y) + ((r.height) / 2.0F)));\r\n        p.closePath();\r\n        g.setColor(fill);\r\n        g.fill(p);\r\n    }\r\n    if ((stroke != null) && ((getView().getActiveHandle()) == (this))) {\r\n        Rectangle r = getBounds();\r\n        r.grow((-1), (-1));\r\n        GeneralPath p = new GeneralPath();\r\n        p.moveTo(((r.x) + ((r.width) / 2.0F)), r.y);\r\n        p.lineTo(((r.x) + (r.width)), ((r.y) + ((r.height) / 2.0F)));\r\n        p.lineTo(((r.x) + ((r.width) / 2.0F)), ((r.y) + (r.height)));\r\n        p.lineTo(r.x, ((r.y) + ((r.height) / 2.0F)));\r\n        p.closePath();\r\n        g.setColor(stroke);\r\n        g.fill(p);\r\n    }\r\n}'),(996,'drawRectangle(java.awt.Graphics2D,java.awt.Color,java.awt.Color)','org.jhotdraw.draw.AbstractHandle.drawRectangle(java.awt.Graphics2D,java.awt.Color,java.awt.Color)','101','org.jhotdraw.draw.AbstractHandle','protected void drawRectangle(Graphics2D g, Color fill, Color stroke) {\r\n    if (fill != null) {\r\n        Rectangle r = getBounds();\r\n        g.setColor(fill);\r\n        r.x += 1;\r\n        r.y += 1;\r\n        r.width -= 2;\r\n        r.height -= 2;\r\n        g.fill(r);\r\n    }\r\n    g.setStroke(new BasicStroke());\r\n    if (stroke != null) {\r\n        Rectangle r = getBounds();\r\n        r.width -= 1;\r\n        r.height -= 1;\r\n        g.setColor(stroke);\r\n        g.draw(r);\r\n        if ((getView().getActiveHandle()) == (this)) {\r\n            r.x += 2;\r\n            r.y += 2;\r\n            r.width -= 3;\r\n            r.height -= 3;\r\n            g.fill(r);\r\n        }\r\n    }\r\n}'),(997,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.figureAdded(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Sent when a figure was added.\r\n */\r\npublic void figureAdded(FigureEvent e) {\r\n    // Empty\r\n}'),(998,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.figureChanged(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Sent when the bounds or shape of a figure has changed.\r\n */\r\npublic void figureChanged(FigureEvent evt) {\r\n    updateBounds();\r\n}'),(999,'figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','public void figureHandlesChanged(FigureEvent e) {\r\n}'),(1000,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.figureRemoved(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Sent when a figure was removed.\r\n */\r\npublic void figureRemoved(FigureEvent e) {\r\n    // Empty\r\n}'),(1001,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.AbstractHandle.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Sent when a figure requests to be removed.\r\n */\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    // Empty\r\n}'),(1002,'fireAreaInvalidated(java.awt.Rectangle)','org.jhotdraw.draw.AbstractHandle.fireAreaInvalidated(java.awt.Rectangle)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(Rectangle invalidatedArea) {\r\n    HandleEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (HandleListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new HandleEvent(this, invalidatedArea);\r\n            }\r\n            ((HandleListener) (listeners[(i + 1)])).areaInvalidated(event);\r\n        }\r\n    }\r\n}'),(1003,'fireHandleRequestRemove(java.awt.Rectangle)','org.jhotdraw.draw.AbstractHandle.fireHandleRequestRemove(java.awt.Rectangle)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireHandleRequestRemove(Rectangle invalidatedArea) {\r\n    HandleEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (HandleListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new HandleEvent(this, invalidatedArea);\r\n            }\r\n            ((HandleListener) (listeners[(i + 1)])).handleRequestRemove(event);\r\n        }\r\n    }\r\n}'),(1004,'fireHandleRequestSecondaryHandles()','org.jhotdraw.draw.AbstractHandle.fireHandleRequestSecondaryHandles()','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireHandleRequestSecondaryHandles() {\r\n    HandleEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (HandleListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new HandleEvent(this, null);\r\n            }\r\n            ((HandleListener) (listeners[(i + 1)])).handleRequestSecondaryHandles(event);\r\n        }\r\n    }\r\n}'),(1005,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.AbstractHandle.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireUndoableEditHappened(UndoableEdit edit) {\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}'),(1006,'getBounds()','org.jhotdraw.draw.AbstractHandle.getBounds()','101','org.jhotdraw.draw.AbstractHandle','public final Rectangle getBounds() {\r\n    if ((bounds) == null) {\r\n        bounds = basicGetBounds();\r\n    }\r\n    return ((Rectangle) (bounds.clone()));\r\n}'),(1007,'getCursor()','org.jhotdraw.draw.AbstractHandle.getCursor()','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Returns a cursor for the handle.\r\n */\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR);\r\n}'),(1008,'getDrawingArea()','org.jhotdraw.draw.AbstractHandle.getDrawingArea()','101','org.jhotdraw.draw.AbstractHandle','public Rectangle getDrawingArea() {\r\n    Rectangle r = getBounds();\r\n    r.grow(2, 2);// grow by two pixels to take antialiasing into account\r\n\r\n    return r;\r\n}'),(1009,'getEditor()','org.jhotdraw.draw.AbstractHandle.getEditor()','101','org.jhotdraw.draw.AbstractHandle','public DrawingEditor getEditor() {\r\n    return view.getEditor();\r\n}'),(1010,'getHandlesize()','org.jhotdraw.draw.AbstractHandle.getHandlesize()','101','org.jhotdraw.draw.AbstractHandle','protected int getHandlesize() {\r\n    return ((Integer) (getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_SIZE)));\r\n}'),(1011,'getOwner()','org.jhotdraw.draw.AbstractHandle.getOwner()','101','org.jhotdraw.draw.AbstractHandle','public Figure getOwner() {\r\n    return owner;\r\n}'),(1012,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.AbstractHandle.getToolTipText(java.awt.Point)','101','org.jhotdraw.draw.AbstractHandle','public String getToolTipText(Point p) {\r\n    return null;\r\n}'),(1013,'getView()','org.jhotdraw.draw.AbstractHandle.getView()','101','org.jhotdraw.draw.AbstractHandle','public DrawingView getView() {\r\n    return view;\r\n}'),(1014,'invalidate()','org.jhotdraw.draw.AbstractHandle.invalidate()','101','org.jhotdraw.draw.AbstractHandle','public void invalidate() {\r\n    bounds = null;\r\n}'),(1015,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.AbstractHandle.isCombinableWith(org.jhotdraw.draw.Handle)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Returns true, if the given handle is an instance of the same\r\n * class or of a subclass of this handle,.\r\n */\r\npublic boolean isCombinableWith(Handle handle) {\r\n    return getClass().isAssignableFrom(handle.getClass());\r\n}'),(1016,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractHandle.keyPressed(java.awt.event.KeyEvent)','101','org.jhotdraw.draw.AbstractHandle','public void keyPressed(KeyEvent evt) {\r\n}'),(1017,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractHandle.keyReleased(java.awt.event.KeyEvent)','101','org.jhotdraw.draw.AbstractHandle','public void keyReleased(KeyEvent evt) {\r\n}'),(1018,'keyTyped(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractHandle.keyTyped(java.awt.event.KeyEvent)','101','org.jhotdraw.draw.AbstractHandle','public void keyTyped(KeyEvent evt) {\r\n}'),(1019,'removeHandleListener(org.jhotdraw.draw.HandleListener)','org.jhotdraw.draw.AbstractHandle.removeHandleListener(org.jhotdraw.draw.HandleListener)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Removes a listener for this handle.\r\n */\r\npublic void removeHandleListener(HandleListener l) {\r\n    listenerList.remove(HandleListener.class, l);\r\n}'),(1020,'setView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.AbstractHandle.setView(org.jhotdraw.draw.DrawingView)','101','org.jhotdraw.draw.AbstractHandle','public void setView(DrawingView view) {\r\n    this.view = view;\r\n}'),(1021,'trackDoubleClick(java.awt.Point,int)','org.jhotdraw.draw.AbstractHandle.trackDoubleClick(java.awt.Point,int)','101','org.jhotdraw.draw.AbstractHandle','/**\r\n * Tracks a double click.\r\n */\r\npublic void trackDoubleClick(Point p, int modifiersEx) {\r\n}'),(1022,'updateBounds()','org.jhotdraw.draw.AbstractHandle.updateBounds()','101','org.jhotdraw.draw.AbstractHandle','protected void updateBounds() {\r\n    Rectangle newBounds = basicGetBounds();\r\n    if (((bounds) == null) || (!(newBounds.equals(bounds)))) {\r\n        if ((bounds) != null) {\r\n            fireAreaInvalidated(getDrawingArea());\r\n        }\r\n        bounds = newBounds;\r\n        fireAreaInvalidated(getDrawingArea());\r\n    }\r\n}'),(1023,'viewTransformChanged()','org.jhotdraw.draw.AbstractHandle.viewTransformChanged()','101','org.jhotdraw.draw.AbstractHandle','public void viewTransformChanged() {\r\n    invalidate();\r\n}'),(1024,'-init-()','org.jhotdraw.draw.AbstractLayouter.-init-()','102','org.jhotdraw.draw.AbstractLayouter','AbstractLayouter() {\r\n}'),(1025,'getInsets(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractLayouter.getInsets(org.jhotdraw.draw.Figure)','102','org.jhotdraw.draw.AbstractLayouter','public Insets2D.Double getInsets(Figure child) {\r\n    Insets2D.Double value = CompositeFigure.LAYOUT_INSETS.get(child);\r\n    return value == null ? new Insets2D.Double() : ((Insets2D.Double) (value.clone()));\r\n}'),(1026,'-init-(boolean,boolean,boolean)','org.jhotdraw.draw.AbstractLineDecoration.-init-(boolean,boolean,boolean)','103','org.jhotdraw.draw.AbstractLineDecoration','/**\r\n * Constructs an arrow tip with the given angle and radius.\r\n */\r\npublic AbstractLineDecoration(boolean isFilled, boolean isStroked, boolean isSolid) {\r\n    this.isFilled = isFilled;\r\n    this.isStroked = isStroked;\r\n    this.isSolid = isSolid;\r\n}'),(1027,'draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractLineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','103','org.jhotdraw.draw.AbstractLineDecoration','/**\r\n * Draws the arrow tip in the direction specified by the given two\r\n * Points.. (template method)\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getTransformedDecoratorPath(f, p1, p2);\r\n    Color color;\r\n    if (isFilled) {\r\n        if (isSolid) {\r\n            color = AttributeKeys.STROKE_COLOR.get(f);\r\n        } else {\r\n            color = AttributeKeys.FILL_COLOR.get(f);\r\n        }\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.fill(path);\r\n        }\r\n    }\r\n    if (isStroked) {\r\n        color = AttributeKeys.STROKE_COLOR.get(f);\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.setStroke(AttributeKeys.getStroke(f));\r\n            g.draw(path);\r\n        }\r\n    }\r\n}'),(1028,'getDecorationRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractLineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)','103','org.jhotdraw.draw.AbstractLineDecoration','public double getDecorationRadius(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    double scaleFactor;\r\n    if (strokeWidth > 1.0F) {\r\n        scaleFactor = 1.0 + ((strokeWidth - 1.0) / 2.0);\r\n    } else {\r\n        scaleFactor = 1.0;\r\n    }\r\n    return (getDecoratorPathRadius(f)) * scaleFactor;\r\n}'),(1029,'getDecoratorPath(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractLineDecoration.getDecoratorPath(org.jhotdraw.draw.Figure)','103','org.jhotdraw.draw.AbstractLineDecoration','/**\r\n * Hook method to calculates the path of the decorator.\r\n */\r\nprotected abstract GeneralPath getDecoratorPath(Figure f);'),(1030,'getDecoratorPathRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractLineDecoration.getDecoratorPathRadius(org.jhotdraw.draw.Figure)','103','org.jhotdraw.draw.AbstractLineDecoration','/**\r\n * Hook method to calculates the radius of the decorator path.\r\n */\r\nprotected abstract double getDecoratorPathRadius(Figure f);'),(1031,'getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractLineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','103','org.jhotdraw.draw.AbstractLineDecoration','/**\r\n * Returns the drawing area of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getTransformedDecoratorPath(f, p1, p2);\r\n    Rectangle2D b = path.getBounds2D();\r\n    Rectangle2D.Double area = new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight());\r\n    if (isStroked) {\r\n        double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n        int strokeJoin = AttributeKeys.STROKE_JOIN.get(f);\r\n        double miterLimit = (AttributeKeys.STROKE_MITER_LIMIT.get(f)) * strokeWidth;\r\n        double grow;\r\n        if (strokeJoin == (BasicStroke.JOIN_MITER)) {\r\n            grow = ((int) (1 + ((strokeWidth / 2) * miterLimit)));\r\n        } else {\r\n            grow = ((int) (1 + (strokeWidth / 2)));\r\n        }\r\n        Geom.grow(area, grow, grow);\r\n    } else {\r\n        Geom.grow(area, 1, 1);// grow due to antialiasing\r\n\r\n    }\r\n    return area;\r\n}'),(1032,'getTransformedDecoratorPath(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractLineDecoration.getTransformedDecoratorPath(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','103','org.jhotdraw.draw.AbstractLineDecoration','private GeneralPath getTransformedDecoratorPath(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getDecoratorPath(f);\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    AffineTransform transform = new AffineTransform();\r\n    transform.translate(p1.x, p1.y);\r\n    transform.rotate(Math.atan2(((p1.x) - (p2.x)), ((p2.y) - (p1.y))));\r\n    // transform.rotate(Math.PI / 2);\r\n    if (strokeWidth > 1.0F) {\r\n        transform.scale((1.0 + ((strokeWidth - 1.0) / 2.0)), (1.0 + ((strokeWidth - 1.0) / 2.0)));\r\n    }\r\n    path.transform(transform);\r\n    return path;\r\n}'),(1033,'isFilled()','org.jhotdraw.draw.AbstractLineDecoration.isFilled()','103','org.jhotdraw.draw.AbstractLineDecoration','protected boolean isFilled() {\r\n    return isFilled;\r\n}'),(1034,'isSolid()','org.jhotdraw.draw.AbstractLineDecoration.isSolid()','103','org.jhotdraw.draw.AbstractLineDecoration','protected boolean isSolid() {\r\n    return isSolid;\r\n}'),(1035,'isStroked()','org.jhotdraw.draw.AbstractLineDecoration.isStroked()','103','org.jhotdraw.draw.AbstractLineDecoration','protected boolean isStroked() {\r\n    return isStroked;\r\n}'),(1036,'setFilled(boolean)','org.jhotdraw.draw.AbstractLineDecoration.setFilled(boolean)','103','org.jhotdraw.draw.AbstractLineDecoration','protected void setFilled(boolean b) {\r\n    isFilled = b;\r\n}'),(1037,'setSolid(boolean)','org.jhotdraw.draw.AbstractLineDecoration.setSolid(boolean)','103','org.jhotdraw.draw.AbstractLineDecoration','protected void setSolid(boolean b) {\r\n    isSolid = b;\r\n}'),(1038,'setStroked(boolean)','org.jhotdraw.draw.AbstractLineDecoration.setStroked(boolean)','103','org.jhotdraw.draw.AbstractLineDecoration','protected void setStroked(boolean b) {\r\n    isStroked = b;\r\n}'),(1039,'-init-()','org.jhotdraw.draw.AbstractLocator.-init-()','104','org.jhotdraw.draw.AbstractLocator','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractLocator() {\r\n}'),(1040,'locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','104','org.jhotdraw.draw.AbstractLocator','public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}'),(1041,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AbstractRotateHandle.-init-(org.jhotdraw.draw.Figure)','105','org.jhotdraw.draw.AbstractRotateHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractRotateHandle(Figure owner) {\r\n    super(owner);\r\n}'),(1042,'basicGetBounds()','org.jhotdraw.draw.AbstractRotateHandle.basicGetBounds()','105','org.jhotdraw.draw.AbstractRotateHandle','@Override\r\nprotected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(1043,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractRotateHandle.draw(java.awt.Graphics2D)','105','org.jhotdraw.draw.AbstractRotateHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        drawCircle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ROTATE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ROTATE_HANDLE_STROKE_COLOR))));\r\n    } else {\r\n        drawCircle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ROTATE_HANDLE_FILL_COLOR_DISABLED))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ROTATE_HANDLE_STROKE_COLOR_DISABLED))));\r\n    }\r\n}'),(1044,'getCenter()','org.jhotdraw.draw.AbstractRotateHandle.getCenter()','105','org.jhotdraw.draw.AbstractRotateHandle','protected abstract Point2D.Double getCenter();'),(1045,'getLocation()','org.jhotdraw.draw.AbstractRotateHandle.getLocation()','105','org.jhotdraw.draw.AbstractRotateHandle','public Point getLocation() {\r\n    if ((location) == null) {\r\n        return view.drawingToView(getOrigin());\r\n    }\r\n    return location;\r\n}'),(1046,'getOrigin()','org.jhotdraw.draw.AbstractRotateHandle.getOrigin()','105','org.jhotdraw.draw.AbstractRotateHandle','protected abstract Point2D.Double getOrigin();'),(1047,'getRestoreData()','org.jhotdraw.draw.AbstractRotateHandle.getRestoreData()','105','org.jhotdraw.draw.AbstractRotateHandle','protected Object getRestoreData() {\r\n    return restoreData;\r\n}'),(1048,'getStartTheta()','org.jhotdraw.draw.AbstractRotateHandle.getStartTheta()','105','org.jhotdraw.draw.AbstractRotateHandle','protected double getStartTheta() {\r\n    return startTheta;\r\n}'),(1049,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.AbstractRotateHandle.getToolTipText(java.awt.Point)','105','org.jhotdraw.draw.AbstractRotateHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    return labels.getString(\"handle.rotate.toolTipText\");\r\n}'),(1050,'getTransformedBounds()','org.jhotdraw.draw.AbstractRotateHandle.getTransformedBounds()','105','org.jhotdraw.draw.AbstractRotateHandle','protected Rectangle2D.Double getTransformedBounds() {\r\n    Figure owner = getOwner();\r\n    Rectangle2D.Double bounds = owner.getBounds();\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        Rectangle2D r = AttributeKeys.TRANSFORM.get(owner).createTransformedShape(bounds).getBounds2D();\r\n        bounds.x = r.getX();\r\n        bounds.y = r.getY();\r\n        bounds.width = r.getWidth();\r\n        bounds.height = r.getHeight();\r\n    }\r\n    return bounds;\r\n}'),(1051,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.AbstractRotateHandle.isCombinableWith(org.jhotdraw.draw.Handle)','105','org.jhotdraw.draw.AbstractRotateHandle','@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}'),(1052,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractRotateHandle.keyPressed(java.awt.event.KeyEvent)','105','org.jhotdraw.draw.AbstractRotateHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Figure f = getOwner();\r\n    center = getCenter();\r\n    if (f.isTransformable()) {\r\n        AffineTransform tx = new AffineTransform();\r\n        switch (evt.getKeyCode()) {\r\n            case KeyEvent.VK_UP :\r\n            case KeyEvent.VK_LEFT :\r\n                tx.rotate((((-1.0) / 180.0) * (Math.PI)), center.x, center.y);\r\n                evt.consume();\r\n                break;\r\n            case KeyEvent.VK_DOWN :\r\n            case KeyEvent.VK_RIGHT :\r\n                tx.rotate(((1.0 / 180.0) * (Math.PI)), center.x, center.y);\r\n                evt.consume();\r\n                break;\r\n        }\r\n        f.willChange();\r\n        f.transform(tx);\r\n        f.changed();\r\n        fireUndoableEditHappened(new TransformEdit(f, tx));\r\n    }\r\n}'),(1053,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.AbstractRotateHandle.trackEnd(java.awt.Point,java.awt.Point,int)','105','org.jhotdraw.draw.AbstractRotateHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    view.getDrawing().fireUndoableEditHappened(new RestoreDataEdit(getOwner(), restoreData));\r\n    fireAreaInvalidated(getDrawingArea());\r\n    location = null;\r\n    invalidate();\r\n    fireAreaInvalidated(getDrawingArea());\r\n}'),(1054,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.AbstractRotateHandle.trackStart(java.awt.Point,int)','105','org.jhotdraw.draw.AbstractRotateHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    location = new Point(anchor.x, anchor.y);\r\n    restoreData = getOwner().getTransformRestoreData();\r\n    transform = new AffineTransform();\r\n    center = getCenter();\r\n    Point2D.Double anchorPoint = view.viewToDrawing(anchor);\r\n    startTheta = Geom.angle(center.x, center.y, anchorPoint.x, anchorPoint.y);\r\n    startLength = Geom.length(center.x, center.y, anchorPoint.x, anchorPoint.y);\r\n}'),(1055,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.AbstractRotateHandle.trackStep(java.awt.Point,java.awt.Point,int)','105','org.jhotdraw.draw.AbstractRotateHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    location = new Point(lead.x, lead.y);\r\n    Point2D.Double leadPoint = view.viewToDrawing(lead);\r\n    double stepTheta = Geom.angle(center.x, center.y, leadPoint.x, leadPoint.y);\r\n    double stepLength = Geom.length(center.x, center.y, leadPoint.x, leadPoint.y);\r\n    double currentTheta = view.getConstrainer().constrainAngle((stepTheta - (startTheta)));\r\n    transform.setToIdentity();\r\n    transform.translate(center.x, center.y);\r\n    transform.rotate(currentTheta);\r\n    transform.translate((-(center.x)), (-(center.y)));\r\n    getOwner().willChange();\r\n    getOwner().restoreTransformTo(restoreData);\r\n    getOwner().transform(transform);\r\n    getOwner().changed();\r\n}'),(1056,'-init-()','org.jhotdraw.draw.AbstractTool.-init-()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractTool() {\r\n    editorProxy = new DrawingEditorProxy();\r\n    setInputMap(createInputMap());\r\n    setActionMap(createActionMap());\r\n}'),(1057,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.AbstractTool.activate(org.jhotdraw.draw.DrawingEditor)','106','org.jhotdraw.draw.AbstractTool','public void activate(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    editorProxy.setTarget(editor);\r\n    isActive = true;\r\n    // Repaint all handles\r\n    for (DrawingView v : editor.getDrawingViews()) {\r\n        v.repaintHandles();\r\n    }\r\n}'),(1058,'addToolListener(org.jhotdraw.draw.ToolListener)','org.jhotdraw.draw.AbstractTool.addToolListener(org.jhotdraw.draw.ToolListener)','106','org.jhotdraw.draw.AbstractTool','public void addToolListener(ToolListener l) {\r\n    listenerList.add(ToolListener.class, l);\r\n}'),(1059,'addUndoableEditListener(javax.swing.event.UndoableEditListener)','org.jhotdraw.draw.AbstractTool.addUndoableEditListener(javax.swing.event.UndoableEditListener)','106','org.jhotdraw.draw.AbstractTool','public void addUndoableEditListener(UndoableEditListener l) {\r\n    listenerList.add(UndoableEditListener.class, l);\r\n}'),(1060,'constrainPoint(java.awt.Point)','org.jhotdraw.draw.AbstractTool.constrainPoint(java.awt.Point)','106','org.jhotdraw.draw.AbstractTool','protected Point2D.Double constrainPoint(Point p) {\r\n    return constrainPoint(getView().viewToDrawing(p));\r\n}'),(1061,'constrainPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.AbstractTool.constrainPoint(java.awt.geom.Point2D$Double)','106','org.jhotdraw.draw.AbstractTool','protected Point2D.Double constrainPoint(Point2D.Double p) {\r\n    return getView().getConstrainer().constrainPoint(p);\r\n}'),(1062,'createActionMap()','org.jhotdraw.draw.AbstractTool.createActionMap()','106','org.jhotdraw.draw.AbstractTool','protected ActionMap createActionMap() {\r\n    ActionMap m = new ActionMap();\r\n    m.put(DeleteAction.ID, new DeleteAction());\r\n    m.put(SelectAllAction.ID, new SelectAllAction());\r\n    m.put(IncreaseHandleDetailLevelAction.ID, new IncreaseHandleDetailLevelAction(editorProxy));\r\n    m.put(MoveAction.East.ID, new MoveAction.East(editorProxy));\r\n    m.put(MoveAction.West.ID, new MoveAction.West(editorProxy));\r\n    m.put(MoveAction.North.ID, new MoveAction.North(editorProxy));\r\n    m.put(MoveAction.South.ID, new MoveAction.South(editorProxy));\r\n    m.put(MoveConstrainedAction.East.ID, new MoveConstrainedAction.East(editorProxy));\r\n    m.put(MoveConstrainedAction.West.ID, new MoveConstrainedAction.West(editorProxy));\r\n    m.put(MoveConstrainedAction.North.ID, new MoveConstrainedAction.North(editorProxy));\r\n    m.put(MoveConstrainedAction.South.ID, new MoveConstrainedAction.South(editorProxy));\r\n    m.put(CutAction.ID, new CutAction());\r\n    m.put(CopyAction.ID, new CopyAction());\r\n    m.put(PasteAction.ID, new PasteAction());\r\n    return m;\r\n}'),(1063,'createInputMap()','org.jhotdraw.draw.AbstractTool.createInputMap()','106','org.jhotdraw.draw.AbstractTool','protected InputMap createInputMap() {\r\n    InputMap m = new InputMap();\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), DeleteAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, 0), DeleteAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0), SelectAllAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK), SelectAllAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.META_DOWN_MASK), SelectAllAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), IncreaseHandleDetailLevelAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), MoveConstrainedAction.West.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), MoveConstrainedAction.East.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), MoveConstrainedAction.North.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), MoveConstrainedAction.South.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.ALT_DOWN_MASK), MoveAction.West.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.ALT_DOWN_MASK), MoveAction.East.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.ALT_DOWN_MASK), MoveAction.North.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.ALT_DOWN_MASK), MoveAction.South.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.SHIFT_DOWN_MASK), MoveAction.West.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.SHIFT_DOWN_MASK), MoveAction.East.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.SHIFT_DOWN_MASK), MoveAction.North.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.SHIFT_DOWN_MASK), MoveAction.South.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.CTRL_DOWN_MASK), MoveAction.West.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.CTRL_DOWN_MASK), MoveAction.East.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.CTRL_DOWN_MASK), MoveAction.North.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.CTRL_DOWN_MASK), MoveAction.South.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK), CopyAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.META_DOWN_MASK), CopyAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK), PasteAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.META_DOWN_MASK), PasteAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK), CutAction.ID);\r\n    m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.META_DOWN_MASK), CutAction.ID);\r\n    return m;\r\n}'),(1064,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.AbstractTool.deactivate(org.jhotdraw.draw.DrawingEditor)','106','org.jhotdraw.draw.AbstractTool','public void deactivate(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    isActive = false;\r\n}'),(1065,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.AbstractTool.draw(java.awt.Graphics2D)','106','org.jhotdraw.draw.AbstractTool','public void draw(Graphics2D g) {\r\n}'),(1066,'editCopy()','org.jhotdraw.draw.AbstractTool.editCopy()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Copies the selection into the clipboard.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editCopy() {\r\n}'),(1067,'editCut()','org.jhotdraw.draw.AbstractTool.editCut()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Cuts the selection into the clipboard.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editCut() {\r\n}'),(1068,'editDelete()','org.jhotdraw.draw.AbstractTool.editDelete()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Deletes the selection.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editDelete() {\r\n    getView().getDrawing().removeAll(getView().getSelectedFigures());\r\n}'),(1069,'editDuplicate()','org.jhotdraw.draw.AbstractTool.editDuplicate()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Duplicates the selection.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editDuplicate() {\r\n}'),(1070,'editPaste()','org.jhotdraw.draw.AbstractTool.editPaste()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Pastes the contents of the clipboard.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editPaste() {\r\n}'),(1071,'fireAreaInvalidated(java.awt.Rectangle)','org.jhotdraw.draw.AbstractTool.fireAreaInvalidated(java.awt.Rectangle)','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(Rectangle invalidatedArea) {\r\n    ToolEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ToolListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new ToolEvent(this, getView(), invalidatedArea);\r\n\r\n            ((ToolListener) (listeners[(i + 1)])).areaInvalidated(event);\r\n        }\r\n    }\r\n}'),(1072,'fireAreaInvalidated(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.AbstractTool.fireAreaInvalidated(java.awt.geom.Rectangle2D$Double)','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(Rectangle2D.Double r) {\r\n    Point p1 = getView().drawingToView(new Point2D.Double(r.x, r.y));\r\n    Point p2 = getView().drawingToView(new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n    fireAreaInvalidated(new Rectangle(p1.x, p1.y, ((p2.x) - (p1.x)), ((p2.y) - (p1.y))));\r\n}'),(1073,'fireToolDone()','org.jhotdraw.draw.AbstractTool.fireToolDone()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireToolDone() {\r\n    ToolEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ToolListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new ToolEvent(this, getView(), new Rectangle(0, 0, (-1), (-1)));\r\n\r\n            ((ToolListener) (listeners[(i + 1)])).toolDone(event);\r\n        }\r\n    }\r\n}'),(1074,'fireToolStarted(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.AbstractTool.fireToolStarted(org.jhotdraw.draw.DrawingView)','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireToolStarted(DrawingView view) {\r\n    ToolEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ToolListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new ToolEvent(this, view, new Rectangle(0, 0, (-1), (-1)));\r\n\r\n            ((ToolListener) (listeners[(i + 1)])).toolStarted(event);\r\n        }\r\n    }\r\n}'),(1075,'getActionMap()','org.jhotdraw.draw.AbstractTool.getActionMap()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Gets the action map of the Tool\r\n */\r\npublic ActionMap getActionMap() {\r\n    return actionMap;\r\n}'),(1076,'getDrawing()','org.jhotdraw.draw.AbstractTool.getDrawing()','106','org.jhotdraw.draw.AbstractTool','protected Drawing getDrawing() {\r\n    return getView().getDrawing();\r\n}'),(1077,'getEditor()','org.jhotdraw.draw.AbstractTool.getEditor()','106','org.jhotdraw.draw.AbstractTool','protected DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(1078,'getInputMap()','org.jhotdraw.draw.AbstractTool.getInputMap()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Gets the input map of the Tool\r\n */\r\npublic InputMap getInputMap() {\r\n    return inputMap;\r\n}'),(1079,'getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public String getToolTipText(DrawingView view, MouseEvent evt) {\r\n    return null;\r\n}'),(1080,'getView()','org.jhotdraw.draw.AbstractTool.getView()','106','org.jhotdraw.draw.AbstractTool','protected DrawingView getView() {\r\n    return editor.getActiveView();\r\n}'),(1081,'isActive()','org.jhotdraw.draw.AbstractTool.isActive()','106','org.jhotdraw.draw.AbstractTool','public boolean isActive() {\r\n    return isActive;\r\n}'),(1082,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractTool.keyPressed(java.awt.event.KeyEvent)','106','org.jhotdraw.draw.AbstractTool','/**\r\n * The Tool uses the InputMap to determine what to do, when a key is pressed.\r\n * If the corresponding value of the InputMap is a String, the ActionMap\r\n * of the tool is used, to find the action to be performed.\r\n * If the corresponding value of the InputMap is a ActionListener, the\r\n * actionPerformed method of the ActionListener is performed.\r\n */\r\npublic void keyPressed(KeyEvent evt) {\r\n    if (!(evt.isConsumed())) {\r\n        if ((evt.getSource()) instanceof Container) {\r\n            editor.setActiveView(editor.findView(((Container) (evt.getSource()))));\r\n        }\r\n        if ((inputMap) != null) {\r\n            Object obj = inputMap.get(KeyStroke.getKeyStroke(evt.getKeyCode(), evt.getModifiers(), false));\r\n            ActionListener al = null;\r\n            if (obj instanceof ActionListener) {\r\n                al = ((ActionListener) (obj));\r\n            } else\r\n                if ((obj != null) && ((actionMap) != null)) {\r\n                    al = actionMap.get(obj);\r\n                }\r\n\r\n            if (al != null) {\r\n                evt.consume();\r\n                al.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"tool\", evt.getWhen(), evt.getModifiers()));\r\n                fireToolDone();\r\n            }\r\n        }\r\n    }\r\n}'),(1083,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractTool.keyReleased(java.awt.event.KeyEvent)','106','org.jhotdraw.draw.AbstractTool','public void keyReleased(KeyEvent evt) {\r\n    fireToolDone();\r\n}'),(1084,'keyTyped(java.awt.event.KeyEvent)','org.jhotdraw.draw.AbstractTool.keyTyped(java.awt.event.KeyEvent)','106','org.jhotdraw.draw.AbstractTool','public void keyTyped(KeyEvent evt) {\r\n}'),(1085,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.mouseClicked(java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public void mouseClicked(MouseEvent evt) {\r\n}'),(1086,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.mouseEntered(java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public void mouseEntered(MouseEvent evt) {\r\n    /* if (! isWorking) {\n    editor.setActiveView(editor.findView((Container) evt.getSource()));\n    }\n     */\r\n}'),(1087,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.mouseExited(java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public void mouseExited(MouseEvent evt) {\r\n}'),(1088,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.mouseMoved(java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public void mouseMoved(MouseEvent evt) {\r\n}'),(1089,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.mousePressed(java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public void mousePressed(MouseEvent evt) {\r\n    DrawingView view = editor.findView(((Container) (evt.getSource())));\r\n    view.requestFocus();\r\n    anchor = new Point(evt.getX(), evt.getY());\r\n    isWorking = true;\r\n    fireToolStarted(view);\r\n}'),(1090,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.AbstractTool.mouseReleased(java.awt.event.MouseEvent)','106','org.jhotdraw.draw.AbstractTool','public void mouseReleased(MouseEvent evt) {\r\n    isWorking = false;\r\n}'),(1091,'removeToolListener(org.jhotdraw.draw.ToolListener)','org.jhotdraw.draw.AbstractTool.removeToolListener(org.jhotdraw.draw.ToolListener)','106','org.jhotdraw.draw.AbstractTool','public void removeToolListener(ToolListener l) {\r\n    listenerList.remove(ToolListener.class, l);\r\n}'),(1092,'removeUndoableEditListener(javax.swing.event.UndoableEditListener)','org.jhotdraw.draw.AbstractTool.removeUndoableEditListener(javax.swing.event.UndoableEditListener)','106','org.jhotdraw.draw.AbstractTool','public void removeUndoableEditListener(UndoableEditListener l) {\r\n    listenerList.remove(UndoableEditListener.class, l);\r\n}'),(1093,'setActionMap(javax.swing.ActionMap)','org.jhotdraw.draw.AbstractTool.setActionMap(javax.swing.ActionMap)','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Sets the ActionMap for the Tool.\r\n *\r\n * @see #keyPressed\r\n */\r\npublic void setActionMap(ActionMap newValue) {\r\n    actionMap = newValue;\r\n}'),(1094,'setInputMap(javax.swing.InputMap)','org.jhotdraw.draw.AbstractTool.setInputMap(javax.swing.InputMap)','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Sets the InputMap for the Tool.\r\n *\r\n * @see #keyPressed\r\n * @see #setActionMap\r\n */\r\npublic void setInputMap(InputMap newValue) {\r\n    inputMap = newValue;\r\n}'),(1095,'supportsHandleInteraction()','org.jhotdraw.draw.AbstractTool.supportsHandleInteraction()','106','org.jhotdraw.draw.AbstractTool','/**\r\n * Returns true, if this tool lets the user interact with handles.\r\n * <p>\r\n * Handles may draw differently, if interaction is not possible.\r\n *\r\n * @return True, if this tool supports interaction with the handles.\r\n */\r\npublic boolean supportsHandleInteraction() {\r\n    return false;\r\n}'),(1096,'updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','org.jhotdraw.draw.AbstractTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','106','org.jhotdraw.draw.AbstractTool','public void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        Handle handle = view.findHandle(p);\r\n        if (handle != null) {\r\n            view.setCursor(handle.getCursor());\r\n        } else {\r\n            Figure figure = view.findFigure(p);\r\n            Point2D.Double point = view.viewToDrawing(p);\r\n            Drawing drawing = view.getDrawing();\r\n            while ((figure != null) && (!(figure.isSelectable()))) {\r\n                figure = drawing.findFigureBehind(point, figure);\r\n            } \r\n            if (figure != null) {\r\n                view.setCursor(figure.getCursor(view.viewToDrawing(p)));\r\n            } else {\r\n                view.setCursor(Cursor.getDefaultCursor());\r\n            }\r\n        }\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(1097,'viewToDrawing(java.awt.Point)','org.jhotdraw.draw.AbstractTool.viewToDrawing(java.awt.Point)','106','org.jhotdraw.draw.AbstractTool','protected Point2D.Double viewToDrawing(Point p) {\r\n    return constrainPoint(getView().viewToDrawing(p));\r\n}'),(1098,'-init-()','org.jhotdraw.draw.ArrowTip.-init-()','107','org.jhotdraw.draw.ArrowTip','public ArrowTip() {\r\n    this(0.35, 12, 11.3);\r\n}'),(1099,'-init-(double,double,double)','org.jhotdraw.draw.ArrowTip.-init-(double,double,double)','107','org.jhotdraw.draw.ArrowTip','/**\r\n * Constructs an arrow tip with the specified angle and outer and inner\r\n * radius.\r\n */\r\npublic ArrowTip(double angle, double outerRadius, double innerRadius) {\r\n    this(angle, outerRadius, innerRadius, true, false, true);\r\n}'),(1100,'-init-(double,double,double,boolean,boolean,boolean)','org.jhotdraw.draw.ArrowTip.-init-(double,double,double,boolean,boolean,boolean)','107','org.jhotdraw.draw.ArrowTip','/**\r\n * Constructs an arrow tip with the specified parameters.\r\n */\r\npublic ArrowTip(double angle, double outerRadius, double innerRadius, boolean isFilled, boolean isStroked, boolean isSolid) {\r\n    super(isFilled, isStroked, isSolid);\r\n    this.angle = angle;\r\n    this.outerRadius = outerRadius;\r\n    this.innerRadius = innerRadius;\r\n}'),(1101,'getDecoratorPath(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ArrowTip.getDecoratorPath(org.jhotdraw.draw.Figure)','107','org.jhotdraw.draw.ArrowTip','protected GeneralPath getDecoratorPath(Figure f) {\r\n    // FIXME - This should take the stroke join an the outer radius into\r\n    // account to compute the offset properly.\r\n    double offset = (isStroked()) ? 1 : 0;\r\n    GeneralPath path = new GeneralPath();\r\n    path.moveTo(((float) ((outerRadius) * (Math.sin((-(angle)))))), ((float) (offset + ((outerRadius) * (Math.cos((-(angle))))))));\r\n    path.lineTo(0, ((float) (offset)));\r\n    path.lineTo(((float) ((outerRadius) * (Math.sin(angle)))), ((float) (offset + ((outerRadius) * (Math.cos(angle))))));\r\n    if ((innerRadius) != 0) {\r\n        path.lineTo(0, ((float) ((innerRadius) + offset)));\r\n        path.closePath();\r\n    }\r\n    return path;\r\n}'),(1102,'getDecoratorPathRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ArrowTip.getDecoratorPathRadius(org.jhotdraw.draw.Figure)','107','org.jhotdraw.draw.ArrowTip','protected double getDecoratorPathRadius(Figure f) {\r\n    double offset = (isStroked()) ? 0.5 : -0.1;\r\n    return (innerRadius) + offset;\r\n}'),(1103,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.ArrowTip.read(org.jhotdraw.xml.DOMInput)','107','org.jhotdraw.draw.ArrowTip','public void read(DOMInput in) {\r\n    angle = in.getAttribute(\"angle\", 0.35F);\r\n    innerRadius = in.getAttribute(\"innerRadius\", 12.0F);\r\n    outerRadius = in.getAttribute(\"outerRadius\", 12.0F);\r\n    setFilled(in.getAttribute(\"isFilled\", false));\r\n    setStroked(in.getAttribute(\"isStroked\", false));\r\n    setSolid(in.getAttribute(\"isSolid\", false));\r\n}'),(1104,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.ArrowTip.write(org.jhotdraw.xml.DOMOutput)','107','org.jhotdraw.draw.ArrowTip','public void write(DOMOutput out) {\r\n    out.addAttribute(\"angle\", angle);\r\n    out.addAttribute(\"innerRadius\", innerRadius);\r\n    out.addAttribute(\"outerRadius\", outerRadius);\r\n    out.addAttribute(\"isFilled\", isFilled());\r\n    out.addAttribute(\"isStroked\", isStroked());\r\n    out.addAttribute(\"isSolid\", isSolid());\r\n}'),(1105,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','org.jhotdraw.draw.AttributeChangeEdit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','108','org.jhotdraw.draw.AttributeChangeEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeChangeEdit(Figure owner, AttributeKey<T> name, T oldValue, T newValue) {\r\n    this.owner = owner;\r\n    this.name = name;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(1106,'getPresentationName()','org.jhotdraw.draw.AttributeChangeEdit.getPresentationName()','108','org.jhotdraw.draw.AttributeChangeEdit','@Override\r\npublic String getPresentationName() {\r\n    // FIXME - Localize me\r\n    return \"Eigenschaft u00e4ndern\";\r\n}'),(1107,'redo()','org.jhotdraw.draw.AttributeChangeEdit.redo()','108','org.jhotdraw.draw.AttributeChangeEdit','@Override\r\npublic void redo() throws CannotRedoException {\r\n    super.redo();\r\n    owner.willChange();\r\n    owner.setAttribute(name, newValue);\r\n    owner.changed();\r\n}'),(1108,'undo()','org.jhotdraw.draw.AttributeChangeEdit.undo()','108','org.jhotdraw.draw.AttributeChangeEdit','@Override\r\npublic void undo() throws CannotUndoException {\r\n    super.undo();\r\n    owner.willChange();\r\n    owner.setAttribute(name, oldValue);\r\n    owner.changed();\r\n}'),(1109,'-init-(java.lang.String,java.lang.Class)','org.jhotdraw.draw.AttributeKey.-init-(java.lang.String,java.lang.Class)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Creates a new instance with the specified attribute key, type token class,\r\n * default value null, and allowing null values.\r\n */\r\npublic AttributeKey(String key, Class<T> clazz) {\r\n    this(key, clazz, null, true);\r\n}'),(1110,'-init-(java.lang.String,java.lang.Class,java.lang.Object)','org.jhotdraw.draw.AttributeKey.-init-(java.lang.String,java.lang.Class,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Creates a new instance with the specified attribute key, type token class,\r\n * and default value, and allowing null values.\r\n */\r\npublic AttributeKey(String key, Class<T> clazz, T defaultValue) {\r\n    this(key, clazz, defaultValue, true);\r\n}'),(1111,'-init-(java.lang.String,java.lang.Class,java.lang.Object,boolean)','org.jhotdraw.draw.AttributeKey.-init-(java.lang.String,java.lang.Class,java.lang.Object,boolean)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Creates a new instance with the specified attribute key, type token class,\r\n * default value, and allowing or disallowing null values.\r\n */\r\npublic AttributeKey(String key, Class<T> clazz, T defaultValue, boolean isNullValueAllowed) {\r\n    this.key = key;\r\n    this.clazz = clazz;\r\n    this.defaultValue = defaultValue;\r\n    this.isNullValueAllowed = isNullValueAllowed;\r\n}'),(1112,'-init-(java.lang.String,java.lang.Class,java.lang.Object,boolean,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.AttributeKey.-init-(java.lang.String,java.lang.Class,java.lang.Object,boolean,org.jhotdraw.util.ResourceBundleUtil)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Creates a new instance with the specified attribute key, type token class,\r\n * default value, and allowing or disallowing null values.\r\n *\r\n * @param key\r\n * 		The key string.\r\n * @param clazz\r\n * 		This is used as a \"type token\" for assignability checks\r\n * 		at runtime.\r\n * @param isNullValueAllowed\r\n * 		whether null values are allowed.\r\n * @param labels\r\n * 		ResourceBundle for human friendly representation of this\r\n * 		attribute key. The ResourceBundle must have a property named\r\n * 		{@code \"attribute.\" + key + \".text\"}.\r\n */\r\npublic AttributeKey(String key, Class<T> clazz, T defaultValue, boolean isNullValueAllowed, ResourceBundleUtil labels) {\r\n    this.key = key;\r\n    this.clazz = clazz;\r\n    this.defaultValue = defaultValue;\r\n    this.isNullValueAllowed = isNullValueAllowed;\r\n    this.labels = labels;\r\n}'),(1113,'-init-()','org.jhotdraw.draw.AttributeKey.-init-()','109','org.jhotdraw.draw.AttributeKey','1() {\r\n}'),(1114,'basicSet(org.jhotdraw.draw.Figure,java.lang.Object)','org.jhotdraw.draw.AttributeKey.basicSet(org.jhotdraw.draw.Figure,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Sets a value on the specified figure without invoking {@code willChange}\r\n * and {@code changed} on the figure.\r\n * <p>\r\n * This method can be used to efficiently build a drawing from an\r\n * {@link InputFormat}.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void basicSet(Figure f, T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    f.setAttribute(this, value);\r\n}'),(1115,'basicSetClone(org.jhotdraw.draw.Figure,java.lang.Object)','org.jhotdraw.draw.AttributeKey.basicSetClone(org.jhotdraw.draw.Figure,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Sets a clone of a value on the specified figure, without invoking\r\n * {@code willChange} and {@code changed} on the figure.\r\n * <p>\r\n * This method can be used to efficiently build a drawing from an\r\n * {@link InputFormat}.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void basicSetClone(Figure f, T value) {\r\n    try {\r\n        basicSet(f, (value == null ? null : clazz.cast(Methods.invoke(value, \"clone\"))));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(1116,'equals(java.lang.Object)','org.jhotdraw.draw.AttributeKey.equals(java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','@Override\r\npublic boolean equals(Object that) {\r\n    if (that instanceof AttributeKey) {\r\n        return ((AttributeKey) (that)).key.equals(this.key);\r\n    }\r\n    return false;\r\n}'),(1117,'get(java.util.Map)','org.jhotdraw.draw.AttributeKey.get(java.util.Map)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Gets the value of the attribute denoted by this AttributeKey from\r\n * a Map.\r\n *\r\n * @param a\r\n * 		A Map.\r\n * @return The value of the attribute.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic T get(Map<AttributeKey, Object> a) {\r\n    T value = ((T) (a.get(this)));\r\n    return (value == null) && (!(isNullValueAllowed)) ? defaultValue : value;\r\n}'),(1118,'get(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKey.get(org.jhotdraw.draw.Figure)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Gets the value of the attribute denoted by this AttributeKey from\r\n * a Figure.\r\n *\r\n * @param f\r\n * 		A figure.\r\n * @return The value of the attribute.\r\n */\r\npublic T get(Figure f) {\r\n    T value = ((T) (f.getAttribute(this)));\r\n    return (value == null) && (!(isNullValueAllowed)) ? defaultValue : value;\r\n}'),(1119,'getClone(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKey.getClone(org.jhotdraw.draw.Figure)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Gets a clone of the value from the Figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic T getClone(Figure f) {\r\n    T value = get(f);\r\n    try {\r\n        return value == null ? null : clazz.cast(Methods.invoke(value, \"clone\"));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(1120,'getDefaultValue()','org.jhotdraw.draw.AttributeKey.getDefaultValue()','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Returns the default value of the attribute.\r\n *\r\n * @return the default value.\r\n */\r\npublic T getDefaultValue() {\r\n    return defaultValue;\r\n}'),(1121,'getKey()','org.jhotdraw.draw.AttributeKey.getKey()','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Returns the key string.\r\n *\r\n * @return key string.\r\n */\r\npublic String getKey() {\r\n    return key;\r\n}'),(1122,'getPresentationName()','org.jhotdraw.draw.AttributeKey.getPresentationName()','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Returns a localized human friendly presentation of the key.\r\n *\r\n * @return the presentation name of the key.\r\n */\r\npublic String getPresentationName() {\r\n    return (labels) == null ? key : labels.getString(((\"attribute.\" + (key)) + \".text\"));\r\n}'),(1123,'hashCode()','org.jhotdraw.draw.AttributeKey.hashCode()','109','org.jhotdraw.draw.AttributeKey','@Override\r\npublic int hashCode() {\r\n    return key.hashCode();\r\n}'),(1124,'isAssignable(java.lang.Object)','org.jhotdraw.draw.AttributeKey.isAssignable(java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Returns true if the specified value is assignable with this key.\r\n *\r\n * @param value\r\n * 		\r\n * @return True if assignable.\r\n */\r\npublic boolean isAssignable(Object value) {\r\n    if (value == null) {\r\n        return isNullValueAllowed();\r\n    }\r\n    return clazz.isInstance(value);\r\n}'),(1125,'isNullValueAllowed()','org.jhotdraw.draw.AttributeKey.isNullValueAllowed()','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Returns true if null values are allowed.\r\n *\r\n * @return true if null values are allowed.\r\n */\r\npublic boolean isNullValueAllowed() {\r\n    return isNullValueAllowed;\r\n}'),(1126,'put(java.util.Map,java.lang.Object)','org.jhotdraw.draw.AttributeKey.put(java.util.Map,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Use this method to perform a typeface put operation of an attribute\r\n * into a Map.\r\n *\r\n * @param a\r\n * 		An attribute map.\r\n * @param value\r\n * 		The new value.\r\n * @return The old value.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic T put(Map<AttributeKey, Object> a, T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    return ((T) (a.put(this, value)));\r\n}'),(1127,'set(java.util.Map,java.lang.Object)','org.jhotdraw.draw.AttributeKey.set(java.util.Map,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Use this method to perform a typeface put operation of an attribute\r\n * into a Map.\r\n *\r\n * @param a\r\n * 		An attribute map.\r\n * @param value\r\n * 		The new value.\r\n */\r\npublic void set(Map<AttributeKey, Object> a, T value) {\r\n    put(a, value);\r\n}'),(1128,'set(org.jhotdraw.draw.Figure,java.lang.Object)','org.jhotdraw.draw.AttributeKey.set(org.jhotdraw.draw.Figure,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Convenience method for setting a value on the\r\n * specified figure and calling willChange before and changed\r\n * after setting the value.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void set(Figure f, T value) {\r\n    f.willChange();\r\n    basicSet(f, value);\r\n    f.changed();\r\n}'),(1129,'setClone(java.util.Map,java.lang.Object)','org.jhotdraw.draw.AttributeKey.setClone(java.util.Map,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Sets a clone of the value to the Figure without firing events.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic void setClone(Map<AttributeKey, Object> a, T value) {\r\n    try {\r\n        set(a, (value == null ? null : ((T) (Methods.invoke(value, \"clone\")))));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(1130,'setClone(org.jhotdraw.draw.Figure,java.lang.Object)','org.jhotdraw.draw.AttributeKey.setClone(org.jhotdraw.draw.Figure,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Convenience method for seting a clone of a value on the\r\n * specified figure and calling willChange before and changed\r\n * after setting the value.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void setClone(Figure f, T value) {\r\n    f.willChange();\r\n    basicSetClone(f, value);\r\n    f.changed();\r\n}'),(1131,'setUndoable(org.jhotdraw.draw.Figure,java.lang.Object)','org.jhotdraw.draw.AttributeKey.setUndoable(org.jhotdraw.draw.Figure,java.lang.Object)','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Sets the attribute and returns an UndoableEditEvent which can be used\r\n * to undo it.\r\n */\r\npublic UndoableEdit setUndoable(final Figure figure, final T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    final Object restoreData = figure.getAttributesRestoreData();\r\n    figure.willChange();\r\n    figure.setAttribute(this, value);\r\n    figure.changed();\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            return AttributeKey.this.getPresentationName();\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            figure.willChange();\r\n            figure.restoreAttributesTo(restoreData);\r\n            figure.changed();\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            figure.willChange();\r\n            figure.setAttribute(AttributeKey.this, value);\r\n            figure.changed();\r\n        }\r\n    };\r\n    return edit;\r\n}'),(1132,'toString()','org.jhotdraw.draw.AttributeKey.toString()','109','org.jhotdraw.draw.AttributeKey','/**\r\n * Returns the key string.\r\n */\r\n@Override\r\npublic String toString() {\r\n    return key;\r\n}'),(1133,'-init-()','org.jhotdraw.draw.AttributeKeys.-init-()','116','org.jhotdraw.draw.AttributeKeys','AttributeKeys() {\r\n}'),(1134,'getFont(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getFont(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','public static Font getFont(Figure f) {\r\n    Font prototype = AttributeKeys.FONT_FACE.get(f);\r\n    if (prototype == null) {\r\n        return null;\r\n    }\r\n    if ((AttributeKeys.getFontStyle(f)) != (Font.PLAIN)) {\r\n        return prototype.deriveFont(AttributeKeys.getFontStyle(f), AttributeKeys.FONT_SIZE.get(f).floatValue());\r\n    } else {\r\n        return prototype.deriveFont(AttributeKeys.FONT_SIZE.get(f).floatValue());\r\n    }\r\n}'),(1135,'getFontStyle(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getFontStyle(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','public static int getFontStyle(Figure f) {\r\n    int style = Font.PLAIN;\r\n    if (AttributeKeys.FONT_BOLD.get(f)) {\r\n        style |= Font.BOLD;\r\n    }\r\n    if (AttributeKeys.FONT_ITALIC.get(f)) {\r\n        style |= Font.ITALIC;\r\n    }\r\n    return style;\r\n}'),(1136,'getHitStroke(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getHitStroke(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','/**\r\n * Returns a stroke which is useful for hit-testing.\r\n * The stroke reflects the stroke width, but not the stroke dashes\r\n * attribute.\r\n *\r\n * @param f\r\n * 		\r\n * @return A stroke suited for creating a shape for hit testing.\r\n */\r\npublic static Stroke getHitStroke(Figure f) {\r\n    double strokeWidth = Math.max(1, AttributeKeys.STROKE_WIDTH.get(f));\r\n    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));\r\n    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, null, Math.max(0, ((float) ((AttributeKeys.STROKE_DASH_PHASE.get(f)) * dashFactor))));\r\n            // not reached\r\n        case DOUBLE :\r\n            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, null, Math.max(0, ((float) ((AttributeKeys.STROKE_DASH_PHASE.get(f).floatValue()) * dashFactor))));\r\n            // not reached\r\n    }\r\n}'),(1137,'getPerpendicularDrawGrowth(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getPerpendicularDrawGrowth(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * draw (aka stroke) its shape as specified by the FILL_UNDER_STROKE and\r\n * STROKE_POSITION attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularDrawGrowth(Figure f) {\r\n    double grow;\r\n    double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(f)) {\r\n        case INSIDE :\r\n            grow = strokeWidth / (-2.0);\r\n            break;\r\n        case OUTSIDE :\r\n            grow = strokeWidth / 2.0;\r\n            break;\r\n        case CENTER :\r\n        default :\r\n            grow = 0.0F;\r\n            break;\r\n    }\r\n    return grow;\r\n}'),(1138,'getPerpendicularFillGrowth(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getPerpendicularFillGrowth(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * fill its shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularFillGrowth(Figure f) {\r\n    double grow;\r\n    double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n    AttributeKeys.StrokePlacement placement = AttributeKeys.STROKE_PLACEMENT.get(f);\r\n    switch (AttributeKeys.FILL_UNDER_STROKE.get(f)) {\r\n        case FULL :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = 0.0F;\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = strokeWidth;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = strokeWidth / 2.0;\r\n                    break;\r\n            }\r\n            break;\r\n        case NONE :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = -strokeWidth;\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = 0.0F;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = strokeWidth / (-2.0);\r\n                    break;\r\n            }\r\n            break;\r\n        case CENTER :\r\n        default :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = strokeWidth / (-2.0);\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = strokeWidth / 2.0;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = 0.0;\r\n                    break;\r\n            }\r\n            break;\r\n    }\r\n    return grow;\r\n}'),(1139,'getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularHitGrowth(Figure f) {\r\n    double grow;\r\n    if ((AttributeKeys.STROKE_COLOR.get(f)) == null) {\r\n        grow = AttributeKeys.getPerpendicularFillGrowth(f);\r\n    } else {\r\n        double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n        grow = (AttributeKeys.getPerpendicularDrawGrowth(f)) + (strokeWidth / 2.0);\r\n    }\r\n    return grow;\r\n}'),(1140,'getStroke(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getStroke(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','public static Stroke getStroke(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));\r\n    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;\r\n    double dashPhase = AttributeKeys.STROKE_DASH_PHASE.get(f);\r\n    double[] ddashes = AttributeKeys.STROKE_DASHES.get(f);\r\n    float[] dashes = null;\r\n    boolean isAllZeroes = true;\r\n    if (ddashes != null) {\r\n        dashes = new float[ddashes.length];\r\n        double dashSize = 0.0F;\r\n        for (int i = 0; i < (dashes.length); i++) {\r\n            dashes[i] = Math.max(0.0F, ((float) ((ddashes[i]) * dashFactor)));\r\n            dashSize += dashes[i];\r\n            if (isAllZeroes && ((dashes[i]) != 0)) {\r\n                isAllZeroes = false;\r\n            }\r\n        }\r\n        if (((dashes.length) % 2) == 1) {\r\n            dashSize *= 2;\r\n        }\r\n        if (dashPhase < 0) {\r\n            dashPhase = dashSize + (dashPhase % dashSize);\r\n        }\r\n    }\r\n    if (isAllZeroes) {\r\n        // dont draw dashes, if all values are 0.\r\n        dashes = null;\r\n    }\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));\r\n            // not reached\r\n        case DOUBLE :\r\n            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));\r\n            // not reached\r\n    }\r\n}'),(1141,'getStrokeTotalMiterLimit(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getStrokeTotalMiterLimit(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','/**\r\n * Convenience method for computing the total stroke miter limit from the\r\n * STROKE_MITER_LIMIT, and IS_STROKE_MITER_LIMIT factor.\r\n */\r\npublic static double getStrokeTotalMiterLimit(Figure f) {\r\n    if (AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.get(f)) {\r\n        return (AttributeKeys.STROKE_MITER_LIMIT.get(f)) * (AttributeKeys.STROKE_WIDTH.get(f));\r\n    } else {\r\n        return AttributeKeys.STROKE_MITER_LIMIT.get(f);\r\n    }\r\n}'),(1142,'getStrokeTotalWidth(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.AttributeKeys.getStrokeTotalWidth(org.jhotdraw.draw.Figure)','116','org.jhotdraw.draw.AttributeKeys','/**\r\n * Convenience method for computing the total stroke width from the\r\n * STROKE_WIDTH, STROKE_INNER_WIDTH and STROKE_TYPE attributes.\r\n */\r\npublic static double getStrokeTotalWidth(Figure f) {\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return AttributeKeys.STROKE_WIDTH.get(f);\r\n            // break; not reached\r\n        case DOUBLE :\r\n            return (AttributeKeys.STROKE_WIDTH.get(f)) * (1.0 + (AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)));\r\n            // break; not reached\r\n    }\r\n}'),(1143,'-init-()','org.jhotdraw.draw.AttributeKeys$Alignment.-init-()','110','org.jhotdraw.draw.AttributeKeys$Alignment','Alignment() {\r\n}'),(1144,'-init-()','org.jhotdraw.draw.AttributeKeys$Orientation.-init-()','111','org.jhotdraw.draw.AttributeKeys$Orientation','Orientation() {\r\n}'),(1145,'-init-()','org.jhotdraw.draw.AttributeKeys$StrokePlacement.-init-()','112','org.jhotdraw.draw.AttributeKeys$StrokePlacement','StrokePlacement() {\r\n}'),(1146,'-init-()','org.jhotdraw.draw.AttributeKeys$StrokeType.-init-()','113','org.jhotdraw.draw.AttributeKeys$StrokeType','StrokeType() {\r\n}'),(1147,'-init-()','org.jhotdraw.draw.AttributeKeys$Underfill.-init-()','114','org.jhotdraw.draw.AttributeKeys$Underfill','Underfill() {\r\n}'),(1148,'-init-()','org.jhotdraw.draw.AttributeKeys$WindingRule.-init-()','115','org.jhotdraw.draw.AttributeKeys$WindingRule','WindingRule() {\r\n}'),(1149,'-init-(org.jhotdraw.draw.BezierFigure,int,int)','org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int)','117','org.jhotdraw.draw.BezierControlPointHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierControlPointHandle(BezierFigure owner, int index, int coord) {\r\n    this(owner, index, coord, owner);\r\n}'),(1150,'-init-(org.jhotdraw.draw.BezierFigure,int,int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int,org.jhotdraw.draw.Figure)','117','org.jhotdraw.draw.BezierControlPointHandle','public BezierControlPointHandle(BezierFigure owner, int index, int coord, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.controlPointIndex = coord;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}'),(1151,'-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)','117','org.jhotdraw.draw.BezierControlPointHandle','1( $anonymous0,  $anonymous1,  $anonymous2,  $anonymous3) {\r\n}'),(1152,'basicGetBounds()','org.jhotdraw.draw.BezierControlPointHandle.basicGetBounds()','117','org.jhotdraw.draw.BezierControlPointHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(1153,'dispose()','org.jhotdraw.draw.BezierControlPointHandle.dispose()','117','org.jhotdraw.draw.BezierControlPointHandle','public void dispose() {\r\n    super.dispose();\r\n    transformOwner.removeFigureListener(this);\r\n    transformOwner = null;\r\n}'),(1154,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BezierControlPointHandle.draw(java.awt.Graphics2D)','117','org.jhotdraw.draw.BezierControlPointHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    BezierFigure f = getBezierFigure();\r\n    if ((f.getNodeCount()) > (index)) {\r\n        BezierPath.Node v = f.getNode(index);\r\n        Point2D.Double p0 = new Point2D.Double(v.x[0], v.y[0]);\r\n        Point2D.Double pc = new Point2D.Double(v.x[controlPointIndex], v.y[controlPointIndex]);\r\n        if ((AttributeKeys.TRANSFORM.get(getTransformOwner())) != null) {\r\n            AttributeKeys.TRANSFORM.get(getTransformOwner()).transform(p0, p0);\r\n            AttributeKeys.TRANSFORM.get(getTransformOwner()).transform(pc, pc);\r\n        }\r\n        Color handleFillColor;\r\n        Color handleStrokeColor;\r\n        Stroke stroke1;\r\n        Color strokeColor1;\r\n        Stroke stroke2;\r\n        Color strokeColor2;\r\n        if (getEditor().getTool().supportsHandleInteraction()) {\r\n            handleFillColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR)));\r\n            handleStrokeColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR)));\r\n            stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1)));\r\n            strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1)));\r\n            stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2)));\r\n            strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2)));\r\n        } else {\r\n            handleFillColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED)));\r\n            handleStrokeColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED)));\r\n            stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1_DISABLED)));\r\n            strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1_DISABLED)));\r\n            stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2_DISABLED)));\r\n            strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2_DISABLED)));\r\n        }\r\n        if ((stroke1 != null) && (strokeColor1 != null)) {\r\n            g.setStroke(stroke1);\r\n            g.setColor(strokeColor1);\r\n            g.draw(new Line2D.Double(view.drawingToView(p0), view.drawingToView(pc)));\r\n        }\r\n        if ((stroke2 != null) && (strokeColor2 != null)) {\r\n            g.setStroke(stroke2);\r\n            g.setColor(strokeColor2);\r\n            g.draw(new Line2D.Double(view.drawingToView(p0), view.drawingToView(pc)));\r\n        }\r\n        if (((v.keepColinear) && ((v.mask) == (BezierPath.C1C2_MASK))) && ((((index) > 0) && ((index) < ((f.getNodeCount()) - 1))) || (f.isClosed()))) {\r\n            drawCircle(g, handleStrokeColor, handleFillColor);\r\n        } else {\r\n            drawCircle(g, handleFillColor, handleStrokeColor);\r\n        }\r\n    }\r\n}'),(1155,'fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierControlPointHandle.fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)','117','org.jhotdraw.draw.BezierControlPointHandle','private void fireAreaInvalidated(BezierPath.Node v) {\r\n    Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);\r\n    for (int i = 1; i < 3; i++) {\r\n        dr.add(v.x[i], v.y[i]);\r\n    }\r\n    Rectangle vr = view.drawingToView(dr);\r\n    vr.grow(getHandlesize(), getHandlesize());\r\n    fireAreaInvalidated(vr);\r\n}'),(1156,'getBezierFigure()','org.jhotdraw.draw.BezierControlPointHandle.getBezierFigure()','117','org.jhotdraw.draw.BezierControlPointHandle','protected BezierFigure getBezierFigure() {\r\n    return ((BezierFigure) (getOwner()));\r\n}'),(1157,'getBezierNode()','org.jhotdraw.draw.BezierControlPointHandle.getBezierNode()','117','org.jhotdraw.draw.BezierControlPointHandle','protected BezierPath.Node getBezierNode() {\r\n    return (getBezierFigure().getNodeCount()) > (index) ? getBezierFigure().getNode(index) : null;\r\n}'),(1158,'getLocation()','org.jhotdraw.draw.BezierControlPointHandle.getLocation()','117','org.jhotdraw.draw.BezierControlPointHandle','protected Point getLocation() {\r\n    if ((getBezierFigure().getNodeCount()) > (index)) {\r\n        Point2D.Double p = getBezierFigure().getPoint(index, controlPointIndex);\r\n        if ((AttributeKeys.TRANSFORM.get(getTransformOwner())) != null) {\r\n            AttributeKeys.TRANSFORM.get(getTransformOwner()).transform(p, p);\r\n        }\r\n        return view.drawingToView(p);\r\n    } else {\r\n        return new Point(10, 10);\r\n    }\r\n}'),(1159,'getOwner()','org.jhotdraw.draw.BezierControlPointHandle.getOwner()','117','org.jhotdraw.draw.BezierControlPointHandle','public BezierFigure getOwner() {\r\n    return ((BezierFigure) (super.getOwner()));\r\n}'),(1160,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.BezierControlPointHandle.getToolTipText(java.awt.Point)','117','org.jhotdraw.draw.BezierControlPointHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    BezierPath.Node node = getBezierNode();\r\n    if (node == null) {\r\n        return null;\r\n    }\r\n    if ((node.mask) == (BezierPath.C1C2_MASK)) {\r\n        return labels.getFormatted(\"handle.bezierControlPoint.toolTipText\", labels.getFormatted((node.keepColinear ? \"handle.bezierControlPoint.cubicColinear.value\" : \"handle.bezierControlPoint.cubicUnconstrained.value\")));\r\n    } else {\r\n        return labels.getString(\"handle.bezierControlPoint.quadratic.toolTipText\");\r\n    }\r\n}'),(1161,'getTransformOwner()','org.jhotdraw.draw.BezierControlPointHandle.getTransformOwner()','117','org.jhotdraw.draw.BezierControlPointHandle','protected Figure getTransformOwner() {\r\n    return transformOwner;\r\n}'),(1162,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.BezierControlPointHandle.isCombinableWith(org.jhotdraw.draw.Handle)','117','org.jhotdraw.draw.BezierControlPointHandle','@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    if (super.isCombinableWith(h)) {\r\n        BezierControlPointHandle that = ((BezierControlPointHandle) (h));\r\n        return (((that.index) == (this.index)) && ((that.controlPointIndex) == (this.controlPointIndex))) && ((that.getBezierFigure().getNodeCount()) == (this.getBezierFigure().getNodeCount()));\r\n    }\r\n    return false;\r\n}'),(1163,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.BezierControlPointHandle.keyPressed(java.awt.event.KeyEvent)','117','org.jhotdraw.draw.BezierControlPointHandle','public void keyPressed(KeyEvent evt) {\r\n    final BezierFigure f = getOwner();\r\n    BezierPath.Node oldNode = f.getNode(index);\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            f.willChange();\r\n            f.setPoint(index, controlPointIndex, new Point2D.Double(oldNode.x[controlPointIndex], ((oldNode.y[controlPointIndex]) - 1.0)));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            f.willChange();\r\n            f.setPoint(index, controlPointIndex, new Point2D.Double(oldNode.x[controlPointIndex], ((oldNode.y[controlPointIndex]) + 1.0)));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            f.willChange();\r\n            f.setPoint(index, controlPointIndex, new Point2D.Double(((oldNode.x[controlPointIndex]) - 1.0), oldNode.y[controlPointIndex]));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            f.willChange();\r\n            f.setPoint(index, controlPointIndex, new Point2D.Double(((oldNode.x[controlPointIndex]) + 1.0), oldNode.y[controlPointIndex]));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DELETE :\r\n        case KeyEvent.VK_BACK_SPACE :\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(1164,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierControlPointHandle.trackEnd(java.awt.Point,java.awt.Point,int)','117','org.jhotdraw.draw.BezierControlPointHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    final BezierFigure figure = getBezierFigure();\r\n    BezierPath.Node oldValue = ((BezierPath.Node) (oldNode.clone()));\r\n    BezierPath.Node newValue = figure.getNode(index);\r\n    if ((modifiersEx & ((((InputEvent.META_DOWN_MASK) | (InputEvent.CTRL_DOWN_MASK)) | (InputEvent.ALT_DOWN_MASK)) | (InputEvent.SHIFT_DOWN_MASK))) != 0) {\r\n        figure.willChange();\r\n        newValue.keepColinear = !(newValue.keepColinear);\r\n        if (newValue.keepColinear) {\r\n            // move control point and opposite control point on same line\r\n            Point2D.Double p = figure.getPoint(index, controlPointIndex);\r\n            double a = (Math.PI) + (Math.atan2(((p.y) - (newValue.y[0])), ((p.x) - (newValue.x[0]))));\r\n            int c2 = ((controlPointIndex) == 1) ? 2 : 1;\r\n            double r = Math.sqrt(((((newValue.x[c2]) - (newValue.x[0])) * ((newValue.x[c2]) - (newValue.x[0]))) + (((newValue.y[c2]) - (newValue.y[0])) * ((newValue.y[c2]) - (newValue.y[0])))));\r\n            double sina = Math.sin(a);\r\n            double cosa = Math.cos(a);\r\n            Point2D.Double p2 = new Point2D.Double(((r * cosa) + (newValue.x[0])), ((r * sina) + (newValue.y[0])));\r\n            newValue.x[c2] = p2.x;\r\n            newValue.y[c2] = p2.y;\r\n        }\r\n        figure.setNode(index, newValue);\r\n        figure.changed();\r\n    }\r\n    view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(figure, index, oldValue, newValue) {\r\n        @Override\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            fireHandleRequestSecondaryHandles();\r\n        }\r\n\r\n        @Override\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            fireHandleRequestSecondaryHandles();\r\n        }\r\n    });\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}'),(1165,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.BezierControlPointHandle.trackStart(java.awt.Point,int)','117','org.jhotdraw.draw.BezierControlPointHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    BezierFigure figure = getOwner();\r\n    view.getDrawing().fireUndoableEditHappened((edit = new CompositeEdit(\"Punkt verschieben\")));\r\n    Point2D.Double location = view.getConstrainer().constrainPoint(view.viewToDrawing(getLocation()));\r\n    Point2D.Double p = view.getConstrainer().constrainPoint(view.viewToDrawing(anchor));\r\n    oldNode = figure.getNode(index);\r\n}'),(1166,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierControlPointHandle.trackStep(java.awt.Point,java.awt.Point,int)','117','org.jhotdraw.draw.BezierControlPointHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    BezierFigure figure = getBezierFigure();\r\n    Point2D.Double p = view.getConstrainer().constrainPoint(view.viewToDrawing(lead));\r\n    BezierPath.Node v = figure.getNode(index);\r\n    fireAreaInvalidated(v);\r\n    figure.willChange();\r\n    if ((AttributeKeys.TRANSFORM.get(getTransformOwner())) != null) {\r\n        try {\r\n            AttributeKeys.TRANSFORM.get(getTransformOwner()).inverseTransform(p, p);\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    if (!(v.keepColinear)) {\r\n        // move control point independently\r\n        figure.setPoint(index, controlPointIndex, p);\r\n    } else {\r\n        // move control point and opposite control point on same line\r\n        double a = (Math.PI) + (Math.atan2(((p.y) - (v.y[0])), ((p.x) - (v.x[0]))));\r\n        int c2 = ((controlPointIndex) == 1) ? 2 : 1;\r\n        double r = Math.sqrt(((((v.x[c2]) - (v.x[0])) * ((v.x[c2]) - (v.x[0]))) + (((v.y[c2]) - (v.y[0])) * ((v.y[c2]) - (v.y[0])))));\r\n        double sina = Math.sin(a);\r\n        double cosa = Math.cos(a);\r\n        Point2D.Double p2 = new Point2D.Double(((r * cosa) + (v.x[0])), ((r * sina) + (v.y[0])));\r\n        figure.setPoint(index, controlPointIndex, p);\r\n        figure.setPoint(index, c2, p2);\r\n    }\r\n    figure.changed();\r\n    fireAreaInvalidated(figure.getNode(index));\r\n}'),(1167,'-init-()','org.jhotdraw.draw.BezierFigure.-init-()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Creates an empty <code>BezierFigure</code>, for example without any\r\n * <code>BezierPath.Node</code>s.\r\n * The BezierFigure will not draw anything, if at least two nodes\r\n * are added to it. The <code>BezierPath</code> created by this constructor\r\n * is not closed.\r\n */\r\npublic BezierFigure() {\r\n    this(false);\r\n}'),(1168,'-init-(boolean)','org.jhotdraw.draw.BezierFigure.-init-(boolean)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Creates an empty BezierFigure, for example without any\r\n * <code>BezierPath.Node</code>s.\r\n * The BezierFigure will not draw anything, unless at least two nodes\r\n * are added to it.\r\n *\r\n * @param isClosed\r\n * 		Specifies whether the <code>BezierPath</code> shall\r\n * 		be closed.\r\n */\r\npublic BezierFigure(boolean isClosed) {\r\n    path = new BezierPath();\r\n    AttributeKeys.CLOSED.basicSet(this, isClosed);\r\n    // path.setClosed(isClosed);\r\n}'),(1169,'addNode(int,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierFigure.addNode(int,org.jhotdraw.geom.BezierPath$Node)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Adds a node to the list of points.\r\n */\r\npublic void addNode(final int index, BezierPath.Node p) {\r\n    final BezierPath.Node newPoint = new BezierPath.Node(p);\r\n    path.add(index, p);\r\n    invalidate();\r\n}'),(1170,'addNode(org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierFigure.addNode(org.jhotdraw.geom.BezierPath$Node)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Adds a control point.\r\n */\r\npublic void addNode(BezierPath.Node p) {\r\n    addNode(getNodeCount(), p);\r\n}'),(1171,'canConnect()','org.jhotdraw.draw.BezierFigure.canConnect()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Checks if this figure can be connected. By default\r\n * filled BezierFigures can be connected.\r\n */\r\n@Override\r\npublic boolean canConnect() {\r\n    return isClosed();\r\n}'),(1172,'chop(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.chop(java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','public Point2D.Double chop(Point2D.Double p) {\r\n    if (isClosed()) {\r\n        double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n        if (grow == 0.0) {\r\n            return path.chop(p);\r\n        } else {\r\n            GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n            return Geom.chop(gs.createStrokedShape(path), p);\r\n        }\r\n    } else {\r\n        return path.chop(p);\r\n    }\r\n}'),(1173,'clone()','org.jhotdraw.draw.BezierFigure.clone()','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic BezierFigure clone() {\r\n    BezierFigure that = ((BezierFigure) (super.clone()));\r\n    that.path = ((BezierPath) (this.path.clone()));\r\n    that.invalidate();\r\n    return that;\r\n}'),(1174,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.contains(java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','public boolean contains(Point2D.Double p) {\r\n    double tolerance = Math.max(2.0F, ((AttributeKeys.getStrokeTotalWidth(this)) / 2.0));\r\n    if ((isClosed()) || (((AttributeKeys.FILL_COLOR.get(this)) != null) && (AttributeKeys.FILL_OPEN_PATH.get(this)))) {\r\n        if (path.contains(p)) {\r\n            return true;\r\n        }\r\n        double grow = (AttributeKeys.getPerpendicularHitGrowth(this)) * 2.0;\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        if (gs.createStrokedShape(path).contains(p)) {\r\n            return true;\r\n        } else {\r\n            if (isClosed()) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (!(isClosed())) {\r\n        if (getCappedPath().outlineContains(p, tolerance)) {\r\n            return true;\r\n        }\r\n        if ((AttributeKeys.START_DECORATION.get(this)) != null) {\r\n            BezierPath cp = getCappedPath();\r\n            Point2D.Double p1 = path.get(0, 0);\r\n            Point2D.Double p2 = cp.get(0, 0);\r\n            // FIXME - Check here, if caps path contains the point\r\n            if (Geom.lineContainsPoint(p1.x, p1.y, p2.x, p2.y, p.x, p.y, tolerance)) {\r\n                return true;\r\n            }\r\n        }\r\n        if ((AttributeKeys.END_DECORATION.get(this)) != null) {\r\n            BezierPath cp = getCappedPath();\r\n            Point2D.Double p1 = path.get(((path.size()) - 1), 0);\r\n            Point2D.Double p2 = cp.get(((path.size()) - 1), 0);\r\n            // FIXME - Check here, if caps path contains the point\r\n            if (Geom.lineContainsPoint(p1.x, p1.y, p2.x, p2.y, p.x, p.y, tolerance)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}'),(1175,'createHandles(int)','org.jhotdraw.draw.BezierFigure.createHandles(int)','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BezierOutlineHandle(this, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new BezierOutlineHandle(this));\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            handles.add(new BezierScaleHandle(this));\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(1176,'drawCaps(java.awt.Graphics2D)','org.jhotdraw.draw.BezierFigure.drawCaps(java.awt.Graphics2D)','118','org.jhotdraw.draw.BezierFigure','protected void drawCaps(Graphics2D g) {\r\n    if ((getNodeCount()) > 1) {\r\n        if ((AttributeKeys.START_DECORATION.get(this)) != null) {\r\n            BezierPath cp = getCappedPath();\r\n            Point2D.Double p1 = path.get(0, 0);\r\n            Point2D.Double p2 = cp.get(0, 0);\r\n            if (p2.equals(p1)) {\r\n                p2 = path.get(1, 0);\r\n            }\r\n            AttributeKeys.START_DECORATION.get(this).draw(g, this, p1, p2);\r\n        }\r\n        if ((AttributeKeys.END_DECORATION.get(this)) != null) {\r\n            BezierPath cp = getCappedPath();\r\n            Point2D.Double p1 = path.get(((path.size()) - 1), 0);\r\n            Point2D.Double p2 = cp.get(((path.size()) - 1), 0);\r\n            if (p2.equals(p1)) {\r\n                p2 = path.get(((path.size()) - 2), 0);\r\n            }\r\n            AttributeKeys.END_DECORATION.get(this).draw(g, this, p1, p2);\r\n        }\r\n    }\r\n}'),(1177,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.BezierFigure.drawFill(java.awt.Graphics2D)','118','org.jhotdraw.draw.BezierFigure','protected void drawFill(Graphics2D g) {\r\n    if ((isClosed()) || (AttributeKeys.FILL_OPEN_PATH.get(this))) {\r\n        double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n        if (grow == 0.0) {\r\n            g.fill(path);\r\n        } else {\r\n            GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n            g.fill(gs.createStrokedShape(path));\r\n        }\r\n    }\r\n}'),(1178,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.BezierFigure.drawStroke(java.awt.Graphics2D)','118','org.jhotdraw.draw.BezierFigure','// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\nprotected void drawStroke(Graphics2D g) {\r\n    if (isClosed()) {\r\n        double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n        if (grow == 0.0) {\r\n            g.draw(path);\r\n        } else {\r\n            GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n            g.draw(gs.createStrokedShape(path));\r\n        }\r\n    } else {\r\n        g.draw(getCappedPath());\r\n    }\r\n    drawCaps(g);\r\n}'),(1179,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.BezierFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','118','org.jhotdraw.draw.BezierFigure','public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopBezierConnector(this);\r\n}'),(1180,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.BezierFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','118','org.jhotdraw.draw.BezierFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopBezierConnector(this);\r\n}'),(1181,'findNode(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.findNode(java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Finds a control point index.\r\n * Returns -1 if no control point could be found.\r\n * FIXME - Move this to BezierPath\r\n */\r\npublic int findNode(Point2D.Double p) {\r\n    BezierPath tp = path;\r\n    for (int i = 0; i < (tp.size()); i++) {\r\n        BezierPath.Node p2 = tp.get(i);\r\n        if (((p2.x[0]) == (p.x)) && ((p2.y[0]) == (p.y))) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}'),(1182,'findSegment(java.awt.geom.Point2D$Double,double)','org.jhotdraw.draw.BezierFigure.findSegment(java.awt.geom.Point2D$Double,double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Gets the segment of the polyline that is hit by\r\n * the given Point2D.Double.\r\n *\r\n * @param find\r\n * 		a Point on the bezier path\r\n * @param tolerance\r\n * 		a tolerance, tolerance should take into account\r\n * 		the line width, plus 2 divided by the zoom factor.\r\n * @return the index of the segment or -1 if no segment was hit.\r\n */\r\npublic int findSegment(Point2D.Double find, double tolerance) {\r\n    return getBezierPath().findSegment(find, tolerance);\r\n}'),(1183,'getBezierPath()','org.jhotdraw.draw.BezierFigure.getBezierPath()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Returns a clone of the bezier path of this figure.\r\n */\r\npublic BezierPath getBezierPath() {\r\n    return ((BezierPath) (path.clone()));\r\n}'),(1184,'getBounds()','org.jhotdraw.draw.BezierFigure.getBounds()','118','org.jhotdraw.draw.BezierFigure','public Rectangle2D.Double getBounds() {\r\n    Rectangle2D.Double bounds = path.getBounds2D();\r\n    return bounds;\r\n}'),(1185,'getCappedPath()','org.jhotdraw.draw.BezierFigure.getCappedPath()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Returns a path which is cappedPath at the ends, to prevent\r\n * it from drawing under the end caps.\r\n */\r\nprotected BezierPath getCappedPath() {\r\n    if ((cappedPath) == null) {\r\n        cappedPath = ((BezierPath) (path.clone()));\r\n        if (isClosed()) {\r\n            cappedPath.setClosed(true);\r\n        } else {\r\n            if ((cappedPath.size()) > 1) {\r\n                if ((AttributeKeys.START_DECORATION.get(this)) != null) {\r\n                    BezierPath.Node p0 = cappedPath.get(0);\r\n                    BezierPath.Node p1 = cappedPath.get(1);\r\n                    Point2D.Double pp;\r\n                    if (((p0.getMask()) & (BezierPath.C2_MASK)) != 0) {\r\n                        pp = p0.getControlPoint(2);\r\n                    } else\r\n                        if (((p1.getMask()) & (BezierPath.C1_MASK)) != 0) {\r\n                            pp = p1.getControlPoint(1);\r\n                        } else {\r\n                            pp = p1.getControlPoint(0);\r\n                        }\r\n\r\n                    double radius = AttributeKeys.START_DECORATION.get(this).getDecorationRadius(this);\r\n                    double lineLength = Geom.length(p0.getControlPoint(0), pp);\r\n                    cappedPath.set(0, 0, Geom.cap(pp, p0.getControlPoint(0), (-(Math.min(radius, lineLength)))));\r\n                }\r\n                if ((AttributeKeys.END_DECORATION.get(this)) != null) {\r\n                    BezierPath.Node p0 = cappedPath.get(((cappedPath.size()) - 1));\r\n                    BezierPath.Node p1 = cappedPath.get(((cappedPath.size()) - 2));\r\n                    Point2D.Double pp;\r\n                    if (((p0.getMask()) & (BezierPath.C1_MASK)) != 0) {\r\n                        pp = p0.getControlPoint(1);\r\n                    } else\r\n                        if (((p1.getMask()) & (BezierPath.C2_MASK)) != 0) {\r\n                            pp = p1.getControlPoint(2);\r\n                        } else {\r\n                            pp = p1.getControlPoint(0);\r\n                        }\r\n\r\n                    double radius = AttributeKeys.END_DECORATION.get(this).getDecorationRadius(this);\r\n                    double lineLength = Geom.length(p0.getControlPoint(0), pp);\r\n                    cappedPath.set(((cappedPath.size()) - 1), 0, Geom.cap(pp, p0.getControlPoint(0), (-(Math.min(radius, lineLength)))));\r\n                }\r\n                cappedPath.invalidatePath();\r\n            }\r\n        }\r\n    }\r\n    return cappedPath;\r\n}'),(1186,'getCenter()','org.jhotdraw.draw.BezierFigure.getCenter()','118','org.jhotdraw.draw.BezierFigure','public Point2D.Double getCenter() {\r\n    return path.getCenter();\r\n}'),(1187,'getDrawingArea()','org.jhotdraw.draw.BezierFigure.getDrawingArea()','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r = super.getDrawingArea();\r\n    if ((getNodeCount()) > 1) {\r\n        if ((AttributeKeys.START_DECORATION.get(this)) != null) {\r\n            Point2D.Double p1 = getPoint(0, 0);\r\n            Point2D.Double p2 = getPoint(1, 0);\r\n            r.add(AttributeKeys.START_DECORATION.get(this).getDrawingArea(this, p1, p2));\r\n        }\r\n        if ((AttributeKeys.END_DECORATION.get(this)) != null) {\r\n            Point2D.Double p1 = getPoint(((getNodeCount()) - 1), 0);\r\n            Point2D.Double p2 = getPoint(((getNodeCount()) - 2), 0);\r\n            r.add(AttributeKeys.END_DECORATION.get(this).getDrawingArea(this, p1, p2));\r\n        }\r\n    }\r\n    return r;\r\n}'),(1188,'getEndPoint()','org.jhotdraw.draw.BezierFigure.getEndPoint()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Convenience method for getting the end point.\r\n */\r\n@Override\r\npublic Point2D.Double getEndPoint() {\r\n    return getPoint(((getNodeCount()) - 1), 0);\r\n}'),(1189,'getNode(int)','org.jhotdraw.draw.BezierFigure.getNode(int)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Gets a control point.\r\n */\r\npublic BezierPath.Node getNode(int index) {\r\n    return ((BezierPath.Node) (path.get(index).clone()));\r\n}'),(1190,'getNodeCount()','org.jhotdraw.draw.BezierFigure.getNodeCount()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Gets the node count.\r\n */\r\npublic int getNodeCount() {\r\n    return path.size();\r\n}'),(1191,'getOutermostPoint()','org.jhotdraw.draw.BezierFigure.getOutermostPoint()','118','org.jhotdraw.draw.BezierFigure','public Point2D.Double getOutermostPoint() {\r\n    return path.get(path.indexOfOutermostNode()).getControlPoint(0);\r\n}'),(1192,'getPoint(int)','org.jhotdraw.draw.BezierFigure.getPoint(int)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Convenience method for getting the point coordinate of\r\n * the first control point of the specified node.\r\n */\r\npublic Point2D.Double getPoint(int index) {\r\n    return path.get(index).getControlPoint(0);\r\n}'),(1193,'getPoint(int,int)','org.jhotdraw.draw.BezierFigure.getPoint(int,int)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Gets the point coordinate of a control point.\r\n */\r\npublic Point2D.Double getPoint(int index, int coord) {\r\n    return path.get(index).getControlPoint(coord);\r\n}'),(1194,'getPointOnPath(float,double)','org.jhotdraw.draw.BezierFigure.getPointOnPath(float,double)','118','org.jhotdraw.draw.BezierFigure','public Point2D.Double getPointOnPath(float relative, double flatness) {\r\n    return path.getPointOnPath(relative, flatness);\r\n}'),(1195,'getStartPoint()','org.jhotdraw.draw.BezierFigure.getStartPoint()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Convenience method for getting the start point.\r\n */\r\n@Override\r\npublic Point2D.Double getStartPoint() {\r\n    return getPoint(0, 0);\r\n}'),(1196,'getTransformRestoreData()','org.jhotdraw.draw.BezierFigure.getTransformRestoreData()','118','org.jhotdraw.draw.BezierFigure','public Object getTransformRestoreData() {\r\n    return path.clone();\r\n}'),(1197,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.BezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.splitSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(1198,'invalidate()','org.jhotdraw.draw.BezierFigure.invalidate()','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    path.invalidatePath();\r\n    cappedPath = null;\r\n}'),(1199,'isClosed()','org.jhotdraw.draw.BezierFigure.isClosed()','118','org.jhotdraw.draw.BezierFigure','public boolean isClosed() {\r\n    return ((Boolean) (getAttribute(AttributeKeys.CLOSED)));\r\n}'),(1200,'joinSegments(java.awt.geom.Point2D$Double,double)','org.jhotdraw.draw.BezierFigure.joinSegments(java.awt.geom.Point2D$Double,double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Joins two segments into one if the given Point2D.Double hits a node\r\n * of the polyline.\r\n *\r\n * @return true if the two segments were joined.\r\n * @param join\r\n * 		a Point at a node on the bezier path\r\n * @param tolerance\r\n * 		a tolerance, tolerance should take into account\r\n * 		the line width, plus 2 divided by the zoom factor.\r\n */\r\npublic boolean joinSegments(Point2D.Double join, double tolerance) {\r\n    int i = findSegment(join, tolerance);\r\n    if ((i != (-1)) && (i > 1)) {\r\n        removeNode(i);\r\n        return true;\r\n    }\r\n    return false;\r\n}'),(1201,'joinSegments(java.awt.geom.Point2D$Double,float)','org.jhotdraw.draw.BezierFigure.joinSegments(java.awt.geom.Point2D$Double,float)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Joins two segments into one if the given Point2D.Double hits a node\r\n * of the polyline.\r\n *\r\n * @return true if the two segments were joined.\r\n */\r\npublic int joinSegments(Point2D.Double join, float tolerance) {\r\n    return path.joinSegments(join, tolerance);\r\n}'),(1202,'layout()','org.jhotdraw.draw.BezierFigure.layout()','118','org.jhotdraw.draw.BezierFigure','public void layout() {\r\n}'),(1203,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.BezierFigure.read(org.jhotdraw.xml.DOMInput)','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    readPoints(in);\r\n    readAttributes(in);\r\n}'),(1204,'readPoints(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.BezierFigure.readPoints(org.jhotdraw.xml.DOMInput)','118','org.jhotdraw.draw.BezierFigure','protected void readPoints(DOMInput in) throws IOException {\r\n    path.clear();\r\n    in.openElement(\"points\");\r\n    setClosed(in.getAttribute(\"closed\", false));\r\n    for (int i = 0, n = in.getElementCount(\"p\"); i < n; i++) {\r\n        in.openElement(\"p\", i);\r\n        BezierPath.Node node = new BezierPath.Node(in.getAttribute(\"mask\", 0), in.getAttribute(\"x\", 0.0), in.getAttribute(\"y\", 0.0), in.getAttribute(\"c1x\", in.getAttribute(\"x\", 0.0)), in.getAttribute(\"c1y\", in.getAttribute(\"y\", 0.0)), in.getAttribute(\"c2x\", in.getAttribute(\"x\", 0.0)), in.getAttribute(\"c2y\", in.getAttribute(\"y\", 0.0)));\r\n        node.keepColinear = in.getAttribute(\"colinear\", true);\r\n        path.add(node);\r\n        path.invalidatePath();\r\n        in.closeElement();\r\n    }\r\n    in.closeElement();\r\n}'),(1205,'removeAllNodes()','org.jhotdraw.draw.BezierFigure.removeAllNodes()','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Removes the Point2D.Double at the specified index.\r\n */\r\nprotected void removeAllNodes() {\r\n    path.clear();\r\n}'),(1206,'removeNode(int)','org.jhotdraw.draw.BezierFigure.removeNode(int)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Removes the Node at the specified index.\r\n */\r\npublic BezierPath.Node removeNode(int index) {\r\n    return path.remove(index);\r\n}'),(1207,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.BezierFigure.restoreTransformTo(java.lang.Object)','118','org.jhotdraw.draw.BezierFigure','public void restoreTransformTo(Object geometry) {\r\n    path.setTo(((BezierPath) (geometry)));\r\n}'),(1208,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.BezierFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.CLOSED)) {\r\n        path.setClosed(((Boolean) (newValue)));\r\n    } else\r\n        if (key == (AttributeKeys.WINDING_RULE)) {\r\n            path.setWindingRule((newValue == (AttributeKeys.WindingRule.EVEN_ODD) ? GeneralPath.WIND_EVEN_ODD : GeneralPath.WIND_NON_ZERO));\r\n        }\r\n\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}'),(1209,'setBezierPath(org.jhotdraw.geom.BezierPath)','org.jhotdraw.draw.BezierFigure.setBezierPath(org.jhotdraw.geom.BezierPath)','118','org.jhotdraw.draw.BezierFigure','public void setBezierPath(BezierPath newValue) {\r\n    path = ((BezierPath) (newValue.clone()));\r\n    this.setClosed(newValue.isClosed());\r\n}'),(1210,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Sets the location of the first and the last <code>BezierPath.Node</code>\r\n * of the BezierFigure.\r\n * If the BezierFigure has not at least two nodes, nodes are added\r\n * to the figure until the BezierFigure has at least two nodes.\r\n */\r\n@Override\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    setStartPoint(anchor);\r\n    setEndPoint(lead);\r\n    invalidate();\r\n}'),(1211,'setClosed(boolean)','org.jhotdraw.draw.BezierFigure.setClosed(boolean)','118','org.jhotdraw.draw.BezierFigure','public void setClosed(boolean newValue) {\r\n    AttributeKeys.CLOSED.set(this, newValue);\r\n}'),(1212,'setEndPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.setEndPoint(java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Convenience method for setting the point coordinate of the end point.\r\n * If the BezierFigure has not at least two nodes, nodes are added\r\n * to the figure until the BezierFigure has at least two nodes.\r\n */\r\npublic void setEndPoint(Point2D.Double p) {\r\n    // Add two nodes if we havent at least two nodes\r\n    for (int i = getNodeCount(); i < 2; i++) {\r\n        addNode(0, new BezierPath.Node(p.x, p.y));\r\n    }\r\n    setPoint(((getNodeCount()) - 1), p);\r\n}'),(1213,'setNode(int,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Sets a control point.\r\n */\r\npublic void setNode(int index, BezierPath.Node p) {\r\n    path.set(index, p);\r\n    invalidate();\r\n}'),(1214,'setPoint(int,int,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.setPoint(int,int,java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Sets the point coordinate of a control point.\r\n */\r\npublic void setPoint(int index, int coord, Point2D.Double p) {\r\n    BezierPath.Node cp = new BezierPath.Node(path.get(index));\r\n    cp.setControlPoint(coord, p);\r\n    setNode(index, cp);\r\n}'),(1215,'setPoint(int,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.setPoint(int,java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Sets the point coordinate of control point 0 at the specified node.\r\n */\r\npublic void setPoint(int index, Point2D.Double p) {\r\n    BezierPath.Node node = path.get(index);\r\n    double dx = (p.x) - (node.x[0]);\r\n    double dy = (p.y) - (node.y[0]);\r\n    for (int i = 0; i < (node.x.length); i++) {\r\n        node.x[i] += dx;\r\n        node.y[i] += dy;\r\n    }\r\n    invalidate();\r\n}'),(1216,'setStartPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierFigure.setStartPoint(java.awt.geom.Point2D$Double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Convenience method for setting the point coordinate of the start point.\r\n * If the BezierFigure has not at least two nodes, nodes are added\r\n * to the figure until the BezierFigure has at least two nodes.\r\n */\r\npublic void setStartPoint(Point2D.Double p) {\r\n    // Add two nodes if we havent at least two nodes\r\n    for (int i = getNodeCount(); i < 2; i++) {\r\n        addNode(0, new BezierPath.Node(p.x, p.y));\r\n    }\r\n    setPoint(0, p);\r\n}'),(1217,'splitSegment(java.awt.geom.Point2D$Double,double)','org.jhotdraw.draw.BezierFigure.splitSegment(java.awt.geom.Point2D$Double,double)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Splits the segment at the given Point2D.Double if a segment was hit.\r\n *\r\n * @return the index of the segment or -1 if no segment was hit.\r\n * @param split\r\n * 		a Point on (or near) a line segment on the bezier path\r\n * @param tolerance\r\n * 		a tolerance, tolerance should take into account\r\n * 		the line width, plus 2 divided by the zoom factor.\r\n */\r\npublic int splitSegment(Point2D.Double split, double tolerance) {\r\n    int i = findSegment(split, tolerance);\r\n    if (i != (-1)) {\r\n        addNode((i + 1), new BezierPath.Node(split));\r\n    }\r\n    return i + 1;\r\n}'),(1218,'splitSegment(java.awt.geom.Point2D$Double,float)','org.jhotdraw.draw.BezierFigure.splitSegment(java.awt.geom.Point2D$Double,float)','118','org.jhotdraw.draw.BezierFigure','/**\r\n * Splits the segment at the given Point2D.Double if a segment was hit.\r\n *\r\n * @return the index of the segment or -1 if no segment was hit.\r\n */\r\npublic int splitSegment(Point2D.Double split, float tolerance) {\r\n    return path.splitSegment(split, tolerance);\r\n}'),(1219,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.BezierFigure.transform(java.awt.geom.AffineTransform)','118','org.jhotdraw.draw.BezierFigure','public void transform(AffineTransform tx) {\r\n    path.transform(tx);\r\n    invalidate();\r\n}'),(1220,'validate()','org.jhotdraw.draw.BezierFigure.validate()','118','org.jhotdraw.draw.BezierFigure','@Override\r\nprotected void validate() {\r\n    super.validate();\r\n    path.invalidatePath();\r\n    cappedPath = null;\r\n}'),(1221,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.BezierFigure.write(org.jhotdraw.xml.DOMOutput)','118','org.jhotdraw.draw.BezierFigure','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    writePoints(out);\r\n    writeAttributes(out);\r\n}'),(1222,'writePoints(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.BezierFigure.writePoints(org.jhotdraw.xml.DOMOutput)','118','org.jhotdraw.draw.BezierFigure','protected void writePoints(DOMOutput out) throws IOException {\r\n    out.openElement(\"points\");\r\n    if (isClosed()) {\r\n        out.addAttribute(\"closed\", true);\r\n    }\r\n    for (int i = 0, n = getNodeCount(); i < n; i++) {\r\n        BezierPath.Node node = getNode(i);\r\n        out.openElement(\"p\");\r\n        out.addAttribute(\"mask\", node.mask, 0);\r\n        out.addAttribute(\"colinear\", true);\r\n        out.addAttribute(\"x\", node.x[0]);\r\n        out.addAttribute(\"y\", node.y[0]);\r\n        out.addAttribute(\"c1x\", node.x[1], node.x[0]);\r\n        out.addAttribute(\"c1y\", node.y[1], node.y[0]);\r\n        out.addAttribute(\"c2x\", node.x[2], node.x[0]);\r\n        out.addAttribute(\"c2y\", node.y[2], node.y[0]);\r\n        out.closeElement();\r\n    }\r\n    out.closeElement();\r\n}'),(1223,'-init-()','org.jhotdraw.draw.BezierLabelLocator.-init-()','119','org.jhotdraw.draw.BezierLabelLocator','/**\r\n * Creates a new instance.\r\n * This constructor is for use by DOMStorable only.\r\n */\r\npublic BezierLabelLocator() {\r\n}'),(1224,'-init-(double,double,double)','org.jhotdraw.draw.BezierLabelLocator.-init-(double,double,double)','119','org.jhotdraw.draw.BezierLabelLocator','/**\r\n * Creates a new locator.\r\n *\r\n * @param relativePosition\r\n * 		The relative position of the label on the polyline.\r\n * 		0.0 specifies the start of the polyline, 1.0 the\r\n * 		end of the polyline. Values between 0.0 and 1.0 are relative positions\r\n * 		on the polyline.\r\n * @param angle\r\n * 		The angle of the distance vector.\r\n * @param distance\r\n * 		The length of the distance vector.\r\n */\r\npublic BezierLabelLocator(double relativePosition, double angle, double distance) {\r\n    this.relativePosition = relativePosition;\r\n    this.angle = angle;\r\n    this.distance = distance;\r\n}'),(1225,'getRelativeLabelPoint(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BezierLabelLocator.getRelativeLabelPoint(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.Figure)','119','org.jhotdraw.draw.BezierLabelLocator','/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n * XXX - Implement this and move it to BezierPath\r\n */\r\npublic Point2D.Double getRelativeLabelPoint(BezierFigure owner, Figure label) {\r\n    // Get a point on the path an the next point on the path\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    if (point == null) {\r\n        return new Point2D.Double(0, 0);\r\n    }\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    Dimension2DDouble labelDim = label.getPreferredSize();\r\n    if ((((relativePosition) == 0.5) && ((p.x) >= ((point.x) - ((distance) / 2)))) && ((p.x) <= ((point.x) + ((distance) / 2)))) {\r\n        if ((p.y) >= (point.y)) {\r\n            // South East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), p.y);\r\n        } else {\r\n            // North East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), ((p.y) - (labelDim.height)));\r\n        }\r\n    } else {\r\n        if ((p.x) >= (point.x)) {\r\n            if ((p.y) >= (point.y)) {\r\n                // South East\r\n                return new Point2D.Double(p.x, p.y);\r\n            } else {\r\n                // North East\r\n                return new Point2D.Double(p.x, ((p.y) - (labelDim.height)));\r\n            }\r\n        } else {\r\n            if ((p.y) >= (point.y)) {\r\n                // South West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), p.y);\r\n            } else {\r\n                // North West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), ((p.y) - (labelDim.height)));\r\n            }\r\n        }\r\n    }\r\n    /* int percentage = (int) (relativePosition * 100);\n\n    int segment; // relative segment\n    Point2D.Double segPoint; // relative Point2D.Double on the segment\n    int nPoints = owner.getPointCount();\n    Point2D.Double[] Points = owner.getPoints();\n\n    if (nPoints < 2) return new Point2D.Double(0, 0);\n\n    switch (percentage) {\n    case 0 :\n    segment = 0;\n    segPoint = owner.getStartPoint();\n    break;\n    case 100 :\n    segment = owner.getPointCount() - 2;\n    segPoint = owner.getEndPoint();\n    break;\n    default :\n    double totalLength = 0d;\n    double[] segLength = new double[nPoints - 1];\n    for (int i=1; i < nPoints; i++) {\n    segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);\n    totalLength += segLength[i-1];\n    }\n    double relativeProgress = percentage * totalLength / 101d;\n    segment = 0;\n    double segMin = 0d;\n    for (segment=0; segment < segLength.length - 1; segment++) {\n    if (segMin + segLength[segment] > relativeProgress) break;\n    segMin += segLength[segment];\n    }\n\n    // Compute the relative Point2D.Double on the line\n    segPoint = new Point2D.Double();\n    relativeProgress -= segMin;\n    segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) + Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);\n    segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) + Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);\n\n    break;\n    }\n\n    Dimension2DDouble labelDim = label.getPreferredSize();\n\n    Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment + 1].x, Points[segment + 1].y);\n    double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x - Points[segment].x);\n    double alpha = dir + angle;\n\n    Point2D.Double p = new Point2D.Double(\n    (int) (segPoint.x + distance * Math.cos(alpha)),\n    (int) (segPoint.y + distance * Math.sin(alpha))\n    );\n\n    if (p.x >= segPoint.x) {\n    if (p.y >= segPoint.y) {\n    // South East\n    return new Point2D.Double(p.x, p.y);\n    } else {\n    // North East\n    return new Point2D.Double(p.x, p.y - labelDim.height);\n    }\n    } else {\n    if (p.y >= segPoint.y) {\n    // South West\n    return new Point2D.Double(p.x - labelDim.width,  p.y);\n    } else {\n    // North West\n    return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);\n    }\n    }\n     */\r\n}'),(1226,'getRelativePoint(org.jhotdraw.draw.BezierFigure)','org.jhotdraw.draw.BezierLabelLocator.getRelativePoint(org.jhotdraw.draw.BezierFigure)','119','org.jhotdraw.draw.BezierLabelLocator','/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n */\r\npublic Point2D.Double getRelativePoint(BezierFigure owner) {\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    return p;\r\n}'),(1227,'locate(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure)','119','org.jhotdraw.draw.BezierLabelLocator','public Point2D.Double locate(Figure owner) {\r\n    return getRelativePoint(((BezierFigure) (owner)));\r\n}'),(1228,'locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','119','org.jhotdraw.draw.BezierLabelLocator','public Point2D.Double locate(Figure owner, Figure label) {\r\n    Point2D.Double relativePoint = getRelativeLabelPoint(((BezierFigure) (owner)), label);\r\n    return relativePoint;\r\n}'),(1229,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.BezierLabelLocator.read(org.jhotdraw.xml.DOMInput)','119','org.jhotdraw.draw.BezierLabelLocator','public void read(DOMInput in) {\r\n    relativePosition = in.getAttribute(\"relativePosition\", 0.0);\r\n    angle = in.getAttribute(\"angle\", 0.0);\r\n    distance = in.getAttribute(\"distance\", 0);\r\n}'),(1230,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.BezierLabelLocator.write(org.jhotdraw.xml.DOMOutput)','119','org.jhotdraw.draw.BezierLabelLocator','public void write(DOMOutput out) {\r\n    out.addAttribute(\"relativePosition\", relativePosition);\r\n    out.addAttribute(\"angle\", angle);\r\n    out.addAttribute(\"distance\", distance);\r\n}'),(1231,'-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)','120','org.jhotdraw.draw.BezierNodeEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(1232,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.BezierNodeEdit.addEdit(javax.swing.undo.UndoableEdit)','120','org.jhotdraw.draw.BezierNodeEdit','@Override\r\npublic boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof BezierNodeEdit) {\r\n        BezierNodeEdit that = ((BezierNodeEdit) (anEdit));\r\n        if (((that.owner) == (this.owner)) && ((that.index) == (this.index))) {\r\n            this.newValue = that.newValue;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(1233,'getPresentationName()','org.jhotdraw.draw.BezierNodeEdit.getPresentationName()','120','org.jhotdraw.draw.BezierNodeEdit','@Override\r\npublic String getPresentationName() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    if ((oldValue.mask) != (newValue.mask)) {\r\n        return labels.getString(\"edit.bezierNode.changeType.text\");\r\n    } else {\r\n        return labels.getString(\"edit.bezierNode.movePoint.text\");\r\n    }\r\n}'),(1234,'redo()','org.jhotdraw.draw.BezierNodeEdit.redo()','120','org.jhotdraw.draw.BezierNodeEdit','@Override\r\npublic void redo() throws CannotRedoException {\r\n    super.redo();\r\n    owner.willChange();\r\n    owner.setNode(index, newValue);\r\n    owner.changed();\r\n    if ((oldValue.mask) != (newValue.mask)) {\r\n    }\r\n}'),(1235,'undo()','org.jhotdraw.draw.BezierNodeEdit.undo()','120','org.jhotdraw.draw.BezierNodeEdit','@Override\r\npublic void undo() throws CannotUndoException {\r\n    super.undo();\r\n    owner.willChange();\r\n    owner.setNode(index, oldValue);\r\n    owner.changed();\r\n}'),(1236,'-init-(org.jhotdraw.draw.BezierFigure,int)','org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int)','121','org.jhotdraw.draw.BezierNodeHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeHandle(BezierFigure owner, int index) {\r\n    this(owner, index, owner);\r\n}'),(1237,'-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.draw.Figure)','121','org.jhotdraw.draw.BezierNodeHandle','public BezierNodeHandle(BezierFigure owner, int index, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}'),(1238,'-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)','121','org.jhotdraw.draw.BezierNodeHandle','1( $anonymous0,  $anonymous1,  $anonymous2,  $anonymous3) {\r\n}'),(1239,'-init-()','org.jhotdraw.draw.BezierNodeHandle.-init-()','121','org.jhotdraw.draw.BezierNodeHandle','2() {\r\n}'),(1240,'basicGetBounds()','org.jhotdraw.draw.BezierNodeHandle.basicGetBounds()','121','org.jhotdraw.draw.BezierNodeHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(1241,'createSecondaryHandles()','org.jhotdraw.draw.BezierNodeHandle.createSecondaryHandles()','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic Collection<Handle> createSecondaryHandles() {\r\n    BezierFigure f = getOwner();\r\n    LinkedList<Handle> list = new LinkedList<Handle>();\r\n    BezierPath.Node v = f.getNode(index);\r\n    if ((((v.mask) & (BezierPath.C1_MASK)) != 0) && (((index) != 0) || (f.isClosed()))) {\r\n        list.add(new BezierControlPointHandle(f, index, 1, getTransformOwner()));\r\n    }\r\n    if ((((v.mask) & (BezierPath.C2_MASK)) != 0) && (((index) < ((f.getNodeCount()) - 1)) || (f.isClosed()))) {\r\n        list.add(new BezierControlPointHandle(f, index, 2, getTransformOwner()));\r\n    }\r\n    if (((index) > 0) || (f.isClosed())) {\r\n        int i = ((index) == 0) ? (f.getNodeCount()) - 1 : (index) - 1;\r\n        v = f.getNode(i);\r\n        if (((v.mask) & (BezierPath.C2_MASK)) != 0) {\r\n            list.add(new BezierControlPointHandle(f, i, 2, getTransformOwner()));\r\n        }\r\n    }\r\n    if (((index) < ((f.getNodeCount()) - 1)) || (f.isClosed())) {\r\n        int i = ((index) == ((f.getNodeCount()) - 1)) ? 0 : (index) + 1;\r\n        v = f.getNode(i);\r\n        if (((v.mask) & (BezierPath.C1_MASK)) != 0) {\r\n            list.add(new BezierControlPointHandle(f, i, 1, getTransformOwner()));\r\n        }\r\n    }\r\n    return list;\r\n}'),(1242,'dispose()','org.jhotdraw.draw.BezierNodeHandle.dispose()','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic void dispose() {\r\n    super.dispose();\r\n    transformOwner.removeFigureListener(this);\r\n    transformOwner = null;\r\n}'),(1243,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BezierNodeHandle.draw(java.awt.Graphics2D)','121','org.jhotdraw.draw.BezierNodeHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    BezierFigure f = getOwner();\r\n    int size = f.getNodeCount();\r\n    boolean isClosed = f.isClosed();\r\n    Color fillColor;\r\n    Color strokeColor;\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        fillColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_FILL_COLOR)));\r\n        strokeColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_STROKE_COLOR)));\r\n    } else {\r\n        fillColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_FILL_COLOR_DISABLED)));\r\n        strokeColor = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_STROKE_COLOR_DISABLED)));\r\n    }\r\n    if (size > (index)) {\r\n        BezierPath.Node v = f.getNode(index);\r\n        if ((((v.mask) == 0) || ((((index) == 0) && ((v.mask) == (BezierPath.C1_MASK))) && (!isClosed))) || ((((index) == (size - 1)) && ((v.mask) == (BezierPath.C2_MASK))) && (!isClosed))) {\r\n            drawRectangle(g, fillColor, strokeColor);\r\n        } else\r\n            if (((((v.mask) == (BezierPath.C1_MASK)) || ((v.mask) == (BezierPath.C2_MASK))) || (((index) == 0) && (!isClosed))) || (((index) == (size - 1)) && (!isClosed))) {\r\n                drawDiamond(g, fillColor, strokeColor);\r\n            } else {\r\n                drawCircle(g, fillColor, strokeColor);\r\n            }\r\n\r\n    }\r\n}'),(1244,'fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.BezierNodeHandle.fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)','121','org.jhotdraw.draw.BezierNodeHandle','private void fireAreaInvalidated(BezierPath.Node v) {\r\n    Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);\r\n    for (int i = 1; i < 3; i++) {\r\n        dr.add(v.x[i], v.y[i]);\r\n    }\r\n    Rectangle vr = view.drawingToView(dr);\r\n    vr.grow(getHandlesize(), getHandlesize());\r\n    fireAreaInvalidated(vr);\r\n}'),(1245,'getBezierNode()','org.jhotdraw.draw.BezierNodeHandle.getBezierNode()','121','org.jhotdraw.draw.BezierNodeHandle','protected BezierPath.Node getBezierNode() {\r\n    return (getOwner().getNodeCount()) > (index) ? getOwner().getNode(index) : null;\r\n}'),(1246,'getLocation()','org.jhotdraw.draw.BezierNodeHandle.getLocation()','121','org.jhotdraw.draw.BezierNodeHandle','protected Point getLocation() {\r\n    if ((getOwner().getNodeCount()) > (index)) {\r\n        Point2D.Double p = getOwner().getPoint(index, 0);\r\n        if ((AttributeKeys.TRANSFORM.get(getTransformOwner())) != null) {\r\n            AttributeKeys.TRANSFORM.get(getTransformOwner()).transform(p, p);\r\n        }\r\n        return view.drawingToView(p);\r\n    } else {\r\n        return new Point(10, 10);\r\n    }\r\n}'),(1247,'getOwner()','org.jhotdraw.draw.BezierNodeHandle.getOwner()','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic BezierFigure getOwner() {\r\n    return ((BezierFigure) (super.getOwner()));\r\n}'),(1248,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.BezierNodeHandle.getToolTipText(java.awt.Point)','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    BezierPath.Node node = getBezierNode();\r\n    return node == null ? null : labels.getFormatted(\"handle.bezierNode.toolTipText\", labels.getFormatted(((node.getMask()) == 0 ? \"handle.bezierNode.linear.value\" : (node.getMask()) == (BezierPath.C1C2_MASK) ? \"handle.bezierNode.cubic.value\" : \"handle.bezierNode.quadratic.value\")));\r\n}'),(1249,'getTransformOwner()','org.jhotdraw.draw.BezierNodeHandle.getTransformOwner()','121','org.jhotdraw.draw.BezierNodeHandle','protected Figure getTransformOwner() {\r\n    return transformOwner;\r\n}'),(1250,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.BezierNodeHandle.isCombinableWith(org.jhotdraw.draw.Handle)','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    /* if (super.isCombinableWith(h)) {\n    BezierNodeHandle that = (BezierNodeHandle) h;\n    return that.index == this.index &&\n    that.getOwner().getNodeCount() ==\n    this.getOwner().getNodeCount();\n    }\n     */\r\n    return false;\r\n}'),(1251,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.BezierNodeHandle.keyPressed(java.awt.event.KeyEvent)','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    final BezierFigure f = getOwner();\r\n    oldNode = f.getNode(index);\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            f.willChange();\r\n            f.setPoint(index, new Point2D.Double(oldNode.x[0], ((oldNode.y[0]) - 1.0)));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            f.willChange();\r\n            f.setPoint(index, new Point2D.Double(oldNode.x[0], ((oldNode.y[0]) + 1.0)));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            f.willChange();\r\n            f.setPoint(index, new Point2D.Double(((oldNode.x[0]) - 1.0), oldNode.y[0]));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            f.willChange();\r\n            f.setPoint(index, new Point2D.Double(((oldNode.x[0]) + 1.0), oldNode.y[0]));\r\n            f.changed();\r\n            view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldNode, f.getNode(index)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DELETE :\r\n        case KeyEvent.VK_BACK_SPACE :\r\n            Rectangle invalidatedArea = getDrawingArea();\r\n            f.willChange();\r\n            final BezierPath.Node removedNode = f.removeNode(index);\r\n            f.changed();\r\n            fireHandleRequestRemove(invalidatedArea);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.joinSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    view.removeFromSelection(f);\r\n                    f.willChange();\r\n                    f.removeNode(index);\r\n                    f.changed();\r\n                    view.addToSelection(f);\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    view.removeFromSelection(f);\r\n                    f.willChange();\r\n                    f.addNode(index, removedNode);\r\n                    f.changed();\r\n                    view.addToSelection(f);\r\n                }\r\n            });\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(1252,'trackDoubleClick(java.awt.Point,int)','org.jhotdraw.draw.BezierNodeHandle.trackDoubleClick(java.awt.Point,int)','121','org.jhotdraw.draw.BezierNodeHandle','@Override\r\npublic void trackDoubleClick(Point p, int modifiersEx) {\r\n    final BezierFigure f = getOwner();\r\n    if (((f.getNodeCount()) > 2) && ((modifiersEx & (((InputEvent.META_DOWN_MASK) | (InputEvent.CTRL_DOWN_MASK)) | (InputEvent.ALT_DOWN_MASK))) == 0)) {\r\n        Rectangle invalidatedArea = getDrawingArea();\r\n        f.willChange();\r\n        final BezierPath.Node removedNode = f.removeNode(index);\r\n        f.changed();\r\n        fireHandleRequestRemove(invalidatedArea);\r\n        fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                return labels.getString(\"edit.bezierPath.joinSegments.text\");\r\n            }\r\n\r\n            @Override\r\n            public void redo() throws CannotRedoException {\r\n                super.redo();\r\n                view.removeFromSelection(f);\r\n                f.willChange();\r\n                f.removeNode(index);\r\n                f.changed();\r\n                view.addToSelection(f);\r\n            }\r\n\r\n            @Override\r\n            public void undo() throws CannotUndoException {\r\n                super.undo();\r\n                view.removeFromSelection(f);\r\n                f.willChange();\r\n                f.addNode(index, removedNode);\r\n                f.changed();\r\n                view.addToSelection(f);\r\n            }\r\n        });\r\n    }\r\n}'),(1253,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierNodeHandle.trackEnd(java.awt.Point,java.awt.Point,int)','121','org.jhotdraw.draw.BezierNodeHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    final BezierFigure f = getOwner();\r\n    BezierPath.Node oldValue = ((BezierPath.Node) (oldNode.clone()));\r\n    BezierPath.Node newValue = f.getNode(index);\r\n    // Change node type\r\n    if (((modifiersEx & ((((InputEvent.META_DOWN_MASK) | (InputEvent.CTRL_DOWN_MASK)) | (InputEvent.ALT_DOWN_MASK)) | (InputEvent.SHIFT_DOWN_MASK))) != 0) && ((modifiersEx & (InputEvent.BUTTON2_MASK)) == 0)) {\r\n        f.willChange();\r\n        if ((((index) > 0) && ((index) < (f.getNodeCount()))) || (f.isClosed())) {\r\n            newValue.mask = ((newValue.mask) + 3) % 4;\r\n        } else\r\n            if ((index) == 0) {\r\n                newValue.mask = (((newValue.mask) & (BezierPath.C2_MASK)) == 0) ? BezierPath.C2_MASK : 0;\r\n            } else {\r\n                newValue.mask = (((newValue.mask) & (BezierPath.C1_MASK)) == 0) ? BezierPath.C1_MASK : 0;\r\n            }\r\n\r\n        f.setNode(index, newValue);\r\n        f.changed();\r\n        fireHandleRequestSecondaryHandles();\r\n    }\r\n    view.getDrawing().fireUndoableEditHappened(new BezierNodeEdit(f, index, oldValue, newValue) {\r\n        @Override\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            fireHandleRequestSecondaryHandles();\r\n        }\r\n\r\n        @Override\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            fireHandleRequestSecondaryHandles();\r\n        }\r\n    });\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}'),(1254,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.BezierNodeHandle.trackStart(java.awt.Point,int)','121','org.jhotdraw.draw.BezierNodeHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    BezierFigure figure = getOwner();\r\n    view.getDrawing().fireUndoableEditHappened((edit = new CompositeEdit(\"Punkt verschieben\")));\r\n    Point2D.Double location = view.getConstrainer().constrainPoint(view.viewToDrawing(getLocation()));\r\n    Point2D.Double p = view.getConstrainer().constrainPoint(view.viewToDrawing(anchor));\r\n    oldNode = figure.getNode(index);\r\n    fireHandleRequestSecondaryHandles();\r\n}'),(1255,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierNodeHandle.trackStep(java.awt.Point,java.awt.Point,int)','121','org.jhotdraw.draw.BezierNodeHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    BezierFigure figure = getOwner();\r\n    figure.willChange();\r\n    Point2D.Double p = view.getConstrainer().constrainPoint(view.viewToDrawing(lead));\r\n    if ((AttributeKeys.TRANSFORM.get(getTransformOwner())) != null) {\r\n        try {\r\n            AttributeKeys.TRANSFORM.get(getTransformOwner()).inverseTransform(p, p);\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    BezierPath.Node n = figure.getNode(index);\r\n    // fireAreaInvalidated(n);\r\n    n.moveTo(p);\r\n    // fireAreaInvalidated(n);\r\n    figure.setNode(index, n);\r\n    figure.changed();\r\n}'),(1256,'-init-(org.jhotdraw.draw.BezierFigure)','org.jhotdraw.draw.BezierOutlineHandle.-init-(org.jhotdraw.draw.BezierFigure)','122','org.jhotdraw.draw.BezierOutlineHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierOutlineHandle(BezierFigure owner) {\r\n    this(owner, false);\r\n}'),(1257,'-init-(org.jhotdraw.draw.BezierFigure,boolean)','org.jhotdraw.draw.BezierOutlineHandle.-init-(org.jhotdraw.draw.BezierFigure,boolean)','122','org.jhotdraw.draw.BezierOutlineHandle','public BezierOutlineHandle(BezierFigure owner, boolean isHoverHandle) {\r\n    super(owner);\r\n    this.isHoverHandle = isHoverHandle;\r\n}'),(1258,'basicGetBounds()','org.jhotdraw.draw.BezierOutlineHandle.basicGetBounds()','122','org.jhotdraw.draw.BezierOutlineHandle','protected Rectangle basicGetBounds() {\r\n    return view.drawingToView(getOwner().getDrawingArea());\r\n}'),(1259,'contains(java.awt.Point)','org.jhotdraw.draw.BezierOutlineHandle.contains(java.awt.Point)','122','org.jhotdraw.draw.BezierOutlineHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(1260,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BezierOutlineHandle.draw(java.awt.Graphics2D)','122','org.jhotdraw.draw.BezierOutlineHandle','@Override\r\npublic void draw(Graphics2D g) {\r\n    Shape bounds = getOwner().getBezierPath();\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n    }\r\n    bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n    Stroke stroke1;\r\n    Color strokeColor1;\r\n    Stroke stroke2;\r\n    Color strokeColor2;\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        if (isHoverHandle) {\r\n            stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_1_HOVER)));\r\n            strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_1_HOVER)));\r\n            stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_2_HOVER)));\r\n            strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_2_HOVER)));\r\n        } else {\r\n            stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_1)));\r\n            strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_1)));\r\n            stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_2)));\r\n            strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_2)));\r\n        }\r\n    } else {\r\n        stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_1_DISABLED)));\r\n        strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_1_DISABLED)));\r\n        stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_2_DISABLED)));\r\n        strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_2_DISABLED)));\r\n    }\r\n    if ((stroke1 != null) && (strokeColor1 != null)) {\r\n        g.setStroke(stroke1);\r\n        g.setColor(strokeColor1);\r\n        g.draw(bounds);\r\n    }\r\n    if ((stroke2 != null) && (strokeColor2 != null)) {\r\n        g.setStroke(stroke2);\r\n        g.setColor(strokeColor2);\r\n        g.draw(bounds);\r\n    }\r\n}'),(1261,'getOwner()','org.jhotdraw.draw.BezierOutlineHandle.getOwner()','122','org.jhotdraw.draw.BezierOutlineHandle','public BezierFigure getOwner() {\r\n    return ((BezierFigure) (super.getOwner()));\r\n}'),(1262,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierOutlineHandle.trackEnd(java.awt.Point,java.awt.Point,int)','122','org.jhotdraw.draw.BezierOutlineHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(1263,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.BezierOutlineHandle.trackStart(java.awt.Point,int)','122','org.jhotdraw.draw.BezierOutlineHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(1264,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierOutlineHandle.trackStep(java.awt.Point,java.awt.Point,int)','122','org.jhotdraw.draw.BezierOutlineHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(1265,'-init-(int)','org.jhotdraw.draw.BezierPointLocator.-init-(int)','123','org.jhotdraw.draw.BezierPointLocator','public BezierPointLocator(int index) {\r\n    this.index = index;\r\n    this.coord = 0;\r\n}'),(1266,'-init-(int,int)','org.jhotdraw.draw.BezierPointLocator.-init-(int,int)','123','org.jhotdraw.draw.BezierPointLocator','public BezierPointLocator(int index, int coord) {\r\n    this.index = index;\r\n    this.coord = index;\r\n}'),(1267,'locate(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BezierPointLocator.locate(org.jhotdraw.draw.Figure)','123','org.jhotdraw.draw.BezierPointLocator','public Point2D.Double locate(Figure owner) {\r\n    BezierFigure plf = ((BezierFigure) (owner));\r\n    if ((index) < (plf.getNodeCount())) {\r\n        return plf.getPoint(index, coord);\r\n    }\r\n    return new Point2D.Double(0, 0);\r\n}'),(1268,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.BezierPointLocator.read(org.jhotdraw.xml.DOMInput)','123','org.jhotdraw.draw.BezierPointLocator','public void read(DOMInput in) {\r\n    index = in.getAttribute(\"index\", 0);\r\n    coord = in.getAttribute(\"coord\", 0);\r\n}'),(1269,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.BezierPointLocator.write(org.jhotdraw.xml.DOMOutput)','123','org.jhotdraw.draw.BezierPointLocator','public void write(DOMOutput out) {\r\n    out.addAttribute(\"index\", index, 0);\r\n    out.addAttribute(\"coord\", coord, 0);\r\n}'),(1270,'-init-(org.jhotdraw.draw.BezierFigure)','org.jhotdraw.draw.BezierScaleHandle.-init-(org.jhotdraw.draw.BezierFigure)','124','org.jhotdraw.draw.BezierScaleHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierScaleHandle(BezierFigure owner) {\r\n    super(owner);\r\n}'),(1271,'basicGetBounds()','org.jhotdraw.draw.BezierScaleHandle.basicGetBounds()','124','org.jhotdraw.draw.BezierScaleHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(1272,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BezierScaleHandle.draw(java.awt.Graphics2D)','124','org.jhotdraw.draw.BezierScaleHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawCircle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_STROKE_COLOR))));\r\n}'),(1273,'getBezierFigure()','org.jhotdraw.draw.BezierScaleHandle.getBezierFigure()','124','org.jhotdraw.draw.BezierScaleHandle','private BezierFigure getBezierFigure() {\r\n    return ((BezierFigure) (getOwner()));\r\n}'),(1274,'getLocation()','org.jhotdraw.draw.BezierScaleHandle.getLocation()','124','org.jhotdraw.draw.BezierScaleHandle','public Point getLocation() {\r\n    if ((location) == null) {\r\n        /* location = */\r\n        return view.drawingToView(getOrigin());\r\n    }\r\n    return location;\r\n}'),(1275,'getOrigin()','org.jhotdraw.draw.BezierScaleHandle.getOrigin()','124','org.jhotdraw.draw.BezierScaleHandle','private Point2D.Double getOrigin() {\r\n    // find a nice place to put handle\r\n    // Need to pick a place that will not overlap with point handle\r\n    // and is internal to polygon\r\n    int handlesize = getHandlesize();\r\n    // Try for one handlesize step away from outermost toward center\r\n    Point2D.Double outer = getBezierFigure().getOutermostPoint();\r\n    Point2D.Double ctr = getBezierFigure().getCenter();\r\n    double len = Geom.length(outer.x, outer.y, ctr.x, ctr.y);\r\n    if (len == 0) {\r\n        // best we can do?\r\n        return new Point2D.Double(((outer.x) - (handlesize / 2)), ((outer.y) + (handlesize / 2)));\r\n    }\r\n    double u = handlesize / len;\r\n    if (u > 1.0) {\r\n        // best we can do?\r\n        return new Point2D.Double(((((outer.x) * 3) + (ctr.x)) / 4), ((((outer.y) * 3) + (ctr.y)) / 4));\r\n    } else {\r\n        return new Point2D.Double((((outer.x) * (1.0 - u)) + ((ctr.x) * u)), (((outer.y) * (1.0 - u)) + ((ctr.y) * u)));\r\n    }\r\n}'),(1276,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.BezierScaleHandle.isCombinableWith(org.jhotdraw.draw.Handle)','124','org.jhotdraw.draw.BezierScaleHandle','public boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}'),(1277,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierScaleHandle.trackEnd(java.awt.Point,java.awt.Point,int)','124','org.jhotdraw.draw.BezierScaleHandle','/* public  void scaleRotate(Point anchor, Polygon originalPolygon, Point p) {\nwillChange();\n\n// use center to determine relative angles and lengths\nPoint ctr = center(originalPolygon);\ndouble anchorLen = Geom.length(ctr.x, ctr.y, anchor.x, anchor.y);\n\nif (anchorLen > 0.0) {\ndouble newLen = Geom.length(ctr.x, ctr.y, p.x, p.y);\ndouble ratio = newLen / anchorLen;\n\ndouble anchorAngle = Math.atan2(anchor.y - ctr.y, anchor.x - ctr.x);\ndouble newAngle = Math.atan2(p.y - ctr.y, p.x - ctr.x);\ndouble rotation = newAngle - anchorAngle;\n\nint n = originalPolygon.npoints;\nint[] xs = new int[n];\nint[] ys = new int[n];\n\nfor (int i = 0; i < n; ++i) {\nint x = originalPolygon.xpoints[i];\nint y = originalPolygon.ypoints[i];\ndouble l = Geom.length(ctr.x, ctr.y, x, y) * ratio;\ndouble a = Math.atan2(y - ctr.y, x - ctr.x) + rotation;\nxs[i] = (int)(ctr.x + l * Math.cos(a) + 0.5);\nys[i] = (int)(ctr.y + l * Math.sin(a) + 0.5);\n}\nsetInternalPolygon(new Polygon(xs, ys, n));\n}\nchanged();\n}\n */\r\npublic void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    view.getDrawing().fireUndoableEditHappened(new RestoreDataEdit(getOwner(), restoreData));\r\n    location = null;\r\n}'),(1278,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.BezierScaleHandle.trackStart(java.awt.Point,int)','124','org.jhotdraw.draw.BezierScaleHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    location = new Point(anchor.x, anchor.y);\r\n    restoreData = getBezierFigure().getTransformRestoreData();\r\n    transform = new AffineTransform();\r\n    center = getBezierFigure().getCenter();\r\n    Point2D.Double anchorPoint = view.viewToDrawing(anchor);\r\n    startTheta = Geom.angle(center.x, center.y, anchorPoint.x, anchorPoint.y);\r\n    startLength = Geom.length(center.x, center.y, anchorPoint.x, anchorPoint.y);\r\n}'),(1279,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BezierScaleHandle.trackStep(java.awt.Point,java.awt.Point,int)','124','org.jhotdraw.draw.BezierScaleHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    location = new Point(lead.x, lead.y);\r\n    Point2D.Double leadPoint = view.viewToDrawing(lead);\r\n    double stepTheta = Geom.angle(center.x, center.y, leadPoint.x, leadPoint.y);\r\n    double stepLength = Geom.length(center.x, center.y, leadPoint.x, leadPoint.y);\r\n    double scaleFactor = ((modifiersEx & ((InputEvent.ALT_DOWN_MASK) | (InputEvent.SHIFT_DOWN_MASK))) != 0) ? 1.0 : stepLength / (startLength);\r\n    transform.setToIdentity();\r\n    transform.translate(center.x, center.y);\r\n    transform.scale(scaleFactor, scaleFactor);\r\n    transform.rotate((stepTheta - (startTheta)));\r\n    transform.translate((-(center.x)), (-(center.y)));\r\n    getOwner().willChange();\r\n    getOwner().restoreTransformTo(restoreData);\r\n    getOwner().transform(transform);\r\n    getOwner().changed();\r\n}'),(1280,'-init-(org.jhotdraw.draw.BezierFigure)','org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure)','125','org.jhotdraw.draw.BezierTool','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierTool(BezierFigure prototype) {\r\n    this(prototype, null);\r\n}'),(1281,'-init-(org.jhotdraw.draw.BezierFigure,java.util.Map)','org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure,java.util.Map)','125','org.jhotdraw.draw.BezierTool','/**\r\n * Creates a new instance.\r\n */\r\npublic BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}'),(1282,'-init-(org.jhotdraw.draw.BezierFigure,java.util.Map,java.lang.String)','org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure,java.util.Map,java.lang.String)','125','org.jhotdraw.draw.BezierTool','public BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes, String name) {\r\n    this.prototype = prototype;\r\n    this.attributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}'),(1283,'-init-()','org.jhotdraw.draw.BezierTool.-init-()','125','org.jhotdraw.draw.BezierTool','1() {\r\n}'),(1284,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.BezierTool.activate(org.jhotdraw.draw.DrawingEditor)','125','org.jhotdraw.draw.BezierTool','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n}'),(1285,'addPointToFigure(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.BezierTool.addPointToFigure(java.awt.geom.Point2D$Double)','125','org.jhotdraw.draw.BezierTool','protected void addPointToFigure(Point2D.Double newPoint) {\r\n    int pointCount = createdFigure.getNodeCount();\r\n    createdFigure.willChange();\r\n    if (pointCount < 2) {\r\n        createdFigure.addNode(new BezierPath.Node(newPoint));\r\n    } else {\r\n        Point2D.Double endPoint = createdFigure.getEndPoint();\r\n        Point2D.Double secondLastPoint = (pointCount <= 1) ? endPoint : createdFigure.getPoint((pointCount - 2), 0);\r\n        if (newPoint.equals(endPoint)) {\r\n            // nothing to do\r\n        } else\r\n            if ((pointCount > 1) && (Geom.lineContainsPoint(newPoint.x, newPoint.y, secondLastPoint.x, secondLastPoint.y, endPoint.x, endPoint.y, (0.9F / (getView().getScaleFactor()))))) {\r\n                createdFigure.setPoint((pointCount - 1), 0, newPoint);\r\n            } else {\r\n                createdFigure.addNode(new BezierPath.Node(newPoint));\r\n            }\r\n\r\n    }\r\n    createdFigure.changed();\r\n}'),(1286,'calculateFittedCurve(org.jhotdraw.geom.BezierPath)','org.jhotdraw.draw.BezierTool.calculateFittedCurve(org.jhotdraw.geom.BezierPath)','125','org.jhotdraw.draw.BezierTool','protected BezierPath calculateFittedCurve(BezierPath path) {\r\n    return Bezier.fitBezierPath(path, (1.5 / (getView().getScaleFactor())));\r\n}'),(1287,'createFigure()','org.jhotdraw.draw.BezierTool.createFigure()','125','org.jhotdraw.draw.BezierTool','@SuppressWarnings(\"unchecked\")\r\nprotected BezierFigure createFigure() {\r\n    BezierFigure f = ((BezierFigure) (prototype.clone()));\r\n    getEditor().applyDefaultAttributesTo(f);\r\n    if ((attributes) != null) {\r\n        for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n            entry.getKey().basicSet(f, entry.getValue());\r\n        }\r\n    }\r\n    return f;\r\n}'),(1288,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.BezierTool.deactivate(org.jhotdraw.draw.DrawingEditor)','125','org.jhotdraw.draw.BezierTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    getView().setCursor(Cursor.getDefaultCursor());\r\n    if ((createdFigure) != null) {\r\n        if (((anchor) != null) && ((mouseLocation) != null)) {\r\n            Rectangle r = new Rectangle(anchor);\r\n            r.add(mouseLocation);\r\n            if (((createdFigure.getNodeCount()) > 0) && (createdFigure.isClosed())) {\r\n                r.add(getView().drawingToView(createdFigure.getStartPoint()));\r\n            }\r\n            fireAreaInvalidated(r);\r\n        }\r\n        finishCreation(createdFigure, creationView);\r\n        createdFigure = null;\r\n    }\r\n}'),(1289,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BezierTool.draw(java.awt.Graphics2D)','125','org.jhotdraw.draw.BezierTool','@Override\r\npublic void draw(Graphics2D g) {\r\n    if (((((createdFigure) != null)// \r\n     && ((anchor) != null))// \r\n     && ((mouseLocation) != null))// \r\n     && ((getView()) == (creationView))) {\r\n        g.setColor(Color.BLACK);\r\n        g.setStroke(new BasicStroke(1.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 1.0F, 5.0F }, 0.0F));\r\n        g.drawLine(anchor.x, anchor.y, mouseLocation.x, mouseLocation.y);\r\n        if (((!(isWorking)) && (createdFigure.isClosed())) && ((createdFigure.getNodeCount()) > 1)) {\r\n            Point p = creationView.drawingToView(createdFigure.getStartPoint());\r\n            g.drawLine(mouseLocation.x, mouseLocation.y, p.x, p.y);\r\n        }\r\n    }\r\n}'),(1290,'finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.BezierTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)','125','org.jhotdraw.draw.BezierTool','protected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    fireUndoEvent(createdFigure, creationView);\r\n    creationView.addToSelection(createdFigure);\r\n    if (isToolDoneAfterCreation) {\r\n        fireToolDone();\r\n    }\r\n}'),(1291,'fireUndoEvent(org.jhotdraw.draw.Figure,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.BezierTool.fireUndoEvent(org.jhotdraw.draw.Figure,org.jhotdraw.draw.DrawingView)','125','org.jhotdraw.draw.BezierTool','protected void fireUndoEvent(Figure createdFigure, DrawingView creationView) {\r\n    final Figure addedFigure = createdFigure;\r\n    final Drawing addedDrawing = creationView.getDrawing();\r\n    final DrawingView addedView = creationView;\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        public String getPresentationName() {\r\n            return presentationName;\r\n        }\r\n\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            addedDrawing.remove(addedFigure);\r\n        }\r\n\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            addedView.clearSelection();\r\n            addedDrawing.add(addedFigure);\r\n            addedView.addToSelection(addedFigure);\r\n        }\r\n    });\r\n}'),(1292,'getAddedFigure()','org.jhotdraw.draw.BezierTool.getAddedFigure()','125','org.jhotdraw.draw.BezierTool','protected Figure getAddedFigure() {\r\n    return createdFigure;\r\n}'),(1293,'getCreatedFigure()','org.jhotdraw.draw.BezierTool.getCreatedFigure()','125','org.jhotdraw.draw.BezierTool','protected Figure getCreatedFigure() {\r\n    return createdFigure;\r\n}'),(1294,'getPresentationName()','org.jhotdraw.draw.BezierTool.getPresentationName()','125','org.jhotdraw.draw.BezierTool','public String getPresentationName() {\r\n    return presentationName;\r\n}'),(1295,'isToolDoneAfterCreation()','org.jhotdraw.draw.BezierTool.isToolDoneAfterCreation()','125','org.jhotdraw.draw.BezierTool','public boolean isToolDoneAfterCreation() {\r\n    return isToolDoneAfterCreation;\r\n}'),(1296,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.draw.BezierTool.mouseClicked(java.awt.event.MouseEvent)','125','org.jhotdraw.draw.BezierTool','@Override\r\npublic void mouseClicked(MouseEvent evt) {\r\n    if ((createdFigure) != null) {\r\n        switch (evt.getClickCount()) {\r\n            case 1 :\r\n                if ((createdFigure.getNodeCount()) > 2) {\r\n                    Rectangle r = new Rectangle(getView().drawingToView(createdFigure.getStartPoint()));\r\n                    r.grow(2, 2);\r\n                    if (r.contains(evt.getX(), evt.getY())) {\r\n                        createdFigure.setClosed(true);\r\n                        finishCreation(createdFigure, creationView);\r\n                        createdFigure = null;\r\n                        if (isToolDoneAfterCreation) {\r\n                            fireToolDone();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 2 :\r\n                finishWhenMouseReleased = null;\r\n                finishCreation(createdFigure, creationView);\r\n                createdFigure = null;\r\n                break;\r\n        }\r\n    }\r\n}'),(1297,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.BezierTool.mouseDragged(java.awt.event.MouseEvent)','125','org.jhotdraw.draw.BezierTool','public void mouseDragged(MouseEvent evt) {\r\n    if ((finishWhenMouseReleased) == null) {\r\n        finishWhenMouseReleased = Boolean.TRUE;\r\n    }\r\n    int x = evt.getX();\r\n    int y = evt.getY();\r\n    addPointToFigure(getView().viewToDrawing(new Point(x, y)));\r\n}'),(1298,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.BezierTool.mouseMoved(java.awt.event.MouseEvent)','125','org.jhotdraw.draw.BezierTool','@Override\r\npublic void mouseMoved(MouseEvent evt) {\r\n    if ((((createdFigure) != null) && ((anchor) != null)) && ((mouseLocation) != null)) {\r\n        if ((evt.getSource()) == (creationView)) {\r\n            Rectangle r = new Rectangle(anchor);\r\n            r.add(mouseLocation);\r\n            r.add(evt.getPoint());\r\n            if ((createdFigure.isClosed()) && ((createdFigure.getNodeCount()) > 0)) {\r\n                r.add(creationView.drawingToView(createdFigure.getStartPoint()));\r\n            }\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n            mouseLocation = evt.getPoint();\r\n        }\r\n    }\r\n}'),(1299,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.BezierTool.mousePressed(java.awt.event.MouseEvent)','125','org.jhotdraw.draw.BezierTool','@Override\r\npublic void mousePressed(MouseEvent evt) {\r\n    if (BezierTool.DEBUG) {\r\n        System.out.println((\"BezierTool.mousePressed \" + evt));\r\n    }\r\n    if ((mouseLocation) != null) {\r\n        Rectangle r = new Rectangle(mouseLocation);\r\n        r.add(evt.getPoint());\r\n        r.grow(1, 1);\r\n        fireAreaInvalidated(r);\r\n    }\r\n    mouseLocation = evt.getPoint();\r\n    super.mousePressed(evt);\r\n    if (((createdFigure) != null) && ((creationView) != (getView()))) {\r\n        finishCreation(createdFigure, creationView);\r\n        createdFigure = null;\r\n    }\r\n    if ((createdFigure) == null) {\r\n        creationView = getView();\r\n        creationView.clearSelection();\r\n        finishWhenMouseReleased = null;\r\n        createdFigure = createFigure();\r\n        createdFigure.addNode(new BezierPath.Node(creationView.getConstrainer().constrainPoint(creationView.viewToDrawing(anchor))));\r\n        getDrawing().add(createdFigure);\r\n    } else {\r\n        if ((evt.getClickCount()) == 1) {\r\n            addPointToFigure(creationView.getConstrainer().constrainPoint(creationView.viewToDrawing(anchor)));\r\n        }\r\n    }\r\n    nodeCountBeforeDrag = createdFigure.getNodeCount();\r\n}'),(1300,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.BezierTool.mouseReleased(java.awt.event.MouseEvent)','125','org.jhotdraw.draw.BezierTool','public void mouseReleased(MouseEvent evt) {\r\n    if (BezierTool.DEBUG) {\r\n        System.out.println((\"BezierTool.mouseReleased \" + evt));\r\n    }\r\n    isWorking = false;\r\n    if ((createdFigure.getNodeCount()) > ((nodeCountBeforeDrag) + 1)) {\r\n        createdFigure.willChange();\r\n        BezierPath figurePath = createdFigure.getBezierPath();\r\n        BezierPath digitizedPath = new BezierPath();\r\n        for (int i = (nodeCountBeforeDrag) - 1, n = figurePath.size(); i < n; i++) {\r\n            digitizedPath.add(figurePath.get(((nodeCountBeforeDrag) - 1)));\r\n            figurePath.remove(((nodeCountBeforeDrag) - 1));\r\n        }\r\n        BezierPath fittedPath = calculateFittedCurve(digitizedPath);\r\n        // figurePath.addAll(digitizedPath);\r\n        figurePath.addAll(fittedPath);\r\n        createdFigure.setBezierPath(figurePath);\r\n        createdFigure.changed();\r\n        nodeCountBeforeDrag = createdFigure.getNodeCount();\r\n    }\r\n    if ((finishWhenMouseReleased) == (Boolean.TRUE)) {\r\n        if ((createdFigure.getNodeCount()) > 1) {\r\n            finishCreation(createdFigure, creationView);\r\n            createdFigure = null;\r\n            finishWhenMouseReleased = null;\r\n            return;\r\n        }\r\n    } else\r\n        if ((finishWhenMouseReleased) == null) {\r\n            finishWhenMouseReleased = Boolean.FALSE;\r\n        }\r\n\r\n    // repaint dotted line\r\n    Rectangle r = new Rectangle(anchor);\r\n    r.add(mouseLocation);\r\n    r.add(evt.getPoint());\r\n    r.grow(1, 1);\r\n    fireAreaInvalidated(r);\r\n    anchor.x = evt.getX();\r\n    anchor.y = evt.getY();\r\n    mouseLocation = evt.getPoint();\r\n}'),(1301,'setToolDoneAfterCreation(boolean)','org.jhotdraw.draw.BezierTool.setToolDoneAfterCreation(boolean)','125','org.jhotdraw.draw.BezierTool','public void setToolDoneAfterCreation(boolean b) {\r\n    isToolDoneAfterCreation = b;\r\n}'),(1302,'-init-(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.BidirectionalConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Creates a new instance.\r\n */\r\npublic BidirectionalConnectionTool(ConnectionFigure prototype) {\r\n    this.prototype = prototype;\r\n}'),(1303,'-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)','org.jhotdraw.draw.BidirectionalConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public BidirectionalConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this.prototype = prototype;\r\n    this.attributes = attributes;\r\n}'),(1304,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.BidirectionalConnectionTool.activate(org.jhotdraw.draw.DrawingEditor)','126','org.jhotdraw.draw.BidirectionalConnectionTool','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().clearSelection();\r\n}'),(1305,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.areaInvalidated(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void areaInvalidated(FigureEvent evt) {\r\n    fireAreaInvalidated(evt.getInvalidatedArea());\r\n}'),(1306,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.attributeChanged(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void attributeChanged(FigureEvent e) {\r\n}'),(1307,'createFigure()','org.jhotdraw.draw.BidirectionalConnectionTool.createFigure()','126','org.jhotdraw.draw.BidirectionalConnectionTool','// --\r\n/**\r\n * Creates the ConnectionFigure. By default the figure prototype is\r\n * cloned.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected ConnectionFigure createFigure() {\r\n    ConnectionFigure f = ((ConnectionFigure) (prototype.clone()));\r\n    getEditor().applyDefaultAttributesTo(f);\r\n    if ((attributes) != null) {\r\n        for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n            entry.getKey().basicSet(f, entry.getValue());\r\n        }\r\n    }\r\n    return f;\r\n}'),(1308,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.BidirectionalConnectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)','126','org.jhotdraw.draw.BidirectionalConnectionTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n}'),(1309,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BidirectionalConnectionTool.draw(java.awt.Graphics2D)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void draw(Graphics2D g) {\r\n    if ((createdFigure) != null) {\r\n        createdFigure.draw(g);\r\n    }\r\n}'),(1310,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.figureAdded(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void figureAdded(FigureEvent e) {\r\n}'),(1311,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.figureChanged(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void figureChanged(FigureEvent e) {\r\n}'),(1312,'figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void figureHandlesChanged(FigureEvent e) {\r\n}'),(1313,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.figureRemoved(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void figureRemoved(FigureEvent e) {\r\n}'),(1314,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void figureRequestRemove(FigureEvent e) {\r\n}'),(1315,'findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.BidirectionalConnectionTool.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    return drawing.findFigureExcept(p, createdFigure);\r\n}'),(1316,'findConnection(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.BidirectionalConnectionTool.findConnection(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Finds an existing connection figure.\r\n */\r\nprotected ConnectionFigure findConnection(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        Figure fInside = f.findFigureInside(p);\r\n        if ((fInside != null) && (fInside instanceof ConnectionFigure)) {\r\n            return ((ConnectionFigure) (fInside));\r\n        }\r\n    }\r\n    return null;\r\n}'),(1317,'findConnectionStart(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.BidirectionalConnectionTool.findConnectionStart(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Finds a connection start figure.\r\n */\r\nprotected Figure findConnectionStart(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    if ((target != null) && (target.canConnect())) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(1318,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}'),(1319,'findSource(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.BidirectionalConnectionTool.findSource(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findSource(Point2D.Double p, Drawing drawing) {\r\n    return findConnectableFigure(p, drawing);\r\n}'),(1320,'findTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.BidirectionalConnectionTool.findTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    Connector targetConnector = (target == null) ? null : target.findConnector(p, prototype);\r\n    Connector startConnector = getStartConnector();\r\n    if ((((targetConnector != null) && ((getConnection()) != null)) && (target.canConnect())) && ((getConnection().canConnect(startConnector, targetConnector)) || (getConnection().canConnect(targetConnector, startConnector)))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(1321,'getConnection()','org.jhotdraw.draw.BidirectionalConnectionTool.getConnection()','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Gets the connection which is created by this tool\r\n */\r\nprotected ConnectionFigure getConnection() {\r\n    return connection;\r\n}'),(1322,'getCreatedFigure()','org.jhotdraw.draw.BidirectionalConnectionTool.getCreatedFigure()','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Gets the figure that was actually added\r\n * Note, this can be a different figure from the one which has been created.\r\n */\r\nprotected Figure getCreatedFigure() {\r\n    return createdFigure;\r\n}'),(1323,'getEndConnector()','org.jhotdraw.draw.BidirectionalConnectionTool.getEndConnector()','126','org.jhotdraw.draw.BidirectionalConnectionTool','protected Connector getEndConnector() {\r\n    return endConnector;\r\n}'),(1324,'getStartConnector()','org.jhotdraw.draw.BidirectionalConnectionTool.getStartConnector()','126','org.jhotdraw.draw.BidirectionalConnectionTool','protected Connector getStartConnector() {\r\n    return startConnector;\r\n}'),(1325,'getTargetConnector()','org.jhotdraw.draw.BidirectionalConnectionTool.getTargetConnector()','126','org.jhotdraw.draw.BidirectionalConnectionTool','protected Connector getTargetConnector() {\r\n    return targetConnector;\r\n}'),(1326,'getTargetFigure()','org.jhotdraw.draw.BidirectionalConnectionTool.getTargetFigure()','126','org.jhotdraw.draw.BidirectionalConnectionTool','protected Figure getTargetFigure() {\r\n    return target;\r\n}'),(1327,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.mouseDragged(java.awt.event.MouseEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Adjust the created connection or split segment.\r\n */\r\npublic void mouseDragged(MouseEvent e) {\r\n    Point2D.Double p = viewToDrawing(new Point(e.getX(), e.getY()));\r\n    if ((getConnection()) != null) {\r\n        trackConnectors(e);\r\n        if ((getTargetConnector()) != null) {\r\n            p = getTargetConnector().getAnchor();\r\n        }\r\n        getConnection().setEndPoint(p);\r\n    } else\r\n        if ((editedConnection) != null) {\r\n            editedConnection.setPoint(splitPoint, p);\r\n        }\r\n\r\n}'),(1328,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.mouseMoved(java.awt.event.MouseEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','public void mouseMoved(MouseEvent evt) {\r\n    trackConnectors(evt);\r\n}'),(1329,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.mousePressed(java.awt.event.MouseEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Manipulates connections in a context dependent way. If the\r\n * mouse down hits a figure start a new connection. If the mousedown\r\n * hits a connection split a segment or join two segments.\r\n */\r\npublic void mousePressed(MouseEvent evt) {\r\n    super.mousePressed(evt);\r\n    Point2D.Double ap = viewToDrawing(anchor);\r\n    setTargetFigure(findConnectionStart(ap, getDrawing()));\r\n    if ((getTargetFigure()) != null) {\r\n        setStartConnector(findConnector(ap, target, prototype));\r\n        if (((getStartConnector()) != null) && (prototype.canConnect(getTargetConnector()))) {\r\n            Point2D.Double p = getStartConnector().getAnchor();\r\n            setConnection(createFigure());\r\n            ConnectionFigure cf = getConnection();\r\n            cf.setBounds(p, p);\r\n            cf.addFigureListener(this);\r\n            setCreatedFigure(cf);\r\n        }\r\n    }\r\n}'),(1330,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.mouseReleased(java.awt.event.MouseEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','/**\r\n * Connects the figures if the mouse is released over another\r\n * figure.\r\n */\r\npublic void mouseReleased(MouseEvent e) {\r\n    Figure c = null;\r\n    Point2D.Double p = viewToDrawing(new Point(e.getX(), e.getY()));\r\n    if ((getStartConnector()) != null) {\r\n        c = findTarget(p, getDrawing());\r\n    }\r\n    if (c != null) {\r\n        setEndConnector(findConnector(p, c, prototype));\r\n        if ((getEndConnector()) != null) {\r\n            CompositeEdit creationEdit = new CompositeEdit(\"Verbindung erstellen\");\r\n            getDrawing().fireUndoableEditHappened(creationEdit);\r\n            getDrawing().add(getConnection());\r\n            if (getConnection().canConnect(getStartConnector(), getEndConnector())) {\r\n                getConnection().setStartConnector(getStartConnector());\r\n                getConnection().setEndConnector(getEndConnector());\r\n            } else {\r\n                getConnection().setStartConnector(getEndConnector());\r\n                getConnection().setEndConnector(getStartConnector());\r\n            }\r\n            getConnection().updateConnection();\r\n            getConnection().removeFigureListener(this);\r\n            getDrawing().fireUndoableEditHappened(creationEdit);\r\n        }\r\n    } else\r\n        if ((getConnection()) != null) {\r\n            getDrawing().remove(getConnection());\r\n        }\r\n\r\n    setConnection(null);\r\n    setStartConnector(null);\r\n    setEndConnector(null);\r\n    setCreatedFigure(null);\r\n    fireToolDone();\r\n}'),(1331,'setConnection(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.BidirectionalConnectionTool.setConnection(org.jhotdraw.draw.ConnectionFigure)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private void setConnection(ConnectionFigure newConnection) {\r\n    connection = newConnection;\r\n}'),(1332,'setCreatedFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BidirectionalConnectionTool.setCreatedFigure(org.jhotdraw.draw.Figure)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private void setCreatedFigure(Figure newCreatedFigure) {\r\n    createdFigure = newCreatedFigure;\r\n}'),(1333,'setEndConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.BidirectionalConnectionTool.setEndConnector(org.jhotdraw.draw.Connector)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private void setEndConnector(Connector newEndConnector) {\r\n    endConnector = newEndConnector;\r\n}'),(1334,'setStartConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.BidirectionalConnectionTool.setStartConnector(org.jhotdraw.draw.Connector)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private void setStartConnector(Connector newStartConnector) {\r\n    startConnector = newStartConnector;\r\n}'),(1335,'setTargetConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.BidirectionalConnectionTool.setTargetConnector(org.jhotdraw.draw.Connector)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private void setTargetConnector(Connector newTargetConnector) {\r\n    targetConnector = newTargetConnector;\r\n}'),(1336,'setTargetFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BidirectionalConnectionTool.setTargetFigure(org.jhotdraw.draw.Figure)','126','org.jhotdraw.draw.BidirectionalConnectionTool','private void setTargetFigure(Figure newTarget) {\r\n    target = newTarget;\r\n}'),(1337,'trackConnectors(java.awt.event.MouseEvent)','org.jhotdraw.draw.BidirectionalConnectionTool.trackConnectors(java.awt.event.MouseEvent)','126','org.jhotdraw.draw.BidirectionalConnectionTool','protected void trackConnectors(MouseEvent e) {\r\n    Point2D.Double p = viewToDrawing(new Point(e.getX(), e.getY()));\r\n    Figure c = null;\r\n    if ((getStartConnector()) == null) {\r\n        c = findSource(p, getDrawing());\r\n    } else {\r\n        c = findTarget(p, getDrawing());\r\n    }\r\n    Connector cc = null;\r\n    if (c != null) {\r\n        cc = findConnector(p, c, prototype);\r\n    }\r\n    if (cc != (getTargetConnector())) {\r\n        setTargetConnector(cc);\r\n    }\r\n    // track the figure containing the mouse\r\n    if (c != (getTargetFigure())) {\r\n        setTargetFigure(c);\r\n        Connector targetConnector = getTargetConnector();\r\n    }\r\n}'),(1338,'-init-(javax.swing.border.Border)','org.jhotdraw.draw.BorderRectangleFigure.-init-(javax.swing.border.Border)','127','org.jhotdraw.draw.BorderRectangleFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic BorderRectangleFigure(Border border) {\r\n    this.border = border;\r\n}'),(1339,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.draw.BorderRectangleFigure.drawFigure(java.awt.Graphics2D)','127','org.jhotdraw.draw.BorderRectangleFigure','public void drawFigure(Graphics2D g) {\r\n    Rectangle bounds = getBounds().getBounds();\r\n    border.paintBorder(BorderRectangleFigure.borderComponent, g, bounds.x, bounds.y, bounds.width, bounds.height);\r\n}'),(1340,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure)','128','org.jhotdraw.draw.BoundsOutlineHandle','/**\r\n * Creates a bounds outline handle for resizing a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner) {\r\n    this(owner, false, false);\r\n}'),(1341,'-init-(org.jhotdraw.draw.Figure,boolean,boolean)','org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,boolean,boolean)','128','org.jhotdraw.draw.BoundsOutlineHandle','/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, boolean isTransformHandle, boolean isHoverHandle) {\r\n    super(owner);\r\n    if (isTransformHandle) {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;\r\n    } else {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;\r\n    }\r\n}'),(1342,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)','128','org.jhotdraw.draw.BoundsOutlineHandle','/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1343,'basicGetBounds()','org.jhotdraw.draw.BoundsOutlineHandle.basicGetBounds()','128','org.jhotdraw.draw.BoundsOutlineHandle','@Override\r\nprotected Rectangle basicGetBounds() {\r\n    Shape bounds = getOwner().getBounds();\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n    }\r\n    bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n    Rectangle r = bounds.getBounds();\r\n    r.grow(2, 2);\r\n    return r;\r\n}'),(1344,'contains(java.awt.Point)','org.jhotdraw.draw.BoundsOutlineHandle.contains(java.awt.Point)','128','org.jhotdraw.draw.BoundsOutlineHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(1345,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.BoundsOutlineHandle.draw(java.awt.Graphics2D)','128','org.jhotdraw.draw.BoundsOutlineHandle','@Override\r\npublic void draw(Graphics2D g) {\r\n    Shape bounds = getOwner().getBounds();\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n    }\r\n    bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n    Stroke stroke1;\r\n    Color strokeColor1;\r\n    Stroke stroke2;\r\n    Color strokeColor2;\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        stroke1 = ((Stroke) (getEditor().getHandleAttribute(stroke1Enabled)));\r\n        strokeColor1 = ((Color) (getEditor().getHandleAttribute(strokeColor1Enabled)));\r\n        stroke2 = ((Stroke) (getEditor().getHandleAttribute(stroke2Enabled)));\r\n        strokeColor2 = ((Color) (getEditor().getHandleAttribute(strokeColor2Enabled)));\r\n    } else {\r\n        stroke1 = ((Stroke) (getEditor().getHandleAttribute(stroke1Disabled)));\r\n        strokeColor1 = ((Color) (getEditor().getHandleAttribute(strokeColor1Disabled)));\r\n        stroke2 = ((Stroke) (getEditor().getHandleAttribute(stroke2Disabled)));\r\n        strokeColor2 = ((Color) (getEditor().getHandleAttribute(strokeColor2Disabled)));\r\n    }\r\n    if ((stroke1 != null) && (strokeColor1 != null)) {\r\n        g.setStroke(stroke1);\r\n        g.setColor(strokeColor1);\r\n        g.draw(bounds);\r\n    }\r\n    if ((stroke2 != null) && (strokeColor2 != null)) {\r\n        g.setStroke(stroke2);\r\n        g.setColor(strokeColor2);\r\n        g.draw(bounds);\r\n    }\r\n}'),(1346,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BoundsOutlineHandle.trackEnd(java.awt.Point,java.awt.Point,int)','128','org.jhotdraw.draw.BoundsOutlineHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(1347,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.BoundsOutlineHandle.trackStart(java.awt.Point,int)','128','org.jhotdraw.draw.BoundsOutlineHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(1348,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.BoundsOutlineHandle.trackStep(java.awt.Point,java.awt.Point,int)','128','org.jhotdraw.draw.BoundsOutlineHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(1349,'-init-()','org.jhotdraw.draw.ChopBezierConnector.-init-()','129','org.jhotdraw.draw.ChopBezierConnector','/**\r\n * Creates a new instance.\r\n */\r\npublic ChopBezierConnector() {\r\n}'),(1350,'-init-(org.jhotdraw.draw.BezierFigure)','org.jhotdraw.draw.ChopBezierConnector.-init-(org.jhotdraw.draw.BezierFigure)','129','org.jhotdraw.draw.ChopBezierConnector','public ChopBezierConnector(BezierFigure owner) {\r\n    super(owner);\r\n}'),(1351,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ChopBezierConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','129','org.jhotdraw.draw.ChopBezierConnector','protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    BezierFigure bf = ((BezierFigure) (getConnectorTarget(target)));\r\n    return bf.chop(from);\r\n}'),(1352,'-init-()','org.jhotdraw.draw.ChopDiamondConnector.-init-()','130','org.jhotdraw.draw.ChopDiamondConnector','public ChopDiamondConnector() {\r\n    // only used for Storable implementation\r\n}'),(1353,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ChopDiamondConnector.-init-(org.jhotdraw.draw.Figure)','130','org.jhotdraw.draw.ChopDiamondConnector','public ChopDiamondConnector(Figure owner) {\r\n    super(owner);\r\n}'),(1354,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ChopDiamondConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','130','org.jhotdraw.draw.ChopDiamondConnector','/**\r\n * Return an appropriate connection point on the edge of a diamond figure\r\n */\r\nprotected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if (DiamondFigure.IS_QUADRATIC.get(target)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    double growx;\r\n    double growy;\r\n    // FIXME - This code is wrong. Copy correct code from DiamondFigure.\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n        case INSIDE :\r\n            {\r\n                growx = growy = 0.0F;\r\n                break;\r\n            }\r\n        case OUTSIDE :\r\n            {\r\n                double lineLength = Math.sqrt((((r.width) * (r.width)) + ((r.height) * (r.height))));\r\n                double scale = ((AttributeKeys.getStrokeTotalWidth(target)) * 2.0) / lineLength;\r\n                growx = scale * (r.height);\r\n                growy = scale * (r.width);\r\n                // growy = getStrokeTotalWidth() * SQRT2;\r\n                break;\r\n            }\r\n        case CENTER :\r\n        default :\r\n            double lineLength = Math.sqrt((((r.width) * (r.width)) + ((r.height) * (r.height))));\r\n            double scale = (AttributeKeys.getStrokeTotalWidth(target)) / lineLength;\r\n            growx = scale * (r.height);\r\n            growy = scale * (r.width);\r\n            // growx = growy = getStrokeTotalWidth() / 2d * SQRT2;\r\n            break;\r\n    }\r\n    Geom.grow(r, growx, growy);\r\n    // Center point\r\n    Point2D.Double c1 = new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double p2 = new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + (r.height)));\r\n    Point2D.Double p4 = new Point2D.Double(((r.x) + ((r.width) / 2)), r.y);\r\n    // If overlapping, just return the opposite corners\r\n    if (r.contains(from)) {\r\n        if (((from.y) > (r.y)) && ((from.y) < ((r.y) + ((r.height) / 2)))) {\r\n            return p2;\r\n        } else {\r\n            return p4;\r\n        }\r\n    }\r\n    // Calculate angle to determine quadrant\r\n    double ang = Geom.pointToAngle(r, from);\r\n    // Dermine line points\r\n    Point2D.Double p1 = new Point2D.Double(((r.x) + (r.width)), ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double p3 = new Point2D.Double(r.x, ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double rp = null;// This will be returned\r\n\r\n    // Get the intersection with edges\r\n    if ((ang > 0) && (ang < 1.57)) {\r\n        rp = Geom.intersect(p1.x, p1.y, p2.x, p2.y, c1.x, c1.y, from.x, from.y);\r\n    } else\r\n        if ((ang > 1.575) && (ang < 3.14)) {\r\n            rp = Geom.intersect(p2.x, p2.y, p3.x, p3.y, c1.x, c1.y, from.x, from.y);\r\n        } else\r\n            if ((ang > (-3.14)) && (ang < (-1.575))) {\r\n                rp = Geom.intersect(p3.x, p3.y, p4.x, p4.y, c1.x, c1.y, from.x, from.y);\r\n            } else\r\n                if ((ang > (-1.57)) && (ang < 0)) {\r\n                    rp = Geom.intersect(p4.x, p4.y, p1.x, p1.y, c1.x, c1.y, from.x, from.y);\r\n                }\r\n\r\n\r\n\r\n    // No proper edge found, we should send one of four corners\r\n    if (rp == null) {\r\n        rp = Geom.angleToPoint(r, ang);\r\n    }\r\n    return rp;\r\n}'),(1355,'-init-()','org.jhotdraw.draw.ChopEllipseConnector.-init-()','131','org.jhotdraw.draw.ChopEllipseConnector','/**\r\n * Only used for DOMStorable input.\r\n */\r\npublic ChopEllipseConnector() {\r\n}'),(1356,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ChopEllipseConnector.-init-(org.jhotdraw.draw.Figure)','131','org.jhotdraw.draw.ChopEllipseConnector','public ChopEllipseConnector(Figure owner) {\r\n    super(owner);\r\n}'),(1357,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ChopEllipseConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','131','org.jhotdraw.draw.ChopEllipseConnector','protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if ((getStrokeColor(target)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n            case CENTER :\r\n            default :\r\n                grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(target);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0F;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    double angle = Geom.pointToAngle(r, from);\r\n    return Geom.ovalAngleToPoint(r, angle);\r\n}'),(1358,'getStrokeColor(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ChopEllipseConnector.getStrokeColor(org.jhotdraw.draw.Figure)','131','org.jhotdraw.draw.ChopEllipseConnector','private Color getStrokeColor(Figure f) {\r\n    return AttributeKeys.STROKE_COLOR.get(f);\r\n}'),(1359,'getStrokeWidth(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ChopEllipseConnector.getStrokeWidth(org.jhotdraw.draw.Figure)','131','org.jhotdraw.draw.ChopEllipseConnector','private float getStrokeWidth(Figure f) {\r\n    Double w = AttributeKeys.STROKE_WIDTH.get(f);\r\n    return w == null ? 1.0F : w.floatValue();\r\n}'),(1360,'-init-()','org.jhotdraw.draw.ChopRectangleConnector.-init-()','132','org.jhotdraw.draw.ChopRectangleConnector','/**\r\n * Creates a new instance.\r\n * Only used for storable.\r\n */\r\npublic ChopRectangleConnector() {\r\n}'),(1361,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ChopRectangleConnector.-init-(org.jhotdraw.draw.Figure)','132','org.jhotdraw.draw.ChopRectangleConnector','public ChopRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}'),(1362,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ChopRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','132','org.jhotdraw.draw.ChopRectangleConnector','protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if ((AttributeKeys.STROKE_COLOR.get(target)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n            case CENTER :\r\n            default :\r\n                grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(target);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    return Geom.angleToPoint(r, Geom.pointToAngle(r, from));\r\n}'),(1363,'findEnd(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ChopRectangleConnector.findEnd(org.jhotdraw.draw.ConnectionFigure)','132','org.jhotdraw.draw.ChopRectangleConnector','@Override\r\npublic Point2D.Double findEnd(ConnectionFigure connection) {\r\n    Figure endFigure = connection.getEndConnector().getOwner();\r\n    Point2D.Double from;\r\n    if (((((connection.getNodeCount()) <= 3) && ((connection.getStartFigure()) == (connection.getEndFigure()))) || ((connection.getNodeCount()) <= 2)) || ((connection.getLiner()) != null)) {\r\n        if ((connection.getStartConnector()) == null) {\r\n            from = connection.getStartPoint();\r\n        } else\r\n            if ((connection.getStartFigure()) == (connection.getEndFigure())) {\r\n                Rectangle2D.Double r1 = getConnectorTarget(connection.getStartConnector().getOwner()).getBounds();\r\n                from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), r1.y);\r\n            } else {\r\n                Rectangle2D.Double r1 = getConnectorTarget(connection.getStartConnector().getOwner()).getBounds();\r\n                from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), ((r1.y) + ((r1.height) / 2)));\r\n            }\r\n\r\n    } else {\r\n        from = connection.getPoint(((connection.getNodeCount()) - 2));\r\n    }\r\n    return chop(endFigure, from);\r\n}'),(1364,'findStart(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ChopRectangleConnector.findStart(org.jhotdraw.draw.ConnectionFigure)','132','org.jhotdraw.draw.ChopRectangleConnector','@Override\r\npublic Point2D.Double findStart(ConnectionFigure connection) {\r\n    Figure startFigure = connection.getStartConnector().getOwner();\r\n    Point2D.Double from;\r\n    if (((connection.getNodeCount()) <= 2) || ((connection.getLiner()) != null)) {\r\n        if ((connection.getEndConnector()) == null) {\r\n            from = connection.getEndPoint();\r\n        } else {\r\n            Rectangle2D.Double r1 = getConnectorTarget(connection.getEndConnector().getOwner()).getBounds();\r\n            from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), ((r1.y) + ((r1.height) / 2)));\r\n        }\r\n    } else {\r\n        from = connection.getPoint(1);\r\n    }\r\n    return chop(startFigure, from);\r\n}'),(1365,'-init-()','org.jhotdraw.draw.ChopRoundRectangleConnector.-init-()','133','org.jhotdraw.draw.ChopRoundRectangleConnector','/**\r\n * Only used for DOMStorable input.\r\n */\r\npublic ChopRoundRectangleConnector() {\r\n}'),(1366,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ChopRoundRectangleConnector.-init-(org.jhotdraw.draw.Figure)','133','org.jhotdraw.draw.ChopRoundRectangleConnector','public ChopRoundRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}'),(1367,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ChopRoundRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','133','org.jhotdraw.draw.ChopRoundRectangleConnector','protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    RoundRectangleFigure rrf = ((RoundRectangleFigure) (target));\r\n    Rectangle2D.Double outer = rrf.getBounds();\r\n    double grow;\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n        case CENTER :\r\n        default :\r\n            grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n            break;\r\n        case OUTSIDE :\r\n            grow = AttributeKeys.getStrokeTotalWidth(target);\r\n            break;\r\n        case INSIDE :\r\n            grow = 0;\r\n            break;\r\n    }\r\n    Geom.grow(outer, grow, grow);\r\n    Rectangle2D.Double inner = ((Rectangle2D.Double) (outer.clone()));\r\n    double gw = (-((rrf.getArcWidth()) + (grow * 2))) / 2;\r\n    double gh = (-((rrf.getArcHeight()) + (grow * 2))) / 2;\r\n    inner.x -= gw;\r\n    inner.y -= gh;\r\n    inner.width += gw * 2;\r\n    inner.height += gh * 2;\r\n    double angle = Geom.pointToAngle(outer, from);\r\n    Point2D.Double p = Geom.angleToPoint(outer, Geom.pointToAngle(outer, from));\r\n    if (((p.x) == (outer.x)) || ((p.x) == ((outer.x) + (outer.width)))) {\r\n        p.y = Math.min(Math.max(p.y, inner.y), ((inner.y) + (inner.height)));\r\n    } else {\r\n        p.x = Math.min(Math.max(p.x, inner.x), ((inner.x) + (inner.width)));\r\n    }\r\n    return p;\r\n}'),(1368,'-init-()','org.jhotdraw.draw.ChopTriangleConnector.-init-()','134','org.jhotdraw.draw.ChopTriangleConnector','/**\r\n * Only used for DOMStorable input.\r\n */\r\npublic ChopTriangleConnector() {\r\n}'),(1369,'-init-(org.jhotdraw.draw.TriangleFigure)','org.jhotdraw.draw.ChopTriangleConnector.-init-(org.jhotdraw.draw.TriangleFigure)','134','org.jhotdraw.draw.ChopTriangleConnector','/**\r\n * Creates a new instance.\r\n */\r\npublic ChopTriangleConnector(TriangleFigure owner) {\r\n    super(owner);\r\n}'),(1370,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ChopTriangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','134','org.jhotdraw.draw.ChopTriangleConnector','protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    TriangleFigure bf = ((TriangleFigure) (getConnectorTarget(target)));\r\n    return bf.chop(from);\r\n}'),(1371,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CloseHandle.-init-(org.jhotdraw.draw.Figure)','135','org.jhotdraw.draw.CloseHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic CloseHandle(Figure owner) {\r\n    super(owner, new RelativeLocator(1.0, 0.0));\r\n}'),(1372,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.CloseHandle.draw(java.awt.Graphics2D)','135','org.jhotdraw.draw.CloseHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawRectangle(g, (pressed ? Color.orange : Color.white), Color.black);\r\n    Rectangle r = getBounds();\r\n    g.drawLine(r.x, r.y, ((r.x) + (r.width)), ((r.y) + (r.height)));\r\n    g.drawLine(((r.x) + (r.width)), r.y, r.x, ((r.y) + (r.height)));\r\n}'),(1373,'getCursor()','org.jhotdraw.draw.CloseHandle.getCursor()','135','org.jhotdraw.draw.CloseHandle','/**\r\n * Returns a cursor for the handle.\r\n */\r\npublic Cursor getCursor() {\r\n    return Cursor.getDefaultCursor();\r\n}'),(1374,'getHandlesize()','org.jhotdraw.draw.CloseHandle.getHandlesize()','135','org.jhotdraw.draw.CloseHandle','protected int getHandlesize() {\r\n    return 9;\r\n}'),(1375,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.CloseHandle.trackEnd(java.awt.Point,java.awt.Point,int)','135','org.jhotdraw.draw.CloseHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    pressed = basicGetBounds().contains(lead);\r\n    if (pressed)\r\n        getOwner().requestRemove();\r\n\r\n    fireAreaInvalidated(getDrawingArea());\r\n}'),(1376,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.CloseHandle.trackStart(java.awt.Point,int)','135','org.jhotdraw.draw.CloseHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    pressed = true;\r\n    fireAreaInvalidated(getDrawingArea());\r\n}'),(1377,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.CloseHandle.trackStep(java.awt.Point,java.awt.Point,int)','135','org.jhotdraw.draw.CloseHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    boolean oldValue = pressed;\r\n    pressed = basicGetBounds().contains(lead);\r\n    if (oldValue != (pressed))\r\n        fireAreaInvalidated(getDrawingArea());\r\n\r\n}'),(1378,'add(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.add(int,org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Adds a child to the figure at the specified index.\r\n * <p>\r\n * This method calls {@code figureAdded} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic void add(int index, Figure child);'),(1379,'add(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.add(org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Adds a child to the figure.\r\n * <p>\r\n * This is a convenience method for {@code add(getChildCount(), child);}\r\n * <p>\r\n * This method calls {@code figureAdded} on all registered\r\n * {@code CompositeFigureListener}s.\r\n *\r\n * @return {@code true} if this CompositeFigure changed as a result of the\r\ncall\r\n */\r\npublic boolean add(Figure child);'),(1380,'addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','org.jhotdraw.draw.CompositeFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Adds a listener for this composite figure.\r\n */\r\npublic void addCompositeFigureListener(CompositeFigureListener listener);'),(1381,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Adds a child to the figure at the specified index without\r\n * firing events.\r\n * <p>\r\n * This method can be used to reinsert a child figure which has been\r\n * temporarily removed from this CompositeFigure (for example to reorder\r\n * the sequence of the children) and to efficiently build a drawing from\r\n * an {@link InputFormat}.\r\n */\r\npublic void basicAdd(int index, Figure child);'),(1382,'basicAdd(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.basicAdd(org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Adds a child to the figure without firing events.\r\n * <p>\r\n * This method can be used to reinsert a child figure which has been\r\n * temporarily removed from this CompositeFigure (for example to reorder\r\n * the sequence of the children) and to efficiently build a drawing from\r\n * an {@link InputFormat}.\r\n *\r\n * This is a convenience method for calling\r\n * {@code basicAdd(getChildCount(), child);}.\r\n */\r\npublic void basicAdd(Figure child);'),(1383,'basicRemove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.basicRemove(org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes the specified child without firing events.\r\n * <p>\r\n * This method can be used to temporarily remove a child from this\r\n * CompositeFigure (for example to reorder the sequence of the children).\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code basicRemove(indexOf(child));}.\r\n * <p>\r\n * Returns the index of the removed figure. Returns -1 if the\r\n * figure was not a child of this CompositeFigure.\r\n */\r\npublic int basicRemove(Figure child);'),(1384,'basicRemoveAllChildren()','org.jhotdraw.draw.CompositeFigure.basicRemoveAllChildren()','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes all children from the composite figure without firing events.\r\n * <p>\r\n * This method can be used to temporarily remove a child from this\r\n * CompositeFigure (for example to reorder the sequence of the children).\r\n * <p>\r\n * This is a convenience method for\r\n * {@code while(getChildCount() > 0) basicRemoveChild(0);}\r\n */\r\npublic void basicRemoveAllChildren();'),(1385,'basicRemoveChild(int)','org.jhotdraw.draw.CompositeFigure.basicRemoveChild(int)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes the child at the specified index without firing events.\r\n * <p>\r\n * This method can be used to temporarily remove a child from this\r\n * CompositeFigure (for example to reorder the sequence of the children).\r\n * <p>\r\n * Returns the removed child figure.\r\n */\r\npublic Figure basicRemoveChild(int index);'),(1386,'contains(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.contains(org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Returns true if this composite figure contains the specified figure.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().contains(f);}.\r\n */\r\npublic boolean contains(Figure f);'),(1387,'getChild(int)','org.jhotdraw.draw.CompositeFigure.getChild(int)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Returns the child figure at the specified index.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().get(index);}.\r\n */\r\npublic Figure getChild(int index);'),(1388,'getChildCount()','org.jhotdraw.draw.CompositeFigure.getChildCount()','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Returns the number of children.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().size();}.\r\n */\r\npublic int getChildCount();'),(1389,'getChildren()','org.jhotdraw.draw.CompositeFigure.getChildren()','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Returns an unchangeable list view on the children.\r\n */\r\npublic List<Figure> getChildren();'),(1390,'getLayouter()','org.jhotdraw.draw.CompositeFigure.getLayouter()','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Get a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @return layout strategy used by this figure\r\n */\r\npublic Layouter getLayouter();'),(1391,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.indexOf(org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Returns the index of the specified child.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().indexOf(index);}.\r\n *\r\n * @return The index of the child, or -1 if the specified figure is not\r\na child of this CompositeFigure.\r\n */\r\npublic int indexOf(Figure child);'),(1392,'layout()','org.jhotdraw.draw.CompositeFigure.layout()','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * A layout algorithm is used to define how the child components\r\n * should be laid out in relation to each other. The task for\r\n * layouting the child components for presentation is delegated\r\n * to a Layouter which can be plugged in at runtime.\r\n */\r\npublic void layout();'),(1393,'remove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeFigure.remove(org.jhotdraw.draw.Figure)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes the specified child.\r\n * Returns true, if the Figure contained the removed child.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code removeChild(getChildren().indexOf(child));}\r\n * <p>\r\n * This method calls {@code figureRemoved} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic boolean remove(Figure child);'),(1394,'removeAllChildren()','org.jhotdraw.draw.CompositeFigure.removeAllChildren()','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes all children from the composite figure.\r\n * <p>\r\n * This is a convenience method for\r\n * {@code while(getChildCount() > 0) removeChild(0);}\r\n */\r\npublic void removeAllChildren();'),(1395,'removeChild(int)','org.jhotdraw.draw.CompositeFigure.removeChild(int)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes the child at the specified index.\r\n * Returns the removed child figure.\r\n * <p>\r\n * Calls {@code figureRemoved} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic Figure removeChild(int index);'),(1396,'removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','org.jhotdraw.draw.CompositeFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Removes a listener from this composite figure.\r\n */\r\npublic void removeCompositeFigureListener(CompositeFigureListener listener);'),(1397,'setLayouter(org.jhotdraw.draw.Layouter)','org.jhotdraw.draw.CompositeFigure.setLayouter(org.jhotdraw.draw.Layouter)','136','org.jhotdraw.draw.CompositeFigure','/**\r\n * Set a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation. It is a good idea to set\r\n * the Layouter in the protected initialize() method\r\n * so it can be recreated if a GraphicalCompositeFigure is\r\n * read and restored from a StorableInput stream.\r\n *\r\n * @param newValue	encapsulation\r\n * 		of a layout algorithm.\r\n */\r\npublic void setLayouter(Layouter newValue);'),(1398,'-init-(org.jhotdraw.draw.CompositeFigure,org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double,int)','org.jhotdraw.draw.CompositeFigureEvent.-init-(org.jhotdraw.draw.CompositeFigure,org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double,int)','137','org.jhotdraw.draw.CompositeFigureEvent','/**\r\n * Constructs an event for the provided CompositeFigure.\r\n *\r\n * @param source\r\n * 		The composite figure.\r\n * @param child\r\n * 		The changed figure.\r\n * @param invalidatedArea\r\n * 		The bounds of the invalidated area on the drawing.\r\n */\r\npublic CompositeFigureEvent(CompositeFigure source, Figure child, Rectangle2D.Double invalidatedArea, int zIndex) {\r\n    super(source);\r\n    this.child = child;\r\n    this.invalidatedArea = invalidatedArea;\r\n    this.index = 0;\r\n}'),(1399,'getChildFigure()','org.jhotdraw.draw.CompositeFigureEvent.getChildFigure()','137','org.jhotdraw.draw.CompositeFigureEvent','/**\r\n * Gets the changed child figure.\r\n */\r\npublic Figure getChildFigure() {\r\n    return child;\r\n}'),(1400,'getCompositeFigure()','org.jhotdraw.draw.CompositeFigureEvent.getCompositeFigure()','137','org.jhotdraw.draw.CompositeFigureEvent','/**\r\n * Gets the changed drawing.\r\n */\r\npublic CompositeFigure getCompositeFigure() {\r\n    return ((CompositeFigure) (getSource()));\r\n}'),(1401,'getIndex()','org.jhotdraw.draw.CompositeFigureEvent.getIndex()','137','org.jhotdraw.draw.CompositeFigureEvent','/**\r\n * Returns the z-index of the child figure.\r\n */\r\npublic int getIndex() {\r\n    return index;\r\n}'),(1402,'getInvalidatedArea()','org.jhotdraw.draw.CompositeFigureEvent.getInvalidatedArea()','137','org.jhotdraw.draw.CompositeFigureEvent','/**\r\n * Gets the bounds of the invalidated area on the drawing.\r\n */\r\npublic Rectangle2D.Double getInvalidatedArea() {\r\n    return invalidatedArea;\r\n}'),(1403,'figureAdded(org.jhotdraw.draw.CompositeFigureEvent)','org.jhotdraw.draw.CompositeFigureListener.figureAdded(org.jhotdraw.draw.CompositeFigureEvent)','138','org.jhotdraw.draw.CompositeFigureListener','/**\r\n * Sent when a figure was added.\r\n */\r\npublic void figureAdded(CompositeFigureEvent e);'),(1404,'figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)','org.jhotdraw.draw.CompositeFigureListener.figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)','138','org.jhotdraw.draw.CompositeFigureListener','/**\r\n * Sent when a figure was removed.\r\n */\r\npublic void figureRemoved(CompositeFigureEvent e);'),(1405,'-init-()','org.jhotdraw.draw.CompositeLineDecoration.-init-()','139','org.jhotdraw.draw.CompositeLineDecoration','/**\r\n * Constructs a composite line decoration with no decorations.\r\n */\r\npublic CompositeLineDecoration() {\r\n}'),(1406,'-init-(org.jhotdraw.draw.LineDecoration,org.jhotdraw.draw.LineDecoration)','org.jhotdraw.draw.CompositeLineDecoration.-init-(org.jhotdraw.draw.LineDecoration,org.jhotdraw.draw.LineDecoration)','139','org.jhotdraw.draw.CompositeLineDecoration','/**\r\n * Constructs a composite line decoration with the two supplied decorations.\r\n */\r\npublic CompositeLineDecoration(LineDecoration decoration1, LineDecoration decoration2) {\r\n    addDecoration(decoration1);\r\n    addDecoration(decoration2);\r\n}'),(1407,'addDecoration(org.jhotdraw.draw.LineDecoration)','org.jhotdraw.draw.CompositeLineDecoration.addDecoration(org.jhotdraw.draw.LineDecoration)','139','org.jhotdraw.draw.CompositeLineDecoration','/**\r\n * Add another line decoration into the composite line decoration.\r\n * The new decoration will be appended to the existing decorations\r\n * and is also the last drawn.\r\n */\r\npublic void addDecoration(LineDecoration decoration) {\r\n    if (decoration != null) {\r\n        decorations.add(decoration);\r\n    }\r\n}'),(1408,'draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.CompositeLineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','139','org.jhotdraw.draw.CompositeLineDecoration','/**\r\n * Draws the arrow tip in the direction specified by the given two\r\n * Points.. (template method)\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    for (LineDecoration decoration : decorations) {\r\n        decoration.draw(g, f, p1, p2);\r\n    }\r\n}'),(1409,'getDecorationRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CompositeLineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)','139','org.jhotdraw.draw.CompositeLineDecoration','/**\r\n * Returns the radius of the decorator.\r\n * This is used to crop the end of the line, to prevent it from being\r\n * drawn it over the decorator.\r\n */\r\npublic double getDecorationRadius(Figure f) {\r\n    double radius = 0;\r\n    for (LineDecoration decoration : decorations) {\r\n        radius = Math.max(radius, decoration.getDecorationRadius(f));\r\n    }\r\n    return radius;\r\n}'),(1410,'getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.CompositeLineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','139','org.jhotdraw.draw.CompositeLineDecoration','/**\r\n * Returns the drawing area of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    Rectangle2D.Double r = null;\r\n    for (LineDecoration decoration : decorations) {\r\n        Rectangle2D.Double aR = decoration.getDrawingArea(f, p1, p2);\r\n        if (r == null)\r\n            r = aR;\r\n        else\r\n            r.add(aR);\r\n\r\n    }\r\n    return r;\r\n}'),(1411,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.CompositeLineDecoration.read(org.jhotdraw.xml.DOMInput)','139','org.jhotdraw.draw.CompositeLineDecoration','public void read(DOMInput in) throws IOException {\r\n    for (int i = (in.getElementCount(\"decoration\")) - 1; i >= 0; i--) {\r\n        in.openElement(\"decoration\", i);\r\n        Object value = in.readObject();\r\n        if (value instanceof LineDecoration)\r\n            addDecoration(((LineDecoration) (value)));\r\n\r\n        in.closeElement();\r\n    }\r\n}'),(1412,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.CompositeLineDecoration.write(org.jhotdraw.xml.DOMOutput)','139','org.jhotdraw.draw.CompositeLineDecoration','public void write(DOMOutput out) throws IOException {\r\n    for (LineDecoration decoration : decorations) {\r\n        out.openElement(\"decoration\");\r\n        out.writeObject(decoration);\r\n        out.closeElement();\r\n    }\r\n}'),(1413,'-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.AffineTransform)','org.jhotdraw.draw.CompositeTransformEdit.-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.AffineTransform)','140','org.jhotdraw.draw.CompositeTransformEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic CompositeTransformEdit(AbstractFigure owner, AffineTransform tx) {\r\n    this.owner = owner;\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n    inProgress = true;\r\n}'),(1414,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.CompositeTransformEdit.addEdit(javax.swing.undo.UndoableEdit)','140','org.jhotdraw.draw.CompositeTransformEdit','public boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit == (this)) {\r\n        end();\r\n        return true;\r\n    } else {\r\n        if (!(inProgress)) {\r\n            return false;\r\n        } else {\r\n            anEdit.die();\r\n            return true;\r\n        }\r\n    }\r\n}'),(1415,'canRedo()','org.jhotdraw.draw.CompositeTransformEdit.canRedo()','140','org.jhotdraw.draw.CompositeTransformEdit','/**\r\n * Returns false if <code>isInProgress</code> or if super\r\n * returns false.\r\n *\r\n * @see #isInProgress\r\n */\r\npublic boolean canRedo() {\r\n    return (!(isInProgress())) && (super.canRedo());\r\n}'),(1416,'canUndo()','org.jhotdraw.draw.CompositeTransformEdit.canUndo()','140','org.jhotdraw.draw.CompositeTransformEdit','/**\r\n * Returns false if <code>isInProgress</code> or if super\r\n * returns false.\r\n *\r\n * @see #isInProgress\r\n */\r\npublic boolean canUndo() {\r\n    return (!(isInProgress())) && (super.canUndo());\r\n}'),(1417,'end()','org.jhotdraw.draw.CompositeTransformEdit.end()','140','org.jhotdraw.draw.CompositeTransformEdit','/**\r\n * Sets <code>inProgress</code> to false.\r\n *\r\n * @see #canUndo\r\n * @see #canRedo\r\n */\r\npublic void end() {\r\n    inProgress = false;\r\n}'),(1418,'getPresentationName()','org.jhotdraw.draw.CompositeTransformEdit.getPresentationName()','140','org.jhotdraw.draw.CompositeTransformEdit','public String getPresentationName() {\r\n    return \"Figur transformieren\";\r\n}'),(1419,'isInProgress()','org.jhotdraw.draw.CompositeTransformEdit.isInProgress()','140','org.jhotdraw.draw.CompositeTransformEdit','/**\r\n * Returns true if this edit is in progress--that is, it has not\r\n * received end. This generally means that edits are still being\r\n * added to it.\r\n *\r\n * @see #end\r\n */\r\npublic boolean isInProgress() {\r\n    return inProgress;\r\n}'),(1420,'redo()','org.jhotdraw.draw.CompositeTransformEdit.redo()','140','org.jhotdraw.draw.CompositeTransformEdit','public void redo() throws CannotRedoException {\r\n    super.redo();\r\n    owner.willChange();\r\n    owner.transform(tx);\r\n    owner.changed();\r\n}'),(1421,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.CompositeTransformEdit.replaceEdit(javax.swing.undo.UndoableEdit)','140','org.jhotdraw.draw.CompositeTransformEdit','public boolean replaceEdit(UndoableEdit anEdit) {\r\n    /* if (anEdit instanceof CompositeTransformEdit) {\n    CompositeTransformEdit that = (CompositeTransformEdit) anEdit;\n    if (that.owner == this.owner) {\n    this.tx.concatenate(that.tx);\n    that.die();\n    return true;\n    }\n    }\n     */\r\n    return false;\r\n}'),(1422,'undo()','org.jhotdraw.draw.CompositeTransformEdit.undo()','140','org.jhotdraw.draw.CompositeTransformEdit','public void undo() throws CannotUndoException {\r\n    super.undo();\r\n    owner.willChange();\r\n    try {\r\n        owner.transform(tx.createInverse());\r\n    } catch (NoninvertibleTransformException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n    owner.changed();\r\n}'),(1423,'-init-(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ConnectionEndHandle.-init-(org.jhotdraw.draw.ConnectionFigure)','141','org.jhotdraw.draw.ConnectionEndHandle','/**\r\n * Constructs the connection handle for the given start figure.\r\n */\r\npublic ConnectionEndHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}'),(1424,'canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionEndHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','141','org.jhotdraw.draw.ConnectionEndHandle','protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(existingEnd, targetEnd);\r\n}'),(1425,'connect(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionEndHandle.connect(org.jhotdraw.draw.Connector)','141','org.jhotdraw.draw.ConnectionEndHandle','/**\r\n * Sets the start of the connection.\r\n */\r\nprotected void connect(Connector c) {\r\n    getOwner().setEndConnector(c);\r\n}'),(1426,'disconnect()','org.jhotdraw.draw.ConnectionEndHandle.disconnect()','141','org.jhotdraw.draw.ConnectionEndHandle','/**\r\n * Disconnects the start figure.\r\n */\r\nprotected void disconnect() {\r\n    getOwner().setEndConnector(null);\r\n}'),(1427,'getBezierNodeIndex()','org.jhotdraw.draw.ConnectionEndHandle.getBezierNodeIndex()','141','org.jhotdraw.draw.ConnectionEndHandle','protected int getBezierNodeIndex() {\r\n    return (getBezierFigure().getNodeCount()) - 1;\r\n}'),(1428,'getLocation()','org.jhotdraw.draw.ConnectionEndHandle.getLocation()','141','org.jhotdraw.draw.ConnectionEndHandle','/**\r\n * Returns the start point of the connection.\r\n */\r\nprotected Point2D.Double getLocation() {\r\n    return getOwner().getEndPoint();\r\n}'),(1429,'getTarget()','org.jhotdraw.draw.ConnectionEndHandle.getTarget()','141','org.jhotdraw.draw.ConnectionEndHandle','protected Connector getTarget() {\r\n    return getOwner().getEndConnector();\r\n}'),(1430,'setLocation(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ConnectionEndHandle.setLocation(java.awt.geom.Point2D$Double)','141','org.jhotdraw.draw.ConnectionEndHandle','/**\r\n * Sets the start point of the connection.\r\n */\r\nprotected void setLocation(Point2D.Double p) {\r\n    getOwner().willChange();\r\n    getOwner().setEndPoint(p);\r\n    getOwner().changed();\r\n}'),(1431,'canConnect(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Checks if this {@code ConnectionFigure} can be connect to the specified\r\n * {@code Connector}.\r\n * This is used to provide an early feedback to the user, when he/she\r\n * creates a new connection.\r\n */\r\npublic boolean canConnect(Connector start);'),(1432,'canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Returns true, if this ConnectionFigure can connect the specified\r\n * {@code Connector}s.\r\n * Implement this method to constrain the allowed connections between figures.\r\n */\r\npublic boolean canConnect(Connector start, Connector end);'),(1433,'getEndConnector()','org.jhotdraw.draw.ConnectionFigure.getEndConnector()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the end Connector.\r\n * Returns null, if there is no end connection.\r\n */\r\npublic Connector getEndConnector();'),(1434,'getEndFigure()','org.jhotdraw.draw.ConnectionFigure.getEndFigure()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the end figure of the connection.\r\n * This is a convenience method for doing getEndConnector().getOwner()\r\n * and handling null cases.\r\n */\r\npublic Figure getEndFigure();'),(1435,'getEndPoint()','org.jhotdraw.draw.ConnectionFigure.getEndPoint()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the end point.\r\n */\r\npublic Point2D.Double getEndPoint();'),(1436,'getLiner()','org.jhotdraw.draw.ConnectionFigure.getLiner()','142','org.jhotdraw.draw.ConnectionFigure','// COMPOSITE FIGURES\r\n/**\r\n * Get a Liner object which encapsulated a lineout\r\n * algorithm for this figure. Typically, a Liner\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @return lineout strategy used by this figure\r\n */\r\npublic Liner getLiner();'),(1437,'getNode(int)','org.jhotdraw.draw.ConnectionFigure.getNode(int)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Returns the specified node.\r\n */\r\npublic BezierPath.Node getNode(int index);'),(1438,'getNodeCount()','org.jhotdraw.draw.ConnectionFigure.getNodeCount()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the node count.\r\n */\r\npublic int getNodeCount();'),(1439,'getPoint(int)','org.jhotdraw.draw.ConnectionFigure.getPoint(int)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Returns the specified point.\r\n */\r\npublic Point2D.Double getPoint(int index);'),(1440,'getStartConnector()','org.jhotdraw.draw.ConnectionFigure.getStartConnector()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the start {@code Connector}.\r\n * Returns null, if there is no start connection.\r\n */\r\npublic Connector getStartConnector();'),(1441,'getStartFigure()','org.jhotdraw.draw.ConnectionFigure.getStartFigure()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the start figure of the connection.\r\n * This is a convenience method for doing getStartConnector().getOwner()\r\n * and handling null cases.\r\n */\r\npublic Figure getStartFigure();'),(1442,'getStartPoint()','org.jhotdraw.draw.ConnectionFigure.getStartPoint()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Gets the start point.\r\n */\r\npublic Point2D.Double getStartPoint();'),(1443,'lineout()','org.jhotdraw.draw.ConnectionFigure.lineout()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * A lineout algorithm is used to define how the child components\r\n * should be laid out in relation to each other. The task for\r\n * lineouting the child components for presentation is delegated\r\n * to a Liner which can be plugged in at runtime.\r\n */\r\npublic void lineout();'),(1444,'setEndConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionFigure.setEndConnector(org.jhotdraw.draw.Connector)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Sets the end Connector of the connection.\r\n * Set this to null to disconnect the end connection.\r\n *\r\n * @param end\r\n * 		the end Connector of the connection\r\n */\r\npublic void setEndConnector(Connector end);'),(1445,'setEndPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ConnectionFigure.setEndPoint(java.awt.geom.Point2D$Double)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Sets the end point.\r\n */\r\npublic void setEndPoint(Point2D.Double p);'),(1446,'setLiner(org.jhotdraw.draw.Liner)','org.jhotdraw.draw.ConnectionFigure.setLiner(org.jhotdraw.draw.Liner)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Set a Liner object which encapsulated a lineout\r\n * algorithm for this figure. Typically, a Liner\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @param newValue	encapsulation\r\n * 		of a lineout algorithm.\r\n */\r\npublic void setLiner(Liner newValue);'),(1447,'setNode(int,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.ConnectionFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Sets the specified node.\r\n */\r\npublic void setNode(int index, BezierPath.Node node);'),(1448,'setPoint(int,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ConnectionFigure.setPoint(int,java.awt.geom.Point2D$Double)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Sets the specified point.\r\n */\r\npublic void setPoint(int index, Point2D.Double p);'),(1449,'setStartConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionFigure.setStartConnector(org.jhotdraw.draw.Connector)','142','org.jhotdraw.draw.ConnectionFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Sets the start {@code Connector} of the connection.\r\n * Set this to null to disconnect the start connection.\r\n *\r\n * @param start\r\n * 		the start Connector of the connection\r\n */\r\npublic void setStartConnector(Connector start);'),(1450,'setStartPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ConnectionFigure.setStartPoint(java.awt.geom.Point2D$Double)','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Sets the start point.\r\n */\r\npublic void setStartPoint(Point2D.Double p);'),(1451,'updateConnection()','org.jhotdraw.draw.ConnectionFigure.updateConnection()','142','org.jhotdraw.draw.ConnectionFigure','/**\r\n * Updates the start and end point of the figure and fires figureChanged\r\n * events.\r\n */\r\npublic void updateConnection();'),(1452,'-init-(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ConnectionStartHandle.-init-(org.jhotdraw.draw.ConnectionFigure)','143','org.jhotdraw.draw.ConnectionStartHandle','/**\r\n * Constructs the connection handle for the given start figure.\r\n */\r\npublic ConnectionStartHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}'),(1453,'canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionStartHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','143','org.jhotdraw.draw.ConnectionStartHandle','protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(targetEnd, existingEnd);\r\n}'),(1454,'connect(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionStartHandle.connect(org.jhotdraw.draw.Connector)','143','org.jhotdraw.draw.ConnectionStartHandle','/**\r\n * Sets the start of the connection.\r\n */\r\nprotected void connect(Connector c) {\r\n    getOwner().setStartConnector(c);\r\n}'),(1455,'disconnect()','org.jhotdraw.draw.ConnectionStartHandle.disconnect()','143','org.jhotdraw.draw.ConnectionStartHandle','/**\r\n * Disconnects the start figure.\r\n */\r\nprotected void disconnect() {\r\n    getOwner().setStartConnector(null);\r\n}'),(1456,'getBezierNodeIndex()','org.jhotdraw.draw.ConnectionStartHandle.getBezierNodeIndex()','143','org.jhotdraw.draw.ConnectionStartHandle','protected int getBezierNodeIndex() {\r\n    return 0;\r\n}'),(1457,'getLocation()','org.jhotdraw.draw.ConnectionStartHandle.getLocation()','143','org.jhotdraw.draw.ConnectionStartHandle','/**\r\n * Returns the start point of the connection.\r\n */\r\nprotected Point2D.Double getLocation() {\r\n    return getOwner().getStartPoint();\r\n}'),(1458,'getTarget()','org.jhotdraw.draw.ConnectionStartHandle.getTarget()','143','org.jhotdraw.draw.ConnectionStartHandle','protected Connector getTarget() {\r\n    return getOwner().getStartConnector();\r\n}'),(1459,'setLocation(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ConnectionStartHandle.setLocation(java.awt.geom.Point2D$Double)','143','org.jhotdraw.draw.ConnectionStartHandle','/**\r\n * Sets the start point of the connection.\r\n */\r\nprotected void setLocation(Point2D.Double p) {\r\n    getOwner().willChange();\r\n    getOwner().setStartPoint(p);\r\n    getOwner().changed();\r\n}'),(1460,'-init-(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectionTool(ConnectionFigure prototype) {\r\n    this(prototype, null, null);\r\n}'),(1461,'-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)','org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)','144','org.jhotdraw.draw.ConnectionTool','public ConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}'),(1462,'-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map,java.lang.String)','org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map,java.lang.String)','144','org.jhotdraw.draw.ConnectionTool','public ConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes, String presentationName) {\r\n    this.prototype = prototype;\r\n    this.prototypeAttributes = attributes;\r\n    if (presentationName == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        presentationName = labels.getString(\"edit.createConnectionFigure.text\");\r\n    }\r\n    this.presentationName = presentationName;\r\n}'),(1463,'-init-(java.lang.String)','org.jhotdraw.draw.ConnectionTool.-init-(java.lang.String)','144','org.jhotdraw.draw.ConnectionTool','public ConnectionTool(String prototypeClassName) {\r\n    this(prototypeClassName, null, null);\r\n}'),(1464,'-init-(java.lang.String,java.util.Map,java.lang.String)','org.jhotdraw.draw.ConnectionTool.-init-(java.lang.String,java.util.Map,java.lang.String)','144','org.jhotdraw.draw.ConnectionTool','public ConnectionTool(String prototypeClassName, Map<AttributeKey, Object> attributes, String presentationName) {\r\n    try {\r\n        this.prototype = ((ConnectionFigure) (Class.forName(prototypeClassName).newInstance()));\r\n    } catch (Exception e) {\r\n        InternalError error = new InternalError((\"Unable to create ConnectionFigure from \" + prototypeClassName));\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    this.prototypeAttributes = attributes;\r\n    if (presentationName == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        presentationName = labels.getString(\"edit.createConnectionFigure.text\");\r\n    }\r\n    this.presentationName = presentationName;\r\n}'),(1465,'-init-()','org.jhotdraw.draw.ConnectionTool.-init-()','144','org.jhotdraw.draw.ConnectionTool','1() {\r\n}'),(1466,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.ConnectionTool.activate(org.jhotdraw.draw.DrawingEditor)','144','org.jhotdraw.draw.ConnectionTool','public void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n}'),(1467,'canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to start a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector) {\r\n    return f.canConnect(startConnector);\r\n}'),(1468,'canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @param endConnector\r\n * 		The Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}'),(1469,'createFigure()','org.jhotdraw.draw.ConnectionTool.createFigure()','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Creates the ConnectionFigure. By default the figure prototype is\r\n * cloned.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected ConnectionFigure createFigure() {\r\n    ConnectionFigure f = ((ConnectionFigure) (prototype.clone()));\r\n    getEditor().applyDefaultAttributesTo(f);\r\n    if ((prototypeAttributes) != null) {\r\n        for (Map.Entry<AttributeKey, Object> entry : prototypeAttributes.entrySet()) {\r\n            entry.getKey().basicSet(f, entry.getValue());\r\n        }\r\n    }\r\n    return f;\r\n}'),(1470,'creationFinished(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ConnectionTool.creationFinished(org.jhotdraw.draw.Figure)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\nprotected void creationFinished(Figure createdFigure) {\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(1471,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.ConnectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)','144','org.jhotdraw.draw.ConnectionTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    if ((createdFigure) != null) {\r\n        getDrawing().remove(createdFigure);\r\n        createdFigure = null;\r\n    }\r\n    targetFigure = null;\r\n    startConnector = endConnector = null;\r\n    super.deactivate(editor);\r\n}'),(1472,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.ConnectionTool.draw(java.awt.Graphics2D)','144','org.jhotdraw.draw.ConnectionTool','@Override\r\npublic void draw(Graphics2D g) {\r\n    Graphics2D gg = ((Graphics2D) (g.create()));\r\n    gg.transform(getView().getDrawingToViewTransform());\r\n    if ((targetFigure) != null) {\r\n        for (Connector c : targetFigure.getConnectors(getPrototype())) {\r\n            c.draw(gg);\r\n        }\r\n    }\r\n    if ((createdFigure) != null) {\r\n        createdFigure.draw(gg);\r\n        Point p = getView().drawingToView(createdFigure.getStartPoint());\r\n        Ellipse2D.Double e = new Ellipse2D.Double(((p.x) - ((ConnectionTool.ANCHOR_WIDTH) / 2)), ((p.y) - ((ConnectionTool.ANCHOR_WIDTH) / 2)), ConnectionTool.ANCHOR_WIDTH, ConnectionTool.ANCHOR_WIDTH);\r\n        g.setColor(Color.GREEN);\r\n        g.fill(e);\r\n        g.setColor(Color.BLACK);\r\n        g.draw(e);\r\n        p = getView().drawingToView(createdFigure.getEndPoint());\r\n        e = new Ellipse2D.Double(((p.x) - ((ConnectionTool.ANCHOR_WIDTH) / 2)), ((p.y) - ((ConnectionTool.ANCHOR_WIDTH) / 2)), ConnectionTool.ANCHOR_WIDTH, ConnectionTool.ANCHOR_WIDTH);\r\n        g.setColor(Color.GREEN);\r\n        g.fill(e);\r\n        g.setColor(Color.BLACK);\r\n        g.draw(e);\r\n    }\r\n    gg.dispose();\r\n}'),(1473,'getAnchorWidth()','org.jhotdraw.draw.ConnectionTool.getAnchorWidth()','144','org.jhotdraw.draw.ConnectionTool','protected int getAnchorWidth() {\r\n    return ConnectionTool.ANCHOR_WIDTH;\r\n}'),(1474,'getPrototype()','org.jhotdraw.draw.ConnectionTool.getPrototype()','144','org.jhotdraw.draw.ConnectionTool','public ConnectionFigure getPrototype() {\r\n    return prototype;\r\n}'),(1475,'isToolDoneAfterCreation()','org.jhotdraw.draw.ConnectionTool.isToolDoneAfterCreation()','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Returns true, if this tool fires toolDone immediately after a new\r\n * figure has been created.\r\n */\r\npublic boolean isToolDoneAfterCreation() {\r\n    return isToolDoneAfterCreation;\r\n}'),(1476,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.ConnectionTool.mouseDragged(java.awt.event.MouseEvent)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Adjust the created connection.\r\n */\r\npublic void mouseDragged(MouseEvent e) {\r\n    repaintConnectors(e);\r\n    if ((createdFigure) != null) {\r\n        createdFigure.willChange();\r\n        Point2D.Double endPoint = viewToDrawing(new Point(e.getX(), e.getY()));\r\n        getView().getConstrainer().constrainPoint(endPoint);\r\n        Figure endFigure = getDrawing().findFigureExcept(endPoint, createdFigure);\r\n        endConnector = (endFigure == null) ? null : endFigure.findConnector(endPoint, prototype);\r\n        if (((endConnector) != null) && (canConnect(createdFigure, startConnector, endConnector))) {\r\n            endPoint = endConnector.getAnchor();\r\n        }\r\n        Rectangle r = new Rectangle(getView().drawingToView(createdFigure.getEndPoint()));\r\n        createdFigure.setEndPoint(endPoint);\r\n        r.add(getView().drawingToView(endPoint));\r\n        r.grow(((ConnectionTool.ANCHOR_WIDTH) + 2), ((ConnectionTool.ANCHOR_WIDTH) + 2));\r\n        getView().getComponent().repaint(r);\r\n        createdFigure.changed();\r\n    }\r\n}'),(1477,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.ConnectionTool.mouseMoved(java.awt.event.MouseEvent)','144','org.jhotdraw.draw.ConnectionTool','public void mouseMoved(MouseEvent evt) {\r\n    repaintConnectors(evt);\r\n}'),(1478,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.ConnectionTool.mousePressed(java.awt.event.MouseEvent)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Manipulates connections in a context dependent way. If the\r\n * mouse down hits a figure start a new connection. If the mousedown\r\n * hits a connection split a segment or join two segments.\r\n */\r\npublic void mousePressed(MouseEvent evt) {\r\n    super.mousePressed(evt);\r\n    getView().clearSelection();\r\n    Point2D.Double startPoint = viewToDrawing(anchor);\r\n    Figure startFigure = getDrawing().findFigure(startPoint);\r\n    startConnector = (startFigure == null) ? null : startFigure.findConnector(startPoint, prototype);\r\n    if (((startConnector) != null) && (canConnect(prototype, startConnector))) {\r\n        Point2D.Double anchor = startConnector.getAnchor();\r\n        createdFigure = createFigure();\r\n        createdFigure.setStartPoint(anchor);\r\n        createdFigure.setEndPoint(anchor);\r\n        getDrawing().add(createdFigure);\r\n        Rectangle r = new Rectangle(getView().drawingToView(anchor));\r\n        r.grow(ConnectionTool.ANCHOR_WIDTH, ConnectionTool.ANCHOR_WIDTH);\r\n        fireAreaInvalidated(r);\r\n    } else {\r\n        startConnector = null;\r\n        createdFigure = null;\r\n    }\r\n    endConnector = null;\r\n}'),(1479,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.ConnectionTool.mouseReleased(java.awt.event.MouseEvent)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Connects the figures if the mouse is released over another\r\n * figure.\r\n */\r\n@Override\r\npublic void mouseReleased(MouseEvent e) {\r\n    if (((((createdFigure) != null) && ((startConnector) != null)) && ((endConnector) != null)) && (createdFigure.canConnect(startConnector, endConnector))) {\r\n        createdFigure.willChange();\r\n        createdFigure.setStartConnector(startConnector);\r\n        createdFigure.setEndConnector(endConnector);\r\n        createdFigure.updateConnection();\r\n        createdFigure.changed();\r\n        final Figure addedFigure = createdFigure;\r\n        final Drawing addedDrawing = getDrawing();\r\n        getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n            public String getPresentationName() {\r\n                return presentationName;\r\n            }\r\n\r\n            public void undo() throws CannotUndoException {\r\n                super.undo();\r\n                addedDrawing.remove(addedFigure);\r\n            }\r\n\r\n            public void redo() throws CannotRedoException {\r\n                super.redo();\r\n                addedDrawing.add(addedFigure);\r\n            }\r\n        });\r\n        targetFigure = null;\r\n        Point2D.Double anchor = startConnector.getAnchor();\r\n        Rectangle r = new Rectangle(getView().drawingToView(anchor));\r\n        r.grow(ConnectionTool.ANCHOR_WIDTH, ConnectionTool.ANCHOR_WIDTH);\r\n        fireAreaInvalidated(r);\r\n        anchor = endConnector.getAnchor();\r\n        r = new Rectangle(getView().drawingToView(anchor));\r\n        r.grow(ConnectionTool.ANCHOR_WIDTH, ConnectionTool.ANCHOR_WIDTH);\r\n        fireAreaInvalidated(r);\r\n        startConnector = endConnector = null;\r\n        createdFigure = null;\r\n        creationFinished(createdFigure);\r\n    } else {\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}'),(1480,'repaintConnectors(java.awt.event.MouseEvent)','org.jhotdraw.draw.ConnectionTool.repaintConnectors(java.awt.event.MouseEvent)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * Updates the list of connectors that we draw when the user\r\n * moves or drags the mouse over a figure to which can connect.\r\n */\r\npublic void repaintConnectors(MouseEvent evt) {\r\n    Rectangle2D.Double invalidArea = null;\r\n    Point2D.Double targetPoint = viewToDrawing(new Point(evt.getX(), evt.getY()));\r\n    Figure aFigure = getDrawing().findFigureExcept(targetPoint, createdFigure);\r\n    if ((aFigure != null) && (!(aFigure.canConnect()))) {\r\n        aFigure = null;\r\n    }\r\n    if ((targetFigure) != aFigure) {\r\n        for (Connector c : connectors) {\r\n            if (invalidArea == null) {\r\n                invalidArea = c.getDrawingArea();\r\n            } else {\r\n                invalidArea.add(c.getDrawingArea());\r\n            }\r\n        }\r\n        targetFigure = aFigure;\r\n        if ((targetFigure) != null) {\r\n            connectors = targetFigure.getConnectors(getPrototype());\r\n            for (Connector c : connectors) {\r\n                if (invalidArea == null) {\r\n                    invalidArea = c.getDrawingArea();\r\n                } else {\r\n                    invalidArea.add(c.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (invalidArea != null) {\r\n        getView().getComponent().repaint(getView().drawingToView(invalidArea));\r\n    }\r\n}'),(1481,'setToolDoneAfterCreation(boolean)','org.jhotdraw.draw.ConnectionTool.setToolDoneAfterCreation(boolean)','144','org.jhotdraw.draw.ConnectionTool','/**\r\n * If this is set to false, the CreationTool does not fire toolDone\r\n * after a new Figure has been created. This allows to create multiple\r\n * figures consecutively.\r\n */\r\npublic void setToolDoneAfterCreation(boolean newValue) {\r\n    boolean oldValue = isToolDoneAfterCreation;\r\n    isToolDoneAfterCreation = newValue;\r\n}'),(1482,'clone()','org.jhotdraw.draw.Connector.clone()','145','org.jhotdraw.draw.Connector','/**\r\n * Returns a clone of the Connection.\r\n */\r\npublic Object clone();'),(1483,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Connector.contains(java.awt.geom.Point2D$Double)','145','org.jhotdraw.draw.Connector','/**\r\n * Tests if a point is contained in the connector.\r\n */\r\npublic boolean contains(Point2D.Double p);'),(1484,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.Connector.draw(java.awt.Graphics2D)','145','org.jhotdraw.draw.Connector','/**\r\n * Draws the connector.\r\n */\r\npublic void draw(Graphics2D g);'),(1485,'findEnd(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.Connector.findEnd(org.jhotdraw.draw.ConnectionFigure)','145','org.jhotdraw.draw.Connector','/**\r\n * Finds the end point for the connection.\r\n */\r\npublic Point2D.Double findEnd(ConnectionFigure connection);'),(1486,'findStart(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.Connector.findStart(org.jhotdraw.draw.ConnectionFigure)','145','org.jhotdraw.draw.Connector','/**\r\n * Finds the start point for the connection.\r\n */\r\npublic Point2D.Double findStart(ConnectionFigure connection);'),(1487,'getAnchor()','org.jhotdraw.draw.Connector.getAnchor()','145','org.jhotdraw.draw.Connector','/**\r\n * Gets the anchor of the connector.\r\n * This is a point at the center or at the bounds of the figure, where\r\n * the start or the end point will most likely be attached.\r\n * The purpose of this method is to give the user a hint, where the\r\n * connector will most likely be attached to the owner of the connector.\r\n */\r\npublic Point2D.Double getAnchor();'),(1488,'getBounds()','org.jhotdraw.draw.Connector.getBounds()','145','org.jhotdraw.draw.Connector','/**\r\n * Gets the bounds of the connector.\r\n * This usually are the bounds of the Figure which owns the Connector.\r\n * The bounds can differ from the Figure bounds, if the Connector\r\n * connects to a specific region of the Figure.\r\n */\r\npublic Rectangle2D.Double getBounds();'),(1489,'getDrawingArea()','org.jhotdraw.draw.Connector.getDrawingArea()','145','org.jhotdraw.draw.Connector','/**\r\n * Gets the drawing area of the connector.\r\n */\r\npublic Rectangle2D.Double getDrawingArea();'),(1490,'getOwner()','org.jhotdraw.draw.Connector.getOwner()','145','org.jhotdraw.draw.Connector','/**\r\n * Gets the connectors owner.\r\n */\r\npublic Figure getOwner();'),(1491,'updateAnchor(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Connector.updateAnchor(java.awt.geom.Point2D$Double)','145','org.jhotdraw.draw.Connector','/**\r\n * Updates the anchor of the connector.\r\n * This method is called when the user manually changes the end point of\r\n * the ConnectionFigure. The Connector uses this as a hint for choosing\r\n * a new anchor position.\r\n */\r\npublic void updateAnchor(Point2D.Double p);'),(1492,'-init-(org.jhotdraw.draw.Connector,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ConnectorHandle.-init-(org.jhotdraw.draw.Connector,org.jhotdraw.draw.ConnectionFigure)','146','org.jhotdraw.draw.ConnectorHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectorHandle(Connector connector, ConnectionFigure prototype) {\r\n    super(connector.getOwner());\r\n    this.connector = connector;\r\n    this.prototype = prototype;\r\n}'),(1493,'-init-()','org.jhotdraw.draw.ConnectorHandle.-init-()','146','org.jhotdraw.draw.ConnectorHandle','1() {\r\n}'),(1494,'basicGetBounds()','org.jhotdraw.draw.ConnectorHandle.basicGetBounds()','146','org.jhotdraw.draw.ConnectorHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(1495,'createConnection()','org.jhotdraw.draw.ConnectorHandle.createConnection()','146','org.jhotdraw.draw.ConnectorHandle','/**\r\n * Creates the ConnectionFigure. By default the figure prototype is\r\n * cloned.\r\n */\r\nprotected ConnectionFigure createConnection() {\r\n    return ((ConnectionFigure) (prototype.clone()));\r\n}'),(1496,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.ConnectorHandle.draw(java.awt.Graphics2D)','146','org.jhotdraw.draw.ConnectorHandle','@Override\r\npublic void draw(Graphics2D g) {\r\n    Graphics2D gg = ((Graphics2D) (g.create()));\r\n    gg.transform(view.getDrawingToViewTransform());\r\n    for (Connector c : connectors) {\r\n        c.draw(gg);\r\n    }\r\n    if ((createdConnection) == null) {\r\n        drawCircle(g, getEditor().getHandleAttribute(HandleAttributeKeys.DISCONNECTED_CONNECTOR_HANDLE_FILL_COLOR), getEditor().getHandleAttribute(HandleAttributeKeys.DISCONNECTED_CONNECTOR_HANDLE_STROKE_COLOR));\r\n    } else {\r\n        drawCircle(g, getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTOR_HANDLE_FILL_COLOR), getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTOR_HANDLE_STROKE_COLOR));\r\n        Point p = view.drawingToView(createdConnection.getEndPoint());\r\n        g.setColor(((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTOR_HANDLE_FILL_COLOR))));\r\n        int width = getHandlesize();\r\n        g.fillOval(((p.x) - (width / 2)), ((p.y) - (width / 2)), width, width);\r\n        g.setColor(((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTOR_HANDLE_STROKE_COLOR))));\r\n        g.drawOval(((p.x) - (width / 2)), ((p.y) - (width / 2)), width, width);\r\n    }\r\n}'),(1497,'findConnectableConnector(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ConnectorHandle.findConnectableConnector(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','146','org.jhotdraw.draw.ConnectorHandle','/**\r\n * Finds a connection end figure.\r\n */\r\nprotected Connector findConnectableConnector(Figure connectableFigure, Point2D.Double p) {\r\n    Connector target = (connectableFigure == null) ? null : connectableFigure.findConnector(p, getConnection());\r\n    if ((((connectableFigure != null) && (connectableFigure.canConnect())) && (!(connectableFigure.includes(getOwner())))) && (getConnection().canConnect(connector, target))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(1498,'findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.ConnectorHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)','146','org.jhotdraw.draw.ConnectorHandle','private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure figure : drawing.getFiguresFrontToBack()) {\r\n        if (((!(figure.includes(getConnection()))) && (figure.canConnect())) && (figure.contains(p))) {\r\n            return figure;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1499,'getConnection()','org.jhotdraw.draw.ConnectorHandle.getConnection()','146','org.jhotdraw.draw.ConnectorHandle','protected ConnectionFigure getConnection() {\r\n    return createdConnection;\r\n}'),(1500,'getDrawingArea()','org.jhotdraw.draw.ConnectorHandle.getDrawingArea()','146','org.jhotdraw.draw.ConnectorHandle','@Override\r\npublic Rectangle getDrawingArea() {\r\n    if ((getConnection()) != null) {\r\n        Rectangle r = new Rectangle(view.drawingToView(getConnection().getEndPoint()));\r\n        r.grow(getHandlesize(), getHandlesize());\r\n        return r;\r\n    } else {\r\n        return new Rectangle();// empty rectangle\r\n\r\n    }\r\n}'),(1501,'getLocation()','org.jhotdraw.draw.ConnectorHandle.getLocation()','146','org.jhotdraw.draw.ConnectorHandle','public Point getLocation() {\r\n    return view.drawingToView(connector.getAnchor());\r\n}'),(1502,'getLocationOnDrawing()','org.jhotdraw.draw.ConnectorHandle.getLocationOnDrawing()','146','org.jhotdraw.draw.ConnectorHandle','public Point2D.Double getLocationOnDrawing() {\r\n    return connector.getAnchor();\r\n}'),(1503,'getTargetFigure()','org.jhotdraw.draw.ConnectorHandle.getTargetFigure()','146','org.jhotdraw.draw.ConnectorHandle','protected Figure getTargetFigure() {\r\n    return connectableFigure;\r\n}'),(1504,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.ConnectorHandle.isCombinableWith(org.jhotdraw.draw.Handle)','146','org.jhotdraw.draw.ConnectorHandle','@Override\r\npublic boolean isCombinableWith(Handle handle) {\r\n    return false;\r\n}'),(1505,'repaintConnectors()','org.jhotdraw.draw.ConnectorHandle.repaintConnectors()','146','org.jhotdraw.draw.ConnectorHandle','/**\r\n * Updates the list of connectors that we draw when the user\r\n * moves or drags the mouse over a figure to which can connect.\r\n */\r\npublic void repaintConnectors() {\r\n    Rectangle2D.Double invalidArea = null;\r\n    for (Connector c : connectors) {\r\n        if (invalidArea == null) {\r\n            invalidArea = c.getDrawingArea();\r\n        } else {\r\n            invalidArea.add(c.getDrawingArea());\r\n        }\r\n    }\r\n    connectors = ((connectableFigure) == null) ? new LinkedList<Connector>() : connectableFigure.getConnectors(prototype);\r\n    for (Connector c : connectors) {\r\n        if (invalidArea == null) {\r\n            invalidArea = c.getDrawingArea();\r\n        } else {\r\n            invalidArea.add(c.getDrawingArea());\r\n        }\r\n    }\r\n    if (invalidArea != null) {\r\n        view.getComponent().repaint(view.drawingToView(invalidArea));\r\n    }\r\n}'),(1506,'setConnection(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ConnectorHandle.setConnection(org.jhotdraw.draw.ConnectionFigure)','146','org.jhotdraw.draw.ConnectorHandle','protected void setConnection(ConnectionFigure newConnection) {\r\n    createdConnection = newConnection;\r\n}'),(1507,'setTargetFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ConnectorHandle.setTargetFigure(org.jhotdraw.draw.Figure)','146','org.jhotdraw.draw.ConnectorHandle','protected void setTargetFigure(Figure newTargetFigure) {\r\n    connectableFigure = newTargetFigure;\r\n}'),(1508,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.ConnectorHandle.trackEnd(java.awt.Point,java.awt.Point,int)','146','org.jhotdraw.draw.ConnectorHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    Point2D.Double p = view.viewToDrawing(lead);\r\n    view.getConstrainer().constrainPoint(p);\r\n    Figure f = findConnectableFigure(p, view.getDrawing());\r\n    connectableConnector = findConnectableConnector(f, p);\r\n    if ((connectableConnector) != null) {\r\n        final Drawing drawing = view.getDrawing();\r\n        final ConnectionFigure c = getConnection();\r\n        getConnection().setStartConnector(connector);\r\n        getConnection().setEndConnector(connectableConnector);\r\n        getConnection().updateConnection();\r\n        view.clearSelection();\r\n        view.addToSelection(c);\r\n        view.getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                return labels.getString(\"edit.createConnectionFigure.text\");\r\n            }\r\n\r\n            @Override\r\n            public void undo() throws CannotUndoException {\r\n                super.undo();\r\n                drawing.remove(c);\r\n            }\r\n\r\n            @Override\r\n            public void redo() throws CannotRedoException {\r\n                super.redo();\r\n                drawing.add(c);\r\n                view.clearSelection();\r\n                view.addToSelection(c);\r\n            }\r\n        });\r\n    } else {\r\n        view.getDrawing().remove(getConnection());\r\n        fireAreaInvalidated(getDrawingArea());\r\n    }\r\n    connectableConnector = null;\r\n    connectors = Collections.emptyList();\r\n    setConnection(null);\r\n    setTargetFigure(null);\r\n}'),(1509,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.ConnectorHandle.trackStart(java.awt.Point,int)','146','org.jhotdraw.draw.ConnectorHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    setConnection(createConnection());\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    Point2D.Double p = getLocationOnDrawing();\r\n    getConnection().setStartPoint(p);\r\n    getConnection().setEndPoint(p);\r\n    view.getDrawing().add(getConnection());\r\n}'),(1510,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.ConnectorHandle.trackStep(java.awt.Point,java.awt.Point,int)','146','org.jhotdraw.draw.ConnectorHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    // updateConnectors(lead);\r\n    Point2D.Double p = view.viewToDrawing(lead);\r\n    fireAreaInvalidated(getDrawingArea());\r\n    Figure figure = findConnectableFigure(p, view.getDrawing());\r\n    if (figure != (connectableFigure)) {\r\n        connectableFigure = figure;\r\n        repaintConnectors();\r\n    }\r\n    connectableConnector = findConnectableConnector(figure, p);\r\n    if ((connectableConnector) != null) {\r\n        p = connectableConnector.getAnchor();\r\n    }\r\n    getConnection().willChange();\r\n    getConnection().setEndPoint(p);\r\n    getConnection().changed();\r\n    fireAreaInvalidated(getDrawingArea());\r\n}'),(1511,'addChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.draw.Constrainer.addChangeListener(javax.swing.event.ChangeListener)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Adds a change listener.\r\n */\r\npublic void addChangeListener(ChangeListener listener);'),(1512,'constrainAngle(double)','org.jhotdraw.draw.Constrainer.constrainAngle(double)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Constrains the given angle (in radians).\r\n * This method changes the angle which is passed as a parameter.\r\n *\r\n * @param angle\r\n * 		The angle (in radians).\r\n * @return The closest constrained angle (in radians).\r\n */\r\npublic double constrainAngle(double angle);'),(1513,'constrainPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Constrainer.constrainPoint(java.awt.geom.Point2D$Double)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Constrains the placement of a point towards the closest constraint\r\n * in any direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * 		A point on the drawing.\r\n * @return Returns the constrained point.\r\n */\r\npublic Point2D.Double constrainPoint(Point2D.Double p);'),(1514,'constrainRectangle(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.Constrainer.constrainRectangle(java.awt.geom.Rectangle2D$Double)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Constrains the placement of a rectangle towards the closest constrainment\r\n * in any direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method does not change the size of the rectangle.\r\n *\r\n * @param r\r\n * 		A rectangle on the drawing.\r\n * @return Returns the constrained rectangle.\r\n */\r\npublic Rectangle2D.Double constrainRectangle(Rectangle2D.Double r);'),(1515,'draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.Constrainer.draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Draws the constrainer grid for the specified drawing view.\r\n */\r\npublic void draw(Graphics2D g, DrawingView view);'),(1516,'removeChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.draw.Constrainer.removeChangeListener(javax.swing.event.ChangeListener)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Removes a change listener.\r\n */\r\npublic void removeChangeListener(ChangeListener listener);'),(1517,'rotateAngle(double,org.jhotdraw.draw.RotationDirection)','org.jhotdraw.draw.Constrainer.rotateAngle(double,org.jhotdraw.draw.RotationDirection)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Moves the given angle (in radians) to the closest constrained orientation\r\n * in the specified direction.\r\n *\r\n * @param angle\r\n * 		The angle (in radians).\r\n * @return The closest constrained angle (in radians) in the specified\r\ndirection.\r\n */\r\npublic double rotateAngle(double angle, RotationDirection dir);'),(1518,'translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.Constrainer.translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Moves a point to the closest constrained location in the specified\r\n * direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * 		A point on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained point.\r\n */\r\npublic Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir);'),(1519,'translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.Constrainer.translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)','147','org.jhotdraw.draw.Constrainer','/**\r\n * Moves a rectangle to the closest constrained location in the\r\n * specified direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method only performs a translation - it does not change\r\n * the size of the rectangle.\r\n *\r\n * @param r\r\n * 		A rectangle on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained rectangle.\r\n */\r\npublic Rectangle2D.Double translateRectangle(Rectangle2D.Double r, TranslationDirection dir);'),(1520,'-init-(java.lang.String)','org.jhotdraw.draw.CreationTool.-init-(java.lang.String)','148','org.jhotdraw.draw.CreationTool','/**\r\n * Creates a new instance.\r\n */\r\npublic CreationTool(String prototypeClassName) {\r\n    this(prototypeClassName, null, null);\r\n}'),(1521,'-init-(java.lang.String,java.util.Map)','org.jhotdraw.draw.CreationTool.-init-(java.lang.String,java.util.Map)','148','org.jhotdraw.draw.CreationTool','public CreationTool(String prototypeClassName, Map<AttributeKey, Object> attributes) {\r\n    this(prototypeClassName, attributes, null);\r\n}'),(1522,'-init-(java.lang.String,java.util.Map,java.lang.String)','org.jhotdraw.draw.CreationTool.-init-(java.lang.String,java.util.Map,java.lang.String)','148','org.jhotdraw.draw.CreationTool','public CreationTool(String prototypeClassName, Map<AttributeKey, Object> attributes, String name) {\r\n    try {\r\n        this.prototype = ((Figure) (Class.forName(prototypeClassName).newInstance()));\r\n    } catch (Exception e) {\r\n        InternalError error = new InternalError((\"Unable to create Figure from \" + prototypeClassName));\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    this.prototypeAttributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}'),(1523,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure)','148','org.jhotdraw.draw.CreationTool','/**\r\n * Creates a new instance with the specified prototype but without an\r\n * attribute set. The CreationTool clones this prototype each time a new\r\n *  Figure needs to be created. When a new Figure is created, the\r\n * CreationTool applies the default attributes from the DrawingEditor to it.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a new Figure.\r\n */\r\npublic CreationTool(Figure prototype) {\r\n    this(prototype, null, null);\r\n}'),(1524,'-init-(org.jhotdraw.draw.Figure,java.util.Map)','org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure,java.util.Map)','148','org.jhotdraw.draw.CreationTool','/**\r\n * Creates a new instance with the specified prototype but without an\r\n * attribute set. The CreationTool clones this prototype each time a new\r\n * Figure needs to be created. When a new Figure is created, the\r\n * CreationTool applies the default attributes from the DrawingEditor to it,\r\n * and then it applies the attributes to it, that have been supplied in\r\n * this constructor.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a new Figure.\r\n * @param attributes\r\n * 		The CreationTool applies these attributes to the\r\n * 		prototype after having applied the default attributes from the DrawingEditor.\r\n */\r\npublic CreationTool(Figure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}'),(1525,'-init-(org.jhotdraw.draw.Figure,java.util.Map,java.lang.String)','org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure,java.util.Map,java.lang.String)','148','org.jhotdraw.draw.CreationTool','/**\r\n * Creates a new instance with the specified prototype and attribute set.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a new Figure.\r\n * @param attributes\r\n * 		The CreationTool applies these attributes to the\r\n * 		prototype after having applied the default attributes from the DrawingEditor.\r\n * @param name\r\n * 		The name parameter is currently not used.\r\n * @deprecated This constructor might go away, because the name parameter\r\nis not used.\r\n */\r\npublic CreationTool(Figure prototype, Map<AttributeKey, Object> attributes, String name) {\r\n    this.prototype = prototype;\r\n    this.prototypeAttributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}'),(1526,'-init-()','org.jhotdraw.draw.CreationTool.-init-()','148','org.jhotdraw.draw.CreationTool','1() {\r\n}'),(1527,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.CreationTool.activate(org.jhotdraw.draw.DrawingEditor)','148','org.jhotdraw.draw.CreationTool','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    // getView().clearSelection();\r\n    getView().setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n}'),(1528,'createFigure()','org.jhotdraw.draw.CreationTool.createFigure()','148','org.jhotdraw.draw.CreationTool','@SuppressWarnings(\"unchecked\")\r\nprotected Figure createFigure() {\r\n    Figure f = ((Figure) (prototype.clone()));\r\n    getEditor().applyDefaultAttributesTo(f);\r\n    if ((prototypeAttributes) != null) {\r\n        for (Map.Entry<AttributeKey, Object> entry : prototypeAttributes.entrySet()) {\r\n            entry.getKey().basicSet(f, entry.getValue());\r\n        }\r\n    }\r\n    return f;\r\n}'),(1529,'creationFinished(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.CreationTool.creationFinished(org.jhotdraw.draw.Figure)','148','org.jhotdraw.draw.CreationTool','/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\nprotected void creationFinished(Figure createdFigure) {\r\n    if (createdFigure.isSelectable()) {\r\n        getView().addToSelection(createdFigure);\r\n    }\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(1530,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.CreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)','148','org.jhotdraw.draw.CreationTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    if ((getView()) != null) {\r\n        getView().setCursor(Cursor.getDefaultCursor());\r\n    }\r\n    if ((createdFigure) != null) {\r\n        if ((createdFigure) instanceof CompositeFigure) {\r\n            ((CompositeFigure) (createdFigure)).layout();\r\n        }\r\n        createdFigure = null;\r\n    }\r\n}'),(1531,'getAddedFigure()','org.jhotdraw.draw.CreationTool.getAddedFigure()','148','org.jhotdraw.draw.CreationTool','protected Figure getAddedFigure() {\r\n    return createdFigure;\r\n}'),(1532,'getCreatedFigure()','org.jhotdraw.draw.CreationTool.getCreatedFigure()','148','org.jhotdraw.draw.CreationTool','protected Figure getCreatedFigure() {\r\n    return createdFigure;\r\n}'),(1533,'getPrototype()','org.jhotdraw.draw.CreationTool.getPrototype()','148','org.jhotdraw.draw.CreationTool','public Figure getPrototype() {\r\n    return prototype;\r\n}'),(1534,'isToolDoneAfterCreation()','org.jhotdraw.draw.CreationTool.isToolDoneAfterCreation()','148','org.jhotdraw.draw.CreationTool','/**\r\n * Returns true, if this tool fires toolDone immediately after a new\r\n * figure has been created.\r\n */\r\npublic boolean isToolDoneAfterCreation() {\r\n    return isToolDoneAfterCreation;\r\n}'),(1535,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.CreationTool.mouseDragged(java.awt.event.MouseEvent)','148','org.jhotdraw.draw.CreationTool','public void mouseDragged(MouseEvent evt) {\r\n    if ((createdFigure) != null) {\r\n        Point2D.Double p = constrainPoint(new Point(evt.getX(), evt.getY()));\r\n        createdFigure.willChange();\r\n        createdFigure.setBounds(constrainPoint(new Point(anchor.x, anchor.y)), p);\r\n        createdFigure.changed();\r\n    }\r\n}'),(1536,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.CreationTool.mousePressed(java.awt.event.MouseEvent)','148','org.jhotdraw.draw.CreationTool','public void mousePressed(MouseEvent evt) {\r\n    super.mousePressed(evt);\r\n    getView().clearSelection();\r\n    createdFigure = createFigure();\r\n    Point2D.Double p = constrainPoint(viewToDrawing(anchor));\r\n    anchor.x = evt.getX();\r\n    anchor.y = evt.getY();\r\n    createdFigure.setBounds(p, p);\r\n    getDrawing().add(createdFigure);\r\n}'),(1537,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.CreationTool.mouseReleased(java.awt.event.MouseEvent)','148','org.jhotdraw.draw.CreationTool','public void mouseReleased(MouseEvent evt) {\r\n    if ((createdFigure) != null) {\r\n        Rectangle2D.Double bounds = createdFigure.getBounds();\r\n        if (((bounds.width) == 0) && ((bounds.height) == 0)) {\r\n            getDrawing().remove(createdFigure);\r\n            if (isToolDoneAfterCreation()) {\r\n                fireToolDone();\r\n            }\r\n        } else {\r\n            if (((Math.abs(((anchor.x) - (evt.getX())))) < (minimalSizeTreshold.width)) && ((Math.abs(((anchor.y) - (evt.getY())))) < (minimalSizeTreshold.height))) {\r\n                createdFigure.willChange();\r\n                createdFigure.setBounds(constrainPoint(new Point(anchor.x, anchor.y)), constrainPoint(new Point(((anchor.x) + ((int) (Math.max(bounds.width, minimalSize.width)))), ((anchor.y) + ((int) (Math.max(bounds.height, minimalSize.height)))))));\r\n                createdFigure.changed();\r\n            }\r\n            if ((createdFigure) instanceof CompositeFigure) {\r\n                ((CompositeFigure) (createdFigure)).layout();\r\n            }\r\n            final Figure addedFigure = createdFigure;\r\n            final Drawing addedDrawing = getDrawing();\r\n            getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                public String getPresentationName() {\r\n                    return presentationName;\r\n                }\r\n\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    addedDrawing.remove(addedFigure);\r\n                }\r\n\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    addedDrawing.add(addedFigure);\r\n                }\r\n            });\r\n            creationFinished(createdFigure);\r\n            createdFigure = null;\r\n        }\r\n    } else {\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}'),(1538,'setToolDoneAfterCreation(boolean)','org.jhotdraw.draw.CreationTool.setToolDoneAfterCreation(boolean)','148','org.jhotdraw.draw.CreationTool','/**\r\n * If this is set to false, the CreationTool does not fire toolDone\r\n * after a new Figure has been created. This allows to create multiple\r\n * figures consecutively.\r\n */\r\npublic void setToolDoneAfterCreation(boolean newValue) {\r\n    boolean oldValue = isToolDoneAfterCreation;\r\n    isToolDoneAfterCreation = newValue;\r\n}'),(1539,'updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','org.jhotdraw.draw.CreationTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','148','org.jhotdraw.draw.CreationTool','@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(1540,'-init-(org.jhotdraw.xml.DOMFactory)','org.jhotdraw.draw.DOMStorableInputOutputFormat.-init-(org.jhotdraw.xml.DOMFactory)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','/**\r\n * Creates a new instance with format name \"Drawing\", file extension \"xml\"\r\n * and mime type \"image/x-jhotdraw\".\r\n */\r\npublic DOMStorableInputOutputFormat(DOMFactory factory) {\r\n    this(factory, \"Drawing\", \"xml\", \"image/x-jhotdraw\");\r\n}'),(1541,'-init-(org.jhotdraw.xml.DOMFactory,java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.draw.DOMStorableInputOutputFormat.-init-(org.jhotdraw.xml.DOMFactory,java.lang.String,java.lang.String,java.lang.String)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','/**\r\n * Creates a new instance using the specified parameters.\r\n *\r\n * @param factory\r\n * 		The factory for creating Figures from XML elements.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param mimeType\r\n * 		The Mime Type is used for clipboard access.\r\n */\r\npublic DOMStorableInputOutputFormat(DOMFactory factory, String description, String fileExtension, String mimeType) {\r\n    this.factory = factory;\r\n    this.fileExtension = fileExtension;\r\n    this.mimeType = mimeType;\r\n    try {\r\n        this.dataFlavor = new DataFlavor(mimeType);\r\n    } catch (ClassNotFoundException ex) {\r\n        InternalError error = new InternalError((\"Unable to create data flavor for mime type:\" + mimeType));\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n}'),(1542,'createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','org.jhotdraw.draw.DOMStorableInputOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);\r\n    domo.openElement(\"Drawing-Clip\");\r\n    for (Figure f : figures) {\r\n        domo.writeObject(f);\r\n    }\r\n    domo.closeElement();\r\n    domo.save(buf);\r\n    return new InputStreamTransferable(new DataFlavor(mimeType, description), buf.toByteArray());\r\n}'),(1543,'getFileExtension()','org.jhotdraw.draw.DOMStorableInputOutputFormat.getFileExtension()','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public String getFileExtension() {\r\n    return fileExtension;\r\n}'),(1544,'getFileFilter()','org.jhotdraw.draw.DOMStorableInputOutputFormat.getFileFilter()','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(description, fileExtension);\r\n}'),(1545,'getInputFormatAccessory()','org.jhotdraw.draw.DOMStorableInputOutputFormat.getInputFormatAccessory()','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(1546,'getOutputFormatAccessory()','org.jhotdraw.draw.DOMStorableInputOutputFormat.getOutputFormatAccessory()','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public JComponent getOutputFormatAccessory() {\r\n    return null;\r\n}'),(1547,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.DOMStorableInputOutputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return flavor.equals(dataFlavor);\r\n}'),(1548,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>();\r\n    InputStream in = ((InputStream) (t.getTransferData(new DataFlavor(mimeType, description))));\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(\"Drawing-Clip\");\r\n    for (int i = 0, n = domi.getElementCount(); i < n; i++) {\r\n        Figure f = ((Figure) (domi.readObject(i)));\r\n        figures.add(f);\r\n    }\r\n    domi.closeElement();\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n}'),(1549,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(1550,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(1551,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(factory.getName(drawing));\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.read(domi);\r\n    domi.closeElement();\r\n}'),(1552,'read(java.net.URL,java.io.InputStream,org.jhotdraw.draw.Drawing,java.util.LinkedList)','org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.net.URL,java.io.InputStream,org.jhotdraw.draw.Drawing,java.util.LinkedList)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','/**\r\n * Reads a list of figures into the specified drawing.\r\n * This method expects that there is a child element named \"figures\"\r\n * in the element that represents the drawing.\r\n */\r\nprotected void read(URL url, InputStream in, Drawing drawing, LinkedList<Figure> figures) throws IOException {\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(factory.getName(drawing));\r\n    domi.openElement(\"figures\", 0);\r\n    figures.clear();\r\n    for (int i = 0, n = domi.getElementCount(); i < n; i++) {\r\n        Figure f = ((Figure) (domi.readObject()));\r\n        figures.add(f);\r\n    }\r\n    domi.closeElement();\r\n    domi.closeElement();\r\n    drawing.basicAddAll(drawing.getChildCount(), figures);\r\n}'),(1553,'write(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.DOMStorableInputOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(1554,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.DOMStorableInputOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','149','org.jhotdraw.draw.DOMStorableInputOutputFormat','public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);\r\n    domo.openElement(factory.getName(drawing));\r\n    drawing.write(domo);\r\n    domo.closeElement();\r\n    domo.save(out);\r\n}'),(1555,'getDecorator()','org.jhotdraw.draw.DecoratedFigure.getDecorator()','150','org.jhotdraw.draw.DecoratedFigure','/**\r\n * Gets the decorator for this figure.\r\n */\r\npublic Figure getDecorator();'),(1556,'setDecorator(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DecoratedFigure.setDecorator(org.jhotdraw.draw.Figure)','150','org.jhotdraw.draw.DecoratedFigure','/**\r\n * Sets a decorator Figure, for example a visual adornment to this Figure.\r\n * Set this to null, if no decorator is desired.\r\n * The decorator uses the same logical bounds as this Figure plus\r\n * AttributeKeys.DECORATOR_INSETS. The decorator does not handle events.\r\n * The decorator is drawn when the figure is drawn.\r\n */\r\npublic void setDecorator(Figure newValue);'),(1557,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDragTracker.-init-(org.jhotdraw.draw.Figure)','151','org.jhotdraw.draw.DefaultDragTracker','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultDragTracker(Figure figure) {\r\n    anchorFigure = figure;\r\n}'),(1558,'-init-()','org.jhotdraw.draw.DefaultDragTracker.-init-()','151','org.jhotdraw.draw.DefaultDragTracker','public DefaultDragTracker() {\r\n}'),(1559,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultDragTracker.mouseDragged(java.awt.event.MouseEvent)','151','org.jhotdraw.draw.DefaultDragTracker','public void mouseDragged(MouseEvent evt) {\r\n    DrawingView view = getView();\r\n    if (!(view.getSelectedFigures().isEmpty())) {\r\n        if ((isDragging) == false) {\r\n            isDragging = true;\r\n            updateCursor(editor.findView(((Container) (evt.getSource()))), new Point(evt.getX(), evt.getY()));\r\n        }\r\n        Point2D.Double currentPoint = view.viewToDrawing(new Point(evt.getX(), evt.getY()));\r\n        dragRect.x += (currentPoint.x) - (previousPoint.x);\r\n        dragRect.y += (currentPoint.y) - (previousPoint.y);\r\n        Rectangle2D.Double constrainedRect = ((Rectangle2D.Double) (dragRect.clone()));\r\n        if ((view.getConstrainer()) != null) {\r\n            view.getConstrainer().constrainRectangle(constrainedRect);\r\n        }\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(((constrainedRect.x) - (previousOrigin.x)), ((constrainedRect.y) - (previousOrigin.y)));\r\n        Constrainer c = view.getConstrainer();\r\n        for (Figure f : view.getSelectedFigures()) {\r\n            f.willChange();\r\n            f.transform(tx);\r\n            f.changed();\r\n        }\r\n        previousPoint = currentPoint;\r\n        previousOrigin = new Point2D.Double(constrainedRect.x, constrainedRect.y);\r\n    }\r\n}'),(1560,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultDragTracker.mouseMoved(java.awt.event.MouseEvent)','151','org.jhotdraw.draw.DefaultDragTracker','@Override\r\npublic void mouseMoved(MouseEvent evt) {\r\n    updateCursor(editor.findView(((Container) (evt.getSource()))), evt.getPoint());\r\n}'),(1561,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultDragTracker.mousePressed(java.awt.event.MouseEvent)','151','org.jhotdraw.draw.DefaultDragTracker','@Override\r\npublic void mousePressed(MouseEvent evt) {\r\n    super.mousePressed(evt);\r\n    DrawingView view = getView();\r\n    if (evt.isShiftDown()) {\r\n        view.setHandleDetailLevel(0);\r\n        view.toggleSelection(anchorFigure);\r\n        if (!(view.isFigureSelected(anchorFigure))) {\r\n            anchorFigure = null;\r\n        }\r\n    } else\r\n        if (!(view.isFigureSelected(anchorFigure))) {\r\n            view.setHandleDetailLevel(0);\r\n            view.clearSelection();\r\n            view.addToSelection(anchorFigure);\r\n        }\r\n\r\n    if (!(view.getSelectedFigures().isEmpty())) {\r\n        dragRect = null;\r\n        for (Figure f : view.getSelectedFigures()) {\r\n            if ((dragRect) == null) {\r\n                dragRect = f.getBounds();\r\n            } else {\r\n                dragRect.add(f.getBounds());\r\n            }\r\n        }\r\n        anchorPoint = previousPoint = view.viewToDrawing(anchor);\r\n        anchorOrigin = previousOrigin = new Point2D.Double(dragRect.x, dragRect.y);\r\n    }\r\n}'),(1562,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultDragTracker.mouseReleased(java.awt.event.MouseEvent)','151','org.jhotdraw.draw.DefaultDragTracker','public void mouseReleased(MouseEvent evt) {\r\n    super.mouseReleased(evt);\r\n    DrawingView view = getView();\r\n    if (!(view.getSelectedFigures().isEmpty())) {\r\n        isDragging = false;\r\n        int x = evt.getX();\r\n        int y = evt.getY();\r\n        updateCursor(editor.findView(((Container) (evt.getSource()))), new Point(x, y));\r\n        Point2D.Double newPoint = view.viewToDrawing(new Point(x, y));\r\n        Collection<Figure> draggedFigures = new LinkedList<Figure>(view.getSelectedFigures());\r\n        Figure dropTarget = getDrawing().findFigureExcept(newPoint, draggedFigures);\r\n        if (dropTarget != null) {\r\n            boolean snapBack = dropTarget.handleDrop(newPoint, draggedFigures, view);\r\n            if (snapBack) {\r\n                AffineTransform tx = new AffineTransform();\r\n                tx.translate(((anchorOrigin.x) - (previousOrigin.x)), ((anchorOrigin.y) - (previousOrigin.y)));\r\n                Constrainer c = view.getConstrainer();\r\n                for (Figure f : draggedFigures) {\r\n                    f.willChange();\r\n                    f.transform(tx);\r\n                    f.changed();\r\n                }\r\n                fireToolDone();\r\n                return;\r\n            }\r\n        }\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(((-(anchorOrigin.x)) + (previousOrigin.x)), ((-(anchorOrigin.y)) + (previousOrigin.y)));\r\n        if (!(tx.isIdentity())) {\r\n            getDrawing().fireUndoableEditHappened(new TransformEdit(draggedFigures, tx));\r\n        }\r\n    }\r\n    fireToolDone();\r\n}'),(1563,'setDraggedFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDragTracker.setDraggedFigure(org.jhotdraw.draw.Figure)','151','org.jhotdraw.draw.DefaultDragTracker','public void setDraggedFigure(Figure f) {\r\n    anchorFigure = f;\r\n}'),(1564,'-init-()','org.jhotdraw.draw.DefaultDrawing.-init-()','152','org.jhotdraw.draw.DefaultDrawing','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultDrawing() {\r\n}'),(1565,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawing.basicAdd(int,org.jhotdraw.draw.Figure)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\npublic void basicAdd(int index, Figure figure) {\r\n    super.basicAdd(index, figure);\r\n    invalidateSortOrder();\r\n}'),(1566,'clone()','org.jhotdraw.draw.DefaultDrawing.clone()','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\npublic DefaultDrawing clone() {\r\n    DefaultDrawing that = ((DefaultDrawing) (super.clone()));\r\n    that.canvasSize = ((this.canvasSize) == null) ? null : ((Dimension2DDouble) (this.canvasSize.clone()));\r\n    return that;\r\n}'),(1567,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawing.draw(java.awt.Graphics2D)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\npublic void draw(Graphics2D g) {\r\n    synchronized(getLock()) {\r\n        ensureSorted();\r\n        ArrayList<Figure> toDraw = new ArrayList<Figure>(getChildren().size());\r\n        Rectangle clipRect = g.getClipBounds();\r\n        for (Figure f : getChildren()) {\r\n            if (f.getDrawingArea().intersects(clipRect)) {\r\n                toDraw.add(f);\r\n            }\r\n        }\r\n        draw(g, toDraw);\r\n    }\r\n}'),(1568,'draw(java.awt.Graphics2D,java.util.Collection)','org.jhotdraw.draw.DefaultDrawing.draw(java.awt.Graphics2D,java.util.Collection)','152','org.jhotdraw.draw.DefaultDrawing','public void draw(Graphics2D g, Collection<Figure> children) {\r\n    Rectangle2D clipBounds = g.getClipBounds();\r\n    if (clipBounds != null) {\r\n        for (Figure f : children) {\r\n            if ((f.isVisible()) && (f.getDrawingArea().intersects(clipBounds))) {\r\n                f.draw(g);\r\n            }\r\n        }\r\n    } else {\r\n        for (Figure f : children) {\r\n            if (f.isVisible()) {\r\n                f.draw(g);\r\n            }\r\n        }\r\n    }\r\n}'),(1569,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawing.drawFill(java.awt.Graphics2D)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\nprotected void drawFill(Graphics2D g) {\r\n    // throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(1570,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawing.drawStroke(java.awt.Graphics2D)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\nprotected void drawStroke(Graphics2D g) {\r\n    // throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(1571,'ensureSorted()','org.jhotdraw.draw.DefaultDrawing.ensureSorted()','152','org.jhotdraw.draw.DefaultDrawing','/**\r\n * Ensures that the children are sorted in z-order sequence from back to\r\n * front.\r\n */\r\nprivate void ensureSorted() {\r\n    if (needsSorting) {\r\n        Collections.sort(children, FigureLayerComparator.INSTANCE);\r\n        needsSorting = false;\r\n    }\r\n}'),(1572,'findFigure(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.DefaultDrawing.findFigure(java.awt.geom.Point2D$Double)','152','org.jhotdraw.draw.DefaultDrawing','public Figure findFigure(Point2D.Double p) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if ((f.isVisible()) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1573,'findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.DefaultDrawing.findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','152','org.jhotdraw.draw.DefaultDrawing','public Figure findFigureBehind(Point2D.Double p, Collection<? extends Figure> children) {\r\n    int inFrontOf = children.size();\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (inFrontOf == 0) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            if (children.contains(f)) {\r\n                inFrontOf--;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(1574,'findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','152','org.jhotdraw.draw.DefaultDrawing','public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1575,'findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.DefaultDrawing.findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','152','org.jhotdraw.draw.DefaultDrawing','public Figure findFigureExcept(Point2D.Double p, Collection<? extends Figure> ignore) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (((!(ignore.contains(f))) && (f.isVisible())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1576,'findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','152','org.jhotdraw.draw.DefaultDrawing','public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (((f != ignore) && (f.isVisible())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1577,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.DefaultDrawing.findFigureInside(java.awt.geom.Point2D$Double)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\npublic Figure findFigureInside(Point2D.Double p) {\r\n    Figure f = findFigure(p);\r\n    return f == null ? null : f.findFigureInside(p);\r\n}'),(1578,'findFigures(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.DefaultDrawing.findFigures(java.awt.geom.Rectangle2D$Double)','152','org.jhotdraw.draw.DefaultDrawing','public List<Figure> findFigures(Rectangle2D.Double bounds) {\r\n    LinkedList<Figure> intersection = new LinkedList<Figure>();\r\n    for (Figure f : getChildren()) {\r\n        if ((f.isVisible()) && (f.getBounds().intersects(bounds))) {\r\n            intersection.add(f);\r\n        }\r\n    }\r\n    return intersection;\r\n}'),(1579,'findFiguresWithin(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.DefaultDrawing.findFiguresWithin(java.awt.geom.Rectangle2D$Double)','152','org.jhotdraw.draw.DefaultDrawing','public List<Figure> findFiguresWithin(Rectangle2D.Double bounds) {\r\n    LinkedList<Figure> contained = new LinkedList<Figure>();\r\n    for (Figure f : getChildren()) {\r\n        Rectangle2D.Double r = f.getBounds();\r\n        if ((AttributeKeys.TRANSFORM.get(f)) != null) {\r\n            Rectangle2D rt = AttributeKeys.TRANSFORM.get(f).createTransformedShape(r).getBounds2D();\r\n            r = (rt instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rt)) : new Rectangle2D.Double(rt.getX(), rt.getY(), rt.getWidth(), rt.getHeight());\r\n        }\r\n        if ((f.isVisible()) && (Geom.contains(bounds, r))) {\r\n            contained.add(f);\r\n        }\r\n    }\r\n    return contained;\r\n}'),(1580,'getCanvasSize()','org.jhotdraw.draw.DefaultDrawing.getCanvasSize()','152','org.jhotdraw.draw.DefaultDrawing','public Dimension2DDouble getCanvasSize() {\r\n    return (canvasSize) == null ? null : ((Dimension2DDouble) (canvasSize.clone()));\r\n}'),(1581,'getFiguresFrontToBack()','org.jhotdraw.draw.DefaultDrawing.getFiguresFrontToBack()','152','org.jhotdraw.draw.DefaultDrawing','/**\r\n * Returns an iterator to iterate in\r\n * Z-order front to back over the children.\r\n */\r\npublic List<Figure> getFiguresFrontToBack() {\r\n    ensureSorted();\r\n    return new ReversedList<Figure>(getChildren());\r\n}'),(1582,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawing.indexOf(org.jhotdraw.draw.Figure)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\npublic int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}'),(1583,'invalidateSortOrder()','org.jhotdraw.draw.DefaultDrawing.invalidateSortOrder()','152','org.jhotdraw.draw.DefaultDrawing','/**\r\n * Invalidates the sort order.\r\n */\r\nprivate void invalidateSortOrder() {\r\n    needsSorting = true;\r\n}'),(1584,'setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.DefaultDrawing.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','152','org.jhotdraw.draw.DefaultDrawing','@Override\r\nprotected void setAttributeOnChildren(AttributeKey key, Object newValue) {\r\n    // empty\r\n}'),(1585,'setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.draw.DefaultDrawing.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)','152','org.jhotdraw.draw.DefaultDrawing','public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = (newValue == null) ? null : ((Dimension2DDouble) (newValue.clone()));\r\n    firePropertyChange(Drawing.CANVAS_SIZE_PROPERTY, oldValue, newValue);\r\n}'),(1586,'sort(java.util.Collection)','org.jhotdraw.draw.DefaultDrawing.sort(java.util.Collection)','152','org.jhotdraw.draw.DefaultDrawing','public List<Figure> sort(Collection<? extends Figure> c) {\r\n    HashSet<Figure> unsorted = new HashSet<Figure>();\r\n    unsorted.addAll(c);\r\n    ArrayList<Figure> sorted = new ArrayList<Figure>(c.size());\r\n    for (Figure f : getChildren()) {\r\n        if (unsorted.contains(f)) {\r\n            sorted.add(f);\r\n            unsorted.remove(f);\r\n        }\r\n    }\r\n    for (Figure f : c) {\r\n        if (unsorted.contains(f)) {\r\n            sorted.add(f);\r\n            unsorted.remove(f);\r\n        }\r\n    }\r\n    return sorted;\r\n}'),(1587,'-init-()','org.jhotdraw.draw.DefaultDrawingEditor.-init-()','153','org.jhotdraw.draw.DefaultDrawingEditor','1() {\r\n}'),(1588,'add(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.DefaultDrawingEditor.add(org.jhotdraw.draw.DrawingView)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void add(DrawingView view) {\r\n    views.add(view);\r\n    view.addNotify(this);\r\n    view.getComponent().addFocusListener(focusHandler);\r\n    if ((tool) != null) {\r\n        view.addMouseListener(tool);\r\n        view.addMouseMotionListener(tool);\r\n        view.addKeyListener(tool);\r\n    }\r\n    updateActiveView();\r\n}'),(1589,'applyDefaultAttributesTo(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawingEditor.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)','153','org.jhotdraw.draw.DefaultDrawingEditor','@SuppressWarnings(\"unchecked\")\r\npublic void applyDefaultAttributesTo(Figure f) {\r\n    for (Map.Entry<AttributeKey, Object> entry : defaultAttributes.entrySet()) {\r\n        entry.getKey().basicSet(f, entry.getValue());\r\n    }\r\n}'),(1590,'areaInvalidated(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.DefaultDrawingEditor.areaInvalidated(org.jhotdraw.draw.ToolEvent)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void areaInvalidated(ToolEvent evt) {\r\n    Rectangle r = evt.getInvalidatedArea();\r\n    evt.getView().getComponent().repaint(r.x, r.y, r.width, r.height);\r\n}'),(1591,'findView(java.awt.Container)','org.jhotdraw.draw.DefaultDrawingEditor.findView(java.awt.Container)','153','org.jhotdraw.draw.DefaultDrawingEditor','public DrawingView findView(Container c) {\r\n    for (DrawingView v : views) {\r\n        if ((v.getComponent()) == c) {\r\n            return v;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1592,'getActiveView()','org.jhotdraw.draw.DefaultDrawingEditor.getActiveView()','153','org.jhotdraw.draw.DefaultDrawingEditor','public DrawingView getActiveView() {\r\n    if (((activeView) == null) && ((views.size()) != 0)) {\r\n        setActiveView(views.iterator().next());\r\n    }\r\n    return activeView;\r\n}'),(1593,'getDefaultAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.DefaultDrawingEditor.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)','153','org.jhotdraw.draw.DefaultDrawingEditor','public <T> T getDefaultAttribute(AttributeKey<T> key) {\r\n    if (defaultAttributes.containsKey(key)) {\r\n        return key.get(defaultAttributes);\r\n    } else {\r\n        return key.getDefaultValue();\r\n    }\r\n}'),(1594,'getDefaultAttributes()','org.jhotdraw.draw.DefaultDrawingEditor.getDefaultAttributes()','153','org.jhotdraw.draw.DefaultDrawingEditor','public Map<AttributeKey, Object> getDefaultAttributes() {\r\n    return Collections.unmodifiableMap(defaultAttributes);\r\n}'),(1595,'getDrawingViews()','org.jhotdraw.draw.DefaultDrawingEditor.getDrawingViews()','153','org.jhotdraw.draw.DefaultDrawingEditor','public Collection<DrawingView> getDrawingViews() {\r\n    return Collections.unmodifiableCollection(views);\r\n}'),(1596,'getHandleAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.DefaultDrawingEditor.getHandleAttribute(org.jhotdraw.draw.AttributeKey)','153','org.jhotdraw.draw.DefaultDrawingEditor','public <T> T getHandleAttribute(AttributeKey<T> key) {\r\n    if (handleAttributes.containsKey(key)) {\r\n        return key.get(handleAttributes);\r\n    } else {\r\n        return key.getDefaultValue();\r\n    }\r\n}'),(1597,'getTool()','org.jhotdraw.draw.DefaultDrawingEditor.getTool()','153','org.jhotdraw.draw.DefaultDrawingEditor','public Tool getTool() {\r\n    return tool;\r\n}'),(1598,'isEnabled()','org.jhotdraw.draw.DefaultDrawingEditor.isEnabled()','153','org.jhotdraw.draw.DefaultDrawingEditor','public boolean isEnabled() {\r\n    return isEnabled;\r\n}'),(1599,'remove(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.DefaultDrawingEditor.remove(org.jhotdraw.draw.DrawingView)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void remove(DrawingView view) {\r\n    view.getComponent().removeFocusListener(focusHandler);\r\n    views.remove(view);\r\n    if ((tool) != null) {\r\n        view.removeMouseListener(tool);\r\n        view.removeMouseMotionListener(tool);\r\n        view.removeKeyListener(tool);\r\n    }\r\n    view.removeNotify(this);\r\n    if ((activeView) == view) {\r\n        view = ((views.size()) > 0) ? views.iterator().next() : null;\r\n    }\r\n    updateActiveView();\r\n}'),(1600,'setActiveView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.DefaultDrawingEditor.setActiveView(org.jhotdraw.draw.DrawingView)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void setActiveView(DrawingView newValue) {\r\n    DrawingView oldValue = activeView;\r\n    activeView = newValue;\r\n    if ((newValue != null) && (newValue != oldValue)) {\r\n        preferredViewSize = activeView.getComponent().getPreferredSize();\r\n    }\r\n    firePropertyChange(DrawingEditor.ACTIVE_VIEW_PROPERTY, oldValue, newValue);\r\n}'),(1601,'setCursor(java.awt.Cursor)','org.jhotdraw.draw.DefaultDrawingEditor.setCursor(java.awt.Cursor)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void setCursor(Cursor c) {\r\n}'),(1602,'setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.DefaultDrawingEditor.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void setDefaultAttribute(AttributeKey key, Object newValue) {\r\n    Object oldValue = defaultAttributes.put(key, newValue);\r\n    firePropertyChange(key.getKey(), oldValue, newValue);\r\n}'),(1603,'setEnabled(boolean)','org.jhotdraw.draw.DefaultDrawingEditor.setEnabled(boolean)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void setEnabled(boolean newValue) {\r\n    if (newValue != (isEnabled)) {\r\n        boolean oldValue = isEnabled;\r\n        isEnabled = newValue;\r\n        firePropertyChange(\"enabled\", oldValue, newValue);\r\n    }\r\n}'),(1604,'setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.DefaultDrawingEditor.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void setHandleAttribute(AttributeKey key, Object value) {\r\n    handleAttributes.put(key, value);\r\n}'),(1605,'setTool(org.jhotdraw.draw.Tool)','org.jhotdraw.draw.DefaultDrawingEditor.setTool(org.jhotdraw.draw.Tool)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void setTool(Tool newValue) {\r\n    Tool oldValue = tool;\r\n    if (newValue == (tool)) {\r\n        return;\r\n    }\r\n    if ((tool) != null) {\r\n        for (DrawingView v : views) {\r\n            v.removeMouseListener(tool);\r\n            v.removeMouseMotionListener(tool);\r\n            v.removeKeyListener(tool);\r\n        }\r\n        tool.deactivate(this);\r\n        tool.removeToolListener(this);\r\n    }\r\n    tool = newValue;\r\n    if ((tool) != null) {\r\n        tool.activate(this);\r\n        for (DrawingView v : views) {\r\n            v.addMouseListener(tool);\r\n            v.addMouseMotionListener(tool);\r\n            v.addKeyListener(tool);\r\n        }\r\n        tool.addToolListener(this);\r\n    }\r\n    firePropertyChange(DrawingEditor.TOOL_PROPERTY, oldValue, newValue);\r\n}'),(1606,'toolDone(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.DefaultDrawingEditor.toolDone(org.jhotdraw.draw.ToolEvent)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void toolDone(ToolEvent evt) {\r\n    // XXX - Maybe we should do this with all views of the editor??\r\n    DrawingView v = getActiveView();\r\n    if (v != null) {\r\n        JComponent c = v.getComponent();\r\n        Dimension oldPreferredViewSize = preferredViewSize;\r\n        preferredViewSize = c.getPreferredSize();\r\n        if ((oldPreferredViewSize == null) || (!(oldPreferredViewSize.equals(preferredViewSize)))) {\r\n            c.revalidate();\r\n        }\r\n    }\r\n}'),(1607,'toolStarted(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.DefaultDrawingEditor.toolStarted(org.jhotdraw.draw.ToolEvent)','153','org.jhotdraw.draw.DefaultDrawingEditor','public void toolStarted(ToolEvent evt) {\r\n    setActiveView(evt.getView());\r\n}'),(1608,'updateActiveView()','org.jhotdraw.draw.DefaultDrawingEditor.updateActiveView()','153','org.jhotdraw.draw.DefaultDrawingEditor','private void updateActiveView() {\r\n    for (DrawingView v : views) {\r\n        if (v.getComponent().isFocusOwner()) {\r\n            setActiveView(v);\r\n            return;\r\n        }\r\n    }\r\n    setActiveView(null);\r\n}'),(1609,'-init-()','org.jhotdraw.draw.DefaultDrawingView.-init-()','155','org.jhotdraw.draw.DefaultDrawingView','1() {\r\n}'),(1610,'addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','org.jhotdraw.draw.DefaultDrawingView.addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','155','org.jhotdraw.draw.DefaultDrawingView','public void addFigureSelectionListener(FigureSelectionListener fsl) {\r\n    listenerList.add(FigureSelectionListener.class, fsl);\r\n}'),(1611,'addNotify(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DefaultDrawingView.addNotify(org.jhotdraw.draw.DrawingEditor)','155','org.jhotdraw.draw.DefaultDrawingView','public void addNotify(DrawingEditor editor) {\r\n    DrawingEditor oldValue = editor;\r\n    this.editor = editor;\r\n    firePropertyChange(\"editor\", oldValue, editor);\r\n    invalidateHandles();\r\n    repaint();\r\n}'),(1612,'addToSelection(java.util.Collection)','org.jhotdraw.draw.DefaultDrawingView.addToSelection(java.util.Collection)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Adds a collection of figures to the current selection.\r\n */\r\npublic void addToSelection(Collection<Figure> figures) {\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n    boolean selectionChanged = false;\r\n    Rectangle invalidatedArea = null;\r\n    for (Figure figure : figures) {\r\n        if (selectedFigures.add(figure)) {\r\n            selectionChanged = true;\r\n            newSelection.add(figure);\r\n            figure.addFigureListener(handleInvalidator);\r\n            if ((handlesAreValid) && ((getEditor()) != null)) {\r\n                for (Handle h : figure.createHandles(detailLevel)) {\r\n                    h.setView(this);\r\n                    selectionHandles.add(h);\r\n                    h.addHandleListener(eventHandler);\r\n                    if (invalidatedArea == null) {\r\n                        invalidatedArea = h.getDrawingArea();\r\n                    } else {\r\n                        invalidatedArea.add(h.getDrawingArea());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (selectionChanged) {\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        if (invalidatedArea != null) {\r\n            repaint(invalidatedArea);\r\n        }\r\n    }\r\n}'),(1613,'addToSelection(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawingView.addToSelection(org.jhotdraw.draw.Figure)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Adds a figure to the current selection.\r\n */\r\npublic void addToSelection(Figure figure) {\r\n    if (DefaultDrawingView.DEBUG) {\r\n        System.out.println((((\"DefaultDrawingView\" + \".addToSelection(\") + figure) + \")\"));\r\n    }\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    if (selectedFigures.add(figure)) {\r\n        figure.addFigureListener(handleInvalidator);\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        Rectangle invalidatedArea = null;\r\n        if ((handlesAreValid) && ((getEditor()) != null)) {\r\n            for (Handle h : figure.createHandles(detailLevel)) {\r\n                h.setView(this);\r\n                selectionHandles.add(h);\r\n                h.addHandleListener(eventHandler);\r\n                if (invalidatedArea == null) {\r\n                    invalidatedArea = h.getDrawingArea();\r\n                } else {\r\n                    invalidatedArea.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        if (invalidatedArea != null) {\r\n            repaint(invalidatedArea);\r\n        }\r\n    }\r\n}'),(1614,'clearSelection()','org.jhotdraw.draw.DefaultDrawingView.clearSelection()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Clears the current selection.\r\n */\r\npublic void clearSelection() {\r\n    if ((getSelectionCount()) > 0) {\r\n        Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n        selectedFigures.clear();\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        invalidateHandles();\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n    }\r\n    // repaintDrawingArea();\r\n}'),(1615,'createEventHandler()','org.jhotdraw.draw.DefaultDrawingView.createEventHandler()','155','org.jhotdraw.draw.DefaultDrawingView','protected DefaultDrawingView.EventHandler createEventHandler() {\r\n    return new DefaultDrawingView.EventHandler();\r\n}'),(1616,'delete()','org.jhotdraw.draw.DefaultDrawingView.delete()','155','org.jhotdraw.draw.DefaultDrawingView','public void delete() {\r\n    final LinkedList<CompositeFigureEvent> deletionEvents = new LinkedList<CompositeFigureEvent>();\r\n    final List<Figure> deletedFigures = drawing.sort(getSelectedFigures());\r\n    // Abort, if not all of the selected figures may be removed from the\r\n    // drawing\r\n    for (Figure f : deletedFigures) {\r\n        if (!(f.isRemovable())) {\r\n            getToolkit().beep();\r\n            return;\r\n        }\r\n    }\r\n    // Get z-indices of deleted figures\r\n    final int[] deletedFigureIndices = new int[deletedFigures.size()];\r\n    for (int i = 0; i < (deletedFigureIndices.length); i++) {\r\n        deletedFigureIndices[i] = drawing.indexOf(deletedFigures.get(i));\r\n    }\r\n    clearSelection();\r\n    getDrawing().removeAll(deletedFigures);\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n            return labels.getString(\"edit.delete.text\");\r\n        }\r\n\r\n        @Override\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            clearSelection();\r\n            Drawing d = getDrawing();\r\n            for (int i = 0; i < (deletedFigureIndices.length); i++) {\r\n                d.add(deletedFigureIndices[i], deletedFigures.get(i));\r\n            }\r\n            addToSelection(deletedFigures);\r\n        }\r\n\r\n        @Override\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            for (int i = 0; i < (deletedFigureIndices.length); i++) {\r\n                drawing.remove(deletedFigures.get(i));\r\n            }\r\n        }\r\n    });\r\n}'),(1617,'drawBackground(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawingView.drawBackground(java.awt.Graphics2D)','155','org.jhotdraw.draw.DefaultDrawingView','protected void drawBackground(Graphics2D g) {\r\n    // Position of the zero coordinate point on the view\r\n    int x = ((int) ((-(translate.x)) * (scaleFactor)));\r\n    int y = ((int) ((-(translate.y)) * (scaleFactor)));\r\n    int w = getWidth();\r\n    int h = getHeight();\r\n    // Retrieve the canvasColor color from the drawing\r\n    Color canvasColor;\r\n    if ((drawing) == null) {\r\n        canvasColor = getBackground();\r\n    } else {\r\n        canvasColor = AttributeKeys.CANVAS_FILL_COLOR.get(drawing);\r\n        if (canvasColor != null) {\r\n            canvasColor = new Color((((canvasColor.getRGB()) & 16777215) | (((int) ((AttributeKeys.CANVAS_FILL_OPACITY.get(drawing)) * 255)) << 24)), true);\r\n        }\r\n    }\r\n    if ((canvasColor == null) || ((canvasColor.getAlpha()) != 255)) {\r\n        g.setPaint(getBackgroundPaint(x, y));\r\n        g.fillRect(x, y, (w - x), (h - y));\r\n    }\r\n    if (canvasColor != null) {\r\n        g.setColor(canvasColor);\r\n        g.fillRect(x, y, (w - x), (h - y));\r\n    }\r\n    // Draw a gray canvasColor for the area which is at\r\n    // negative view coordinates.\r\n    Color outerBackground = new Color(15790320);\r\n    if (y > 0) {\r\n        g.setColor(outerBackground);\r\n        g.fillRect(0, 0, w, y);\r\n    }\r\n    if (x > 0) {\r\n        g.setColor(outerBackground);\r\n        g.fillRect(0, y, x, (h - y));\r\n    }\r\n    if ((getDrawing()) != null) {\r\n        Double cw = AttributeKeys.CANVAS_WIDTH.get(getDrawing());\r\n        Double ch = AttributeKeys.CANVAS_HEIGHT.get(getDrawing());\r\n        if ((cw != null) && (ch != null)) {\r\n            Point lowerRight = drawingToView(new Point2D.Double(cw, ch));\r\n            if ((lowerRight.x) < w) {\r\n                g.setColor(outerBackground);\r\n                g.fillRect(lowerRight.x, y, (w - (lowerRight.x)), (h - y));\r\n            }\r\n            if ((lowerRight.y) < h) {\r\n                g.setColor(outerBackground);\r\n                g.fillRect(x, lowerRight.y, (w - x), (h - (lowerRight.y)));\r\n            }\r\n        }\r\n    }\r\n    /* //Fill canvasColor with alternating colors to debug clipping\n    rainbow = (rainbow + 10) % 360;\n    g.setColor(\n    new Color(Color.HSBtoRGB((float) (rainbow / 360f), 0.3f, 1.0f)));\n    g.fill(g.getClipBounds());\n     */\r\n}'),(1618,'drawConstrainer(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawingView.drawConstrainer(java.awt.Graphics2D)','155','org.jhotdraw.draw.DefaultDrawingView','// int rainbow;\r\nprotected void drawConstrainer(Graphics2D g) {\r\n    getConstrainer().draw(g, this);\r\n}'),(1619,'drawDrawing(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawingView.drawDrawing(java.awt.Graphics2D)','155','org.jhotdraw.draw.DefaultDrawingView','protected void drawDrawing(Graphics2D gr) {\r\n    if ((drawing) != null) {\r\n        if (((drawing.getChildCount()) == 0) && ((emptyDrawingLabel) != null)) {\r\n            emptyDrawingLabel.setBounds(0, 0, getWidth(), getHeight());\r\n            emptyDrawingLabel.paint(gr);\r\n        } else {\r\n            Graphics2D g = ((Graphics2D) (gr.create()));\r\n            AffineTransform tx = g.getTransform();\r\n            tx.translate(((-(translate.x)) * (scaleFactor)), ((-(translate.y)) * (scaleFactor)));\r\n            tx.scale(scaleFactor, scaleFactor);\r\n            g.setTransform(tx);\r\n            drawing.setFontRenderContext(g.getFontRenderContext());\r\n            drawing.draw(g);\r\n            g.dispose();\r\n        }\r\n    }\r\n}'),(1620,'drawHandles(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawingView.drawHandles(java.awt.Graphics2D)','155','org.jhotdraw.draw.DefaultDrawingView','protected void drawHandles(Graphics2D g) {\r\n    if (((editor) != null) && ((editor.getActiveView()) == (this))) {\r\n        validateHandles();\r\n        for (Handle h : getSelectionHandles()) {\r\n            h.draw(g);\r\n        }\r\n        for (Handle h : getSecondaryHandles()) {\r\n            h.draw(g);\r\n        }\r\n    }\r\n}'),(1621,'drawTool(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultDrawingView.drawTool(java.awt.Graphics2D)','155','org.jhotdraw.draw.DefaultDrawingView','protected void drawTool(Graphics2D g) {\r\n    if ((((editor) != null) && ((editor.getActiveView()) == (this))) && ((editor.getTool()) != null)) {\r\n        editor.getTool().draw(g);\r\n    }\r\n}'),(1622,'drawingToView(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.DefaultDrawingView.drawingToView(java.awt.geom.Point2D$Double)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Converts drawing coordinates to view coordinates.\r\n */\r\npublic Point drawingToView(Point2D.Double p) {\r\n    return new Point(((int) (((p.x) - (translate.x)) * (scaleFactor))), ((int) (((p.y) - (translate.y)) * (scaleFactor))));\r\n}'),(1623,'drawingToView(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.DefaultDrawingView.drawingToView(java.awt.geom.Rectangle2D$Double)','155','org.jhotdraw.draw.DefaultDrawingView','public Rectangle drawingToView(Rectangle2D.Double r) {\r\n    return new Rectangle(((int) (((r.x) - (translate.x)) * (scaleFactor))), ((int) (((r.y) - (translate.y)) * (scaleFactor))), ((int) ((r.width) * (scaleFactor))), ((int) ((r.height) * (scaleFactor))));\r\n}'),(1624,'duplicate()','org.jhotdraw.draw.DefaultDrawingView.duplicate()','155','org.jhotdraw.draw.DefaultDrawingView','public void duplicate() {\r\n    Collection<Figure> sorted = getDrawing().sort(getSelectedFigures());\r\n    HashMap<Figure, Figure> originalToDuplicateMap = new HashMap<Figure, Figure>(sorted.size());\r\n    clearSelection();\r\n    final ArrayList<Figure> duplicates = new ArrayList<Figure>(sorted.size());\r\n    AffineTransform tx = new AffineTransform();\r\n    tx.translate(5, 5);\r\n    for (Figure f : sorted) {\r\n        Figure d = ((Figure) (f.clone()));\r\n        d.transform(tx);\r\n        duplicates.add(d);\r\n        originalToDuplicateMap.put(f, d);\r\n        drawing.add(d);\r\n    }\r\n    for (Figure f : duplicates) {\r\n        f.remap(originalToDuplicateMap, false);\r\n    }\r\n    addToSelection(duplicates);\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n            return labels.getString(\"edit.duplicate.text\");\r\n        }\r\n\r\n        @Override\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            getDrawing().removeAll(duplicates);\r\n        }\r\n\r\n        @Override\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            getDrawing().addAll(duplicates);\r\n        }\r\n    });\r\n}'),(1625,'findFigure(java.awt.Point)','org.jhotdraw.draw.DefaultDrawingView.findFigure(java.awt.Point)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Finds a figure at a given coordinates.\r\n *\r\n * @return A figure, null if no figure is found.\r\n */\r\npublic Figure findFigure(Point p) {\r\n    return getDrawing().findFigure(viewToDrawing(p));\r\n}'),(1626,'findFigures(java.awt.Rectangle)','org.jhotdraw.draw.DefaultDrawingView.findFigures(java.awt.Rectangle)','155','org.jhotdraw.draw.DefaultDrawingView','public Collection<Figure> findFigures(Rectangle r) {\r\n    return getDrawing().findFigures(viewToDrawing(r));\r\n}'),(1627,'findFiguresWithin(java.awt.Rectangle)','org.jhotdraw.draw.DefaultDrawingView.findFiguresWithin(java.awt.Rectangle)','155','org.jhotdraw.draw.DefaultDrawingView','public Collection<Figure> findFiguresWithin(Rectangle r) {\r\n    return getDrawing().findFiguresWithin(viewToDrawing(r));\r\n}'),(1628,'findHandle(java.awt.Point)','org.jhotdraw.draw.DefaultDrawingView.findHandle(java.awt.Point)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Finds a handle at a given coordinates.\r\n *\r\n * @return A handle, null if no handle is found.\r\n */\r\npublic Handle findHandle(Point p) {\r\n    validateHandles();\r\n    for (Handle handle : new ReversedList<Handle>(getSecondaryHandles())) {\r\n        if (handle.contains(p)) {\r\n            return handle;\r\n        }\r\n    }\r\n    for (Handle handle : new ReversedList<Handle>(getSelectionHandles())) {\r\n        if (handle.contains(p)) {\r\n            return handle;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1629,'fireSelectionChanged(java.util.Set,java.util.Set)','org.jhotdraw.draw.DefaultDrawingView.fireSelectionChanged(java.util.Set,java.util.Set)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireSelectionChanged(Set<Figure> oldValue, Set<Figure> newValue) {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        FigureSelectionEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureSelectionListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureSelectionEvent(this, oldValue, newValue);\r\n                }\r\n                ((FigureSelectionListener) (listeners[(i + 1)])).selectionChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(1630,'fireViewTransformChanged()','org.jhotdraw.draw.DefaultDrawingView.fireViewTransformChanged()','155','org.jhotdraw.draw.DefaultDrawingView','protected void fireViewTransformChanged() {\r\n    for (Handle handle : selectionHandles) {\r\n        handle.viewTransformChanged();\r\n    }\r\n    for (Handle handle : secondaryHandles) {\r\n        handle.viewTransformChanged();\r\n    }\r\n}'),(1631,'getActiveHandle()','org.jhotdraw.draw.DefaultDrawingView.getActiveHandle()','155','org.jhotdraw.draw.DefaultDrawingView','public Handle getActiveHandle() {\r\n    return activeHandle;\r\n}'),(1632,'getBackgroundPaint(int,int)','org.jhotdraw.draw.DefaultDrawingView.getBackgroundPaint(int,int)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Returns a paint for drawing the background of the drawing area.\r\n *\r\n * @return Paint.\r\n */\r\nprotected Paint getBackgroundPaint(int x, int y) {\r\n    if ((backgroundTile) == null) {\r\n        backgroundTile = new BufferedImage(16, 16, BufferedImage.TYPE_INT_RGB);\r\n        Graphics2D g = backgroundTile.createGraphics();\r\n        g.setColor(Color.white);\r\n        g.fillRect(0, 0, 16, 16);\r\n        g.setColor(new Color(14671839));\r\n        g.fillRect(0, 0, 8, 8);\r\n        g.fillRect(8, 8, 8, 8);\r\n        g.dispose();\r\n    }\r\n    return new TexturePaint(backgroundTile, new Rectangle(x, y, backgroundTile.getWidth(), backgroundTile.getHeight()));\r\n}'),(1633,'getCompatibleHandles(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.DefaultDrawingView.getCompatibleHandles(org.jhotdraw.draw.Handle)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Gets compatible handles.\r\n *\r\n * @return A collection containing the handle and all compatible handles.\r\n */\r\npublic Collection<Handle> getCompatibleHandles(Handle master) {\r\n    validateHandles();\r\n    HashSet<Figure> owners = new HashSet<Figure>();\r\n    LinkedList<Handle> compatibleHandles = new LinkedList<Handle>();\r\n    owners.add(master.getOwner());\r\n    compatibleHandles.add(master);\r\n    for (Handle handle : getSelectionHandles()) {\r\n        if ((!(owners.contains(handle.getOwner()))) && (handle.isCombinableWith(master))) {\r\n            owners.add(handle.getOwner());\r\n            compatibleHandles.add(handle);\r\n        }\r\n    }\r\n    return compatibleHandles;\r\n}'),(1634,'getComponent()','org.jhotdraw.draw.DefaultDrawingView.getComponent()','155','org.jhotdraw.draw.DefaultDrawingView','public JComponent getComponent() {\r\n    return this;\r\n}'),(1635,'getConstrainer()','org.jhotdraw.draw.DefaultDrawingView.getConstrainer()','155','org.jhotdraw.draw.DefaultDrawingView','public Constrainer getConstrainer() {\r\n    return isConstrainerVisible() ? visibleConstrainer : invisibleConstrainer;\r\n}'),(1636,'getDrawing()','org.jhotdraw.draw.DefaultDrawingView.getDrawing()','155','org.jhotdraw.draw.DefaultDrawingView','public Drawing getDrawing() {\r\n    return drawing;\r\n}'),(1637,'getDrawingArea()','org.jhotdraw.draw.DefaultDrawingView.getDrawingArea()','155','org.jhotdraw.draw.DefaultDrawingView','protected Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        if ((drawing) != null) {\r\n            cachedDrawingArea = drawing.getDrawingArea();\r\n        } else {\r\n            cachedDrawingArea = new Rectangle2D.Double();\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(1638,'getDrawingToViewTransform()','org.jhotdraw.draw.DefaultDrawingView.getDrawingToViewTransform()','155','org.jhotdraw.draw.DefaultDrawingView','public AffineTransform getDrawingToViewTransform() {\r\n    AffineTransform t = new AffineTransform();\r\n    t.scale(scaleFactor, scaleFactor);\r\n    t.translate((-(translate.x)), (-(translate.y)));\r\n    return t;\r\n}'),(1639,'getEditor()','org.jhotdraw.draw.DefaultDrawingView.getEditor()','155','org.jhotdraw.draw.DefaultDrawingView','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(1640,'getEmptyDrawingMessage()','org.jhotdraw.draw.DefaultDrawingView.getEmptyDrawingMessage()','155','org.jhotdraw.draw.DefaultDrawingView','public String getEmptyDrawingMessage() {\r\n    return (emptyDrawingLabel) == null ? null : emptyDrawingLabel.getText();\r\n}'),(1641,'getHandleDetailLevel()','org.jhotdraw.draw.DefaultDrawingView.getHandleDetailLevel()','155','org.jhotdraw.draw.DefaultDrawingView','public int getHandleDetailLevel() {\r\n    return detailLevel;\r\n}'),(1642,'getInvisibleConstrainer()','org.jhotdraw.draw.DefaultDrawingView.getInvisibleConstrainer()','155','org.jhotdraw.draw.DefaultDrawingView','public Constrainer getInvisibleConstrainer() {\r\n    return invisibleConstrainer;\r\n}'),(1643,'getPreferredSize()','org.jhotdraw.draw.DefaultDrawingView.getPreferredSize()','155','org.jhotdraw.draw.DefaultDrawingView','@Override\r\npublic Dimension getPreferredSize() {\r\n    if ((cachedPreferredSize) == null) {\r\n        Rectangle2D.Double r = getDrawingArea();\r\n        Double cw = ((getDrawing()) == null) ? null : AttributeKeys.CANVAS_WIDTH.get(getDrawing());\r\n        Double ch = ((getDrawing()) == null) ? null : AttributeKeys.CANVAS_HEIGHT.get(getDrawing());\r\n        Insets insets = getInsets();\r\n        if ((cw == null) || (ch == null)) {\r\n            cachedPreferredSize = new Dimension(((((int) (((Math.max(0, r.x)) + (r.width)) * (scaleFactor))) + (insets.left)) + (insets.right)), ((((int) (((Math.max(0, r.y)) + (r.height)) * (scaleFactor))) + (insets.top)) + (insets.bottom)));\r\n        } else {\r\n            cachedPreferredSize = new Dimension(((((int) ((Math.max(((Math.max(0, r.x)) + (r.width)), cw)) * (scaleFactor))) + (insets.left)) + (insets.right)), ((((int) ((Math.max(((Math.max(0, r.y)) + (r.height)), ch)) * (scaleFactor))) + (insets.top)) + (insets.bottom)));\r\n        }\r\n        validateViewTranslation();\r\n    }\r\n    return ((Dimension) (cachedPreferredSize.clone()));\r\n}'),(1644,'getScaleFactor()','org.jhotdraw.draw.DefaultDrawingView.getScaleFactor()','155','org.jhotdraw.draw.DefaultDrawingView','public double getScaleFactor() {\r\n    return scaleFactor;\r\n}'),(1645,'getSecondaryHandles()','org.jhotdraw.draw.DefaultDrawingView.getSecondaryHandles()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Gets the currently active secondary handles.\r\n */\r\nprivate List<Handle> getSecondaryHandles() {\r\n    validateHandles();\r\n    return Collections.unmodifiableList(secondaryHandles);\r\n}'),(1646,'getSelectedFigures()','org.jhotdraw.draw.DefaultDrawingView.getSelectedFigures()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Gets the current selection as a FigureSelection. A FigureSelection\r\n * can be cut, copied, pasted.\r\n */\r\npublic Set<Figure> getSelectedFigures() {\r\n    return Collections.unmodifiableSet(selectedFigures);\r\n}'),(1647,'getSelectionCount()','org.jhotdraw.draw.DefaultDrawingView.getSelectionCount()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Gets the number of selected figures.\r\n */\r\npublic int getSelectionCount() {\r\n    return selectedFigures.size();\r\n}'),(1648,'getSelectionHandles()','org.jhotdraw.draw.DefaultDrawingView.getSelectionHandles()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Gets the currently active selection handles.\r\n */\r\nprivate List<Handle> getSelectionHandles() {\r\n    validateHandles();\r\n    return Collections.unmodifiableList(selectionHandles);\r\n}'),(1649,'getToolTipText(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultDrawingView.getToolTipText(java.awt.event.MouseEvent)','155','org.jhotdraw.draw.DefaultDrawingView','@Override\r\npublic String getToolTipText(MouseEvent evt) {\r\n    if (((getEditor()) != null) && ((getEditor().getTool()) != null)) {\r\n        return getEditor().getTool().getToolTipText(this, evt);\r\n    }\r\n    return null;\r\n}'),(1650,'getVisibleConstrainer()','org.jhotdraw.draw.DefaultDrawingView.getVisibleConstrainer()','155','org.jhotdraw.draw.DefaultDrawingView','public Constrainer getVisibleConstrainer() {\r\n    return visibleConstrainer;\r\n}'),(1651,'initComponents()','org.jhotdraw.draw.DefaultDrawingView.initComponents()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\nprivate void initComponents() {\r\n    // GEN-BEGIN:initComponents\r\n    buttonGroup1 = new ButtonGroup();\r\n    setLayout(null);\r\n    setBackground(new Color(255, 255, 255));\r\n}// GEN-END:initComponents\r\n'),(1652,'invalidate()','org.jhotdraw.draw.DefaultDrawingView.invalidate()','155','org.jhotdraw.draw.DefaultDrawingView','@Override\r\npublic void invalidate() {\r\n    invalidateDimension();\r\n    super.invalidate();\r\n}'),(1653,'invalidateDimension()','org.jhotdraw.draw.DefaultDrawingView.invalidateDimension()','155','org.jhotdraw.draw.DefaultDrawingView','protected void invalidateDimension() {\r\n    cachedPreferredSize = null;\r\n    cachedDrawingArea = null;\r\n}'),(1654,'invalidateHandles()','org.jhotdraw.draw.DefaultDrawingView.invalidateHandles()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Invalidates the handles.\r\n */\r\nprivate void invalidateHandles() {\r\n    if (handlesAreValid) {\r\n        handlesAreValid = false;\r\n        Rectangle invalidatedArea = null;\r\n        for (Handle handle : selectionHandles) {\r\n            handle.removeHandleListener(eventHandler);\r\n            if (invalidatedArea == null) {\r\n                invalidatedArea = handle.getDrawingArea();\r\n            } else {\r\n                invalidatedArea.add(handle.getDrawingArea());\r\n            }\r\n            handle.dispose();\r\n        }\r\n        for (Handle handle : secondaryHandles) {\r\n            handle.removeHandleListener(eventHandler);\r\n            if (invalidatedArea == null) {\r\n                invalidatedArea = handle.getDrawingArea();\r\n            } else {\r\n                invalidatedArea.add(handle.getDrawingArea());\r\n            }\r\n            handle.dispose();\r\n        }\r\n        selectionHandles.clear();\r\n        secondaryHandles.clear();\r\n        setActiveHandle(null);\r\n        if (invalidatedArea != null) {\r\n            repaint(invalidatedArea);\r\n        }\r\n    }\r\n}'),(1655,'isConstrainerVisible()','org.jhotdraw.draw.DefaultDrawingView.isConstrainerVisible()','155','org.jhotdraw.draw.DefaultDrawingView','public boolean isConstrainerVisible() {\r\n    return isConstrainerVisible;\r\n}'),(1656,'isFigureSelected(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawingView.isFigureSelected(org.jhotdraw.draw.Figure)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Test whether a given figure is selected.\r\n */\r\npublic boolean isFigureSelected(Figure checkFigure) {\r\n    return selectedFigures.contains(checkFigure);\r\n}'),(1657,'paintComponent(java.awt.Graphics)','org.jhotdraw.draw.DefaultDrawingView.paintComponent(java.awt.Graphics)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Paints the drawing view.\r\n * Uses rendering hints for fast painting. Paints the canvasColor, the\r\n * grid, the drawing, the handles and the current tool.\r\n */\r\n@Override\r\npublic void paintComponent(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    // Set rendering hints for speed\r\n    g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, (Options.isFractionalMetrics() ? RenderingHints.VALUE_FRACTIONALMETRICS_ON : RenderingHints.VALUE_FRACTIONALMETRICS_OFF));\r\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);\r\n    g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, (Options.isTextAntialiased() ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF));\r\n    drawBackground(g);\r\n    drawConstrainer(g);\r\n    drawDrawing(g);\r\n    drawHandles(g);\r\n    drawTool(g);\r\n}'),(1658,'printComponent(java.awt.Graphics)','org.jhotdraw.draw.DefaultDrawingView.printComponent(java.awt.Graphics)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Prints the drawing view.\r\n * Uses high quality rendering hints for printing. Only prints the drawing.\r\n * Doesnt print the canvasColor, the grid, the handles and the tool.\r\n */\r\n@Override\r\npublic void printComponent(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    // Set rendering hints for quality\r\n    g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, (Options.isFractionalMetrics() ? RenderingHints.VALUE_FRACTIONALMETRICS_ON : RenderingHints.VALUE_FRACTIONALMETRICS_OFF));\r\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\r\n    g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, (Options.isTextAntialiased() ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF));\r\n    drawDrawing(g);\r\n}'),(1659,'removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','org.jhotdraw.draw.DefaultDrawingView.removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','155','org.jhotdraw.draw.DefaultDrawingView','public void removeFigureSelectionListener(FigureSelectionListener fsl) {\r\n    listenerList.remove(FigureSelectionListener.class, fsl);\r\n}'),(1660,'removeFromSelection(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawingView.removeFromSelection(org.jhotdraw.draw.Figure)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Removes a figure from the selection.\r\n */\r\npublic void removeFromSelection(Figure figure) {\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    if (selectedFigures.remove(figure)) {\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        invalidateHandles();\r\n        figure.removeFigureListener(handleInvalidator);\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        repaint();\r\n    }\r\n}'),(1661,'removeNotify(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DefaultDrawingView.removeNotify(org.jhotdraw.draw.DrawingEditor)','155','org.jhotdraw.draw.DefaultDrawingView','public void removeNotify(DrawingEditor editor) {\r\n    this.editor = null;\r\n    repaint();\r\n}'),(1662,'repaintDrawingArea(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.DefaultDrawingView.repaintDrawingArea(java.awt.geom.Rectangle2D$Double)','155','org.jhotdraw.draw.DefaultDrawingView','protected void repaintDrawingArea(Rectangle2D.Double r) {\r\n    Rectangle vr = drawingToView(r);\r\n    vr.grow(1, 1);\r\n    repaint(vr);\r\n}'),(1663,'repaintHandles()','org.jhotdraw.draw.DefaultDrawingView.repaintHandles()','155','org.jhotdraw.draw.DefaultDrawingView','public void repaintHandles() {\r\n    validateHandles();\r\n    Rectangle r = null;\r\n    for (Handle h : getSelectionHandles()) {\r\n        if (r == null) {\r\n            r = h.getDrawingArea();\r\n        } else {\r\n            r.add(h.getDrawingArea());\r\n        }\r\n    }\r\n    for (Handle h : getSecondaryHandles()) {\r\n        if (r == null) {\r\n            r = h.getDrawingArea();\r\n        } else {\r\n            r.add(h.getDrawingArea());\r\n        }\r\n    }\r\n    if (r != null) {\r\n        repaint(r);\r\n    }\r\n}'),(1664,'selectAll()','org.jhotdraw.draw.DefaultDrawingView.selectAll()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Selects all selectable figures.\r\n */\r\npublic void selectAll() {\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    selectedFigures.clear();\r\n    for (Figure figure : drawing.getChildren()) {\r\n        if (figure.isSelectable()) {\r\n            selectedFigures.add(figure);\r\n        }\r\n    }\r\n    Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n    invalidateHandles();\r\n    fireSelectionChanged(oldSelection, newSelection);\r\n    repaint();\r\n}'),(1665,'setActiveHandle(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.DefaultDrawingView.setActiveHandle(org.jhotdraw.draw.Handle)','155','org.jhotdraw.draw.DefaultDrawingView','// End of variables declaration//GEN-END:variables\r\npublic void setActiveHandle(Handle newValue) {\r\n    Handle oldValue = activeHandle;\r\n    if (oldValue != null) {\r\n        repaint(oldValue.getDrawingArea());\r\n    }\r\n    activeHandle = newValue;\r\n    if (newValue != null) {\r\n        repaint(newValue.getDrawingArea());\r\n    }\r\n    firePropertyChange(DrawingView.ACTIVE_HANDLE_PROPERTY, oldValue, newValue);\r\n}'),(1666,'setBounds(int,int,int,int)','org.jhotdraw.draw.DefaultDrawingView.setBounds(int,int,int,int)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Side effect: Changes view Translation.\r\n */\r\n@Override\r\npublic void setBounds(int x, int y, int width, int height) {\r\n    super.setBounds(x, y, width, height);\r\n    validateViewTranslation();\r\n}'),(1667,'setConstrainerVisible(boolean)','org.jhotdraw.draw.DefaultDrawingView.setConstrainerVisible(boolean)','155','org.jhotdraw.draw.DefaultDrawingView','public void setConstrainerVisible(boolean newValue) {\r\n    boolean oldValue = isConstrainerVisible;\r\n    isConstrainerVisible = newValue;\r\n    firePropertyChange(DrawingView.CONSTRAINER_VISIBLE_PROPERTY, oldValue, newValue);\r\n    repaint();\r\n}'),(1668,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.DefaultDrawingView.setDrawing(org.jhotdraw.draw.Drawing)','155','org.jhotdraw.draw.DefaultDrawingView','public void setDrawing(Drawing newValue) {\r\n    Drawing oldValue = drawing;\r\n    if ((this.drawing) != null) {\r\n        this.drawing.removeCompositeFigureListener(eventHandler);\r\n        this.drawing.removeFigureListener(eventHandler);\r\n        clearSelection();\r\n    }\r\n    this.drawing = newValue;\r\n    if ((this.drawing) != null) {\r\n        this.drawing.addCompositeFigureListener(eventHandler);\r\n        this.drawing.addFigureListener(eventHandler);\r\n    }\r\n    invalidateDimension();\r\n    if ((getParent()) != null) {\r\n        getParent().validate();\r\n        if ((getParent()) instanceof JViewport) {\r\n            JViewport vp = ((JViewport) (getParent()));\r\n            Rectangle2D.Double r = getDrawingArea();\r\n            vp.setViewPosition(drawingToView(new Point2D.Double(Math.min(0, (-(r.x))), Math.min(0, (-(r.y))))));\r\n        }\r\n    }\r\n    firePropertyChange(DrawingView.DRAWING_PROPERTY, oldValue, newValue);\r\n    validateViewTranslation();\r\n    revalidate();\r\n    repaint();\r\n}'),(1669,'setEmptyDrawingMessage(java.lang.String)','org.jhotdraw.draw.DefaultDrawingView.setEmptyDrawingMessage(java.lang.String)','155','org.jhotdraw.draw.DefaultDrawingView','public void setEmptyDrawingMessage(String newValue) {\r\n    String oldValue = ((emptyDrawingLabel) == null) ? null : emptyDrawingLabel.getText();\r\n    if (newValue == null) {\r\n        emptyDrawingLabel = null;\r\n    } else {\r\n        emptyDrawingLabel = new JLabel(newValue);\r\n        emptyDrawingLabel.setHorizontalAlignment(JLabel.CENTER);\r\n    }\r\n    firePropertyChange(\"emptyDrawingMessage\", oldValue, newValue);\r\n    repaint();\r\n}'),(1670,'setEnabled(boolean)','org.jhotdraw.draw.DefaultDrawingView.setEnabled(boolean)','155','org.jhotdraw.draw.DefaultDrawingView','@Override\r\npublic void setEnabled(boolean b) {\r\n    super.setEnabled(b);\r\n    setCursor(Cursor.getPredefinedCursor((b ? Cursor.DEFAULT_CURSOR : Cursor.WAIT_CURSOR)));\r\n}'),(1671,'setHandleDetailLevel(int)','org.jhotdraw.draw.DefaultDrawingView.setHandleDetailLevel(int)','155','org.jhotdraw.draw.DefaultDrawingView','public void setHandleDetailLevel(int newValue) {\r\n    if (newValue != (detailLevel)) {\r\n        detailLevel = newValue;\r\n        invalidateHandles();\r\n        validateHandles();\r\n    }\r\n}'),(1672,'setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)','org.jhotdraw.draw.DefaultDrawingView.setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)','155','org.jhotdraw.draw.DefaultDrawingView','public void setInvisibleConstrainer(Constrainer newValue) {\r\n    Constrainer oldValue = invisibleConstrainer;\r\n    invisibleConstrainer = newValue;\r\n    firePropertyChange(DrawingView.INVISIBLE_CONSTRAINER_PROPERTY, oldValue, newValue);\r\n}'),(1673,'setScaleFactor(double)','org.jhotdraw.draw.DefaultDrawingView.setScaleFactor(double)','155','org.jhotdraw.draw.DefaultDrawingView','public void setScaleFactor(double newValue) {\r\n    double oldValue = scaleFactor;\r\n    scaleFactor = newValue;\r\n    // fireViewTransformChanged();\r\n    validateViewTranslation();\r\n    firePropertyChange(\"scaleFactor\", oldValue, newValue);\r\n    invalidate();\r\n    invalidateHandles();\r\n    if ((getParent()) != null) {\r\n        getParent().validate();\r\n    }\r\n    repaint();\r\n}'),(1674,'setVisibleConstrainer(org.jhotdraw.draw.Constrainer)','org.jhotdraw.draw.DefaultDrawingView.setVisibleConstrainer(org.jhotdraw.draw.Constrainer)','155','org.jhotdraw.draw.DefaultDrawingView','public void setVisibleConstrainer(Constrainer newValue) {\r\n    Constrainer oldValue = visibleConstrainer;\r\n    visibleConstrainer = newValue;\r\n    firePropertyChange(DrawingView.VISIBLE_CONSTRAINER_PROPERTY, oldValue, newValue);\r\n}'),(1675,'toggleSelection(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultDrawingView.toggleSelection(org.jhotdraw.draw.Figure)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * If a figure isnt selected it is added to the selection.\r\n * Otherwise it is removed from the selection.\r\n */\r\npublic void toggleSelection(Figure figure) {\r\n    if (selectedFigures.contains(figure)) {\r\n        removeFromSelection(figure);\r\n    } else {\r\n        addToSelection(figure);\r\n    }\r\n}'),(1676,'validateHandles()','org.jhotdraw.draw.DefaultDrawingView.validateHandles()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Validates the handles.\r\n */\r\nprivate void validateHandles() {\r\n    // Validate handles only, if they are invalid, and if\r\n    // the DrawingView has a DrawingEditor.\r\n    if ((!(handlesAreValid)) && ((getEditor()) != null)) {\r\n        handlesAreValid = true;\r\n        selectionHandles.clear();\r\n        Rectangle invalidatedArea = null;\r\n        int level = detailLevel;\r\n        do {\r\n            for (Figure figure : getSelectedFigures()) {\r\n                for (Handle handle : figure.createHandles(level)) {\r\n                    handle.setView(this);\r\n                    selectionHandles.add(handle);\r\n                    handle.addHandleListener(eventHandler);\r\n                    if (invalidatedArea == null) {\r\n                        invalidatedArea = handle.getDrawingArea();\r\n                    } else {\r\n                        invalidatedArea.add(handle.getDrawingArea());\r\n                    }\r\n                }\r\n            }\r\n        } while (((level--) > 0) && ((selectionHandles.size()) == 0) );\r\n        detailLevel = level + 1;\r\n        if (invalidatedArea != null) {\r\n            repaint(invalidatedArea);\r\n        }\r\n    }\r\n}'),(1677,'validateViewTranslation()','org.jhotdraw.draw.DefaultDrawingView.validateViewTranslation()','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Updates the view translation taking into account the current dimension\r\n * of the view JComponent, the size of the drawing, and the scale factor.\r\n */\r\nprivate void validateViewTranslation() {\r\n    if ((getDrawing()) == null) {\r\n        translate.x = translate.y = 0;\r\n        return;\r\n    }\r\n    Point2D.Double oldTranslate = ((Point2D.Double) (translate.clone()));\r\n    int width = getWidth();\r\n    int height = getHeight();\r\n    Insets insets = getInsets();\r\n    Rectangle2D.Double r = getDrawingArea();\r\n    Double cw = AttributeKeys.CANVAS_WIDTH.get(getDrawing());\r\n    Double ch = AttributeKeys.CANVAS_HEIGHT.get(getDrawing());\r\n    if ((cw == null) || (ch == null)) {\r\n        // The canvas size is not specified.\r\n        // Place the drawing at the top left corner.\r\n        translate.x = Math.min(0, r.x);\r\n        translate.y = Math.min(0, r.y);\r\n    } else {\r\n        // The canvas size is not specified.\r\n        // Place the canvas at the center\r\n        Dimension preferred = getPreferredSize();\r\n        if ((cw != null) && (ch != null)) {\r\n            if ((cw * (scaleFactor)) < width) {\r\n                translate.x = ((width / (scaleFactor)) - cw) / (-2.0);\r\n            }\r\n            if ((ch * (scaleFactor)) < height) {\r\n                translate.y = ((height / (scaleFactor)) - ch) / (-2.0);\r\n            }\r\n        }\r\n        if (((r.y) - (translate.y)) < ((insets.top) / (scaleFactor))) {\r\n            // We cut off the upper part of the drawing -> shift the canvas down\r\n            translate.y = r.y;\r\n        } else\r\n            if ((((r.y) - (translate.y)) + (r.height)) > ((height - (insets.bottom)) / (scaleFactor))) {\r\n                // We cut off the lower part of the drawing -> shift the canvas up\r\n                translate.y = ((r.y) + (r.height)) - ((height - (insets.bottom)) / (scaleFactor));\r\n            }\r\n\r\n        if (((r.x) - (translate.x)) < ((insets.left) / (scaleFactor))) {\r\n            // We cut off the left part of the drawing -> shift the canvas right\r\n            translate.x = r.x;\r\n        } else\r\n            if ((((r.x) - (translate.x)) + (r.width)) > ((width - (insets.right)) / (scaleFactor))) {\r\n                // We cut off the right part of the drawing -> shift the canvas left\r\n                translate.x = ((r.x) + (r.width)) - ((width - (insets.right)) / (scaleFactor));\r\n            }\r\n\r\n    }\r\n    // Move the canvas out of the center if needed\r\n    if (!(oldTranslate.equals(translate))) {\r\n        fireViewTransformChanged();\r\n        repaint();\r\n    }\r\n}'),(1678,'viewToDrawing(java.awt.Point)','org.jhotdraw.draw.DefaultDrawingView.viewToDrawing(java.awt.Point)','155','org.jhotdraw.draw.DefaultDrawingView','/**\r\n * Converts view coordinates to drawing coordinates.\r\n */\r\npublic Point2D.Double viewToDrawing(Point p) {\r\n    return new Point2D.Double((((p.x) / (scaleFactor)) + (translate.x)), (((p.y) / (scaleFactor)) + (translate.y)));\r\n}'),(1679,'viewToDrawing(java.awt.Rectangle)','org.jhotdraw.draw.DefaultDrawingView.viewToDrawing(java.awt.Rectangle)','155','org.jhotdraw.draw.DefaultDrawingView','public Rectangle2D.Double viewToDrawing(Rectangle r) {\r\n    return new Rectangle2D.Double((((r.x) / (scaleFactor)) + (translate.x)), (((r.y) / (scaleFactor)) + (translate.y)), ((r.width) / (scaleFactor)), ((r.height) / (scaleFactor)));\r\n}'),(1680,'-init-()','org.jhotdraw.draw.DefaultDrawingView$EventHandler.-init-()','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','EventHandler() {\r\n}'),(1681,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void areaInvalidated(FigureEvent evt) {\r\n    repaintDrawingArea(evt.getInvalidatedArea());\r\n    invalidateDimension();\r\n}'),(1682,'areaInvalidated(org.jhotdraw.draw.HandleEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.areaInvalidated(org.jhotdraw.draw.HandleEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void areaInvalidated(HandleEvent evt) {\r\n    repaint(evt.getInvalidatedArea());\r\n    invalidateDimension();\r\n}'),(1683,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void attributeChanged(FigureEvent e) {\r\n    if ((e.getSource()) == (drawing)) {\r\n        if ((e.getAttribute().equals(AttributeKeys.CANVAS_HEIGHT)) || (e.getAttribute().equals(AttributeKeys.CANVAS_WIDTH))) {\r\n            validateViewTranslation();\r\n        }\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(e.getInvalidatedArea());\r\n    }\r\n}'),(1684,'figureAdded(org.jhotdraw.draw.CompositeFigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureAdded(org.jhotdraw.draw.CompositeFigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureAdded(CompositeFigureEvent evt) {\r\n    if (((drawing.getChildCount()) == 1) && ((getEmptyDrawingMessage()) != null)) {\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(evt.getInvalidatedArea());\r\n    }\r\n    invalidateDimension();\r\n}'),(1685,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureAdded(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureAdded(FigureEvent e) {\r\n}'),(1686,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureChanged(FigureEvent e) {\r\n    repaintDrawingArea(e.getInvalidatedArea());\r\n}'),(1687,'figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureHandlesChanged(FigureEvent e) {\r\n}'),(1688,'figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureRemoved(CompositeFigureEvent evt) {\r\n    if (((drawing.getChildCount()) == 0) && ((getEmptyDrawingMessage()) != null)) {\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(evt.getInvalidatedArea());\r\n    }\r\n    removeFromSelection(evt.getChildFigure());\r\n    invalidateDimension();\r\n}'),(1689,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureRemoved(FigureEvent e) {\r\n}'),(1690,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void figureRequestRemove(FigureEvent e) {\r\n}'),(1691,'focusGained(java.awt.event.FocusEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.focusGained(java.awt.event.FocusEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void focusGained(FocusEvent e) {\r\n    // repaintHandles();\r\n    if ((editor) != null) {\r\n        editor.setActiveView(this);\r\n    }\r\n}'),(1692,'focusLost(java.awt.event.FocusEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.focusLost(java.awt.event.FocusEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void focusLost(FocusEvent e) {\r\n    // repaintHandles();\r\n}'),(1693,'handleRequestRemove(org.jhotdraw.draw.HandleEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.handleRequestRemove(org.jhotdraw.draw.HandleEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void handleRequestRemove(HandleEvent e) {\r\n    selectionHandles.remove(e.getHandle());\r\n    e.getHandle().dispose();\r\n    invalidateHandles();\r\n    repaint(e.getInvalidatedArea());\r\n}'),(1694,'handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)','org.jhotdraw.draw.DefaultDrawingView$EventHandler.handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)','154','org.jhotdraw.draw.DefaultDrawingView$EventHandler','public void handleRequestSecondaryHandles(HandleEvent e) {\r\n    secondaryHandleOwner = e.getHandle();\r\n    secondaryHandles.clear();\r\n    secondaryHandles.addAll(secondaryHandleOwner.createSecondaryHandles());\r\n    for (Handle h : secondaryHandles) {\r\n        h.setView(this);\r\n        h.addHandleListener(eventHandler);\r\n    }\r\n    repaint();\r\n}'),(1695,'-init-()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.-init-()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','DefaultDrawingViewBeanInfo() {\r\n}'),(1696,'getBdescriptor()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getBdescriptor()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((DefaultDrawingViewBeanInfo.beanDescriptor) == null)\r\n        DefaultDrawingViewBeanInfo.beanDescriptor = new BeanDescriptor(DefaultDrawingViewBeanInfo.class);\r\n\r\n    DefaultDrawingViewBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    DefaultDrawingViewBeanInfo.beanDescriptor.setDisplayName(\"DefaultDrawingView\");\r\n    return DefaultDrawingViewBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(1697,'getBeanDescriptor()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getBeanDescriptor()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return DefaultDrawingViewBeanInfo.getBdescriptor();\r\n}'),(1698,'getDefaultEventIndex()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getDefaultEventIndex()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return DefaultDrawingViewBeanInfo.defaultEventIndex;\r\n}'),(1699,'getDefaultPropertyIndex()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getDefaultPropertyIndex()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return DefaultDrawingViewBeanInfo.defaultPropertyIndex;\r\n}'),(1700,'getEdescriptor()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getEdescriptor()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return DefaultDrawingViewBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(1701,'getEventSetDescriptors()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getEventSetDescriptors()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return DefaultDrawingViewBeanInfo.getEdescriptor();\r\n}'),(1702,'getIcon(int)','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getIcon(int)','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((DefaultDrawingViewBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((DefaultDrawingViewBeanInfo.iconColor16) == null)\r\n                    DefaultDrawingViewBeanInfo.iconColor16 = loadImage(DefaultDrawingViewBeanInfo.iconNameC16);\r\n\r\n                return DefaultDrawingViewBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((DefaultDrawingViewBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((DefaultDrawingViewBeanInfo.iconColor32) == null)\r\n                    DefaultDrawingViewBeanInfo.iconColor32 = loadImage(DefaultDrawingViewBeanInfo.iconNameC32);\r\n\r\n                return DefaultDrawingViewBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((DefaultDrawingViewBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((DefaultDrawingViewBeanInfo.iconMono16) == null)\r\n                    DefaultDrawingViewBeanInfo.iconMono16 = loadImage(DefaultDrawingViewBeanInfo.iconNameM16);\r\n\r\n                return DefaultDrawingViewBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((DefaultDrawingViewBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((DefaultDrawingViewBeanInfo.iconMono32) == null)\r\n                    DefaultDrawingViewBeanInfo.iconMono32 = loadImage(DefaultDrawingViewBeanInfo.iconNameM32);\r\n\r\n                return DefaultDrawingViewBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(1703,'getMdescriptor()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getMdescriptor()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return DefaultDrawingViewBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(1704,'getMethodDescriptors()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getMethodDescriptors()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return DefaultDrawingViewBeanInfo.getMdescriptor();\r\n}'),(1705,'getPdescriptor()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getPdescriptor()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return DefaultDrawingViewBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(1706,'getPropertyDescriptors()','org.jhotdraw.draw.DefaultDrawingViewBeanInfo.getPropertyDescriptors()','156','org.jhotdraw.draw.DefaultDrawingViewBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return DefaultDrawingViewBeanInfo.getPdescriptor();\r\n}'),(1707,'-init-()','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.-init-()','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultDrawingViewTransferHandler() {\r\n}'),(1708,'-init-(java.awt.datatransfer.Transferable,java.awt.Point)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.-init-(java.awt.datatransfer.Transferable,java.awt.Point)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','public DragHandler(Transferable t, Point imageOffset) {\r\n    transferable = t;\r\n    this.imageOffset = imageOffset;\r\n}'),(1709,'-init-(java.awt.dnd.DragGestureListener)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.-init-(java.awt.dnd.DragGestureListener)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','SwingDragGestureRecognizer(DragGestureListener dgl) {\r\n    super(DragSource.getDefaultDragSource(), null, TransferHandler.NONE, dgl);\r\n}'),(1710,'canImport(javax.swing.JComponent,java.awt.datatransfer.DataFlavor[])','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.canImport(javax.swing.JComponent,java.awt.datatransfer.DataFlavor[])','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\npublic boolean canImport(JComponent comp, DataFlavor[] transferFlavors) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println((((this) + \".canImport \") + (Arrays.asList(transferFlavors))));\r\n    }\r\n    boolean retValue;\r\n    if (comp instanceof DrawingView) {\r\n        DrawingView view = ((DrawingView) (comp));\r\n        Drawing drawing = view.getDrawing();\r\n        // Search for a suitable input format\r\n        retValue = false;\r\n        SearchLoop : for (InputFormat format : drawing.getInputFormats()) {\r\n            for (DataFlavor flavor : transferFlavors) {\r\n                if ((flavor.isFlavorJavaFileListType()) || (format.isDataFlavorSupported(flavor))) {\r\n                    retValue = true;\r\n                    break SearchLoop;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        retValue = super.canImport(comp, transferFlavors);\r\n    }\r\n    return retValue;\r\n}'),(1711,'createTransferable(javax.swing.JComponent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.createTransferable(javax.swing.JComponent)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\nprotected Transferable createTransferable(JComponent c) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".createTransferable\"));\r\n    }\r\n    Transferable retValue;\r\n    if (c instanceof DrawingView) {\r\n        DrawingView view = ((DrawingView) (c));\r\n        retValue = createTransferable(view, view.getSelectedFigures());\r\n    } else {\r\n        retValue = super.createTransferable(c);\r\n    }\r\n    return retValue;\r\n}'),(1712,'createTransferable(org.jhotdraw.draw.DrawingView,java.util.Set)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.createTransferable(org.jhotdraw.draw.DrawingView,java.util.Set)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','protected Transferable createTransferable(DrawingView view, Set<Figure> transferFigures) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".createTransferable\"));\r\n    }\r\n    Transferable retValue;\r\n    Drawing drawing = view.getDrawing();\r\n    if (((drawing.getOutputFormats()) == null) || ((drawing.getOutputFormats().size()) == 0)) {\r\n        retValue = null;\r\n    } else {\r\n        List<Figure> toBeCopied = drawing.sort(transferFigures);\r\n        if ((toBeCopied.size()) > 0) {\r\n            try {\r\n                CompositeTransferable transfer = new CompositeTransferable();\r\n                for (OutputFormat format : drawing.getOutputFormats()) {\r\n                    Transferable t = format.createTransferable(drawing, toBeCopied, view.getScaleFactor());\r\n                    if (!(transfer.isDataFlavorSupported(t.getTransferDataFlavors()[0]))) {\r\n                        transfer.add(t);\r\n                    }\r\n                }\r\n                retValue = transfer;\r\n            } catch (IOException e) {\r\n                if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                    e.printStackTrace();\r\n                }\r\n                retValue = null;\r\n            }\r\n        } else {\r\n            retValue = null;\r\n        }\r\n    }\r\n    return retValue;\r\n}'),(1713,'exportAsDrag(javax.swing.JComponent,java.awt.event.InputEvent,int)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.exportAsDrag(javax.swing.JComponent,java.awt.event.InputEvent,int)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\npublic void exportAsDrag(JComponent comp, InputEvent e, int action) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".exportAsDrag\"));\r\n    }\r\n    if (comp instanceof DrawingView) {\r\n        DrawingView view = ((DrawingView) (comp));\r\n        HashSet<Figure> transferFigures = new HashSet<Figure>();\r\n        exportedFigures = transferFigures;\r\n        MouseEvent me = ((MouseEvent) (e));\r\n        Figure f = view.findFigure(me.getPoint());\r\n        if (view.getSelectedFigures().contains(f)) {\r\n            transferFigures.addAll(view.getSelectedFigures());\r\n        } else {\r\n            transferFigures.add(f);\r\n        }\r\n        Rectangle2D.Double drawingArea = null;\r\n        for (Figure fig : transferFigures) {\r\n            if (drawingArea == null) {\r\n                drawingArea = fig.getDrawingArea();\r\n            } else {\r\n                drawingArea.add(fig.getDrawingArea());\r\n            }\r\n        }\r\n        Rectangle viewArea = view.drawingToView(drawingArea);\r\n        Point imageOffset = me.getPoint();\r\n        imageOffset.x = (viewArea.x) - (imageOffset.x);\r\n        imageOffset.y = (viewArea.y) - (imageOffset.y);\r\n        int srcActions = getSourceActions(comp);\r\n        DefaultDrawingViewTransferHandler.SwingDragGestureRecognizer recognizer = new DefaultDrawingViewTransferHandler.SwingDragGestureRecognizer(new DefaultDrawingViewTransferHandler.DragHandler(createTransferable(view, transferFigures), imageOffset));\r\n        recognizer.gestured(comp, me, srcActions, action);\r\n        // XXX - What kind of drag gesture can we support for this??\r\n    } else {\r\n        super.exportAsDrag(comp, e, action);\r\n    }\r\n}'),(1714,'exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,int)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,int)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\nprotected void exportDone(JComponent source, Transferable data, int action) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println((((((this) + \".exportDone \") + action) + \" move=\") + (TransferHandler.MOVE)));\r\n    }\r\n    if (source instanceof DrawingView) {\r\n        final DrawingView view = ((DrawingView) (source));\r\n        final Drawing drawing = view.getDrawing();\r\n        if (action == (TransferHandler.MOVE)) {\r\n            final LinkedList<CompositeFigureEvent> deletionEvents = new LinkedList<CompositeFigureEvent>();\r\n            // final LinkedList<Figure> selectedFigures = new LinkedList<Figure>(view.getSelectedFigures());\r\n            final LinkedList<Figure> selectedFigures = new LinkedList<Figure>(exportedFigures);\r\n            // Abort, if not all of the selected figures may be removed from the\r\n            // drawing\r\n            for (Figure f : selectedFigures) {\r\n                if (!(f.isRemovable())) {\r\n                    source.getToolkit().beep();\r\n                    return;\r\n                }\r\n            }\r\n            // view.clearSelection();\r\n            CompositeFigureListener removeListener = new CompositeFigureListener() {\r\n                public void areaInvalidated(CompositeFigureEvent e) {\r\n                }\r\n\r\n                public void figureAdded(CompositeFigureEvent e) {\r\n                }\r\n\r\n                public void figureRemoved(CompositeFigureEvent evt) {\r\n                    deletionEvents.addFirst(evt);\r\n                }\r\n            };\r\n            drawing.addCompositeFigureListener(removeListener);\r\n            drawing.removeAll(selectedFigures);\r\n            drawing.removeCompositeFigureListener(removeListener);\r\n            drawing.removeAll(selectedFigures);\r\n            drawing.fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.delete.text\");\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    view.clearSelection();\r\n                    for (CompositeFigureEvent evt : deletionEvents) {\r\n                        drawing.add(evt.getIndex(), evt.getChildFigure());\r\n                    }\r\n                    view.addToSelection(selectedFigures);\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    for (CompositeFigureEvent evt : new ReversedList<CompositeFigureEvent>(deletionEvents)) {\r\n                        drawing.remove(evt.getChildFigure());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    } else {\r\n        super.exportDone(source, data, action);\r\n    }\r\n    exportedFigures = null;\r\n}'),(1715,'getDrawing()','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.getDrawing()','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','private void getDrawing() {\r\n    throw new UnsupportedOperationException(\"Not yet implemented\");\r\n}'),(1716,'getSourceActions(javax.swing.JComponent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.getSourceActions(javax.swing.JComponent)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\npublic int getSourceActions(JComponent c) {\r\n    int retValue;\r\n    if (c instanceof DrawingView) {\r\n        DrawingView view = ((DrawingView) (c));\r\n        if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n            System.out.println((((this) + \".getSourceActions outputFormats.size=\") + (view.getDrawing().getOutputFormats().size())));\r\n        }\r\n        retValue = (((view.getDrawing().getOutputFormats().size()) > 0) && ((view.getSelectionCount()) > 0)) ? (TransferHandler.COPY) | (TransferHandler.MOVE) : TransferHandler.NONE;\r\n    } else {\r\n        retValue = super.getSourceActions(c);\r\n    }\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println((((this) + \".getSourceActions:\") + retValue));\r\n    }\r\n    return retValue;\r\n}'),(1717,'getVisualRepresentation(java.awt.datatransfer.Transferable)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.getVisualRepresentation(java.awt.datatransfer.Transferable)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\npublic Icon getVisualRepresentation(Transferable t) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".getVisualRepresentation\"));\r\n    }\r\n    Image image = null;\r\n    try {\r\n        image = ((Image) (t.getTransferData(DataFlavor.imageFlavor)));\r\n    } catch (IOException ex) {\r\n        if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n            ex.printStackTrace();\r\n        }\r\n    } catch (UnsupportedFlavorException ex) {\r\n        if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    return image == null ? null : new ImageIcon(image);\r\n}'),(1718,'importData(javax.swing.JComponent,java.awt.datatransfer.Transferable)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.importData(javax.swing.JComponent,java.awt.datatransfer.Transferable)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','@Override\r\npublic boolean importData(JComponent comp, Transferable t) {\r\n    return importData(comp, t, new HashSet<Figure>());\r\n}'),(1719,'importData(javax.swing.JComponent,java.awt.datatransfer.Transferable,java.util.HashSet)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler.importData(javax.swing.JComponent,java.awt.datatransfer.Transferable,java.util.HashSet)','159','org.jhotdraw.draw.DefaultDrawingViewTransferHandler','/**\r\n * Imports data and stores the transferred figures into the supplied transferFigures collection.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected boolean importData(JComponent comp, Transferable t, HashSet<Figure> transferFigures) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".importData(comp,t)\"));\r\n    }\r\n    boolean retValue;\r\n    if (comp instanceof DrawingView) {\r\n        final DrawingView view = ((DrawingView) (comp));\r\n        final Drawing drawing = view.getDrawing();\r\n        if (((drawing.getInputFormats()) == null) || ((drawing.getInputFormats().size()) == 0)) {\r\n            if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                System.out.println(((this) + \".importData failed - drawing has no import formats\"));\r\n            }\r\n            retValue = false;\r\n        } else {\r\n            retValue = false;\r\n            try {\r\n                // Search for a suitable input format\r\n                SearchLoop : for (InputFormat format : drawing.getInputFormats()) {\r\n                    for (DataFlavor flavor : t.getTransferDataFlavors()) {\r\n                        if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                            System.out.println((((((this) + \".importData trying to match \") + format) + \" to flavor \") + flavor));\r\n                        }\r\n                        if (format.isDataFlavorSupported(flavor)) {\r\n                            if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                                System.out.println((((this) + \".importData importing flavor \") + flavor));\r\n                            }\r\n                            LinkedList<Figure> existingFigures = new LinkedList<Figure>(drawing.getChildren());\r\n                            format.read(t, drawing, false);\r\n                            final LinkedList<Figure> importedFigures = new LinkedList<Figure>(drawing.getChildren());\r\n                            importedFigures.removeAll(existingFigures);\r\n                            view.clearSelection();\r\n                            view.addToSelection(importedFigures);\r\n                            transferFigures.addAll(importedFigures);\r\n                            drawing.fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                                public String getPresentationName() {\r\n                                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                                    return labels.getString(\"edit.paste.text\");\r\n                                }\r\n\r\n                                public void undo() throws CannotUndoException {\r\n                                    super.undo();\r\n                                    drawing.removeAll(importedFigures);\r\n                                }\r\n\r\n                                public void redo() throws CannotRedoException {\r\n                                    super.redo();\r\n                                    drawing.addAll(importedFigures);\r\n                                }\r\n                            });\r\n                            retValue = true;\r\n                            break SearchLoop;\r\n                        }\r\n                    }\r\n                }\r\n                // No input format found? Lets see if we got files - we\r\n                // can handle these\r\n                if ((retValue == false) && (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor))) {\r\n                    final List<File> files = ((List<File>) (t.getTransferData(DataFlavor.javaFileListFlavor)));\r\n                    retValue = true;\r\n                    final LinkedList<Figure> existingFigures = new LinkedList<Figure>(drawing.getChildren());\r\n                    view.getEditor().setEnabled(false);\r\n                    // FIXME - We should perform the following code in a\r\n                    // worker thread.\r\n                    new Worker() {\r\n                        @Override\r\n                        public Object construct() {\r\n                            try {\r\n                                for (File file : files) {\r\n                                    FileFormatLoop : for (InputFormat format : drawing.getInputFormats()) {\r\n                                        if ((file.isFile()) && (format.getFileFilter().accept(file))) {\r\n                                            if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                                                System.out.println((((this) + \".importData importing file \") + file));\r\n                                            }\r\n                                            format.read(file, drawing, false);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                return new LinkedList<Figure>(drawing.getChildren());\r\n                            } catch (Throwable t) {\r\n                                return t;\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void finished(Object value) {\r\n                            if (value instanceof Throwable) {\r\n                                ((Throwable) (value)).printStackTrace();\r\n                            } else {\r\n                                final LinkedList<Figure> importedFigures = ((LinkedList<Figure>) (value));\r\n                                importedFigures.removeAll(existingFigures);\r\n                                if ((importedFigures.size()) > 0) {\r\n                                    view.clearSelection();\r\n                                    view.addToSelection(importedFigures);\r\n                                    drawing.fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                                        @Override\r\n                                        public String getPresentationName() {\r\n                                            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                                            return labels.getString(\"edit.paste.text\");\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void undo() throws CannotUndoException {\r\n                                            super.undo();\r\n                                            drawing.removeAll(importedFigures);\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void redo() throws CannotRedoException {\r\n                                            super.redo();\r\n                                            drawing.addAll(importedFigures);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                            view.getEditor().setEnabled(true);\r\n                        }\r\n                    }.start();\r\n                }\r\n            } catch (Throwable e) {\r\n                if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        retValue = super.importData(comp, t);\r\n    }\r\n    return retValue;\r\n}'),(1720,'-init-(java.awt.datatransfer.Transferable,java.awt.Point)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.-init-(java.awt.datatransfer.Transferable,java.awt.Point)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','public DragHandler(Transferable t, Point imageOffset) {\r\n    transferable = t;\r\n    this.imageOffset = imageOffset;\r\n}'),(1721,'dragDropEnd(java.awt.dnd.DragSourceDropEvent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.dragDropEnd(java.awt.dnd.DragSourceDropEvent)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','/**\r\n * as the operation completes\r\n */\r\npublic void dragDropEnd(DragSourceDropEvent dsde) {\r\n    DragSourceContext dsc = dsde.getDragSourceContext();\r\n    JComponent c = ((JComponent) (dsc.getComponent()));\r\n    DefaultDrawingViewTransferHandler th = ((DefaultDrawingViewTransferHandler) (c.getTransferHandler()));\r\n    if (dsde.getDropSuccess()) {\r\n        th.exportDone(c, dsc.getTransferable(), dsde.getDropAction());\r\n    } else {\r\n        th.exportDone(c, dsc.getTransferable(), TransferHandler.NONE);\r\n    }\r\n    c.setAutoscrolls(scrolls);\r\n}'),(1722,'dragEnter(java.awt.dnd.DragSourceDragEvent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.dragEnter(java.awt.dnd.DragSourceDragEvent)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','// --- DragSourceListener methods -----------------------------------\r\n/**\r\n * as the hotspot enters a platform dependent drop site\r\n */\r\npublic void dragEnter(DragSourceDragEvent dsde) {\r\n}'),(1723,'dragExit(java.awt.dnd.DragSourceEvent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.dragExit(java.awt.dnd.DragSourceEvent)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','/**\r\n * as the hotspot exits a platform dependent drop site\r\n */\r\npublic void dragExit(DragSourceEvent dsde) {\r\n}'),(1724,'dragGestureRecognized(java.awt.dnd.DragGestureEvent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.dragGestureRecognized(java.awt.dnd.DragGestureEvent)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','// --- DragGestureListener methods -----------------------------------\r\n/**\r\n * a Drag gesture has been recognized\r\n */\r\npublic void dragGestureRecognized(DragGestureEvent dge) {\r\n    JComponent c = ((JComponent) (dge.getComponent()));\r\n    DefaultDrawingViewTransferHandler th = ((DefaultDrawingViewTransferHandler) (c.getTransferHandler()));\r\n    Transferable t = transferable;\r\n    if (t != null) {\r\n        scrolls = c.getAutoscrolls();\r\n        c.setAutoscrolls(false);\r\n        try {\r\n            // dge.startDrag(null, t, this);\r\n            Icon icon = th.getVisualRepresentation(t);\r\n            Image dragImage;\r\n            if (icon instanceof ImageIcon) {\r\n                dragImage = ((ImageIcon) (icon)).getImage();\r\n            } else {\r\n                dragImage = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics g = ((BufferedImage) (dragImage)).createGraphics();\r\n                icon.paintIcon(c, g, 0, 0);\r\n                g.dispose();\r\n            }\r\n            dge.startDrag(null, dragImage, imageOffset, t, this);\r\n            return;\r\n        } catch (RuntimeException re) {\r\n            c.setAutoscrolls(scrolls);\r\n        }\r\n    }\r\n    th.exportDone(c, t, TransferHandler.NONE);\r\n}'),(1725,'dragOver(java.awt.dnd.DragSourceDragEvent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.dragOver(java.awt.dnd.DragSourceDragEvent)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','/**\r\n * as the hotspot moves over a platform dependent drop site\r\n */\r\npublic void dragOver(DragSourceDragEvent dsde) {\r\n}'),(1726,'dropActionChanged(java.awt.dnd.DragSourceDragEvent)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler.dropActionChanged(java.awt.dnd.DragSourceDragEvent)','157','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler','public void dropActionChanged(DragSourceDragEvent dsde) {\r\n}'),(1727,'-init-(java.awt.dnd.DragGestureListener)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer.-init-(java.awt.dnd.DragGestureListener)','158','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer','SwingDragGestureRecognizer(DragGestureListener dgl) {\r\n    super(DragSource.getDefaultDragSource(), null, TransferHandler.NONE, dgl);\r\n}'),(1728,'gestured(javax.swing.JComponent,java.awt.event.MouseEvent,int,int)','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer.gestured(javax.swing.JComponent,java.awt.event.MouseEvent,int,int)','158','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer','void gestured(JComponent c, MouseEvent e, int srcActions, int action) {\r\n    setComponent(c);\r\n    setSourceActions(srcActions);\r\n    appendEvent(e);\r\n    fireDragGestureRecognized(action, e.getPoint());\r\n}'),(1729,'registerListeners()','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer.registerListeners()','158','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer','/**\r\n * register this DragGestureRecognizers Listeners with the Component\r\n */\r\nprotected void registerListeners() {\r\n}'),(1730,'unregisterListeners()','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer.unregisterListeners()','158','org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer','/**\r\n * unregister this DragGestureRecognizers Listeners with the Component\r\n *\r\n * subclasses must override this method\r\n */\r\nprotected void unregisterListeners() {\r\n}'),(1731,'-init-(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.DefaultHandleTracker.-init-(org.jhotdraw.draw.Handle)','160','org.jhotdraw.draw.DefaultHandleTracker','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultHandleTracker(Handle handle) {\r\n    masterHandle = handle;\r\n    multicaster = new HandleMulticaster(handle);\r\n}'),(1732,'-init-(org.jhotdraw.draw.Handle,java.util.Collection)','org.jhotdraw.draw.DefaultHandleTracker.-init-(org.jhotdraw.draw.Handle,java.util.Collection)','160','org.jhotdraw.draw.DefaultHandleTracker','public DefaultHandleTracker(Handle master, Collection<Handle> handles) {\r\n    masterHandle = master;\r\n    multicaster = new HandleMulticaster(handles);\r\n}'),(1733,'-init-()','org.jhotdraw.draw.DefaultHandleTracker.-init-()','160','org.jhotdraw.draw.DefaultHandleTracker','public DefaultHandleTracker() {\r\n}'),(1734,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DefaultHandleTracker.activate(org.jhotdraw.draw.DrawingEditor)','160','org.jhotdraw.draw.DefaultHandleTracker','/* FIXME - The handle should draw itself in selected mode\npublic void draw(Graphics2D g) {\ng.setColor(Color.RED);\ng.draw(\nmasterHandle.getBounds()\n);\n}\n */\r\n@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().setCursor(masterHandle.getCursor());\r\n    getView().setActiveHandle(masterHandle);\r\n    clearHoverHandles();\r\n}'),(1735,'clearHoverHandles()','org.jhotdraw.draw.DefaultHandleTracker.clearHoverHandles()','160','org.jhotdraw.draw.DefaultHandleTracker','protected void clearHoverHandles() {\r\n    updateHoverHandles(null, null);\r\n}'),(1736,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DefaultHandleTracker.deactivate(org.jhotdraw.draw.DrawingEditor)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    getView().setCursor(Cursor.getDefaultCursor());\r\n    getView().setActiveHandle(null);\r\n    clearHoverHandles();\r\n}'),(1737,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultHandleTracker.draw(java.awt.Graphics2D)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void draw(Graphics2D g) {\r\n    if (((hoverHandles.size()) > 0) && (!(getView().isFigureSelected(hoverFigure)))) {\r\n        for (Handle h : hoverHandles) {\r\n            h.draw(g);\r\n        }\r\n    }\r\n}'),(1738,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.DefaultHandleTracker.keyPressed(java.awt.event.KeyEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    multicaster.keyPressed(evt);\r\n    if (!(evt.isConsumed())) {\r\n        super.keyPressed(evt);\r\n    }\r\n}'),(1739,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.DefaultHandleTracker.keyReleased(java.awt.event.KeyEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void keyReleased(KeyEvent evt) {\r\n    multicaster.keyReleased(evt);\r\n}'),(1740,'keyTyped(java.awt.event.KeyEvent)','org.jhotdraw.draw.DefaultHandleTracker.keyTyped(java.awt.event.KeyEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void keyTyped(KeyEvent evt) {\r\n    multicaster.keyTyped(evt);\r\n}'),(1741,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mouseClicked(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void mouseClicked(MouseEvent evt) {\r\n    if ((evt.getClickCount()) == 2) {\r\n        multicaster.trackDoubleClick(new Point(evt.getX(), evt.getY()), evt.getModifiersEx(), getView());\r\n    }\r\n    evt.consume();\r\n}'),(1742,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mouseDragged(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','public void mouseDragged(MouseEvent evt) {\r\n    multicaster.trackStep(anchor, new Point(evt.getX(), evt.getY()), evt.getModifiersEx(), getView());\r\n    clearHoverHandles();\r\n}'),(1743,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mouseEntered(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void mouseEntered(MouseEvent evt) {\r\n}'),(1744,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mouseExited(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void mouseExited(MouseEvent evt) {\r\n    DrawingView view = editor.findView(((Container) (evt.getSource())));\r\n    updateHoverHandles(view, null);\r\n}'),(1745,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mouseMoved(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void mouseMoved(MouseEvent evt) {\r\n    Point point = evt.getPoint();\r\n    updateCursor(editor.findView(((Container) (evt.getSource()))), point);\r\n    DrawingView view = editor.findView(((Container) (evt.getSource())));\r\n    updateCursor(view, point);\r\n    if ((view == null) || ((editor.getActiveView()) != view)) {\r\n        clearHoverHandles();\r\n    } else {\r\n        // Search first, if one of the selected figures contains\r\n        // the current mouse location. Only then search for other\r\n        // figures. This search sequence is consistent with the\r\n        // search sequence of the SelectionTool.\r\n        Figure figure = null;\r\n        Point2D.Double p = view.viewToDrawing(point);\r\n        for (Figure f : view.getSelectedFigures()) {\r\n            if (f.contains(p)) {\r\n                figure = f;\r\n            }\r\n        }\r\n        if (figure == null) {\r\n            figure = view.findFigure(point);\r\n            Drawing drawing = view.getDrawing();\r\n            while ((figure != null) && (!(figure.isSelectable()))) {\r\n                figure = drawing.findFigureBehind(p, figure);\r\n            } \r\n        }\r\n        updateHoverHandles(view, figure);\r\n    }\r\n}'),(1746,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mousePressed(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void mousePressed(MouseEvent evt) {\r\n    // handle.mousePressed(evt);\r\n    anchor = new Point(evt.getX(), evt.getY());\r\n    multicaster.trackStart(anchor, evt.getModifiersEx(), getView());\r\n    clearHoverHandles();\r\n}'),(1747,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultHandleTracker.mouseReleased(java.awt.event.MouseEvent)','160','org.jhotdraw.draw.DefaultHandleTracker','@Override\r\npublic void mouseReleased(MouseEvent evt) {\r\n    multicaster.trackEnd(anchor, new Point(evt.getX(), evt.getY()), evt.getModifiersEx(), getView());\r\n    fireToolDone();\r\n}'),(1748,'setHandles(org.jhotdraw.draw.Handle,java.util.Collection)','org.jhotdraw.draw.DefaultHandleTracker.setHandles(org.jhotdraw.draw.Handle,java.util.Collection)','160','org.jhotdraw.draw.DefaultHandleTracker','public void setHandles(Handle handle, Collection<Handle> compatibleHandles) {\r\n    masterHandle = handle;\r\n    multicaster = new HandleMulticaster(handle);\r\n}'),(1749,'updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultHandleTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)','160','org.jhotdraw.draw.DefaultHandleTracker','protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if (((hoverFigure) != null) && (hoverFigure.isSelectable())) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if ((hoverFigure) != null) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}'),(1750,'-init-()','org.jhotdraw.draw.DefaultSelectAreaTracker.-init-()','161','org.jhotdraw.draw.DefaultSelectAreaTracker','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultSelectAreaTracker() {\r\n}'),(1751,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DefaultSelectAreaTracker.activate(org.jhotdraw.draw.DrawingEditor)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    clearHoverHandles();\r\n}'),(1752,'clearHoverHandles()','org.jhotdraw.draw.DefaultSelectAreaTracker.clearHoverHandles()','161','org.jhotdraw.draw.DefaultSelectAreaTracker','protected void clearHoverHandles() {\r\n    updateHoverHandles(null, null);\r\n}'),(1753,'clearRubberBand()','org.jhotdraw.draw.DefaultSelectAreaTracker.clearRubberBand()','161','org.jhotdraw.draw.DefaultSelectAreaTracker','private void clearRubberBand() {\r\n    if (!(rubberband.isEmpty())) {\r\n        fireAreaInvalidated(rubberband);\r\n        rubberband.width = -1;\r\n    }\r\n}'),(1754,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DefaultSelectAreaTracker.deactivate(org.jhotdraw.draw.DrawingEditor)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    clearHoverHandles();\r\n}'),(1755,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.DefaultSelectAreaTracker.draw(java.awt.Graphics2D)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void draw(Graphics2D g) {\r\n    g.setStroke(rubberbandStroke);\r\n    g.setColor(rubberbandColor);\r\n    g.drawRect(rubberband.x, rubberband.y, ((rubberband.width) - 1), ((rubberband.height) - 1));\r\n    if (((hoverHandles.size()) > 0) && (!(getView().isFigureSelected(hoverFigure)))) {\r\n        for (Handle h : hoverHandles) {\r\n            h.draw(g);\r\n        }\r\n    }\r\n}'),(1756,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultSelectAreaTracker.mouseDragged(java.awt.event.MouseEvent)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','public void mouseDragged(MouseEvent evt) {\r\n    Rectangle invalidatedArea = ((Rectangle) (rubberband.clone()));\r\n    rubberband.setBounds(Math.min(anchor.x, evt.getX()), Math.min(anchor.y, evt.getY()), Math.abs(((anchor.x) - (evt.getX()))), Math.abs(((anchor.y) - (evt.getY()))));\r\n    if (invalidatedArea.isEmpty()) {\r\n        invalidatedArea = ((Rectangle) (rubberband.clone()));\r\n    } else {\r\n        invalidatedArea = invalidatedArea.union(rubberband);\r\n    }\r\n    fireAreaInvalidated(invalidatedArea);\r\n}'),(1757,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultSelectAreaTracker.mouseExited(java.awt.event.MouseEvent)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void mouseExited(MouseEvent evt) {\r\n    DrawingView view = editor.findView(((Container) (evt.getSource())));\r\n    updateHoverHandles(view, null);\r\n}'),(1758,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultSelectAreaTracker.mouseMoved(java.awt.event.MouseEvent)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void mouseMoved(MouseEvent evt) {\r\n    clearRubberBand();\r\n    Point point = evt.getPoint();\r\n    DrawingView view = editor.findView(((Container) (evt.getSource())));\r\n    updateCursor(view, point);\r\n    if ((view == null) || ((editor.getActiveView()) != view)) {\r\n        clearHoverHandles();\r\n    } else {\r\n        // Search first, if one of the selected figures contains\r\n        // the current mouse location, and is selectable.\r\n        // Only then search for other\r\n        // figures. This search sequence is consistent with the\r\n        // search sequence of the SelectionTool.\r\n        Figure figure = null;\r\n        Point2D.Double p = view.viewToDrawing(point);\r\n        for (Figure f : view.getSelectedFigures()) {\r\n            if (f.contains(p)) {\r\n                figure = f;\r\n            }\r\n        }\r\n        if (figure == null) {\r\n            figure = view.findFigure(point);\r\n            while ((figure != null) && (!(figure.isSelectable()))) {\r\n                figure = view.getDrawing().findFigureBehind(p, figure);\r\n            } \r\n        }\r\n        updateHoverHandles(view, figure);\r\n    }\r\n}'),(1759,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultSelectAreaTracker.mousePressed(java.awt.event.MouseEvent)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void mousePressed(MouseEvent evt) {\r\n    super.mousePressed(evt);\r\n    clearRubberBand();\r\n}'),(1760,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.DefaultSelectAreaTracker.mouseReleased(java.awt.event.MouseEvent)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','@Override\r\npublic void mouseReleased(MouseEvent evt) {\r\n    selectGroup(evt.isShiftDown());\r\n    clearRubberBand();\r\n}'),(1761,'selectGroup(boolean)','org.jhotdraw.draw.DefaultSelectAreaTracker.selectGroup(boolean)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','private void selectGroup(boolean toggle) {\r\n    Collection<Figure> figures = getView().findFiguresWithin(rubberband);\r\n    for (Figure f : figures) {\r\n        if (f.isSelectable()) {\r\n            getView().addToSelection(f);\r\n        }\r\n    }\r\n}'),(1762,'updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DefaultSelectAreaTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)','161','org.jhotdraw.draw.DefaultSelectAreaTracker','protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if ((hoverFigure) != null) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if (((hoverFigure) != null) && (f.isSelectable())) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}'),(1763,'-init-()','org.jhotdraw.draw.DelegationSelectionTool.-init-()','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * Creates a new instance.\r\n */\r\npublic DelegationSelectionTool() {\r\n    this(new LinkedList<javax.swing.Action>(), new LinkedList<javax.swing.Action>());\r\n}'),(1764,'-init-(java.util.Collection,java.util.Collection)','org.jhotdraw.draw.DelegationSelectionTool.-init-(java.util.Collection,java.util.Collection)','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * Creates a new instance.\r\n */\r\npublic DelegationSelectionTool(Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    this.drawingActions = drawingActions;\r\n    this.selectionActions = selectionActions;\r\n}'),(1765,'getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','@Override\r\npublic String getToolTipText(DrawingView view, MouseEvent evt) {\r\n    Handle handle = view.findHandle(evt.getPoint());\r\n    if (handle != null) {\r\n        return handle.getToolTipText(evt.getPoint());\r\n    }\r\n    Figure figure = view.findFigure(evt.getPoint());\r\n    if (figure != null) {\r\n        return figure.getToolTipText(viewToDrawing(evt.getPoint()));\r\n    }\r\n    return null;\r\n}'),(1766,'handleDoubleClick(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.handleDoubleClick(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * Hook method which can be overriden by subclasses to provide\r\n * specialised behaviour in the event of a double click.\r\n */\r\nprotected void handleDoubleClick(MouseEvent evt) {\r\n    if (DelegationSelectionTool.DEBUG) {\r\n        System.out.println((\"DelegationSelectionTool.handleDoubleClick \" + evt));\r\n    }\r\n    DrawingView v = getView();\r\n    Point pos = new Point(evt.getX(), evt.getY());\r\n    Handle handle = v.findHandle(pos);\r\n    if (handle != null) {\r\n        if (DelegationSelectionTool.DEBUG) {\r\n            System.out.println(\"DelegationSelectionTool.handleDoubleClick by handle\");\r\n        }\r\n        handle.trackDoubleClick(pos, evt.getModifiersEx());\r\n    } else {\r\n        Point2D.Double p = viewToDrawing(pos);\r\n        // Note: The search sequence used here, must be\r\n        // consistent with the search sequence used by the\r\n        // HandleTracker, the SelectAreaTracker and SelectionTool.\r\n        // If possible, continue to work with the current selection\r\n        Figure figure = null;\r\n        if (isSelectBehindEnabled()) {\r\n            for (Figure f : v.getSelectedFigures()) {\r\n                if (f.contains(p)) {\r\n                    figure = f;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // If the point is not contained in the current selection,\r\n        // search for a figure in the drawing.\r\n        if (figure == null) {\r\n            figure = v.findFigure(pos);\r\n        }\r\n        Figure outerFigure = figure;\r\n        if ((figure != null) && (figure.isSelectable())) {\r\n            if (DelegationSelectionTool.DEBUG) {\r\n                System.out.println(\"DelegationSelectionTool.handleDoubleClick by figure\");\r\n            }\r\n            Tool figureTool = figure.getTool(p);\r\n            if (figureTool == null) {\r\n                figure = getDrawing().findFigureInside(p);\r\n                if (figure != null) {\r\n                    figureTool = figure.getTool(p);\r\n                }\r\n            }\r\n            if (figureTool != null) {\r\n                setTracker(figureTool);\r\n                figureTool.mousePressed(evt);\r\n            } else {\r\n                if (outerFigure.handleMouseClick(p, evt, getView())) {\r\n                    v.clearSelection();\r\n                    v.addToSelection(outerFigure);\r\n                } else {\r\n                    v.clearSelection();\r\n                    v.addToSelection(outerFigure);\r\n                    v.setHandleDetailLevel(((v.getHandleDetailLevel()) + 1));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    evt.consume();\r\n}'),(1767,'handleMultiClick(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.handleMultiClick(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * Hook method which can be overriden by subclasses to provide\r\n * specialised behaviour in the event of a multi-click.\r\n */\r\nprotected void handleMultiClick(MouseEvent evt) {\r\n    if (DelegationSelectionTool.DEBUG) {\r\n        System.out.println((\"DelegationSelectionTool.handleMultiClick \" + evt));\r\n    }\r\n    DrawingView v = getView();\r\n    Point pos = new Point(evt.getX(), evt.getY());\r\n    Handle handle = v.findHandle(pos);\r\n    if (handle == null) {\r\n        v.setHandleDetailLevel(((v.getHandleDetailLevel()) + 1));\r\n    }\r\n}'),(1768,'handlePopupMenu(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.handlePopupMenu(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * Hook method which can be overriden by subclasses to provide\r\n * specialised behaviour in the event of a popup trigger.\r\n */\r\nprotected void handlePopupMenu(MouseEvent evt) {\r\n    Point p = new Point(evt.getX(), evt.getY());\r\n    Figure figure = getView().findFigure(p);\r\n    if ((figure != null) || ((drawingActions.size()) > 0)) {\r\n        showPopupMenu(figure, p, evt.getComponent());\r\n    } else {\r\n        popupMenu = null;\r\n    }\r\n}'),(1769,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.mouseClicked(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','public void mouseClicked(MouseEvent evt) {\r\n    if (DelegationSelectionTool.DEBUG) {\r\n        System.out.println((\"DelegationSelectionTool.mouseClicked \" + evt));\r\n    }\r\n    super.mouseClicked(evt);\r\n    if (!(evt.isConsumed())) {\r\n        if (((evt.getClickCount()) == 2) && ((evt.getButton()) == (MouseEvent.BUTTON1))) {\r\n            handleDoubleClick(evt);\r\n        } else\r\n            if ((((((((evt.getClickCount()) == 1) && ((evt.getModifiersEx()) == 0)) && ((lastClickEvent) != null)) && ((lastClickEvent.getClickCount()) == 1)) && ((lastClickEvent.getModifiersEx()) == 0)) && ((lastClickEvent.getX()) == (evt.getX()))) && ((lastClickEvent.getY()) == (evt.getY()))) {\r\n                handleMultiClick(evt);\r\n            }\r\n\r\n    }\r\n    lastClickEvent = evt;\r\n}'),(1770,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.mouseDragged(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','public void mouseDragged(MouseEvent evt) {\r\n    if ((popupTimer) != null) {\r\n        popupTimer.stop();\r\n        popupTimer = null;\r\n    }\r\n    if (((popupMenu) == null) || (!(popupMenu.isVisible()))) {\r\n        super.mouseDragged(evt);\r\n    }\r\n}'),(1771,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.mousePressed(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * MouseListener method for mousePressed events. If the popup trigger has\r\n * been activated, then the appropriate hook method is called.\r\n */\r\npublic void mousePressed(final MouseEvent evt) {\r\n    if ((popupTimer) != null) {\r\n        popupTimer.stop();\r\n        popupTimer = null;\r\n    }\r\n    // XXX - When we want to support multiple views, we have to\r\n    // implement this:\r\n    // setView((DrawingView)e.getSource());\r\n    isMousePressedPopupTrigger = evt.isPopupTrigger();\r\n    if (isMousePressedPopupTrigger) {\r\n        getView().requestFocus();\r\n        handlePopupMenu(evt);\r\n    } else {\r\n        super.mousePressed(evt);\r\n        popupTimer = new Timer(1000, new ActionListener() {\r\n            public void actionPerformed(ActionEvent aevt) {\r\n                handlePopupMenu(evt);\r\n                popupTimer = null;\r\n            }\r\n        });\r\n        popupTimer.setRepeats(false);\r\n        popupTimer.start();\r\n    }\r\n}'),(1772,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.DelegationSelectionTool.mouseReleased(java.awt.event.MouseEvent)','162','org.jhotdraw.draw.DelegationSelectionTool','/**\r\n * MouseListener method for mouseReleased events. If the popup trigger has\r\n * been activated, then the appropriate hook method is called.\r\n */\r\npublic void mouseReleased(MouseEvent evt) {\r\n    if ((popupTimer) != null) {\r\n        popupTimer.stop();\r\n        popupTimer = null;\r\n    }\r\n    if (isMousePressedPopupTrigger) {\r\n        isMousePressedPopupTrigger = false;\r\n    } else {\r\n        if (evt.isPopupTrigger()) {\r\n            handlePopupMenu(evt);\r\n        } else {\r\n            super.mouseReleased(evt);\r\n        }\r\n    }\r\n}'),(1773,'setDrawingActions(java.util.Collection)','org.jhotdraw.draw.DelegationSelectionTool.setDrawingActions(java.util.Collection)','162','org.jhotdraw.draw.DelegationSelectionTool','public void setDrawingActions(Collection<Action> drawingActions) {\r\n    this.drawingActions = drawingActions;\r\n}'),(1774,'setFigureActions(java.util.Collection)','org.jhotdraw.draw.DelegationSelectionTool.setFigureActions(java.util.Collection)','162','org.jhotdraw.draw.DelegationSelectionTool','public void setFigureActions(Collection<Action> selectionActions) {\r\n    this.selectionActions = selectionActions;\r\n}'),(1775,'showPopupMenu(org.jhotdraw.draw.Figure,java.awt.Point,java.awt.Component)','org.jhotdraw.draw.DelegationSelectionTool.showPopupMenu(org.jhotdraw.draw.Figure,java.awt.Point,java.awt.Component)','162','org.jhotdraw.draw.DelegationSelectionTool','protected void showPopupMenu(Figure figure, Point p, Component c) {\r\n    if (DelegationSelectionTool.DEBUG) {\r\n        System.out.println((\"DelegationSelectionTool.showPopupMenu \" + figure));\r\n    }\r\n    JPopupMenu menu = new JPopupMenu();\r\n    popupMenu = menu;\r\n    JMenu submenu = null;\r\n    String submenuName = null;\r\n    LinkedList<Action> popupActions = new LinkedList<Action>();\r\n    if (figure != null) {\r\n        LinkedList<Action> figureActions = new LinkedList<Action>(figure.getActions(viewToDrawing(p)));\r\n        if (((popupActions.size()) != 0) && ((figureActions.size()) != 0)) {\r\n            popupActions.add(null);\r\n        }\r\n        popupActions.addAll(figureActions);\r\n        if (((popupActions.size()) != 0) && ((selectionActions.size()) != 0)) {\r\n            popupActions.add(null);\r\n        }\r\n        popupActions.addAll(selectionActions);\r\n    }\r\n    if (((popupActions.size()) != 0) && ((drawingActions.size()) != 0)) {\r\n        popupActions.add(null);\r\n    }\r\n    popupActions.addAll(drawingActions);\r\n    HashMap<Object, ButtonGroup> buttonGroups = new HashMap<Object, ButtonGroup>();\r\n    for (Action a : popupActions) {\r\n        if ((a != null) && ((a.getValue(Actions.SUBMENU_KEY)) != null)) {\r\n            if ((submenuName == null) || (!(submenuName.equals(a.getValue(Actions.SUBMENU_KEY))))) {\r\n                submenuName = ((String) (a.getValue(Actions.SUBMENU_KEY)));\r\n                submenu = new JMenu(submenuName);\r\n                menu.add(submenu);\r\n            }\r\n        } else {\r\n            submenuName = null;\r\n            submenu = null;\r\n        }\r\n        if (a == null) {\r\n            if (submenu != null) {\r\n                submenu.addSeparator();\r\n            } else {\r\n                menu.addSeparator();\r\n            }\r\n        } else {\r\n            AbstractButton button;\r\n            if ((a.getValue(Actions.BUTTON_GROUP_KEY)) != null) {\r\n                ButtonGroup bg = buttonGroups.get(a.getValue(Actions.BUTTON_GROUP_KEY));\r\n                if (bg == null) {\r\n                    bg = new ButtonGroup();\r\n                    buttonGroups.put(a.getValue(Actions.BUTTON_GROUP_KEY), bg);\r\n                }\r\n                button = new JRadioButtonMenuItem(a);\r\n                bg.add(button);\r\n                button.setSelected(((a.getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)));\r\n            } else\r\n                if ((a.getValue(Actions.SELECTED_KEY)) != null) {\r\n                    button = new JCheckBoxMenuItem(a);\r\n                    button.setSelected(((a.getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)));\r\n                } else {\r\n                    button = new JMenuItem(a);\r\n                }\r\n\r\n            if (submenu != null) {\r\n                submenu.add(button);\r\n            } else {\r\n                menu.add(button);\r\n            }\r\n        }\r\n    }\r\n    menu.show(c, p.x, p.y);\r\n}'),(1776,'-init-()','org.jhotdraw.draw.DiamondFigure.-init-()','163','org.jhotdraw.draw.DiamondFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic DiamondFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(1777,'-init-(double,double,double,double)','org.jhotdraw.draw.DiamondFigure.-init-(double,double,double,double)','163','org.jhotdraw.draw.DiamondFigure','public DiamondFigure(double x, double y, double width, double height) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n    /* setFillColor(Color.white);\n    setStrokeColor(Color.black);\n     */\r\n}'),(1778,'clone()','org.jhotdraw.draw.DiamondFigure.clone()','163','org.jhotdraw.draw.DiamondFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic DiamondFigure clone() {\r\n    DiamondFigure that = ((DiamondFigure) (super.clone()));\r\n    that.rectangle = ((Rectangle2D.Double) (this.rectangle.clone()));\r\n    return that;\r\n}'),(1779,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.DiamondFigure.contains(java.awt.geom.Point2D$Double)','163','org.jhotdraw.draw.DiamondFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    if (DiamondFigure.IS_QUADRATIC.get(this)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    // if (r.contains(p)) {\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    double growx;\r\n    double growy;\r\n    if (grow == 0.0) {\r\n        growx = growy = 0.0;\r\n    } else {\r\n        double w = (r.width) / 2.0;\r\n        double h = (r.height) / 2.0;\r\n        double lineLength = Math.sqrt(((w * w) + (h * h)));\r\n        double scale = grow / lineLength;\r\n        double yb = scale * w;\r\n        double xa = scale * h;\r\n        growx = ((yb * yb) / xa) + xa;\r\n        growy = ((xa * xa) / yb) + yb;\r\n        Geom.grow(r, growx, growy);\r\n    }\r\n    GeneralPath diamond = new GeneralPath();\r\n    diamond.moveTo(((float) ((r.x) + ((r.width) / 2))), ((float) (r.y)));\r\n    diamond.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + ((r.height) / 2))));\r\n    diamond.lineTo(((float) ((r.x) + ((r.width) / 2))), ((float) ((r.y) + (r.height))));\r\n    diamond.lineTo(((float) (r.x)), ((float) ((r.y) + ((r.height) / 2))));\r\n    diamond.closePath();\r\n    return diamond.contains(p);\r\n}'),(1780,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.DiamondFigure.drawFill(java.awt.Graphics2D)','163','org.jhotdraw.draw.DiamondFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    if (DiamondFigure.IS_QUADRATIC.get(this)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    double growx;\r\n    double growy;\r\n    if (grow == 0.0) {\r\n        growx = growy = 0.0;\r\n    } else {\r\n        double w = (r.width) / 2.0;\r\n        double h = (r.height) / 2.0;\r\n        double lineLength = Math.sqrt(((w * w) + (h * h)));\r\n        double scale = grow / lineLength;\r\n        double yb = scale * w;\r\n        double xa = scale * h;\r\n        growx = ((yb * yb) / xa) + xa;\r\n        growy = ((xa * xa) / yb) + yb;\r\n        Geom.grow(r, growx, growy);\r\n    }\r\n    GeneralPath diamond = new GeneralPath();\r\n    diamond.moveTo(((float) ((r.x) + ((r.width) / 2))), ((float) (r.y)));\r\n    diamond.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + ((r.height) / 2))));\r\n    diamond.lineTo(((float) ((r.x) + ((r.width) / 2))), ((float) ((r.y) + (r.height))));\r\n    diamond.lineTo(((float) (r.x)), ((float) ((r.y) + ((r.height) / 2))));\r\n    diamond.closePath();\r\n    g.fill(diamond);\r\n}'),(1781,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.DiamondFigure.drawStroke(java.awt.Graphics2D)','163','org.jhotdraw.draw.DiamondFigure','protected void drawStroke(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    if (DiamondFigure.IS_QUADRATIC.get(this)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n    double growx;\r\n    double growy;\r\n    if (grow == 0.0) {\r\n        growx = growy = 0.0;\r\n    } else {\r\n        double w = (r.width) / 2.0;\r\n        double h = (r.height) / 2.0;\r\n        double lineLength = Math.sqrt(((w * w) + (h * h)));\r\n        double scale = grow / lineLength;\r\n        double yb = scale * w;\r\n        double xa = scale * h;\r\n        growx = ((yb * yb) / xa) + xa;\r\n        growy = ((xa * xa) / yb) + yb;\r\n        Geom.grow(r, growx, growy);\r\n    }\r\n    GeneralPath diamond = new GeneralPath();\r\n    diamond.moveTo(((float) ((r.x) + ((r.width) / 2))), ((float) (r.y)));\r\n    diamond.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + ((r.height) / 2))));\r\n    diamond.lineTo(((float) ((r.x) + ((r.width) / 2))), ((float) ((r.y) + (r.height))));\r\n    diamond.lineTo(((float) (r.x)), ((float) ((r.y) + ((r.height) / 2))));\r\n    diamond.closePath();\r\n    g.draw(diamond);\r\n}'),(1782,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.DiamondFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','163','org.jhotdraw.draw.DiamondFigure','public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopDiamondConnector(this);\r\n}'),(1783,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.DiamondFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','163','org.jhotdraw.draw.DiamondFigure','// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopDiamondConnector(this);\r\n}'),(1784,'getBounds()','org.jhotdraw.draw.DiamondFigure.getBounds()','163','org.jhotdraw.draw.DiamondFigure','// SHAPE AND BOUNDS\r\npublic Rectangle2D.Double getBounds() {\r\n    Rectangle2D.Double bounds = ((Rectangle2D.Double) (rectangle.clone()));\r\n    return bounds;\r\n}'),(1785,'getDrawingArea()','org.jhotdraw.draw.DiamondFigure.getDrawingArea()','163','org.jhotdraw.draw.DiamondFigure','public Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    if (DiamondFigure.IS_QUADRATIC.get(this)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    double growx;\r\n    double growy;\r\n    if (grow == 0.0) {\r\n        growx = growy = 0.0;\r\n    } else {\r\n        double w = (r.width) / 2.0;\r\n        double h = (r.height) / 2.0;\r\n        double lineLength = Math.sqrt(((w * w) + (h * h)));\r\n        double scale = grow / lineLength;\r\n        double yb = scale * w;\r\n        double xa = scale * h;\r\n        growx = ((yb * yb) / xa) + xa;\r\n        growy = ((xa * xa) / yb) + yb;\r\n        Geom.grow(r, growx, growy);\r\n    }\r\n    return r;\r\n}'),(1786,'getTransformRestoreData()','org.jhotdraw.draw.DiamondFigure.getTransformRestoreData()','163','org.jhotdraw.draw.DiamondFigure','public Object getTransformRestoreData() {\r\n    return rectangle.clone();\r\n}'),(1787,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.DiamondFigure.restoreTransformTo(java.lang.Object)','163','org.jhotdraw.draw.DiamondFigure','public void restoreTransformTo(Object geometry) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (geometry));\r\n    rectangle.x = r.x;\r\n    rectangle.y = r.y;\r\n    rectangle.width = r.width;\r\n    rectangle.height = r.height;\r\n}'),(1788,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.DiamondFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','163','org.jhotdraw.draw.DiamondFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    rectangle.x = Math.min(anchor.x, lead.x);\r\n    rectangle.y = Math.min(anchor.y, lead.y);\r\n    rectangle.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    rectangle.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(1789,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.DiamondFigure.transform(java.awt.geom.AffineTransform)','163','org.jhotdraw.draw.DiamondFigure','/**\r\n * Moves the Figure to a new location.\r\n *\r\n * @param tx\r\n * 		the transformation matrix.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(1790,'-init-()','org.jhotdraw.draw.DnDDrawingViewTransferHandler.-init-()','164','org.jhotdraw.draw.DnDDrawingViewTransferHandler','/**\r\n * Creates a new instance.\r\n */\r\npublic DnDDrawingViewTransferHandler() {\r\n}'),(1791,'importData(javax.swing.TransferHandler$TransferSupport)','org.jhotdraw.draw.DnDDrawingViewTransferHandler.importData(javax.swing.TransferHandler$TransferSupport)','164','org.jhotdraw.draw.DnDDrawingViewTransferHandler','@Override\r\npublic boolean importData(TransferHandler.TransferSupport support) {\r\n    if (DnDDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".importData(support)\"));\r\n    }\r\n    HashSet<Figure> transferFigures = new HashSet<Figure>();\r\n    boolean success = ((support.getComponent()) instanceof JComponent) ? importData(((JComponent) (support.getComponent())), support.getTransferable(), transferFigures) : false;\r\n    if (success) {\r\n        final DrawingView view = ((DrawingView) (support.getComponent()));\r\n        Point dropPoint = support.getDropLocation().getDropPoint();\r\n        Point2D.Double drawingDropPoint = view.viewToDrawing(dropPoint);\r\n        // Set<Figure> transferFigures = view.getSelectedFigures();\r\n        Rectangle2D.Double drawingArea = null;\r\n        for (Figure fig : transferFigures) {\r\n            if (drawingArea == null) {\r\n                drawingArea = fig.getDrawingArea();\r\n            } else {\r\n                drawingArea.add(fig.getDrawingArea());\r\n            }\r\n        }\r\n        AffineTransform t = new AffineTransform();\r\n        t.translate((-(drawingArea.x)), (-(drawingArea.y)));\r\n        t.translate(drawingDropPoint.x, drawingDropPoint.y);\r\n        // XXX - instead of centering, we have to translate by the drag image offset here\r\n        t.translate(((drawingArea.width) / (-2.0)), ((drawingArea.height) / (-2.0)));\r\n        for (Figure fig : transferFigures) {\r\n            fig.willChange();\r\n            fig.transform(t);\r\n            fig.changed();\r\n        }\r\n    }\r\n    return success;\r\n}'),(1792,'-init-()','org.jhotdraw.draw.DnDTracker.-init-()','165','org.jhotdraw.draw.DnDTracker','public DnDTracker() {\r\n}'),(1793,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DnDTracker.-init-(org.jhotdraw.draw.Figure)','165','org.jhotdraw.draw.DnDTracker','public DnDTracker(Figure figure) {\r\n    anchorFigure = figure;\r\n}'),(1794,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.DnDTracker.mouseDragged(java.awt.event.MouseEvent)','165','org.jhotdraw.draw.DnDTracker','public void mouseDragged(MouseEvent e) {\r\n    DrawingView v = getView();\r\n    Figure f = v.findFigure(e.getPoint());\r\n    if (f != null) {\r\n        if (!(v.getSelectedFigures().contains(f))) {\r\n            v.clearSelection();\r\n            v.addToSelection(f);\r\n        }\r\n        v.getComponent().getTransferHandler().exportAsDrag(v.getComponent(), e, DnDConstants.ACTION_MOVE);\r\n    }\r\n    fireToolDone();\r\n}'),(1795,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.DnDTracker.mouseMoved(java.awt.event.MouseEvent)','165','org.jhotdraw.draw.DnDTracker','@Override\r\npublic void mouseMoved(MouseEvent evt) {\r\n    updateCursor(editor.findView(((Container) (evt.getSource()))), evt.getPoint());\r\n}'),(1796,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.DnDTracker.mousePressed(java.awt.event.MouseEvent)','165','org.jhotdraw.draw.DnDTracker','@Override\r\npublic void mousePressed(MouseEvent evt) {\r\n    super.mousePressed(evt);\r\n    DrawingView view = getView();\r\n    if (evt.isShiftDown()) {\r\n        view.setHandleDetailLevel(0);\r\n        view.toggleSelection(anchorFigure);\r\n        if (!(view.isFigureSelected(anchorFigure))) {\r\n            anchorFigure = null;\r\n        }\r\n    } else\r\n        if (!(view.isFigureSelected(anchorFigure))) {\r\n            view.setHandleDetailLevel(0);\r\n            view.clearSelection();\r\n            view.addToSelection(anchorFigure);\r\n        }\r\n\r\n    if (!(view.getSelectedFigures().isEmpty())) {\r\n        dragRect = null;\r\n        for (Figure f : view.getSelectedFigures()) {\r\n            if ((dragRect) == null) {\r\n                dragRect = f.getBounds();\r\n            } else {\r\n                dragRect.add(f.getBounds());\r\n            }\r\n        }\r\n        anchorPoint = previousPoint = view.viewToDrawing(anchor);\r\n        anchorOrigin = previousOrigin = new Point2D.Double(dragRect.x, dragRect.y);\r\n    }\r\n}'),(1797,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.DnDTracker.mouseReleased(java.awt.event.MouseEvent)','165','org.jhotdraw.draw.DnDTracker','@Override\r\npublic void mouseReleased(MouseEvent evt) {\r\n    updateCursor(editor.findView(((Container) (evt.getSource()))), evt.getPoint());\r\n    fireToolDone();\r\n}'),(1798,'setDraggedFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DnDTracker.setDraggedFigure(org.jhotdraw.draw.Figure)','165','org.jhotdraw.draw.DnDTracker','public void setDraggedFigure(Figure f) {\r\n    anchorFigure = f;\r\n}'),(1799,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DragHandle.-init-(org.jhotdraw.draw.Figure)','166','org.jhotdraw.draw.DragHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic DragHandle(Figure owner) {\r\n    super(owner);\r\n}'),(1800,'basicGetBounds()','org.jhotdraw.draw.DragHandle.basicGetBounds()','166','org.jhotdraw.draw.DragHandle','protected Rectangle basicGetBounds() {\r\n    return getView().drawingToView(getOwner().getDrawingArea());\r\n}'),(1801,'contains(java.awt.Point)','org.jhotdraw.draw.DragHandle.contains(java.awt.Point)','166','org.jhotdraw.draw.DragHandle','public boolean contains(Point p) {\r\n    return getOwner().contains(getView().viewToDrawing(p));\r\n}'),(1802,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.DragHandle.draw(java.awt.Graphics2D)','166','org.jhotdraw.draw.DragHandle','/**\r\n * Draws nothing.\r\n * Drag Handles have no visual appearance of their own.\r\n */\r\npublic void draw(Graphics2D g) {\r\n}'),(1803,'getCursor()','org.jhotdraw.draw.DragHandle.getCursor()','166','org.jhotdraw.draw.DragHandle','/**\r\n * Returns a cursor for the handle.\r\n */\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\r\n}'),(1804,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.DragHandle.trackEnd(java.awt.Point,java.awt.Point,int)','166','org.jhotdraw.draw.DragHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    AffineTransform tx = new AffineTransform();\r\n    tx.translate(((lead.x) - (anchor.x)), ((lead.y) - (anchor.y)));\r\n    LinkedList<Figure> draggedFigures = new LinkedList<Figure>();\r\n    draggedFigures.add(getOwner());\r\n    Point2D.Double dropPoint = getView().viewToDrawing(lead);\r\n    Figure dropTarget = getView().getDrawing().findFigureExcept(dropPoint, draggedFigures);\r\n    if (dropTarget != null) {\r\n        boolean snapBack = dropTarget.handleDrop(dropPoint, draggedFigures, getView());\r\n        if (snapBack) {\r\n            tx = new AffineTransform();\r\n            tx.translate(((anchor.x) - (lead.x)), ((anchor.y) - (lead.y)));\r\n            for (Figure f : draggedFigures) {\r\n                f.willChange();\r\n                f.transform(tx);\r\n                f.changed();\r\n            }\r\n        } else {\r\n            fireUndoableEditHappened(new TransformEdit(getOwner(), tx));\r\n        }\r\n    } else {\r\n        fireUndoableEditHappened(new TransformEdit(getOwner(), tx));\r\n    }\r\n}'),(1805,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.DragHandle.trackStart(java.awt.Point,int)','166','org.jhotdraw.draw.DragHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    oldPoint = view.getConstrainer().constrainPoint(view.viewToDrawing(anchor));\r\n}'),(1806,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.DragHandle.trackStep(java.awt.Point,java.awt.Point,int)','166','org.jhotdraw.draw.DragHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    Figure f = getOwner();\r\n    Point2D.Double newPoint = view.getConstrainer().constrainPoint(view.viewToDrawing(lead));\r\n    AffineTransform tx = new AffineTransform();\r\n    tx.translate(((newPoint.x) - (oldPoint.x)), ((newPoint.y) - (oldPoint.y)));\r\n    f.willChange();\r\n    f.transform(tx);\r\n    f.changed();\r\n    oldPoint = newPoint;\r\n}'),(1807,'setDraggedFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DragTracker.setDraggedFigure(org.jhotdraw.draw.Figure)','167','org.jhotdraw.draw.DragTracker','public void setDraggedFigure(Figure f);'),(1808,'add(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.add(int,org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds a figure to the drawing.\r\n * The drawing sends an {@code addNotify} message to the figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param index\r\n * 		The z-index of the figure.\r\n * @param figure\r\n * 		to be added to the drawing\r\n */\r\nvoid add(int index, Figure figure);'),(1809,'add(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.add(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds a figure to the drawing.\r\n * The drawing sends an {@code addNotify} message to the figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param figure\r\n * 		to be added to the drawing\r\n */\r\nboolean add(Figure figure);'),(1810,'addAll(int,java.util.Collection)','org.jhotdraw.draw.Drawing.addAll(int,java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds a collection of figures to the drawing.\r\n * The drawing sends an {@code addNotify}  message to each figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param index\r\n * 		The z-index of the figure.\r\n * @param figures\r\n * 		to be added to the drawing\r\n */\r\nvoid addAll(int index, Collection<? extends Figure> figures);'),(1811,'addAll(java.util.Collection)','org.jhotdraw.draw.Drawing.addAll(java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds a collection of figures to the drawing.\r\n * The drawing sends an {@code addNotify}  message to each figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param figures\r\n * 		to be added to the drawing\r\n */\r\nvoid addAll(Collection<? extends Figure> figures);'),(1812,'addInputFormat(org.jhotdraw.draw.InputFormat)','org.jhotdraw.draw.Drawing.addInputFormat(org.jhotdraw.draw.InputFormat)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds an input format to the drawing.\r\n */\r\nvoid addInputFormat(InputFormat format);'),(1813,'addOutputFormat(org.jhotdraw.draw.OutputFormat)','org.jhotdraw.draw.Drawing.addOutputFormat(org.jhotdraw.draw.OutputFormat)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds an output format to the drawing.\r\n */\r\nvoid addOutputFormat(OutputFormat format);'),(1814,'addUndoableEditListener(javax.swing.event.UndoableEditListener)','org.jhotdraw.draw.Drawing.addUndoableEditListener(javax.swing.event.UndoableEditListener)','168','org.jhotdraw.draw.Drawing','/**\r\n * Adds a listener for undooable edit events.\r\n */\r\nvoid addUndoableEditListener(UndoableEditListener l);'),(1815,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.basicAdd(int,org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Reinserts a figure which was temporarily removed using basicRemove.\r\n *\r\n * @see #basicRemove(Figure)\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n */\r\nvoid basicAdd(int index, Figure figure);'),(1816,'basicAdd(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.basicAdd(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Reinserts a figure which was temporarily removed using basicRemove.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code basicAdd(size(), figure)}.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n * @see #basicRemove(Figure)\r\n */\r\nvoid basicAdd(Figure figure);'),(1817,'basicAddAll(int,java.util.Collection)','org.jhotdraw.draw.Drawing.basicAddAll(int,java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Reinserts the specified figures which were temporarily removed from\r\n * the drawing.\r\n *\r\n * @param index\r\n * 		The insertion index.\r\n * @param figures\r\n * 		A collection of figures which are part of the drawing\r\n * 		and should be reinserted.\r\n * @see #basicRemoveAll(Collection)\r\n */\r\nvoid basicAddAll(int index, Collection<? extends Figure> figures);'),(1818,'basicRemove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.basicRemove(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Removes a figure temporarily from the drawing.\r\n *\r\n * @see #basicAdd(Figure)\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n */\r\nint basicRemove(Figure figure);'),(1819,'basicRemoveAll(java.util.Collection)','org.jhotdraw.draw.Drawing.basicRemoveAll(java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Removes the specified figures temporarily from the drawing.\r\n *\r\n * @see #basicAddAll(int, Collection)\r\n * @param figures\r\n * 		A collection of figures which are part of the drawing\r\n * 		and should be removed\r\n */\r\nvoid basicRemoveAll(Collection<? extends Figure> figures);'),(1820,'bringToFront(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.bringToFront(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Brings a figure to the front.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing\r\n */\r\nvoid bringToFront(Figure figure);'),(1821,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.Drawing.draw(java.awt.Graphics2D)','168','org.jhotdraw.draw.Drawing','/**\r\n * Draws all the figures from back to front.\r\n */\r\nvoid draw(Graphics2D g);'),(1822,'findFigure(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Drawing.findFigure(java.awt.geom.Point2D$Double)','168','org.jhotdraw.draw.Drawing','/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigure(Point2D.Double p);'),(1823,'findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.Drawing.findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Finds a top level Figure which is behind the specified Figures.\r\n */\r\nFigure findFigureBehind(Point2D.Double p, Collection<? extends Figure> figures);'),(1824,'findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Finds a top level Figure which is behind the specified Figure.\r\n */\r\nFigure findFigureBehind(Point2D.Double p, Figure figure);'),(1825,'findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.Drawing.findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigureExcept(Point2D.Double p, Collection<? extends Figure> ignore);'),(1826,'findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigureExcept(Point2D.Double p, Figure ignore);'),(1827,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Drawing.findFigureInside(java.awt.geom.Point2D$Double)','168','org.jhotdraw.draw.Drawing','/**\r\n * Finds a figure but descends into a figures\r\n * children. Use this method to implement <i>click-through</i>\r\n * hit detection, that is, you want to detect the inner most\r\n * figure containing the given point.\r\n */\r\nFigure findFigureInside(Point2D.Double p);'),(1828,'findFigures(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.Drawing.findFigures(java.awt.geom.Rectangle2D$Double)','168','org.jhotdraw.draw.Drawing','/**\r\n * Draws only the figures in the supplied set.\r\n * /\r\n * void draw(Graphics2D g, ArrayList figures);\r\n */\r\n/**\r\n * Returns all figures that lie within or intersect the specified\r\n * bounds. The figures are returned in Z-order from back to front.\r\n */\r\nList<Figure> findFigures(Rectangle2D.Double bounds);'),(1829,'findFiguresWithin(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.Drawing.findFiguresWithin(java.awt.geom.Rectangle2D$Double)','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns all figures that lie within the specified\r\n * bounds. The figures are returned in Z-order from back to front.\r\n */\r\nList<Figure> findFiguresWithin(Rectangle2D.Double bounds);'),(1830,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.Drawing.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','168','org.jhotdraw.draw.Drawing','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nvoid fireUndoableEditHappened(UndoableEdit edit);'),(1831,'getChildCount()','org.jhotdraw.draw.Drawing.getChildCount()','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns the number of figures in this drawing.\r\n */\r\nint getChildCount();'),(1832,'getChildren()','org.jhotdraw.draw.Drawing.getChildren()','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns the figures of the drawing.\r\n *\r\n * @return A Collection of Figures.\r\n */\r\nList<Figure> getChildren();'),(1833,'getFiguresFrontToBack()','org.jhotdraw.draw.Drawing.getFiguresFrontToBack()','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns a list of the figures in Z-Order from front to back.\r\n */\r\nList<Figure> getFiguresFrontToBack();'),(1834,'getFontRenderContext()','org.jhotdraw.draw.Drawing.getFontRenderContext()','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns the font render context used to do text leyout and text drawing.\r\n */\r\nFontRenderContext getFontRenderContext();'),(1835,'getInputFormats()','org.jhotdraw.draw.Drawing.getInputFormats()','168','org.jhotdraw.draw.Drawing','/**\r\n * Gets input formats for the Drawing in order of preferred formats.\r\n */\r\nList<InputFormat> getInputFormats();'),(1836,'getLock()','org.jhotdraw.draw.Drawing.getLock()','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns the lock object on which all threads acting in Figures in this\r\n * drawing synchronize to prevent race conditions.\r\n */\r\nObject getLock();'),(1837,'getOutputFormats()','org.jhotdraw.draw.Drawing.getOutputFormats()','168','org.jhotdraw.draw.Drawing','/**\r\n * Gets output formats for the Drawing in order of preferred formats.\r\n */\r\nList<OutputFormat> getOutputFormats();'),(1838,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.indexOf(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns the index of the specified figure.\r\n *\r\n * Returns -1 if the Figure is not directly contained in this Drawing, for\r\n * example if the Figure is a child of a CompositeFigure.\r\n */\r\nint indexOf(Figure figure);'),(1839,'remove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.remove(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Removes a figure from the drawing.\r\n * The drawing sends a {@code removeNotify} message to the figure\r\n * before it is removed.\r\n *\r\n * @see Figure#removeNotify\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n */\r\nboolean remove(Figure figure);'),(1840,'removeAll(java.util.Collection)','org.jhotdraw.draw.Drawing.removeAll(java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Removes the specified figures from the drawing.\r\n * The drawing sends a {@code removeNotify}  message to each figure\r\n * before it is removed.\r\n *\r\n * @see Figure#removeNotify\r\n * @param figures\r\n * 		A collection of figures which are part of the drawing\r\n * 		and should be removed\r\n */\r\nvoid removeAll(Collection<? extends Figure> figures);'),(1841,'removeUndoableEditListener(javax.swing.event.UndoableEditListener)','org.jhotdraw.draw.Drawing.removeUndoableEditListener(javax.swing.event.UndoableEditListener)','168','org.jhotdraw.draw.Drawing','/**\r\n * Removes a listener for undoable edit events.\r\n */\r\nvoid removeUndoableEditListener(UndoableEditListener l);'),(1842,'sendToBack(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Drawing.sendToBack(org.jhotdraw.draw.Figure)','168','org.jhotdraw.draw.Drawing','/**\r\n * Sends a figure to the back of the drawing.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing\r\n */\r\nvoid sendToBack(Figure figure);'),(1843,'setFontRenderContext(java.awt.font.FontRenderContext)','org.jhotdraw.draw.Drawing.setFontRenderContext(java.awt.font.FontRenderContext)','168','org.jhotdraw.draw.Drawing','/**\r\n * Sets the font render context used to do text leyout and text drawing.\r\n */\r\nvoid setFontRenderContext(FontRenderContext frc);'),(1844,'setInputFormats(java.util.List)','org.jhotdraw.draw.Drawing.setInputFormats(java.util.List)','168','org.jhotdraw.draw.Drawing','/**\r\n * Sets input formats for the Drawing in order of preferred formats.\r\n * <p>\r\n * The input formats are used for loading the Drawing from a file and for\r\n * pasting Figures from the clipboard into the Drawing.\r\n */\r\nvoid setInputFormats(List<InputFormat> formats);'),(1845,'setOutputFormats(java.util.List)','org.jhotdraw.draw.Drawing.setOutputFormats(java.util.List)','168','org.jhotdraw.draw.Drawing','/**\r\n * Sets output formats for the Drawing in order of preferred formats.\r\n * <p>\r\n * The output formats are used for saving the Drawing into a file and for\r\n * cutting and copying Figures from the Drawing into the clipboard.\r\n */\r\nvoid setOutputFormats(List<OutputFormat> formats);'),(1846,'sort(java.util.Collection)','org.jhotdraw.draw.Drawing.sort(java.util.Collection)','168','org.jhotdraw.draw.Drawing','/**\r\n * Returns a copy of the provided collection which is sorted\r\n * in z order from back to front.\r\n */\r\nList<Figure> sort(Collection<? extends Figure> figures);'),(1847,'add(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.DrawingEditor.add(org.jhotdraw.draw.DrawingView)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets the editors current drawing.\r\n * /\r\n * Drawing getDrawing();\r\n * /**\r\n * Sets the editors current drawing.\r\n * /\r\n * void setDrawing(Drawing drawing);\r\n */\r\n/**\r\n * Adds a drawing view to the editor.\r\n * The editor invokes addNotify on the view, and it registers its tool\r\n * as an event listener on the view.\r\n */\r\nvoid add(DrawingView view);'),(1848,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.draw.DrawingEditor.addPropertyChangeListener(java.beans.PropertyChangeListener)','169','org.jhotdraw.draw.DrawingEditor','public void addPropertyChangeListener(PropertyChangeListener listener);'),(1849,'applyDefaultAttributesTo(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DrawingEditor.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Applies the default attributes to the specified figure.\r\n */\r\npublic void applyDefaultAttributesTo(Figure f);'),(1850,'findView(java.awt.Container)','org.jhotdraw.draw.DrawingEditor.findView(java.awt.Container)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Finds a handle at the given coordinates.\r\n *\r\n * @return A handle, null if no handle is found.\r\n/\r\npublic Handle findHandle(Point p);\r\n */\r\n/**\r\n * Finds a drawing view.\r\n * This is used by Tool to identify the view of which it has received\r\n * an event.\r\n */\r\npublic DrawingView findView(Container c);'),(1851,'getActiveView()','org.jhotdraw.draw.DrawingEditor.getActiveView()','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets the editors active drawing view.\r\n * This can be null, if the editor has no views.\r\n */\r\nDrawingView getActiveView();'),(1852,'getDefaultAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.DrawingEditor.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets a default attribute from the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n */\r\npublic <T> T getDefaultAttribute(AttributeKey<T> key);'),(1853,'getDefaultAttributes()','org.jhotdraw.draw.DrawingEditor.getDefaultAttributes()','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Returns an immutable Map with the default attributes of this editor.\r\n */\r\npublic Map<AttributeKey, Object> getDefaultAttributes();'),(1854,'getDrawingViews()','org.jhotdraw.draw.DrawingEditor.getDrawingViews()','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets all drawing views associated with this editor.\r\n */\r\nCollection<DrawingView> getDrawingViews();'),(1855,'getHandleAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.DrawingEditor.getHandleAttribute(org.jhotdraw.draw.AttributeKey)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets a handle attribute from the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n *\r\n * @param key\r\n * 		AttributeKey.\r\n * @return If the handle attribute has been set, returns the previously\r\nset value. If the handle attribute has not been set, returns key.getDefaultValue().\r\n */\r\npublic <T> T getHandleAttribute(AttributeKey<T> key);'),(1856,'getTool()','org.jhotdraw.draw.DrawingEditor.getTool()','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets the current tool.\r\n * <p>\r\n * This is a bound property.\r\n */\r\nTool getTool();'),(1857,'isEnabled()','org.jhotdraw.draw.DrawingEditor.isEnabled()','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Gets the enabled state of the drawing editor.\r\n */\r\npublic boolean isEnabled();'),(1858,'remove(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.DrawingEditor.remove(org.jhotdraw.draw.DrawingView)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Removes a drawing view from the editor.\r\n * The editor invokes removeNotify on the view, and it unregisters its tool\r\n * on the view.\r\n */\r\nvoid remove(DrawingView view);'),(1859,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.draw.DrawingEditor.removePropertyChangeListener(java.beans.PropertyChangeListener)','169','org.jhotdraw.draw.DrawingEditor','public void removePropertyChangeListener(PropertyChangeListener listener);'),(1860,'setActiveView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.DrawingEditor.setActiveView(org.jhotdraw.draw.DrawingView)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Sets the editors active drawing view.\r\n * This can be set to null, if the editor has no views.\r\n */\r\nvoid setActiveView(DrawingView newValue);'),(1861,'setCursor(java.awt.Cursor)','org.jhotdraw.draw.DrawingEditor.setCursor(java.awt.Cursor)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Sets the cursor on the view(s) of the drawing editor.\r\n */\r\nvoid setCursor(Cursor c);'),(1862,'setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.DrawingEditor.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Sets a default attribute of the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n */\r\npublic <T> void setDefaultAttribute(AttributeKey<T> key, T value);'),(1863,'setEnabled(boolean)','org.jhotdraw.draw.DrawingEditor.setEnabled(boolean)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Sets the enabled state of the drawing editor.\r\n * This is a bound property.\r\n */\r\npublic void setEnabled(boolean newValue);'),(1864,'setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.DrawingEditor.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Sets a handle attribute of the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n *\r\n * @param key\r\n * 		AttributeKey.\r\n * @param value\r\n * 		Attribute value.\r\n */\r\npublic <T> void setHandleAttribute(AttributeKey<T> key, T value);'),(1865,'setTool(org.jhotdraw.draw.Tool)','org.jhotdraw.draw.DrawingEditor.setTool(org.jhotdraw.draw.Tool)','169','org.jhotdraw.draw.DrawingEditor','/**\r\n * Calls deactivate on the previously active tool of this drawing editor.\r\n * Calls activate on the provided tool.\r\n * Forwards all mouse, mouse moation and keyboard events that occur on the\r\n * DrawingView to the provided tool.\r\n * <p>\r\n * This is a bound property.\r\n */\r\nvoid setTool(Tool t);'),(1866,'-init-(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.DrawingPageable.-init-(org.jhotdraw.draw.Drawing)','170','org.jhotdraw.draw.DrawingPageable','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingPageable(Drawing drawing) {\r\n    this.drawing = drawing;\r\n    Paper paper = new Paper();\r\n    pageFormat = new PageFormat();\r\n    pageFormat.setPaper(paper);\r\n}'),(1867,'-init-()','org.jhotdraw.draw.DrawingPageable.-init-()','170','org.jhotdraw.draw.DrawingPageable','1() {\r\n}'),(1868,'getNumberOfPages()','org.jhotdraw.draw.DrawingPageable.getNumberOfPages()','170','org.jhotdraw.draw.DrawingPageable','public int getNumberOfPages() {\r\n    return 1;\r\n}'),(1869,'getPageFormat(int)','org.jhotdraw.draw.DrawingPageable.getPageFormat(int)','170','org.jhotdraw.draw.DrawingPageable','public PageFormat getPageFormat(int pageIndex) throws IndexOutOfBoundsException {\r\n    return pageFormat;\r\n}'),(1870,'getPrintable(int)','org.jhotdraw.draw.DrawingPageable.getPrintable(int)','170','org.jhotdraw.draw.DrawingPageable','public Printable getPrintable(int pageIndex) throws IndexOutOfBoundsException {\r\n    if ((pageIndex < 0) || (pageIndex >= (getNumberOfPages()))) {\r\n        throw new IndexOutOfBoundsException((\"Invalid page index:\" + pageIndex));\r\n    }\r\n    return new Printable() {\r\n        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\r\n            return printPage(graphics, pageFormat, pageIndex);\r\n        }\r\n    };\r\n}'),(1871,'printPage(java.awt.Graphics,java.awt.print.PageFormat,int)','org.jhotdraw.draw.DrawingPageable.printPage(java.awt.Graphics,java.awt.print.PageFormat,int)','170','org.jhotdraw.draw.DrawingPageable','public int printPage(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\r\n    if ((pageIndex < 0) || (pageIndex >= (getNumberOfPages()))) {\r\n        return Printable.NO_SUCH_PAGE;\r\n    }\r\n    if ((drawing.getChildCount()) > 0) {\r\n        Graphics2D g = ((Graphics2D) (graphics));\r\n        setRenderingHints(g);\r\n        // Determine the draw bounds of the drawing\r\n        Rectangle2D.Double drawBounds = null;\r\n        for (Figure f : drawing.getChildren()) {\r\n            if (drawBounds == null) {\r\n                drawBounds = f.getDrawingArea();\r\n            } else {\r\n                drawBounds.add(f.getDrawingArea());\r\n            }\r\n        }\r\n        // Setup a transformation for the drawing\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\r\n        // Maybe rotate drawing\r\n        if (((isAutorotate) && ((drawBounds.width) > (drawBounds.height))) && ((pageFormat.getImageableWidth()) < (pageFormat.getImageableHeight()))) {\r\n            double scaleFactor = Math.min(((pageFormat.getImageableWidth()) / (drawBounds.height)), ((pageFormat.getImageableHeight()) / (drawBounds.width)));\r\n            tx.scale(scaleFactor, scaleFactor);\r\n            tx.translate(drawBounds.height, 0.0);\r\n            tx.rotate(((Math.PI) / 2.0), 0, 0);\r\n            tx.translate((-(drawBounds.x)), (-(drawBounds.y)));\r\n        } else {\r\n            double scaleFactor = Math.min(((pageFormat.getImageableWidth()) / (drawBounds.width)), ((pageFormat.getImageableHeight()) / (drawBounds.height)));\r\n            tx.scale(scaleFactor, scaleFactor);\r\n            tx.translate((-(drawBounds.x)), (-(drawBounds.y)));\r\n        }\r\n        g.transform(tx);\r\n        // Draw the drawing\r\n        drawing.draw(g);\r\n    }\r\n    return Printable.PAGE_EXISTS;\r\n}'),(1872,'setRenderingHints(java.awt.Graphics2D)','org.jhotdraw.draw.DrawingPageable.setRenderingHints(java.awt.Graphics2D)','170','org.jhotdraw.draw.DrawingPageable','protected void setRenderingHints(Graphics2D g) {\r\n    g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\r\n    g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n}'),(1873,'addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','org.jhotdraw.draw.DrawingView.addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Add a listener for selection changes in this DrawingView.\r\n *\r\n * @param fsl\r\n * 		jhotdraw.framework.FigureSelectionListener\r\n */\r\npublic void addFigureSelectionListener(FigureSelectionListener fsl);'),(1874,'addKeyListener(java.awt.event.KeyListener)','org.jhotdraw.draw.DrawingView.addKeyListener(java.awt.event.KeyListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Adds a key listener to the drawing view.\r\n *\r\n * @param l\r\n * 		the listener.\r\n */\r\npublic void addKeyListener(KeyListener l);'),(1875,'addMouseListener(java.awt.event.MouseListener)','org.jhotdraw.draw.DrawingView.addMouseListener(java.awt.event.MouseListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Adds a mouse listener to the drawing view.\r\n *\r\n * @param l\r\n * 		the listener.\r\n */\r\npublic void addMouseListener(MouseListener l);'),(1876,'addMouseMotionListener(java.awt.event.MouseMotionListener)','org.jhotdraw.draw.DrawingView.addMouseMotionListener(java.awt.event.MouseMotionListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Adds a mouse motion  listener to the drawing view.\r\n *\r\n * @param l\r\n * 		the listener.\r\n */\r\npublic void addMouseMotionListener(MouseMotionListener l);'),(1877,'addNotify(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DrawingView.addNotify(org.jhotdraw.draw.DrawingEditor)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Informs the view that it has been added to the specified editor.\r\n * The view must draw the tool of the editor, if getActiveView() of the\r\n * editor returns the view.\r\n */\r\npublic void addNotify(DrawingEditor editor);'),(1878,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.draw.DrawingView.addPropertyChangeListener(java.beans.PropertyChangeListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Adds a property change listener to the drawing view.\r\n *\r\n * @param listener\r\n * 		\r\n */\r\npublic void addPropertyChangeListener(PropertyChangeListener listener);'),(1879,'addToSelection(java.util.Collection)','org.jhotdraw.draw.DrawingView.addToSelection(java.util.Collection)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Adds a collection of figures to the current selection.\r\n */\r\npublic void addToSelection(Collection<Figure> figures);'),(1880,'addToSelection(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DrawingView.addToSelection(org.jhotdraw.draw.Figure)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Adds a figure to the current selection.\r\n */\r\npublic void addToSelection(Figure figure);'),(1881,'clearSelection()','org.jhotdraw.draw.DrawingView.clearSelection()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Clears the current selection.\r\n */\r\npublic void clearSelection();'),(1882,'drawingToView(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.DrawingView.drawingToView(java.awt.geom.Point2D$Double)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Converts drawing coordinates to view coordinates.\r\n */\r\npublic Point drawingToView(Point2D.Double p);'),(1883,'drawingToView(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.DrawingView.drawingToView(java.awt.geom.Rectangle2D$Double)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Converts drawing coordinates to view coordinates.\r\n */\r\npublic Rectangle drawingToView(Rectangle2D.Double p);'),(1884,'findFigure(java.awt.Point)','org.jhotdraw.draw.DrawingView.findFigure(java.awt.Point)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Finds a figure at the given point.\r\n *\r\n * @return A figure, null if no figure is found.\r\n */\r\npublic Figure findFigure(Point p);'),(1885,'findFigures(java.awt.Rectangle)','org.jhotdraw.draw.DrawingView.findFigures(java.awt.Rectangle)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Returns all figures that lie within or intersect the specified\r\n * bounds. The figures are returned in Z-order from back to front.\r\n */\r\npublic Collection<Figure> findFigures(Rectangle r);'),(1886,'findFiguresWithin(java.awt.Rectangle)','org.jhotdraw.draw.DrawingView.findFiguresWithin(java.awt.Rectangle)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Returns all figures that lie within the specified\r\n * bounds. The figures are returned in Z-order from back to front.\r\n */\r\npublic Collection<Figure> findFiguresWithin(Rectangle r);'),(1887,'findHandle(java.awt.Point)','org.jhotdraw.draw.DrawingView.findHandle(java.awt.Point)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Finds a handle at the given coordinates.\r\n *\r\n * @return A handle, null if no handle is found.\r\n */\r\npublic Handle findHandle(Point p);'),(1888,'getActiveHandle()','org.jhotdraw.draw.DrawingView.getActiveHandle()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the active handle.\r\n */\r\npublic Handle getActiveHandle();'),(1889,'getCompatibleHandles(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.DrawingView.getCompatibleHandles(org.jhotdraw.draw.Handle)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets compatible handles.\r\n *\r\n * @return A collection containing the handle and all compatible handles.\r\n */\r\npublic Collection<Handle> getCompatibleHandles(Handle handle);'),(1890,'getComponent()','org.jhotdraw.draw.DrawingView.getComponent()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Returns the JComponent of the drawing view.\r\n */\r\npublic JComponent getComponent();'),(1891,'getConstrainer()','org.jhotdraw.draw.DrawingView.getConstrainer()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the current constrainer of this view.\r\n * If isConstrainerVisible is true, this method returns getVisibleConstrainer,\r\n * otherwise it returns getInvisibleConstrainer.\r\n * This is a bound property.\r\n */\r\npublic Constrainer getConstrainer();'),(1892,'getDrawing()','org.jhotdraw.draw.DrawingView.getDrawing()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the drawing.\r\n * This is a bound property.\r\n */\r\npublic Drawing getDrawing();'),(1893,'getDrawingToViewTransform()','org.jhotdraw.draw.DrawingView.getDrawingToViewTransform()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets an transform which can be used to convert\r\n * drawing coordinates to view coordinates.\r\n */\r\npublic AffineTransform getDrawingToViewTransform();'),(1894,'getEditor()','org.jhotdraw.draw.DrawingView.getEditor()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the drawing editor associated to the DrawingView.\r\n * This is a bound property.\r\n */\r\npublic DrawingEditor getEditor();'),(1895,'getHandleDetailLevel()','org.jhotdraw.draw.DrawingView.getHandleDetailLevel()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Returns the detail level of the handles.\r\n * This is a bound property.\r\n */\r\npublic int getHandleDetailLevel();'),(1896,'getInvisibleConstrainer()','org.jhotdraw.draw.DrawingView.getInvisibleConstrainer()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned off.\r\n * This is a bound property.\r\n */\r\npublic Constrainer getInvisibleConstrainer();'),(1897,'getScaleFactor()','org.jhotdraw.draw.DrawingView.getScaleFactor()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the scale factor of the drawing view.\r\n * This is a bound property.\r\n */\r\npublic double getScaleFactor();'),(1898,'getSelectedFigures()','org.jhotdraw.draw.DrawingView.getSelectedFigures()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the selected figures. Returns an empty set, if no figures are selected.\r\n */\r\npublic Set<Figure> getSelectedFigures();'),(1899,'getSelectionCount()','org.jhotdraw.draw.DrawingView.getSelectionCount()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the number of selected figures.\r\n */\r\npublic int getSelectionCount();'),(1900,'getVisibleConstrainer()','org.jhotdraw.draw.DrawingView.getVisibleConstrainer()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned on.\r\n * This is a bound property.\r\n */\r\npublic Constrainer getVisibleConstrainer();'),(1901,'isConstrainerVisible()','org.jhotdraw.draw.DrawingView.isConstrainerVisible()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Returns true, if the visible Constrainer is in use, returns false,\r\n * if the invisible Constrainer is in use.\r\n * This is a bound property.\r\n */\r\npublic boolean isConstrainerVisible();'),(1902,'isEnabled()','org.jhotdraw.draw.DrawingView.isEnabled()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Gets the enabled state of the drawing view.\r\n * This is a bound property.\r\n */\r\npublic boolean isEnabled();'),(1903,'isFigureSelected(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DrawingView.isFigureSelected(org.jhotdraw.draw.Figure)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Test whether a given figure is selected.\r\n */\r\npublic boolean isFigureSelected(Figure checkFigure);'),(1904,'removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','org.jhotdraw.draw.DrawingView.removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Remove a listener for selection changes in this DrawingView.\r\n *\r\n * @param fsl\r\n * 		jhotdraw.framework.FigureSelectionListener\r\n */\r\npublic void removeFigureSelectionListener(FigureSelectionListener fsl);'),(1905,'removeFromSelection(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DrawingView.removeFromSelection(org.jhotdraw.draw.Figure)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Removes a figure from the selection.\r\n */\r\npublic void removeFromSelection(Figure figure);'),(1906,'removeKeyListener(java.awt.event.KeyListener)','org.jhotdraw.draw.DrawingView.removeKeyListener(java.awt.event.KeyListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Removes a key listener to the drawing view.\r\n *\r\n * @param l\r\n * 		the listener.\r\n */\r\npublic void removeKeyListener(KeyListener l);'),(1907,'removeMouseListener(java.awt.event.MouseListener)','org.jhotdraw.draw.DrawingView.removeMouseListener(java.awt.event.MouseListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Removes a mouse listener to the drawing view.\r\n *\r\n * @param l\r\n * 		the listener.\r\n */\r\npublic void removeMouseListener(MouseListener l);'),(1908,'removeMouseMotionListener(java.awt.event.MouseMotionListener)','org.jhotdraw.draw.DrawingView.removeMouseMotionListener(java.awt.event.MouseMotionListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Removes a mouse motion listener to the drawing view.\r\n *\r\n * @param l\r\n * 		the listener.\r\n */\r\npublic void removeMouseMotionListener(MouseMotionListener l);'),(1909,'removeNotify(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.DrawingView.removeNotify(org.jhotdraw.draw.DrawingEditor)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Informs the view that it has been removed from the specified editor.\r\n * The view must not draw the tool from the editor anymore.\r\n */\r\npublic void removeNotify(DrawingEditor editor);'),(1910,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.draw.DrawingView.removePropertyChangeListener(java.beans.PropertyChangeListener)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Removes a property change listener to the drawing view.\r\n *\r\n * @param listener\r\n * 		\r\n */\r\npublic void removePropertyChangeListener(PropertyChangeListener listener);'),(1911,'repaintHandles()','org.jhotdraw.draw.DrawingView.repaintHandles()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Repaints the handles of the view.\r\n */\r\npublic void repaintHandles();'),(1912,'requestFocus()','org.jhotdraw.draw.DrawingView.requestFocus()','171','org.jhotdraw.draw.DrawingView','public void requestFocus();'),(1913,'selectAll()','org.jhotdraw.draw.DrawingView.selectAll()','171','org.jhotdraw.draw.DrawingView','/**\r\n * Selects all figures.\r\n */\r\npublic void selectAll();'),(1914,'setActiveHandle(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.DrawingView.setActiveHandle(org.jhotdraw.draw.Handle)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets the active handle.\r\n */\r\npublic void setActiveHandle(Handle newValue);'),(1915,'setConstrainerVisible(boolean)','org.jhotdraw.draw.DrawingView.setConstrainerVisible(boolean)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Changes between a visible Constrainer and an invisible Constrainer.\r\n * This is a bound property.\r\n */\r\npublic void setConstrainerVisible(boolean newValue);'),(1916,'setCursor(java.awt.Cursor)','org.jhotdraw.draw.DrawingView.setCursor(java.awt.Cursor)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets the cursor of the DrawingView.\r\n * This is a bound property.\r\n */\r\npublic void setCursor(Cursor c);'),(1917,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.DrawingView.setDrawing(org.jhotdraw.draw.Drawing)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets and installs another drawing in the view.\r\n * This is a bound property.\r\n */\r\npublic void setDrawing(Drawing d);'),(1918,'setEnabled(boolean)','org.jhotdraw.draw.DrawingView.setEnabled(boolean)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets the enabled state of the drawing view.\r\n * This is a bound property.\r\n */\r\npublic void setEnabled(boolean newValue);'),(1919,'setHandleDetailLevel(int)','org.jhotdraw.draw.DrawingView.setHandleDetailLevel(int)','171','org.jhotdraw.draw.DrawingView','/**\r\n * The detail level of the handles.\r\n * This is a bound property.\r\n */\r\npublic void setHandleDetailLevel(int newValue);'),(1920,'setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)','org.jhotdraw.draw.DrawingView.setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned off.\r\n * This is a bound property.\r\n */\r\npublic void setInvisibleConstrainer(Constrainer constrainer);'),(1921,'setScaleFactor(double)','org.jhotdraw.draw.DrawingView.setScaleFactor(double)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets the scale factor of the drawing view.\r\n * This is a bound property.\r\n */\r\npublic void setScaleFactor(double newValue);'),(1922,'setVisibleConstrainer(org.jhotdraw.draw.Constrainer)','org.jhotdraw.draw.DrawingView.setVisibleConstrainer(org.jhotdraw.draw.Constrainer)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Sets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned on.\r\n * This is a bound property.\r\n */\r\npublic void setVisibleConstrainer(Constrainer constrainer);'),(1923,'toggleSelection(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.DrawingView.toggleSelection(org.jhotdraw.draw.Figure)','171','org.jhotdraw.draw.DrawingView','/**\r\n * If a figure isnt selected it is added to the selection.\r\n * Otherwise it is removed from the selection.\r\n */\r\npublic void toggleSelection(Figure figure);'),(1924,'viewToDrawing(java.awt.Point)','org.jhotdraw.draw.DrawingView.viewToDrawing(java.awt.Point)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Converts view coordinates to drawing coordinates.\r\n */\r\npublic Point2D.Double viewToDrawing(Point p);'),(1925,'viewToDrawing(java.awt.Rectangle)','org.jhotdraw.draw.DrawingView.viewToDrawing(java.awt.Rectangle)','171','org.jhotdraw.draw.DrawingView','/**\r\n * Converts view coordinates to drawing coordinates.\r\n */\r\npublic Rectangle2D.Double viewToDrawing(Rectangle p);'),(1926,'-init-()','org.jhotdraw.draw.ElbowLiner.-init-()','172','org.jhotdraw.draw.ElbowLiner','/**\r\n * Creates a new instance.\r\n */\r\npublic ElbowLiner() {\r\n    this(20);\r\n}'),(1927,'-init-(double)','org.jhotdraw.draw.ElbowLiner.-init-(double)','172','org.jhotdraw.draw.ElbowLiner','public ElbowLiner(double slantSize) {\r\n    this.shoulderSize = slantSize;\r\n}'),(1928,'clone()','org.jhotdraw.draw.ElbowLiner.clone()','172','org.jhotdraw.draw.ElbowLiner','public Liner clone() {\r\n    try {\r\n        return ((Liner) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(ex.getMessage());\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n}'),(1929,'createHandles(org.jhotdraw.geom.BezierPath)','org.jhotdraw.draw.ElbowLiner.createHandles(org.jhotdraw.geom.BezierPath)','172','org.jhotdraw.draw.ElbowLiner','public Collection<Handle> createHandles(BezierPath path) {\r\n    return null;\r\n}'),(1930,'lineout(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ElbowLiner.lineout(org.jhotdraw.draw.ConnectionFigure)','172','org.jhotdraw.draw.ElbowLiner','public void lineout(ConnectionFigure figure) {\r\n    BezierPath path = ((LineConnectionFigure) (figure)).getBezierPath();\r\n    Connector start = figure.getStartConnector();\r\n    Connector end = figure.getEndConnector();\r\n    if (((start == null) || (end == null)) || (path == null)) {\r\n        return;\r\n    }\r\n    // Special treatment if the connection connects the same figure\r\n    if ((figure.getStartFigure()) == (figure.getEndFigure())) {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 5) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 5) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            soutcode = Geom.outcode(sb, eb);\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            eoutcode = Geom.outcode(sb, eb);\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        switch (soutcode) {\r\n            case Geom.OUT_TOP :\r\n                eoutcode = Geom.OUT_LEFT;\r\n                break;\r\n            case Geom.OUT_RIGHT :\r\n                eoutcode = Geom.OUT_TOP;\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n                eoutcode = Geom.OUT_RIGHT;\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                eoutcode = Geom.OUT_BOTTOM;\r\n                break;\r\n            default :\r\n                eoutcode = Geom.OUT_TOP;\r\n                soutcode = Geom.OUT_RIGHT;\r\n                break;\r\n        }\r\n        path.get(1).moveTo(((sp.x) + (shoulderSize)), sp.y);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (shoulderSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (shoulderSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (shoulderSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (shoulderSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(3).moveTo(((ep.x) + (shoulderSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(3).moveTo(((ep.x) - (shoulderSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) + (shoulderSize)));\r\n                } else {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) - (shoulderSize)));\r\n                }\r\n\r\n\r\n        switch (soutcode) {\r\n            case Geom.OUT_RIGHT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_TOP :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n            default :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n        }\r\n    } else {\r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        path.clear();\r\n        path.add(new BezierPath.Node(sp.x, sp.y));\r\n        if (((sp.x) == (ep.x)) || ((sp.y) == (ep.y))) {\r\n            path.add(new BezierPath.Node(ep.x, ep.y));\r\n        } else {\r\n            Rectangle2D.Double sb = start.getBounds();\r\n            sb.x += 5.0;\r\n            sb.y += 5.0;\r\n            sb.width -= 10.0;\r\n            sb.height -= 10.0;\r\n            Rectangle2D.Double eb = end.getBounds();\r\n            eb.x += 5.0;\r\n            eb.y += 5.0;\r\n            eb.width -= 10.0;\r\n            eb.height -= 10.0;\r\n            int soutcode = sb.outcode(sp);\r\n            if (soutcode == 0) {\r\n                soutcode = Geom.outcode(sb, eb);\r\n            }\r\n            int eoutcode = eb.outcode(ep);\r\n            if (eoutcode == 0) {\r\n                eoutcode = Geom.outcode(eb, sb);\r\n            }\r\n            if (((soutcode & ((Geom.OUT_TOP) | (Geom.OUT_BOTTOM))) != 0) && ((eoutcode & ((Geom.OUT_TOP) | (Geom.OUT_BOTTOM))) != 0)) {\r\n                path.add(new BezierPath.Node(sp.x, (((sp.y) + (ep.y)) / 2)));\r\n                path.add(new BezierPath.Node(ep.x, (((sp.y) + (ep.y)) / 2)));\r\n            } else\r\n                if (((soutcode & ((Geom.OUT_LEFT) | (Geom.OUT_RIGHT))) != 0) && ((eoutcode & ((Geom.OUT_LEFT) | (Geom.OUT_RIGHT))) != 0)) {\r\n                    path.add(new BezierPath.Node((((sp.x) + (ep.x)) / 2), sp.y));\r\n                    path.add(new BezierPath.Node((((sp.x) + (ep.x)) / 2), ep.y));\r\n                } else\r\n                    if ((soutcode == (Geom.OUT_BOTTOM)) && (eoutcode == (Geom.OUT_LEFT))) {\r\n                        path.add(new BezierPath.Node(sp.x, ep.y));\r\n                    } else {\r\n                        path.add(new BezierPath.Node(ep.x, sp.y));\r\n                    }\r\n\r\n\r\n            path.add(new BezierPath.Node(ep.x, ep.y));\r\n        }\r\n    }\r\n    // Ensure all path nodes are straight\r\n    for (BezierPath.Node node : path) {\r\n        node.setMask(BezierPath.C0_MASK);\r\n    }\r\n    path.invalidatePath();\r\n}'),(1931,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.ElbowLiner.read(org.jhotdraw.xml.DOMInput)','172','org.jhotdraw.draw.ElbowLiner','public void read(DOMInput in) {\r\n}'),(1932,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.ElbowLiner.write(org.jhotdraw.xml.DOMOutput)','172','org.jhotdraw.draw.ElbowLiner','public void write(DOMOutput out) {\r\n}'),(1933,'-init-()','org.jhotdraw.draw.EllipseFigure.-init-()','173','org.jhotdraw.draw.EllipseFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic EllipseFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(1934,'-init-(double,double,double,double)','org.jhotdraw.draw.EllipseFigure.-init-(double,double,double,double)','173','org.jhotdraw.draw.EllipseFigure','public EllipseFigure(double x, double y, double width, double height) {\r\n    ellipse = new Ellipse2D.Double(x, y, width, height);\r\n    /* setFillColor(Color.white);\n    setStrokeColor(Color.black);\n     */\r\n    setAttributeEnabled(AttributeKeys.TEXT_COLOR, false);\r\n}'),(1935,'clone()','org.jhotdraw.draw.EllipseFigure.clone()','173','org.jhotdraw.draw.EllipseFigure','@Override\r\npublic EllipseFigure clone() {\r\n    EllipseFigure that = ((EllipseFigure) (super.clone()));\r\n    that.ellipse = ((Ellipse2D.Double) (this.ellipse.clone()));\r\n    return that;\r\n}'),(1936,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.EllipseFigure.contains(java.awt.geom.Point2D$Double)','173','org.jhotdraw.draw.EllipseFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    Ellipse2D.Double r = ((Ellipse2D.Double) (ellipse.clone()));\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    return r.contains(p);\r\n}'),(1937,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.EllipseFigure.drawFill(java.awt.Graphics2D)','173','org.jhotdraw.draw.EllipseFigure','protected void drawFill(Graphics2D g) {\r\n    Ellipse2D.Double r = ((Ellipse2D.Double) (ellipse.clone()));\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    if (((r.width) > 0) && ((r.height) > 0)) {\r\n        g.fill(r);\r\n    }\r\n}'),(1938,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.EllipseFigure.drawStroke(java.awt.Graphics2D)','173','org.jhotdraw.draw.EllipseFigure','protected void drawStroke(Graphics2D g) {\r\n    Ellipse2D.Double r = ((Ellipse2D.Double) (ellipse.clone()));\r\n    double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    if (((r.width) > 0) && ((r.height) > 0)) {\r\n        g.draw(r);\r\n    }\r\n}'),(1939,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.EllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','173','org.jhotdraw.draw.EllipseFigure','@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopEllipseConnector(this);\r\n}'),(1940,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.EllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','173','org.jhotdraw.draw.EllipseFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopEllipseConnector(this);\r\n}'),(1941,'getBounds()','org.jhotdraw.draw.EllipseFigure.getBounds()','173','org.jhotdraw.draw.EllipseFigure','// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\npublic Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (ellipse.getBounds2D()));\r\n}'),(1942,'getDrawingArea()','org.jhotdraw.draw.EllipseFigure.getDrawingArea()','173','org.jhotdraw.draw.EllipseFigure','public Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (ellipse.getBounds2D()));\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    Geom.grow(r, grow, grow);\r\n    return r;\r\n}'),(1943,'getTransformRestoreData()','org.jhotdraw.draw.EllipseFigure.getTransformRestoreData()','173','org.jhotdraw.draw.EllipseFigure','public Object getTransformRestoreData() {\r\n    return ellipse.clone();\r\n}'),(1944,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.EllipseFigure.restoreTransformTo(java.lang.Object)','173','org.jhotdraw.draw.EllipseFigure','public void restoreTransformTo(Object geometry) {\r\n    Ellipse2D.Double r = ((Ellipse2D.Double) (geometry));\r\n    ellipse.x = r.x;\r\n    ellipse.y = r.y;\r\n    ellipse.width = r.width;\r\n    ellipse.height = r.height;\r\n}'),(1945,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.EllipseFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','173','org.jhotdraw.draw.EllipseFigure','@Override\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    ellipse.x = Math.min(anchor.x, lead.x);\r\n    ellipse.y = Math.min(anchor.y, lead.y);\r\n    ellipse.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    ellipse.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(1946,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.EllipseFigure.transform(java.awt.geom.AffineTransform)','173','org.jhotdraw.draw.EllipseFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		the transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(1947,'addFigureListener(org.jhotdraw.draw.FigureListener)','org.jhotdraw.draw.Figure.addFigureListener(org.jhotdraw.draw.FigureListener)','174','org.jhotdraw.draw.Figure','/**\r\n * Adds a listener for FigureEvents.\r\n */\r\npublic void addFigureListener(FigureListener l);'),(1948,'addNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.Figure.addNotify(org.jhotdraw.draw.Drawing)','174','org.jhotdraw.draw.Figure','// EVENT HANDLING\r\n/**\r\n * Informs a figure, that it has been added to a drawing.\r\n * The figure must inform all FigureListeners that it has been added.\r\n */\r\npublic void addNotify(Drawing d);'),(1949,'canConnect()','org.jhotdraw.draw.Figure.canConnect()','174','org.jhotdraw.draw.Figure','// CONNECTING\r\n/**\r\n * Checks if this Figure can be connected.\r\n */\r\npublic boolean canConnect();'),(1950,'changed()','org.jhotdraw.draw.Figure.changed()','174','org.jhotdraw.draw.Figure','/**\r\n * Informs that a Figure changed its shape.\r\n * This fires a <code>FigureListener.figureChanged</code>\r\n * event for the current display bounds of the figure.\r\n *\r\n * @see #willChange()\r\n */\r\npublic void changed();'),(1951,'clone()','org.jhotdraw.draw.Figure.clone()','174','org.jhotdraw.draw.Figure','// CLONING\r\n/**\r\n * Returns a clone of the figure, with clones of all aggregated figures,\r\n * such as chilrend and decorators. The cloned figure does not clone\r\n * the list of FigureListeners from its original.\r\n */\r\npublic Object clone();'),(1952,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.contains(java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','/**\r\n * Checks if a point is contained by the figure.\r\n * <p>\r\n * This is used for hit testing by Tools.\r\n */\r\nboolean contains(Point2D.Double p);'),(1953,'createHandles(int)','org.jhotdraw.draw.Figure.createHandles(int)','174','org.jhotdraw.draw.Figure','/**\r\n * Creates handles used to manipulate the figure.\r\n *\r\n * @param detailLevel\r\n * 		The detail level of the handles. Usually this is 0 for\r\n * 		bounding box handles and 1 for point handles. The value -1 is used\r\n * 		by the SelectAreaTracker and the HandleTracker to highlight figures, over which the mouse\r\n * 		pointer is hovering.\r\n * @return a Collection of handles\r\n * @see Handle\r\n */\r\npublic Collection<Handle> createHandles(int detailLevel);'),(1954,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.Figure.draw(java.awt.Graphics2D)','174','org.jhotdraw.draw.Figure','// DRAWING\r\n/**\r\n * Draws the figure.\r\n *\r\n * @param g\r\n * 		The Graphics2D to draw to.\r\n */\r\npublic void draw(Graphics2D g);'),(1955,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.Figure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','174','org.jhotdraw.draw.Figure','/**\r\n * Gets a compatible connector.\r\n * If the provided connector is part of this figure, return the connector.\r\n * If the provided connector is part of another figure, return a connector\r\n * with the same semantics for this figure.\r\n * Return null, if no compatible connector is available.\r\n */\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector);'),(1956,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.Figure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','174','org.jhotdraw.draw.Figure','/**\r\n * Gets a connector for this figure at the given location.\r\n * A figure can have different connectors at different locations.\r\n *\r\n * @param p\r\n * 		the location of the connector.\r\n * @param prototype\r\n * 		The prototype used to create a connection or null if\r\n * 		unknown. This allows for specific connectors for different\r\n * 		connection figures.\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype);'),(1957,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.findFigureInside(java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','/**\r\n * Returns the figure that contains the given point.\r\n */\r\npublic Figure findFigureInside(Point2D.Double p);'),(1958,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.getActions(java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','/**\r\n * Returns a collection of Actions for the specified location on the figure.\r\n *\r\n * <p>The collection may contain null entries. These entries are used\r\n * interpreted as separators in the popup menu.\r\n * <p>Actions can use the property Figure.ACTION_SUBMENU to specify a\r\n * submenu.\r\n */\r\npublic Collection<Action> getActions(Point2D.Double p);'),(1959,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.Figure.getAttribute(org.jhotdraw.draw.AttributeKey)','174','org.jhotdraw.draw.Figure','/**\r\n * Gets an attribute from the Figure.\r\n *\r\n * @see AttributeKey#get\r\n * @return Returns the attribute value. If the Figure does not have an\r\nattribute with the specified key, returns key.getDefaultValue().\r\n */\r\npublic <T> T getAttribute(AttributeKey<T> key);'),(1960,'getAttributes()','org.jhotdraw.draw.Figure.getAttributes()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns a view to all attributes of this figure.\r\n * By convention, an unmodifiable map is returned.\r\n */\r\npublic Map<AttributeKey, Object> getAttributes();'),(1961,'getAttributesRestoreData()','org.jhotdraw.draw.Figure.getAttributesRestoreData()','174','org.jhotdraw.draw.Figure','/**\r\n * Gets data which can be used to restore the attributes of the figure\r\n * after a setAttribute has been applied to it.\r\n */\r\npublic Object getAttributesRestoreData();'),(1962,'getBounds()','org.jhotdraw.draw.Figure.getBounds()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns the untransformed logicalbounds of the figure as a Rectangle.\r\n * The handle bounds are used by Handle objects for adjusting the\r\n * figure and for aligning the figure on a grid.\r\n */\r\npublic Rectangle2D.Double getBounds();'),(1963,'getConnectors(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.Figure.getConnectors(org.jhotdraw.draw.ConnectionFigure)','174','org.jhotdraw.draw.Figure','/**\r\n * Returns all connectors of this Figure for the specified prototype of\r\n * a ConnectionFigure.\r\n * <p>\r\n * This is used by connection tools and connection handles\r\n * to visualize the connectors when the user is about to\r\n * create a ConnectionFigure to this Figure.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a connection or null if\r\n * 		unknown. This allows for specific connectors for different\r\n * 		connection figures.\r\n */\r\npublic Collection<Connector> getConnectors(ConnectionFigure prototype);'),(1964,'getCursor(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.getCursor(java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','/**\r\n * Returns a cursor for the specified location.\r\n */\r\npublic Cursor getCursor(Point2D.Double p);'),(1965,'getDecomposition()','org.jhotdraw.draw.Figure.getDecomposition()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns a decompositon of a figure into its parts.\r\n * A figure is considered as a part of itself.\r\n */\r\npublic Collection<Figure> getDecomposition();'),(1966,'getDrawingArea()','org.jhotdraw.draw.Figure.getDrawingArea()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns the drawing area of the figure as a Rectangle.\r\n * The drawing area is used to improve the performance of GraphicView, for\r\n * example for clipping of repaints and for clipping of mouse events.\r\n * <p>\r\n * The drawing area needs to be large enough, to take line width, line caps\r\n * and other decorations into account that exceed the bounds of the Figure.\r\n */\r\npublic Rectangle2D.Double getDrawingArea();'),(1967,'getEndPoint()','org.jhotdraw.draw.Figure.getEndPoint()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns the untransformed logical end point of the bounds.\r\n *\r\n * @see #setBounds\r\n */\r\npublic Point2D.Double getEndPoint();'),(1968,'getLayer()','org.jhotdraw.draw.Figure.getLayer()','174','org.jhotdraw.draw.Figure','/**\r\n * Gets the layer number of the figure.\r\n * The layer is used to determine the z-ordering of a figure inside of a\r\n * drawing. Figures with a higher layer number are drawn after figures\r\n * with a lower number.\r\n * The z-order of figures within the same layer is determined by the\r\n * sequence the figures were added to a drawing. Figures added later to\r\n * a drawn after figures which have been added before.\r\n * If a figure changes its layer, it must fire a\r\n * <code>FigureListener.figureChanged</code> event to\r\n * its figure listeners.\r\n */\r\npublic int getLayer();'),(1969,'getPreferredSize()','org.jhotdraw.draw.Figure.getPreferredSize()','174','org.jhotdraw.draw.Figure','/**\r\n * The preferred size is used by Layouter to determine the preferred\r\n * size of a Figure. For most Figures this is the same as the\r\n * dimensions returned by getBounds.\r\n */\r\npublic Dimension2DDouble getPreferredSize();'),(1970,'getStartPoint()','org.jhotdraw.draw.Figure.getStartPoint()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns the untransformed logical start point of the bounds.\r\n *\r\n * @see #setBounds\r\n */\r\npublic Point2D.Double getStartPoint();'),(1971,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.getTool(java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','/**\r\n * Returns a specialized tool for the specified location.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\npublic Tool getTool(Point2D.Double p);'),(1972,'getToolTipText(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.getToolTipText(java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','/**\r\n * Returns a tooltip for the specified location on the figure.\r\n */\r\npublic String getToolTipText(Point2D.Double p);'),(1973,'getTransformRestoreData()','org.jhotdraw.draw.Figure.getTransformRestoreData()','174','org.jhotdraw.draw.Figure','// TRANSFORMING\r\n/**\r\n * Gets data which can be used to restore the transformation of the figure\r\n * without loss of precision, after a transform has been applied to it.\r\n *\r\n * @see #transform(AffineTransform)\r\n */\r\npublic Object getTransformRestoreData();'),(1974,'handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.Figure.handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)','174','org.jhotdraw.draw.Figure','/**\r\n * Handles a drop.\r\n *\r\n * @param p\r\n * 		The location of the mouse event.\r\n * @param droppedFigures\r\n * 		The dropped figures.\r\n * @param view\r\n * 		The drawing view which is the source of the mouse event.\r\n * @return Returns true, if the figures should snap back to the location\r\nthey were dragged from.\r\n */\r\npublic boolean handleDrop(Point2D.Double p, Collection<Figure> droppedFigures, DrawingView view);'),(1975,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.Figure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','174','org.jhotdraw.draw.Figure','/**\r\n * Handles a mouse click.\r\n *\r\n * @param p\r\n * 		The location of the mouse event.\r\n * @param evt\r\n * 		The mouse event.\r\n * @param view\r\n * 		The drawing view which is the source of the mouse event.\r\n * @return Returns true, if the event was consumed.\r\n */\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view);'),(1976,'includes(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Figure.includes(org.jhotdraw.draw.Figure)','174','org.jhotdraw.draw.Figure','// COMPOSITE FIGURES\r\n/**\r\n * Checks whether the given figure is contained in this figure.\r\n * A figure includes itself.\r\n */\r\npublic boolean includes(Figure figure);'),(1977,'isRemovable()','org.jhotdraw.draw.Figure.isRemovable()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns true, if the user may remove this figure.\r\n * If this operation returns false, Tools should not remove this\r\n * figure on behalf of the user.\r\n * <p>\r\n * Please note, that even if this method returns false, the Figure\r\n * may be removed from the Drawing for other reasons. For example,\r\n * if the Figure is used to display a warning message, the Figure\r\n * can be removed from the Drawing, when the warning message is\r\n * no longer relevant.\r\n */\r\npublic boolean isRemovable();'),(1978,'isSelectable()','org.jhotdraw.draw.Figure.isSelectable()','174','org.jhotdraw.draw.Figure','// EDITING\r\n/**\r\n * Returns true, if the user may select this figure.\r\n * If this operation returns false, Tools should not select this\r\n * figure on behalf of the user.\r\n * <p>\r\n * Please note, that even if this method returns false, the Figure\r\n * may become part of a selection for other reasons. For example,\r\n * if the Figure is part of a GroupFigure, then the Figure is\r\n * indirectly part of the selection, when the user selects the\r\n * GroupFigure.\r\n */\r\npublic boolean isSelectable();'),(1979,'isTransformable()','org.jhotdraw.draw.Figure.isTransformable()','174','org.jhotdraw.draw.Figure','/**\r\n * Returns true, if the user may transform this figure.\r\n * If this operation returns false, Tools should not transform this\r\n * figure on behalf of the user.\r\n * <p>\r\n * Please note, that even if this method returns false, the Figure\r\n * may be transformed for other reasons. For example, if the Figure takes\r\n * part in an animation.\r\n *\r\n * @see #transform\r\n */\r\npublic boolean isTransformable();'),(1980,'isVisible()','org.jhotdraw.draw.Figure.isVisible()','174','org.jhotdraw.draw.Figure','/**\r\n * A Figure is only drawn by a CompositeFigure, if it is visible.\r\n * Layouters should ignore invisible figures too.\r\n */\r\npublic boolean isVisible();'),(1981,'remap(java.util.Map,boolean)','org.jhotdraw.draw.Figure.remap(java.util.Map,boolean)','174','org.jhotdraw.draw.Figure','/**\r\n * After cloning a collection of figures, the ConnectionFigures contained\r\n * in this collection still connect to the original figures instead of\r\n * to the clones.\r\n * Using This operation and providing a map, which maps from the original\r\n * collection of figures to the new collection, connections can be remapped\r\n * to the new figures.\r\n */\r\npublic void remap(Map<Figure, Figure> oldToNew, boolean disconnectIfNotInMap);'),(1982,'removeFigureListener(org.jhotdraw.draw.FigureListener)','org.jhotdraw.draw.Figure.removeFigureListener(org.jhotdraw.draw.FigureListener)','174','org.jhotdraw.draw.Figure','/**\r\n * Removes a listener for FigureEvents.\r\n */\r\npublic void removeFigureListener(FigureListener l);'),(1983,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.Figure.removeNotify(org.jhotdraw.draw.Drawing)','174','org.jhotdraw.draw.Figure','/**\r\n * Informs a figure, that it has been removed from a drawing.\r\n * The figure must inform all FigureListeners that it has been removed.\r\n */\r\npublic void removeNotify(Drawing d);'),(1984,'requestRemove()','org.jhotdraw.draw.Figure.requestRemove()','174','org.jhotdraw.draw.Figure','/**\r\n * Fires a <code>FigureListener.figureRequestRemove</code> event.\r\n */\r\npublic void requestRemove();'),(1985,'restoreAttributesTo(java.lang.Object)','org.jhotdraw.draw.Figure.restoreAttributesTo(java.lang.Object)','174','org.jhotdraw.draw.Figure','/**\r\n * Restores the attributes of the figure to a previously stored state.\r\n */\r\npublic void restoreAttributesTo(Object restoreData);'),(1986,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.Figure.restoreTransformTo(java.lang.Object)','174','org.jhotdraw.draw.Figure','/**\r\n * Restores the transform of the figure to a previously stored state.\r\n */\r\npublic void restoreTransformTo(Object restoreData);'),(1987,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.Figure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','174','org.jhotdraw.draw.Figure','// ATTRIBUTES\r\n/**\r\n * Sets an attribute of the figure and calls attributeChanged on all\r\n * registered FigureListeners.\r\n * <p>\r\n * For efficiency reasons, the drawing is not automatically repainted.\r\n * If you want the drawing to be repainted when the attribute is changed,\r\n * you can either use {@code key.set(figure, value);} or\r\n * {@code figure.willChange(); figure.setAttribute(key, value);\r\n * figure.changed();}.\r\n *\r\n * @see AttributeKey#set\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T value);'),(1988,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Figure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','174','org.jhotdraw.draw.Figure','// BOUNDS\r\n/**\r\n * Sets the logical and untransformed bounds of the figure.\r\n * <p>\r\n * This is used by Tools which create a new Figure and by Tools which\r\n * connect a Figure to another Figure.\r\n * <p>\r\n * This is a basic operation which does not fire events. Use the following\r\n * code sequence, if you need event firing:\r\n * <pre>\r\n * aFigure.willChange();\r\n * aFigure.setBounds(...);\r\n * aFigure.changed();\r\n * </pre>\r\n *\r\n * @param start\r\n * 		the start point of the bounds\r\n * @param end\r\n * 		the end point of the bounds\r\n * @see #getBounds\r\n */\r\npublic void setBounds(Point2D.Double start, Point2D.Double end);'),(1989,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.Figure.transform(java.awt.geom.AffineTransform)','174','org.jhotdraw.draw.Figure','/**\r\n * Transforms the shape of the Figure. Transformations using double\r\n * precision arithmethics are inherently lossy operations. Therefore it is\r\n * recommended to use getTransformRestoreData() restoreTransformTo() to\r\n * provide lossless undo/redo functionality.\r\n * <p>\r\n * This is a basic operation which does not fire events. Use the following\r\n * code sequence, if you need event firing:\r\n * <pre>\r\n * aFigure.willChange();\r\n * aFigure.transform(...);\r\n * aFigure.changed();\r\n * </pre>\r\n *\r\n * @param tx\r\n * 		The transformation.\r\n * @see #getTransformRestoreData\r\n * @see #restoreTransformTo\r\n */\r\npublic void transform(AffineTransform tx);'),(1990,'willChange()','org.jhotdraw.draw.Figure.willChange()','174','org.jhotdraw.draw.Figure','/**\r\n * Informs that a Figure is about to change its shape.\r\n * <p>\r\n * <code>willChange</code> and <code>changed</code> are typically used\r\n * as pairs before and after invoking one or multiple basic-methods on\r\n * the Figure.\r\n */\r\npublic void willChange();'),(1991,'-init-()','org.jhotdraw.draw.FigureAdapter.-init-()','175','org.jhotdraw.draw.FigureAdapter','FigureAdapter() {\r\n}'),(1992,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.areaInvalidated(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void areaInvalidated(FigureEvent e) {\r\n}'),(1993,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void attributeChanged(FigureEvent e) {\r\n}'),(1994,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.figureAdded(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void figureAdded(FigureEvent e) {\r\n}'),(1995,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.figureChanged(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void figureChanged(FigureEvent e) {\r\n}'),(1996,'figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void figureHandlesChanged(FigureEvent e) {\r\n}'),(1997,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.figureRemoved(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void figureRemoved(FigureEvent e) {\r\n}'),(1998,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureAdapter.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','175','org.jhotdraw.draw.FigureAdapter','public void figureRequestRemove(FigureEvent e) {\r\n}'),(1999,'-init-(org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double)','176','org.jhotdraw.draw.FigureEvent','/**\r\n * Constructs an event for the given source Figure.\r\n *\r\n * @param invalidatedArea\r\n * 		The bounds of the invalidated area on the drawing.\r\n */\r\npublic FigureEvent(Figure source, Rectangle2D.Double invalidatedArea) {\r\n    super(source);\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(2000,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','176','org.jhotdraw.draw.FigureEvent','/**\r\n * Constructs an event for the given source Figure.\r\n */\r\npublic FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {\r\n    super(source);\r\n    this.attribute = attribute;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(2001,'getAttribute()','org.jhotdraw.draw.FigureEvent.getAttribute()','176','org.jhotdraw.draw.FigureEvent','public AttributeKey getAttribute() {\r\n    return attribute;\r\n}'),(2002,'getFigure()','org.jhotdraw.draw.FigureEvent.getFigure()','176','org.jhotdraw.draw.FigureEvent','/**\r\n * Gets the changed figure\r\n */\r\npublic Figure getFigure() {\r\n    return ((Figure) (getSource()));\r\n}'),(2003,'getInvalidatedArea()','org.jhotdraw.draw.FigureEvent.getInvalidatedArea()','176','org.jhotdraw.draw.FigureEvent','/**\r\n * Gets the bounds of the invalidated area on the drawing.\r\n */\r\npublic Rectangle2D.Double getInvalidatedArea() {\r\n    return invalidatedArea;\r\n}'),(2004,'getNewValue()','org.jhotdraw.draw.FigureEvent.getNewValue()','176','org.jhotdraw.draw.FigureEvent','public Object getNewValue() {\r\n    return newValue;\r\n}'),(2005,'getOldValue()','org.jhotdraw.draw.FigureEvent.getOldValue()','176','org.jhotdraw.draw.FigureEvent','public Object getOldValue() {\r\n    return oldValue;\r\n}'),(2006,'-init-()','org.jhotdraw.draw.FigureLayerComparator.-init-()','177','org.jhotdraw.draw.FigureLayerComparator','/**\r\n * Creates a new instance.\r\n */\r\nprivate FigureLayerComparator() {\r\n}'),(2007,'compare(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.FigureLayerComparator.compare(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','177','org.jhotdraw.draw.FigureLayerComparator','public int compare(Figure f1, Figure f2) {\r\n    return (f1.getLayer()) - (f2.getLayer());\r\n}'),(2008,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.areaInvalidated(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when the drawing area used by the figure needs to be repainted.\r\n */\r\npublic void areaInvalidated(FigureEvent e);'),(2009,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.attributeChanged(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when an attribute of the figure has changed.\r\n */\r\npublic void attributeChanged(FigureEvent e);'),(2010,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.figureAdded(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when a figure was added to a drawing.\r\n */\r\npublic void figureAdded(FigureEvent e);'),(2011,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.figureChanged(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when the geometry (for example the bounds) of the figure has changed.\r\n */\r\npublic void figureChanged(FigureEvent e);'),(2012,'figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when handles of a Figure have been added, removed or replaced.\r\n * <p>\r\n * DrawingViews listen to this event to repopulate the Handles.\r\n * <p>\r\n * A Figure should not fire this event, if just the state or the location\r\n * of Handle has changed.\r\n */\r\npublic void figureHandlesChanged(FigureEvent e);'),(2013,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.figureRemoved(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when a figure was removed from a drawing.\r\n */\r\npublic void figureRemoved(FigureEvent e);'),(2014,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.FigureListener.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','178','org.jhotdraw.draw.FigureListener','/**\r\n * Sent when the figure requests to be removed from a drawing.\r\n */\r\npublic void figureRequestRemove(FigureEvent e);'),(2015,'-init-(org.jhotdraw.draw.DrawingView,java.util.Set,java.util.Set)','org.jhotdraw.draw.FigureSelectionEvent.-init-(org.jhotdraw.draw.DrawingView,java.util.Set,java.util.Set)','179','org.jhotdraw.draw.FigureSelectionEvent','/**\r\n * Creates a new instance.\r\n */\r\npublic FigureSelectionEvent(DrawingView source, Set<Figure> oldValue, Set<Figure> newValue) {\r\n    super(source);\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(2016,'getNewSelection()','org.jhotdraw.draw.FigureSelectionEvent.getNewSelection()','179','org.jhotdraw.draw.FigureSelectionEvent','public Set<Figure> getNewSelection() {\r\n    return newValue;\r\n}'),(2017,'getOldSelection()','org.jhotdraw.draw.FigureSelectionEvent.getOldSelection()','179','org.jhotdraw.draw.FigureSelectionEvent','public Set<Figure> getOldSelection() {\r\n    return oldValue;\r\n}'),(2018,'getView()','org.jhotdraw.draw.FigureSelectionEvent.getView()','179','org.jhotdraw.draw.FigureSelectionEvent','public DrawingView getView() {\r\n    return ((DrawingView) (source));\r\n}'),(2019,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.FigureSelectionListener.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','180','org.jhotdraw.draw.FigureSelectionListener','public void selectionChanged(FigureSelectionEvent evt);'),(2020,'-init-()','org.jhotdraw.draw.FloatingTextArea.-init-()','181','org.jhotdraw.draw.FloatingTextArea','1() {\r\n}'),(2021,'createOverlay(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView)','181','org.jhotdraw.draw.FloatingTextArea','/**\r\n * Creates the overlay within the given container.\r\n *\r\n * @param view\r\n * 		the DrawingView\r\n */\r\npublic void createOverlay(DrawingView view) {\r\n    createOverlay(view, null);\r\n}'),(2022,'createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)','181','org.jhotdraw.draw.FloatingTextArea','/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n *\r\n * @param view\r\n * 		the DrawingView\r\n * @param figure\r\n * 		the figure holding the text\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(editScrollContainer, 0);\r\n    editedFigure = figure;\r\n    this.view = view;\r\n    if ((editedFigure) != null) {\r\n        editedFigure.addFigureListener(figureHandler);\r\n        updateWidget();\r\n    }\r\n}'),(2023,'endOverlay()','org.jhotdraw.draw.FloatingTextArea.endOverlay()','181','org.jhotdraw.draw.FloatingTextArea','/**\r\n * Removes the overlay.\r\n */\r\npublic void endOverlay() {\r\n    view.getComponent().requestFocus();\r\n    if ((editScrollContainer) != null) {\r\n        editScrollContainer.setVisible(false);\r\n        view.getComponent().remove(editScrollContainer);\r\n        Rectangle bounds = editScrollContainer.getBounds();\r\n        view.getComponent().repaint(bounds.x, bounds.y, bounds.width, bounds.height);\r\n    }\r\n    if ((editedFigure) != null) {\r\n        editedFigure.removeFigureListener(figureHandler);\r\n        editedFigure = null;\r\n    }\r\n}'),(2024,'getPreferredSize(int)','org.jhotdraw.draw.FloatingTextArea.getPreferredSize(int)','181','org.jhotdraw.draw.FloatingTextArea','/**\r\n * Gets the preferred size of the overlay.\r\n *\r\n * @param cols\r\n * 		Description of the Parameter\r\n * @return The preferredSize value\r\n */\r\npublic Dimension getPreferredSize(int cols) {\r\n    return new Dimension(textArea.getWidth(), textArea.getHeight());\r\n}'),(2025,'getText()','org.jhotdraw.draw.FloatingTextArea.getText()','181','org.jhotdraw.draw.FloatingTextArea','/**\r\n * Gets the text contents of the overlay.\r\n *\r\n * @return The text value\r\n */\r\npublic String getText() {\r\n    return textArea.getText();\r\n}'),(2026,'requestFocus()','org.jhotdraw.draw.FloatingTextArea.requestFocus()','181','org.jhotdraw.draw.FloatingTextArea','public void requestFocus() {\r\n    textArea.requestFocus();\r\n}'),(2027,'setBounds(java.awt.geom.Rectangle2D$Double,java.lang.String)','org.jhotdraw.draw.FloatingTextArea.setBounds(java.awt.geom.Rectangle2D$Double,java.lang.String)','181','org.jhotdraw.draw.FloatingTextArea','/**\r\n * Positions and sizes the overlay.\r\n *\r\n * @param r\r\n * 		the bounding Rectangle2D.Double for the overlay\r\n * @param text\r\n * 		the text to edit\r\n */\r\npublic void setBounds(Rectangle2D.Double r, String text) {\r\n    textArea.setText(text);\r\n    editScrollContainer.setBounds(view.drawingToView(r));\r\n    editScrollContainer.setVisible(true);\r\n    textArea.setCaretPosition(0);\r\n    textArea.requestFocus();\r\n}'),(2028,'updateWidget()','org.jhotdraw.draw.FloatingTextArea.updateWidget()','181','org.jhotdraw.draw.FloatingTextArea','protected void updateWidget() {\r\n    Font f = editedFigure.getFont();\r\n    // FIXME - Should scale with fractional value!\r\n    f = f.deriveFont(f.getStyle(), ((float) ((editedFigure.getFontSize()) * (view.getScaleFactor()))));\r\n    textArea.setFont(f);\r\n    textArea.setForeground(editedFigure.getTextColor());\r\n    textArea.setBackground(editedFigure.getFillColor());\r\n    // textArea.setBounds(getFieldBounds(editedFigure));\r\n}'),(2029,'-init-()','org.jhotdraw.draw.FloatingTextField.-init-()','182','org.jhotdraw.draw.FloatingTextField','1() {\r\n}'),(2030,'addActionListener(java.awt.event.ActionListener)','org.jhotdraw.draw.FloatingTextField.addActionListener(java.awt.event.ActionListener)','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Adds an action listener\r\n */\r\npublic void addActionListener(ActionListener listener) {\r\n    textField.addActionListener(listener);\r\n}'),(2031,'createOverlay(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView)','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Creates the overlay for the given Component.\r\n */\r\npublic void createOverlay(DrawingView view) {\r\n    createOverlay(view, null);\r\n}'),(2032,'createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(textField, 0);\r\n    textField.setText(figure.getText());\r\n    textField.setColumns(figure.getTextColumns());\r\n    textField.selectAll();\r\n    textField.setVisible(true);\r\n    editedFigure = figure;\r\n    editedFigure.addFigureListener(figureHandler);\r\n    this.view = view;\r\n    updateWidget();\r\n}'),(2033,'endOverlay()','org.jhotdraw.draw.FloatingTextField.endOverlay()','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Removes the overlay.\r\n */\r\npublic void endOverlay() {\r\n    view.getComponent().requestFocus();\r\n    if ((textField) != null) {\r\n        textField.setVisible(false);\r\n        view.getComponent().remove(textField);\r\n        Rectangle bounds = textField.getBounds();\r\n        view.getComponent().repaint(bounds.x, bounds.y, bounds.width, bounds.height);\r\n    }\r\n    if ((editedFigure) != null) {\r\n        editedFigure.removeFigureListener(figureHandler);\r\n        editedFigure = null;\r\n    }\r\n}'),(2034,'getInsets()','org.jhotdraw.draw.FloatingTextField.getInsets()','182','org.jhotdraw.draw.FloatingTextField','public Insets getInsets() {\r\n    return textField.getInsets();\r\n}'),(2035,'getPreferredSize(int)','org.jhotdraw.draw.FloatingTextField.getPreferredSize(int)','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Gets the preferred size of the overlay.\r\n */\r\npublic Dimension getPreferredSize(int cols) {\r\n    textField.setColumns(cols);\r\n    return textField.getPreferredSize();\r\n}'),(2036,'getText()','org.jhotdraw.draw.FloatingTextField.getText()','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Gets the text contents of the overlay.\r\n */\r\npublic String getText() {\r\n    return textField.getText();\r\n}'),(2037,'removeActionListener(java.awt.event.ActionListener)','org.jhotdraw.draw.FloatingTextField.removeActionListener(java.awt.event.ActionListener)','182','org.jhotdraw.draw.FloatingTextField','/**\r\n * Remove an action listener\r\n */\r\npublic void removeActionListener(ActionListener listener) {\r\n    textField.removeActionListener(listener);\r\n}'),(2038,'requestFocus()','org.jhotdraw.draw.FloatingTextField.requestFocus()','182','org.jhotdraw.draw.FloatingTextField','public void requestFocus() {\r\n    textField.requestFocus();\r\n}'),(2039,'updateWidget()','org.jhotdraw.draw.FloatingTextField.updateWidget()','182','org.jhotdraw.draw.FloatingTextField','protected void updateWidget() {\r\n    Font font = editedFigure.getFont();\r\n    font = font.deriveFont(font.getStyle(), ((float) ((editedFigure.getFontSize()) * (view.getScaleFactor()))));\r\n    textField.setFont(font);\r\n    textField.setForeground(editedFigure.getTextColor());\r\n    textField.setBackground(editedFigure.getFillColor());\r\n    Rectangle2D.Double fDrawBounds = editedFigure.getBounds();\r\n    Point2D.Double fDrawLoc = new Point2D.Double(fDrawBounds.getX(), fDrawBounds.getY());\r\n    if ((AttributeKeys.TRANSFORM.get(editedFigure)) != null) {\r\n        AttributeKeys.TRANSFORM.get(editedFigure).transform(fDrawLoc, fDrawLoc);\r\n    }\r\n    Point fViewLoc = view.drawingToView(fDrawLoc);\r\n    Rectangle fViewBounds = view.drawingToView(fDrawBounds);\r\n    fViewBounds.x = fViewLoc.x;\r\n    fViewBounds.y = fViewLoc.y;\r\n    Dimension tfDim = textField.getPreferredSize();\r\n    Insets tfInsets = textField.getInsets();\r\n    float fontBaseline = textField.getGraphics().getFontMetrics(font).getMaxAscent();\r\n    double fBaseline = (editedFigure.getBaseline()) * (view.getScaleFactor());\r\n    textField.setBounds(((fViewBounds.x) - (tfInsets.left)), (((fViewBounds.y) - (tfInsets.top)) - ((int) (fontBaseline - fBaseline))), Math.max((((fViewBounds.width) + (tfInsets.left)) + (tfInsets.right)), tfDim.width), Math.max((((fViewBounds.height) + (tfInsets.top)) + (tfInsets.bottom)), tfDim.height));\r\n}'),(2040,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure)','183','org.jhotdraw.draw.FontSizeHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic FontSizeHandle(TextHolderFigure owner) {\r\n    super(owner, new FontSizeLocator());\r\n}'),(2041,'-init-(org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.Locator)','183','org.jhotdraw.draw.FontSizeHandle','public FontSizeHandle(TextHolderFigure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(2042,'-init-()','org.jhotdraw.draw.FontSizeHandle.-init-()','183','org.jhotdraw.draw.FontSizeHandle','1() {\r\n}'),(2043,'basicGetBounds()','org.jhotdraw.draw.FontSizeHandle.basicGetBounds()','183','org.jhotdraw.draw.FontSizeHandle','@Override\r\nprotected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(2044,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.FontSizeHandle.draw(java.awt.Graphics2D)','183','org.jhotdraw.draw.FontSizeHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR))));\r\n}'),(2045,'getCursor()','org.jhotdraw.draw.FontSizeHandle.getCursor()','183','org.jhotdraw.draw.FontSizeHandle','public Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR);\r\n}'),(2046,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.FontSizeHandle.getToolTipText(java.awt.Point)','183','org.jhotdraw.draw.FontSizeHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    return ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"handle.fontSize.toolTipText\");\r\n}'),(2047,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.FontSizeHandle.keyPressed(java.awt.event.KeyEvent)','183','org.jhotdraw.draw.FontSizeHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    final TextHolderFigure textOwner = ((TextHolderFigure) (getOwner()));\r\n    oldSize = newSize = textOwner.getFontSize();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((newSize) > 1) {\r\n                newSize -= 1.0F;\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            (newSize)++;\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            evt.consume();\r\n            break;\r\n    }\r\n    if ((newSize) != (oldSize)) {\r\n        restoreData = textOwner.getAttributesRestoreData();\r\n        textOwner.willChange();\r\n        textOwner.setFontSize(newSize);\r\n        textOwner.changed();\r\n        final Object editRestoreData = restoreData;\r\n        final float editNewSize = newSize;\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n                return labels.getString(\"attribute.fontSize\");\r\n            }\r\n\r\n            @Override\r\n            public void undo() {\r\n                super.undo();\r\n                textOwner.willChange();\r\n                textOwner.restoreAttributesTo(editRestoreData);\r\n                textOwner.changed();\r\n            }\r\n\r\n            @Override\r\n            public void redo() {\r\n                super.redo();\r\n                textOwner.willChange();\r\n                textOwner.setFontSize(newSize);\r\n                textOwner.changed();\r\n            }\r\n        };\r\n        fireUndoableEditHappened(edit);\r\n    }\r\n}'),(2048,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.FontSizeHandle.trackEnd(java.awt.Point,java.awt.Point,int)','183','org.jhotdraw.draw.FontSizeHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    final TextHolderFigure textOwner = ((TextHolderFigure) (getOwner()));\r\n    final Object editRestoreData = restoreData;\r\n    final float editNewSize = newSize;\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n            return labels.getString(\"attribute.fontSize.text\");\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            textOwner.willChange();\r\n            textOwner.restoreAttributesTo(editRestoreData);\r\n            textOwner.changed();\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            textOwner.willChange();\r\n            textOwner.setFontSize(newSize);\r\n            textOwner.changed();\r\n        }\r\n    };\r\n    fireUndoableEditHappened(edit);\r\n}'),(2049,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.FontSizeHandle.trackStart(java.awt.Point,int)','183','org.jhotdraw.draw.FontSizeHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    TextHolderFigure textOwner = ((TextHolderFigure) (getOwner()));\r\n    oldSize = newSize = textOwner.getFontSize();\r\n    restoreData = textOwner.getAttributesRestoreData();\r\n}'),(2050,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.FontSizeHandle.trackStep(java.awt.Point,java.awt.Point,int)','183','org.jhotdraw.draw.FontSizeHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    TextHolderFigure textOwner = ((TextHolderFigure) (getOwner()));\r\n    Point2D.Double anchor2D = view.viewToDrawing(anchor);\r\n    Point2D.Double lead2D = view.viewToDrawing(lead);\r\n    if ((AttributeKeys.TRANSFORM.get(textOwner)) != null) {\r\n        try {\r\n            AttributeKeys.TRANSFORM.get(textOwner).inverseTransform(anchor2D, anchor2D);\r\n            AttributeKeys.TRANSFORM.get(textOwner).inverseTransform(lead2D, lead2D);\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    newSize = ((float) (Math.max(1, (((oldSize) + (lead2D.y)) - (anchor2D.y)))));\r\n    textOwner.willChange();\r\n    textOwner.setFontSize(newSize);\r\n    textOwner.changed();\r\n}'),(2051,'-init-()','org.jhotdraw.draw.FontSizeLocator.-init-()','184','org.jhotdraw.draw.FontSizeLocator','/**\r\n * Creates a new instance.\r\n */\r\npublic FontSizeLocator() {\r\n}'),(2052,'locate(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure)','184','org.jhotdraw.draw.FontSizeLocator','/**\r\n * Locates a position on the provided figure.\r\n *\r\n * @return a Point2D.Double on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner) {\r\n    Point2D.Double p = ((Point2D.Double) (owner.getStartPoint().clone()));\r\n    if (owner instanceof TextHolderFigure) {\r\n        p.y += ((TextHolderFigure) (owner)).getFontSize();\r\n        p.y += ((TextHolderFigure) (owner)).getInsets().top;\r\n    } else {\r\n        p.y += AttributeKeys.FONT_SIZE.get(owner);\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        AttributeKeys.TRANSFORM.get(owner).transform(p, p);\r\n    }\r\n    return p;\r\n}'),(2053,'locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','184','org.jhotdraw.draw.FontSizeLocator','public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}'),(2054,'-init-(java.awt.geom.GeneralPath,double)','org.jhotdraw.draw.GeneralPathTip.-init-(java.awt.geom.GeneralPath,double)','185','org.jhotdraw.draw.GeneralPathTip','/**\r\n * Creates a new instance.\r\n */\r\npublic GeneralPathTip(GeneralPath path, double decorationRadius) {\r\n    this(path, decorationRadius, false, true, false);\r\n}'),(2055,'-init-(java.awt.geom.GeneralPath,double,boolean,boolean,boolean)','org.jhotdraw.draw.GeneralPathTip.-init-(java.awt.geom.GeneralPath,double,boolean,boolean,boolean)','185','org.jhotdraw.draw.GeneralPathTip','public GeneralPathTip(GeneralPath path, double decorationRadius, boolean isFilled, boolean isStroked, boolean isSolid) {\r\n    super(isFilled, isStroked, isSolid);\r\n    this.path = path;\r\n    this.decorationRadius = decorationRadius;\r\n}'),(2056,'getDecoratorPath(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.GeneralPathTip.getDecoratorPath(org.jhotdraw.draw.Figure)','185','org.jhotdraw.draw.GeneralPathTip','protected GeneralPath getDecoratorPath(Figure f) {\r\n    return ((GeneralPath) (path.clone()));\r\n}'),(2057,'getDecoratorPathRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.GeneralPathTip.getDecoratorPathRadius(org.jhotdraw.draw.Figure)','185','org.jhotdraw.draw.GeneralPathTip','protected double getDecoratorPathRadius(Figure f) {\r\n    return decorationRadius;\r\n}'),(2058,'-init-(org.jhotdraw.draw.Figure,java.lang.Object,java.lang.Object)','org.jhotdraw.draw.GeometryEdit.-init-(org.jhotdraw.draw.Figure,java.lang.Object,java.lang.Object)','186','org.jhotdraw.draw.GeometryEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic GeometryEdit(Figure owner, Object oldGeometry, Object newGeometry) {\r\n    this.owner = owner;\r\n    this.oldGeometry = oldGeometry;\r\n    this.newGeometry = newGeometry;\r\n}'),(2059,'getPresentationName()','org.jhotdraw.draw.GeometryEdit.getPresentationName()','186','org.jhotdraw.draw.GeometryEdit','public String getPresentationName() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n    return labels.getString(\"edit.transform.text\");\r\n}'),(2060,'redo()','org.jhotdraw.draw.GeometryEdit.redo()','186','org.jhotdraw.draw.GeometryEdit','public void redo() throws CannotRedoException {\r\n    super.redo();\r\n    owner.willChange();\r\n    owner.restoreTransformTo(newGeometry);\r\n    owner.changed();\r\n}'),(2061,'undo()','org.jhotdraw.draw.GeometryEdit.undo()','186','org.jhotdraw.draw.GeometryEdit','public void undo() throws CannotUndoException {\r\n    super.undo();\r\n    owner.willChange();\r\n    owner.restoreTransformTo(oldGeometry);\r\n    owner.changed();\r\n}'),(2062,'-init-(org.jhotdraw.draw.GraphicalCompositeFigure)','org.jhotdraw.draw.GraphicalCompositeFigure.-init-(org.jhotdraw.draw.GraphicalCompositeFigure)','188','org.jhotdraw.draw.GraphicalCompositeFigure','private PresentationFigureHandler(GraphicalCompositeFigure owner) {\r\n    this.owner = owner;\r\n}'),(2063,'-init-()','org.jhotdraw.draw.GraphicalCompositeFigure.-init-()','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Default constructor which uses nothing as presentation\r\n * figure. This constructor is needed by the Storable mechanism.\r\n */\r\npublic GraphicalCompositeFigure() {\r\n    this(null);\r\n}'),(2064,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.GraphicalCompositeFigure.-init-(org.jhotdraw.draw.Figure)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Constructor which creates a GraphicalCompositeFigure with\r\n * a given graphical figure for presenting it.\r\n *\r\n * @param newPresentationFigure	figure\r\n * 		which renders the container\r\n */\r\npublic GraphicalCompositeFigure(Figure newPresentationFigure) {\r\n    super();\r\n    setPresentationFigure(newPresentationFigure);\r\n}'),(2065,'addNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.GraphicalCompositeFigure.addNotify(org.jhotdraw.draw.Drawing)','188','org.jhotdraw.draw.GraphicalCompositeFigure','public void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().addNotify(drawing);\r\n    }\r\n}'),(2066,'applyAttributesTo(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.GraphicalCompositeFigure.applyAttributesTo(org.jhotdraw.draw.Figure)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}'),(2067,'basicSetPresentationFigureBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GraphicalCompositeFigure.basicSetPresentationFigureBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','188','org.jhotdraw.draw.GraphicalCompositeFigure','protected void basicSetPresentationFigureBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().setBounds(anchor, lead);\r\n    }\r\n}');
INSERT INTO `methods` VALUES (2068,'chop(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GraphicalCompositeFigure.chop(java.awt.geom.Point2D$Double)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * This is a default implementation that chops the point at the rectangle\r\n * returned by getBounds() of the figure.\r\n * <p>\r\n * Figures which have a non-rectangular shape need to override this method.\r\n * <p>\r\n * This method takes the following attributes into account:\r\n * AttributeKeys.STROKE_COLOR, AttributeKeys.STROKE_PLACEMENT, and\r\n * AttributeKeys.StrokeTotalWidth.\r\n */\r\npublic Point2D.Double chop(Point2D.Double from) {\r\n    Rectangle2D.Double r = getBounds();\r\n    if ((AttributeKeys.STROKE_COLOR.get(this)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(this)) {\r\n            case CENTER :\r\n            default :\r\n                grow = AttributeKeys.getStrokeTotalWidth(this);\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(this);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    return Geom.angleToPoint(r, Geom.pointToAngle(r, from));\r\n}'),(2069,'clone()','org.jhotdraw.draw.GraphicalCompositeFigure.clone()','188','org.jhotdraw.draw.GraphicalCompositeFigure','public GraphicalCompositeFigure clone() {\r\n    GraphicalCompositeFigure that = ((GraphicalCompositeFigure) (super.clone()));\r\n    that.presentationFigure = ((this.presentationFigure) == null) ? null : ((Figure) (this.presentationFigure.clone()));\r\n    if ((that.presentationFigure) != null) {\r\n        that.presentationFigure.addFigureListener(that.presentationFigureHandler);\r\n    }\r\n    return that;\r\n}'),(2070,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GraphicalCompositeFigure.contains(java.awt.geom.Point2D$Double)','188','org.jhotdraw.draw.GraphicalCompositeFigure','public boolean contains(Point2D.Double p) {\r\n    if ((getPresentationFigure()) != null) {\r\n        return getPresentationFigure().contains(p);\r\n    } else {\r\n        return super.contains(p);\r\n    }\r\n}'),(2071,'createHandles(int)','org.jhotdraw.draw.GraphicalCompositeFigure.createHandles(int)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Return default handles from the presentation figure.\r\n */\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    if (detailLevel == 0) {\r\n        MoveHandle.addMoveHandles(this, handles);\r\n    }\r\n    return handles;\r\n    // return getPresentationFigure().getHandles();\r\n}'),(2072,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.GraphicalCompositeFigure.draw(java.awt.Graphics2D)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Draw the figure. This method is delegated to the encapsulated presentation figure.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawPresentationFigure(g);\r\n    super.draw(g);\r\n}'),(2073,'drawPresentationFigure(java.awt.Graphics2D)','org.jhotdraw.draw.GraphicalCompositeFigure.drawPresentationFigure(java.awt.Graphics2D)','188','org.jhotdraw.draw.GraphicalCompositeFigure','protected void drawPresentationFigure(Graphics2D g) {\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().draw(g);\r\n    }\r\n}'),(2074,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.GraphicalCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Gets an attribute from the figure.\r\n */\r\n@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    if ((getPresentationFigure()) != null) {\r\n        return key.get(getPresentationFigure());\r\n    } else {\r\n        return !(attributes.containsKey(key)) ? key.getDefaultValue() : key.get(attributes);\r\n    }\r\n}'),(2075,'getAttributeKey(java.lang.String)','org.jhotdraw.draw.GraphicalCompositeFigure.getAttributeKey(java.lang.String)','188','org.jhotdraw.draw.GraphicalCompositeFigure','protected AttributeKey getAttributeKey(String name) {\r\n    return AttributeKeys.supportedAttributeMap.get(name);\r\n}'),(2076,'getAttributes()','org.jhotdraw.draw.GraphicalCompositeFigure.getAttributes()','188','org.jhotdraw.draw.GraphicalCompositeFigure','public Map<AttributeKey, Object> getAttributes() {\r\n    return new HashMap<AttributeKey, Object>(attributes);\r\n}'),(2077,'getBounds()','org.jhotdraw.draw.GraphicalCompositeFigure.getBounds()','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Return the logcal display area. This method is delegated to the encapsulated\r\n * presentation figure.\r\n */\r\npublic Rectangle2D.Double getBounds() {\r\n    if ((getPresentationFigure()) == null)\r\n        return super.getBounds();\r\n\r\n    return getPresentationFigure().getBounds();\r\n}'),(2078,'getDrawingArea()','org.jhotdraw.draw.GraphicalCompositeFigure.getDrawingArea()','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Return the draw area. This method is delegated to the\r\n * encapsulated presentation figure.\r\n */\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r;\r\n    if ((getPresentationFigure()) != null) {\r\n        Rectangle2D.Double presentationBounds = getPresentationFigure().getDrawingArea();\r\n        r = super.getDrawingArea();\r\n        if (r.isEmpty()) {\r\n            r = presentationBounds;\r\n        } else {\r\n            r.add(presentationBounds);\r\n        }\r\n    } else {\r\n        r = super.getDrawingArea();\r\n    }\r\n    return r;\r\n}'),(2079,'getPresentationFigure()','org.jhotdraw.draw.GraphicalCompositeFigure.getPresentationFigure()','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Get a figure which renders this BasicCompositeFigure. The presentation\r\n * tasks for the BasicCompositeFigure are delegated to this presentation\r\n * figure.\r\n *\r\n * @return figure takes over the presentation tasks\r\n */\r\npublic Figure getPresentationFigure() {\r\n    return presentationFigure;\r\n}'),(2080,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.GraphicalCompositeFigure.read(org.jhotdraw.xml.DOMInput)','188','org.jhotdraw.draw.GraphicalCompositeFigure','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readAttributes(in);\r\n}'),(2081,'readAttributes(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.GraphicalCompositeFigure.readAttributes(org.jhotdraw.xml.DOMInput)','188','org.jhotdraw.draw.GraphicalCompositeFigure','@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    key.basicSet(this, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(2082,'remap(java.util.HashMap,boolean)','org.jhotdraw.draw.GraphicalCompositeFigure.remap(java.util.HashMap,boolean)','188','org.jhotdraw.draw.GraphicalCompositeFigure','public void remap(HashMap<Figure, Figure> oldToNew, boolean disconnectIfNotInMap) {\r\n    super.remap(oldToNew, disconnectIfNotInMap);\r\n    if ((presentationFigure) != null) {\r\n        presentationFigure.remap(oldToNew, disconnectIfNotInMap);\r\n    }\r\n}'),(2083,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.GraphicalCompositeFigure.removeNotify(org.jhotdraw.draw.Drawing)','188','org.jhotdraw.draw.GraphicalCompositeFigure','public void removeNotify(Drawing drawing) {\r\n    super.removeNotify(drawing);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().removeNotify(drawing);\r\n    }\r\n}'),(2084,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.GraphicalCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\n@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        if ((getPresentationFigure()) != null) {\r\n            getPresentationFigure().setAttribute(key, newValue);\r\n        }\r\n        super.setAttribute(key, newValue);\r\n        Object oldValue = attributes.put(key, newValue);\r\n    }\r\n}'),(2085,'setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)','org.jhotdraw.draw.GraphicalCompositeFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)','188','org.jhotdraw.draw.GraphicalCompositeFigure','public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}'),(2086,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GraphicalCompositeFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Moves the figure. This is the\r\n * method that subclassers override. Clients usually\r\n * call displayBox.\r\n */\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    if ((getLayouter()) == null) {\r\n        super.setBounds(anchor, lead);\r\n        basicSetPresentationFigureBounds(anchor, lead);\r\n    } else {\r\n        Rectangle2D.Double r = getLayouter().layout(this, anchor, lead);\r\n        basicSetPresentationFigureBounds(new Point2D.Double(r.getX(), r.getY()), new Point2D.Double(Math.max(lead.x, ((int) (r.getMaxX()))), Math.max(lead.y, ((int) (r.getMaxY())))));\r\n        invalidate();\r\n    }\r\n}'),(2087,'setPresentationFigure(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.GraphicalCompositeFigure.setPresentationFigure(org.jhotdraw.draw.Figure)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Set a figure which renders this BasicCompositeFigure. The presentation\r\n * tasks for the BasicCompositeFigure are delegated to this presentation\r\n * figure.\r\n *\r\n * @param newPresentationFigure	figure\r\n * 		takes over the presentation tasks\r\n */\r\npublic void setPresentationFigure(Figure newPresentationFigure) {\r\n    if ((this.presentationFigure) != null) {\r\n        this.presentationFigure.removeFigureListener(presentationFigureHandler);\r\n        if ((getDrawing()) != null) {\r\n            this.presentationFigure.removeNotify(getDrawing());\r\n        }\r\n    }\r\n    this.presentationFigure = newPresentationFigure;\r\n    if ((this.presentationFigure) != null) {\r\n        this.presentationFigure.addFigureListener(presentationFigureHandler);\r\n        if ((getDrawing()) != null) {\r\n            this.presentationFigure.addNotify(getDrawing());\r\n        }\r\n    }\r\n    // FIXME: We should calculate the layout here.\r\n}'),(2088,'superBasicSetBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GraphicalCompositeFigure.superBasicSetBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','188','org.jhotdraw.draw.GraphicalCompositeFigure','protected void superBasicSetBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    super.setBounds(anchor, lead);\r\n}'),(2089,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.GraphicalCompositeFigure.transform(java.awt.geom.AffineTransform)','188','org.jhotdraw.draw.GraphicalCompositeFigure','/**\r\n * Standard presentation method which is delegated to the encapsulated presentation figure.\r\n * The presentation figure is moved as well as all contained figures.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    super.transform(tx);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().transform(tx);\r\n    }\r\n}'),(2090,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.GraphicalCompositeFigure.write(org.jhotdraw.xml.DOMOutput)','188','org.jhotdraw.draw.GraphicalCompositeFigure','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeAttributes(out);\r\n}'),(2091,'writeAttributes(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.GraphicalCompositeFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)','188','org.jhotdraw.draw.GraphicalCompositeFigure','protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}'),(2092,'-init-(org.jhotdraw.draw.GraphicalCompositeFigure)','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.-init-(org.jhotdraw.draw.GraphicalCompositeFigure)','187','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler','private PresentationFigureHandler(GraphicalCompositeFigure owner) {\r\n    this.owner = owner;\r\n}'),(2093,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)','187','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler','@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.fireAreaInvalidated(e.getInvalidatedArea());\r\n    }\r\n}'),(2094,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','187','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler','@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.willChange();\r\n        owner.fireFigureChanged(e);\r\n        owner.changed();\r\n    }\r\n}'),(2095,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','187','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler','@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    owner.remove(e.getFigure());\r\n}'),(2096,'undoableEditHappened(javax.swing.event.UndoableEditEvent)','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.undoableEditHappened(javax.swing.event.UndoableEditEvent)','187','org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler','public void undoableEditHappened(UndoableEditEvent e) {\r\n    owner.fireUndoableEditHappened(e.getEdit());\r\n}'),(2097,'-init-()','org.jhotdraw.draw.GridConstrainer.-init-()','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Creates a new instance with a grid of 1x1.\r\n */\r\npublic GridConstrainer() {\r\n    this(1.0, 1.0, 0.0, false);\r\n}'),(2098,'-init-(double,double)','org.jhotdraw.draw.GridConstrainer.-init-(double,double)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Creates a new instance with the specified grid size,\r\n * and by 11.25° (in degrees) for rotations.\r\n * The grid is visible.\r\n *\r\n * @param width\r\n * 		The width of a grid cell.\r\n * @param height\r\n * 		The height of a grid cell.\r\n */\r\npublic GridConstrainer(double width, double height) {\r\n    this(width, height, ((Math.PI) / 8.0), true);\r\n}'),(2099,'-init-(double,double,boolean)','org.jhotdraw.draw.GridConstrainer.-init-(double,double,boolean)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Creates a new instance with the specified grid size.\r\n * and by 11.25° (in degrees) for rotations.\r\n *\r\n * @param width\r\n * 		The width of a grid cell.\r\n * @param height\r\n * 		The height of a grid cell.\r\n * @param visible\r\n * 		Wether the grid is visible or not.\r\n */\r\npublic GridConstrainer(double width, double height, boolean visible) {\r\n    this(width, height, ((Math.PI) / 8.0), visible);\r\n}'),(2100,'-init-(double,double,double,boolean)','org.jhotdraw.draw.GridConstrainer.-init-(double,double,double,boolean)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Creates a new instance with the specified grid size.\r\n *\r\n * @param width\r\n * 		The width of a grid cell.\r\n * @param height\r\n * 		The height of a grid cell.\r\n * @param theta\r\n * 		The theta for rotations in radians.\r\n * @param visible\r\n * 		Wether the grid is visible or not.\r\n */\r\npublic GridConstrainer(double width, double height, double theta, boolean visible) {\r\n    if ((width <= 0) || (height <= 0)) {\r\n        throw new IllegalArgumentException(\"Width or height is <= 0\");\r\n    }\r\n    this.width = width;\r\n    this.height = height;\r\n    this.theta = theta;\r\n    this.isVisible = visible;\r\n}'),(2101,'constrainAngle(double)','org.jhotdraw.draw.GridConstrainer.constrainAngle(double)','189','org.jhotdraw.draw.GridConstrainer','public double constrainAngle(double angle) {\r\n    // No step specified then no constraining\r\n    if ((theta) == 0) {\r\n        return angle;\r\n    }\r\n    double factor = Math.round((angle / (theta)));\r\n    return (theta) * factor;\r\n}'),(2102,'constrainPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GridConstrainer.constrainPoint(java.awt.geom.Point2D$Double)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Constrains a point to the closest grid point in any direction.\r\n */\r\npublic Point2D.Double constrainPoint(Point2D.Double p) {\r\n    p.x = (Math.round(((p.x) / (width)))) * (width);\r\n    p.y = (Math.round(((p.y) / (height)))) * (height);\r\n    return p;\r\n}'),(2103,'constrainPoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.GridConstrainer.constrainPoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Constrains the placement of a point towards a direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * 		A point on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained point.\r\n */\r\nprotected Point2D.Double constrainPoint(Point2D.Double p, TranslationDirection dir) {\r\n    Point2D.Double p0 = constrainPoint(((Point2D.Double) (p.clone())));\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            if ((p0.y) < (p.y)) {\r\n                p.y = p0.y;\r\n            } else\r\n                if ((p0.y) > (p.y)) {\r\n                    p.y = (p0.y) - (height);\r\n                }\r\n\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            if ((p0.y) < (p.y)) {\r\n                p.y = (p0.y) + (height);\r\n            } else\r\n                if ((p0.y) > (p.y)) {\r\n                    p.y = p0.y;\r\n                }\r\n\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            if ((p0.x) < (p.x)) {\r\n                p.x = p0.x;\r\n            } else\r\n                if ((p0.x) > (p.x)) {\r\n                    p.x = (p0.x) - (width);\r\n                }\r\n\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            if ((p0.x) < (p.x)) {\r\n                p.x = (p0.x) + (width);\r\n            } else\r\n                if ((p0.x) > (p.x)) {\r\n                    p.x = p0.x;\r\n                }\r\n\r\n            break;\r\n    }\r\n    return p;\r\n}'),(2104,'constrainRectangle(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.GridConstrainer.constrainRectangle(java.awt.geom.Rectangle2D$Double)','189','org.jhotdraw.draw.GridConstrainer','public Rectangle2D.Double constrainRectangle(Rectangle2D.Double r) {\r\n    Point2D.Double p0 = constrainPoint(new Point2D.Double(r.x, r.y));\r\n    Point2D.Double p1 = constrainPoint(new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n    if ((Math.abs(((p0.x) - (r.x)))) < (Math.abs((((p1.x) - (r.x)) - (r.width))))) {\r\n        r.x = p0.x;\r\n    } else {\r\n        r.x = (p1.x) - (r.width);\r\n    }\r\n    if ((Math.abs(((p0.y) - (r.y)))) < (Math.abs((((p1.y) - (r.y)) - (r.height))))) {\r\n        r.y = p0.y;\r\n    } else {\r\n        r.y = (p1.y) - (r.height);\r\n    }\r\n    return r;\r\n}'),(2105,'constrainRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.GridConstrainer.constrainRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Constrains the placement of a rectangle towards a direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method does not change the size of the rectangle.\r\n *\r\n * @param r\r\n * 		A rectangle on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained rectangle.\r\n */\r\nprotected Rectangle2D.Double constrainRectangle(Rectangle2D.Double r, TranslationDirection dir) {\r\n    Point2D.Double p0 = new Point2D.Double(r.x, r.y);\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case WEST :\r\n            constrainPoint(p0, dir);\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n            p0.x += r.width;\r\n            constrainPoint(p0, dir);\r\n            p0.x -= r.width;\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n            p0.y += r.height;\r\n            constrainPoint(p0, dir);\r\n            p0.y -= r.height;\r\n            break;\r\n        case SOUTH_EAST :\r\n            p0.y += r.height;\r\n            p0.x += r.width;\r\n            constrainPoint(p0, dir);\r\n            p0.y -= r.height;\r\n            p0.x -= r.width;\r\n            break;\r\n    }\r\n    r.x = p0.x;\r\n    r.y = p0.y;\r\n    return r;\r\n}'),(2106,'draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.GridConstrainer.draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)','189','org.jhotdraw.draw.GridConstrainer','public void draw(Graphics2D g, DrawingView view) {\r\n    if (isVisible) {\r\n        AffineTransform t = view.getDrawingToViewTransform();\r\n        Rectangle viewBounds = g.getClipBounds();\r\n        Rectangle2D.Double bounds = view.viewToDrawing(viewBounds);\r\n        Point2D.Double origin = constrainPoint(new Point2D.Double(bounds.x, bounds.y));\r\n        Point2D.Double point = new Point2D.Double();\r\n        Point2D.Double viewPoint = new Point2D.Double();\r\n        // vertical grid lines are only drawn, if they are at least two\r\n        // pixels apart on the view coordinate system.\r\n        if (((width) * (view.getScaleFactor())) > 2) {\r\n            g.setColor(GridConstrainer.minorColor);\r\n            for (int i = ((int) ((origin.x) / (width))), m = ((int) (((origin.x) + (bounds.width)) / (width))) + 1; i <= m; i++) {\r\n                g.setColor(((i % (majorGridSpacing)) == 0 ? GridConstrainer.majorColor : GridConstrainer.minorColor));\r\n                point.x = (width) * i;\r\n                t.transform(point, viewPoint);\r\n                g.drawLine(((int) (viewPoint.x)), ((int) (viewBounds.y)), ((int) (viewPoint.x)), ((int) ((viewBounds.y) + (viewBounds.height))));\r\n            }\r\n        } else\r\n            if ((((width) * (majorGridSpacing)) * (view.getScaleFactor())) > 2) {\r\n                g.setColor(GridConstrainer.majorColor);\r\n                for (int i = ((int) ((origin.x) / (width))), m = ((int) (((origin.x) + (bounds.width)) / (width))) + 1; i <= m; i++) {\r\n                    if ((i % (majorGridSpacing)) == 0) {\r\n                        point.x = (width) * i;\r\n                        t.transform(point, viewPoint);\r\n                        g.drawLine(((int) (viewPoint.x)), ((int) (viewBounds.y)), ((int) (viewPoint.x)), ((int) ((viewBounds.y) + (viewBounds.height))));\r\n                    }\r\n                }\r\n            }\r\n\r\n        // horizontal grid lines are only drawn, if they are at least two\r\n        // pixels apart on the view coordinate system.\r\n        if (((height) * (view.getScaleFactor())) > 2) {\r\n            g.setColor(GridConstrainer.minorColor);\r\n            for (int i = ((int) ((origin.y) / (height))), m = ((int) (((origin.y) + (bounds.height)) / (height))) + 1; i <= m; i++) {\r\n                g.setColor(((i % (majorGridSpacing)) == 0 ? GridConstrainer.majorColor : GridConstrainer.minorColor));\r\n                point.y = (height) * i;\r\n                t.transform(point, viewPoint);\r\n                g.drawLine(((int) (viewBounds.x)), ((int) (viewPoint.y)), ((int) ((viewBounds.x) + (viewBounds.width))), ((int) (viewPoint.y)));\r\n            }\r\n        } else\r\n            if ((((height) * (majorGridSpacing)) * (view.getScaleFactor())) > 2) {\r\n                g.setColor(GridConstrainer.majorColor);\r\n                for (int i = ((int) ((origin.y) / (height))), m = ((int) (((origin.y) + (bounds.height)) / (height))) + 1; i <= m; i++) {\r\n                    if ((i % (majorGridSpacing)) == 0) {\r\n                        point.y = (height) * i;\r\n                        t.transform(point, viewPoint);\r\n                        g.drawLine(((int) (viewBounds.x)), ((int) (viewPoint.y)), ((int) ((viewBounds.x) + (viewBounds.width))), ((int) (viewPoint.y)));\r\n                    }\r\n                }\r\n            }\r\n\r\n    }\r\n}'),(2107,'getHeight()','org.jhotdraw.draw.GridConstrainer.getHeight()','189','org.jhotdraw.draw.GridConstrainer','public double getHeight() {\r\n    return height;\r\n}'),(2108,'getMajorGridSpacing()','org.jhotdraw.draw.GridConstrainer.getMajorGridSpacing()','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Spacing between major grid lines.\r\n */\r\npublic int getMajorGridSpacing() {\r\n    return majorGridSpacing;\r\n}'),(2109,'getTheta()','org.jhotdraw.draw.GridConstrainer.getTheta()','189','org.jhotdraw.draw.GridConstrainer','public double getTheta() {\r\n    return theta;\r\n}'),(2110,'getWidth()','org.jhotdraw.draw.GridConstrainer.getWidth()','189','org.jhotdraw.draw.GridConstrainer','public double getWidth() {\r\n    return width;\r\n}'),(2111,'isVisible()','org.jhotdraw.draw.GridConstrainer.isVisible()','189','org.jhotdraw.draw.GridConstrainer','public boolean isVisible() {\r\n    return isVisible;\r\n}'),(2112,'rotateAngle(double,org.jhotdraw.draw.RotationDirection)','org.jhotdraw.draw.GridConstrainer.rotateAngle(double,org.jhotdraw.draw.RotationDirection)','189','org.jhotdraw.draw.GridConstrainer','public double rotateAngle(double angle, RotationDirection dir) {\r\n    // Check parameters\r\n    if (dir == null) {\r\n        throw new IllegalArgumentException(\"dir must not be null\");\r\n    }\r\n    // Rotate into the specified direction by theta\r\n    angle = constrainAngle(angle);\r\n    switch (dir) {\r\n        case CLOCKWISE :\r\n            angle += theta;\r\n            break;\r\n        case COUNTER_CLOCKWISE :\r\n        default :\r\n            angle -= theta;\r\n            break;\r\n    }\r\n    return angle;\r\n}'),(2113,'setHeight(double)','org.jhotdraw.draw.GridConstrainer.setHeight(double)','189','org.jhotdraw.draw.GridConstrainer','public void setHeight(double newValue) {\r\n    double oldValue = height;\r\n    height = newValue;\r\n    firePropertyChange(\"height\", oldValue, newValue);\r\n    fireStateChanged();\r\n}'),(2114,'setMajorGridSpacing(int)','org.jhotdraw.draw.GridConstrainer.setMajorGridSpacing(int)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Spacing between major grid lines.\r\n */\r\npublic void setMajorGridSpacing(int newValue) {\r\n    int oldValue = majorGridSpacing;\r\n    majorGridSpacing = newValue;\r\n    firePropertyChange(\"majorGridSpacing\", oldValue, newValue);\r\n    fireStateChanged();\r\n}'),(2115,'setTheta(double)','org.jhotdraw.draw.GridConstrainer.setTheta(double)','189','org.jhotdraw.draw.GridConstrainer','public void setTheta(double newValue) {\r\n    double oldValue = theta;\r\n    theta = newValue;\r\n    firePropertyChange(\"theta\", oldValue, newValue);\r\n    fireStateChanged();\r\n}'),(2116,'setVisible(boolean)','org.jhotdraw.draw.GridConstrainer.setVisible(boolean)','189','org.jhotdraw.draw.GridConstrainer','public void setVisible(boolean newValue) {\r\n    boolean oldValue = isVisible;\r\n    isVisible = newValue;\r\n    firePropertyChange(\"visible\", oldValue, newValue);\r\n    fireStateChanged();\r\n}'),(2117,'setWidth(double)','org.jhotdraw.draw.GridConstrainer.setWidth(double)','189','org.jhotdraw.draw.GridConstrainer','public void setWidth(double newValue) {\r\n    double oldValue = width;\r\n    width = newValue;\r\n    firePropertyChange(\"width\", oldValue, newValue);\r\n    fireStateChanged();\r\n}'),(2118,'toString()','org.jhotdraw.draw.GridConstrainer.toString()','189','org.jhotdraw.draw.GridConstrainer','public String toString() {\r\n    return (((((super.toString()) + \"[\") + (width)) + \",\") + (height)) + \"]\";\r\n}'),(2119,'translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.GridConstrainer.translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)','189','org.jhotdraw.draw.GridConstrainer','/**\r\n * Moves a point to the closest grid point in a direction.\r\n */\r\npublic Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir) {\r\n    Point2D.Double p0 = constrainPoint(((Point2D.Double) (p.clone())));\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            p.y = (p0.y) - (height);\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            p.y = (p0.y) + (height);\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            p.x = (p0.x) - (width);\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            p.x = (p0.x) + (width);\r\n            break;\r\n    }\r\n    return p;\r\n}'),(2120,'translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.GridConstrainer.translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)','189','org.jhotdraw.draw.GridConstrainer','public Rectangle2D.Double translateRectangle(Rectangle2D.Double r, TranslationDirection dir) {\r\n    double x = r.x;\r\n    double y = r.y;\r\n    constrainRectangle(r, dir);\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            if (y == (r.y)) {\r\n                r.y -= height;\r\n            }\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            if (y == (r.y)) {\r\n                r.y += height;\r\n            }\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            if (x == (r.x)) {\r\n                r.x -= width;\r\n            }\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            if (x == (r.x)) {\r\n                r.x += width;\r\n            }\r\n            break;\r\n    }\r\n    return r;\r\n}'),(2121,'-init-()','org.jhotdraw.draw.GroupFigure.-init-()','190','org.jhotdraw.draw.GroupFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic GroupFigure() {\r\n}'),(2122,'canConnect()','org.jhotdraw.draw.GroupFigure.canConnect()','190','org.jhotdraw.draw.GroupFigure','public boolean canConnect() {\r\n    return true;\r\n}'),(2123,'chop(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.GroupFigure.chop(java.awt.geom.Point2D$Double)','190','org.jhotdraw.draw.GroupFigure','/**\r\n * This is a default implementation that chops the point at the rectangle\r\n * returned by getBounds() of the figure.\r\n * <p>\r\n * Figures which have a non-rectangular shape need to override this method.\r\n * <p>\r\n * FIXME Invoke chop on each child and return the closest point.\r\n */\r\npublic Point2D.Double chop(Point2D.Double from) {\r\n    Rectangle2D.Double r = getBounds();\r\n    return Geom.angleToPoint(r, Geom.pointToAngle(r, from));\r\n}'),(2124,'addHandleListener(org.jhotdraw.draw.HandleListener)','org.jhotdraw.draw.Handle.addHandleListener(org.jhotdraw.draw.HandleListener)','191','org.jhotdraw.draw.Handle','/**\r\n * Adds a listener for this handle.\r\n */\r\npublic void addHandleListener(HandleListener l);'),(2125,'contains(java.awt.Point)','org.jhotdraw.draw.Handle.contains(java.awt.Point)','191','org.jhotdraw.draw.Handle','/**\r\n * Tests if a point is contained in the handle.\r\n */\r\npublic boolean contains(Point p);'),(2126,'createSecondaryHandles()','org.jhotdraw.draw.Handle.createSecondaryHandles()','191','org.jhotdraw.draw.Handle','/**\r\n * Creates secondary handles.\r\n */\r\npublic Collection<Handle> createSecondaryHandles();'),(2127,'dispose()','org.jhotdraw.draw.Handle.dispose()','191','org.jhotdraw.draw.Handle','/**\r\n * Disposes the resources aquired by the handler.\r\n */\r\npublic void dispose();'),(2128,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.Handle.draw(java.awt.Graphics2D)','191','org.jhotdraw.draw.Handle','/**\r\n * Draws this handle.\r\n * Note: The handle is drawn with the coordinate system of\r\n * the DrawingView.\r\n */\r\npublic void draw(Graphics2D g);'),(2129,'getBounds()','org.jhotdraw.draw.Handle.getBounds()','191','org.jhotdraw.draw.Handle','/**\r\n * Returns the bounding box of the handle.\r\n * Note: The bounding box must be returned in the coordinate\r\n * system of the DrawingView.\r\n */\r\nRectangle getBounds();'),(2130,'getCursor()','org.jhotdraw.draw.Handle.getCursor()','191','org.jhotdraw.draw.Handle','/**\r\n * Returns a cursor for the handle.\r\n */\r\npublic Cursor getCursor();'),(2131,'getDrawingArea()','org.jhotdraw.draw.Handle.getDrawingArea()','191','org.jhotdraw.draw.Handle','/**\r\n * Returns the drawing area of the handle.\r\n * Note: The drawing area must be returned in the coordinate\r\n * system of the DrawingView.\r\n */\r\nRectangle getDrawingArea();'),(2132,'getOwner()','org.jhotdraw.draw.Handle.getOwner()','191','org.jhotdraw.draw.Handle','/**\r\n * Returns the owner of this handle.\r\n */\r\npublic Figure getOwner();'),(2133,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.Handle.getToolTipText(java.awt.Point)','191','org.jhotdraw.draw.Handle','/**\r\n * Returns a tooltip for the specified location.\r\n */\r\npublic String getToolTipText(Point p);'),(2134,'invalidate()','org.jhotdraw.draw.Handle.invalidate()','191','org.jhotdraw.draw.Handle','/**\r\n * Invalidates the handle. This method informs its listeners\r\n * that its current display box is invalid and should be\r\n * refreshed.\r\n */\r\npublic void invalidate();'),(2135,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.Handle.isCombinableWith(org.jhotdraw.draw.Handle)','191','org.jhotdraw.draw.Handle','/**\r\n * Returns true, if this handle is combinable with the specified handle.\r\n * This method is used to determine, if multiple handles need to be tracked,\r\n * when more than one figure is selected.\r\n */\r\npublic boolean isCombinableWith(Handle handle);'),(2136,'removeHandleListener(org.jhotdraw.draw.HandleListener)','org.jhotdraw.draw.Handle.removeHandleListener(org.jhotdraw.draw.HandleListener)','191','org.jhotdraw.draw.Handle','/**\r\n * Removes a listener for this handle.\r\n */\r\nvoid removeHandleListener(HandleListener l);'),(2137,'setView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.Handle.setView(org.jhotdraw.draw.DrawingView)','191','org.jhotdraw.draw.Handle','/**\r\n * Sets the view of the handle.\r\n */\r\npublic void setView(DrawingView view);'),(2138,'trackDoubleClick(java.awt.Point,int)','org.jhotdraw.draw.Handle.trackDoubleClick(java.awt.Point,int)','191','org.jhotdraw.draw.Handle','/**\r\n * Tracks a double click.\r\n */\r\npublic void trackDoubleClick(Point p, int modifiersEx);'),(2139,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.Handle.trackEnd(java.awt.Point,java.awt.Point,int)','191','org.jhotdraw.draw.Handle','/**\r\n * Tracks the end of the interaction.\r\n *\r\n * @param anchor\r\n * 		the position where the interaction started\r\n * @param lead\r\n * 		the current position\r\n */\r\npublic void trackEnd(Point anchor, Point lead, int modifiersEx);'),(2140,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.Handle.trackStart(java.awt.Point,int)','191','org.jhotdraw.draw.Handle','/**\r\n * Tracks the start of the interaction. The default implementation\r\n * does nothing.\r\n *\r\n * @param anchor\r\n * 		the position where the interaction started\r\n */\r\npublic void trackStart(Point anchor, int modifiersEx);'),(2141,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.Handle.trackStep(java.awt.Point,java.awt.Point,int)','191','org.jhotdraw.draw.Handle','/**\r\n * Tracks a step of the interaction.\r\n *\r\n * @param anchor\r\n * 		the position where the interaction started\r\n * @param lead\r\n * 		the current position\r\n */\r\npublic void trackStep(Point anchor, Point lead, int modifiersEx);'),(2142,'viewTransformChanged()','org.jhotdraw.draw.Handle.viewTransformChanged()','191','org.jhotdraw.draw.Handle','/**\r\n * This method is invoked by the drawing view, when its transform\r\n * has changed. This means, that DrawingView.viewToDrawing and\r\n * DrawingView.drawingToView will return different values than they\r\n * did before.\r\n */\r\npublic void viewTransformChanged();'),(2143,'-init-()','org.jhotdraw.draw.HandleAttributeKeys.-init-()','192','org.jhotdraw.draw.HandleAttributeKeys','HandleAttributeKeys() {\r\n}'),(2144,'-init-(org.jhotdraw.draw.Handle,java.awt.Rectangle)','org.jhotdraw.draw.HandleEvent.-init-(org.jhotdraw.draw.Handle,java.awt.Rectangle)','193','org.jhotdraw.draw.HandleEvent','/**\r\n * Creates a new instance.\r\n */\r\npublic HandleEvent(Handle src, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(2145,'getHandle()','org.jhotdraw.draw.HandleEvent.getHandle()','193','org.jhotdraw.draw.HandleEvent','public Handle getHandle() {\r\n    return ((Handle) (getSource()));\r\n}'),(2146,'getInvalidatedArea()','org.jhotdraw.draw.HandleEvent.getInvalidatedArea()','193','org.jhotdraw.draw.HandleEvent','/**\r\n * Gets the bounds of the invalidated area on the drawing view.\r\n */\r\npublic Rectangle getInvalidatedArea() {\r\n    return invalidatedArea;\r\n}'),(2147,'areaInvalidated(org.jhotdraw.draw.HandleEvent)','org.jhotdraw.draw.HandleListener.areaInvalidated(org.jhotdraw.draw.HandleEvent)','194','org.jhotdraw.draw.HandleListener','/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(HandleEvent e);'),(2148,'handleRequestRemove(org.jhotdraw.draw.HandleEvent)','org.jhotdraw.draw.HandleListener.handleRequestRemove(org.jhotdraw.draw.HandleEvent)','194','org.jhotdraw.draw.HandleListener','/**\r\n * Sent when requesting to remove a handle.\r\n */\r\npublic void handleRequestRemove(HandleEvent e);'),(2149,'handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)','org.jhotdraw.draw.HandleListener.handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)','194','org.jhotdraw.draw.HandleListener','/**\r\n * Sent when requesting to add secondary handles.\r\n */\r\npublic void handleRequestSecondaryHandles(HandleEvent e);'),(2150,'-init-(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.HandleMulticaster.-init-(org.jhotdraw.draw.Handle)','195','org.jhotdraw.draw.HandleMulticaster','/**\r\n * Creates a new instance.\r\n */\r\npublic HandleMulticaster(Handle handle) {\r\n    this.handles = new LinkedList<Handle>();\r\n    this.handles.add(handle);\r\n}'),(2151,'-init-(java.util.Collection)','org.jhotdraw.draw.HandleMulticaster.-init-(java.util.Collection)','195','org.jhotdraw.draw.HandleMulticaster','/**\r\n * Creates a new instance.\r\n */\r\npublic HandleMulticaster(Collection<Handle> handles) {\r\n    this.handles = new LinkedList<Handle>(handles);\r\n}'),(2152,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.HandleMulticaster.draw(java.awt.Graphics2D)','195','org.jhotdraw.draw.HandleMulticaster','public void draw(Graphics2D g) {\r\n    for (Handle h : handles) {\r\n        h.draw(g);\r\n    }\r\n}'),(2153,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.HandleMulticaster.keyPressed(java.awt.event.KeyEvent)','195','org.jhotdraw.draw.HandleMulticaster','public void keyPressed(KeyEvent e) {\r\n    for (Handle h : handles) {\r\n        h.keyPressed(e);\r\n    }\r\n}'),(2154,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.HandleMulticaster.keyReleased(java.awt.event.KeyEvent)','195','org.jhotdraw.draw.HandleMulticaster','public void keyReleased(KeyEvent e) {\r\n    for (Handle h : handles) {\r\n        h.keyReleased(e);\r\n    }\r\n}'),(2155,'keyTyped(java.awt.event.KeyEvent)','org.jhotdraw.draw.HandleMulticaster.keyTyped(java.awt.event.KeyEvent)','195','org.jhotdraw.draw.HandleMulticaster','public void keyTyped(KeyEvent e) {\r\n    for (Handle h : handles) {\r\n        h.keyTyped(e);\r\n    }\r\n}'),(2156,'trackDoubleClick(java.awt.Point,int,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.HandleMulticaster.trackDoubleClick(java.awt.Point,int,org.jhotdraw.draw.DrawingView)','195','org.jhotdraw.draw.HandleMulticaster','public void trackDoubleClick(Point p, int modifiersEx, DrawingView view) {\r\n    for (Handle h : handles) {\r\n        h.trackDoubleClick(p, modifiersEx);\r\n    }\r\n}'),(2157,'trackEnd(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.HandleMulticaster.trackEnd(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)','195','org.jhotdraw.draw.HandleMulticaster','public void trackEnd(Point current, Point anchor, int modifiersEx, DrawingView view) {\r\n    for (Handle h : new ReversedList<Handle>(handles)) {\r\n        h.trackEnd(current, anchor, modifiersEx);\r\n    }\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}'),(2158,'trackStart(java.awt.Point,int,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.HandleMulticaster.trackStart(java.awt.Point,int,org.jhotdraw.draw.DrawingView)','195','org.jhotdraw.draw.HandleMulticaster','public void trackStart(Point anchor, int modifiersEx, DrawingView view) {\r\n    view.getDrawing().fireUndoableEditHappened((edit = new CompositeEdit()));\r\n    for (Handle h : handles) {\r\n        h.trackStart(anchor, modifiersEx);\r\n    }\r\n}'),(2159,'trackStep(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.HandleMulticaster.trackStep(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)','195','org.jhotdraw.draw.HandleMulticaster','public void trackStep(Point anchor, Point lead, int modifiersEx, DrawingView view) {\r\n    for (Handle h : handles) {\r\n        h.trackStep(anchor, lead, modifiersEx);\r\n    }\r\n}'),(2160,'setHandles(org.jhotdraw.draw.Handle,java.util.Collection)','org.jhotdraw.draw.HandleTracker.setHandles(org.jhotdraw.draw.Handle,java.util.Collection)','196','org.jhotdraw.draw.HandleTracker','public void setHandles(Handle handle, Collection<Handle> compatibleHandles);'),(2161,'-init-()','org.jhotdraw.draw.HorizontalLayouter.-init-()','197','org.jhotdraw.draw.HorizontalLayouter','HorizontalLayouter() {\r\n}'),(2162,'calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.HorizontalLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','197','org.jhotdraw.draw.HorizontalLayouter','public Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(compositeFigure);\r\n    Rectangle2D.Double layoutBounds = new Rectangle2D.Double(anchor.x, anchor.y, 0, 0);\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Dimension2DDouble preferredSize = child.getPreferredSize();\r\n            Insets2D.Double ins = getInsets(child);\r\n            layoutBounds.height = Math.max(layoutBounds.height, (((preferredSize.height) + (ins.top)) + (ins.bottom)));\r\n            layoutBounds.width += ((preferredSize.width) + (ins.left)) + (ins.right);\r\n        }\r\n    }\r\n    layoutBounds.width += (layoutInsets.left) + (layoutInsets.right);\r\n    layoutBounds.height += (layoutInsets.top) + (layoutInsets.bottom);\r\n    return layoutBounds;\r\n}'),(2163,'layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.HorizontalLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','197','org.jhotdraw.draw.HorizontalLayouter','public Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(compositeFigure);\r\n    AttributeKeys.Alignment compositeAlignment = AttributeKeys.COMPOSITE_ALIGNMENT.get(compositeFigure);\r\n    Rectangle2D.Double layoutBounds = calculateLayout(compositeFigure, anchor, lead);\r\n    double x = (layoutBounds.x) + (layoutInsets.left);\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Insets2D.Double insets = getInsets(child);\r\n            double width = child.getPreferredSize().width;\r\n            double height = child.getPreferredSize().height;\r\n            // --\r\n            switch (compositeAlignment) {\r\n                case LEADING :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (insets.top))), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutInsets.top)) + (insets.top)) + height)));\r\n                    break;\r\n                case TRAILING :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom)) - height)), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom))));\r\n                    break;\r\n                case CENTER :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (((layoutBounds.height) - height) / 2.0))), new Point2D.Double(((x + (insets.left)) + width), (((layoutBounds.y) + (layoutInsets.top)) + (((layoutBounds.height) + height) / 2.0))));\r\n                    break;\r\n                case BLOCK :\r\n                default :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (insets.top))), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom))));\r\n                    break;\r\n            }\r\n            // ---\r\n            x += (width + (insets.left)) + (insets.right);\r\n        }\r\n    }\r\n    return layoutBounds;\r\n}'),(2164,'-init-()','org.jhotdraw.draw.ImageFigure.-init-()','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ImageFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(2165,'-init-(double,double,double,double)','org.jhotdraw.draw.ImageFigure.-init-(double,double,double,double)','198','org.jhotdraw.draw.ImageFigure','public ImageFigure(double x, double y, double width, double height) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n}'),(2166,'clone()','org.jhotdraw.draw.ImageFigure.clone()','198','org.jhotdraw.draw.ImageFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic ImageFigure clone() {\r\n    ImageFigure that = ((ImageFigure) (super.clone()));\r\n    that.rectangle = ((Rectangle2D.Double) (this.rectangle.clone()));\r\n    return that;\r\n}'),(2167,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.draw.ImageFigure.drawFigure(java.awt.Graphics2D)','198','org.jhotdraw.draw.ImageFigure','// DRAWING\r\nprotected void drawFigure(Graphics2D g) {\r\n    if ((AttributeKeys.FILL_COLOR.get(this)) != null) {\r\n        g.setColor(AttributeKeys.FILL_COLOR.get(this));\r\n        drawFill(g);\r\n    }\r\n    drawImage(g);\r\n    if (((AttributeKeys.STROKE_COLOR.get(this)) != null) && ((AttributeKeys.STROKE_WIDTH.get(this)) > 0.0)) {\r\n        g.setStroke(AttributeKeys.getStroke(this));\r\n        g.setColor(AttributeKeys.STROKE_COLOR.get(this));\r\n        drawStroke(g);\r\n    }\r\n    if ((AttributeKeys.TEXT_COLOR.get(this)) != null) {\r\n        if (((AttributeKeys.TEXT_SHADOW_COLOR.get(this)) != null) && ((AttributeKeys.TEXT_SHADOW_OFFSET.get(this)) != null)) {\r\n            Dimension2DDouble d = AttributeKeys.TEXT_SHADOW_OFFSET.get(this);\r\n            g.translate(d.width, d.height);\r\n            g.setColor(AttributeKeys.TEXT_SHADOW_COLOR.get(this));\r\n            drawText(g);\r\n            g.translate((-(d.width)), (-(d.height)));\r\n        }\r\n        g.setColor(AttributeKeys.TEXT_COLOR.get(this));\r\n        drawText(g);\r\n    }\r\n}'),(2168,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.ImageFigure.drawFill(java.awt.Graphics2D)','198','org.jhotdraw.draw.ImageFigure','protected void drawFill(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    Geom.grow(r, grow, grow);\r\n    g.fill(r);\r\n}'),(2169,'drawImage(java.awt.Graphics2D)','org.jhotdraw.draw.ImageFigure.drawImage(java.awt.Graphics2D)','198','org.jhotdraw.draw.ImageFigure','protected void drawImage(Graphics2D g) {\r\n    BufferedImage image = getBufferedImage();\r\n    if (image != null) {\r\n        g.drawImage(image, ((int) (rectangle.x)), ((int) (rectangle.y)), ((int) (rectangle.width)), ((int) (rectangle.height)), null);\r\n    } else {\r\n        g.setStroke(new BasicStroke());\r\n        g.setColor(Color.red);\r\n        g.draw(rectangle);\r\n        g.draw(new Line2D.Double(rectangle.x, rectangle.y, ((rectangle.x) + (rectangle.width)), ((rectangle.y) + (rectangle.height))));\r\n        g.draw(new Line2D.Double(((rectangle.x) + (rectangle.width)), rectangle.y, rectangle.x, ((rectangle.y) + (rectangle.height))));\r\n    }\r\n}'),(2170,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.ImageFigure.drawStroke(java.awt.Graphics2D)','198','org.jhotdraw.draw.ImageFigure','protected void drawStroke(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n    Geom.grow(r, grow, grow);\r\n    g.draw(r);\r\n}'),(2171,'figureContains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ImageFigure.figureContains(java.awt.geom.Point2D$Double)','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean figureContains(Point2D.Double p) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = (AttributeKeys.getPerpendicularHitGrowth(this)) + 1.0;\r\n    Geom.grow(r, grow, grow);\r\n    return r.contains(p);\r\n}'),(2172,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.ImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','198','org.jhotdraw.draw.ImageFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}'),(2173,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.ImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','198','org.jhotdraw.draw.ImageFigure','// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}'),(2174,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ImageFigure.getActions(java.awt.geom.Point2D$Double)','198','org.jhotdraw.draw.ImageFigure','// EDITING\r\n@Override\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    LinkedList<Action> actions = new LinkedList<Action>();\r\n    return actions;\r\n}'),(2175,'getBounds()','org.jhotdraw.draw.ImageFigure.getBounds()','198','org.jhotdraw.draw.ImageFigure','// SHAPE AND BOUNDS\r\npublic Rectangle2D.Double getBounds() {\r\n    Rectangle2D.Double bounds = ((Rectangle2D.Double) (rectangle.clone()));\r\n    return bounds;\r\n}'),(2176,'getBufferedImage()','org.jhotdraw.draw.ImageFigure.getBufferedImage()','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Gets the buffered image. If necessary, this method creates the buffered\r\n * image from the image data.\r\n */\r\npublic BufferedImage getBufferedImage() {\r\n    if (((bufferedImage) == null) && ((imageData) != null)) {\r\n        try {\r\n            bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            // If we cant create a buffered image from the image data,\r\n            // there is no use to keep the image data and try again, so\r\n            // we drop the image data.\r\n            imageData = null;\r\n        }\r\n    }\r\n    return bufferedImage;\r\n}'),(2177,'getFigureDrawingArea()','org.jhotdraw.draw.ImageFigure.getFigureDrawingArea()','198','org.jhotdraw.draw.ImageFigure','@Override\r\npublic Rectangle2D.Double getFigureDrawingArea() {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    Geom.grow(r, grow, grow);\r\n    return r;\r\n}'),(2178,'getImageData()','org.jhotdraw.draw.ImageFigure.getImageData()','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Gets the image data. If necessary, this method creates the image\r\n * data from the buffered image.\r\n */\r\npublic byte[] getImageData() {\r\n    if (((bufferedImage) != null) && ((imageData) == null)) {\r\n        try {\r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            ImageIO.write(bufferedImage, \"PNG\", bout);\r\n            bout.close();\r\n            imageData = bout.toByteArray();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            // If we cant create image data from the buffered image,\r\n            // there is no use to keep the buffered image and try again, so\r\n            // we drop the buffered image.\r\n            bufferedImage = null;\r\n        }\r\n    }\r\n    return imageData;\r\n}'),(2179,'getTransformRestoreData()','org.jhotdraw.draw.ImageFigure.getTransformRestoreData()','198','org.jhotdraw.draw.ImageFigure','public Object getTransformRestoreData() {\r\n    return ((Rectangle2D.Double) (rectangle.clone()));\r\n}'),(2180,'loadImage(java.io.File)','org.jhotdraw.draw.ImageFigure.loadImage(java.io.File)','198','org.jhotdraw.draw.ImageFigure','public void loadImage(File file) throws IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = new FileInputStream(file);\r\n        loadImage(in);\r\n    } catch (Throwable t) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        IOException e = new IOException(labels.getFormatted(\"file.failedToLoadImage.message\", file.getName()));\r\n        e.initCause(t);\r\n        throw e;\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(2181,'loadImage(java.io.InputStream)','org.jhotdraw.draw.ImageFigure.loadImage(java.io.InputStream)','198','org.jhotdraw.draw.ImageFigure','public void loadImage(InputStream in) throws IOException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    byte[] buf = new byte[512];\r\n    int bytesRead;\r\n    while ((bytesRead = in.read(buf)) > 0) {\r\n        baos.write(buf, 0, bytesRead);\r\n    } \r\n    BufferedImage img = ImageIO.read(new ByteArrayInputStream(baos.toByteArray()));\r\n    if (img == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        throw new IOException(labels.getFormatted(\"file.failedToLoadImage.message\", in.toString()));\r\n    }\r\n    imageData = baos.toByteArray();\r\n    bufferedImage = img;\r\n}'),(2182,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.ImageFigure.read(org.jhotdraw.xml.DOMInput)','198','org.jhotdraw.draw.ImageFigure','public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    if ((in.getElementCount(\"imageData\")) > 0) {\r\n        in.openElement(\"imageData\");\r\n        String base64Data = in.getText();\r\n        if (base64Data != null) {\r\n            setImageData(Base64.decode(base64Data));\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(2183,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.ImageFigure.restoreTransformTo(java.lang.Object)','198','org.jhotdraw.draw.ImageFigure','// ATTRIBUTES\r\npublic void restoreTransformTo(Object geometry) {\r\n    rectangle.setRect(((Rectangle2D.Double) (geometry)));\r\n}'),(2184,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ImageFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','198','org.jhotdraw.draw.ImageFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    rectangle.x = Math.min(anchor.x, lead.x);\r\n    rectangle.y = Math.min(anchor.y, lead.y);\r\n    rectangle.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    rectangle.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(2185,'setBufferedImage(java.awt.image.BufferedImage)','org.jhotdraw.draw.ImageFigure.setBufferedImage(java.awt.image.BufferedImage)','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Sets the buffered image.\r\n * This clears the image data.\r\n */\r\npublic void setBufferedImage(BufferedImage image) {\r\n    willChange();\r\n    this.imageData = null;\r\n    this.bufferedImage = image;\r\n    changed();\r\n}'),(2186,'setImage(byte[],java.awt.image.BufferedImage)','org.jhotdraw.draw.ImageFigure.setImage(byte[],java.awt.image.BufferedImage)','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Sets the image.\r\n *\r\n * @param imageData\r\n * 		The image data. If this is null, a buffered image must\r\n * 		be provided.\r\n * @param bufferedImage\r\n * 		An image constructed from the imageData. If this\r\n * 		is null, imageData must be provided.\r\n */\r\npublic void setImage(byte[] imageData, BufferedImage bufferedImage) {\r\n    willChange();\r\n    this.imageData = imageData;\r\n    this.bufferedImage = bufferedImage;\r\n    changed();\r\n}'),(2187,'setImageData(byte[])','org.jhotdraw.draw.ImageFigure.setImageData(byte[])','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Sets the image data.\r\n * This clears the buffered image.\r\n */\r\npublic void setImageData(byte[] imageData) {\r\n    willChange();\r\n    this.imageData = imageData;\r\n    this.bufferedImage = null;\r\n    changed();\r\n}'),(2188,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.ImageFigure.transform(java.awt.geom.AffineTransform)','198','org.jhotdraw.draw.ImageFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		The transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(2189,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.ImageFigure.write(org.jhotdraw.xml.DOMOutput)','198','org.jhotdraw.draw.ImageFigure','public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    if ((getImageData()) != null) {\r\n        out.openElement(\"imageData\");\r\n        out.addText(Base64.encodeBytes(getImageData()));\r\n        out.closeElement();\r\n    }\r\n}'),(2190,'writeObject(java.io.ObjectOutputStream)','org.jhotdraw.draw.ImageFigure.writeObject(java.io.ObjectOutputStream)','198','org.jhotdraw.draw.ImageFigure','private void writeObject(ObjectOutputStream out) throws IOException {\r\n    // The call to getImageData() ensures that we have serializable data\r\n    // in the imageData array.\r\n    getImageData();\r\n    out.defaultWriteObject();\r\n}'),(2191,'getBufferedImage()','org.jhotdraw.draw.ImageHolderFigure.getBufferedImage()','199','org.jhotdraw.draw.ImageHolderFigure','/**\r\n * Gets the buffered image from the figure.\r\n */\r\npublic BufferedImage getBufferedImage();'),(2192,'getImageData()','org.jhotdraw.draw.ImageHolderFigure.getImageData()','199','org.jhotdraw.draw.ImageHolderFigure','/**\r\n * Gets the image data.\r\n *\r\n * @return imageData The image data, or null, if the ImageHolderFigure does\r\nnot have an image.\r\n */\r\npublic byte[] getImageData();'),(2193,'loadImage(java.io.File)','org.jhotdraw.draw.ImageHolderFigure.loadImage(java.io.File)','199','org.jhotdraw.draw.ImageHolderFigure','/**\r\n * Loads an image from a File.\r\n * By convention this method is never invoked on the AWT Event Dispatcher\r\n * Thread.\r\n */\r\npublic void loadImage(File f) throws IOException;'),(2194,'loadImage(java.io.InputStream)','org.jhotdraw.draw.ImageHolderFigure.loadImage(java.io.InputStream)','199','org.jhotdraw.draw.ImageHolderFigure','/**\r\n * Loads an image from an Input Stream.\r\n * By convention this method is never invoked on the AWT Event Dispatcher\r\n * Thread.\r\n */\r\npublic void loadImage(InputStream in) throws IOException;'),(2195,'setBufferedImage(java.awt.image.BufferedImage)','org.jhotdraw.draw.ImageHolderFigure.setBufferedImage(java.awt.image.BufferedImage)','199','org.jhotdraw.draw.ImageHolderFigure','/**\r\n * Sets the buffered image for the figure.\r\n */\r\npublic void setBufferedImage(BufferedImage image);'),(2196,'setImage(byte[],java.awt.image.BufferedImage)','org.jhotdraw.draw.ImageHolderFigure.setImage(byte[],java.awt.image.BufferedImage)','199','org.jhotdraw.draw.ImageHolderFigure','/**\r\n * Sets the image.\r\n *\r\n * @param imageData\r\n * 		The image data. If this is null, a buffered image must\r\n * 		be provided.\r\n * @param bufferedImage\r\n * 		An image constructed from the imageData. If this\r\n * 		is null, imageData must be provided.\r\n */\r\npublic void setImage(byte[] imageData, BufferedImage bufferedImage) throws IOException;'),(2197,'-init-(org.jhotdraw.draw.ImageHolderFigure)','org.jhotdraw.draw.ImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure)','200','org.jhotdraw.draw.ImageInputFormat','/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic ImageInputFormat(ImageHolderFigure prototype) {\r\n    this(prototype, \"PNG\", \"Portable Network Graphics (PNG)\", \"png\", BufferedImage.TYPE_INT_ARGB);\r\n}'),(2198,'-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)','org.jhotdraw.draw.ImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)','200','org.jhotdraw.draw.ImageInputFormat','/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * 		The BufferedImage type used to produce the image.\r\n * 		The value of this parameter must match with the format name.\r\n */\r\npublic ImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}'),(2199,'createImageHolder(java.io.InputStream)','org.jhotdraw.draw.ImageInputFormat.createImageHolder(java.io.InputStream)','200','org.jhotdraw.draw.ImageInputFormat','public ImageHolderFigure createImageHolder(InputStream in) throws IOException {\r\n    ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n    figure.loadImage(in);\r\n    figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n    return figure;\r\n}'),(2200,'getFileExtension()','org.jhotdraw.draw.ImageInputFormat.getFileExtension()','200','org.jhotdraw.draw.ImageInputFormat','public String getFileExtension() {\r\n    return fileExtension;\r\n}'),(2201,'getFileFilter()','org.jhotdraw.draw.ImageInputFormat.getFileFilter()','200','org.jhotdraw.draw.ImageInputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(description, fileExtension);\r\n}'),(2202,'getInputFormatAccessory()','org.jhotdraw.draw.ImageInputFormat.getInputFormatAccessory()','200','org.jhotdraw.draw.ImageInputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(2203,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.ImageInputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','200','org.jhotdraw.draw.ImageInputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return (flavor.equals(DataFlavor.imageFlavor)) || (flavor.equals(ImageTransferable.IMAGE_PNG_FLAVOR));\r\n}'),(2204,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.ImageInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','200','org.jhotdraw.draw.ImageInputFormat','public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    // 1. Try to read the image using the Java Image Flavor\r\n    // This causes a NoSuchMethodError to be thrown on Mac OS X 10.5.2.\r\n    if (t.isDataFlavorSupported(DataFlavor.imageFlavor)) {\r\n        try {\r\n            Image img = ((Image) (t.getTransferData(DataFlavor.imageFlavor)));\r\n            img = Images.toBufferedImage(img);\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(((BufferedImage) (img)));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            LinkedList<Figure> list = new LinkedList<Figure>();\r\n            list.add(figure);\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.addAll(list);\r\n            return;\r\n        } catch (Throwable e) {\r\n            // no need to do anything here, because we try to read the\r\n            // image/png below.\r\n            // e.printStackTrace();\r\n        }\r\n    }\r\n    // 2. Try to read the image using our own image/png flavor.\r\n    if (t.isDataFlavorSupported(ImageTransferable.IMAGE_PNG_FLAVOR)) {\r\n        try {\r\n            InputStream in = ((InputStream) (t.getTransferData(ImageTransferable.IMAGE_PNG_FLAVOR)));\r\n            Image img = ImageIO.read(in);\r\n            img = Images.toBufferedImage(img);\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(((BufferedImage) (img)));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            LinkedList<Figure> list = new LinkedList<Figure>();\r\n            list.add(figure);\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.addAll(list);\r\n        } catch (Throwable e) {\r\n            e.printStackTrace();\r\n            IOException ex = new IOException(\"Couldnt import image as image/png flavor\");\r\n            ex.initCause(e);\r\n            throw ex;\r\n        }\r\n    } else {\r\n        throw new IOException(\"Couldnt import image.\");\r\n    }\r\n}'),(2205,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.ImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','200','org.jhotdraw.draw.ImageInputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(2206,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.ImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','200','org.jhotdraw.draw.ImageInputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n    figure.loadImage(file);\r\n    figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAdd(figure);\r\n}'),(2207,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.ImageInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','200','org.jhotdraw.draw.ImageInputFormat','public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAdd(createImageHolder(in));\r\n}'),(2208,'-init-()','org.jhotdraw.draw.ImageOutputFormat.-init-()','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic ImageOutputFormat() {\r\n    this(\"PNG\", \"Portable Network Graphics (PNG)\", \"png\", BufferedImage.TYPE_INT_ARGB);\r\n}'),(2209,'-init-(java.lang.String,java.lang.String,java.lang.String,int)','org.jhotdraw.draw.ImageOutputFormat.-init-(java.lang.String,java.lang.String,java.lang.String,int)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * 		The BufferedImage type used to produce the image.\r\n * 		The value of this parameter must match with the format name.\r\n */\r\npublic ImageOutputFormat(String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}'),(2210,'createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','org.jhotdraw.draw.ImageOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Writes the drawing to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    return new ImageTransferable(toImage(drawing, figures, scaleFactor, true));\r\n}'),(2211,'getFileExtension()','org.jhotdraw.draw.ImageOutputFormat.getFileExtension()','201','org.jhotdraw.draw.ImageOutputFormat','public String getFileExtension() {\r\n    return fileExtension;\r\n}'),(2212,'getFileFilter()','org.jhotdraw.draw.ImageOutputFormat.getFileFilter()','201','org.jhotdraw.draw.ImageOutputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(description, fileExtension);\r\n}'),(2213,'getOutputFormatAccessory()','org.jhotdraw.draw.ImageOutputFormat.getOutputFormatAccessory()','201','org.jhotdraw.draw.ImageOutputFormat','public JComponent getOutputFormatAccessory() {\r\n    return null;\r\n}'),(2214,'setRenderingHints(java.awt.Graphics2D)','org.jhotdraw.draw.ImageOutputFormat.setRenderingHints(java.awt.Graphics2D)','201','org.jhotdraw.draw.ImageOutputFormat','protected void setRenderingHints(Graphics2D g) {\r\n    g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\r\n    g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\r\n    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n}'),(2215,'toImage(org.jhotdraw.draw.Drawing,java.util.List,double,boolean)','org.jhotdraw.draw.ImageOutputFormat.toImage(org.jhotdraw.draw.Drawing,java.util.List,double,boolean)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Creates a BufferedImage from the specified list of figures.\r\n * <p>\r\n * The images are drawn using the specified scale factor. If some figures\r\n * have a drawing area located at negative coordinates, then the drawing\r\n * coordinates are translated, so that all figures are visible on the\r\n * image.\r\n *\r\n * @param drawing\r\n * 		The drawing.\r\n * @param figures\r\n * 		A list of figures of the drawing.\r\n * @param scaleFactor\r\n * 		The scale factor used when drawing the figures.\r\n * @param clipToFigures\r\n * 		If this is true, the image is clipped to the figures.\r\n * 		If this is false, the image includes the drawing area,\r\n */\r\npublic BufferedImage toImage(Drawing drawing, List<Figure> figures, double scaleFactor, boolean clipToFigures) {\r\n    // Determine the draw bounds of the figures\r\n    Rectangle2D.Double drawBounds = null;\r\n    for (Figure f : figures) {\r\n        if (drawBounds == null) {\r\n            drawBounds = f.getDrawingArea();\r\n        } else {\r\n            drawBounds.add(f.getDrawingArea());\r\n        }\r\n    }\r\n    if (clipToFigures) {\r\n        AffineTransform transform = new AffineTransform();\r\n        transform.translate(((-(drawBounds.x)) * scaleFactor), ((-(drawBounds.y)) * scaleFactor));\r\n        transform.scale(scaleFactor, scaleFactor);\r\n        return toImage(drawing, figures, transform, new Dimension(((int) ((drawBounds.width) * scaleFactor)), ((int) ((drawBounds.height) * scaleFactor))));\r\n    } else {\r\n        AffineTransform transform = new AffineTransform();\r\n        if ((drawBounds.x) < 0) {\r\n            transform.translate(((-(drawBounds.x)) * scaleFactor), 0);\r\n        }\r\n        if ((drawBounds.y) < 0) {\r\n            transform.translate(0, ((-(drawBounds.y)) * scaleFactor));\r\n        }\r\n        transform.scale(scaleFactor, scaleFactor);\r\n        return toImage(drawing, figures, transform, new Dimension(((int) (((Math.max(0, drawBounds.x)) + (drawBounds.width)) * scaleFactor)), ((int) (((Math.max(0, drawBounds.y)) + (drawBounds.height)) * scaleFactor))));\r\n    }\r\n}'),(2216,'toImage(org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)','org.jhotdraw.draw.ImageOutputFormat.toImage(org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Creates a BufferedImage from the specified list of figures.\r\n *\r\n * @param drawing\r\n * 		The drawing.\r\n * @param figures\r\n * 		A list of figures of the drawing.\r\n * @param transform\r\n * 		The AffineTransform to be used when drawing\r\n * 		the figures.\r\n * @param imageSize\r\n * 		The width and height of the image.\r\n */\r\npublic BufferedImage toImage(Drawing drawing, List<Figure> figures, AffineTransform transform, Dimension imageSize) {\r\n    // Create the buffered image and clear it\r\n    Color background = AttributeKeys.CANVAS_FILL_COLOR.get(drawing);\r\n    double opacity = AttributeKeys.CANVAS_FILL_OPACITY.get(drawing);\r\n    if (background == null) {\r\n        background = new Color(255, 255, 255, ((int) (255 * opacity)));\r\n    } else {\r\n        background = new Color(background.getRed(), background.getGreen(), background.getBlue(), ((int) ((background.getAlpha()) * opacity)));\r\n    }\r\n    BufferedImage buf = new BufferedImage(imageSize.width, imageSize.height, ((background.getAlpha()) == 255 ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB));\r\n    Graphics2D g = buf.createGraphics();\r\n    // Clear the buffered image with the background color\r\n    Composite savedComposite = g.getComposite();\r\n    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\r\n    g.setColor(background);\r\n    g.fillRect(0, 0, buf.getWidth(), buf.getHeight());\r\n    g.setComposite(savedComposite);\r\n    // Draw the figures onto the buffered image\r\n    setRenderingHints(g);\r\n    g.transform(transform);\r\n    for (Figure f : figures) {\r\n        f.draw(g);\r\n    }\r\n    g.dispose();\r\n    // Convert the image, if it does not have the specified image type\r\n    if ((imageType) != (BufferedImage.TYPE_INT_ARGB)) {\r\n        BufferedImage buf2 = new BufferedImage(buf.getWidth(), buf.getHeight(), imageType);\r\n        g = buf2.createGraphics();\r\n        setRenderingHints(g);\r\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\r\n        g.drawImage(buf, 0, 0, null);\r\n        g.dispose();\r\n        buf.flush();\r\n        buf = buf2;\r\n    }\r\n    return buf;\r\n}'),(2217,'write(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.ImageOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Writes the drawing to the specified file.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = null;\r\n    try {\r\n        out = new BufferedOutputStream(new FileOutputStream(file));\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(2218,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Writes the drawing to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing, drawing.getChildren(), null, null);\r\n}'),(2219,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)','org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Writes the drawing to the specified output stream.\r\n * This method applies the specified transform to the drawing, and draws\r\n * it on an image of the specified size.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    write(out, drawing, drawing.getChildren(), drawingTransform, imageSize);\r\n}'),(2220,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)','org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Writes the figures to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures) throws IOException {\r\n    write(out, drawing, figures, null, null);\r\n}'),(2221,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)','org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)','201','org.jhotdraw.draw.ImageOutputFormat','/**\r\n * Writes the figures to the specified output stream.\r\n * This method applies the specified transform to the drawing, and draws\r\n * it on an image of the specified size.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    BufferedImage img;\r\n    if ((drawingTransform == null) || (imageSize == null)) {\r\n        img = toImage(drawing, figures, 1.0, false);\r\n    } else {\r\n        img = toImage(drawing, figures, drawingTransform, imageSize);\r\n    }\r\n    ImageIO.write(img, formatName, out);\r\n    img.flush();\r\n}'),(2222,'-init-(org.jhotdraw.draw.ImageHolderFigure)','org.jhotdraw.draw.ImageTool.-init-(org.jhotdraw.draw.ImageHolderFigure)','202','org.jhotdraw.draw.ImageTool','/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTool(ImageHolderFigure prototype) {\r\n    super(prototype);\r\n}'),(2223,'-init-(org.jhotdraw.draw.ImageHolderFigure,java.util.Map)','org.jhotdraw.draw.ImageTool.-init-(org.jhotdraw.draw.ImageHolderFigure,java.util.Map)','202','org.jhotdraw.draw.ImageTool','/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTool(ImageHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}'),(2224,'-init-()','org.jhotdraw.draw.ImageTool.-init-()','202','org.jhotdraw.draw.ImageTool','1() {\r\n}'),(2225,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.ImageTool.activate(org.jhotdraw.draw.DrawingEditor)','202','org.jhotdraw.draw.ImageTool','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    if ((workerThread) != null) {\r\n        try {\r\n            workerThread.join();\r\n        } catch (InterruptedException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    final File file;\r\n    if (useFileDialog) {\r\n        getFileDialog().setVisible(true);\r\n        if ((getFileDialog().getFile()) != null) {\r\n            file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());\r\n        } else {\r\n            file = null;\r\n        }\r\n    } else {\r\n        if ((getFileChooser().showOpenDialog(getView().getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            file = getFileChooser().getSelectedFile();\r\n        } else {\r\n            file = null;\r\n        }\r\n    }\r\n    if (file != null) {\r\n        final ImageHolderFigure loaderFigure = ((ImageHolderFigure) (prototype.clone()));\r\n        Worker worker = new Worker() {\r\n            public Object construct() {\r\n                try {\r\n                    ((ImageHolderFigure) (loaderFigure)).loadImage(file);\r\n                } catch (Throwable t) {\r\n                    return t;\r\n                }\r\n                return null;\r\n            }\r\n\r\n            public void finished(Object value) {\r\n                if (value instanceof Throwable) {\r\n                    Throwable t = ((Throwable) (value));\r\n                    JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                    getDrawing().remove(createdFigure);\r\n                    fireToolDone();\r\n                } else {\r\n                    try {\r\n                        if ((createdFigure) == null) {\r\n                            ((ImageHolderFigure) (prototype)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                        } else {\r\n                            ((ImageHolderFigure) (createdFigure)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                        }\r\n                    } catch (IOException ex) {\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        workerThread = new Thread(worker);\r\n        workerThread.start();\r\n    } else {\r\n        // getDrawing().remove(createdFigure);\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}'),(2226,'getFileChooser()','org.jhotdraw.draw.ImageTool.getFileChooser()','202','org.jhotdraw.draw.ImageTool','private JFileChooser getFileChooser() {\r\n    if ((fileChooser) == null) {\r\n        fileChooser = new JFileChooser();\r\n    }\r\n    return fileChooser;\r\n}'),(2227,'getFileDialog()','org.jhotdraw.draw.ImageTool.getFileDialog()','202','org.jhotdraw.draw.ImageTool','private FileDialog getFileDialog() {\r\n    if ((fileDialog) == null) {\r\n        fileDialog = new FileDialog(new Frame());\r\n    }\r\n    return fileDialog;\r\n}'),(2228,'isUseFileDialog()','org.jhotdraw.draw.ImageTool.isUseFileDialog()','202','org.jhotdraw.draw.ImageTool','public boolean isUseFileDialog() {\r\n    return useFileDialog;\r\n}'),(2229,'setUseFileDialog(boolean)','org.jhotdraw.draw.ImageTool.setUseFileDialog(boolean)','202','org.jhotdraw.draw.ImageTool','public void setUseFileDialog(boolean newValue) {\r\n    useFileDialog = newValue;\r\n    if (useFileDialog) {\r\n        fileChooser = null;\r\n    } else {\r\n        fileDialog = null;\r\n    }\r\n}'),(2230,'getFileFilter()','org.jhotdraw.draw.InputFormat.getFileFilter()','203','org.jhotdraw.draw.InputFormat','/**\r\n * Return a FileFilter that can be used to identify files which can be restored\r\n * with this Storage Format. Typically, each input format has its own\r\n * recognizable file naming convention.\r\n *\r\n * @return FileFilter to be used with a javax.swing.JFileChooser\r\n */\r\npublic FileFilter getFileFilter();'),(2231,'getInputFormatAccessory()','org.jhotdraw.draw.InputFormat.getInputFormatAccessory()','203','org.jhotdraw.draw.InputFormat','/**\r\n * Return a JFileChooser accessory that can be used to customize the input\r\n * format.\r\n *\r\n * @return A JFileChooser accessory to be used with a javax.swing.JFileChooser\r\nReturns null, if no accessory is provided for this format.\r\n */\r\npublic JComponent getInputFormatAccessory();'),(2232,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.InputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','203','org.jhotdraw.draw.InputFormat','/**\r\n * Returns true, if this InputFormat can readFigures TransferData using the\r\n * specified DataFlavor.\r\n *\r\n * @param flavor\r\n * 		A DataFlavor.\r\n */\r\npublic boolean isDataFlavorSupported(DataFlavor flavor);'),(2233,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.InputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','203','org.jhotdraw.draw.InputFormat','/**\r\n * Reads figures from the specified Transferable and adds them to the\r\n * specified drawing.\r\n *\r\n * @param t\r\n * 		The Transferable.\r\n * @param drawing\r\n * 		The drawing.\r\n * @param replace\r\n * 		Set this to true, if the contents of the transferable\r\n * 		replaces the contents of the drawing (for example, when loading a drawing\r\n * 		from a transferable). Set this to false, to add the contents of the\r\n * 		transferable to the drawing (for example, when the transferable has been\r\n * 		dropped or pasted into the drawing view).\r\n */\r\npublic void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException;'),(2234,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.InputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','203','org.jhotdraw.draw.InputFormat','/**\r\n * Reads figures from a file and replaces the children of the drawing\r\n * with them.\r\n * <p>\r\n * This is a convenience method for calling read(File,Drawing,true).\r\n *\r\n * @param file\r\n * 		The file.\r\n * @param drawing\r\n * 		The drawing.\r\n */\r\npublic void read(File file, Drawing drawing) throws IOException;'),(2235,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.InputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','203','org.jhotdraw.draw.InputFormat','/**\r\n * Reads figures from a file and adds them to the specified drawing.\r\n *\r\n * @param file\r\n * 		The file.\r\n * @param drawing\r\n * 		The drawing.\r\n * @param replace\r\n * 		Set this to true, if the contents of the file replaces the\r\n * 		contents of the drawing (for example, when loading a drawing from a file).\r\n * 		Set this to false, to add the contents of the file to the drawing (for\r\n * 		example, when the file has been dropped into the drawing view).\r\n */\r\npublic void read(File file, Drawing drawing, boolean replace) throws IOException;'),(2236,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.InputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','203','org.jhotdraw.draw.InputFormat','/**\r\n * Reads figures from a file and adds them to the specified drawing.\r\n *\r\n * @param in\r\n * 		The input stream.\r\n * @param drawing\r\n * 		The drawing.\r\n * @param replace\r\n * 		Set this to true, if the contents of the stream replaces the\r\n * 		contents of the drawing (for example, when loading a drawing from a stream).\r\n * 		Set this to false, to add the contents of the file to the drawing (for\r\n * 		example, when the stream has been dropped into the drawing view).\r\n */\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException;'),(2237,'-init-()','org.jhotdraw.draw.LabelFigure.-init-()','204','org.jhotdraw.draw.LabelFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic LabelFigure() {\r\n    this(\"Label\");\r\n}'),(2238,'-init-(java.lang.String)','org.jhotdraw.draw.LabelFigure.-init-(java.lang.String)','204','org.jhotdraw.draw.LabelFigure','public LabelFigure(String text) {\r\n    setText(text);\r\n    setEditable(false);\r\n}'),(2239,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.areaInvalidated(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void areaInvalidated(FigureEvent e) {\r\n}'),(2240,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.attributeChanged(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void attributeChanged(FigureEvent e) {\r\n}'),(2241,'figureAdded(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.figureAdded(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void figureAdded(FigureEvent e) {\r\n}'),(2242,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.figureChanged(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void figureChanged(FigureEvent e) {\r\n}'),(2243,'figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void figureHandlesChanged(FigureEvent e) {\r\n}'),(2244,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.figureRemoved(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void figureRemoved(FigureEvent e) {\r\n    if ((e.getFigure()) == (target)) {\r\n        target.removeFigureListener(this);\r\n        target = null;\r\n    }\r\n}'),(2245,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabelFigure.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','204','org.jhotdraw.draw.LabelFigure','public void figureRequestRemove(FigureEvent e) {\r\n}'),(2246,'getLabelFor()','org.jhotdraw.draw.LabelFigure.getLabelFor()','204','org.jhotdraw.draw.LabelFigure','public TextHolderFigure getLabelFor() {\r\n    return (target) == null ? this : target;\r\n}'),(2247,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LabelFigure.getTool(java.awt.geom.Point2D$Double)','204','org.jhotdraw.draw.LabelFigure','/**\r\n * Returns a specialized tool for the given coordinate.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\npublic Tool getTool(Point2D.Double p) {\r\n    return ((target) != null) && (contains(p)) ? new TextEditingTool(target) : null;\r\n}'),(2248,'remap(java.util.Map,boolean)','org.jhotdraw.draw.LabelFigure.remap(java.util.Map,boolean)','204','org.jhotdraw.draw.LabelFigure','@Override\r\npublic void remap(Map<Figure, Figure> oldToNew, boolean disconnectIfNotInMap) {\r\n    super.remap(oldToNew, disconnectIfNotInMap);\r\n    if ((target) != null) {\r\n        Figure newTarget = ((Figure) (oldToNew.get(target)));\r\n        if (newTarget != null) {\r\n            target.removeFigureListener(this);\r\n            target = ((TextHolderFigure) (newTarget));\r\n            newTarget.addFigureListener(this);\r\n        }\r\n    }\r\n}'),(2249,'setLabelFor(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.LabelFigure.setLabelFor(org.jhotdraw.draw.TextHolderFigure)','204','org.jhotdraw.draw.LabelFigure','public void setLabelFor(TextHolderFigure target) {\r\n    if ((this.target) != null) {\r\n        this.target.removeFigureListener(this);\r\n    }\r\n    this.target = target;\r\n    if ((this.target) != null) {\r\n        this.target.addFigureListener(this);\r\n    }\r\n}'),(2250,'-init-(org.jhotdraw.draw.LabeledLineConnectionFigure)','org.jhotdraw.draw.LabeledLineConnectionFigure.-init-(org.jhotdraw.draw.LabeledLineConnectionFigure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','private ChildHandler(LabeledLineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}'),(2251,'-init-()','org.jhotdraw.draw.LabeledLineConnectionFigure.-init-()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic LabeledLineConnectionFigure() {\r\n}'),(2252,'add(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.add(int,org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void add(int index, Figure figure) {\r\n    basicAdd(index, figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n}'),(2253,'add(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.add(org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public boolean add(Figure figure) {\r\n    basicAdd(figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n    return true;\r\n}'),(2254,'addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','org.jhotdraw.draw.LabeledLineConnectionFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void addCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.add(CompositeFigureListener.class, listener);\r\n}'),(2255,'addNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.LabeledLineConnectionFigure.addNotify(org.jhotdraw.draw.Drawing)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void addNotify(Drawing drawing) {\r\n    for (Figure child : new LinkedList<Figure>(children)) {\r\n        child.addNotify(drawing);\r\n    }\r\n    super.addNotify(drawing);\r\n}'),(2256,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.basicAdd(int,org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    figure.addFigureListener(childHandler);\r\n    invalidate();\r\n}'),(2257,'basicAdd(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.basicAdd(org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void basicAdd(Figure figure) {\r\n    basicAdd(children.size(), figure);\r\n}'),(2258,'basicRemove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.basicRemove(org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public int basicRemove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index != (-1)) {\r\n        basicRemoveChild(index);\r\n    }\r\n    return index;\r\n}'),(2259,'basicRemoveAllChildren()','org.jhotdraw.draw.LabeledLineConnectionFigure.basicRemoveAllChildren()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void basicRemoveAllChildren() {\r\n    while ((children.size()) > 0) {\r\n        basicRemoveChild(((children.size()) - 1));\r\n    } \r\n}'),(2260,'basicRemoveChild(int)','org.jhotdraw.draw.LabeledLineConnectionFigure.basicRemoveChild(int)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public Figure basicRemoveChild(int index) {\r\n    Figure figure = children.remove(index);\r\n    figure.removeFigureListener(childHandler);\r\n    return figure;\r\n}'),(2261,'clone()','org.jhotdraw.draw.LabeledLineConnectionFigure.clone()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// CLONING\r\npublic LabeledLineConnectionFigure clone() {\r\n    LabeledLineConnectionFigure that = ((LabeledLineConnectionFigure) (super.clone()));\r\n    that.childHandler = new LabeledLineConnectionFigure.ChildHandler(that);\r\n    that.children = new ArrayList<Figure>();\r\n    for (Figure thisChild : this.children) {\r\n        Figure thatChild = ((Figure) (thisChild.clone()));\r\n        that.children.add(thatChild);\r\n        thatChild.addFigureListener(that.childHandler);\r\n    }\r\n    return that;\r\n}'),(2262,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LabeledLineConnectionFigure.contains(java.awt.geom.Point2D$Double)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public boolean contains(Point2D.Double p) {\r\n    if (getDrawingArea().contains(p)) {\r\n        for (Figure child : getChildrenFrontToBack()) {\r\n            if ((child.isVisible()) && (child.contains(p)))\r\n                return true;\r\n\r\n        }\r\n        return super.contains(p);\r\n    }\r\n    return false;\r\n}'),(2263,'contains(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.contains(org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(2264,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.LabeledLineConnectionFigure.draw(java.awt.Graphics2D)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// DRAWING\r\n/**\r\n * Draw the figure. This method is delegated to the encapsulated presentation figure.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    super.draw(g);\r\n    for (Figure child : children) {\r\n        if (child.isVisible()) {\r\n            child.draw(g);\r\n        }\r\n    }\r\n}'),(2265,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LabeledLineConnectionFigure.findFigureInside(java.awt.geom.Point2D$Double)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// EDITING\r\npublic Figure findFigureInside(Point2D.Double p) {\r\n    if (getDrawingArea().contains(p)) {\r\n        Figure found = null;\r\n        for (Figure child : getChildrenFrontToBack()) {\r\n            if (child.isVisible()) {\r\n                found = child.findFigureInside(p);\r\n                if (found != null) {\r\n                    return found;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(2266,'fireFigureAdded(org.jhotdraw.draw.Figure,int)','org.jhotdraw.draw.LabeledLineConnectionFigure.fireFigureAdded(org.jhotdraw.draw.Figure,int)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n        }\r\n    }\r\n}'),(2267,'fireFigureRemoved(org.jhotdraw.draw.Figure,int)','org.jhotdraw.draw.LabeledLineConnectionFigure.fireFigureRemoved(org.jhotdraw.draw.Figure,int)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n        }\r\n    }\r\n}'),(2268,'getChild(int)','org.jhotdraw.draw.LabeledLineConnectionFigure.getChild(int)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public Figure getChild(int index) {\r\n    return children.get(index);\r\n}'),(2269,'getChildCount()','org.jhotdraw.draw.LabeledLineConnectionFigure.getChildCount()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public int getChildCount() {\r\n    return children.size();\r\n}'),(2270,'getChildren()','org.jhotdraw.draw.LabeledLineConnectionFigure.getChildren()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// COMPOSITE FIGURES\r\npublic List<Figure> getChildren() {\r\n    return Collections.unmodifiableList(children);\r\n}'),(2271,'getChildrenFrontToBack()','org.jhotdraw.draw.LabeledLineConnectionFigure.getChildrenFrontToBack()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','/**\r\n * Returns an iterator to iterate in\r\n * Z-order front to back over the children.\r\n */\r\npublic List<Figure> getChildrenFrontToBack() {\r\n    return (children) == null ? new LinkedList<Figure>() : new ReversedList<Figure>(children);\r\n}'),(2272,'getDrawingArea()','org.jhotdraw.draw.LabeledLineConnectionFigure.getDrawingArea()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        cachedDrawingArea = super.getDrawingArea();\r\n        for (Figure child : getChildrenFrontToBack()) {\r\n            if (child.isVisible()) {\r\n                Rectangle2D.Double childBounds = child.getDrawingArea();\r\n                if (!(childBounds.isEmpty())) {\r\n                    cachedDrawingArea.add(childBounds);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(2273,'getLayouter()','org.jhotdraw.draw.LabeledLineConnectionFigure.getLayouter()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// LAYOUT\r\n/**\r\n * Get a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @return layout strategy used by this figure\r\n */\r\npublic Layouter getLayouter() {\r\n    return layouter;\r\n}'),(2274,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.indexOf(org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public int indexOf(Figure child) {\r\n    return children.indexOf(child);\r\n}'),(2275,'invalidate()','org.jhotdraw.draw.LabeledLineConnectionFigure.invalidate()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// EVENT HANDLING\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    cachedDrawingArea = null;\r\n}'),(2276,'layout()','org.jhotdraw.draw.LabeledLineConnectionFigure.layout()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','/**\r\n * A layout algorithm is used to define how the child components\r\n * should be laid out in relation to each other. The task for\r\n * layouting the child components for presentation is delegated\r\n * to a Layouter which can be plugged in at runtime.\r\n */\r\npublic void layout() {\r\n    if ((getLayouter()) != null) {\r\n        Rectangle2D.Double bounds = getBounds();\r\n        Point2D.Double p = new Point2D.Double(bounds.x, bounds.y);\r\n        Rectangle2D.Double r = getLayouter().layout(this, p, p);\r\n        invalidate();\r\n    }\r\n}'),(2277,'remap(java.util.Map,boolean)','org.jhotdraw.draw.LabeledLineConnectionFigure.remap(java.util.Map,boolean)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void remap(Map<Figure, Figure> oldToNew, boolean disconnectIfNotInMap) {\r\n    super.remap(oldToNew, disconnectIfNotInMap);\r\n    for (Figure child : children) {\r\n        child.remap(oldToNew, disconnectIfNotInMap);\r\n    }\r\n}'),(2278,'remove(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LabeledLineConnectionFigure.remove(org.jhotdraw.draw.Figure)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public boolean remove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index == (-1)) {\r\n        return false;\r\n    } else {\r\n        willChange();\r\n        basicRemoveChild(index);\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n        changed();\r\n        return true;\r\n    }\r\n}'),(2279,'removeAllChildren()','org.jhotdraw.draw.LabeledLineConnectionFigure.removeAllChildren()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void removeAllChildren() {\r\n    willChange();\r\n    while ((children.size()) > 0) {\r\n        Figure figure = basicRemoveChild(((children.size()) - 1));\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n    } \r\n    changed();\r\n}'),(2280,'removeChild(int)','org.jhotdraw.draw.LabeledLineConnectionFigure.removeChild(int)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public Figure removeChild(int index) {\r\n    willChange();\r\n    Figure figure = basicRemoveChild(index);\r\n    if ((getDrawing()) != null) {\r\n        figure.removeNotify(getDrawing());\r\n    }\r\n    changed();\r\n    return figure;\r\n}'),(2281,'removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','org.jhotdraw.draw.LabeledLineConnectionFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void removeCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.remove(CompositeFigureListener.class, listener);\r\n}'),(2282,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.LabeledLineConnectionFigure.removeNotify(org.jhotdraw.draw.Drawing)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void removeNotify(Drawing drawing) {\r\n    for (Figure child : new LinkedList<Figure>(children)) {\r\n        child.removeNotify(drawing);\r\n    }\r\n    super.removeNotify(drawing);\r\n}'),(2283,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.LabeledLineConnectionFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// ATTRIBUTES\r\n/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    if (isAttributeEnabled(key)) {\r\n        if ((children) != null) {\r\n            for (Figure child : children) {\r\n                key.basicSet(child, newValue);\r\n            }\r\n        }\r\n    }\r\n}'),(2284,'setLayouter(org.jhotdraw.draw.Layouter)','org.jhotdraw.draw.LabeledLineConnectionFigure.setLayouter(org.jhotdraw.draw.Layouter)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void setLayouter(Layouter newLayouter) {\r\n    this.layouter = newLayouter;\r\n}'),(2285,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.LabeledLineConnectionFigure.transform(java.awt.geom.AffineTransform)','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// SHAPE AND BOUNDS\r\n/**\r\n * Transforms the figure.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    super.transform(tx);\r\n    for (Figure f : children) {\r\n        f.transform(tx);\r\n    }\r\n    invalidate();\r\n}'),(2286,'updateConnection()','org.jhotdraw.draw.LabeledLineConnectionFigure.updateConnection()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','// CONNECTING\r\npublic void updateConnection() {\r\n    super.updateConnection();\r\n    layout();\r\n}'),(2287,'validate()','org.jhotdraw.draw.LabeledLineConnectionFigure.validate()','206','org.jhotdraw.draw.LabeledLineConnectionFigure','public void validate() {\r\n    super.validate();\r\n    layout();\r\n}'),(2288,'-init-(org.jhotdraw.draw.LabeledLineConnectionFigure)','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.-init-(org.jhotdraw.draw.LabeledLineConnectionFigure)','205','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler','private ChildHandler(LabeledLineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}'),(2289,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)','205','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler','@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.fireAreaInvalidated(e.getInvalidatedArea());\r\n    }\r\n}'),(2290,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','205','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler','@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.willChange();\r\n        owner.fireFigureChanged(e);\r\n        owner.changed();\r\n    }\r\n}'),(2291,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','205','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler','@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    owner.remove(e.getFigure());\r\n}'),(2292,'undoableEditHappened(javax.swing.event.UndoableEditEvent)','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.undoableEditHappened(javax.swing.event.UndoableEditEvent)','205','org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler','public void undoableEditHappened(UndoableEditEvent e) {\r\n    owner.fireUndoableEditHappened(e.getEdit());\r\n}'),(2293,'calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Layouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','207','org.jhotdraw.draw.Layouter','/* extends Serializable, Storable */\r\n/**\r\n * Calculate the layout for the figure and all its subelements. The\r\n * layout is not actually performed but just its dimensions are calculated.\r\n *\r\n * @param anchor\r\n * 		start point for the layout\r\n * @param lead\r\n * 		minimum lead point for the layout\r\n */\r\npublic Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead);'),(2294,'layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.Layouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','207','org.jhotdraw.draw.Layouter','/**\r\n * Method which lays out a figure. It is called by the figure\r\n * if a layout task is to be performed. Implementing classes\r\n * specify a certain layout algorithm in this method.\r\n *\r\n * @param anchor\r\n * 		start point for the layout\r\n * @param lead\r\n * 		minimum lead point for the layout\r\n */\r\npublic Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead);'),(2295,'-init-(org.jhotdraw.draw.LineConnectionFigure)','org.jhotdraw.draw.LineConnectionFigure.-init-(org.jhotdraw.draw.LineConnectionFigure)','209','org.jhotdraw.draw.LineConnectionFigure','private ConnectionHandler(LineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}'),(2296,'-init-()','org.jhotdraw.draw.LineConnectionFigure.-init-()','209','org.jhotdraw.draw.LineConnectionFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic LineConnectionFigure() {\r\n}'),(2297,'addNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.LineConnectionFigure.addNotify(org.jhotdraw.draw.Drawing)','209','org.jhotdraw.draw.LineConnectionFigure','// COMPOSITE FIGURES\r\n// LAYOUT\r\n/* public Liner getBezierPathLayouter() {\nreturn (Liner) getAttribute(BEZIER_PATH_LAYOUTER);\n}\npublic void setBezierPathLayouter(Liner newValue) {\nsetAttribute(BEZIER_PATH_LAYOUTER, newValue);\n}\n/**\nLays out the connection. This is called when the connection\nitself changes. By default the connection is recalculated\n/\npublic void layoutConnection() {\nif (getStartConnector() != null && getEndConnector() != null) {\nwillChange();\nLiner bpl = getBezierPathLayouter();\nif (bpl != null) {\nbpl.lineout(this);\n} else {\nif (getStartConnector() != null) {\nPoint2D.Double start = getStartConnector().findStart(this);\nif(start != null) {\nbasicSetStartPoint(start);\n}\n}\nif (getEndConnector() != null) {\nPoint2D.Double end = getEndConnector().findEnd(this);\n\nif(end != null) {\nbasicSetEndPoint(end);\n}\n}\n}\nchanged();\n}\n}\n */\r\n// CLONING\r\n// EVENT HANDLING\r\n/**\r\n * This method is invoked, when the Figure is being removed from a Drawing.\r\n * This method invokes handleConnect, if the Figure is connected.\r\n *\r\n * @see #handleConnect\r\n */\r\n@Override\r\npublic void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    if (((getStartConnector()) != null) && ((getEndConnector()) != null)) {\r\n        handleConnect(getStartConnector(), getEndConnector());\r\n        updateConnection();\r\n    }\r\n}'),(2298,'canConnect()','org.jhotdraw.draw.LineConnectionFigure.canConnect()','209','org.jhotdraw.draw.LineConnectionFigure','// CONNECTING\r\n/**\r\n * Tests whether a figure can be a connection target.\r\n * ConnectionFigures cannot be connected and return false.\r\n */\r\n@Override\r\npublic boolean canConnect() {\r\n    return false;\r\n}'),(2299,'canConnect(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector)','209','org.jhotdraw.draw.LineConnectionFigure','public boolean canConnect(Connector start) {\r\n    return start.getOwner().canConnect();\r\n}'),(2300,'canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','209','org.jhotdraw.draw.LineConnectionFigure','public boolean canConnect(Connector start, Connector end) {\r\n    return (start.getOwner().canConnect()) && (end.getOwner().canConnect());\r\n}'),(2301,'clone()','org.jhotdraw.draw.LineConnectionFigure.clone()','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic LineConnectionFigure clone() {\r\n    LineConnectionFigure that = ((LineConnectionFigure) (super.clone()));\r\n    that.connectionHandler = new LineConnectionFigure.ConnectionHandler(that);\r\n    if ((this.liner) != null) {\r\n        that.liner = ((Liner) (this.liner.clone()));\r\n    }\r\n    // FIXME - For safety reasons, we clone the connectors, but they would\r\n    // work, if we continued to use them. Maybe we should state somewhere\r\n    // whether connectors should be reusable, or not.\r\n    // To work properly, that must be registered as a figure listener\r\n    // to the connected figures.\r\n    if ((this.startConnector) != null) {\r\n        that.startConnector = ((Connector) (this.startConnector.clone()));\r\n        that.getStartFigure().addFigureListener(that.connectionHandler);\r\n    }\r\n    if ((this.endConnector) != null) {\r\n        that.endConnector = ((Connector) (this.endConnector.clone()));\r\n        that.getEndFigure().addFigureListener(that.connectionHandler);\r\n    }\r\n    if (((that.startConnector) != null) && ((that.endConnector) != null)) {\r\n        // that.handleConnect(that.getStartConnector(), that.getEndConnector());\r\n        that.updateConnection();\r\n    }\r\n    return that;\r\n}'),(2302,'createHandles(int)','org.jhotdraw.draw.LineConnectionFigure.createHandles(int)','209','org.jhotdraw.draw.LineConnectionFigure','// ATTRIBUTES\r\n// EDITING\r\n/**\r\n * Gets the handles of the figure. It returns the normal\r\n * PolylineHandles but adds ChangeConnectionHandles at the\r\n * start and end.\r\n */\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    ArrayList<Handle> handles = new ArrayList<Handle>(getNodeCount());\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BezierOutlineHandle(this, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new BezierOutlineHandle(this));\r\n            if ((getLiner()) == null) {\r\n                for (int i = 1, n = (getNodeCount()) - 1; i < n; i++) {\r\n                    handles.add(new BezierNodeHandle(this, i));\r\n                }\r\n            }\r\n            handles.add(new ConnectionStartHandle(this));\r\n            handles.add(new ConnectionEndHandle(this));\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(2303,'getBezierPath()','org.jhotdraw.draw.LineConnectionFigure.getBezierPath()','209','org.jhotdraw.draw.LineConnectionFigure','/**\r\n * FIXME - Liner must work with API of LineConnection!\r\n */\r\n@Override\r\npublic BezierPath getBezierPath() {\r\n    return path;\r\n}'),(2304,'getEndConnector()','org.jhotdraw.draw.LineConnectionFigure.getEndConnector()','209','org.jhotdraw.draw.LineConnectionFigure','public Connector getEndConnector() {\r\n    return endConnector;\r\n}'),(2305,'getEndFigure()','org.jhotdraw.draw.LineConnectionFigure.getEndFigure()','209','org.jhotdraw.draw.LineConnectionFigure','public Figure getEndFigure() {\r\n    return (endConnector) == null ? null : endConnector.getOwner();\r\n}'),(2306,'getLiner()','org.jhotdraw.draw.LineConnectionFigure.getLiner()','209','org.jhotdraw.draw.LineConnectionFigure','public Liner getLiner() {\r\n    return liner;\r\n}'),(2307,'getStartConnector()','org.jhotdraw.draw.LineConnectionFigure.getStartConnector()','209','org.jhotdraw.draw.LineConnectionFigure','public Connector getStartConnector() {\r\n    return startConnector;\r\n}'),(2308,'getStartFigure()','org.jhotdraw.draw.LineConnectionFigure.getStartFigure()','209','org.jhotdraw.draw.LineConnectionFigure','public Figure getStartFigure() {\r\n    return (startConnector) == null ? null : startConnector.getOwner();\r\n}'),(2309,'handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.LineConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','209','org.jhotdraw.draw.LineConnectionFigure','/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is added to a Drawing this method is invoked\r\n * on behalf of the addNotify call to the Figure.\r\n */\r\nprotected void handleConnect(Connector start, Connector end) {\r\n}'),(2310,'handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.draw.LineConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','209','org.jhotdraw.draw.LineConnectionFigure','/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is removed from a Drawing, this method is\r\n * invoked on behalf of the removeNotify call to the Figure.\r\n *\r\n * @see #removeNotify\r\n */\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n}'),(2311,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.LineConnectionFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','209','org.jhotdraw.draw.LineConnectionFigure','/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((getLiner()) == null) && ((evt.getClickCount()) == 2)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2312,'lineout()','org.jhotdraw.draw.LineConnectionFigure.lineout()','209','org.jhotdraw.draw.LineConnectionFigure','/* public void basicSetPoint(int index, Point2D.Double p) {\nif (index != 0 && index != getNodeCount() - 1) {\nif (getStartConnector() != null) {\nPoint2D.Double start = getStartConnector().findStart(this);\nif(start != null) {\nbasicSetStartPoint(start);\n}\n}\nif (getEndConnector() != null) {\nPoint2D.Double end = getEndConnector().findEnd(this);\n\nif(end != null) {\nbasicSetEndPoint(end);\n}\n}\n}\nsuper.basicSetPoint(index, p);\n}\n */\r\npublic void lineout() {\r\n    if ((liner) != null) {\r\n        liner.lineout(this);\r\n    }\r\n}'),(2313,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.LineConnectionFigure.read(org.jhotdraw.xml.DOMInput)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    readAttributes(in);\r\n    readLiner(in);\r\n    // Note: Points must be read after Liner, because Liner influences\r\n    // the location of the points.\r\n    readPoints(in);\r\n}'),(2314,'readLiner(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.LineConnectionFigure.readLiner(org.jhotdraw.xml.DOMInput)','209','org.jhotdraw.draw.LineConnectionFigure','protected void readLiner(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"liner\")) > 0) {\r\n        in.openElement(\"liner\");\r\n        liner = ((Liner) (in.readObject()));\r\n        in.closeElement();\r\n    } else {\r\n        liner = null;\r\n    }\r\n}'),(2315,'readPoints(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.LineConnectionFigure.readPoints(org.jhotdraw.xml.DOMInput)','209','org.jhotdraw.draw.LineConnectionFigure','// PERSISTENCE\r\n@Override\r\nprotected void readPoints(DOMInput in) throws IOException {\r\n    super.readPoints(in);\r\n    in.openElement(\"startConnector\");\r\n    setStartConnector(((Connector) (in.readObject())));\r\n    in.closeElement();\r\n    in.openElement(\"endConnector\");\r\n    setEndConnector(((Connector) (in.readObject())));\r\n    in.closeElement();\r\n}'),(2316,'remap(java.util.Map,boolean)','org.jhotdraw.draw.LineConnectionFigure.remap(java.util.Map,boolean)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void remap(Map<Figure, Figure> oldToNew, boolean disconnectIfNotInMap) {\r\n    willChange();\r\n    super.remap(oldToNew, disconnectIfNotInMap);\r\n    Figure newStartFigure = null;\r\n    Figure newEndFigure = null;\r\n    if ((getStartFigure()) != null) {\r\n        newStartFigure = ((Figure) (oldToNew.get(getStartFigure())));\r\n        if ((newStartFigure == null) && (!disconnectIfNotInMap)) {\r\n            newStartFigure = getStartFigure();\r\n        }\r\n    }\r\n    if ((getEndFigure()) != null) {\r\n        newEndFigure = ((Figure) (oldToNew.get(getEndFigure())));\r\n        if ((newEndFigure == null) && (!disconnectIfNotInMap)) {\r\n            newEndFigure = getEndFigure();\r\n        }\r\n    }\r\n    if (newStartFigure != null) {\r\n        setStartConnector(newStartFigure.findCompatibleConnector(getStartConnector(), true));\r\n    } else {\r\n        if (disconnectIfNotInMap) {\r\n            setStartConnector(null);\r\n        }\r\n    }\r\n    if (newEndFigure != null) {\r\n        setEndConnector(newEndFigure.findCompatibleConnector(getEndConnector(), false));\r\n    } else {\r\n        if (disconnectIfNotInMap) {\r\n            setEndConnector(null);\r\n        }\r\n    }\r\n    updateConnection();\r\n    changed();\r\n}'),(2317,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.LineConnectionFigure.removeNotify(org.jhotdraw.draw.Drawing)','209','org.jhotdraw.draw.LineConnectionFigure','/**\r\n * This method is invoked, when the Figure is being removed from a Drawing.\r\n * This method invokes handleDisconnect, if the Figure is connected.\r\n *\r\n * @see #handleDisconnect\r\n */\r\n@Override\r\npublic void removeNotify(Drawing drawing) {\r\n    if (((getStartConnector()) != null) && ((getEndConnector()) != null)) {\r\n        handleDisconnect(getStartConnector(), getEndConnector());\r\n    }\r\n    // Note: we do not set the connectors to null here, because we\r\n    // need them when we are added back to a drawing again. For example,\r\n    // when an undo is performed, after the LineConnection has been\r\n    // deleted.\r\n    /* setStartConnector(null);\n    setEndConnector(null);\n     */\r\n    super.removeNotify(drawing);\r\n}'),(2318,'reverseConnection()','org.jhotdraw.draw.LineConnectionFigure.reverseConnection()','209','org.jhotdraw.draw.LineConnectionFigure','public void reverseConnection() {\r\n    if (((startConnector) != null) && ((endConnector) != null)) {\r\n        handleDisconnect(startConnector, endConnector);\r\n        Connector tmpC = startConnector;\r\n        startConnector = endConnector;\r\n        endConnector = tmpC;\r\n        Point2D.Double tmpP = getStartPoint();\r\n        setStartPoint(getEndPoint());\r\n        setEndPoint(tmpP);\r\n        handleConnect(startConnector, endConnector);\r\n        updateConnection();\r\n    }\r\n}'),(2319,'setEndConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.LineConnectionFigure.setEndConnector(org.jhotdraw.draw.Connector)','209','org.jhotdraw.draw.LineConnectionFigure','public void setEndConnector(Connector newEnd) {\r\n    if (newEnd != (endConnector)) {\r\n        if ((endConnector) != null) {\r\n            getEndFigure().removeFigureListener(connectionHandler);\r\n            if ((getStartFigure()) != null) {\r\n                if ((getDrawing()) != null) {\r\n                    handleDisconnect(getStartConnector(), getEndConnector());\r\n                }\r\n            }\r\n        }\r\n        endConnector = newEnd;\r\n        if ((endConnector) != null) {\r\n            getEndFigure().addFigureListener(connectionHandler);\r\n            if (((getStartFigure()) != null) && ((getEndFigure()) != null)) {\r\n                if ((getDrawing()) != null) {\r\n                    handleConnect(getStartConnector(), getEndConnector());\r\n                    updateConnection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(2320,'setEndPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LineConnectionFigure.setEndPoint(java.awt.geom.Point2D$Double)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void setEndPoint(Point2D.Double p) {\r\n    setPoint(((getNodeCount()) - 1), p);\r\n}'),(2321,'setLiner(org.jhotdraw.draw.Liner)','org.jhotdraw.draw.LineConnectionFigure.setLiner(org.jhotdraw.draw.Liner)','209','org.jhotdraw.draw.LineConnectionFigure','public void setLiner(Liner newValue) {\r\n    this.liner = newValue;\r\n}'),(2322,'setNode(int,org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.draw.LineConnectionFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void setNode(int index, BezierPath.Node p) {\r\n    if ((index != 0) && (index != ((getNodeCount()) - 1))) {\r\n        if ((getStartConnector()) != null) {\r\n            Point2D.Double start = getStartConnector().findStart(this);\r\n            if (start != null) {\r\n                setStartPoint(start);\r\n            }\r\n        }\r\n        if ((getEndConnector()) != null) {\r\n            Point2D.Double end = getEndConnector().findEnd(this);\r\n            if (end != null) {\r\n                setEndPoint(end);\r\n            }\r\n        }\r\n    }\r\n    super.setNode(index, p);\r\n}'),(2323,'setPoint(int,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LineConnectionFigure.setPoint(int,java.awt.geom.Point2D$Double)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void setPoint(int index, Point2D.Double p) {\r\n    setPoint(index, 0, p);\r\n}'),(2324,'setStartConnector(org.jhotdraw.draw.Connector)','org.jhotdraw.draw.LineConnectionFigure.setStartConnector(org.jhotdraw.draw.Connector)','209','org.jhotdraw.draw.LineConnectionFigure','public void setStartConnector(Connector newStart) {\r\n    if (newStart != (startConnector)) {\r\n        if ((startConnector) != null) {\r\n            getStartFigure().removeFigureListener(connectionHandler);\r\n            if ((getEndFigure()) != null) {\r\n                handleDisconnect(getStartConnector(), getEndConnector());\r\n            }\r\n        }\r\n        startConnector = newStart;\r\n        if ((startConnector) != null) {\r\n            getStartFigure().addFigureListener(connectionHandler);\r\n            if (((getStartFigure()) != null) && ((getEndFigure()) != null)) {\r\n                handleConnect(getStartConnector(), getEndConnector());\r\n                updateConnection();\r\n            }\r\n        }\r\n    }\r\n}'),(2325,'setStartPoint(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LineConnectionFigure.setStartPoint(java.awt.geom.Point2D$Double)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void setStartPoint(Point2D.Double p) {\r\n    setPoint(0, p);\r\n}'),(2326,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.LineConnectionFigure.transform(java.awt.geom.AffineTransform)','209','org.jhotdraw.draw.LineConnectionFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n/**\r\n * Ensures that a connection is updated if the connection\r\n * was moved.\r\n */\r\n@Override\r\npublic void transform(AffineTransform tx) {\r\n    super.transform(tx);\r\n    updateConnection();// make sure that we are still connected\r\n\r\n}'),(2327,'updateConnection()','org.jhotdraw.draw.LineConnectionFigure.updateConnection()','209','org.jhotdraw.draw.LineConnectionFigure','public void updateConnection() {\r\n    willChange();\r\n    if ((getStartConnector()) != null) {\r\n        Point2D.Double start = getStartConnector().findStart(this);\r\n        if (start != null) {\r\n            setStartPoint(start);\r\n        }\r\n    }\r\n    if ((getEndConnector()) != null) {\r\n        Point2D.Double end = getEndConnector().findEnd(this);\r\n        if (end != null) {\r\n            setEndPoint(end);\r\n        }\r\n    }\r\n    changed();\r\n}'),(2328,'validate()','org.jhotdraw.draw.LineConnectionFigure.validate()','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void validate() {\r\n    super.validate();\r\n    lineout();\r\n}'),(2329,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.LineConnectionFigure.write(org.jhotdraw.xml.DOMOutput)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    writePoints(out);\r\n    writeAttributes(out);\r\n    writeLiner(out);\r\n}'),(2330,'writeLiner(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.LineConnectionFigure.writeLiner(org.jhotdraw.xml.DOMOutput)','209','org.jhotdraw.draw.LineConnectionFigure','protected void writeLiner(DOMOutput out) throws IOException {\r\n    if ((liner) != null) {\r\n        out.openElement(\"liner\");\r\n        out.writeObject(liner);\r\n        out.closeElement();\r\n    }\r\n}'),(2331,'writePoints(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.LineConnectionFigure.writePoints(org.jhotdraw.xml.DOMOutput)','209','org.jhotdraw.draw.LineConnectionFigure','@Override\r\nprotected void writePoints(DOMOutput out) throws IOException {\r\n    super.writePoints(out);\r\n    out.openElement(\"startConnector\");\r\n    out.writeObject(getStartConnector());\r\n    out.closeElement();\r\n    out.openElement(\"endConnector\");\r\n    out.writeObject(getEndConnector());\r\n    out.closeElement();\r\n}'),(2332,'-init-(org.jhotdraw.draw.LineConnectionFigure)','org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.-init-(org.jhotdraw.draw.LineConnectionFigure)','208','org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler','private ConnectionHandler(LineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}'),(2333,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','208','org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler','@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (((e.getSource()) == (owner.getStartFigure())) || ((e.getSource()) == (owner.getEndFigure()))) {\r\n        owner.willChange();\r\n        owner.updateConnection();\r\n        owner.changed();\r\n    }\r\n}'),(2334,'figureRemoved(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)','208','org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler','@Override\r\npublic void figureRemoved(FigureEvent evt) {\r\n    // The commented lines below must stay commented out.\r\n    // This is because, we must not set our connectors to null,\r\n    // in order to support reconnection using redo.\r\n    /* if (evt.getFigure() == owner.getStartFigure()\n    || evt.getFigure() == owner.getEndFigure()) {\n    owner.setStartConnector(null);\n    owner.setEndConnector(null);\n    }\n     */\r\n    owner.fireFigureRequestRemove();\r\n}'),(2335,'draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','210','org.jhotdraw.draw.LineDecoration','/**\r\n * Draws the decoration in the direction specified by the two Points.\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2);'),(2336,'getDecorationRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)','210','org.jhotdraw.draw.LineDecoration','/**\r\n * Returns the radius of the decorator.\r\n * This is used to crop the end of the line, to prevent it from being\r\n * drawn it over the decorator.\r\n */\r\npublic abstract double getDecorationRadius(Figure f);'),(2337,'getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','210','org.jhotdraw.draw.LineDecoration','/**\r\n * Returns the drawing bounds of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2);'),(2338,'-init-()','org.jhotdraw.draw.LineFigure.-init-()','211','org.jhotdraw.draw.LineFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic LineFigure() {\r\n    addNode(new BezierPath.Node(new Point2D.Double(0, 0)));\r\n    addNode(new BezierPath.Node(new Point2D.Double(0, 0)));\r\n}'),(2339,'canConnect()','org.jhotdraw.draw.LineFigure.canConnect()','211','org.jhotdraw.draw.LineFigure','// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\n@Override\r\npublic boolean canConnect() {\r\n    return false;\r\n}'),(2340,'createHandles(int)','org.jhotdraw.draw.LineFigure.createHandles(int)','211','org.jhotdraw.draw.LineFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BezierOutlineHandle(this, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new BezierOutlineHandle(this));\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i));\r\n            }\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(2341,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.LineFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','211','org.jhotdraw.draw.LineFigure','/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && ((view.getHandleDetailLevel()) == 0)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2342,'clone()','org.jhotdraw.draw.Liner.clone()','212','org.jhotdraw.draw.Liner','public Liner clone();'),(2343,'createHandles(org.jhotdraw.geom.BezierPath)','org.jhotdraw.draw.Liner.createHandles(org.jhotdraw.geom.BezierPath)','212','org.jhotdraw.draw.Liner','/**\r\n * Creates Handles for the Liner.\r\n * The ConnectionFigure can provide these handles to the user, in order\r\n * to let her control the lineout.\r\n *\r\n * @param path\r\n * 		The path for which to create handles.\r\n */\r\npublic Collection<Handle> createHandles(BezierPath path);'),(2344,'lineout(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.Liner.lineout(org.jhotdraw.draw.ConnectionFigure)','212','org.jhotdraw.draw.Liner','/**\r\n * Layouts the Path. This may alter the number and type of points\r\n * in the Path.\r\n *\r\n * @param figure\r\n * 		The ConnectionFigure to be lined out.\r\n */\r\npublic void lineout(ConnectionFigure figure);'),(2345,'-init-()','org.jhotdraw.draw.ListFigure.-init-()','213','org.jhotdraw.draw.ListFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ListFigure() {\r\n    this(null);\r\n}'),(2346,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ListFigure.-init-(org.jhotdraw.draw.Figure)','213','org.jhotdraw.draw.ListFigure','public ListFigure(Figure presentationFigure) {\r\n    super(presentationFigure);\r\n    setLayouter(new VerticalLayouter());\r\n    CompositeFigure.LAYOUT_INSETS.basicSet(this, new Insets2D.Double(4, 8, 4, 8));\r\n}'),(2347,'locate(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure)','214','org.jhotdraw.draw.Locator','/**\r\n * Locates a position on the provided figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner);'),(2348,'locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)','214','org.jhotdraw.draw.Locator','/**\r\n * Locates a position on the provided figure relative to the dependent\r\n * figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner, Figure dependent);'),(2349,'-init-()','org.jhotdraw.draw.LocatorConnector.-init-()','215','org.jhotdraw.draw.LocatorConnector','/**\r\n * Creates a new instance.\r\n * Only used for DOMStorable.\r\n */\r\npublic LocatorConnector() {\r\n}'),(2350,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.LocatorConnector.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','215','org.jhotdraw.draw.LocatorConnector','public LocatorConnector(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}'),(2351,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LocatorConnector.contains(java.awt.geom.Point2D$Double)','215','org.jhotdraw.draw.LocatorConnector','/**\r\n * Tests if a point is contained in the connector.\r\n */\r\n@Override\r\npublic boolean contains(Point2D.Double p) {\r\n    return getBounds().contains(p);\r\n}'),(2352,'getBounds()','org.jhotdraw.draw.LocatorConnector.getBounds()','215','org.jhotdraw.draw.LocatorConnector','/**\r\n * Gets the display box of the connector.\r\n */\r\n@Override\r\npublic Rectangle2D.Double getBounds() {\r\n    Point2D.Double p = locator.locate(getOwner());\r\n    return new Rectangle2D.Double(((p.x) - ((LocatorConnector.SIZE) / 2)), ((p.y) - ((LocatorConnector.SIZE) / 2)), LocatorConnector.SIZE, LocatorConnector.SIZE);\r\n}'),(2353,'getLocator()','org.jhotdraw.draw.LocatorConnector.getLocator()','215','org.jhotdraw.draw.LocatorConnector','public Locator getLocator() {\r\n    return locator;\r\n}'),(2354,'locate(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.LocatorConnector.locate(org.jhotdraw.draw.ConnectionFigure)','215','org.jhotdraw.draw.LocatorConnector','protected Point2D.Double locate(ConnectionFigure connection) {\r\n    return locator.locate(getOwner());\r\n}'),(2355,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.LocatorConnector.read(org.jhotdraw.xml.DOMInput)','215','org.jhotdraw.draw.LocatorConnector','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    in.openElement(\"locator\");\r\n    this.locator = ((Locator) (in.readObject(0)));\r\n    in.closeElement();\r\n}'),(2356,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.LocatorConnector.write(org.jhotdraw.xml.DOMOutput)','215','org.jhotdraw.draw.LocatorConnector','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.openElement(\"locator\");\r\n    out.writeObject(locator);\r\n    out.closeElement();\r\n}'),(2357,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.LocatorHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','216','org.jhotdraw.draw.LocatorHandle','/**\r\n * Initializes the LocatorHandle with the given Locator.\r\n */\r\npublic LocatorHandle(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}'),(2358,'basicGetBounds()','org.jhotdraw.draw.LocatorHandle.basicGetBounds()','216','org.jhotdraw.draw.LocatorHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(getLocation());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(2359,'getLocation()','org.jhotdraw.draw.LocatorHandle.getLocation()','216','org.jhotdraw.draw.LocatorHandle','public Point getLocation() {\r\n    return view.drawingToView(locator.locate(getOwner()));\r\n}'),(2360,'getLocationOnDrawing()','org.jhotdraw.draw.LocatorHandle.getLocationOnDrawing()','216','org.jhotdraw.draw.LocatorHandle','public Point2D.Double getLocationOnDrawing() {\r\n    return locator.locate(getOwner());\r\n}'),(2361,'-init-()','org.jhotdraw.draw.LocatorLayouter.-init-()','217','org.jhotdraw.draw.LocatorLayouter','/**\r\n * Creates a new instance.\r\n */\r\npublic LocatorLayouter() {\r\n}'),(2362,'calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LocatorLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','217','org.jhotdraw.draw.LocatorLayouter','public Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        Locator locator = getLocator(child);\r\n        Rectangle2D.Double r;\r\n        if (locator == null) {\r\n            r = child.getBounds();\r\n        } else {\r\n            Point2D.Double p = locator.locate(compositeFigure);\r\n            Dimension2DDouble d = child.getPreferredSize();\r\n            r = new Rectangle2D.Double(p.x, p.y, d.width, d.height);\r\n        }\r\n        if (!(r.isEmpty())) {\r\n            if (bounds == null) {\r\n                bounds = r;\r\n            } else {\r\n                bounds.add(r);\r\n            }\r\n        }\r\n    }\r\n    return bounds == null ? new Rectangle2D.Double() : bounds;\r\n}'),(2363,'getLocator(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.LocatorLayouter.getLocator(org.jhotdraw.draw.Figure)','217','org.jhotdraw.draw.LocatorLayouter','private Locator getLocator(Figure f) {\r\n    return LocatorLayouter.LAYOUT_LOCATOR.get(f);\r\n}'),(2364,'layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.LocatorLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','217','org.jhotdraw.draw.LocatorLayouter','public Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        Locator locator = getLocator(child);\r\n        Rectangle2D.Double r;\r\n        if (locator == null) {\r\n            r = child.getBounds();\r\n        } else {\r\n            Point2D.Double p = locator.locate(compositeFigure, child);\r\n            Dimension2DDouble d = child.getPreferredSize();\r\n            r = new Rectangle2D.Double(p.x, p.y, d.width, d.height);\r\n        }\r\n        child.willChange();\r\n        child.setBounds(new Point2D.Double(r.getMinX(), r.getMinY()), new Point2D.Double(r.getMaxX(), r.getMaxY()));\r\n        child.changed();\r\n        if (!(r.isEmpty())) {\r\n            if (bounds == null) {\r\n                bounds = r;\r\n            } else {\r\n                bounds.add(r);\r\n            }\r\n        }\r\n    }\r\n    return bounds == null ? new Rectangle2D.Double() : bounds;\r\n}'),(2365,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.MoveHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','218','org.jhotdraw.draw.MoveHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic MoveHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(2366,'addMoveHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.MoveHandle.addMoveHandles(org.jhotdraw.draw.Figure,java.util.Collection)','218','org.jhotdraw.draw.MoveHandle','/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addMoveHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(MoveHandle.southEast(f));\r\n    handles.add(MoveHandle.southWest(f));\r\n    handles.add(MoveHandle.northEast(f));\r\n    handles.add(MoveHandle.northWest(f));\r\n}'),(2367,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.MoveHandle.draw(java.awt.Graphics2D)','218','org.jhotdraw.draw.MoveHandle','/**\r\n * Draws this handle.\r\n * <p>\r\n * If the figure is transformable, the handle is drawn as a filled rectangle.\r\n * If the figure is not transformable, the handle is drawn as an unfilled\r\n * rectangle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (getOwner().isTransformable()) {\r\n        drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.MOVE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.MOVE_HANDLE_STROKE_COLOR))));\r\n    } else {\r\n        drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR))));\r\n    }\r\n}'),(2368,'east(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.east(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle east(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.east());\r\n}'),(2369,'getCursor()','org.jhotdraw.draw.MoveHandle.getCursor()','218','org.jhotdraw.draw.MoveHandle','/**\r\n * Returns a cursor for the handle.\r\n *\r\n * @return Returns a move cursor, if the figure\r\nis transformable. Returns a default cursor otherwise.\r\n */\r\n@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.MOVE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2370,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.MoveHandle.keyPressed(java.awt.event.KeyEvent)','218','org.jhotdraw.draw.MoveHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Figure f = getOwner();\r\n    if (f.isTransformable()) {\r\n        AffineTransform tx = new AffineTransform();\r\n        switch (evt.getKeyCode()) {\r\n            case KeyEvent.VK_UP :\r\n                tx.translate(0, (-1));\r\n                evt.consume();\r\n                break;\r\n            case KeyEvent.VK_DOWN :\r\n                tx.translate(0, (+1));\r\n                evt.consume();\r\n                break;\r\n            case KeyEvent.VK_LEFT :\r\n                tx.translate((-1), 0);\r\n                evt.consume();\r\n                break;\r\n            case KeyEvent.VK_RIGHT :\r\n                tx.translate((+1), 0);\r\n                evt.consume();\r\n                break;\r\n        }\r\n        f.willChange();\r\n        f.transform(tx);\r\n        f.changed();\r\n        fireUndoableEditHappened(new TransformEdit(f, tx));\r\n    }\r\n}'),(2371,'north(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.north(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle north(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.north());\r\n}'),(2372,'northEast(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.northEast(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle northEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northEast());\r\n}'),(2373,'northWest(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.northWest(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle northWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northWest());\r\n}'),(2374,'south(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.south(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle south(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.south());\r\n}'),(2375,'southEast(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.southEast(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle southEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southEast());\r\n}'),(2376,'southWest(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.southWest(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle southWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southWest());\r\n}'),(2377,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.MoveHandle.trackEnd(java.awt.Point,java.awt.Point,int)','218','org.jhotdraw.draw.MoveHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    if (getOwner().isTransformable()) {\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(((lead.x) - (anchor.x)), ((lead.y) - (anchor.y)));\r\n        fireUndoableEditHappened(new TransformEdit(getOwner(), tx));\r\n    }\r\n}'),(2378,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.MoveHandle.trackStart(java.awt.Point,int)','218','org.jhotdraw.draw.MoveHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    oldPoint = view.getConstrainer().constrainPoint(view.viewToDrawing(anchor));\r\n}'),(2379,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.MoveHandle.trackStep(java.awt.Point,java.awt.Point,int)','218','org.jhotdraw.draw.MoveHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    Figure f = getOwner();\r\n    if (f.isTransformable()) {\r\n        Point2D.Double newPoint = view.getConstrainer().constrainPoint(view.viewToDrawing(lead));\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(((newPoint.x) - (oldPoint.x)), ((newPoint.y) - (oldPoint.y)));\r\n        f.willChange();\r\n        f.transform(tx);\r\n        f.changed();\r\n        oldPoint = newPoint;\r\n    }\r\n}'),(2380,'west(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.MoveHandle.west(org.jhotdraw.draw.Figure)','218','org.jhotdraw.draw.MoveHandle','public static Handle west(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.west());\r\n}'),(2381,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.NullHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','219','org.jhotdraw.draw.NullHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic NullHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(2382,'addLeadHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.NullHandle.addLeadHandles(org.jhotdraw.draw.Figure,java.util.Collection)','219','org.jhotdraw.draw.NullHandle','/**\r\n * Creates handles for each lead of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addLeadHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new NullHandle(f, new RelativeLocator(0.0F, 0.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(0.0F, 1.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(1.0F, 0.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(1.0F, 1.0F)));\r\n}'),(2383,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.NullHandle.draw(java.awt.Graphics2D)','219','org.jhotdraw.draw.NullHandle','/**\r\n * Draws this handle.\r\n * Null Handles are drawn as unfilled rectangles.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR))));\r\n}'),(2384,'getCursor()','org.jhotdraw.draw.NullHandle.getCursor()','219','org.jhotdraw.draw.NullHandle','public Cursor getCursor() {\r\n    return Cursor.getDefaultCursor();\r\n}'),(2385,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.NullHandle.trackEnd(java.awt.Point,java.awt.Point,int)','219','org.jhotdraw.draw.NullHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(2386,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.NullHandle.trackStart(java.awt.Point,int)','219','org.jhotdraw.draw.NullHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(2387,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.NullHandle.trackStep(java.awt.Point,java.awt.Point,int)','219','org.jhotdraw.draw.NullHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(2388,'-init-()','org.jhotdraw.draw.Options.-init-()','220','org.jhotdraw.draw.Options','/**\r\n * Creates a new instance.\r\n */\r\npublic Options() {\r\n}'),(2389,'isFractionalMetrics()','org.jhotdraw.draw.Options.isFractionalMetrics()','220','org.jhotdraw.draw.Options','public static boolean isFractionalMetrics() {\r\n    return true;\r\n}'),(2390,'isTextAntialiased()','org.jhotdraw.draw.Options.isTextAntialiased()','220','org.jhotdraw.draw.Options','public static boolean isTextAntialiased() {\r\n    return true;\r\n}'),(2391,'createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','org.jhotdraw.draw.OutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','221','org.jhotdraw.draw.OutputFormat','/**\r\n * Creates a Transferable for the specified list of Figures.\r\n *\r\n * @param drawing\r\n * 		The drawing.\r\n * @param figures\r\n * 		A list of figures of the drawing.\r\n * @param scaleFactor\r\n * 		The factor to be used, when the Transferable creates\r\n * 		an image with a fixed size from the figures.\r\n * @return The Transferable.\r\n */\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException;'),(2392,'getFileExtension()','org.jhotdraw.draw.OutputFormat.getFileExtension()','221','org.jhotdraw.draw.OutputFormat','/**\r\n * Returns the file extension for the output format.\r\n * The file extension should be appended to a file name when storing a\r\n * Drawing with the specified file format.\r\n */\r\npublic String getFileExtension();'),(2393,'getFileFilter()','org.jhotdraw.draw.OutputFormat.getFileFilter()','221','org.jhotdraw.draw.OutputFormat','/**\r\n * Return a FileFilter that can be used to identify files which can be stored\r\n * with this output format. Typically, each output format has its own\r\n * recognizable file extension.\r\n *\r\n * @return FileFilter to be used with a javax.swing.JFileChooser\r\n */\r\npublic FileFilter getFileFilter();'),(2394,'getOutputFormatAccessory()','org.jhotdraw.draw.OutputFormat.getOutputFormatAccessory()','221','org.jhotdraw.draw.OutputFormat','/**\r\n * Return a JFileChooser accessory that can be used to customize the output\r\n * format.\r\n *\r\n * @return A JFileChooser accessory to be used with a javax.swing.JFileChooser\r\nReturns null, if no accessory is provided for this format.\r\n */\r\npublic JComponent getOutputFormatAccessory();'),(2395,'write(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.OutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)','221','org.jhotdraw.draw.OutputFormat','/**\r\n * Writes a Drawing into a file.\r\n *\r\n * @param file\r\n * 		The file.\r\n * @param drawing\r\n * 		The drawing.\r\n */\r\npublic void write(File file, Drawing drawing) throws IOException;'),(2396,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.OutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','221','org.jhotdraw.draw.OutputFormat','/**\r\n * Writes a Drawing into an output stream.\r\n *\r\n * @param out\r\n * 		The output stream.\r\n * @param drawing\r\n * 		The drawing.\r\n */\r\npublic void write(OutputStream out, Drawing drawing) throws IOException;'),(2397,'-init-()','org.jhotdraw.draw.PerpendicularBar.-init-()','222','org.jhotdraw.draw.PerpendicularBar','/**\r\n * Constructs a perpendicular line with a height of 10.\r\n */\r\npublic PerpendicularBar() {\r\n    this(10);\r\n}'),(2398,'-init-(double)','org.jhotdraw.draw.PerpendicularBar.-init-(double)','222','org.jhotdraw.draw.PerpendicularBar','/**\r\n * Constructs a perpendicular line with the given height.\r\n */\r\npublic PerpendicularBar(double height) {\r\n    super(false, true, false);\r\n    this.height = height;\r\n}'),(2399,'getDecoratorPath(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.PerpendicularBar.getDecoratorPath(org.jhotdraw.draw.Figure)','222','org.jhotdraw.draw.PerpendicularBar','/**\r\n * Calculates the path of the decorator...a simple line\r\n * perpendicular to the figure.\r\n */\r\nprotected GeneralPath getDecoratorPath(Figure f) {\r\n    GeneralPath path = new GeneralPath();\r\n    double halfHeight = (height) / 2;\r\n    path.moveTo(((float) (+halfHeight)), 0);\r\n    path.lineTo(((float) (-halfHeight)), 0);\r\n    return path;\r\n}'),(2400,'getDecoratorPathRadius(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.PerpendicularBar.getDecoratorPathRadius(org.jhotdraw.draw.Figure)','222','org.jhotdraw.draw.PerpendicularBar','/**\r\n * Calculates the radius of the decorator path.\r\n */\r\nprotected double getDecoratorPathRadius(Figure f) {\r\n    return 0.5;\r\n}'),(2401,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.PerpendicularBar.read(org.jhotdraw.xml.DOMInput)','222','org.jhotdraw.draw.PerpendicularBar','public void read(DOMInput in) {\r\n    height = in.getAttribute(\"height\", 10);\r\n}'),(2402,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.PerpendicularBar.write(org.jhotdraw.xml.DOMOutput)','222','org.jhotdraw.draw.PerpendicularBar','public void write(DOMOutput out) {\r\n    out.addAttribute(\"height\", height);\r\n}'),(2403,'-init-(org.jhotdraw.draw.ImageHolderFigure)','org.jhotdraw.draw.PictImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure)','223','org.jhotdraw.draw.PictImageInputFormat','/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic PictImageInputFormat(ImageHolderFigure prototype) {\r\n    this(prototype, \"PICT\", \"PICT (pct)\", \"pct\", BufferedImage.TYPE_INT_ARGB);\r\n}'),(2404,'-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)','org.jhotdraw.draw.PictImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)','223','org.jhotdraw.draw.PictImageInputFormat','/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * 		The BufferedImage type used to produce the image.\r\n * 		The value of this parameter must match with the format name.\r\n */\r\nprivate PictImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}'),(2405,'createImageHolder(java.io.InputStream)','org.jhotdraw.draw.PictImageInputFormat.createImageHolder(java.io.InputStream)','223','org.jhotdraw.draw.PictImageInputFormat','public ImageHolderFigure createImageHolder(InputStream in) throws IOException {\r\n    ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n    figure.setBufferedImage(Images.toBufferedImage(PictImageInputFormat.getImageFromPictStream(in)));\r\n    figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n    return figure;\r\n}'),(2406,'getFileExtension()','org.jhotdraw.draw.PictImageInputFormat.getFileExtension()','223','org.jhotdraw.draw.PictImageInputFormat','public String getFileExtension() {\r\n    return fileExtension;\r\n}'),(2407,'getFileFilter()','org.jhotdraw.draw.PictImageInputFormat.getFileFilter()','223','org.jhotdraw.draw.PictImageInputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(description, fileExtension);\r\n}'),(2408,'getImageFromPictStream(java.io.InputStream)','org.jhotdraw.draw.PictImageInputFormat.getImageFromPictStream(java.io.InputStream)','223','org.jhotdraw.draw.PictImageInputFormat','/* Converts a PICT to an AWT image using QuickTime for Java.\nThis code was contributed by Gord Peters.\n\nXXX - This code performs extremly slow. We should replace it by JNI\ncode which directly accesses the native clipboard.\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate static Image getImageFromPictStream(InputStream is) throws IOException {\r\n    try {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        // We need to strip the header from the data because a PICT file\r\n        // has a 512 byte header and then the data, but in our case we only\r\n        // need the data. --GP\r\n        byte[] header = new byte[512];\r\n        byte[] buf = new byte[4096];\r\n        int retval = 0;\r\n        int size = 0;\r\n        baos.write(header, 0, 512);\r\n        while ((retval = is.read(buf, 0, 4096)) > 0) {\r\n            baos.write(buf, 0, retval);\r\n        } \r\n        baos.close();\r\n        size = baos.size();\r\n        // IJ.log(\"size: \"+size); IJ.wait(2000);\r\n        if (size <= 0) {\r\n            return null;\r\n        }\r\n        byte[] imgBytes = baos.toByteArray();\r\n        // Again with the uglyness.  Here we need to use the Quicktime\r\n        // for Java code in order to create an Image object from\r\n        // the PICT data we received on the clipboard.  However, in\r\n        // order to get this to compile on other platforms, we use\r\n        // the Java reflection API.\r\n        // \r\n        // For reference, here is the equivalent code without\r\n        // reflection:\r\n        // \r\n        // \r\n        // if (QTSession.isInitialized() == false) {\r\n        // QTSession.open();\r\n        // }\r\n        // QTHandle handle= new QTHandle(imgBytes);\r\n        // GraphicsImporter gi=\r\n        // new GraphicsImporter(QTUtils.toOSType(\"PICT\"));\r\n        // gi.setDataHandle(handle);\r\n        // QDRect qdRect= gi.getNaturalBounds();\r\n        // GraphicsImporterDrawer gid= new GraphicsImporterDrawer(gi);\r\n        // QTImageProducer qip= new QTImageProducer(gid,\r\n        // new Dimension(qdRect.getWidth(),\r\n        // qdRect.getHeight()));\r\n        // return(Toolkit.getDefaultToolkit().createImage(qip));\r\n        // \r\n        // --GP\r\n        // IJ.log(\"quicktime.QTSession\");\r\n        Class c = Class.forName(\"quicktime.QTSession\");\r\n        Method m = c.getMethod(\"isInitialized\");\r\n        Boolean b = ((Boolean) (m.invoke(null, ((Object[]) (null)))));\r\n        if ((b.booleanValue()) == false) {\r\n            m = c.getMethod(\"open\");\r\n            m.invoke(null);\r\n        }\r\n        c = Class.forName(\"quicktime.util.QTHandle\");\r\n        Constructor con = c.getConstructor(new Class[]{ imgBytes.getClass() });\r\n        Object handle = con.newInstance(new Object[]{ imgBytes });\r\n        String s = new String(\"PICT\");\r\n        c = Class.forName(\"quicktime.util.QTUtils\");\r\n        m = c.getMethod(\"toOSType\", new Class[]{ s.getClass() });\r\n        Integer type = ((Integer) (m.invoke(null, new Object[]{ s })));\r\n        c = Class.forName(\"quicktime.std.image.GraphicsImporter\");\r\n        con = c.getConstructor(new Class[]{ type.TYPE });\r\n        Object importer = con.newInstance(new Object[]{ type });\r\n        m = c.getMethod(\"setDataHandle\", new Class[]{ Class.forName((\"quicktime.util.\" + \"QTHandleRef\")) });\r\n        m.invoke(importer, new Object[]{ handle });\r\n        m = c.getMethod(\"getNaturalBounds\");\r\n        Object rect = m.invoke(importer);\r\n        c = Class.forName(\"quicktime.app.view.GraphicsImporterDrawer\");\r\n        con = c.getConstructor(new Class[]{ importer.getClass() });\r\n        Object iDrawer = con.newInstance(new Object[]{ importer });\r\n        m = rect.getClass().getMethod(\"getWidth\");\r\n        Integer width = ((Integer) (m.invoke(rect)));\r\n        m = rect.getClass().getMethod(\"getHeight\");\r\n        Integer height = ((Integer) (m.invoke(rect)));\r\n        Dimension d = new Dimension(width.intValue(), height.intValue());\r\n        c = Class.forName(\"quicktime.app.view.QTImageProducer\");\r\n        con = c.getConstructor(new Class[]{ iDrawer.getClass(), d.getClass() });\r\n        Object producer = con.newInstance(new Object[]{ iDrawer, d });\r\n        if (producer instanceof ImageProducer) {\r\n            return Toolkit.getDefaultToolkit().createImage(((ImageProducer) (producer)));\r\n        }\r\n    } catch (Exception e) {\r\n        IOException error = new IOException(\"Couldnt read PICT image\");\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    IOException error = new IOException(\"Couldnt read PICT image\");\r\n    throw error;\r\n}'),(2409,'getInputFormatAccessory()','org.jhotdraw.draw.PictImageInputFormat.getInputFormatAccessory()','223','org.jhotdraw.draw.PictImageInputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(2410,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.PictImageInputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','223','org.jhotdraw.draw.PictImageInputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return flavor.equals(PictImageInputFormat.PICT_FLAVOR);\r\n}'),(2411,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.PictImageInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','223','org.jhotdraw.draw.PictImageInputFormat','public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    Object data = t.getTransferData(PictImageInputFormat.PICT_FLAVOR);\r\n    if (data instanceof InputStream) {\r\n        InputStream in = null;\r\n        try {\r\n            in = ((InputStream) (data));\r\n            Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n            if (img == null) {\r\n                throw new IOException(\"Couldnt read pict image\");\r\n            }\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(Images.toBufferedImage(img));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.add(figure);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(2412,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.PictImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','223','org.jhotdraw.draw.PictImageInputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(2413,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.PictImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','223','org.jhotdraw.draw.PictImageInputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n        if (img == null) {\r\n            throw new IOException(\"Couldnt read pict image\");\r\n        }\r\n        ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n        figure.setBufferedImage(Images.toBufferedImage(img));\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n        if (replace) {\r\n            drawing.removeAllChildren();\r\n        }\r\n        drawing.basicAdd(figure);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}'),(2414,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.PictImageInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','223','org.jhotdraw.draw.PictImageInputFormat','public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    try {\r\n        Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n        if (img == null) {\r\n            throw new IOException(\"Couldnt read pict image\");\r\n        }\r\n        ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n        figure.setBufferedImage(Images.toBufferedImage(img));\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n        if (replace) {\r\n            drawing.removeAllChildren();\r\n        }\r\n        drawing.basicAdd(figure);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}'),(2415,'-init-()','org.jhotdraw.draw.QuadTreeCompositeFigure.-init-()','225','org.jhotdraw.draw.QuadTreeCompositeFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic QuadTreeCompositeFigure() {\r\n    figureHandler = createFigureHandler();\r\n}'),(2416,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    quadTree.add(figure, figure.getDrawingArea());\r\n    figure.addFigureListener(figureHandler);\r\n    needsSorting = true;\r\n}'),(2417,'basicRemoveChild(int)','org.jhotdraw.draw.QuadTreeCompositeFigure.basicRemoveChild(int)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Figure basicRemoveChild(int index) {\r\n    Figure figure = children.get(index);\r\n    children.remove(index);\r\n    quadTree.remove(figure);\r\n    figure.removeFigureListener(figureHandler);\r\n    needsSorting = true;\r\n    return figure;\r\n}'),(2418,'bringToFront(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.bringToFront(org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public void bringToFront(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(2419,'contains(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.contains(org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(2420,'createFigureHandler()','org.jhotdraw.draw.QuadTreeCompositeFigure.createFigureHandler()','225','org.jhotdraw.draw.QuadTreeCompositeFigure','protected QuadTreeCompositeFigure.FigureHandler createFigureHandler() {\r\n    return new QuadTreeCompositeFigure.FigureHandler();\r\n}'),(2421,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.QuadTreeCompositeFigure.draw(java.awt.Graphics2D)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public void draw(Graphics2D g) {\r\n    Rectangle2D clipBounds = g.getClipBounds();\r\n    if (clipBounds != null) {\r\n        Collection<Figure> c = quadTree.findIntersects(clipBounds);\r\n        Collection<Figure> toDraw = sort(c);\r\n        draw(g, toDraw);\r\n    } else {\r\n        draw(g, children);\r\n    }\r\n}'),(2422,'draw(java.awt.Graphics2D,java.util.Collection)','org.jhotdraw.draw.QuadTreeCompositeFigure.draw(java.awt.Graphics2D,java.util.Collection)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public void draw(Graphics2D g, Collection<Figure> c) {\r\n    for (Figure f : c) {\r\n        f.draw(g);\r\n    }\r\n}'),(2423,'ensureSorted()','org.jhotdraw.draw.QuadTreeCompositeFigure.ensureSorted()','225','org.jhotdraw.draw.QuadTreeCompositeFigure','/**\r\n * Ensures that the children are sorted in z-order sequence.\r\n */\r\nprivate void ensureSorted() {\r\n    if (needsSorting) {\r\n        Collections.sort(children, FigureLayerComparator.INSTANCE);\r\n        needsSorting = false;\r\n    }\r\n}'),(2424,'findFigure(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigure(java.awt.geom.Point2D$Double)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Figure findFigure(Point2D.Double p) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            return null;\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return f.contains(p) ? f : null;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((c.contains(f)) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(2425,'findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Figure findFigureBehind(Point2D.Double p, Collection<Figure> figures) {\r\n    int inFrontOf = figures.size();\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (inFrontOf == 0) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            if (figures.contains(f)) {\r\n                inFrontOf--;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(2426,'findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(2427,'findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Figure findFigureExcept(Point2D.Double p, Collection ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (!(ignore.contains(f))) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((!(ignore.contains(f))) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(2428,'findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(2429,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureInside(java.awt.geom.Point2D$Double)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','@Override\r\npublic Figure findFigureInside(Point2D.Double p) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if ((c.contains(f)) && (f.contains(p))) {\r\n            return f.findFigureInside(p);\r\n        }\r\n    }\r\n    return null;\r\n}'),(2430,'findFigures(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFigures(java.awt.geom.Rectangle2D$Double)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public List<Figure> findFigures(Rectangle2D.Double r) {\r\n    LinkedList<Figure> c = new LinkedList<Figure>(quadTree.findIntersects(r));\r\n    switch (c.size()) {\r\n        case 0 :\r\n            // fall through\r\n        case 1 :\r\n            return c;\r\n        default :\r\n            return sort(c);\r\n    }\r\n}'),(2431,'findFiguresWithin(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.QuadTreeCompositeFigure.findFiguresWithin(java.awt.geom.Rectangle2D$Double)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public List<Figure> findFiguresWithin(Rectangle2D.Double bounds) {\r\n    LinkedList<Figure> contained = new LinkedList<Figure>();\r\n    for (Figure f : children) {\r\n        Rectangle2D r = f.getBounds();\r\n        if ((AttributeKeys.TRANSFORM.get(f)) != null) {\r\n            r = AttributeKeys.TRANSFORM.get(f).createTransformedShape(r).getBounds2D();\r\n        }\r\n        if ((f.isVisible()) && (bounds.contains(r))) {\r\n            contained.add(f);\r\n        }\r\n    }\r\n    return contained;\r\n}'),(2432,'getCanvasSize()','org.jhotdraw.draw.QuadTreeCompositeFigure.getCanvasSize()','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public Dimension2DDouble getCanvasSize() {\r\n    return canvasSize;\r\n}'),(2433,'getChildren()','org.jhotdraw.draw.QuadTreeCompositeFigure.getChildren()','225','org.jhotdraw.draw.QuadTreeCompositeFigure','@Override\r\npublic List<Figure> getChildren() {\r\n    return Collections.unmodifiableList(children);\r\n}'),(2434,'getFigures(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.QuadTreeCompositeFigure.getFigures(java.awt.geom.Rectangle2D$Double)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public List<Figure> getFigures(Rectangle2D.Double bounds) {\r\n    return new LinkedList<Figure>(quadTree.findInside(bounds));\r\n}'),(2435,'getFiguresFrontToBack()','org.jhotdraw.draw.QuadTreeCompositeFigure.getFiguresFrontToBack()','225','org.jhotdraw.draw.QuadTreeCompositeFigure','/**\r\n * Returns an iterator to iterate in\r\n * Z-order front to back over the children.\r\n */\r\npublic List<Figure> getFiguresFrontToBack() {\r\n    ensureSorted();\r\n    return new ReversedList<Figure>(children);\r\n}'),(2436,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.indexOf(org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}'),(2437,'sendToBack(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeCompositeFigure.sendToBack(org.jhotdraw.draw.Figure)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public void sendToBack(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(0, figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(2438,'setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.draw.QuadTreeCompositeFigure.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = newValue;\r\n    firePropertyChange(\"canvasSize\", oldValue, newValue);\r\n}'),(2439,'sort(java.util.Collection)','org.jhotdraw.draw.QuadTreeCompositeFigure.sort(java.util.Collection)','225','org.jhotdraw.draw.QuadTreeCompositeFigure','/**\r\n * Implementation note: Sorting can not be done for orphaned children.\r\n */\r\npublic List<Figure> sort(Collection<Figure> c) {\r\n    ensureSorted();\r\n    ArrayList<Figure> sorted = new ArrayList<Figure>(c.size());\r\n    for (Figure f : children) {\r\n        if (c.contains(f)) {\r\n            sorted.add(f);\r\n        }\r\n    }\r\n    return sorted;\r\n}'),(2440,'-init-()','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.-init-()','224','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler','FigureHandler() {\r\n}'),(2441,'areaInvalidated(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)','224','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler','@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(2442,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','224','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler','@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    quadTree.remove(e.getFigure());\r\n    quadTree.add(e.getFigure(), e.getFigure().getDrawingArea());\r\n    needsSorting = true;\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(2443,'figureRequestRemove(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)','224','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler','@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    remove(e.getFigure());\r\n}'),(2444,'undoableEditHappened(javax.swing.event.UndoableEditEvent)','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.undoableEditHappened(javax.swing.event.UndoableEditEvent)','224','org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler','/**\r\n * We propagate all edit events from our children to\r\n * undoable edit listeners, which have registered with us.\r\n */\r\npublic void undoableEditHappened(UndoableEditEvent e) {\r\n    fireUndoableEditHappened(e.getEdit());\r\n}'),(2445,'-init-()','org.jhotdraw.draw.QuadTreeDrawing.-init-()','227','org.jhotdraw.draw.QuadTreeDrawing','QuadTreeDrawing() {\r\n}'),(2446,'basicAdd(int,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.basicAdd(int,org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic void basicAdd(int index, Figure figure) {\r\n    super.basicAdd(index, figure);\r\n    quadTree.add(figure, figure.getDrawingArea());\r\n    needsSorting = true;\r\n}'),(2447,'basicRemoveChild(int)','org.jhotdraw.draw.QuadTreeDrawing.basicRemoveChild(int)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic Figure basicRemoveChild(int index) {\r\n    Figure figure = getChild(index);\r\n    quadTree.remove(figure);\r\n    needsSorting = true;\r\n    super.basicRemoveChild(index);\r\n    return figure;\r\n}'),(2448,'bringToFront(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.bringToFront(org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic void bringToFront(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(2449,'clone()','org.jhotdraw.draw.QuadTreeDrawing.clone()','227','org.jhotdraw.draw.QuadTreeDrawing','public QuadTreeDrawing clone() {\r\n    QuadTreeDrawing that = ((QuadTreeDrawing) (super.clone()));\r\n    that.canvasSize = ((this.canvasSize) == null) ? null : ((Dimension2DDouble) (this.canvasSize.clone()));\r\n    that.quadTree = new QuadTree<Figure>();\r\n    for (Figure f : getChildren()) {\r\n        quadTree.add(f, f.getDrawingArea());\r\n    }\r\n    return that;\r\n}'),(2450,'contains(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.contains(org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(2451,'createEventHandler()','org.jhotdraw.draw.QuadTreeDrawing.createEventHandler()','227','org.jhotdraw.draw.QuadTreeDrawing','protected AbstractCompositeFigure.EventHandler createEventHandler() {\r\n    return new QuadTreeDrawing.QuadTreeEventHandler();\r\n}'),(2452,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.QuadTreeDrawing.draw(java.awt.Graphics2D)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic void draw(Graphics2D g) {\r\n    Rectangle2D clipBounds = g.getClipBounds();\r\n    if (clipBounds != null) {\r\n        Collection<Figure> c = quadTree.findIntersects(clipBounds);\r\n        Collection<Figure> toDraw = sort(c);\r\n        draw(g, toDraw);\r\n    } else {\r\n        draw(g, children);\r\n    }\r\n}'),(2453,'draw(java.awt.Graphics2D,java.util.Collection)','org.jhotdraw.draw.QuadTreeDrawing.draw(java.awt.Graphics2D,java.util.Collection)','227','org.jhotdraw.draw.QuadTreeDrawing','public void draw(Graphics2D g, Collection<Figure> c) {\r\n    for (Figure f : c) {\r\n        if (f.isVisible()) {\r\n            f.draw(g);\r\n        }\r\n    }\r\n}'),(2454,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.QuadTreeDrawing.drawFill(java.awt.Graphics2D)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\nprotected void drawFill(Graphics2D g) {\r\n    // throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(2455,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.QuadTreeDrawing.drawStroke(java.awt.Graphics2D)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\nprotected void drawStroke(Graphics2D g) {\r\n    // throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(2456,'ensureSorted()','org.jhotdraw.draw.QuadTreeDrawing.ensureSorted()','227','org.jhotdraw.draw.QuadTreeDrawing','/**\r\n * Ensures that the children are sorted in z-order sequence.\r\n */\r\nprivate void ensureSorted() {\r\n    if (needsSorting) {\r\n        Collections.sort(children, FigureLayerComparator.INSTANCE);\r\n        needsSorting = false;\r\n    }\r\n}'),(2457,'findFigure(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.QuadTreeDrawing.findFigure(java.awt.geom.Point2D$Double)','227','org.jhotdraw.draw.QuadTreeDrawing','public Figure findFigure(Point2D.Double p) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            return null;\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return f.contains(p) ? f : null;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((c.contains(f)) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(2458,'findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.QuadTreeDrawing.findFigureBehind(java.awt.geom.Point2D$Double,java.util.Collection)','227','org.jhotdraw.draw.QuadTreeDrawing','public Figure findFigureBehind(Point2D.Double p, Collection<? extends Figure> children) {\r\n    int inFrontOf = children.size();\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (inFrontOf == 0) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            if (children.contains(f)) {\r\n                inFrontOf--;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(2459,'findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(2460,'findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','org.jhotdraw.draw.QuadTreeDrawing.findFigureExcept(java.awt.geom.Point2D$Double,java.util.Collection)','227','org.jhotdraw.draw.QuadTreeDrawing','public Figure findFigureExcept(Point2D.Double p, Collection<? extends Figure> ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (!(ignore.contains(f))) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((!(ignore.contains(f))) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(2461,'findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(2462,'findFigureInside(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.QuadTreeDrawing.findFigureInside(java.awt.geom.Point2D$Double)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic Figure findFigureInside(Point2D.Double p) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if ((c.contains(f)) && (f.contains(p))) {\r\n            return f.findFigureInside(p);\r\n        }\r\n    }\r\n    return null;\r\n}'),(2463,'findFigures(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.QuadTreeDrawing.findFigures(java.awt.geom.Rectangle2D$Double)','227','org.jhotdraw.draw.QuadTreeDrawing','public List<Figure> findFigures(Rectangle2D.Double r) {\r\n    LinkedList<Figure> c = new LinkedList<Figure>(quadTree.findIntersects(r));\r\n    switch (c.size()) {\r\n        case 0 :\r\n            // fall through\r\n        case 1 :\r\n            return c;\r\n        default :\r\n            return sort(c);\r\n    }\r\n}'),(2464,'findFiguresWithin(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.QuadTreeDrawing.findFiguresWithin(java.awt.geom.Rectangle2D$Double)','227','org.jhotdraw.draw.QuadTreeDrawing','public List<Figure> findFiguresWithin(Rectangle2D.Double bounds) {\r\n    LinkedList<Figure> contained = new LinkedList<Figure>();\r\n    for (Figure f : children) {\r\n        Rectangle2D.Double r = f.getBounds();\r\n        if ((AttributeKeys.TRANSFORM.get(f)) != null) {\r\n            Rectangle2D rt = AttributeKeys.TRANSFORM.get(f).createTransformedShape(r).getBounds2D();\r\n            r = (rt instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rt)) : new Rectangle2D.Double(rt.getX(), rt.getY(), rt.getWidth(), rt.getHeight());\r\n        }\r\n        if ((f.isVisible()) && (Geom.contains(bounds, r))) {\r\n            contained.add(f);\r\n        }\r\n    }\r\n    return contained;\r\n}'),(2465,'getCanvasSize()','org.jhotdraw.draw.QuadTreeDrawing.getCanvasSize()','227','org.jhotdraw.draw.QuadTreeDrawing','public Dimension2DDouble getCanvasSize() {\r\n    return (canvasSize) == null ? null : ((Dimension2DDouble) (canvasSize.clone()));\r\n}'),(2466,'getChildren()','org.jhotdraw.draw.QuadTreeDrawing.getChildren()','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic List<Figure> getChildren() {\r\n    return Collections.unmodifiableList(children);\r\n}'),(2467,'getChildren(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.QuadTreeDrawing.getChildren(java.awt.geom.Rectangle2D$Double)','227','org.jhotdraw.draw.QuadTreeDrawing','public List<Figure> getChildren(Rectangle2D.Double bounds) {\r\n    return new LinkedList<Figure>(quadTree.findInside(bounds));\r\n}'),(2468,'getFiguresFrontToBack()','org.jhotdraw.draw.QuadTreeDrawing.getFiguresFrontToBack()','227','org.jhotdraw.draw.QuadTreeDrawing','/**\r\n * Returns an iterator to iterate in\r\n * Z-order front to back over the children.\r\n */\r\npublic List<Figure> getFiguresFrontToBack() {\r\n    ensureSorted();\r\n    return new ReversedList<Figure>(children);\r\n}'),(2469,'indexOf(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.indexOf(org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}'),(2470,'sendToBack(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.QuadTreeDrawing.sendToBack(org.jhotdraw.draw.Figure)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\npublic void sendToBack(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(0, figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(2471,'setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.QuadTreeDrawing.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','227','org.jhotdraw.draw.QuadTreeDrawing','@Override\r\nprotected void setAttributeOnChildren(AttributeKey key, Object newValue) {\r\n    // empty\r\n}'),(2472,'setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.draw.QuadTreeDrawing.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)','227','org.jhotdraw.draw.QuadTreeDrawing','public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = (newValue == null) ? null : ((Dimension2DDouble) (newValue.clone()));\r\n    firePropertyChange(\"canvasSize\", oldValue, newValue);\r\n}'),(2473,'sort(java.util.Collection)','org.jhotdraw.draw.QuadTreeDrawing.sort(java.util.Collection)','227','org.jhotdraw.draw.QuadTreeDrawing','/**\r\n * Implementation note: Sorting can not be done for orphaned children.\r\n */\r\npublic List<Figure> sort(Collection<? extends Figure> c) {\r\n    ensureSorted();\r\n    ArrayList<Figure> sorted = new ArrayList<Figure>(c.size());\r\n    for (Figure f : children) {\r\n        if (c.contains(f)) {\r\n            sorted.add(f);\r\n        }\r\n    }\r\n    return sorted;\r\n}'),(2474,'-init-()','org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler.-init-()','226','org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler','QuadTreeEventHandler() {\r\n}'),(2475,'figureChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)','226','org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler','@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    quadTree.remove(e.getFigure());\r\n    quadTree.add(e.getFigure(), e.getFigure().getDrawingArea());\r\n    needsSorting = true;\r\n    invalidate();\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(2476,'-init-()','org.jhotdraw.draw.RectangleFigure.-init-()','228','org.jhotdraw.draw.RectangleFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic RectangleFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(2477,'-init-(double,double,double,double)','org.jhotdraw.draw.RectangleFigure.-init-(double,double,double,double)','228','org.jhotdraw.draw.RectangleFigure','public RectangleFigure(double x, double y, double width, double height) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n}'),(2478,'clone()','org.jhotdraw.draw.RectangleFigure.clone()','228','org.jhotdraw.draw.RectangleFigure','// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\npublic RectangleFigure clone() {\r\n    RectangleFigure that = ((RectangleFigure) (super.clone()));\r\n    that.rectangle = ((Rectangle2D.Double) (this.rectangle.clone()));\r\n    return that;\r\n}'),(2479,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.RectangleFigure.contains(java.awt.geom.Point2D$Double)','228','org.jhotdraw.draw.RectangleFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = (AttributeKeys.getPerpendicularHitGrowth(this)) + 1.0;\r\n    Geom.grow(r, grow, grow);\r\n    return r.contains(p);\r\n}'),(2480,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.RectangleFigure.drawFill(java.awt.Graphics2D)','228','org.jhotdraw.draw.RectangleFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    Geom.grow(r, grow, grow);\r\n    g.fill(r);\r\n}'),(2481,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.RectangleFigure.drawStroke(java.awt.Graphics2D)','228','org.jhotdraw.draw.RectangleFigure','protected void drawStroke(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n    Geom.grow(r, grow, grow);\r\n    g.draw(r);\r\n}'),(2482,'getBounds()','org.jhotdraw.draw.RectangleFigure.getBounds()','228','org.jhotdraw.draw.RectangleFigure','// SHAPE AND BOUNDS\r\npublic Rectangle2D.Double getBounds() {\r\n    Rectangle2D.Double bounds = ((Rectangle2D.Double) (rectangle.clone()));\r\n    return bounds;\r\n}'),(2483,'getDrawingArea()','org.jhotdraw.draw.RectangleFigure.getDrawingArea()','228','org.jhotdraw.draw.RectangleFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    double grow = (AttributeKeys.getPerpendicularHitGrowth(this)) + 1.0;\r\n    Geom.grow(r, grow, grow);\r\n    return r;\r\n}'),(2484,'getTransformRestoreData()','org.jhotdraw.draw.RectangleFigure.getTransformRestoreData()','228','org.jhotdraw.draw.RectangleFigure','public Object getTransformRestoreData() {\r\n    return rectangle.clone();\r\n}'),(2485,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.RectangleFigure.restoreTransformTo(java.lang.Object)','228','org.jhotdraw.draw.RectangleFigure','public void restoreTransformTo(Object geometry) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (geometry));\r\n    rectangle.x = r.x;\r\n    rectangle.y = r.y;\r\n    rectangle.width = r.width;\r\n    rectangle.height = r.height;\r\n}'),(2486,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.RectangleFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','228','org.jhotdraw.draw.RectangleFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    rectangle.x = Math.min(anchor.x, lead.x);\r\n    rectangle.y = Math.min(anchor.y, lead.y);\r\n    rectangle.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    rectangle.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(2487,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.RectangleFigure.transform(java.awt.geom.AffineTransform)','228','org.jhotdraw.draw.RectangleFigure','/**\r\n * Moves the Figure to a new location.\r\n *\r\n * @param tx\r\n * 		the transformation matrix.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(2488,'-init-()','org.jhotdraw.draw.RelativeDecoratorLocator.-init-()','229','org.jhotdraw.draw.RelativeDecoratorLocator','public RelativeDecoratorLocator() {\r\n}'),(2489,'-init-(double,double)','org.jhotdraw.draw.RelativeDecoratorLocator.-init-(double,double)','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * Creates a new instance.\r\n */\r\npublic RelativeDecoratorLocator(double relativeX, double relativeY) {\r\n    super(relativeX, relativeY);\r\n}'),(2490,'-init-(double,double,boolean)','org.jhotdraw.draw.RelativeDecoratorLocator.-init-(double,double,boolean)','229','org.jhotdraw.draw.RelativeDecoratorLocator','public RelativeDecoratorLocator(double relativeX, double relativeY, boolean isQuadratic) {\r\n    super(relativeX, relativeY);\r\n    this.isQuadratic = isQuadratic;\r\n}'),(2491,'center()','org.jhotdraw.draw.RelativeDecoratorLocator.center()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * Center.\r\n */\r\npublic static Locator center() {\r\n    return new RelativeDecoratorLocator(0.5, 0.5);\r\n}'),(2492,'east()','org.jhotdraw.draw.RelativeDecoratorLocator.east()','229','org.jhotdraw.draw.RelativeDecoratorLocator','public static Locator east() {\r\n    return new RelativeDecoratorLocator(1.0, 0.5);\r\n}'),(2493,'locate(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.RelativeDecoratorLocator.locate(org.jhotdraw.draw.Figure)','229','org.jhotdraw.draw.RelativeDecoratorLocator','public Point2D.Double locate(Figure owner) {\r\n    Rectangle2D.Double r;\r\n    if ((owner instanceof DecoratedFigure) && ((((DecoratedFigure) (owner)).getDecorator()) != null)) {\r\n        r = ((DecoratedFigure) (owner)).getDecorator().getBounds();\r\n    } else {\r\n        r = owner.getBounds();\r\n    }\r\n    if (isQuadratic) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    return new Point2D.Double(((r.x) + ((r.width) * (relativeX))), ((r.y) + ((r.height) * (relativeY))));\r\n}'),(2494,'north()','org.jhotdraw.draw.RelativeDecoratorLocator.north()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * North.\r\n */\r\npublic static Locator north() {\r\n    return new RelativeDecoratorLocator(0.5, 0.0);\r\n}'),(2495,'northEast()','org.jhotdraw.draw.RelativeDecoratorLocator.northEast()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * North east.\r\n */\r\npublic static Locator northEast() {\r\n    return new RelativeDecoratorLocator(1.0, 0.0);\r\n}'),(2496,'northWest()','org.jhotdraw.draw.RelativeDecoratorLocator.northWest()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * North west.\r\n */\r\npublic static Locator northWest() {\r\n    return new RelativeDecoratorLocator(0.0, 0.0);\r\n}'),(2497,'south()','org.jhotdraw.draw.RelativeDecoratorLocator.south()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * South.\r\n */\r\npublic static Locator south() {\r\n    return new RelativeDecoratorLocator(0.5, 1.0);\r\n}'),(2498,'southEast()','org.jhotdraw.draw.RelativeDecoratorLocator.southEast()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * South east.\r\n */\r\npublic static Locator southEast() {\r\n    return new RelativeDecoratorLocator(1.0, 1.0);\r\n}'),(2499,'southWest()','org.jhotdraw.draw.RelativeDecoratorLocator.southWest()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * South west.\r\n */\r\npublic static Locator southWest() {\r\n    return new RelativeDecoratorLocator(0.0, 1.0);\r\n}'),(2500,'west()','org.jhotdraw.draw.RelativeDecoratorLocator.west()','229','org.jhotdraw.draw.RelativeDecoratorLocator','/**\r\n * West.\r\n */\r\npublic static Locator west() {\r\n    return new RelativeDecoratorLocator(0.0, 0.5);\r\n}'),(2501,'-init-()','org.jhotdraw.draw.RelativeLocator.-init-()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Creates a new instance.\r\n */\r\npublic RelativeLocator() {\r\n    this(0, 0, false);\r\n}'),(2502,'-init-(double,double)','org.jhotdraw.draw.RelativeLocator.-init-(double,double)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Creates a new instance.\r\n */\r\npublic RelativeLocator(double relativeX, double relativeY) {\r\n    this(relativeX, relativeY, false);\r\n}'),(2503,'-init-(double,double,boolean)','org.jhotdraw.draw.RelativeLocator.-init-(double,double,boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n *\r\n *\r\n * @param relativeX\r\n * 		x-position relative to bounds expressed as a value\r\n * 		between 0 and 1.\r\n * @param relativeY\r\n * 		y-position relative to bounds expressed as a value\r\n * 		between 0 and 1.\r\n * @param isTransform\r\n * 		Set this to true, if the locator shall honor the\r\n * 		TRANSFORM attribute of the Figure.\r\n */\r\npublic RelativeLocator(double relativeX, double relativeY, boolean isTransform) {\r\n    this.relativeX = relativeX;\r\n    this.relativeY = relativeY;\r\n    this.isTransform = isTransform;\r\n}'),(2504,'center()','org.jhotdraw.draw.RelativeLocator.center()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming Center.\r\n */\r\npublic static Locator center() {\r\n    return RelativeLocator.center(false);\r\n}'),(2505,'center(boolean)','org.jhotdraw.draw.RelativeLocator.center(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Center.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator center(boolean isTransform) {\r\n    return new RelativeLocator(0.5, 0.5, isTransform);\r\n}'),(2506,'east()','org.jhotdraw.draw.RelativeLocator.east()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming East.\r\n */\r\npublic static Locator east() {\r\n    return RelativeLocator.east(false);\r\n}'),(2507,'east(boolean)','org.jhotdraw.draw.RelativeLocator.east(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * East.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator east(boolean isTransform) {\r\n    return new RelativeLocator(1.0, 0.5, isTransform);\r\n}'),(2508,'equals(java.lang.Object)','org.jhotdraw.draw.RelativeLocator.equals(java.lang.Object)','230','org.jhotdraw.draw.RelativeLocator','@Override\r\npublic boolean equals(Object obj) {\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if ((getClass()) != (obj.getClass())) {\r\n        return false;\r\n    }\r\n    final RelativeLocator other = ((RelativeLocator) (obj));\r\n    if ((this.relativeX) != (other.relativeX)) {\r\n        return false;\r\n    }\r\n    if ((this.relativeY) != (other.relativeY)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(2509,'hashCode()','org.jhotdraw.draw.RelativeLocator.hashCode()','230','org.jhotdraw.draw.RelativeLocator','@Override\r\npublic int hashCode() {\r\n    int hash = 7;\r\n    hash = (71 * hash) + ((int) ((Double.doubleToLongBits(this.relativeX)) ^ ((Double.doubleToLongBits(this.relativeX)) >>> 32)));\r\n    hash = (71 * hash) + ((int) ((Double.doubleToLongBits(this.relativeY)) ^ ((Double.doubleToLongBits(this.relativeY)) >>> 32)));\r\n    return hash;\r\n}'),(2510,'locate(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.RelativeLocator.locate(org.jhotdraw.draw.Figure)','230','org.jhotdraw.draw.RelativeLocator','public Point2D.Double locate(Figure owner) {\r\n    Rectangle2D.Double bounds = owner.getBounds();\r\n    if ((owner instanceof DecoratedFigure) && ((((DecoratedFigure) (owner)).getDecorator()) != null)) {\r\n        Insets2D.Double insets = AttributeKeys.DECORATOR_INSETS.get(owner);\r\n        if (insets != null) {\r\n            insets.addTo(bounds);\r\n        }\r\n    }\r\n    Point2D.Double location;\r\n    if (isTransform) {\r\n        location = new Point2D.Double(((bounds.x) + ((bounds.width) * (relativeX))), ((bounds.y) + ((bounds.height) * (relativeY))));\r\n        if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n            AttributeKeys.TRANSFORM.get(owner).transform(location, location);\r\n        }\r\n    } else {\r\n        if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n            Rectangle2D r = AttributeKeys.TRANSFORM.get(owner).createTransformedShape(bounds).getBounds2D();\r\n            bounds.x = r.getX();\r\n            bounds.y = r.getY();\r\n            bounds.width = r.getWidth();\r\n            bounds.height = r.getHeight();\r\n        }\r\n        location = new Point2D.Double(((bounds.x) + ((bounds.width) * (relativeX))), ((bounds.y) + ((bounds.height) * (relativeY))));\r\n    }\r\n    return location;\r\n}'),(2511,'north()','org.jhotdraw.draw.RelativeLocator.north()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming North.\r\n */\r\npublic static Locator north() {\r\n    return RelativeLocator.north(false);\r\n}'),(2512,'north(boolean)','org.jhotdraw.draw.RelativeLocator.north(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * North.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator north(boolean isTransform) {\r\n    return new RelativeLocator(0.5, 0.0, isTransform);\r\n}'),(2513,'northEast()','org.jhotdraw.draw.RelativeLocator.northEast()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming North east.\r\n */\r\npublic static Locator northEast() {\r\n    return RelativeLocator.northEast(false);\r\n}'),(2514,'northEast(boolean)','org.jhotdraw.draw.RelativeLocator.northEast(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Norht East.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator northEast(boolean isTransform) {\r\n    return new RelativeLocator(1.0, 0.0, isTransform);\r\n}'),(2515,'northWest()','org.jhotdraw.draw.RelativeLocator.northWest()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming North west.\r\n */\r\npublic static Locator northWest() {\r\n    return RelativeLocator.northWest(false);\r\n}'),(2516,'northWest(boolean)','org.jhotdraw.draw.RelativeLocator.northWest(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * North West.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator northWest(boolean isTransform) {\r\n    return new RelativeLocator(0.0, 0.0, isTransform);\r\n}'),(2517,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.RelativeLocator.read(org.jhotdraw.xml.DOMInput)','230','org.jhotdraw.draw.RelativeLocator','public void read(DOMInput in) {\r\n    relativeX = in.getAttribute(\"relativeX\", 0.5);\r\n    relativeY = in.getAttribute(\"relativeY\", 0.5);\r\n}'),(2518,'south()','org.jhotdraw.draw.RelativeLocator.south()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming South.\r\n */\r\npublic static Locator south() {\r\n    return RelativeLocator.south(false);\r\n}'),(2519,'south(boolean)','org.jhotdraw.draw.RelativeLocator.south(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * South.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator south(boolean isTransform) {\r\n    return new RelativeLocator(0.5, 1.0, isTransform);\r\n}'),(2520,'southEast()','org.jhotdraw.draw.RelativeLocator.southEast()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming South east.\r\n */\r\npublic static Locator southEast() {\r\n    return RelativeLocator.southEast(false);\r\n}'),(2521,'southEast(boolean)','org.jhotdraw.draw.RelativeLocator.southEast(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * South East.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator southEast(boolean isTransform) {\r\n    return new RelativeLocator(1.0, 1.0, isTransform);\r\n}'),(2522,'southWest()','org.jhotdraw.draw.RelativeLocator.southWest()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming South west.\r\n */\r\npublic static Locator southWest() {\r\n    return RelativeLocator.southWest(false);\r\n}'),(2523,'southWest(boolean)','org.jhotdraw.draw.RelativeLocator.southWest(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * South West.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator southWest(boolean isTransform) {\r\n    return new RelativeLocator(0.0, 1.0, isTransform);\r\n}'),(2524,'west()','org.jhotdraw.draw.RelativeLocator.west()','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * Non-transforming West.\r\n */\r\npublic static Locator west() {\r\n    return RelativeLocator.west(false);\r\n}'),(2525,'west(boolean)','org.jhotdraw.draw.RelativeLocator.west(boolean)','230','org.jhotdraw.draw.RelativeLocator','/**\r\n * West.\r\n *\r\n * @param isTransform\r\n * 		Set this to true, if RelativeLocator shall honour\r\n * 		the AttributesKey.TRANSFORM attribute of the Figure.\r\n */\r\npublic static Locator west(boolean isTransform) {\r\n    return new RelativeLocator(0.0, 0.5, isTransform);\r\n}'),(2526,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.RelativeLocator.write(org.jhotdraw.xml.DOMOutput)','230','org.jhotdraw.draw.RelativeLocator','public void write(DOMOutput out) {\r\n    out.addAttribute(\"relativeX\", relativeX, 0.5);\r\n    out.addAttribute(\"relativeY\", relativeY, 0.5);\r\n}'),(2527,'-init-()','org.jhotdraw.draw.ResizeHandleKit.-init-()','240','org.jhotdraw.draw.ResizeHandleKit','/**\r\n * Creates a new instance.\r\n */\r\npublic ResizeHandleKit() {\r\n}'),(2528,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.ResizeHandleKit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','240','org.jhotdraw.draw.ResizeHandleKit','ResizeHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(2529,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.-init-(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast(true));\r\n}'),(2530,'addCornerResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.ResizeHandleKit.addCornerResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)','240','org.jhotdraw.draw.ResizeHandleKit','/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addCornerResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(ResizeHandleKit.southEast(f));\r\n    handles.add(ResizeHandleKit.southWest(f));\r\n    handles.add(ResizeHandleKit.northEast(f));\r\n    handles.add(ResizeHandleKit.northWest(f));\r\n}'),(2531,'addEdgeResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.ResizeHandleKit.addEdgeResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)','240','org.jhotdraw.draw.ResizeHandleKit','/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addEdgeResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(ResizeHandleKit.south(f));\r\n    handles.add(ResizeHandleKit.north(f));\r\n    handles.add(ResizeHandleKit.east(f));\r\n    handles.add(ResizeHandleKit.west(f));\r\n}'),(2532,'addResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.ResizeHandleKit.addResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)','240','org.jhotdraw.draw.ResizeHandleKit','/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f));\r\n    ResizeHandleKit.addCornerResizeHandles(f, handles);\r\n    ResizeHandleKit.addEdgeResizeHandles(f, handles);\r\n}'),(2533,'east(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.east(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle east(Figure owner) {\r\n    return new ResizeHandleKit.EastHandle(owner);\r\n}'),(2534,'north(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.north(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle north(Figure owner) {\r\n    return new ResizeHandleKit.NorthHandle(owner);\r\n}'),(2535,'northEast(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.northEast(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle northEast(Figure owner) {\r\n    return new ResizeHandleKit.NorthEastHandle(owner);\r\n}'),(2536,'northWest(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.northWest(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle northWest(Figure owner) {\r\n    return new ResizeHandleKit.NorthWestHandle(owner);\r\n}'),(2537,'south(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.south(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle south(Figure owner) {\r\n    return new ResizeHandleKit.SouthHandle(owner);\r\n}'),(2538,'southEast(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.southEast(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle southEast(Figure owner) {\r\n    return new ResizeHandleKit.SouthEastHandle(owner);\r\n}'),(2539,'southWest(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.southWest(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle southWest(Figure owner) {\r\n    return new ResizeHandleKit.SouthWestHandle(owner);\r\n}'),(2540,'west(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit.west(org.jhotdraw.draw.Figure)','240','org.jhotdraw.draw.ResizeHandleKit','public static Handle west(Figure owner) {\r\n    return new ResizeHandleKit.WestHandle(owner);\r\n}'),(2541,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$EastHandle.-init-(org.jhotdraw.draw.Figure)','231','org.jhotdraw.draw.ResizeHandleKit$EastHandle','EastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.east(true));\r\n}'),(2542,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$EastHandle.getCursor()','231','org.jhotdraw.draw.ResizeHandleKit$EastHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.E_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2543,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$EastHandle.keyPressed(java.awt.event.KeyEvent)','231','org.jhotdraw.draw.ResizeHandleKit$EastHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((r.width) > 1) {\r\n                setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) - 1), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) + 1), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2544,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$EastHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','231','org.jhotdraw.draw.ResizeHandleKit$EastHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(Math.max(((r.x) + 1), p.x), ((r.y) + (r.height))));\r\n}'),(2545,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle.-init-(org.jhotdraw.draw.Figure)','232','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle','NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast(true));\r\n}'),(2546,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle.getCursor()','232','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle','public Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.NE_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2547,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle.keyPressed(java.awt.event.KeyEvent)','232','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            setBounds(new Point2D.Double(r.x, ((r.y) - 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            if ((r.height) > 1) {\r\n                setBounds(new Point2D.Double(r.x, ((r.y) + 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((r.width) > 1) {\r\n                setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) - 1), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) + 1), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2548,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','232','org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(r.x, Math.min((((r.y) + (r.height)) - 1), p.y)), new Point2D.Double(Math.max(r.x, p.x), ((r.y) + (r.height))));\r\n}'),(2549,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$NorthHandle.-init-(org.jhotdraw.draw.Figure)','233','org.jhotdraw.draw.ResizeHandleKit$NorthHandle','NorthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.north(true));\r\n}'),(2550,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$NorthHandle.getCursor()','233','org.jhotdraw.draw.ResizeHandleKit$NorthHandle','public Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.N_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2551,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$NorthHandle.keyPressed(java.awt.event.KeyEvent)','233','org.jhotdraw.draw.ResizeHandleKit$NorthHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            setBounds(new Point2D.Double(r.x, ((r.y) - 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            if ((r.height) > 1) {\r\n                setBounds(new Point2D.Double(r.x, ((r.y) + 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2552,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$NorthHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','233','org.jhotdraw.draw.ResizeHandleKit$NorthHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(r.x, Math.min((((r.y) + (r.height)) - 1), p.y)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n}'),(2553,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle.-init-(org.jhotdraw.draw.Figure)','234','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle','NorthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northWest(true));\r\n}'),(2554,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle.getCursor()','234','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.NW_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2555,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle.keyPressed(java.awt.event.KeyEvent)','234','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            setBounds(new Point2D.Double(r.x, ((r.y) - 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            if ((r.height) > 1) {\r\n                setBounds(new Point2D.Double(r.x, ((r.y) + 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            setBounds(new Point2D.Double(((r.x) - 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if ((r.width) > 1) {\r\n                setBounds(new Point2D.Double(((r.x) + 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2556,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','234','org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(Math.min((((r.x) + (r.width)) - 1), p.x), Math.min((((r.y) + (r.height)) - 1), p.y)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n}'),(2557,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','ResizeHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(2558,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.draw(java.awt.Graphics2D)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','/**\r\n * Draws this handle.\r\n * <p>\r\n * If the figure is transformable, the handle is drawn as a filled rectangle.\r\n * If the figure is not transformable, the handle is drawn as an unfilled\r\n * rectangle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        if (getOwner().isTransformable()) {\r\n            drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.RESIZE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.RESIZE_HANDLE_STROKE_COLOR))));\r\n        } else {\r\n            drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR))));\r\n        }\r\n    } else {\r\n        drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_FILL_COLOR_DISABLED))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_STROKE_COLOR_DISABLED))));\r\n    }\r\n}'),(2559,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.getToolTipText(java.awt.Point)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    return labels.getString(\"handle.resize.toolTipText\");\r\n}'),(2560,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','protected void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    Figure f = getOwner();\r\n    f.willChange();\r\n    f.setBounds(anchor, lead);\r\n    f.changed();\r\n}'),(2561,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.trackEnd(java.awt.Point,java.awt.Point,int)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    if (getOwner().isTransformable()) {\r\n        fireUndoableEditHappened(new GeometryEdit(getOwner(), geometry, getOwner().getTransformRestoreData()));\r\n    }\r\n}'),(2562,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.trackStart(java.awt.Point,int)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    geometry = getOwner().getTransformRestoreData();\r\n    Point location = getLocation();\r\n    dx = (-(anchor.x)) + (location.x);\r\n    dy = (-(anchor.y)) + (location.y);\r\n}'),(2563,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.trackStep(java.awt.Point,java.awt.Point,int)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    if (getOwner().isTransformable()) {\r\n        Point2D.Double p = view.viewToDrawing(new Point(((lead.x) + (dx)), ((lead.y) + (dy))));\r\n        view.getConstrainer().constrainPoint(p);\r\n        if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n            try {\r\n                AttributeKeys.TRANSFORM.get(getOwner()).inverseTransform(p, p);\r\n            } catch (NoninvertibleTransformException ex) {\r\n                if (ResizeHandleKit.DEBUG) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        trackStepNormalized(p);\r\n    }\r\n}'),(2564,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','235','org.jhotdraw.draw.ResizeHandleKit$ResizeHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n}'),(2565,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle.-init-(org.jhotdraw.draw.Figure)','236','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle','SouthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southEast(true));\r\n}'),(2566,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle.getCursor()','236','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.SE_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2567,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle.keyPressed(java.awt.event.KeyEvent)','236','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((r.height) > 1) {\r\n                setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) - 1)));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) + 1)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((r.width) > 1) {\r\n                setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) - 1), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) + 1), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2568,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','236','org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(Math.max(((r.x) + 1), p.x), Math.max(((r.y) + 1), p.y)));\r\n}'),(2569,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$SouthHandle.-init-(org.jhotdraw.draw.Figure)','237','org.jhotdraw.draw.ResizeHandleKit$SouthHandle','SouthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.south(true));\r\n}'),(2570,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$SouthHandle.getCursor()','237','org.jhotdraw.draw.ResizeHandleKit$SouthHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.S_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2571,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$SouthHandle.keyPressed(java.awt.event.KeyEvent)','237','org.jhotdraw.draw.ResizeHandleKit$SouthHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((r.height) > 1) {\r\n                setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) - 1)));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) + 1)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2572,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$SouthHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','237','org.jhotdraw.draw.ResizeHandleKit$SouthHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), Math.max(((r.y) + 1), p.y)));\r\n}'),(2573,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle.-init-(org.jhotdraw.draw.Figure)','238','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle','SouthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southWest(true));\r\n}'),(2574,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle.getCursor()','238','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.SW_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2575,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle.keyPressed(java.awt.event.KeyEvent)','238','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((r.height) > 1) {\r\n                setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) - 1)));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) + 1)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            setBounds(new Point2D.Double(((r.x) - 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if ((r.width) > 1) {\r\n                setBounds(new Point2D.Double(((r.x) + 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2576,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','238','org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(Math.min((((r.x) + (r.width)) - 1), p.x), r.y), new Point2D.Double(((r.x) + (r.width)), Math.max(((r.y) + 1), p.y)));\r\n}'),(2577,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.ResizeHandleKit$WestHandle.-init-(org.jhotdraw.draw.Figure)','239','org.jhotdraw.draw.ResizeHandleKit$WestHandle','WestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.west(true));\r\n}'),(2578,'getCursor()','org.jhotdraw.draw.ResizeHandleKit$WestHandle.getCursor()','239','org.jhotdraw.draw.ResizeHandleKit$WestHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor((getOwner().isTransformable() ? Cursor.W_RESIZE_CURSOR : Cursor.DEFAULT_CURSOR));\r\n}'),(2579,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.ResizeHandleKit$WestHandle.keyPressed(java.awt.event.KeyEvent)','239','org.jhotdraw.draw.ResizeHandleKit$WestHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            setBounds(new Point2D.Double(((r.x) - 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if ((r.width) > 1) {\r\n                setBounds(new Point2D.Double(((r.x) + 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(2580,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.ResizeHandleKit$WestHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','239','org.jhotdraw.draw.ResizeHandleKit$WestHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    setBounds(new Point2D.Double(Math.min((((r.x) + (r.width)) - 1), p.x), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n}'),(2581,'-init-(org.jhotdraw.draw.Figure,java.lang.Object)','org.jhotdraw.draw.RestoreDataEdit.-init-(org.jhotdraw.draw.Figure,java.lang.Object)','241','org.jhotdraw.draw.RestoreDataEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic RestoreDataEdit(Figure figure, Object oldRestoreData) {\r\n    this.figure = figure;\r\n    this.oldRestoreData = oldRestoreData;\r\n    this.newRestoreData = figure.getTransformRestoreData();\r\n}'),(2582,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.RestoreDataEdit.addEdit(javax.swing.undo.UndoableEdit)','241','org.jhotdraw.draw.RestoreDataEdit','@Override\r\npublic boolean addEdit(UndoableEdit anEdit) {\r\n    return false;\r\n}'),(2583,'getPresentationName()','org.jhotdraw.draw.RestoreDataEdit.getPresentationName()','241','org.jhotdraw.draw.RestoreDataEdit','@Override\r\npublic String getPresentationName() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n    return labels.getString(\"edit.transform.text\");\r\n}'),(2584,'redo()','org.jhotdraw.draw.RestoreDataEdit.redo()','241','org.jhotdraw.draw.RestoreDataEdit','@Override\r\npublic void redo() throws CannotRedoException {\r\n    super.redo();\r\n    figure.willChange();\r\n    figure.restoreTransformTo(newRestoreData);\r\n    figure.changed();\r\n}'),(2585,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.RestoreDataEdit.replaceEdit(javax.swing.undo.UndoableEdit)','241','org.jhotdraw.draw.RestoreDataEdit','@Override\r\npublic boolean replaceEdit(UndoableEdit anEdit) {\r\n    return false;\r\n}'),(2586,'undo()','org.jhotdraw.draw.RestoreDataEdit.undo()','241','org.jhotdraw.draw.RestoreDataEdit','@Override\r\npublic void undo() throws CannotUndoException {\r\n    super.undo();\r\n    figure.willChange();\r\n    figure.restoreTransformTo(oldRestoreData);\r\n    figure.changed();\r\n}'),(2587,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.RotateHandle.-init-(org.jhotdraw.draw.Figure)','242','org.jhotdraw.draw.RotateHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic RotateHandle(Figure owner) {\r\n    super(owner);\r\n}'),(2588,'getCenter()','org.jhotdraw.draw.RotateHandle.getCenter()','242','org.jhotdraw.draw.RotateHandle','protected Point2D.Double getCenter() {\r\n    Rectangle2D.Double bounds = getTransformedBounds();\r\n    return new Point2D.Double(bounds.getCenterX(), bounds.getCenterY());\r\n}'),(2589,'getOrigin()','org.jhotdraw.draw.RotateHandle.getOrigin()','242','org.jhotdraw.draw.RotateHandle','protected Point2D.Double getOrigin() {\r\n    // This handle is placed above the figure.\r\n    // We move it up by a handlesizes, so that it wont overlap with\r\n    // the handles from TransformHandleKit.\r\n    Rectangle2D.Double bounds = getTransformedBounds();\r\n    Point2D.Double origin = new Point2D.Double(bounds.getCenterX(), ((bounds.y) - ((getHandlesize()) / (view.getScaleFactor()))));\r\n    return origin;\r\n}'),(2590,'-init-()','org.jhotdraw.draw.RotationDirection.-init-()','243','org.jhotdraw.draw.RotationDirection','RotationDirection() {\r\n}'),(2591,'-init-()','org.jhotdraw.draw.RoundRectangleFigure.-init-()','244','org.jhotdraw.draw.RoundRectangleFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic RoundRectangleFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(2592,'-init-(double,double,double,double)','org.jhotdraw.draw.RoundRectangleFigure.-init-(double,double,double,double)','244','org.jhotdraw.draw.RoundRectangleFigure','public RoundRectangleFigure(double x, double y, double width, double height) {\r\n    roundrect = new RoundRectangle2D.Double(x, y, width, height, RoundRectangleFigure.DEFAULT_ARC, RoundRectangleFigure.DEFAULT_ARC);\r\n    /* FILL_COLOR.set(this, Color.white);\n    STROKE_COLOR.set(this, Color.black);\n     */\r\n}'),(2593,'clone()','org.jhotdraw.draw.RoundRectangleFigure.clone()','244','org.jhotdraw.draw.RoundRectangleFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic RoundRectangleFigure clone() {\r\n    RoundRectangleFigure that = ((RoundRectangleFigure) (super.clone()));\r\n    that.roundrect = ((RoundRectangle2D.Double) (this.roundrect.clone()));\r\n    return that;\r\n}'),(2594,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.RoundRectangleFigure.contains(java.awt.geom.Point2D$Double)','244','org.jhotdraw.draw.RoundRectangleFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    RoundRectangle2D.Double r = ((RoundRectangle2D.Double) (roundrect.clone()));\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    r.arcwidth += grow * 2;\r\n    r.archeight += grow * 2;\r\n    return r.contains(p);\r\n}'),(2595,'createHandles(int)','org.jhotdraw.draw.RoundRectangleFigure.createHandles(int)','244','org.jhotdraw.draw.RoundRectangleFigure','// EDITING\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = ((LinkedList<Handle>) (super.createHandles(detailLevel)));\r\n    handles.add(new RoundRectangleRadiusHandle(this));\r\n    return handles;\r\n}'),(2596,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.RoundRectangleFigure.drawFill(java.awt.Graphics2D)','244','org.jhotdraw.draw.RoundRectangleFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    RoundRectangle2D.Double r = ((RoundRectangle2D.Double) (roundrect.clone()));\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    r.arcwidth += grow * 2;\r\n    r.archeight += grow * 2;\r\n    if (((r.width) > 0) && ((r.height) > 0)) {\r\n        g.fill(r);\r\n    }\r\n}'),(2597,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.RoundRectangleFigure.drawStroke(java.awt.Graphics2D)','244','org.jhotdraw.draw.RoundRectangleFigure','protected void drawStroke(Graphics2D g) {\r\n    RoundRectangle2D.Double r = ((RoundRectangle2D.Double) (roundrect.clone()));\r\n    double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    r.arcwidth += grow * 2;\r\n    r.archeight += grow * 2;\r\n    if (((r.width) > 0) && ((r.height) > 0)) {\r\n        g.draw(r);\r\n    }\r\n}'),(2598,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.RoundRectangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','244','org.jhotdraw.draw.RoundRectangleFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}'),(2599,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.RoundRectangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','244','org.jhotdraw.draw.RoundRectangleFigure','// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}'),(2600,'getArcHeight()','org.jhotdraw.draw.RoundRectangleFigure.getArcHeight()','244','org.jhotdraw.draw.RoundRectangleFigure','public double getArcHeight() {\r\n    return roundrect.archeight;\r\n}'),(2601,'getArcWidth()','org.jhotdraw.draw.RoundRectangleFigure.getArcWidth()','244','org.jhotdraw.draw.RoundRectangleFigure','// ATTRIBUTES\r\npublic double getArcWidth() {\r\n    return roundrect.arcwidth;\r\n}'),(2602,'getBounds()','org.jhotdraw.draw.RoundRectangleFigure.getBounds()','244','org.jhotdraw.draw.RoundRectangleFigure','// SHAPE AND BOUNDS\r\npublic Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (roundrect.getBounds2D()));\r\n}'),(2603,'getDrawingArea()','org.jhotdraw.draw.RoundRectangleFigure.getDrawingArea()','244','org.jhotdraw.draw.RoundRectangleFigure','public Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (roundrect.getBounds2D()));\r\n    double grow = (AttributeKeys.getPerpendicularHitGrowth(this)) + 1;\r\n    Geom.grow(r, grow, grow);\r\n    return r;\r\n}'),(2604,'getTransformRestoreData()','org.jhotdraw.draw.RoundRectangleFigure.getTransformRestoreData()','244','org.jhotdraw.draw.RoundRectangleFigure','public Object getTransformRestoreData() {\r\n    return roundrect.clone();\r\n}'),(2605,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.RoundRectangleFigure.read(org.jhotdraw.xml.DOMInput)','244','org.jhotdraw.draw.RoundRectangleFigure','// EVENT HANDLING\r\n// PERSISTENCE\r\n@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    roundrect.arcwidth = in.getAttribute(\"arcWidth\", RoundRectangleFigure.DEFAULT_ARC);\r\n    roundrect.archeight = in.getAttribute(\"arcHeight\", RoundRectangleFigure.DEFAULT_ARC);\r\n}'),(2606,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.RoundRectangleFigure.restoreTransformTo(java.lang.Object)','244','org.jhotdraw.draw.RoundRectangleFigure','public void restoreTransformTo(Object geometry) {\r\n    RoundRectangle2D.Double r = ((RoundRectangle2D.Double) (geometry));\r\n    roundrect.x = r.x;\r\n    roundrect.y = r.y;\r\n    roundrect.width = r.width;\r\n    roundrect.height = r.height;\r\n}'),(2607,'setArc(double,double)','org.jhotdraw.draw.RoundRectangleFigure.setArc(double,double)','244','org.jhotdraw.draw.RoundRectangleFigure','public void setArc(final double w, final double h) {\r\n    final double oldWidth = roundrect.getArcWidth();\r\n    final double oldHeight = roundrect.getArcHeight();\r\n    roundrect.arcwidth = w;\r\n    roundrect.archeight = h;\r\n}'),(2608,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.RoundRectangleFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','244','org.jhotdraw.draw.RoundRectangleFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    roundrect.x = Math.min(anchor.x, lead.x);\r\n    roundrect.y = Math.min(anchor.y, lead.y);\r\n    roundrect.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    roundrect.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(2609,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.RoundRectangleFigure.transform(java.awt.geom.AffineTransform)','244','org.jhotdraw.draw.RoundRectangleFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		The transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(2610,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.RoundRectangleFigure.write(org.jhotdraw.xml.DOMOutput)','244','org.jhotdraw.draw.RoundRectangleFigure','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.addAttribute(\"arcWidth\", roundrect.arcwidth);\r\n    out.addAttribute(\"arcHeight\", roundrect.archeight);\r\n}'),(2611,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.RoundRectangleRadiusHandle.-init-(org.jhotdraw.draw.Figure)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic RoundRectangleRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}'),(2612,'basicGetBounds()','org.jhotdraw.draw.RoundRectangleRadiusHandle.basicGetBounds()','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(locate());\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(2613,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.RoundRectangleRadiusHandle.draw(java.awt.Graphics2D)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR))));\r\n    } else {\r\n        drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED))));\r\n    }\r\n}'),(2614,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.RoundRectangleRadiusHandle.getToolTipText(java.awt.Point)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    return // \r\n    ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"handle.roundRectangleRadius.toolTipText\");\r\n}'),(2615,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.RoundRectangleRadiusHandle.keyPressed(java.awt.event.KeyEvent)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    RoundRectangleFigure owner = ((RoundRectangleFigure) (getOwner()));\r\n    Point2D.Double oldArc = new Point2D.Double(owner.getArcWidth(), owner.getArcHeight());\r\n    Point2D.Double newArc = new Point2D.Double(owner.getArcWidth(), owner.getArcHeight());\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((newArc.y) > 0) {\r\n                newArc.y = Math.max(0, ((newArc.y) - 1));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            newArc.y += 1;\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((newArc.x) > 0) {\r\n                newArc.x = Math.max(0, ((newArc.x) - 1));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            newArc.x += 1;\r\n            evt.consume();\r\n            break;\r\n    }\r\n    if (!(newArc.equals(oldArc))) {\r\n        owner.willChange();\r\n        owner.setArc(newArc.x, newArc.y);\r\n        owner.changed();\r\n        fireUndoableEditHappened(new RoundRectangleRadiusUndoableEdit(owner, oldArc, newArc));\r\n    }\r\n}'),(2616,'locate()','org.jhotdraw.draw.RoundRectangleRadiusHandle.locate()','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','private Point locate() {\r\n    RoundRectangleFigure owner = ((RoundRectangleFigure) (getOwner()));\r\n    Rectangle r = view.drawingToView(owner.getBounds());\r\n    Point arc = view.drawingToView(new Point2D.Double(owner.getArcWidth(), owner.getArcHeight()));\r\n    return new Point((((r.x) + ((arc.x) / 2)) + (RoundRectangleRadiusHandle.OFFSET)), (((r.y) + ((arc.y) / 2)) + (RoundRectangleRadiusHandle.OFFSET)));\r\n}'),(2617,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.RoundRectangleRadiusHandle.trackEnd(java.awt.Point,java.awt.Point,int)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    int dx = (lead.x) - (anchor.x);\r\n    int dy = (lead.y) - (anchor.y);\r\n    RoundRectangleFigure owner = ((RoundRectangleFigure) (getOwner()));\r\n    Rectangle r = view.drawingToView(owner.getBounds());\r\n    Point viewArc = new Point(Geom.range(0, r.width, (2 * (((originalArc.x) / 2) + dx))), Geom.range(0, r.height, (2 * (((originalArc.y) / 2) + dy))));\r\n    Point2D.Double oldArc = view.viewToDrawing(originalArc);\r\n    Point2D.Double newArc = view.viewToDrawing(viewArc);\r\n    fireUndoableEditHappened(new RoundRectangleRadiusUndoableEdit(owner, oldArc, newArc));\r\n}'),(2618,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.RoundRectangleRadiusHandle.trackStart(java.awt.Point,int)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    RoundRectangleFigure owner = ((RoundRectangleFigure) (getOwner()));\r\n    originalArc = view.drawingToView(new Point2D.Double(owner.getArcWidth(), owner.getArcHeight()));\r\n}'),(2619,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.RoundRectangleRadiusHandle.trackStep(java.awt.Point,java.awt.Point,int)','245','org.jhotdraw.draw.RoundRectangleRadiusHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    int dx = (lead.x) - (anchor.x);\r\n    int dy = (lead.y) - (anchor.y);\r\n    RoundRectangleFigure owner = ((RoundRectangleFigure) (getOwner()));\r\n    Rectangle r = view.drawingToView(owner.getBounds());\r\n    Point viewArc = new Point(Geom.range(0, r.width, (2 * (((originalArc.x) / 2) + dx))), Geom.range(0, r.height, (2 * (((originalArc.y) / 2) + dy))));\r\n    Point2D.Double arc = view.viewToDrawing(viewArc);\r\n    owner.willChange();\r\n    owner.setArc(arc.x, arc.y);\r\n    owner.changed();\r\n}'),(2620,'-init-(org.jhotdraw.draw.RoundRectangleFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.-init-(org.jhotdraw.draw.RoundRectangleFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','246','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit','public RoundRectangleRadiusUndoableEdit(RoundRectangleFigure owner, Point2D.Double oldArc, Point2D.Double newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}'),(2621,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.addEdit(javax.swing.undo.UndoableEdit)','246','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit','public boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof RoundRectangleRadiusUndoableEdit) {\r\n        RoundRectangleRadiusUndoableEdit that = ((RoundRectangleRadiusUndoableEdit) (anEdit));\r\n        if ((that.owner) == (this.owner)) {\r\n            this.newArc = that.newArc;\r\n            that.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2622,'getPresentationName()','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.getPresentationName()','246','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit','@Override\r\npublic String getPresentationName() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n    return labels.getString(\"attribute.roundRectRadius\");\r\n}'),(2623,'redo()','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.redo()','246','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit','@Override\r\npublic void redo() throws CannotRedoException {\r\n    owner.willChange();\r\n    owner.setArc(newArc.x, newArc.y);\r\n    owner.changed();\r\n    super.redo();\r\n}'),(2624,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.replaceEdit(javax.swing.undo.UndoableEdit)','246','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit','public boolean replaceEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof RoundRectangleRadiusUndoableEdit) {\r\n        RoundRectangleRadiusUndoableEdit that = ((RoundRectangleRadiusUndoableEdit) (anEdit));\r\n        if ((that.owner) == (this.owner)) {\r\n            that.oldArc = this.oldArc;\r\n            this.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2625,'undo()','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.undo()','246','org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit','@Override\r\npublic void undo() throws CannotUndoException {\r\n    owner.willChange();\r\n    owner.setArc(oldArc.x, oldArc.y);\r\n    owner.changed();\r\n    super.undo();\r\n}'),(2626,'-init-()','org.jhotdraw.draw.SelectionTool.-init-()','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionTool() {\r\n    tracker = getSelectAreaTracker();\r\n    tracker.addToolListener(this);\r\n}'),(2627,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.SelectionTool.activate(org.jhotdraw.draw.DrawingEditor)','248','org.jhotdraw.draw.SelectionTool','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    tracker.activate(editor);\r\n}'),(2628,'areaInvalidated(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.SelectionTool.areaInvalidated(org.jhotdraw.draw.ToolEvent)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(ToolEvent e) {\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(2629,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.SelectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)','248','org.jhotdraw.draw.SelectionTool','public void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    tracker.deactivate(editor);\r\n}'),(2630,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.SelectionTool.draw(java.awt.Graphics2D)','248','org.jhotdraw.draw.SelectionTool','@Override\r\npublic void draw(Graphics2D g) {\r\n    tracker.draw(g);\r\n}'),(2631,'getDragTracker(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.SelectionTool.getDragTracker(org.jhotdraw.draw.Figure)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Method to get a {@code DragTracker} which handles user interaction\r\n * for dragging the specified figure.\r\n */\r\nprotected DragTracker getDragTracker(Figure f) {\r\n    if ((dragTracker) == null) {\r\n        dragTracker = new DefaultDragTracker();\r\n    }\r\n    dragTracker.setDraggedFigure(f);\r\n    return dragTracker;\r\n}'),(2632,'getHandleTracker(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.SelectionTool.getHandleTracker(org.jhotdraw.draw.Handle)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Method to get a {@code HandleTracker} which handles user interaction\r\n * for the specified handle.\r\n */\r\nprotected HandleTracker getHandleTracker(Handle handle) {\r\n    if ((handleTracker) == null) {\r\n        handleTracker = new DefaultHandleTracker();\r\n    }\r\n    handleTracker.setHandles(handle, getView().getCompatibleHandles(handle));\r\n    return handleTracker;\r\n}'),(2633,'getSelectAreaTracker()','org.jhotdraw.draw.SelectionTool.getSelectAreaTracker()','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Method to get a {@code SelectAreaTracker} which handles user interaction\r\n * for selecting an area on the drawing.\r\n */\r\nprotected SelectAreaTracker getSelectAreaTracker() {\r\n    if ((selectAreaTracker) == null) {\r\n        selectAreaTracker = new DefaultSelectAreaTracker();\r\n    }\r\n    return selectAreaTracker;\r\n}'),(2634,'isSelectBehindEnabled()','org.jhotdraw.draw.SelectionTool.isSelectBehindEnabled()','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Returns the value of the selectBehindEnabled property.\r\n * This is a bound property.\r\n *\r\n * @return The property value.\r\n */\r\npublic boolean isSelectBehindEnabled() {\r\n    return isSelectBehindEnabled;\r\n}'),(2635,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.SelectionTool.keyPressed(java.awt.event.KeyEvent)','248','org.jhotdraw.draw.SelectionTool','public void keyPressed(KeyEvent e) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        tracker.keyPressed(e);\r\n    }\r\n}'),(2636,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.SelectionTool.keyReleased(java.awt.event.KeyEvent)','248','org.jhotdraw.draw.SelectionTool','public void keyReleased(KeyEvent evt) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        tracker.keyReleased(evt);\r\n    }\r\n}'),(2637,'keyTyped(java.awt.event.KeyEvent)','org.jhotdraw.draw.SelectionTool.keyTyped(java.awt.event.KeyEvent)','248','org.jhotdraw.draw.SelectionTool','public void keyTyped(KeyEvent evt) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        tracker.keyTyped(evt);\r\n    }\r\n}'),(2638,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mouseClicked(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','public void mouseClicked(MouseEvent evt) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        tracker.mouseClicked(evt);\r\n    }\r\n}'),(2639,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mouseDragged(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','public void mouseDragged(MouseEvent evt) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        tracker.mouseDragged(evt);\r\n    }\r\n}'),(2640,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mouseEntered(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','public void mouseEntered(MouseEvent evt) {\r\n    super.mouseEntered(evt);\r\n    tracker.mouseEntered(evt);\r\n}'),(2641,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mouseExited(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','public void mouseExited(MouseEvent evt) {\r\n    super.mouseExited(evt);\r\n    tracker.mouseExited(evt);\r\n}'),(2642,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mouseMoved(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','@Override\r\npublic void mouseMoved(MouseEvent evt) {\r\n    tracker.mouseMoved(evt);\r\n}'),(2643,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mousePressed(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','@Override\r\npublic void mousePressed(MouseEvent evt) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        super.mousePressed(evt);\r\n        DrawingView view = getView();\r\n        Handle handle = view.findHandle(anchor);\r\n        Tool newTracker = null;\r\n        if (handle != null) {\r\n            newTracker = getHandleTracker(handle);\r\n        } else {\r\n            Figure figure;\r\n            Drawing drawing = view.getDrawing();\r\n            Point2D.Double p = view.viewToDrawing(anchor);\r\n            if ((isSelectBehindEnabled()) && (((evt.getModifiersEx()) & ((InputEvent.ALT_DOWN_MASK) | (InputEvent.CTRL_DOWN_MASK))) != 0)) {\r\n                // Select a figure behind the current selection\r\n                figure = view.findFigure(anchor);\r\n                while ((figure != null) && (!(figure.isSelectable()))) {\r\n                    figure = drawing.findFigureBehind(p, figure);\r\n                } \r\n                HashSet<Figure> ignoredFigures = new HashSet<Figure>(view.getSelectedFigures());\r\n                ignoredFigures.add(figure);\r\n                Figure figureBehind = view.getDrawing().findFigureBehind(view.viewToDrawing(anchor), ignoredFigures);\r\n                if (figureBehind != null) {\r\n                    figure = figureBehind;\r\n                }\r\n            } else {\r\n                // Note: The search sequence used here, must be\r\n                // consistent with the search sequence used by the\r\n                // DefaultHandleTracker, the DefaultSelectAreaTracker and DelegationSelectionTool.\r\n                // If possible, continue to work with the current selection\r\n                figure = null;\r\n                if (isSelectBehindEnabled()) {\r\n                    for (Figure f : view.getSelectedFigures()) {\r\n                        if (f.contains(p)) {\r\n                            figure = f;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                // If the point is not contained in the current selection,\r\n                // search for a figure in the drawing.\r\n                if (figure == null) {\r\n                    figure = view.findFigure(anchor);\r\n                    while ((figure != null) && (!(figure.isSelectable()))) {\r\n                        figure = drawing.findFigureBehind(p, figure);\r\n                    } \r\n                }\r\n            }\r\n            if ((figure != null) && (figure.isSelectable())) {\r\n                newTracker = getDragTracker(figure);\r\n            } else {\r\n                if (!(evt.isShiftDown())) {\r\n                    view.clearSelection();\r\n                    view.setHandleDetailLevel(0);\r\n                }\r\n                newTracker = getSelectAreaTracker();\r\n            }\r\n        }\r\n        if (newTracker != null) {\r\n            setTracker(newTracker);\r\n        }\r\n        tracker.mousePressed(evt);\r\n    }\r\n}'),(2644,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.SelectionTool.mouseReleased(java.awt.event.MouseEvent)','248','org.jhotdraw.draw.SelectionTool','@Override\r\npublic void mouseReleased(MouseEvent evt) {\r\n    if (((getView()) != null) && (getView().isEnabled())) {\r\n        tracker.mouseReleased(evt);\r\n    }\r\n}'),(2645,'setDragTracker(org.jhotdraw.draw.DragTracker)','org.jhotdraw.draw.SelectionTool.setDragTracker(org.jhotdraw.draw.DragTracker)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Method to set a {@code DragTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultDragTracker}.\r\n */\r\npublic void setDragTracker(DragTracker newValue) {\r\n    dragTracker = newValue;\r\n}'),(2646,'setHandleTracker(org.jhotdraw.draw.HandleTracker)','org.jhotdraw.draw.SelectionTool.setHandleTracker(org.jhotdraw.draw.HandleTracker)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Method to set a {@code HandleTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultHandleTracker}.\r\n */\r\npublic void setHandleTracker(HandleTracker newValue) {\r\n    handleTracker = newValue;\r\n}'),(2647,'setSelectAreaTracker(org.jhotdraw.draw.SelectAreaTracker)','org.jhotdraw.draw.SelectionTool.setSelectAreaTracker(org.jhotdraw.draw.SelectAreaTracker)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Method to set a {@code SelectAreaTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultSelectAreaTracker}.\r\n */\r\npublic void setSelectAreaTracker(SelectAreaTracker newValue) {\r\n    selectAreaTracker = newValue;\r\n}'),(2648,'setSelectBehindEnabled(boolean)','org.jhotdraw.draw.SelectionTool.setSelectBehindEnabled(boolean)','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Sets the selectBehindEnabled property.\r\n * This is a bound property.\r\n *\r\n * @param newValue\r\n * 		The new value.\r\n */\r\npublic void setSelectBehindEnabled(boolean newValue) {\r\n    boolean oldValue = isSelectBehindEnabled;\r\n    isSelectBehindEnabled = newValue;\r\n    firePropertyChange(SelectionTool.SELECT_BEHIND_ENABLED_PROPERTY, oldValue, newValue);\r\n}'),(2649,'setTracker(org.jhotdraw.draw.Tool)','org.jhotdraw.draw.SelectionTool.setTracker(org.jhotdraw.draw.Tool)','248','org.jhotdraw.draw.SelectionTool','protected void setTracker(Tool newTracker) {\r\n    if ((tracker) != null) {\r\n        tracker.deactivate(getEditor());\r\n        tracker.removeToolListener(this);\r\n    }\r\n    tracker = newTracker;\r\n    if ((tracker) != null) {\r\n        tracker.activate(getEditor());\r\n        tracker.addToolListener(this);\r\n    }\r\n}'),(2650,'supportsHandleInteraction()','org.jhotdraw.draw.SelectionTool.supportsHandleInteraction()','248','org.jhotdraw.draw.SelectionTool','/**\r\n * Returns true, if this tool lets the user interact with handles.\r\n * <p>\r\n * Handles may draw differently, if interaction is not possible.\r\n *\r\n * @return True, if this tool supports interaction with the handles.\r\n */\r\npublic boolean supportsHandleInteraction() {\r\n    return true;\r\n}'),(2651,'toolDone(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.SelectionTool.toolDone(org.jhotdraw.draw.ToolEvent)','248','org.jhotdraw.draw.SelectionTool','public void toolDone(ToolEvent event) {\r\n    // Empty\r\n    Tool newTracker = getSelectAreaTracker();\r\n    if (newTracker != null) {\r\n        if ((tracker) != null) {\r\n            tracker.deactivate(getEditor());\r\n            tracker.removeToolListener(this);\r\n        }\r\n        tracker = newTracker;\r\n        tracker.activate(getEditor());\r\n        tracker.addToolListener(this);\r\n    }\r\n    fireToolDone();\r\n}'),(2652,'toolStarted(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.SelectionTool.toolStarted(org.jhotdraw.draw.ToolEvent)','248','org.jhotdraw.draw.SelectionTool','public void toolStarted(ToolEvent event) {\r\n}'),(2653,'-init-()','org.jhotdraw.draw.SerializationInputOutputFormat.-init-()','249','org.jhotdraw.draw.SerializationInputOutputFormat','/**\r\n * Creates a new instance with format name \"Drawing\", file extension \"xml\"\r\n * and mime type \"image/x-jhotdraw\".\r\n */\r\npublic SerializationInputOutputFormat() {\r\n    this(\"Drawing\", \"ser\", new DefaultDrawing());\r\n}'),(2654,'-init-(java.lang.String,java.lang.String,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.SerializationInputOutputFormat.-init-(java.lang.String,java.lang.String,org.jhotdraw.draw.Drawing)','249','org.jhotdraw.draw.SerializationInputOutputFormat','/**\r\n * Creates a new instance using the specified parameters.\r\n */\r\npublic SerializationInputOutputFormat(String description, String fileExtension, Drawing prototype) {\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.mimeType = DataFlavor.javaSerializedObjectMimeType;\r\n    this.prototype = prototype;\r\n    this.dataFlavor = new DataFlavor(prototype.getClass(), description);\r\n}'),(2655,'-init-(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.SerializationInputOutputFormat.-init-(java.awt.datatransfer.DataFlavor)','249','org.jhotdraw.draw.SerializationInputOutputFormat','1( $anonymous0) {\r\n}'),(2656,'createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','org.jhotdraw.draw.SerializationInputOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','249','org.jhotdraw.draw.SerializationInputOutputFormat','@SuppressWarnings(\"unchecked\")\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    final Drawing d = ((Drawing) (prototype.clone()));\r\n    HashMap<Figure, Figure> originalToDuplicateMap = new HashMap<Figure, Figure>(figures.size());\r\n    final ArrayList<Figure> duplicates = new ArrayList<Figure>(figures.size());\r\n    for (Figure f : figures) {\r\n        Figure df = ((Figure) (f.clone()));\r\n        d.add(df);\r\n        duplicates.add(df);\r\n        originalToDuplicateMap.put(f, df);\r\n    }\r\n    for (Figure f : duplicates) {\r\n        f.remap(originalToDuplicateMap, true);\r\n    }\r\n    return new AbstractTransferable(dataFlavor) {\r\n        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n            if (isDataFlavorSupported(flavor)) {\r\n                return d;\r\n            } else {\r\n                throw new UnsupportedFlavorException(flavor);\r\n            }\r\n        }\r\n    };\r\n}'),(2657,'getFileExtension()','org.jhotdraw.draw.SerializationInputOutputFormat.getFileExtension()','249','org.jhotdraw.draw.SerializationInputOutputFormat','public String getFileExtension() {\r\n    return fileExtension;\r\n}'),(2658,'getFileFilter()','org.jhotdraw.draw.SerializationInputOutputFormat.getFileFilter()','249','org.jhotdraw.draw.SerializationInputOutputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(description, fileExtension);\r\n}'),(2659,'getInputFormatAccessory()','org.jhotdraw.draw.SerializationInputOutputFormat.getInputFormatAccessory()','249','org.jhotdraw.draw.SerializationInputOutputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(2660,'getOutputFormatAccessory()','org.jhotdraw.draw.SerializationInputOutputFormat.getOutputFormatAccessory()','249','org.jhotdraw.draw.SerializationInputOutputFormat','public JComponent getOutputFormatAccessory() {\r\n    return null;\r\n}'),(2661,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.SerializationInputOutputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','249','org.jhotdraw.draw.SerializationInputOutputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return flavor.equals(dataFlavor);\r\n}'),(2662,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.SerializationInputOutputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','249','org.jhotdraw.draw.SerializationInputOutputFormat','@SuppressWarnings(\"unchecked\")\r\npublic void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    try {\r\n        Drawing d = ((Drawing) (t.getTransferData(dataFlavor)));\r\n        if (replace) {\r\n            for (Map.Entry<AttributeKey, Object> e : d.getAttributes().entrySet()) {\r\n                e.getKey().basicSet(drawing, e.getValue());\r\n            }\r\n        }\r\n        for (Figure f : d.getChildren()) {\r\n            drawing.add(f);\r\n        }\r\n    } catch (Throwable th) {\r\n        th.printStackTrace();\r\n    }\r\n}'),(2663,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','249','org.jhotdraw.draw.SerializationInputOutputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(2664,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','249','org.jhotdraw.draw.SerializationInputOutputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(2665,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','249','org.jhotdraw.draw.SerializationInputOutputFormat','@SuppressWarnings(\"unchecked\")\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    try {\r\n        ObjectInputStream oin = new ObjectInputStream(in);\r\n        Drawing d = ((Drawing) (oin.readObject()));\r\n        if (replace) {\r\n            for (Map.Entry<AttributeKey, Object> e : d.getAttributes().entrySet()) {\r\n                e.getKey().basicSet(drawing, e.getValue());\r\n            }\r\n        }\r\n        for (Figure f : d.getChildren()) {\r\n            drawing.add(f);\r\n        }\r\n    } catch (ClassNotFoundException ex) {\r\n        IOException ioe = new IOException(\"Couldnt read drawing.\");\r\n        ioe.initCause(ex);\r\n        throw ioe;\r\n    }\r\n}'),(2666,'write(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.SerializationInputOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)','249','org.jhotdraw.draw.SerializationInputOutputFormat','public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(2667,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.SerializationInputOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','249','org.jhotdraw.draw.SerializationInputOutputFormat','public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    ObjectOutputStream oout = new ObjectOutputStream(out);\r\n    oout.writeObject(drawing);\r\n    oout.flush();\r\n}'),(2668,'-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.SetBoundsEdit.-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','250','org.jhotdraw.draw.SetBoundsEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic SetBoundsEdit(AbstractFigure owner, Point2D.Double oldAnchor, Point2D.Double oldLead, Point2D.Double newAnchor, Point2D.Double newLead) {\r\n    this.owner = owner;\r\n    this.oldAnchor = oldAnchor;\r\n    this.oldLead = oldLead;\r\n    this.newAnchor = newAnchor;\r\n    this.newLead = newLead;\r\n}'),(2669,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.SetBoundsEdit.addEdit(javax.swing.undo.UndoableEdit)','250','org.jhotdraw.draw.SetBoundsEdit','public boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof SetBoundsEdit) {\r\n        SetBoundsEdit that = ((SetBoundsEdit) (anEdit));\r\n        if ((that.owner) == (this.owner)) {\r\n            this.newAnchor = that.newAnchor;\r\n            this.newLead = that.newLead;\r\n            that.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2670,'getPresentationName()','org.jhotdraw.draw.SetBoundsEdit.getPresentationName()','250','org.jhotdraw.draw.SetBoundsEdit','public String getPresentationName() {\r\n    return \"Abmessungen u00e4ndern\";\r\n}'),(2671,'redo()','org.jhotdraw.draw.SetBoundsEdit.redo()','250','org.jhotdraw.draw.SetBoundsEdit','public void redo() throws CannotRedoException {\r\n    super.redo();\r\n    owner.willChange();\r\n    owner.setBounds(newAnchor, newLead);\r\n    owner.changed();\r\n}'),(2672,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.SetBoundsEdit.replaceEdit(javax.swing.undo.UndoableEdit)','250','org.jhotdraw.draw.SetBoundsEdit','public boolean replaceEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof SetBoundsEdit) {\r\n        SetBoundsEdit that = ((SetBoundsEdit) (anEdit));\r\n        if ((that.owner) == (this.owner)) {\r\n            that.oldAnchor = this.oldAnchor;\r\n            that.oldLead = this.oldLead;\r\n            this.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2673,'undo()','org.jhotdraw.draw.SetBoundsEdit.undo()','250','org.jhotdraw.draw.SetBoundsEdit','public void undo() throws CannotUndoException {\r\n    super.undo();\r\n    owner.willChange();\r\n    owner.setBounds(oldAnchor, oldLead);\r\n    owner.changed();\r\n}'),(2674,'-init-()','org.jhotdraw.draw.SlantedLiner.-init-()','251','org.jhotdraw.draw.SlantedLiner','/**\r\n * Creates a new instance.\r\n */\r\npublic SlantedLiner() {\r\n    this(20);\r\n}'),(2675,'-init-(double)','org.jhotdraw.draw.SlantedLiner.-init-(double)','251','org.jhotdraw.draw.SlantedLiner','public SlantedLiner(double slantSize) {\r\n    this.slantSize = slantSize;\r\n}'),(2676,'clone()','org.jhotdraw.draw.SlantedLiner.clone()','251','org.jhotdraw.draw.SlantedLiner','public Liner clone() {\r\n    try {\r\n        return ((Liner) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(ex.getMessage());\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n}'),(2677,'createHandles(org.jhotdraw.geom.BezierPath)','org.jhotdraw.draw.SlantedLiner.createHandles(org.jhotdraw.geom.BezierPath)','251','org.jhotdraw.draw.SlantedLiner','public Collection<Handle> createHandles(BezierPath path) {\r\n    return null;\r\n}'),(2678,'lineout(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.SlantedLiner.lineout(org.jhotdraw.draw.ConnectionFigure)','251','org.jhotdraw.draw.SlantedLiner','public void lineout(ConnectionFigure figure) {\r\n    BezierPath path = ((LineConnectionFigure) (figure)).getBezierPath();\r\n    Connector start = figure.getStartConnector();\r\n    Connector end = figure.getEndConnector();\r\n    if (((start == null) || (end == null)) || (path == null)) {\r\n        return;\r\n    }\r\n    // Special treatment if the connection connects the same figure\r\n    if ((figure.getStartFigure()) == (figure.getEndFigure())) {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 5) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 5) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            soutcode = Geom.outcode(sb, eb);\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            eoutcode = Geom.outcode(sb, eb);\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        switch (soutcode) {\r\n            case Geom.OUT_TOP :\r\n                eoutcode = Geom.OUT_LEFT;\r\n                break;\r\n            case Geom.OUT_RIGHT :\r\n                eoutcode = Geom.OUT_TOP;\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n                eoutcode = Geom.OUT_RIGHT;\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                eoutcode = Geom.OUT_BOTTOM;\r\n                break;\r\n            default :\r\n                eoutcode = Geom.OUT_TOP;\r\n                soutcode = Geom.OUT_RIGHT;\r\n                break;\r\n        }\r\n        path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (slantSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (slantSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(3).moveTo(((ep.x) + (slantSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(3).moveTo(((ep.x) - (slantSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) + (slantSize)));\r\n                } else {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        switch (soutcode) {\r\n            case Geom.OUT_RIGHT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_TOP :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n            default :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n        }\r\n        // Regular treatment if the connection connects to two different figures\r\n    } else {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 4) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 4) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            if ((sp.x) <= (sb.x)) {\r\n                soutcode = Geom.OUT_LEFT;\r\n            } else\r\n                if ((sp.y) <= (sb.y)) {\r\n                    soutcode = Geom.OUT_TOP;\r\n                } else\r\n                    if ((sp.x) >= ((sb.x) + (sb.width))) {\r\n                        soutcode = Geom.OUT_RIGHT;\r\n                    } else\r\n                        if ((sp.y) >= ((sb.y) + (sb.height))) {\r\n                            soutcode = Geom.OUT_BOTTOM;\r\n                        } else {\r\n                            soutcode = Geom.outcode(sb, eb);\r\n                        }\r\n\r\n\r\n\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            if ((ep.x) <= (eb.x)) {\r\n                eoutcode = Geom.OUT_LEFT;\r\n            } else\r\n                if ((ep.y) <= (eb.y)) {\r\n                    eoutcode = Geom.OUT_TOP;\r\n                } else\r\n                    if ((ep.x) >= ((eb.x) + (eb.width))) {\r\n                        eoutcode = Geom.OUT_RIGHT;\r\n                    } else\r\n                        if ((ep.y) >= ((eb.y) + (eb.height))) {\r\n                            eoutcode = Geom.OUT_BOTTOM;\r\n                        } else {\r\n                            eoutcode = Geom.outcode(sb, eb);\r\n                        }\r\n\r\n\r\n\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (slantSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (slantSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(2).moveTo(((ep.x) + (slantSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(2).moveTo(((ep.x) - (slantSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(2).moveTo(ep.x, ((ep.y) + (slantSize)));\r\n                } else {\r\n                    path.get(2).moveTo(ep.x, ((ep.y) - (slantSize)));\r\n                }\r\n\r\n\r\n    }\r\n    // Ensure all path nodes are straight\r\n    for (BezierPath.Node node : path) {\r\n        node.setMask(BezierPath.C0_MASK);\r\n    }\r\n    path.invalidatePath();\r\n}'),(2679,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.SlantedLiner.read(org.jhotdraw.xml.DOMInput)','251','org.jhotdraw.draw.SlantedLiner','public void read(DOMInput in) {\r\n    slantSize = in.getAttribute(\"slant\", 20.0);\r\n}'),(2680,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.SlantedLiner.write(org.jhotdraw.xml.DOMOutput)','251','org.jhotdraw.draw.SlantedLiner','public void write(DOMOutput out) {\r\n    out.addAttribute(\"slant\", slantSize);\r\n}'),(2681,'-init-()','org.jhotdraw.draw.StickyRectangleConnector.-init-()','252','org.jhotdraw.draw.StickyRectangleConnector','/**\r\n * Creates a new instance.\r\n * Only used for storable.\r\n */\r\npublic StickyRectangleConnector() {\r\n}'),(2682,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.StickyRectangleConnector.-init-(org.jhotdraw.draw.Figure)','252','org.jhotdraw.draw.StickyRectangleConnector','public StickyRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}'),(2683,'-init-(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.StickyRectangleConnector.-init-(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','252','org.jhotdraw.draw.StickyRectangleConnector','public StickyRectangleConnector(Figure owner, Point2D.Double p) {\r\n    super(owner);\r\n    this.angle = ((float) (Geom.pointToAngle(owner.getBounds(), p)));\r\n}'),(2684,'chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.StickyRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)','252','org.jhotdraw.draw.StickyRectangleConnector','@Override\r\nprotected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    return Geom.angleToPoint(target.getBounds(), angle);\r\n}'),(2685,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.StickyRectangleConnector.draw(java.awt.Graphics2D)','252','org.jhotdraw.draw.StickyRectangleConnector','public void draw(Graphics2D g) {\r\n    g.setColor(Color.blue);\r\n    g.setStroke(new BasicStroke());\r\n    g.draw(getBounds());\r\n}'),(2686,'getAnchor()','org.jhotdraw.draw.StickyRectangleConnector.getAnchor()','252','org.jhotdraw.draw.StickyRectangleConnector','public Point2D.Double getAnchor() {\r\n    return Geom.angleToPoint(getOwner().getBounds(), angle);\r\n}'),(2687,'getAngle()','org.jhotdraw.draw.StickyRectangleConnector.getAngle()','252','org.jhotdraw.draw.StickyRectangleConnector','public double getAngle() {\r\n    return angle;\r\n}'),(2688,'getParameters()','org.jhotdraw.draw.StickyRectangleConnector.getParameters()','252','org.jhotdraw.draw.StickyRectangleConnector','public String getParameters() {\r\n    return Float.toString(((float) (((angle) / (Math.PI)) * 180)));\r\n}'),(2689,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.StickyRectangleConnector.read(org.jhotdraw.xml.DOMInput)','252','org.jhotdraw.draw.StickyRectangleConnector','public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    angle = ((float) (in.getAttribute(\"angle\", 0.0)));\r\n}'),(2690,'setAngle(float)','org.jhotdraw.draw.StickyRectangleConnector.setAngle(float)','252','org.jhotdraw.draw.StickyRectangleConnector','public void setAngle(float angle) {\r\n    this.angle = angle;\r\n}'),(2691,'updateAnchor(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.StickyRectangleConnector.updateAnchor(java.awt.geom.Point2D$Double)','252','org.jhotdraw.draw.StickyRectangleConnector','public void updateAnchor(Point2D.Double p) {\r\n    this.angle = ((float) (Geom.pointToAngle(getOwner().getBounds(), p)));\r\n}'),(2692,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.StickyRectangleConnector.write(org.jhotdraw.xml.DOMOutput)','252','org.jhotdraw.draw.StickyRectangleConnector','public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.addAttribute(\"angle\", angle);\r\n}'),(2693,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextAreaCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure)','253','org.jhotdraw.draw.TextAreaCreationTool','/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaCreationTool(TextHolderFigure prototype) {\r\n    super(prototype);\r\n}'),(2694,'-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)','org.jhotdraw.draw.TextAreaCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)','253','org.jhotdraw.draw.TextAreaCreationTool','public TextAreaCreationTool(TextHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}'),(2695,'-init-()','org.jhotdraw.draw.TextAreaCreationTool.-init-()','253','org.jhotdraw.draw.TextAreaCreationTool','1() {\r\n}'),(2696,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.TextAreaCreationTool.actionPerformed(java.awt.event.ActionEvent)','253','org.jhotdraw.draw.TextAreaCreationTool','public void actionPerformed(ActionEvent event) {\r\n    endEdit();\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(2697,'beginEdit(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextAreaCreationTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)','253','org.jhotdraw.draw.TextAreaCreationTool','protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textArea) == null) {\r\n        textArea = new FloatingTextArea();\r\n        // textArea.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textArea.createOverlay(getView(), textHolder);\r\n    textArea.setBounds(getFieldBounds(textHolder), textHolder.getText());\r\n    textArea.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(2698,'creationFinished(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TextAreaCreationTool.creationFinished(org.jhotdraw.draw.Figure)','253','org.jhotdraw.draw.TextAreaCreationTool','/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\n@Override\r\nprotected void creationFinished(Figure createdFigure) {\r\n    getView().clearSelection();\r\n    getView().addToSelection(createdFigure);\r\n    beginEdit(((TextHolderFigure) (createdFigure)));\r\n}'),(2699,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.TextAreaCreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)','253','org.jhotdraw.draw.TextAreaCreationTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(2700,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.TextAreaCreationTool.draw(java.awt.Graphics2D)','253','org.jhotdraw.draw.TextAreaCreationTool','/* public void mouseDragged(java.awt.event.MouseEvent e) {\n}\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (((createdFigure) != null) && ((rubberbandColor) != null)) {\r\n        g.setColor(rubberbandColor);\r\n        g.draw(getView().drawingToView(createdFigure.getBounds()));\r\n    }\r\n}'),(2701,'endEdit()','org.jhotdraw.draw.TextAreaCreationTool.endEdit()','253','org.jhotdraw.draw.TextAreaCreationTool','protected void endEdit() {\r\n    if ((typingTarget) != null) {\r\n        typingTarget.willChange();\r\n        final TextHolderFigure editedFigure = typingTarget;\r\n        final String oldText = typingTarget.getText();\r\n        final String newText = textArea.getText();\r\n        if ((newText.length()) > 0) {\r\n            typingTarget.setText(newText);\r\n        } else {\r\n            if ((createdFigure) != null) {\r\n                getDrawing().remove(((Figure) (getAddedFigure())));\r\n                // XXX - Fire undoable edit here!!\r\n            } else {\r\n                typingTarget.setText(\"\");\r\n            }\r\n        }\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                return labels.getString(\"attribute.text.text\");\r\n            }\r\n\r\n            @Override\r\n            public void undo() {\r\n                super.undo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(oldText);\r\n                editedFigure.changed();\r\n            }\r\n\r\n            @Override\r\n            public void redo() {\r\n                super.redo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(newText);\r\n                editedFigure.changed();\r\n            }\r\n        };\r\n        getDrawing().fireUndoableEditHappened(edit);\r\n        typingTarget.changed();\r\n        typingTarget = null;\r\n        textArea.endOverlay();\r\n    }\r\n    // view().checkDamage();\r\n}'),(2702,'getFieldBounds(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextAreaCreationTool.getFieldBounds(org.jhotdraw.draw.TextHolderFigure)','253','org.jhotdraw.draw.TextAreaCreationTool','private Rectangle2D.Double getFieldBounds(TextHolderFigure figure) {\r\n    Rectangle2D.Double r = figure.getDrawingArea();\r\n    Insets2D.Double insets = figure.getInsets();\r\n    insets.subtractTo(r);\r\n    // FIXME - Find a way to determine the parameters for grow.\r\n    // r.grow(1,2);\r\n    // r.width += 16;\r\n    r.x -= 1;\r\n    r.y -= 2;\r\n    r.width += 18;\r\n    r.height += 4;\r\n    return r;\r\n}'),(2703,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextAreaCreationTool.mousePressed(java.awt.event.MouseEvent)','253','org.jhotdraw.draw.TextAreaCreationTool','/**\r\n * Creates a new figure at the mouse location.\r\n * If editing is in progress, this finishes editing.\r\n */\r\n@Override\r\npublic void mousePressed(MouseEvent e) {\r\n    TextHolderFigure textHolder = null;\r\n    // Note: The search sequence used here, must be\r\n    // consistent with the search sequence used by the\r\n    // HandleTracker, SelectAreaTracker, DelegationSelectionTool, SelectionTool.\r\n    // If possible, continue to work with the current selection\r\n    DrawingView v = getView();\r\n    Point2D.Double p = v.viewToDrawing(e.getPoint());\r\n    Figure pressedFigure = null;\r\n    /* isSelectBehindEnabled() */\r\n    if (true) {\r\n        for (Figure f : v.getSelectedFigures()) {\r\n            if (f.contains(p)) {\r\n                pressedFigure = f;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // If the point is not contained in the current selection,\r\n    // search for a figure in the drawing.\r\n    if (pressedFigure == null) {\r\n        pressedFigure = getDrawing().findFigureInside(p);\r\n    }\r\n    // \r\n    if (pressedFigure instanceof TextHolderFigure) {\r\n        textHolder = ((TextHolderFigure) (pressedFigure));\r\n        textHolder = null;\r\n    }\r\n    if (textHolder != null) {\r\n        createdFigure = null;\r\n        beginEdit(textHolder);\r\n        return;\r\n    }\r\n    if ((typingTarget) != null) {\r\n        endEdit();\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    } else {\r\n        super.mousePressed(e);\r\n    }\r\n}'),(2704,'setRubberbandColor(java.awt.Color)','org.jhotdraw.draw.TextAreaCreationTool.setRubberbandColor(java.awt.Color)','253','org.jhotdraw.draw.TextAreaCreationTool','/**\r\n * Sets the rubberband color for the tool. Setting this to null, disables\r\n * the rubberband.\r\n *\r\n * @param c\r\n * 		Rubberband color or null.\r\n */\r\npublic void setRubberbandColor(Color c) {\r\n    rubberbandColor = c;\r\n}'),(2705,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextAreaEditingTool.-init-(org.jhotdraw.draw.TextHolderFigure)','254','org.jhotdraw.draw.TextAreaEditingTool','/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaEditingTool(TextHolderFigure typingTarget) {\r\n    this.typingTarget = typingTarget;\r\n}'),(2706,'-init-()','org.jhotdraw.draw.TextAreaEditingTool.-init-()','254','org.jhotdraw.draw.TextAreaEditingTool','1() {\r\n}'),(2707,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.TextAreaEditingTool.actionPerformed(java.awt.event.ActionEvent)','254','org.jhotdraw.draw.TextAreaEditingTool','public void actionPerformed(ActionEvent event) {\r\n    endEdit();\r\n    fireToolDone();\r\n}'),(2708,'beginEdit(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextAreaEditingTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)','254','org.jhotdraw.draw.TextAreaEditingTool','protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textArea) == null) {\r\n        textArea = new FloatingTextArea();\r\n        // textArea.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textArea.createOverlay(getView(), textHolder);\r\n    textArea.setBounds(getFieldBounds(textHolder), textHolder.getText());\r\n    textArea.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(2709,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.TextAreaEditingTool.deactivate(org.jhotdraw.draw.DrawingEditor)','254','org.jhotdraw.draw.TextAreaEditingTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(2710,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.TextAreaEditingTool.draw(java.awt.Graphics2D)','254','org.jhotdraw.draw.TextAreaEditingTool','@Override\r\npublic void draw(Graphics2D g) {\r\n}'),(2711,'endEdit()','org.jhotdraw.draw.TextAreaEditingTool.endEdit()','254','org.jhotdraw.draw.TextAreaEditingTool','protected void endEdit() {\r\n    if ((typingTarget) != null) {\r\n        typingTarget.willChange();\r\n        final TextHolderFigure editedFigure = typingTarget;\r\n        final String oldText = typingTarget.getText();\r\n        final String newText = textArea.getText();\r\n        if ((newText.length()) > 0) {\r\n            typingTarget.setText(newText);\r\n        } else {\r\n            typingTarget.setText(\"\");\r\n        }\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                return labels.getString(\"attribute.text.text\");\r\n            }\r\n\r\n            @Override\r\n            public void undo() {\r\n                super.undo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(oldText);\r\n                editedFigure.changed();\r\n            }\r\n\r\n            @Override\r\n            public void redo() {\r\n                super.redo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(newText);\r\n                editedFigure.changed();\r\n            }\r\n        };\r\n        getDrawing().fireUndoableEditHappened(edit);\r\n        typingTarget.changed();\r\n        typingTarget = null;\r\n        textArea.endOverlay();\r\n    }\r\n    // view().checkDamage();\r\n}'),(2712,'getFieldBounds(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextAreaEditingTool.getFieldBounds(org.jhotdraw.draw.TextHolderFigure)','254','org.jhotdraw.draw.TextAreaEditingTool','private Rectangle2D.Double getFieldBounds(TextHolderFigure figure) {\r\n    Rectangle2D.Double r = figure.getDrawingArea();\r\n    Insets2D.Double insets = figure.getInsets();\r\n    insets.subtractTo(r);\r\n    // FIXME - Find a way to determine the parameters for grow.\r\n    // r.grow(1,2);\r\n    // r.width += 16;\r\n    r.x -= 1;\r\n    r.y -= 2;\r\n    r.width += 18;\r\n    r.height += 4;\r\n    return r;\r\n}'),(2713,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextAreaEditingTool.mouseDragged(java.awt.event.MouseEvent)','254','org.jhotdraw.draw.TextAreaEditingTool','public void mouseDragged(MouseEvent e) {\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(2714,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextAreaEditingTool.mousePressed(java.awt.event.MouseEvent)','254','org.jhotdraw.draw.TextAreaEditingTool','/**\r\n * Creates a new figure at the mouse location.\r\n * If editing is in progress, this finishes editing.\r\n */\r\n@Override\r\npublic void mousePressed(MouseEvent e) {\r\n    if ((typingTarget) != null) {\r\n        beginEdit(typingTarget);\r\n        updateCursor(getView(), e.getPoint());\r\n    }\r\n}'),(2715,'-init-()','org.jhotdraw.draw.TextAreaFigure.-init-()','255','org.jhotdraw.draw.TextAreaFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaFigure() {\r\n    this(ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"TextFigure.defaultText\"));\r\n}'),(2716,'-init-(java.lang.String)','org.jhotdraw.draw.TextAreaFigure.-init-(java.lang.String)','255','org.jhotdraw.draw.TextAreaFigure','public TextAreaFigure(String text) {\r\n    setText(text);\r\n}'),(2717,'clone()','org.jhotdraw.draw.TextAreaFigure.clone()','255','org.jhotdraw.draw.TextAreaFigure','// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\npublic TextAreaFigure clone() {\r\n    TextAreaFigure that = ((TextAreaFigure) (super.clone()));\r\n    that.bounds = ((Rectangle2D.Double) (this.bounds.clone()));\r\n    return that;\r\n}'),(2718,'createHandles(int)','org.jhotdraw.draw.TextAreaFigure.createHandles(int)','255','org.jhotdraw.draw.TextAreaFigure','// EVENT HANDLING\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = ((LinkedList<Handle>) (super.createHandles(detailLevel)));\r\n    if (detailLevel == 0) {\r\n        handles.add(new FontSizeHandle(this));\r\n        handles.add(new TextOverflowHandle(this));\r\n    }\r\n    return handles;\r\n}'),(2719,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.TextAreaFigure.drawFill(java.awt.Graphics2D)','255','org.jhotdraw.draw.TextAreaFigure','protected void drawFill(Graphics2D g) {\r\n    g.fill(bounds);\r\n}'),(2720,'drawParagraph(java.awt.Graphics2D,java.text.AttributedCharacterIterator,float,float,float,float,float[],int)','org.jhotdraw.draw.TextAreaFigure.drawParagraph(java.awt.Graphics2D,java.text.AttributedCharacterIterator,float,float,float,float,float[],int)','255','org.jhotdraw.draw.TextAreaFigure','/**\r\n * Draws or measures a paragraph of text at the specified y location and\r\n * the bounds of the paragraph.\r\n *\r\n * @param g\r\n * 		Graphics object. This parameter is null, if we want to\r\n * 		measure the size of the paragraph.\r\n * @param styledText\r\n * 		the text of the paragraph.\r\n * @param verticalPos\r\n * 		the top bound of the paragraph\r\n * @param maxVerticalPos\r\n * 		the bottom bound of the paragraph\r\n * @param leftMargin\r\n * 		the left bound of the paragraph\r\n * @param rightMargin\r\n * 		the right bound of the paragraph\r\n * @param tabStops\r\n * 		an array with tab stops\r\n * @param tabCounts\r\n * 		the number of entries in tabStops which contain actual\r\n * 		values\r\n * @return Returns the actual bounds of the paragraph.\r\n */\r\nprivate Rectangle2D.Double drawParagraph(Graphics2D g, AttributedCharacterIterator styledText, float verticalPos, float maxVerticalPos, float leftMargin, float rightMargin, float[] tabStops, int tabCount) {\r\n    // This method is based on the code sample given\r\n    // in the class comment of java.awt.font.LineBreakMeasurer,\r\n    // assume styledText is an AttributedCharacterIterator, and the number\r\n    // of tabs in styledText is tabCount\r\n    Rectangle2D.Double paragraphBounds = new Rectangle2D.Double(leftMargin, verticalPos, 0, 0);\r\n    int[] tabLocations = new int[tabCount + 1];\r\n    int i = 0;\r\n    for (char c = styledText.first(); c != (styledText.DONE); c = styledText.next()) {\r\n        if (c == 	) {\r\n            tabLocations[(i++)] = styledText.getIndex();\r\n        }\r\n    }\r\n    tabLocations[tabCount] = (styledText.getEndIndex()) - 1;\r\n    // Now tabLocations has an entry for every tabs offset in\r\n    // the text.  For convenience, the last entry is tabLocations\r\n    // is the offset of the last character in the text.\r\n    LineBreakMeasurer measurer = new LineBreakMeasurer(styledText, getFontRenderContext());\r\n    int currentTab = 0;\r\n    while (((measurer.getPosition()) < (styledText.getEndIndex())) && (verticalPos <= maxVerticalPos)) {\r\n        // Lay out and draw each line.  All segments on a line\r\n        // must be computed before any drawing can occur, since\r\n        // we must know the largest ascent on the line.\r\n        // TextLayouts are computed and stored in a List;\r\n        // their horizontal positions are stored in a parallel\r\n        // List.\r\n        // lineContainsText is true after first segment is drawn\r\n        boolean lineContainsText = false;\r\n        boolean lineComplete = false;\r\n        float maxAscent = 0;\r\n        float maxDescent = 0;\r\n        float horizontalPos = leftMargin;\r\n        LinkedList<TextLayout> layouts = new LinkedList<TextLayout>();\r\n        LinkedList<Float> penPositions = new LinkedList<Float>();\r\n        int first = layouts.size();\r\n        while ((!lineComplete) && (verticalPos <= maxVerticalPos)) {\r\n            float wrappingWidth = rightMargin - horizontalPos;\r\n            TextLayout layout = null;\r\n            layout = measurer.nextLayout(wrappingWidth, ((tabLocations[currentTab]) + 1), lineContainsText);\r\n            // layout can be null if lineContainsText is true\r\n            if (layout != null) {\r\n                layouts.add(layout);\r\n                penPositions.add(horizontalPos);\r\n                horizontalPos += layout.getAdvance();\r\n                maxAscent = Math.max(maxAscent, layout.getAscent());\r\n                maxDescent = Math.max(maxDescent, ((layout.getDescent()) + (layout.getLeading())));\r\n            } else {\r\n                lineComplete = true;\r\n            }\r\n            lineContainsText = true;\r\n            if ((measurer.getPosition()) == ((tabLocations[currentTab]) + 1)) {\r\n                currentTab++;\r\n            }\r\n            if ((measurer.getPosition()) == (styledText.getEndIndex())) {\r\n                lineComplete = true;\r\n            } else\r\n                if (((tabStops.length) == 0) || (horizontalPos >= (tabStops[((tabStops.length) - 1)]))) {\r\n                    lineComplete = true;\r\n                }\r\n\r\n            if (!lineComplete) {\r\n                // move to next tab stop\r\n                int j;\r\n                for (j = 0; horizontalPos >= (tabStops[j]); j++) {\r\n                }\r\n                horizontalPos = tabStops[j];\r\n            }\r\n        } \r\n        // If there is only one layout element on the line, and we are\r\n        // drawing, then honor alignemnt\r\n        if ((first == ((layouts.size()) - 1)) && (g != null)) {\r\n            switch (AttributeKeys.TEXT_ALIGNMENT.get(this)) {\r\n                case TRAILING :\r\n                    penPositions.set(first, ((rightMargin - (layouts.get(first).getVisibleAdvance())) - 1));\r\n                    break;\r\n                case CENTER :\r\n                    penPositions.set(first, (((((rightMargin - 1) - leftMargin) - (layouts.get(first).getVisibleAdvance())) / 2) + leftMargin));\r\n                    break;\r\n                case BLOCK :\r\n                    // not supported\r\n                    break;\r\n                case LEADING :\r\n                default :\r\n                    break;\r\n            }\r\n        }\r\n        verticalPos += maxAscent;\r\n        Iterator<TextLayout> layoutEnum = layouts.iterator();\r\n        Iterator<Float> positionEnum = penPositions.iterator();\r\n        // now iterate through layouts and draw them\r\n        while (layoutEnum.hasNext()) {\r\n            TextLayout nextLayout = layoutEnum.next();\r\n            float nextPosition = positionEnum.next();\r\n            if (g != null) {\r\n                nextLayout.draw(g, nextPosition, verticalPos);\r\n            }\r\n            Rectangle2D layoutBounds = nextLayout.getBounds();\r\n            paragraphBounds.add(new Rectangle2D.Double(((layoutBounds.getX()) + nextPosition), ((layoutBounds.getY()) + verticalPos), layoutBounds.getWidth(), layoutBounds.getHeight()));\r\n        } \r\n        verticalPos += maxDescent;\r\n    } \r\n    return paragraphBounds;\r\n}'),(2721,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.TextAreaFigure.drawStroke(java.awt.Graphics2D)','255','org.jhotdraw.draw.TextAreaFigure','protected void drawStroke(Graphics2D g) {\r\n    g.draw(bounds);\r\n}'),(2722,'drawText(java.awt.Graphics2D)','org.jhotdraw.draw.TextAreaFigure.drawText(java.awt.Graphics2D)','255','org.jhotdraw.draw.TextAreaFigure','// DRAWING\r\n@Override\r\nprotected void drawText(Graphics2D g) {\r\n    if (((getText()) != null) || (isEditable())) {\r\n        Font font = getFont();\r\n        boolean isUnderlined = AttributeKeys.FONT_UNDERLINE.get(this);\r\n        Insets2D.Double insets = getInsets();\r\n        Rectangle2D.Double textRect = new Rectangle2D.Double(((bounds.x) + (insets.left)), ((bounds.y) + (insets.top)), (((bounds.width) - (insets.left)) - (insets.right)), (((bounds.height) - (insets.top)) - (insets.bottom)));\r\n        float leftMargin = ((float) (textRect.x));\r\n        float rightMargin = ((float) (Math.max((leftMargin + 1), (((textRect.x) + (textRect.width)) + 1))));\r\n        float verticalPos = ((float) (textRect.y));\r\n        float maxVerticalPos = ((float) ((textRect.y) + (textRect.height)));\r\n        if (leftMargin < rightMargin) {\r\n            // float tabWidth = (float) (getTabSize() * g.getFontMetrics(font).charWidth(m));\r\n            float tabWidth = ((float) ((getTabSize()) * (font.getStringBounds(\"m\", getFontRenderContext()).getWidth())));\r\n            float[] tabStops = new float[((int) ((textRect.width) / tabWidth))];\r\n            for (int i = 0; i < (tabStops.length); i++) {\r\n                tabStops[i] = ((float) ((textRect.x) + ((int) (tabWidth * (i + 1)))));\r\n            }\r\n            if ((getText()) != null) {\r\n                Shape savedClipArea = g.getClip();\r\n                g.clip(textRect);\r\n                String[] paragraphs = getText().split(\"\n\");// Strings.split(getText(), \n);\r\n\r\n                for (int i = 0; i < (paragraphs.length); i++) {\r\n                    if ((paragraphs[i].length()) == 0) {\r\n                        paragraphs[i] = \" \";\r\n                    }\r\n                    AttributedString as = new AttributedString(paragraphs[i]);\r\n                    as.addAttribute(TextAttribute.FONT, font);\r\n                    if (isUnderlined) {\r\n                        as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);\r\n                    }\r\n                    int tabCount = (paragraphs[i].split(\"	\").length) - 1;\r\n                    Rectangle2D.Double paragraphBounds = drawParagraph(g, as.getIterator(), verticalPos, maxVerticalPos, leftMargin, rightMargin, tabStops, tabCount);\r\n                    verticalPos = ((float) ((paragraphBounds.y) + (paragraphBounds.height)));\r\n                    if (verticalPos > maxVerticalPos) {\r\n                        break;\r\n                    }\r\n                }\r\n                g.setClip(savedClipArea);\r\n            }\r\n        }\r\n    }\r\n}'),(2723,'figureContains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TextAreaFigure.figureContains(java.awt.geom.Point2D$Double)','255','org.jhotdraw.draw.TextAreaFigure','public boolean figureContains(Point2D.Double p) {\r\n    return bounds.contains(p);\r\n}'),(2724,'getBaseline()','org.jhotdraw.draw.TextAreaFigure.getBaseline()','255','org.jhotdraw.draw.TextAreaFigure','public double getBaseline() {\r\n    return (getFont().getLineMetrics(getText(), getFontRenderContext()).getAscent()) + (getInsets().top);\r\n}'),(2725,'getBounds()','org.jhotdraw.draw.TextAreaFigure.getBounds()','255','org.jhotdraw.draw.TextAreaFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (bounds.getBounds2D()));\r\n}'),(2726,'getFillColor()','org.jhotdraw.draw.TextAreaFigure.getFillColor()','255','org.jhotdraw.draw.TextAreaFigure','public Color getFillColor() {\r\n    return AttributeKeys.FILL_COLOR.get(this);\r\n}'),(2727,'getFont()','org.jhotdraw.draw.TextAreaFigure.getFont()','255','org.jhotdraw.draw.TextAreaFigure','public Font getFont() {\r\n    return AttributeKeys.getFont(this);\r\n}'),(2728,'getFontSize()','org.jhotdraw.draw.TextAreaFigure.getFontSize()','255','org.jhotdraw.draw.TextAreaFigure','public float getFontSize() {\r\n    return AttributeKeys.FONT_SIZE.get(this).floatValue();\r\n}'),(2729,'getInsets()','org.jhotdraw.draw.TextAreaFigure.getInsets()','255','org.jhotdraw.draw.TextAreaFigure','/**\r\n * Returns the insets used to draw text.\r\n */\r\npublic Insets2D.Double getInsets() {\r\n    double sw = Math.ceil(((AttributeKeys.STROKE_WIDTH.get(this)) / 2));\r\n    Insets2D.Double insets = new Insets2D.Double(4, 4, 4, 4);\r\n    return new Insets2D.Double(((insets.top) + sw), ((insets.left) + sw), ((insets.bottom) + sw), ((insets.right) + sw));\r\n}'),(2730,'getLabelFor()','org.jhotdraw.draw.TextAreaFigure.getLabelFor()','255','org.jhotdraw.draw.TextAreaFigure','public TextHolderFigure getLabelFor() {\r\n    return this;\r\n}'),(2731,'getPreferredTextSize(double)','org.jhotdraw.draw.TextAreaFigure.getPreferredTextSize(double)','255','org.jhotdraw.draw.TextAreaFigure','/**\r\n * Returns the preferred text size of the TextAreaFigure.\r\n * <p>\r\n * If you want to use this method to determine the bounds of the TextAreaFigure,\r\n * you need to add the insets of the TextAreaFigure to the size.\r\n *\r\n * @param maxWidth\r\n * 		the maximal width to use. Specify Double.MAX_VALUE\r\n * 		if you want the width to be unlimited.\r\n * @return width and height needed to lay out the text.\r\n */\r\npublic Dimension2DDouble getPreferredTextSize(double maxWidth) {\r\n    Rectangle2D.Double textRect = new Rectangle2D.Double();\r\n    if ((getText()) != null) {\r\n        Font font = getFont();\r\n        boolean isUnderlined = AttributeKeys.FONT_UNDERLINE.get(this);\r\n        float leftMargin = 0;\r\n        float rightMargin = ((float) (maxWidth)) - 1;\r\n        float verticalPos = 0;\r\n        float maxVerticalPos = Float.MAX_VALUE;\r\n        if (leftMargin < rightMargin) {\r\n            float tabWidth = ((float) ((getTabSize()) * (font.getStringBounds(\"m\", getFontRenderContext()).getWidth())));\r\n            float[] tabStops = new float[((int) ((textRect.width) / tabWidth))];\r\n            for (int i = 0; i < (tabStops.length); i++) {\r\n                tabStops[i] = ((float) ((textRect.x) + ((int) (tabWidth * (i + 1)))));\r\n            }\r\n            String[] paragraphs = getText().split(\"\n\");// Strings.split(getText(), \n);\r\n\r\n            for (int i = 0; i < (paragraphs.length); i++) {\r\n                if ((paragraphs[i].length()) == 0) {\r\n                    paragraphs[i] = \" \";\r\n                }\r\n                AttributedString as = new AttributedString(paragraphs[i]);\r\n                as.addAttribute(TextAttribute.FONT, font);\r\n                if (isUnderlined) {\r\n                    as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);\r\n                }\r\n                int tabCount = (paragraphs[i].split(\"	\").length) - 1;\r\n                Rectangle2D.Double paragraphBounds = drawParagraph(null, as.getIterator(), verticalPos, maxVerticalPos, leftMargin, rightMargin, tabStops, tabCount);\r\n                verticalPos = ((float) ((paragraphBounds.y) + (paragraphBounds.height)));\r\n                textRect.add(paragraphBounds);\r\n            }\r\n        }\r\n    }\r\n    return new Dimension2DDouble(((-(Math.min(textRect.x, 0))) + (textRect.width)), ((-(Math.min(textRect.y, 0))) + (textRect.height)));\r\n}'),(2732,'getTabSize()','org.jhotdraw.draw.TextAreaFigure.getTabSize()','255','org.jhotdraw.draw.TextAreaFigure','public int getTabSize() {\r\n    return 8;\r\n}'),(2733,'getText()','org.jhotdraw.draw.TextAreaFigure.getText()','255','org.jhotdraw.draw.TextAreaFigure','// ATTRIBUTES\r\n/**\r\n * Gets the text shown by the text figure.\r\n */\r\npublic String getText() {\r\n    return ((String) (getAttribute(AttributeKeys.TEXT)));\r\n}'),(2734,'getTextColor()','org.jhotdraw.draw.TextAreaFigure.getTextColor()','255','org.jhotdraw.draw.TextAreaFigure','public Color getTextColor() {\r\n    return AttributeKeys.TEXT_COLOR.get(this);\r\n}'),(2735,'getTextColumns()','org.jhotdraw.draw.TextAreaFigure.getTextColumns()','255','org.jhotdraw.draw.TextAreaFigure','public int getTextColumns() {\r\n    return (getText()) == null ? 4 : Math.max(getText().length(), 4);\r\n}'),(2736,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TextAreaFigure.getTool(java.awt.geom.Point2D$Double)','255','org.jhotdraw.draw.TextAreaFigure','/**\r\n * Returns a specialized tool for the given coordinate.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\npublic Tool getTool(Point2D.Double p) {\r\n    if ((isEditable()) && (contains(p))) {\r\n        TextAreaEditingTool tool = new TextAreaEditingTool(this);\r\n        return tool;\r\n    }\r\n    return null;\r\n}'),(2737,'getTransformRestoreData()','org.jhotdraw.draw.TextAreaFigure.getTransformRestoreData()','255','org.jhotdraw.draw.TextAreaFigure','public Object getTransformRestoreData() {\r\n    return bounds.clone();\r\n}'),(2738,'invalidate()','org.jhotdraw.draw.TextAreaFigure.invalidate()','255','org.jhotdraw.draw.TextAreaFigure','public void invalidate() {\r\n    super.invalidate();\r\n    isTextOverflow = null;\r\n}'),(2739,'isEditable()','org.jhotdraw.draw.TextAreaFigure.isEditable()','255','org.jhotdraw.draw.TextAreaFigure','// EDITING\r\npublic boolean isEditable() {\r\n    return editable;\r\n}'),(2740,'isTextOverflow()','org.jhotdraw.draw.TextAreaFigure.isTextOverflow()','255','org.jhotdraw.draw.TextAreaFigure','public boolean isTextOverflow() {\r\n    if ((isTextOverflow) == null) {\r\n        Insets2D.Double insets = getInsets();\r\n        isTextOverflow = (getPreferredTextSize((((getBounds().width) - (insets.left)) - (insets.right))).height) > (((getBounds().height) - (insets.top)) - (insets.bottom));\r\n    }\r\n    return isTextOverflow;\r\n}'),(2741,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.TextAreaFigure.read(org.jhotdraw.xml.DOMInput)','255','org.jhotdraw.draw.TextAreaFigure','public void read(DOMInput in) throws IOException {\r\n    readBounds(in);\r\n    readAttributes(in);\r\n}'),(2742,'readBounds(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.TextAreaFigure.readBounds(org.jhotdraw.xml.DOMInput)','255','org.jhotdraw.draw.TextAreaFigure','protected void readBounds(DOMInput in) throws IOException {\r\n    bounds.x = in.getAttribute(\"x\", 0.0);\r\n    bounds.y = in.getAttribute(\"y\", 0.0);\r\n    bounds.width = in.getAttribute(\"w\", 0.0);\r\n    bounds.height = in.getAttribute(\"h\", 0.0);\r\n}'),(2743,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.TextAreaFigure.restoreTransformTo(java.lang.Object)','255','org.jhotdraw.draw.TextAreaFigure','public void restoreTransformTo(Object geometry) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (geometry));\r\n    bounds.x = r.x;\r\n    bounds.y = r.y;\r\n    bounds.width = r.width;\r\n    bounds.height = r.height;\r\n}'),(2744,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TextAreaFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','255','org.jhotdraw.draw.TextAreaFigure','// SHAPE AND BOUNDS\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    bounds.x = Math.min(anchor.x, lead.x);\r\n    bounds.y = Math.min(anchor.y, lead.y);\r\n    bounds.width = Math.max(1, Math.abs(((lead.x) - (anchor.x))));\r\n    bounds.height = Math.max(1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(2745,'setEditable(boolean)','org.jhotdraw.draw.TextAreaFigure.setEditable(boolean)','255','org.jhotdraw.draw.TextAreaFigure','public void setEditable(boolean b) {\r\n    this.editable = b;\r\n}'),(2746,'setFontSize(float)','org.jhotdraw.draw.TextAreaFigure.setFontSize(float)','255','org.jhotdraw.draw.TextAreaFigure','public void setFontSize(float size) {\r\n    AttributeKeys.FONT_SIZE.set(this, new Double(size));\r\n}'),(2747,'setText(java.lang.String)','org.jhotdraw.draw.TextAreaFigure.setText(java.lang.String)','255','org.jhotdraw.draw.TextAreaFigure','/**\r\n * Sets the text shown by the text figure.\r\n */\r\npublic void setText(String newText) {\r\n    AttributeKeys.TEXT.set(this, newText);\r\n}'),(2748,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.TextAreaFigure.transform(java.awt.geom.AffineTransform)','255','org.jhotdraw.draw.TextAreaFigure','public void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(2749,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.TextAreaFigure.write(org.jhotdraw.xml.DOMOutput)','255','org.jhotdraw.draw.TextAreaFigure','public void write(DOMOutput out) throws IOException {\r\n    writeBounds(out);\r\n    writeAttributes(out);\r\n}'),(2750,'writeBounds(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.TextAreaFigure.writeBounds(org.jhotdraw.xml.DOMOutput)','255','org.jhotdraw.draw.TextAreaFigure','protected void writeBounds(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"x\", bounds.x);\r\n    out.addAttribute(\"y\", bounds.y);\r\n    out.addAttribute(\"w\", bounds.width);\r\n    out.addAttribute(\"h\", bounds.height);\r\n}'),(2751,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure)','256','org.jhotdraw.draw.TextCreationTool','/**\r\n * Creates a new instance.\r\n */\r\npublic TextCreationTool(TextHolderFigure prototype) {\r\n    super(prototype);\r\n}'),(2752,'-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)','org.jhotdraw.draw.TextCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)','256','org.jhotdraw.draw.TextCreationTool','/**\r\n * Creates a new instance.\r\n */\r\npublic TextCreationTool(TextHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}'),(2753,'-init-()','org.jhotdraw.draw.TextCreationTool.-init-()','256','org.jhotdraw.draw.TextCreationTool','1() {\r\n}'),(2754,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.TextCreationTool.actionPerformed(java.awt.event.ActionEvent)','256','org.jhotdraw.draw.TextCreationTool','public void actionPerformed(ActionEvent event) {\r\n    endEdit();\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(2755,'beginEdit(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextCreationTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)','256','org.jhotdraw.draw.TextCreationTool','protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textField) == null) {\r\n        textField = new FloatingTextField();\r\n        textField.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textField.createOverlay(getView(), textHolder);\r\n    textField.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(2756,'creationFinished(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TextCreationTool.creationFinished(org.jhotdraw.draw.Figure)','256','org.jhotdraw.draw.TextCreationTool','@Override\r\nprotected void creationFinished(Figure createdFigure) {\r\n    beginEdit(((TextHolderFigure) (createdFigure)));\r\n    updateCursor(getView(), new Point(0, 0));\r\n}'),(2757,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.TextCreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)','256','org.jhotdraw.draw.TextCreationTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(2758,'endEdit()','org.jhotdraw.draw.TextCreationTool.endEdit()','256','org.jhotdraw.draw.TextCreationTool','protected void endEdit() {\r\n    if ((typingTarget) != null) {\r\n        typingTarget.willChange();\r\n        final TextHolderFigure editedFigure = typingTarget;\r\n        final String oldText = typingTarget.getText();\r\n        final String newText = textField.getText();\r\n        if ((newText.length()) > 0) {\r\n            typingTarget.setText(newText);\r\n        } else {\r\n            if ((createdFigure) != null) {\r\n                getDrawing().remove(((Figure) (getAddedFigure())));\r\n                // XXX - Fire undoable edit here!!\r\n            } else {\r\n                typingTarget.setText(\"\");\r\n                typingTarget.changed();\r\n            }\r\n        }\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                return labels.getString(\"attribute.text.text\");\r\n            }\r\n\r\n            @Override\r\n            public void undo() {\r\n                super.undo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(oldText);\r\n                editedFigure.changed();\r\n            }\r\n\r\n            @Override\r\n            public void redo() {\r\n                super.redo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(newText);\r\n                editedFigure.changed();\r\n            }\r\n        };\r\n        getDrawing().fireUndoableEditHappened(edit);\r\n        typingTarget.changed();\r\n        typingTarget = null;\r\n        textField.endOverlay();\r\n    }\r\n    // view().checkDamage();\r\n}'),(2759,'isEditing()','org.jhotdraw.draw.TextCreationTool.isEditing()','256','org.jhotdraw.draw.TextCreationTool','public boolean isEditing() {\r\n    return (typingTarget) != null;\r\n}'),(2760,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.TextCreationTool.keyReleased(java.awt.event.KeyEvent)','256','org.jhotdraw.draw.TextCreationTool','@Override\r\npublic void keyReleased(KeyEvent evt) {\r\n    if (((evt.getKeyCode()) == (KeyEvent.VK_ESCAPE)) || (isToolDoneAfterCreation())) {\r\n        fireToolDone();\r\n    }\r\n}'),(2761,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextCreationTool.mouseDragged(java.awt.event.MouseEvent)','256','org.jhotdraw.draw.TextCreationTool','@Override\r\npublic void mouseDragged(MouseEvent e) {\r\n}'),(2762,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextCreationTool.mousePressed(java.awt.event.MouseEvent)','256','org.jhotdraw.draw.TextCreationTool','/**\r\n * Creates a new figure at the location where the mouse was pressed.\r\n */\r\n@Override\r\npublic void mousePressed(MouseEvent e) {\r\n    TextHolderFigure textHolder = null;\r\n    // Note: The search sequence used here, must be\r\n    // consistent with the search sequence used by the\r\n    // HandleTracker, SelectAreaTracker, DelegationSelectionTool, SelectionTool.\r\n    // If possible, continue to work with the current selection\r\n    DrawingView v = getView();\r\n    Point2D.Double p = v.viewToDrawing(e.getPoint());\r\n    Figure pressedFigure = null;\r\n    /* isSelectBehindEnabled() */\r\n    if (true) {\r\n        for (Figure f : v.getSelectedFigures()) {\r\n            if (f.contains(p)) {\r\n                pressedFigure = f;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // If the point is not contained in the current selection,\r\n    // search for a figure in the drawing.\r\n    if (pressedFigure == null) {\r\n        pressedFigure = getDrawing().findFigureInside(p);\r\n    }\r\n    if (pressedFigure instanceof TextHolderFigure) {\r\n        textHolder = ((TextHolderFigure) (pressedFigure)).getLabelFor();\r\n        textHolder = null;\r\n    }\r\n    if (textHolder != null) {\r\n        beginEdit(textHolder);\r\n        updateCursor(getView(), e.getPoint());\r\n        return;\r\n    }\r\n    if ((typingTarget) != null) {\r\n        endEdit();\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    } else {\r\n        super.mousePressed(e);\r\n        // update view so the created figure is drawn before the floating text\r\n        // figure is overlaid.\r\n        textHolder = ((TextHolderFigure) (getCreatedFigure()));\r\n        getView().clearSelection();\r\n        getView().addToSelection(textHolder);\r\n        beginEdit(textHolder);\r\n        updateCursor(getView(), e.getPoint());\r\n    }\r\n}'),(2763,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextCreationTool.mouseReleased(java.awt.event.MouseEvent)','256','org.jhotdraw.draw.TextCreationTool','@Override\r\npublic void mouseReleased(MouseEvent evt) {\r\n}'),(2764,'updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','org.jhotdraw.draw.TextCreationTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','256','org.jhotdraw.draw.TextCreationTool','@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor((isEditing() ? Cursor.DEFAULT_CURSOR : Cursor.CROSSHAIR_CURSOR)));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(2765,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextEditingTool.-init-(org.jhotdraw.draw.TextHolderFigure)','257','org.jhotdraw.draw.TextEditingTool','/**\r\n * Creates a new instance.\r\n */\r\npublic TextEditingTool(TextHolderFigure typingTarget) {\r\n    this.typingTarget = typingTarget;\r\n}'),(2766,'-init-()','org.jhotdraw.draw.TextEditingTool.-init-()','257','org.jhotdraw.draw.TextEditingTool','1() {\r\n}'),(2767,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.TextEditingTool.actionPerformed(java.awt.event.ActionEvent)','257','org.jhotdraw.draw.TextEditingTool','public void actionPerformed(ActionEvent event) {\r\n    endEdit();\r\n    fireToolDone();\r\n}'),(2768,'beginEdit(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextEditingTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)','257','org.jhotdraw.draw.TextEditingTool','protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textField) == null) {\r\n        textField = new FloatingTextField();\r\n        textField.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textField.createOverlay(getView(), textHolder);\r\n    textField.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(2769,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.TextEditingTool.deactivate(org.jhotdraw.draw.DrawingEditor)','257','org.jhotdraw.draw.TextEditingTool','@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(2770,'endEdit()','org.jhotdraw.draw.TextEditingTool.endEdit()','257','org.jhotdraw.draw.TextEditingTool','protected void endEdit() {\r\n    if ((typingTarget) != null) {\r\n        typingTarget.willChange();\r\n        final TextHolderFigure editedFigure = typingTarget;\r\n        final String oldText = typingTarget.getText();\r\n        final String newText = textField.getText();\r\n        if ((newText.length()) > 0) {\r\n            typingTarget.setText(newText);\r\n        }\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                return labels.getString(\"attribute.text.text\");\r\n            }\r\n\r\n            @Override\r\n            public void undo() {\r\n                super.undo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(oldText);\r\n                editedFigure.changed();\r\n            }\r\n\r\n            @Override\r\n            public void redo() {\r\n                super.redo();\r\n                editedFigure.willChange();\r\n                editedFigure.setText(newText);\r\n                editedFigure.changed();\r\n            }\r\n        };\r\n        getDrawing().fireUndoableEditHappened(edit);\r\n        typingTarget.changed();\r\n        typingTarget = null;\r\n        textField.endOverlay();\r\n    }\r\n    // view().checkDamage();\r\n}'),(2771,'isEditing()','org.jhotdraw.draw.TextEditingTool.isEditing()','257','org.jhotdraw.draw.TextEditingTool','public boolean isEditing() {\r\n    return (typingTarget) != null;\r\n}'),(2772,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.draw.TextEditingTool.keyReleased(java.awt.event.KeyEvent)','257','org.jhotdraw.draw.TextEditingTool','@Override\r\npublic void keyReleased(KeyEvent evt) {\r\n    if ((evt.getKeyCode()) == (KeyEvent.VK_ESCAPE)) {\r\n        fireToolDone();\r\n    }\r\n}'),(2773,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextEditingTool.mouseDragged(java.awt.event.MouseEvent)','257','org.jhotdraw.draw.TextEditingTool','public void mouseDragged(MouseEvent e) {\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(2774,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextEditingTool.mousePressed(java.awt.event.MouseEvent)','257','org.jhotdraw.draw.TextEditingTool','/**\r\n * If the pressed figure is a TextHolderFigure it can be edited.\r\n */\r\n@Override\r\npublic void mousePressed(MouseEvent e) {\r\n    if ((typingTarget) != null) {\r\n        beginEdit(typingTarget);\r\n        updateCursor(getView(), e.getPoint());\r\n    }\r\n}'),(2775,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.draw.TextEditingTool.mouseReleased(java.awt.event.MouseEvent)','257','org.jhotdraw.draw.TextEditingTool','@Override\r\npublic void mouseReleased(MouseEvent evt) {\r\n}'),(2776,'updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','org.jhotdraw.draw.TextEditingTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)','257','org.jhotdraw.draw.TextEditingTool','@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor((isEditing() ? Cursor.DEFAULT_CURSOR : Cursor.CROSSHAIR_CURSOR)));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(2777,'-init-()','org.jhotdraw.draw.TextFigure.-init-()','258','org.jhotdraw.draw.TextFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic TextFigure() {\r\n    this(ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"TextFigure.defaultText\"));\r\n}'),(2778,'-init-(java.lang.String)','org.jhotdraw.draw.TextFigure.-init-(java.lang.String)','258','org.jhotdraw.draw.TextFigure','public TextFigure(String text) {\r\n    setText(text);\r\n}'),(2779,'clone()','org.jhotdraw.draw.TextFigure.clone()','258','org.jhotdraw.draw.TextFigure','@Override\r\npublic TextFigure clone() {\r\n    TextFigure that = ((TextFigure) (super.clone()));\r\n    that.origin = ((Point2D.Double) (this.origin.clone()));\r\n    that.textLayout = null;\r\n    return that;\r\n}'),(2780,'createHandles(int)','org.jhotdraw.draw.TextFigure.createHandles(int)','258','org.jhotdraw.draw.TextFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new BoundsOutlineHandle(this));\r\n            handles.add(new MoveHandle(this, RelativeLocator.northWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.northEast()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southEast()));\r\n            handles.add(new FontSizeHandle(this));\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(2781,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.TextFigure.drawFill(java.awt.Graphics2D)','258','org.jhotdraw.draw.TextFigure','protected void drawFill(Graphics2D g) {\r\n}'),(2782,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.TextFigure.drawStroke(java.awt.Graphics2D)','258','org.jhotdraw.draw.TextFigure','// DRAWING\r\nprotected void drawStroke(Graphics2D g) {\r\n}'),(2783,'drawText(java.awt.Graphics2D)','org.jhotdraw.draw.TextFigure.drawText(java.awt.Graphics2D)','258','org.jhotdraw.draw.TextFigure','protected void drawText(Graphics2D g) {\r\n    if (((getText()) != null) || (isEditable())) {\r\n        TextLayout layout = getTextLayout();\r\n        layout.draw(g, ((float) (origin.x)), ((float) ((origin.y) + (layout.getAscent()))));\r\n    }\r\n}'),(2784,'figureContains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TextFigure.figureContains(java.awt.geom.Point2D$Double)','258','org.jhotdraw.draw.TextFigure','public boolean figureContains(Point2D.Double p) {\r\n    if (getBounds().contains(p)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}'),(2785,'getBaseline()','org.jhotdraw.draw.TextFigure.getBaseline()','258','org.jhotdraw.draw.TextFigure','public double getBaseline() {\r\n    TextLayout layout = getTextLayout();\r\n    return ((origin.y) + (layout.getAscent())) - (getBounds().y);\r\n}'),(2786,'getBounds()','org.jhotdraw.draw.TextFigure.getBounds()','258','org.jhotdraw.draw.TextFigure','public Rectangle2D.Double getBounds() {\r\n    TextLayout layout = getTextLayout();\r\n    Rectangle2D.Double r = new Rectangle2D.Double(origin.x, origin.y, layout.getAdvance(), ((layout.getAscent()) + (layout.getDescent())));\r\n    return r;\r\n}'),(2787,'getFigureDrawingArea()','org.jhotdraw.draw.TextFigure.getFigureDrawingArea()','258','org.jhotdraw.draw.TextFigure','/**\r\n * Gets the drawing area without taking the decorator into account.\r\n */\r\nprotected Rectangle2D.Double getFigureDrawingArea() {\r\n    if ((getText()) == null) {\r\n        return getBounds();\r\n    } else {\r\n        TextLayout layout = getTextLayout();\r\n        Rectangle2D.Double r = new Rectangle2D.Double(origin.x, origin.y, layout.getAdvance(), layout.getAscent());\r\n        Rectangle2D lBounds = layout.getBounds();\r\n        if ((!(lBounds.isEmpty())) && (!(Double.isNaN(lBounds.getX())))) {\r\n            r.add(new Rectangle2D.Double(((lBounds.getX()) + (origin.x)), (((lBounds.getY()) + (origin.y)) + (layout.getAscent())), lBounds.getWidth(), lBounds.getHeight()));\r\n        }\r\n        // grow by two pixels to take antialiasing into account\r\n        Geom.grow(r, 2.0, 2.0);\r\n        return r;\r\n    }\r\n}'),(2788,'getFillColor()','org.jhotdraw.draw.TextFigure.getFillColor()','258','org.jhotdraw.draw.TextFigure','public Color getFillColor() {\r\n    return AttributeKeys.FILL_COLOR.get(this);\r\n}'),(2789,'getFont()','org.jhotdraw.draw.TextFigure.getFont()','258','org.jhotdraw.draw.TextFigure','public Font getFont() {\r\n    return AttributeKeys.getFont(this);\r\n}'),(2790,'getFontSize()','org.jhotdraw.draw.TextFigure.getFontSize()','258','org.jhotdraw.draw.TextFigure','public float getFontSize() {\r\n    return AttributeKeys.FONT_SIZE.get(this).floatValue();\r\n}'),(2791,'getInsets()','org.jhotdraw.draw.TextFigure.getInsets()','258','org.jhotdraw.draw.TextFigure','public Insets2D.Double getInsets() {\r\n    return new Insets2D.Double();\r\n}'),(2792,'getLabelFor()','org.jhotdraw.draw.TextFigure.getLabelFor()','258','org.jhotdraw.draw.TextFigure','public TextHolderFigure getLabelFor() {\r\n    return this;\r\n}'),(2793,'getPreferredSize()','org.jhotdraw.draw.TextFigure.getPreferredSize()','258','org.jhotdraw.draw.TextFigure','public Dimension2DDouble getPreferredSize() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return new Dimension2DDouble(b.width, b.height);\r\n}'),(2794,'getTabSize()','org.jhotdraw.draw.TextFigure.getTabSize()','258','org.jhotdraw.draw.TextFigure','/**\r\n * Gets the number of characters used to expand tabs.\r\n */\r\npublic int getTabSize() {\r\n    return 8;\r\n}'),(2795,'getText()','org.jhotdraw.draw.TextFigure.getText()','258','org.jhotdraw.draw.TextFigure','// ATTRIBUTES\r\n/**\r\n * Gets the text shown by the text figure.\r\n */\r\npublic String getText() {\r\n    return AttributeKeys.TEXT.get(this);\r\n}'),(2796,'getTextColor()','org.jhotdraw.draw.TextFigure.getTextColor()','258','org.jhotdraw.draw.TextFigure','public Color getTextColor() {\r\n    return AttributeKeys.TEXT_COLOR.get(this);\r\n}'),(2797,'getTextColumns()','org.jhotdraw.draw.TextFigure.getTextColumns()','258','org.jhotdraw.draw.TextFigure','public int getTextColumns() {\r\n    // return (getText() == null) ? 4 : Math.max(getText().length(), 4);\r\n    return 4;\r\n}'),(2798,'getTextLayout()','org.jhotdraw.draw.TextFigure.getTextLayout()','258','org.jhotdraw.draw.TextFigure','protected TextLayout getTextLayout() {\r\n    if ((textLayout) == null) {\r\n        String text = getText();\r\n        if ((text == null) || ((text.length()) == 0)) {\r\n            text = \" \";\r\n        }\r\n        FontRenderContext frc = getFontRenderContext();\r\n        HashMap<TextAttribute, Object> textAttributes = new HashMap<TextAttribute, Object>();\r\n        textAttributes.put(TextAttribute.FONT, getFont());\r\n        if (AttributeKeys.FONT_UNDERLINE.get(this)) {\r\n            textAttributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);\r\n        }\r\n        textLayout = new TextLayout(text, textAttributes, frc);\r\n    }\r\n    return textLayout;\r\n}'),(2799,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TextFigure.getTool(java.awt.geom.Point2D$Double)','258','org.jhotdraw.draw.TextFigure','/**\r\n * Returns a specialized tool for the given coordinate.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\n@Override\r\npublic Tool getTool(Point2D.Double p) {\r\n    if ((isEditable()) && (contains(p))) {\r\n        TextEditingTool t = new TextEditingTool(this);\r\n        return t;\r\n    }\r\n    return null;\r\n}'),(2800,'getTransformRestoreData()','org.jhotdraw.draw.TextFigure.getTransformRestoreData()','258','org.jhotdraw.draw.TextFigure','public Object getTransformRestoreData() {\r\n    return origin.clone();\r\n}'),(2801,'invalidate()','org.jhotdraw.draw.TextFigure.invalidate()','258','org.jhotdraw.draw.TextFigure','// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\n@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    textLayout = null;\r\n}'),(2802,'isEditable()','org.jhotdraw.draw.TextFigure.isEditable()','258','org.jhotdraw.draw.TextFigure','// EDITING\r\npublic boolean isEditable() {\r\n    return editable;\r\n}'),(2803,'isTextOverflow()','org.jhotdraw.draw.TextFigure.isTextOverflow()','258','org.jhotdraw.draw.TextFigure','public boolean isTextOverflow() {\r\n    return false;\r\n}'),(2804,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.draw.TextFigure.read(org.jhotdraw.xml.DOMInput)','258','org.jhotdraw.draw.TextFigure','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    setBounds(new Point2D.Double(in.getAttribute(\"x\", 0.0), in.getAttribute(\"y\", 0.0)), new Point2D.Double(0, 0));\r\n    readAttributes(in);\r\n    readDecorator(in);\r\n    invalidate();\r\n}'),(2805,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.TextFigure.restoreTransformTo(java.lang.Object)','258','org.jhotdraw.draw.TextFigure','public void restoreTransformTo(Object geometry) {\r\n    Point2D.Double p = ((Point2D.Double) (geometry));\r\n    origin.x = p.x;\r\n    origin.y = p.y;\r\n}'),(2806,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TextFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','258','org.jhotdraw.draw.TextFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    origin = new Point2D.Double(anchor.x, anchor.y);\r\n}'),(2807,'setEditable(boolean)','org.jhotdraw.draw.TextFigure.setEditable(boolean)','258','org.jhotdraw.draw.TextFigure','public void setEditable(boolean b) {\r\n    this.editable = b;\r\n}'),(2808,'setFontSize(float)','org.jhotdraw.draw.TextFigure.setFontSize(float)','258','org.jhotdraw.draw.TextFigure','public void setFontSize(float size) {\r\n    AttributeKeys.FONT_SIZE.set(this, new Double(size));\r\n}'),(2809,'setText(java.lang.String)','org.jhotdraw.draw.TextFigure.setText(java.lang.String)','258','org.jhotdraw.draw.TextFigure','/**\r\n * Sets the text shown by the text figure.\r\n * This is a convenience method for calling willChange,\r\n * AttribuTEXT.basicSet, changed.\r\n */\r\npublic void setText(String newText) {\r\n    AttributeKeys.TEXT.set(this, newText);\r\n}'),(2810,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.TextFigure.transform(java.awt.geom.AffineTransform)','258','org.jhotdraw.draw.TextFigure','// SHAPE AND BOUNDS\r\npublic void transform(AffineTransform tx) {\r\n    tx.transform(origin, origin);\r\n}'),(2811,'validate()','org.jhotdraw.draw.TextFigure.validate()','258','org.jhotdraw.draw.TextFigure','@Override\r\nprotected void validate() {\r\n    super.validate();\r\n    textLayout = null;\r\n}'),(2812,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.draw.TextFigure.write(org.jhotdraw.xml.DOMOutput)','258','org.jhotdraw.draw.TextFigure','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double b = getBounds();\r\n    out.addAttribute(\"x\", b.x);\r\n    out.addAttribute(\"y\", b.y);\r\n    writeAttributes(out);\r\n    writeDecorator(out);\r\n}'),(2813,'getBaseline()','org.jhotdraw.draw.TextHolderFigure.getBaseline()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Gets the baseline of the first line of text, relative to the\r\n * upper left corner of the figure bounds.\r\n */\r\npublic double getBaseline();'),(2814,'getFillColor()','org.jhotdraw.draw.TextHolderFigure.getFillColor()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Returns the fill color to be used by a text editor for editing this Figure.\r\n */\r\npublic Color getFillColor();'),(2815,'getFont()','org.jhotdraw.draw.TextHolderFigure.getFont()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Returns the font to be used by a text editor for editing this Figure.\r\n */\r\npublic Font getFont();'),(2816,'getFontSize()','org.jhotdraw.draw.TextHolderFigure.getFontSize()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Gets the font size of the text held by the TextHolderFigure.\r\n */\r\npublic float getFontSize();'),(2817,'getInsets()','org.jhotdraw.draw.TextHolderFigure.getInsets()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Returns Insets to be used by the text editor relative to the handle bounds\r\n * of the figure.\r\n */\r\npublic Insets2D.Double getInsets();'),(2818,'getLabelFor()','org.jhotdraw.draw.TextHolderFigure.getLabelFor()','259','org.jhotdraw.draw.TextHolderFigure','// FIMXE - Maybe we can remove method getLabelFor().\r\n/**\r\n * Sometimes we want to use a TextHolderFigure as a label for another\r\n * TextHolderFigure. Returns the TextHolderFigure that should be really used.\r\n */\r\npublic TextHolderFigure getLabelFor();'),(2819,'getTabSize()','org.jhotdraw.draw.TextHolderFigure.getTabSize()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Gets the number of characters used to expand tabs.\r\n */\r\npublic int getTabSize();'),(2820,'getText()','org.jhotdraw.draw.TextHolderFigure.getText()','259','org.jhotdraw.draw.TextHolderFigure','// FIMXE - Maybe method getText and setText should work with StyledDocument\r\n// instead of with Strings.\r\n/**\r\n * Returns the text held by the Text Holder.\r\n */\r\npublic String getText();'),(2821,'getTextColor()','org.jhotdraw.draw.TextHolderFigure.getTextColor()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Returns the text color to be used by a text editor for editing this Figure.\r\n */\r\npublic Color getTextColor();'),(2822,'getTextColumns()','org.jhotdraw.draw.TextHolderFigure.getTextColumns()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Gets the number of columns to be overlaid when the figure is edited.\r\n */\r\npublic int getTextColumns();'),(2823,'isEditable()','org.jhotdraw.draw.TextHolderFigure.isEditable()','259','org.jhotdraw.draw.TextHolderFigure','// FIXME - Maybe we can remove method isEditable(), because we already have\r\n// an isInteractive() method in the Figure interface.\r\n/**\r\n * Returns true if the text of the TextHolderFigure can be edited.\r\n */\r\npublic boolean isEditable();'),(2824,'isTextOverflow()','org.jhotdraw.draw.TextHolderFigure.isTextOverflow()','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Returns true, if the text does not fit into the bounds of the Figure.\r\n */\r\npublic boolean isTextOverflow();'),(2825,'setFontSize(float)','org.jhotdraw.draw.TextHolderFigure.setFontSize(float)','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Sets the font size of the text held by the TextHolderFigure.\r\n */\r\npublic void setFontSize(float size);'),(2826,'setText(java.lang.String)','org.jhotdraw.draw.TextHolderFigure.setText(java.lang.String)','259','org.jhotdraw.draw.TextHolderFigure','/**\r\n * Sets the text of the Text Holder.\r\n *\r\n * @param text\r\n * 		\r\n */\r\npublic void setText(String text);'),(2827,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextInputFormat.-init-(org.jhotdraw.draw.TextHolderFigure)','260','org.jhotdraw.draw.TextInputFormat','/**\r\n * Creates a new image output format for text, for a figure that can not.\r\n * hold multiple lines of text.\r\n */\r\npublic TextInputFormat(TextHolderFigure prototype) {\r\n    this(prototype, \"Text\", \"Text\", \"txt\", false);\r\n}'),(2828,'-init-(org.jhotdraw.draw.TextHolderFigure,java.lang.String,java.lang.String,java.lang.String,boolean)','org.jhotdraw.draw.TextInputFormat.-init-(org.jhotdraw.draw.TextHolderFigure,java.lang.String,java.lang.String,java.lang.String,boolean)','260','org.jhotdraw.draw.TextInputFormat','/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param isMultiline\r\n * 		Set this to true, if the TextHolderFigure can hold\r\n * 		multiple lines of text. If this is true, multiple lines of text are\r\n * 		added to the same figure. If this is false, a new Figure is created for\r\n * 		each line of text.\r\n */\r\npublic TextInputFormat(TextHolderFigure prototype, String formatName, String description, String fileExtension, boolean isMultiline) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.isMultiline = isMultiline;\r\n}'),(2829,'createTextHolderFigures(java.io.InputStream)','org.jhotdraw.draw.TextInputFormat.createTextHolderFigures(java.io.InputStream)','260','org.jhotdraw.draw.TextInputFormat','public LinkedList<Figure> createTextHolderFigures(InputStream in) throws IOException {\r\n    LinkedList<Figure> list = new LinkedList<Figure>();\r\n    BufferedReader r = new BufferedReader(new InputStreamReader(in, \"UTF8\"));\r\n    if (isMultiline) {\r\n        TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n        StringBuilder buf = new StringBuilder();\r\n        for (String line = null; line != null; line = r.readLine()) {\r\n            if ((buf.length()) != 0) {\r\n                buf.append(\n);\r\n            }\r\n            buf.append(line);\r\n        }\r\n        figure.setText(buf.toString());\r\n        Dimension2DDouble s = figure.getPreferredSize();\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(s.width, s.height));\r\n    } else {\r\n        double y = 0;\r\n        for (String line = null; line != null; line = r.readLine()) {\r\n            TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n            figure.setText(line);\r\n            Dimension2DDouble s = figure.getPreferredSize();\r\n            figure.setBounds(new Point2D.Double(0, y), new Point2D.Double(s.width, s.height));\r\n            list.add(figure);\r\n            y += s.height;\r\n        }\r\n    }\r\n    if ((list.size()) == 0) {\r\n        throw new IOException(\"No text found\");\r\n    }\r\n    return list;\r\n}'),(2830,'getFileExtension()','org.jhotdraw.draw.TextInputFormat.getFileExtension()','260','org.jhotdraw.draw.TextInputFormat','public String getFileExtension() {\r\n    return fileExtension;\r\n}'),(2831,'getFileFilter()','org.jhotdraw.draw.TextInputFormat.getFileFilter()','260','org.jhotdraw.draw.TextInputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(description, fileExtension);\r\n}'),(2832,'getInputFormatAccessory()','org.jhotdraw.draw.TextInputFormat.getInputFormatAccessory()','260','org.jhotdraw.draw.TextInputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(2833,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.draw.TextInputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','260','org.jhotdraw.draw.TextInputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return flavor.equals(DataFlavor.stringFlavor);\r\n}'),(2834,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.TextInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','260','org.jhotdraw.draw.TextInputFormat','public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    String text = ((String) (t.getTransferData(DataFlavor.stringFlavor)));\r\n    LinkedList<Figure> list = new LinkedList<Figure>();\r\n    if (isMultiline) {\r\n        TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n        figure.setText(text);\r\n        Dimension2DDouble s = figure.getPreferredSize();\r\n        figure.willChange();\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(s.width, s.height));\r\n        figure.changed();\r\n        list.add(figure);\r\n    } else {\r\n        double y = 0;\r\n        for (String line : text.split(\"\n\")) {\r\n            TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n            figure.setText(line);\r\n            Dimension2DDouble s = figure.getPreferredSize();\r\n            y += s.height;\r\n            figure.willChange();\r\n            figure.setBounds(new Point2D.Double(0, (0 + y)), new Point2D.Double(s.width, ((s.height) + y)));\r\n            figure.changed();\r\n            list.add(figure);\r\n        }\r\n    }\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(list);\r\n}'),(2835,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.TextInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','260','org.jhotdraw.draw.TextInputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(2836,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.TextInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','260','org.jhotdraw.draw.TextInputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    read(new FileInputStream(file), drawing, replace);\r\n}'),(2837,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.draw.TextInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','260','org.jhotdraw.draw.TextInputFormat','public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAddAll(0, createTextHolderFigures(in));\r\n}'),(2838,'-init-(org.jhotdraw.draw.TextHolderFigure)','org.jhotdraw.draw.TextOverflowHandle.-init-(org.jhotdraw.draw.TextHolderFigure)','261','org.jhotdraw.draw.TextOverflowHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic TextOverflowHandle(TextHolderFigure owner) {\r\n    super(owner);\r\n}'),(2839,'basicGetBounds()','org.jhotdraw.draw.TextOverflowHandle.basicGetBounds()','261','org.jhotdraw.draw.TextOverflowHandle','@Override\r\nprotected Rectangle basicGetBounds() {\r\n    Rectangle2D.Double b = getOwner().getBounds();\r\n    Point2D.Double p = new Point2D.Double(((b.x) + (b.width)), ((b.y) + (b.height)));\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        AttributeKeys.TRANSFORM.get(getOwner()).transform(p, p);\r\n    }\r\n    Rectangle r = new Rectangle(view.drawingToView(p));\r\n    int h = getHandlesize();\r\n    r.x -= h;\r\n    r.y -= h;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(2840,'contains(java.awt.Point)','org.jhotdraw.draw.TextOverflowHandle.contains(java.awt.Point)','261','org.jhotdraw.draw.TextOverflowHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(2841,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.TextOverflowHandle.draw(java.awt.Graphics2D)','261','org.jhotdraw.draw.TextOverflowHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (getOwner().isTextOverflow()) {\r\n        drawRectangle(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR))));\r\n        g.setColor(((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR))));\r\n        Rectangle r = basicGetBounds();\r\n        g.drawLine(((r.x) + 1), ((r.y) + 1), (((r.x) + (r.width)) - 2), (((r.y) + (r.height)) - 2));\r\n        g.drawLine((((r.x) + (r.width)) - 2), ((r.y) + 1), ((r.x) + 1), (((r.y) + (r.height)) - 2));\r\n    }\r\n}'),(2842,'getOwner()','org.jhotdraw.draw.TextOverflowHandle.getOwner()','261','org.jhotdraw.draw.TextOverflowHandle','public TextHolderFigure getOwner() {\r\n    return ((TextHolderFigure) (super.getOwner()));\r\n}'),(2843,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.TextOverflowHandle.getToolTipText(java.awt.Point)','261','org.jhotdraw.draw.TextOverflowHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    return getOwner().isTextOverflow() ? // \r\n    ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"handle.textOverflow.toolTipText\") : null;\r\n}'),(2844,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.TextOverflowHandle.trackEnd(java.awt.Point,java.awt.Point,int)','261','org.jhotdraw.draw.TextOverflowHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(2845,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.TextOverflowHandle.trackStart(java.awt.Point,int)','261','org.jhotdraw.draw.TextOverflowHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(2846,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.TextOverflowHandle.trackStep(java.awt.Point,java.awt.Point,int)','261','org.jhotdraw.draw.TextOverflowHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(2847,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.Tool.activate(org.jhotdraw.draw.DrawingEditor)','262','org.jhotdraw.draw.Tool','/**\r\n * Activates the tool for the given editor. This method is called\r\n * whenever the user switches to this tool.\r\n */\r\npublic void activate(DrawingEditor editor);'),(2848,'addToolListener(org.jhotdraw.draw.ToolListener)','org.jhotdraw.draw.Tool.addToolListener(org.jhotdraw.draw.ToolListener)','262','org.jhotdraw.draw.Tool','/**\r\n * Adds a listener for this tool.\r\n */\r\nvoid addToolListener(ToolListener l);'),(2849,'deactivate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.Tool.deactivate(org.jhotdraw.draw.DrawingEditor)','262','org.jhotdraw.draw.Tool','/**\r\n * Deactivates the tool. This method is called whenever the user\r\n * switches to another tool.\r\n */\r\npublic void deactivate(DrawingEditor editor);'),(2850,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.Tool.draw(java.awt.Graphics2D)','262','org.jhotdraw.draw.Tool','/**\r\n * Draws the tool.\r\n */\r\nvoid draw(Graphics2D g);'),(2851,'editCopy()','org.jhotdraw.draw.Tool.editCopy()','262','org.jhotdraw.draw.Tool','/**\r\n * Copies the selection into the clipboard.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editCopy();'),(2852,'editCut()','org.jhotdraw.draw.Tool.editCut()','262','org.jhotdraw.draw.Tool','/**\r\n * Cuts the selection into the clipboard.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editCut();'),(2853,'editDelete()','org.jhotdraw.draw.Tool.editDelete()','262','org.jhotdraw.draw.Tool','/**\r\n * Deletes the selection.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editDelete();'),(2854,'editDuplicate()','org.jhotdraw.draw.Tool.editDuplicate()','262','org.jhotdraw.draw.Tool','/**\r\n * Duplicates the selection.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editDuplicate();'),(2855,'editPaste()','org.jhotdraw.draw.Tool.editPaste()','262','org.jhotdraw.draw.Tool','/**\r\n * Pastes the contents of the clipboard.\r\n * Depending on the tool, this could be selected figures, selected points\r\n * or selected text.\r\n */\r\npublic void editPaste();'),(2856,'getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)','org.jhotdraw.draw.Tool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)','262','org.jhotdraw.draw.Tool','/**\r\n * Returns the tooltip text for a mouse event on a drawing view.\r\n *\r\n * @param view\r\n * 		A drawing view.\r\n * @param evt\r\n * 		A mouse event.\r\n * @return A tooltip text or null.\r\n */\r\npublic String getToolTipText(DrawingView view, MouseEvent evt);'),(2857,'removeToolListener(org.jhotdraw.draw.ToolListener)','org.jhotdraw.draw.Tool.removeToolListener(org.jhotdraw.draw.ToolListener)','262','org.jhotdraw.draw.Tool','/**\r\n * Removes a listener for this tool.\r\n */\r\nvoid removeToolListener(ToolListener l);'),(2858,'supportsHandleInteraction()','org.jhotdraw.draw.Tool.supportsHandleInteraction()','262','org.jhotdraw.draw.Tool','/**\r\n * Returns true, if this tool lets the user interact with handles.\r\n * <p>\r\n * Handles may draw differently, if interaction is not possible.\r\n *\r\n * @return True, if this tool supports interaction with the handles.\r\n */\r\npublic boolean supportsHandleInteraction();'),(2859,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingView,java.awt.Rectangle)','org.jhotdraw.draw.ToolEvent.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingView,java.awt.Rectangle)','263','org.jhotdraw.draw.ToolEvent','/**\r\n * Creates a new instance.\r\n */\r\npublic ToolEvent(Tool src, DrawingView view, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.view = view;\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(2860,'getInvalidatedArea()','org.jhotdraw.draw.ToolEvent.getInvalidatedArea()','263','org.jhotdraw.draw.ToolEvent','/**\r\n * Gets the bounds of the invalidated area on the drawing view.\r\n */\r\npublic Rectangle getInvalidatedArea() {\r\n    return invalidatedArea;\r\n}'),(2861,'getTool()','org.jhotdraw.draw.ToolEvent.getTool()','263','org.jhotdraw.draw.ToolEvent','/**\r\n * Gets the tool which is the source of the event.\r\n */\r\npublic Tool getTool() {\r\n    return ((Tool) (getSource()));\r\n}'),(2862,'getView()','org.jhotdraw.draw.ToolEvent.getView()','263','org.jhotdraw.draw.ToolEvent','/**\r\n * Gets the drawing view of the tool.\r\n */\r\npublic DrawingView getView() {\r\n    return view;\r\n}'),(2863,'areaInvalidated(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.ToolListener.areaInvalidated(org.jhotdraw.draw.ToolEvent)','264','org.jhotdraw.draw.ToolListener','/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(ToolEvent e);'),(2864,'toolDone(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.ToolListener.toolDone(org.jhotdraw.draw.ToolEvent)','264','org.jhotdraw.draw.ToolListener','/**\r\n * Informs the listener that a tool has done its interaction.\r\n * This method can be used to switch back to the default tool.\r\n */\r\nvoid toolDone(ToolEvent event);'),(2865,'toolStarted(org.jhotdraw.draw.ToolEvent)','org.jhotdraw.draw.ToolListener.toolStarted(org.jhotdraw.draw.ToolEvent)','264','org.jhotdraw.draw.ToolListener','/**\r\n * Informs the listener that a tool has starteds interacting with a\r\n * specific drawing view.\r\n */\r\nvoid toolStarted(ToolEvent event);'),(2866,'-init-(org.jhotdraw.draw.Figure,java.awt.geom.AffineTransform)','org.jhotdraw.draw.TransformEdit.-init-(org.jhotdraw.draw.Figure,java.awt.geom.AffineTransform)','265','org.jhotdraw.draw.TransformEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic TransformEdit(Figure figure, AffineTransform tx) {\r\n    figures = new LinkedList<Figure>();\r\n    ((LinkedList<Figure>) (figures)).add(figure);\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n}'),(2867,'-init-(java.util.Collection,java.awt.geom.AffineTransform)','org.jhotdraw.draw.TransformEdit.-init-(java.util.Collection,java.awt.geom.AffineTransform)','265','org.jhotdraw.draw.TransformEdit','public TransformEdit(Collection<Figure> figures, AffineTransform tx) {\r\n    this.figures = figures;\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n}'),(2868,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.TransformEdit.addEdit(javax.swing.undo.UndoableEdit)','265','org.jhotdraw.draw.TransformEdit','public boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof TransformEdit) {\r\n        TransformEdit that = ((TransformEdit) (anEdit));\r\n        if ((that.figures) == (this.figures)) {\r\n            this.tx.concatenate(that.tx);\r\n            that.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2869,'getPresentationName()','org.jhotdraw.draw.TransformEdit.getPresentationName()','265','org.jhotdraw.draw.TransformEdit','public String getPresentationName() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n    return labels.getString(\"edit.transform.text\");\r\n}'),(2870,'redo()','org.jhotdraw.draw.TransformEdit.redo()','265','org.jhotdraw.draw.TransformEdit','public void redo() throws CannotRedoException {\r\n    super.redo();\r\n    for (Figure f : figures) {\r\n        f.willChange();\r\n        f.transform(tx);\r\n        f.changed();\r\n    }\r\n}'),(2871,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.TransformEdit.replaceEdit(javax.swing.undo.UndoableEdit)','265','org.jhotdraw.draw.TransformEdit','public boolean replaceEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof TransformEdit) {\r\n        TransformEdit that = ((TransformEdit) (anEdit));\r\n        if ((that.figures) == (this.figures)) {\r\n            this.tx.preConcatenate(that.tx);\r\n            that.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(2872,'toString()','org.jhotdraw.draw.TransformEdit.toString()','265','org.jhotdraw.draw.TransformEdit','public String toString() {\r\n    return ((((getClass().getName()) + @) + (hashCode())) + \" tx:\") + (tx);\r\n}'),(2873,'undo()','org.jhotdraw.draw.TransformEdit.undo()','265','org.jhotdraw.draw.TransformEdit','public void undo() throws CannotUndoException {\r\n    super.undo();\r\n    try {\r\n        AffineTransform inverse = tx.createInverse();\r\n        for (Figure f : figures) {\r\n            f.willChange();\r\n            f.transform(inverse);\r\n            f.changed();\r\n        }\r\n    } catch (NoninvertibleTransformException e) {\r\n        e.printStackTrace();\r\n    }\r\n}'),(2874,'-init-()','org.jhotdraw.draw.TransformHandleKit.-init-()','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Creates a new instance.\r\n */\r\npublic TransformHandleKit() {\r\n}'),(2875,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.TransformHandleKit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','275','org.jhotdraw.draw.TransformHandleKit','TransformHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(2876,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.-init-(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast());\r\n}'),(2877,'addCornerTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.TransformHandleKit.addCornerTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addCornerTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(TransformHandleKit.southEast(f));\r\n    handles.add(TransformHandleKit.southWest(f));\r\n    handles.add(TransformHandleKit.northEast(f));\r\n    handles.add(TransformHandleKit.northWest(f));\r\n}'),(2878,'addEdgeTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.TransformHandleKit.addEdgeTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addEdgeTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(TransformHandleKit.south(f));\r\n    handles.add(TransformHandleKit.north(f));\r\n    handles.add(TransformHandleKit.east(f));\r\n    handles.add(TransformHandleKit.west(f));\r\n}'),(2879,'addGroupHoverHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.TransformHandleKit.addGroupHoverHandles(org.jhotdraw.draw.Figure,java.util.Collection)','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addGroupHoverHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_HOVER, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_HOVER, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_HOVER, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_HOVER, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_DISABLED));\r\n}'),(2880,'addGroupTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.TransformHandleKit.addGroupTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addGroupTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_DISABLED));\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n    handles.add(new RotateHandle(f));\r\n}'),(2881,'addScaleMoveTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.TransformHandleKit.addScaleMoveTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Adds handles for scaling and moving a Figure.\r\n */\r\npublic static void addScaleMoveTransformHandles(Figure f, Collection<Handle> handles) {\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n}'),(2882,'addTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','org.jhotdraw.draw.TransformHandleKit.addTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)','275','org.jhotdraw.draw.TransformHandleKit','/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, true, false));\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n    handles.add(new RotateHandle(f));\r\n}'),(2883,'east(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.east(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle east(Figure owner) {\r\n    return new TransformHandleKit.EastHandle(owner);\r\n}'),(2884,'north(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.north(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle north(Figure owner) {\r\n    return new TransformHandleKit.NorthHandle(owner);\r\n}'),(2885,'northEast(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.northEast(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle northEast(Figure owner) {\r\n    return new TransformHandleKit.NorthEastHandle(owner);\r\n}'),(2886,'northWest(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.northWest(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle northWest(Figure owner) {\r\n    return new TransformHandleKit.NorthWestHandle(owner);\r\n}'),(2887,'south(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.south(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle south(Figure owner) {\r\n    return new TransformHandleKit.SouthHandle(owner);\r\n}'),(2888,'southEast(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.southEast(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle southEast(Figure owner) {\r\n    return new TransformHandleKit.SouthEastHandle(owner);\r\n}'),(2889,'southWest(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.southWest(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle southWest(Figure owner) {\r\n    return new TransformHandleKit.SouthWestHandle(owner);\r\n}'),(2890,'west(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit.west(org.jhotdraw.draw.Figure)','275','org.jhotdraw.draw.TransformHandleKit','public static Handle west(Figure owner) {\r\n    return new TransformHandleKit.WestHandle(owner);\r\n}'),(2891,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$EastHandle.-init-(org.jhotdraw.draw.Figure)','266','org.jhotdraw.draw.TransformHandleKit$EastHandle','EastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.east());\r\n}'),(2892,'getCursor()','org.jhotdraw.draw.TransformHandleKit$EastHandle.getCursor()','266','org.jhotdraw.draw.TransformHandleKit$EastHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR);\r\n}'),(2893,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$EastHandle.keyPressed(java.awt.event.KeyEvent)','266','org.jhotdraw.draw.TransformHandleKit$EastHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((r.width) > 1) {\r\n                transform(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) - 1), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            transform(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) + 1), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2894,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$EastHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','266','org.jhotdraw.draw.TransformHandleKit$EastHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(r.x, r.y), new Point2D.Double(Math.max(((r.x) + 1), p.x), ((r.y) + (r.height))));\r\n}'),(2895,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle.-init-(org.jhotdraw.draw.Figure)','267','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle','NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast());\r\n}'),(2896,'getCursor()','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle.getCursor()','267','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR);\r\n}'),(2897,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle.keyPressed(java.awt.event.KeyEvent)','267','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            transform(new Point2D.Double(r.x, ((r.y) - 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            if ((r.height) > 1) {\r\n                transform(new Point2D.Double(r.x, ((r.y) + 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((r.width) > 1) {\r\n                transform(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) - 1), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            transform(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) + 1), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2898,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','267','org.jhotdraw.draw.TransformHandleKit$NorthEastHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(r.x, Math.min((((r.y) + (r.height)) - 1), p.y)), new Point2D.Double(Math.max(r.x, p.x), ((r.y) + (r.height))));\r\n}'),(2899,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$NorthHandle.-init-(org.jhotdraw.draw.Figure)','268','org.jhotdraw.draw.TransformHandleKit$NorthHandle','NorthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.north());\r\n}'),(2900,'getCursor()','org.jhotdraw.draw.TransformHandleKit$NorthHandle.getCursor()','268','org.jhotdraw.draw.TransformHandleKit$NorthHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR);\r\n}'),(2901,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$NorthHandle.keyPressed(java.awt.event.KeyEvent)','268','org.jhotdraw.draw.TransformHandleKit$NorthHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            transform(new Point2D.Double(r.x, ((r.y) - 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            if ((r.height) > 1) {\r\n                transform(new Point2D.Double(r.x, ((r.y) + 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2902,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$NorthHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','268','org.jhotdraw.draw.TransformHandleKit$NorthHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(r.x, Math.min((((r.y) + (r.height)) - 1), p.y)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n}'),(2903,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle.-init-(org.jhotdraw.draw.Figure)','269','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle','NorthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northWest());\r\n}'),(2904,'getCursor()','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle.getCursor()','269','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR);\r\n}'),(2905,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle.keyPressed(java.awt.event.KeyEvent)','269','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            transform(new Point2D.Double(r.x, ((r.y) - 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            if ((r.height) > 1) {\r\n                transform(new Point2D.Double(r.x, ((r.y) + 1)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            transform(new Point2D.Double(((r.x) - 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if ((r.width) > 1) {\r\n                transform(new Point2D.Double(((r.x) + 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2906,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','269','org.jhotdraw.draw.TransformHandleKit$NorthWestHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(Math.min((((r.x) + (r.width)) - 1), p.x), Math.min((((r.y) + (r.height)) - 1), p.y)), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n}'),(2907,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle.-init-(org.jhotdraw.draw.Figure)','270','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle','SouthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southEast());\r\n}'),(2908,'getCursor()','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle.getCursor()','270','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR);\r\n}'),(2909,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle.keyPressed(java.awt.event.KeyEvent)','270','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((r.height) > 1) {\r\n                transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) - 1)));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) + 1)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((r.width) > 1) {\r\n                transform(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) - 1), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            transform(new Point2D.Double(r.x, r.y), new Point2D.Double((((r.x) + (r.width)) + 1), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2910,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','270','org.jhotdraw.draw.TransformHandleKit$SouthEastHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(r.x, r.y), new Point2D.Double(Math.max(((r.x) + 1), p.x), Math.max(((r.y) + 1), p.y)));\r\n}'),(2911,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$SouthHandle.-init-(org.jhotdraw.draw.Figure)','271','org.jhotdraw.draw.TransformHandleKit$SouthHandle','SouthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.south());\r\n}'),(2912,'getCursor()','org.jhotdraw.draw.TransformHandleKit$SouthHandle.getCursor()','271','org.jhotdraw.draw.TransformHandleKit$SouthHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR);\r\n}'),(2913,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$SouthHandle.keyPressed(java.awt.event.KeyEvent)','271','org.jhotdraw.draw.TransformHandleKit$SouthHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((r.height) > 1) {\r\n                transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) - 1)));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) + 1)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2914,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$SouthHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','271','org.jhotdraw.draw.TransformHandleKit$SouthHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), Math.max(((r.y) + 1), p.y)));\r\n}'),(2915,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle.-init-(org.jhotdraw.draw.Figure)','272','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle','SouthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southWest());\r\n}'),(2916,'getCursor()','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle.getCursor()','272','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR);\r\n}'),(2917,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle.keyPressed(java.awt.event.KeyEvent)','272','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((r.height) > 1) {\r\n                transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) - 1)));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            transform(new Point2D.Double(r.x, r.y), new Point2D.Double(((r.x) + (r.width)), (((r.y) + (r.height)) + 1)));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            transform(new Point2D.Double(((r.x) - 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if ((r.width) > 1) {\r\n                transform(new Point2D.Double(((r.x) + 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2918,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','272','org.jhotdraw.draw.TransformHandleKit$SouthWestHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(Math.min((((r.x) + (r.width)) - 1), p.x), r.y), new Point2D.Double(((r.x) + (r.width)), Math.max(((r.y) + 1), p.y)));\r\n}'),(2919,'-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','TransformHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(2920,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.draw(java.awt.Graphics2D)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        // drawArc(g);\r\n        drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_STROKE_COLOR))));\r\n    } else {\r\n        drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_FILL_COLOR_DISABLED))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_STROKE_COLOR_DISABLED))));\r\n    }\r\n}'),(2921,'drawArc(java.awt.Graphics2D)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.drawArc(java.awt.Graphics2D)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','protected void drawArc(Graphics2D g) {\r\n    Point p = getLocation();\r\n    g.drawArc(p.x, p.y, 6, 6, 0, 180);\r\n}'),(2922,'getToolTipText(java.awt.Point)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.getToolTipText(java.awt.Point)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','public String getToolTipText(Point p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    return labels.getString(\"handle.transform.toolTipText\");\r\n}'),(2923,'getTransformedBounds()','org.jhotdraw.draw.TransformHandleKit$TransformHandle.getTransformedBounds()','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','protected Rectangle2D.Double getTransformedBounds() {\r\n    Figure owner = getOwner();\r\n    Rectangle2D.Double bounds = owner.getBounds();\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        Rectangle2D r = AttributeKeys.TRANSFORM.get(owner).createTransformedShape(bounds).getBounds2D();\r\n        bounds.x = r.getX();\r\n        bounds.y = r.getY();\r\n        bounds.width = r.getWidth();\r\n        bounds.height = r.getHeight();\r\n    }\r\n    return bounds;\r\n}'),(2924,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.trackEnd(java.awt.Point,java.awt.Point,int)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geometry, getOwner().getTransformRestoreData()));\r\n}'),(2925,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.trackStart(java.awt.Point,int)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    geometry = getOwner().getTransformRestoreData();\r\n    Point location = getLocation();\r\n    dx = (-(anchor.x)) + (location.x);\r\n    dy = (-(anchor.y)) + (location.y);\r\n}'),(2926,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.trackStep(java.awt.Point,java.awt.Point,int)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    Point2D.Double p = view.viewToDrawing(new Point(((lead.x) + (dx)), ((lead.y) + (dy))));\r\n    view.getConstrainer().constrainPoint(p);\r\n    trackStepNormalized(p);\r\n}'),(2927,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','protected void trackStepNormalized(Point2D.Double p) {\r\n}'),(2928,'transform(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$TransformHandle.transform(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','273','org.jhotdraw.draw.TransformHandleKit$TransformHandle','protected void transform(Point2D.Double anchor, Point2D.Double lead) {\r\n    Figure f = getOwner();\r\n    f.willChange();\r\n    Rectangle2D.Double oldBounds = getTransformedBounds();\r\n    Rectangle2D.Double newBounds = new Rectangle2D.Double(Math.min(anchor.x, lead.x), Math.min(anchor.y, lead.y), Math.abs(((anchor.x) - (lead.x))), Math.abs(((anchor.y) - (lead.y))));\r\n    double sx = (newBounds.width) / (oldBounds.width);\r\n    double sy = (newBounds.height) / (oldBounds.height);\r\n    AffineTransform tx = new AffineTransform();\r\n    tx.translate((-(oldBounds.x)), (-(oldBounds.y)));\r\n    if (((((!(Double.isNaN(sx))) && (!(Double.isNaN(sy)))) && ((sx != 1.0) || (sy != 1.0))) && (!(sx < 1.0E-4))) && (!(sy < 1.0E-4))) {\r\n        f.transform(tx);\r\n        tx.setToIdentity();\r\n        tx.scale(sx, sy);\r\n        f.transform(tx);\r\n        tx.setToIdentity();\r\n    }\r\n    tx.translate(newBounds.x, newBounds.y);\r\n    f.transform(tx);\r\n    f.changed();\r\n}'),(2929,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.TransformHandleKit$WestHandle.-init-(org.jhotdraw.draw.Figure)','274','org.jhotdraw.draw.TransformHandleKit$WestHandle','WestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.west());\r\n}'),(2930,'getCursor()','org.jhotdraw.draw.TransformHandleKit$WestHandle.getCursor()','274','org.jhotdraw.draw.TransformHandleKit$WestHandle','@Override\r\npublic Cursor getCursor() {\r\n    return Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR);\r\n}'),(2931,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.draw.TransformHandleKit$WestHandle.keyPressed(java.awt.event.KeyEvent)','274','org.jhotdraw.draw.TransformHandleKit$WestHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    Object geom = getOwner().getTransformRestoreData();\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            transform(new Point2D.Double(((r.x) - 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if ((r.width) > 1) {\r\n                transform(new Point2D.Double(((r.x) + 1), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n            }\r\n            evt.consume();\r\n            break;\r\n    }\r\n    fireUndoableEditHappened(new GeometryEdit(getOwner(), geom, getOwner().getTransformRestoreData()));\r\n}'),(2932,'trackStepNormalized(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TransformHandleKit$WestHandle.trackStepNormalized(java.awt.geom.Point2D$Double)','274','org.jhotdraw.draw.TransformHandleKit$WestHandle','@Override\r\nprotected void trackStepNormalized(Point2D.Double p) {\r\n    Rectangle2D.Double r = getTransformedBounds();\r\n    transform(new Point2D.Double(Math.min((((r.x) + (r.width)) - 1), p.x), r.y), new Point2D.Double(((r.x) + (r.width)), ((r.y) + (r.height))));\r\n}'),(2933,'-init-()','org.jhotdraw.draw.TranslationDirection.-init-()','276','org.jhotdraw.draw.TranslationDirection','TranslationDirection() {\r\n}'),(2934,'getDirection(java.awt.Point,java.awt.Point)','org.jhotdraw.draw.TranslationDirection.getDirection(java.awt.Point,java.awt.Point)','276','org.jhotdraw.draw.TranslationDirection','/**\r\n * Returns the direction from the provided start point to the end point.\r\n * Returns null, if both points are at the same location.\r\n */\r\npublic static TranslationDirection getDirection(Point startPoint, Point endPoint) {\r\n    int dx = (endPoint.x) - (startPoint.x);\r\n    int dy = (endPoint.y) - (startPoint.y);\r\n    if (dx == 0) {\r\n        if (dy == 0) {\r\n            return null;\r\n        } else\r\n            if (dy > 0) {\r\n                return TranslationDirection.SOUTH;\r\n            } else {\r\n                return TranslationDirection.NORTH;\r\n            }\r\n\r\n    } else\r\n        if (dx > 0) {\r\n            if (dy == 0) {\r\n                return TranslationDirection.EAST;\r\n            } else\r\n                if (dy > 0) {\r\n                    return TranslationDirection.SOUTH_EAST;\r\n                } else {\r\n                    return TranslationDirection.NORTH_EAST;\r\n                }\r\n\r\n        } else {\r\n            if (dy == 0) {\r\n                return TranslationDirection.WEST;\r\n            } else\r\n                if (dy > 0) {\r\n                    return TranslationDirection.SOUTH_WEST;\r\n                } else {\r\n                    return TranslationDirection.NORTH_WEST;\r\n                }\r\n\r\n        }\r\n\r\n}'),(2935,'getDirection(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TranslationDirection.getDirection(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','276','org.jhotdraw.draw.TranslationDirection','/**\r\n * Returns the direction from the provided start point to the end point.\r\n * Returns null, if both points are at the same location.\r\n */\r\npublic static TranslationDirection getDirection(Point2D.Double startPoint, Point2D.Double endPoint) {\r\n    double dx = (endPoint.x) - (startPoint.x);\r\n    double dy = (endPoint.y) - (startPoint.y);\r\n    if (dx == 0) {\r\n        if (dy == 0) {\r\n            return null;\r\n        } else\r\n            if (dy > 0) {\r\n                return TranslationDirection.SOUTH;\r\n            } else {\r\n                return TranslationDirection.NORTH;\r\n            }\r\n\r\n    } else\r\n        if (dx > 0) {\r\n            if (dy == 0) {\r\n                return TranslationDirection.EAST;\r\n            } else\r\n                if (dy > 0) {\r\n                    return TranslationDirection.SOUTH_EAST;\r\n                } else {\r\n                    return TranslationDirection.NORTH_EAST;\r\n                }\r\n\r\n        } else {\r\n            if (dy == 0) {\r\n                return TranslationDirection.WEST;\r\n            } else\r\n                if (dy > 0) {\r\n                    return TranslationDirection.SOUTH_WEST;\r\n                } else {\r\n                    return TranslationDirection.NORTH_WEST;\r\n                }\r\n\r\n        }\r\n\r\n}'),(2936,'-init-()','org.jhotdraw.draw.TriangleFigure.-init-()','277','org.jhotdraw.draw.TriangleFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic TriangleFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(2937,'-init-(org.jhotdraw.draw.AttributeKeys$Orientation)','org.jhotdraw.draw.TriangleFigure.-init-(org.jhotdraw.draw.AttributeKeys$Orientation)','277','org.jhotdraw.draw.TriangleFigure','public TriangleFigure(AttributeKeys.Orientation direction) {\r\n    this(0, 0, 0, 0, direction);\r\n}'),(2938,'-init-(double,double,double,double)','org.jhotdraw.draw.TriangleFigure.-init-(double,double,double,double)','277','org.jhotdraw.draw.TriangleFigure','public TriangleFigure(double x, double y, double width, double height) {\r\n    this(x, y, width, height, AttributeKeys.Orientation.NORTH);\r\n}'),(2939,'-init-(double,double,double,double,org.jhotdraw.draw.AttributeKeys$Orientation)','org.jhotdraw.draw.TriangleFigure.-init-(double,double,double,double,org.jhotdraw.draw.AttributeKeys$Orientation)','277','org.jhotdraw.draw.TriangleFigure','public TriangleFigure(double x, double y, double width, double height, AttributeKeys.Orientation direction) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n    /* setFillColor(Color.white);\n    setStrokeColor(Color.black);\n     */\r\n    AttributeKeys.ORIENTATION.basicSet(this, direction);\r\n}'),(2940,'chop(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TriangleFigure.chop(java.awt.geom.Point2D$Double)','277','org.jhotdraw.draw.TriangleFigure','public Point2D.Double chop(Point2D.Double p) {\r\n    Shape triangle = getBezierPath();\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    if (grow != 0.0) {\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        triangle = gs.createStrokedShape(triangle);\r\n    }\r\n    return Geom.chop(triangle, p);\r\n}'),(2941,'clone()','org.jhotdraw.draw.TriangleFigure.clone()','277','org.jhotdraw.draw.TriangleFigure','public TriangleFigure clone() {\r\n    TriangleFigure that = ((TriangleFigure) (super.clone()));\r\n    that.rectangle = ((Rectangle2D.Double) (this.rectangle.clone()));\r\n    return that;\r\n}'),(2942,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TriangleFigure.contains(java.awt.geom.Point2D$Double)','277','org.jhotdraw.draw.TriangleFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    Shape triangle = getBezierPath();\r\n    double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n    if (grow != 0.0) {\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        triangle = gs.createStrokedShape(triangle);\r\n    }\r\n    return triangle.contains(p);\r\n}'),(2943,'createHandles(int)','org.jhotdraw.draw.TriangleFigure.createHandles(int)','277','org.jhotdraw.draw.TriangleFigure','public Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = ((LinkedList<Handle>) (super.createHandles(detailLevel)));\r\n    if (detailLevel == 0) {\r\n        handles.add(new TriangleRotationHandler(this));\r\n    }\r\n    return handles;\r\n}'),(2944,'drawFill(java.awt.Graphics2D)','org.jhotdraw.draw.TriangleFigure.drawFill(java.awt.Graphics2D)','277','org.jhotdraw.draw.TriangleFigure','protected void drawFill(Graphics2D g) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    Shape triangle = getBezierPath();\r\n    double grow = AttributeKeys.getPerpendicularFillGrowth(this);\r\n    if (grow != 0.0) {\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        triangle = gs.createStrokedShape(triangle);\r\n    }\r\n    g.fill(triangle);\r\n}'),(2945,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.draw.TriangleFigure.drawStroke(java.awt.Graphics2D)','277','org.jhotdraw.draw.TriangleFigure','protected void drawStroke(Graphics2D g) {\r\n    Shape triangle = getBezierPath();\r\n    double grow = AttributeKeys.getPerpendicularDrawGrowth(this);\r\n    if (grow != 0.0) {\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        triangle = gs.createStrokedShape(triangle);\r\n    }\r\n    g.draw(triangle);\r\n}'),(2946,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.draw.TriangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','277','org.jhotdraw.draw.TriangleFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopTriangleConnector(this);\r\n}'),(2947,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.draw.TriangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','277','org.jhotdraw.draw.TriangleFigure','// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopTriangleConnector(this);\r\n}'),(2948,'getBezierPath()','org.jhotdraw.draw.TriangleFigure.getBezierPath()','277','org.jhotdraw.draw.TriangleFigure','public BezierPath getBezierPath() {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (rectangle.clone()));\r\n    BezierPath triangle = new BezierPath();\r\n    switch (AttributeKeys.ORIENTATION.get(this)) {\r\n        case NORTH :\r\n        default :\r\n            triangle.moveTo(((float) ((r.x) + ((r.width) / 2))), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + (r.height))));\r\n            triangle.lineTo(((float) (r.x)), ((float) ((r.y) + (r.height))));\r\n            break;\r\n        case NORTH_EAST :\r\n            triangle.moveTo(((float) (r.x)), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + (r.height))));\r\n            break;\r\n        case EAST :\r\n            triangle.moveTo(((float) (r.x)), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + ((r.height) / 2.0))));\r\n            triangle.lineTo(((float) (r.x)), ((float) ((r.y) + (r.height))));\r\n            break;\r\n        case SOUTH_EAST :\r\n            triangle.moveTo(((float) ((r.x) + (r.width))), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + (r.height))));\r\n            triangle.lineTo(((float) (r.x)), ((float) ((r.y) + (r.height))));\r\n            break;\r\n        case SOUTH :\r\n            triangle.moveTo(((float) ((r.x) + ((r.width) / 2))), ((float) ((r.y) + (r.height))));\r\n            triangle.lineTo(((float) (r.x)), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) (r.y)));\r\n            break;\r\n        case SOUTH_WEST :\r\n            triangle.moveTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + (r.height))));\r\n            triangle.lineTo(((float) (r.x)), ((float) ((r.y) + (r.height))));\r\n            triangle.lineTo(((float) (r.x)), ((float) (r.y)));\r\n            break;\r\n        case WEST :\r\n            triangle.moveTo(((float) (r.x)), ((float) ((r.y) + ((r.height) / 2))));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) ((r.y) + (r.height))));\r\n            break;\r\n        case NORTH_WEST :\r\n            triangle.moveTo(((float) (r.x)), ((float) ((r.y) + (r.height))));\r\n            triangle.lineTo(((float) (r.x)), ((float) (r.y)));\r\n            triangle.lineTo(((float) ((r.x) + (r.width))), ((float) (r.y)));\r\n            break;\r\n    }\r\n    triangle.setClosed(true);\r\n    return triangle;\r\n}'),(2949,'getBounds()','org.jhotdraw.draw.TriangleFigure.getBounds()','277','org.jhotdraw.draw.TriangleFigure','/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\n/* public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\nreturn new ChopTriangleConnector(this);\n}\n\npublic Connector findCompatibleConnector(Connector c, boolean isStart) {\nreturn new ChopTriangleConnector(this);\n}\n */\r\n// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\npublic Rectangle2D.Double getBounds() {\r\n    Rectangle2D.Double bounds = ((Rectangle2D.Double) (rectangle.clone()));\r\n    return bounds;\r\n}'),(2950,'getDrawingArea()','org.jhotdraw.draw.TriangleFigure.getDrawingArea()','277','org.jhotdraw.draw.TriangleFigure','public Rectangle2D.Double getDrawingArea() {\r\n    double totalStrokeWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n    double width = 0.0;\r\n    if ((AttributeKeys.STROKE_COLOR.get(this)) != null) {\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(this)) {\r\n            case INSIDE :\r\n                width = 0.0;\r\n                break;\r\n            case OUTSIDE :\r\n                if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n                    width = totalStrokeWidth * (AttributeKeys.STROKE_MITER_LIMIT.get(this));\r\n                } else {\r\n                    width = totalStrokeWidth;\r\n                }\r\n                break;\r\n            case CENTER :\r\n                if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n                    width = (totalStrokeWidth / 2.0) * (AttributeKeys.STROKE_MITER_LIMIT.get(this));\r\n                } else {\r\n                    width = totalStrokeWidth / 2.0;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    width++;\r\n    Rectangle2D.Double r = getBounds();\r\n    Geom.grow(r, width, width);\r\n    return r;\r\n}'),(2951,'getTransformRestoreData()','org.jhotdraw.draw.TriangleFigure.getTransformRestoreData()','277','org.jhotdraw.draw.TriangleFigure','public Object getTransformRestoreData() {\r\n    return rectangle.clone();\r\n}'),(2952,'restoreTransformTo(java.lang.Object)','org.jhotdraw.draw.TriangleFigure.restoreTransformTo(java.lang.Object)','277','org.jhotdraw.draw.TriangleFigure','public void restoreTransformTo(Object geometry) {\r\n    Rectangle2D.Double r = ((Rectangle2D.Double) (geometry));\r\n    rectangle.x = r.x;\r\n    rectangle.y = r.y;\r\n    rectangle.width = r.width;\r\n    rectangle.height = r.height;\r\n}'),(2953,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.TriangleFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','277','org.jhotdraw.draw.TriangleFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    rectangle.x = Math.min(anchor.x, lead.x);\r\n    rectangle.y = Math.min(anchor.y, lead.y);\r\n    rectangle.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    rectangle.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(2954,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.draw.TriangleFigure.transform(java.awt.geom.AffineTransform)','277','org.jhotdraw.draw.TriangleFigure','/**\r\n * Moves the Figure to a new location.\r\n *\r\n * @param tx\r\n * 		the transformation matrix.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double anchor = getStartPoint();\r\n    Point2D.Double lead = getEndPoint();\r\n    setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n}'),(2955,'-init-(org.jhotdraw.draw.TriangleFigure)','org.jhotdraw.draw.TriangleRotationHandler.-init-(org.jhotdraw.draw.TriangleFigure)','278','org.jhotdraw.draw.TriangleRotationHandler','/**\r\n * Creates a new instance.\r\n */\r\npublic TriangleRotationHandler(TriangleFigure owner) {\r\n    super(owner);\r\n}'),(2956,'basicGetBounds()','org.jhotdraw.draw.TriangleRotationHandler.basicGetBounds()','278','org.jhotdraw.draw.TriangleRotationHandler','protected Rectangle basicGetBounds() {\r\n    Point p = view.drawingToView(getLocation());\r\n    Rectangle r = new Rectangle(p);\r\n    int h = getHandlesize();\r\n    r.x -= h / 2;\r\n    r.y -= h / 2;\r\n    r.width = r.height = h;\r\n    return r;\r\n}'),(2957,'draw(java.awt.Graphics2D)','org.jhotdraw.draw.TriangleRotationHandler.draw(java.awt.Graphics2D)','278','org.jhotdraw.draw.TriangleRotationHandler','@Override\r\npublic void draw(Graphics2D g) {\r\n    drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR))));\r\n}'),(2958,'getLocation()','org.jhotdraw.draw.TriangleRotationHandler.getLocation()','278','org.jhotdraw.draw.TriangleRotationHandler','private Point2D.Double getLocation() {\r\n    Rectangle2D.Double r = getOwner().getBounds();\r\n    Point2D.Double p;\r\n    double offset = getHandlesize();\r\n    switch (AttributeKeys.ORIENTATION.get(getOwner())) {\r\n        case NORTH :\r\n        default :\r\n            p = new Point2D.Double(((r.x) + ((r.width) / 2.0)), ((r.y) + offset));\r\n            break;\r\n        case NORTH_EAST :\r\n            p = new Point2D.Double((((r.x) + (r.width)) - offset), ((r.y) + offset));\r\n            break;\r\n        case EAST :\r\n            p = new Point2D.Double((((r.x) + (r.width)) - offset), ((r.y) + ((r.height) / 2.0)));\r\n            break;\r\n        case SOUTH_EAST :\r\n            p = new Point2D.Double((((r.x) + (r.width)) - offset), (((r.y) + (r.height)) - offset));\r\n            break;\r\n        case SOUTH :\r\n            p = new Point2D.Double(((r.x) + ((r.width) / 2.0)), (((r.y) + (r.height)) - offset));\r\n            break;\r\n        case SOUTH_WEST :\r\n            p = new Point2D.Double(((r.x) + offset), (((r.y) + (r.height)) - offset));\r\n            break;\r\n        case WEST :\r\n            p = new Point2D.Double(((r.x) + offset), ((r.y) + ((r.height) / 2.0)));\r\n            break;\r\n        case NORTH_WEST :\r\n            p = new Point2D.Double(((r.x) + offset), ((r.y) + offset));\r\n            break;\r\n    }\r\n    return p;\r\n}'),(2959,'isCombinableWith(org.jhotdraw.draw.Handle)','org.jhotdraw.draw.TriangleRotationHandler.isCombinableWith(org.jhotdraw.draw.Handle)','278','org.jhotdraw.draw.TriangleRotationHandler','public boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}'),(2960,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.TriangleRotationHandler.trackEnd(java.awt.Point,java.awt.Point,int)','278','org.jhotdraw.draw.TriangleRotationHandler','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    if ((newValue) != (oldValue)) {\r\n        fireUndoableEditHappened(new AttributeChangeEdit<AttributeKeys.Orientation>(getOwner(), AttributeKeys.ORIENTATION, oldValue, newValue));\r\n    }\r\n}'),(2961,'trackStart(java.awt.Point,int)','org.jhotdraw.draw.TriangleRotationHandler.trackStart(java.awt.Point,int)','278','org.jhotdraw.draw.TriangleRotationHandler','public void trackStart(Point anchor, int modifiersEx) {\r\n    oldValue = AttributeKeys.ORIENTATION.get(getOwner());\r\n    centerBox = view.drawingToView(getOwner().getBounds());\r\n    centerBox.grow(((centerBox.width) / (-3)), ((centerBox.height) / (-3)));\r\n}'),(2962,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.draw.TriangleRotationHandler.trackStep(java.awt.Point,java.awt.Point,int)','278','org.jhotdraw.draw.TriangleRotationHandler','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    Rectangle leadRect = new Rectangle(lead);\r\n    switch (Geom.outcode(centerBox, leadRect)) {\r\n        case Geom.OUT_TOP :\r\n        default :\r\n            newValue = AttributeKeys.Orientation.NORTH;\r\n            break;\r\n        case (Geom.OUT_TOP) | (Geom.OUT_RIGHT) :\r\n            newValue = AttributeKeys.Orientation.NORTH_EAST;\r\n            break;\r\n        case Geom.OUT_RIGHT :\r\n            newValue = AttributeKeys.Orientation.EAST;\r\n            break;\r\n        case (Geom.OUT_BOTTOM) | (Geom.OUT_RIGHT) :\r\n            newValue = AttributeKeys.Orientation.SOUTH_EAST;\r\n            break;\r\n        case Geom.OUT_BOTTOM :\r\n            newValue = AttributeKeys.Orientation.SOUTH;\r\n            break;\r\n        case (Geom.OUT_BOTTOM) | (Geom.OUT_LEFT) :\r\n            newValue = AttributeKeys.Orientation.SOUTH_WEST;\r\n            break;\r\n        case Geom.OUT_LEFT :\r\n            newValue = AttributeKeys.Orientation.WEST;\r\n            break;\r\n        case (Geom.OUT_TOP) | (Geom.OUT_LEFT) :\r\n            newValue = AttributeKeys.Orientation.NORTH_WEST;\r\n            break;\r\n    }\r\n    // FIXME - Add undo redo support\r\n    AttributeKeys.ORIENTATION.set(getOwner(), newValue);\r\n    updateBounds();\r\n}'),(2963,'-init-()','org.jhotdraw.draw.VerticalLayouter.-init-()','279','org.jhotdraw.draw.VerticalLayouter','VerticalLayouter() {\r\n}'),(2964,'calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.VerticalLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','279','org.jhotdraw.draw.VerticalLayouter','public Rectangle2D.Double calculateLayout(CompositeFigure layoutable, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(layoutable);\r\n    if (layoutInsets == null) {\r\n        layoutInsets = new Insets2D.Double(0, 0, 0, 0);\r\n    }\r\n    Rectangle2D.Double layoutBounds = new Rectangle2D.Double(anchor.x, anchor.y, 0, 0);\r\n    for (Figure child : layoutable.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Dimension2DDouble preferredSize = child.getPreferredSize();\r\n            Insets2D.Double ins = getInsets(child);\r\n            layoutBounds.width = Math.max(layoutBounds.width, (((preferredSize.width) + (ins.left)) + (ins.right)));\r\n            layoutBounds.height += ((preferredSize.height) + (ins.top)) + (ins.bottom);\r\n        }\r\n    }\r\n    layoutBounds.width += (layoutInsets.left) + (layoutInsets.right);\r\n    layoutBounds.height += (layoutInsets.top) + (layoutInsets.bottom);\r\n    return layoutBounds;\r\n}'),(2965,'layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.draw.VerticalLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','279','org.jhotdraw.draw.VerticalLayouter','public Rectangle2D.Double layout(CompositeFigure layoutable, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(layoutable);\r\n    AttributeKeys.Alignment compositeAlignment = AttributeKeys.COMPOSITE_ALIGNMENT.get(layoutable);\r\n    if (layoutInsets == null) {\r\n        layoutInsets = new Insets2D.Double();\r\n    }\r\n    Rectangle2D.Double layoutBounds = calculateLayout(layoutable, anchor, lead);\r\n    double y = (layoutBounds.y) + (layoutInsets.top);\r\n    for (Figure child : layoutable.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Insets2D.Double insets = getInsets(child);\r\n            double height = child.getPreferredSize().height;\r\n            double width = child.getPreferredSize().width;\r\n            switch (compositeAlignment) {\r\n                case LEADING :\r\n                    child.setBounds(new Point2D.Double((((layoutBounds.x) + (layoutInsets.left)) + (insets.left)), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (+(layoutInsets.left))) + (insets.left)) + width), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case TRAILING :\r\n                    child.setBounds(new Point2D.Double((((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)) - width), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case CENTER :\r\n                    child.setBounds(new Point2D.Double(((layoutBounds.x) + (((layoutBounds.width) - width) / 2.0)), (y + (insets.top))), new Point2D.Double(((layoutBounds.x) + (((layoutBounds.width) + width) / 2.0)), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case BLOCK :\r\n                default :\r\n                    child.setBounds(new Point2D.Double((((layoutBounds.x) + (layoutInsets.left)) + (insets.left)), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)), ((y + (insets.top)) + height)));\r\n                    break;\r\n            }\r\n            y += (height + (insets.top)) + (insets.bottom);\r\n        }\r\n    }\r\n    return layoutBounds;\r\n}'),(2966,'-init-()','org.jhotdraw.draw.action.AbstractDrawingEditorAction.-init-()','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','1() {\r\n}'),(2967,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AbstractDrawingEditorAction.-init-(org.jhotdraw.draw.DrawingEditor)','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractDrawingEditorAction(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n        updateEnabledState();\r\n    }\r\n}'),(2968,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.action.AbstractDrawingEditorAction.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','protected void fireUndoableEditHappened(UndoableEdit edit) {\r\n    getDrawing().fireUndoableEditHappened(edit);\r\n}'),(2969,'getDrawing()','org.jhotdraw.draw.action.AbstractDrawingEditorAction.getDrawing()','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','protected Drawing getDrawing() {\r\n    return getView().getDrawing();\r\n}'),(2970,'getEditor()','org.jhotdraw.draw.action.AbstractDrawingEditorAction.getEditor()','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(2971,'getView()','org.jhotdraw.draw.action.AbstractDrawingEditorAction.getView()','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','protected DrawingView getView() {\r\n    return editor.getActiveView();\r\n}'),(2972,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AbstractDrawingEditorAction.setEditor(org.jhotdraw.draw.DrawingEditor)','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','public void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.removePropertyChangeListener(propertyChangeHandler);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n        updateEnabledState();\r\n    }\r\n}'),(2973,'updateEnabledState()','org.jhotdraw.draw.action.AbstractDrawingEditorAction.updateEnabledState()','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','protected void updateEnabledState() {\r\n    setEnabled((((editor) != null) && (editor.isEnabled())));\r\n}'),(2974,'updateViewState()','org.jhotdraw.draw.action.AbstractDrawingEditorAction.updateViewState()','280','org.jhotdraw.draw.action.AbstractDrawingEditorAction','protected void updateViewState() {\r\n}'),(2975,'-init-()','org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-()','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','1() {\r\n}'),(2976,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-(org.jhotdraw.draw.DrawingEditor)','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','/**\r\n * Creates a view action which acts on the current view of the editor.\r\n */\r\npublic AbstractDrawingViewAction(DrawingEditor editor) {\r\n    setEditor(editor);\r\n}'),(2977,'-init-(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-(org.jhotdraw.draw.DrawingView)','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','/**\r\n * Creates a view action which acts on the specified view.\r\n */\r\npublic AbstractDrawingViewAction(DrawingView view) {\r\n    this.view = view;\r\n}'),(2978,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.action.AbstractDrawingViewAction.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','protected void fireUndoableEditHappened(UndoableEdit edit) {\r\n    getDrawing().fireUndoableEditHappened(edit);\r\n}'),(2979,'getDrawing()','org.jhotdraw.draw.action.AbstractDrawingViewAction.getDrawing()','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','protected Drawing getDrawing() {\r\n    return getView().getDrawing();\r\n}'),(2980,'getEditor()','org.jhotdraw.draw.action.AbstractDrawingViewAction.getEditor()','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','protected DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(2981,'getView()','org.jhotdraw.draw.action.AbstractDrawingViewAction.getView()','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','protected DrawingView getView() {\r\n    return (view) != null ? view : (editor) != null ? editor.getActiveView() : null;\r\n}'),(2982,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AbstractDrawingViewAction.setEditor(org.jhotdraw.draw.DrawingEditor)','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','protected void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.removePropertyChangeListener(propertyChangeHandler);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n    }\r\n}'),(2983,'updateEnabledState()','org.jhotdraw.draw.action.AbstractDrawingViewAction.updateEnabledState()','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','public void updateEnabledState() {\r\n    if ((getView()) != null) {\r\n        setEnabled(getView().isEnabled());\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}'),(2984,'viewChanged()','org.jhotdraw.draw.action.AbstractDrawingViewAction.viewChanged()','281','org.jhotdraw.draw.action.AbstractDrawingViewAction','protected void viewChanged() {\r\n}'),(2985,'-init-()','org.jhotdraw.draw.action.AbstractSelectedAction.-init-()','283','org.jhotdraw.draw.action.AbstractSelectedAction','EventHandler() {\r\n}'),(2986,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AbstractSelectedAction.-init-(org.jhotdraw.draw.DrawingEditor)','283','org.jhotdraw.draw.action.AbstractSelectedAction','/**\r\n * Creates an action which acts on the selected figures on the current view\r\n * of the specified editor.\r\n */\r\npublic AbstractSelectedAction(DrawingEditor editor) {\r\n    setEditor(editor);\r\n    updateEnabledState();\r\n}'),(2987,'dispose()','org.jhotdraw.draw.action.AbstractSelectedAction.dispose()','283','org.jhotdraw.draw.action.AbstractSelectedAction','public void dispose() {\r\n    if ((this.editor) != null) {\r\n        this.editor.removePropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().removeFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    this.editor = null;\r\n}'),(2988,'fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','org.jhotdraw.draw.action.AbstractSelectedAction.fireUndoableEditHappened(javax.swing.undo.UndoableEdit)','283','org.jhotdraw.draw.action.AbstractSelectedAction','protected void fireUndoableEditHappened(UndoableEdit edit) {\r\n    getDrawing().fireUndoableEditHappened(edit);\r\n}'),(2989,'getDrawing()','org.jhotdraw.draw.action.AbstractSelectedAction.getDrawing()','283','org.jhotdraw.draw.action.AbstractSelectedAction','protected Drawing getDrawing() {\r\n    return (getView()) == null ? null : getView().getDrawing();\r\n}'),(2990,'getEditor()','org.jhotdraw.draw.action.AbstractSelectedAction.getEditor()','283','org.jhotdraw.draw.action.AbstractSelectedAction','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(2991,'getView()','org.jhotdraw.draw.action.AbstractSelectedAction.getView()','283','org.jhotdraw.draw.action.AbstractSelectedAction','protected DrawingView getView() {\r\n    return (editor) == null ? null : editor.getActiveView();\r\n}'),(2992,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AbstractSelectedAction.setEditor(org.jhotdraw.draw.DrawingEditor)','283','org.jhotdraw.draw.action.AbstractSelectedAction','public void setEditor(DrawingEditor editor) {\r\n    if ((this.editor) != null) {\r\n        this.editor.removePropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().removeFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    this.editor = editor;\r\n    if ((this.editor) != null) {\r\n        this.editor.addPropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().addFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    updateEnabledState();\r\n}'),(2993,'updateEnabledState()','org.jhotdraw.draw.action.AbstractSelectedAction.updateEnabledState()','283','org.jhotdraw.draw.action.AbstractSelectedAction','protected void updateEnabledState() {\r\n    if ((getView()) != null) {\r\n        setEnabled(((getView().isEnabled()) && ((getView().getSelectionCount()) > 0)));\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}'),(2994,'-init-()','org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler.-init-()','282','org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler','EventHandler() {\r\n}'),(2995,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler.propertyChange(java.beans.PropertyChangeEvent)','282','org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler','public void propertyChange(PropertyChangeEvent evt) {\r\n    if ((evt.getPropertyName()) == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n        if ((evt.getOldValue()) != null) {\r\n            DrawingView view = ((DrawingView) (evt.getOldValue()));\r\n            view.removeFigureSelectionListener(this);\r\n            view.removePropertyChangeListener(this);\r\n        }\r\n        if ((evt.getNewValue()) != null) {\r\n            DrawingView view = ((DrawingView) (evt.getNewValue()));\r\n            view.addFigureSelectionListener(this);\r\n            view.addPropertyChangeListener(this);\r\n        }\r\n        updateEnabledState();\r\n    } else\r\n        if (evt.getPropertyName().equals(\"enabled\")) {\r\n            updateEnabledState();\r\n        }\r\n\r\n}'),(2996,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','282','org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler','public void selectionChanged(FigureSelectionEvent evt) {\r\n    updateEnabledState();\r\n}'),(2997,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction.-init-(org.jhotdraw.draw.DrawingEditor)','290','org.jhotdraw.draw.action.AlignAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AlignAction(DrawingEditor editor) {\r\n    super(editor);\r\n}'),(2998,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','290','org.jhotdraw.draw.action.AlignAction','public North(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}'),(2999,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.AlignAction.actionPerformed(java.awt.event.ActionEvent)','290','org.jhotdraw.draw.action.AlignAction','public void actionPerformed(ActionEvent e) {\r\n    CompositeEdit edit = new CompositeEdit(labels.getString(\"edit.align.text\"));\r\n    fireUndoableEditHappened(edit);\r\n    alignFigures(getView().getSelectedFigures(), getSelectionBounds());\r\n    fireUndoableEditHappened(edit);\r\n}'),(3000,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','290','org.jhotdraw.draw.action.AlignAction','protected abstract void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds);'),(3001,'getSelectionBounds()','org.jhotdraw.draw.action.AlignAction.getSelectionBounds()','290','org.jhotdraw.draw.action.AlignAction','/**\r\n * Returns the bounds of the selected figures.\r\n */\r\nprotected Rectangle2D.Double getSelectionBounds() {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (bounds == null) {\r\n            bounds = f.getBounds();\r\n        } else {\r\n            bounds.add(f.getBounds());\r\n        }\r\n    }\r\n    return bounds;\r\n}'),(3002,'updateEnabledState()','org.jhotdraw.draw.action.AlignAction.updateEnabledState()','290','org.jhotdraw.draw.action.AlignAction','public void updateEnabledState() {\r\n    if ((getView()) != null) {\r\n        setEnabled(((getView().isEnabled()) && ((getView().getSelectionCount()) > 1)));\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}'),(3003,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor)','284','org.jhotdraw.draw.action.AlignAction$East','public East(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}'),(3004,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','284','org.jhotdraw.draw.action.AlignAction$East','public East(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}'),(3005,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction$East.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','284','org.jhotdraw.draw.action.AlignAction$East','protected void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds) {\r\n    double x = (selectionBounds.x) + (selectionBounds.width);\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (f.isTransformable()) {\r\n            f.willChange();\r\n            Rectangle2D.Double b = f.getBounds();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate(((x - (b.x)) - (b.width)), 0);\r\n            f.transform(tx);\r\n            f.changed();\r\n            fireUndoableEditHappened(new TransformEdit(f, tx));\r\n        }\r\n    }\r\n}'),(3006,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor)','285','org.jhotdraw.draw.action.AlignAction$Horizontal','public Horizontal(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}'),(3007,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','285','org.jhotdraw.draw.action.AlignAction$Horizontal','public Horizontal(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}'),(3008,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction$Horizontal.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','285','org.jhotdraw.draw.action.AlignAction$Horizontal','protected void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds) {\r\n    double x = (selectionBounds.x) + ((selectionBounds.width) / 2);\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (f.isTransformable()) {\r\n            f.willChange();\r\n            Rectangle2D.Double b = f.getBounds();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate(((x - (b.x)) - ((b.width) / 2)), 0);\r\n            f.transform(tx);\r\n            f.changed();\r\n            fireUndoableEditHappened(new TransformEdit(f, tx));\r\n        }\r\n    }\r\n}'),(3009,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor)','286','org.jhotdraw.draw.action.AlignAction$North','public North(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}'),(3010,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','286','org.jhotdraw.draw.action.AlignAction$North','public North(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}'),(3011,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction$North.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','286','org.jhotdraw.draw.action.AlignAction$North','protected void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds) {\r\n    double y = selectionBounds.y;\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (f.isTransformable()) {\r\n            f.willChange();\r\n            Rectangle2D.Double b = f.getBounds();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate(0, (y - (b.y)));\r\n            f.transform(tx);\r\n            f.changed();\r\n            fireUndoableEditHappened(new TransformEdit(f, tx));\r\n        }\r\n    }\r\n}'),(3012,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor)','287','org.jhotdraw.draw.action.AlignAction$South','public South(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}'),(3013,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','287','org.jhotdraw.draw.action.AlignAction$South','public South(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}'),(3014,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction$South.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','287','org.jhotdraw.draw.action.AlignAction$South','protected void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds) {\r\n    double y = (selectionBounds.y) + (selectionBounds.height);\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (f.isTransformable()) {\r\n            f.willChange();\r\n            Rectangle2D.Double b = f.getBounds();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate(0, ((y - (b.y)) - (b.height)));\r\n            f.transform(tx);\r\n            f.changed();\r\n            fireUndoableEditHappened(new TransformEdit(f, tx));\r\n        }\r\n    }\r\n}'),(3015,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor)','288','org.jhotdraw.draw.action.AlignAction$Vertical','public Vertical(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}'),(3016,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','288','org.jhotdraw.draw.action.AlignAction$Vertical','public Vertical(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}'),(3017,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction$Vertical.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','288','org.jhotdraw.draw.action.AlignAction$Vertical','protected void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds) {\r\n    double y = (selectionBounds.y) + ((selectionBounds.height) / 2);\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (f.isTransformable()) {\r\n            f.willChange();\r\n            Rectangle2D.Double b = f.getBounds();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate(0, ((y - (b.y)) - ((b.height) / 2)));\r\n            f.transform(tx);\r\n            f.changed();\r\n            fireUndoableEditHappened(new TransformEdit(f, tx));\r\n        }\r\n    }\r\n}'),(3018,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor)','289','org.jhotdraw.draw.action.AlignAction$West','public West(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}'),(3019,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','289','org.jhotdraw.draw.action.AlignAction$West','public West(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}'),(3020,'alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.draw.action.AlignAction$West.alignFigures(java.util.Collection,java.awt.geom.Rectangle2D$Double)','289','org.jhotdraw.draw.action.AlignAction$West','protected void alignFigures(Collection selectedFigures, Rectangle2D.Double selectionBounds) {\r\n    double x = selectionBounds.x;\r\n    for (Iterator i = getView().getSelectedFigures().iterator(); i.hasNext();) {\r\n        Figure f = ((Figure) (i.next()));\r\n        if (f.isTransformable()) {\r\n            f.willChange();\r\n            Rectangle2D.Double b = f.getBounds();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate((x - (b.x)), 0);\r\n            f.transform(tx);\r\n            f.changed();\r\n            fireUndoableEditHappened(new TransformEdit(f, tx));\r\n        }\r\n    }\r\n}'),(3021,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ApplyAttributesAction.-init-(org.jhotdraw.draw.DrawingEditor)','291','org.jhotdraw.draw.action.ApplyAttributesAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ApplyAttributesAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.applyAttributes\");\r\n    setEnabled(true);\r\n}'),(3022,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.ApplyAttributesAction.actionPerformed(java.awt.event.ActionEvent)','291','org.jhotdraw.draw.action.ApplyAttributesAction','public void actionPerformed(ActionEvent e) {\r\n    applyAttributes();\r\n}'),(3023,'applyAttributes()','org.jhotdraw.draw.action.ApplyAttributesAction.applyAttributes()','291','org.jhotdraw.draw.action.ApplyAttributesAction','@SuppressWarnings(\"unchecked\")\r\npublic void applyAttributes() {\r\n    DrawingEditor editor = getEditor();\r\n    CompositeEdit edit = new CompositeEdit(labels.getString(\"edit.applyAttrbutes.text\"));\r\n    DrawingView view = getView();\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n    for (Figure figure : view.getSelectedFigures()) {\r\n        figure.willChange();\r\n        for (Map.Entry<AttributeKey, Object> entry : editor.getDefaultAttributes().entrySet()) {\r\n            if (!(excludedAttributes.contains(entry.getKey()))) {\r\n                entry.getKey().basicSet(figure, entry.getValue());\r\n            }\r\n        }\r\n        figure.changed();\r\n    }\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}'),(3024,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.action.ApplyAttributesAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','291','org.jhotdraw.draw.action.ApplyAttributesAction','public void selectionChanged(FigureSelectionEvent evt) {\r\n    setEnabled(((getView().getSelectionCount()) == 1));\r\n}'),(3025,'setExcludedAttributes(java.util.Set)','org.jhotdraw.draw.action.ApplyAttributesAction.setExcludedAttributes(java.util.Set)','291','org.jhotdraw.draw.action.ApplyAttributesAction','/**\r\n * Set of attributes that is excluded when applying default attributes.\r\n */\r\npublic void setExcludedAttributes(Set<AttributeKey> a) {\r\n    this.excludedAttributes = a;\r\n}'),(3026,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)','292','org.jhotdraw.draw.action.AttributeAction','/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}'),(3027,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)','org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)','292','org.jhotdraw.draw.action.AttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}'),(3028,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)','org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)','292','org.jhotdraw.draw.action.AttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}'),(3029,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)','292','org.jhotdraw.draw.action.AttributeAction','public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}'),(3030,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)','org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)','292','org.jhotdraw.draw.action.AttributeAction','public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    putValue(Actions.UNDO_PRESENTATION_NAME_KEY, key.getPresentationName());\r\n    setEnabled(true);\r\n}'),(3031,'-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)','292','org.jhotdraw.draw.action.AttributeAction','public AttributeAction(DrawingEditor editor, Map<AttributeKey, Object> attributes, String name, Icon icon) {\r\n    super(editor);\r\n    this.attributes = (attributes == null) ? new HashMap<AttributeKey, Object>() : attributes;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    updateEnabledState();\r\n}'),(3032,'-init-()','org.jhotdraw.draw.action.AttributeAction.-init-()','292','org.jhotdraw.draw.action.AttributeAction','1() {\r\n}'),(3033,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.AttributeAction.actionPerformed(java.awt.event.ActionEvent)','292','org.jhotdraw.draw.action.AttributeAction','public void actionPerformed(ActionEvent evt) {\r\n    applyAttributesTo(attributes, getView().getSelectedFigures());\r\n}'),(3034,'applyAttributesTo(java.util.Map,java.util.Set)','org.jhotdraw.draw.action.AttributeAction.applyAttributesTo(java.util.Map,java.util.Set)','292','org.jhotdraw.draw.action.AttributeAction','/**\r\n * Applies the specified attributes to the currently selected figures\r\n * of the drawing.\r\n *\r\n * @param a\r\n * 		The attributes.\r\n * @param figures\r\n * 		The figures to which the attributes are applied.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic void applyAttributesTo(final Map<AttributeKey, Object> a, Set<Figure> figures) {\r\n    for (Map.Entry<AttributeKey, Object> entry : a.entrySet()) {\r\n        getEditor().setDefaultAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    final ArrayList<Figure> selectedFigures = new ArrayList<Figure>(figures);\r\n    final ArrayList<Object> restoreData = new ArrayList<Object>(selectedFigures.size());\r\n    for (Figure figure : selectedFigures) {\r\n        restoreData.add(figure.getAttributesRestoreData());\r\n        figure.willChange();\r\n        for (Map.Entry<AttributeKey, Object> entry : a.entrySet()) {\r\n            entry.getKey().basicSet(figure, entry.getValue());\r\n        }\r\n        figure.changed();\r\n    }\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            String name = ((String) (getValue(Actions.UNDO_PRESENTATION_NAME_KEY)));\r\n            if (name == null) {\r\n                name = ((String) (getValue(AbstractAction.NAME)));\r\n            }\r\n            if (name == null) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                name = labels.getString(\"attribute.text\");\r\n            }\r\n            return name;\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            Iterator<Object> iRestore = restoreData.iterator();\r\n            for (Figure figure : selectedFigures) {\r\n                figure.willChange();\r\n                figure.restoreAttributesTo(iRestore.next());\r\n                figure.changed();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            for (Figure figure : selectedFigures) {\r\n                restoreData.add(figure.getAttributesRestoreData());\r\n                figure.willChange();\r\n                for (Map.Entry<AttributeKey, Object> entry : a.entrySet()) {\r\n                    entry.getKey().basicSet(figure, entry.getValue());\r\n                }\r\n                figure.changed();\r\n            }\r\n        }\r\n    };\r\n    getDrawing().fireUndoableEditHappened(edit);\r\n}'),(3035,'updateEnabledState()','org.jhotdraw.draw.action.AttributeAction.updateEnabledState()','292','org.jhotdraw.draw.action.AttributeAction','protected void updateEnabledState() {\r\n    setEnabled(getEditor().isEnabled());\r\n}'),(3036,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)','293','org.jhotdraw.draw.action.AttributeToggler','/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2) {\r\n    this(editor, key, value1, value2, null);\r\n}'),(3037,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object,javax.swing.Action)','org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object,javax.swing.Action)','293','org.jhotdraw.draw.action.AttributeToggler','public AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2, Action compatibleTextAction) {\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.value1 = value1;\r\n    this.value2 = value2;\r\n    this.compatibleTextAction = compatibleTextAction;\r\n}'),(3038,'-init-()','org.jhotdraw.draw.action.AttributeToggler.-init-()','293','org.jhotdraw.draw.action.AttributeToggler','1() {\r\n}'),(3039,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.AttributeToggler.actionPerformed(java.awt.event.ActionEvent)','293','org.jhotdraw.draw.action.AttributeToggler','public void actionPerformed(ActionEvent evt) {\r\n    if ((compatibleTextAction) != null) {\r\n        Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();\r\n        if ((focusOwner != null) && (focusOwner instanceof JTextComponent)) {\r\n            compatibleTextAction.actionPerformed(evt);\r\n            return;\r\n        }\r\n    }\r\n    // Determine the new value\r\n    Iterator i = getView().getSelectedFigures().iterator();\r\n    T toggleValue = value1;\r\n    if (i.hasNext()) {\r\n        Figure f = ((Figure) (i.next()));\r\n        Object attr = key.get(f);\r\n        if ((((value1) == null) && (attr == null)) || ((((value1) != null) && (attr != null)) && (attr.equals(value1)))) {\r\n            toggleValue = value2;\r\n        }\r\n    }\r\n    final T newValue = toggleValue;\r\n    // --\r\n    final ArrayList<Figure> selectedFigures = new ArrayList<Figure>(getView().getSelectedFigures());\r\n    final ArrayList<Object> restoreData = new ArrayList<Object>(selectedFigures.size());\r\n    for (Figure figure : selectedFigures) {\r\n        restoreData.add(figure.getAttributesRestoreData());\r\n        key.set(figure, newValue);\r\n    }\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            String name = ((String) (getValue(Actions.UNDO_PRESENTATION_NAME_KEY)));\r\n            if (name == null) {\r\n                name = ((String) (getValue(AbstractAction.NAME)));\r\n            }\r\n            if (name == null) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                name = labels.getString(\"attribute.text\");\r\n            }\r\n            return name;\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            Iterator<Object> iRestore = restoreData.iterator();\r\n            for (Figure figure : selectedFigures) {\r\n                figure.willChange();\r\n                figure.restoreAttributesTo(iRestore.next());\r\n                figure.changed();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            for (Figure figure : selectedFigures) {\r\n                restoreData.add(figure.getAttributesRestoreData());\r\n                key.set(figure, newValue);\r\n            }\r\n        }\r\n    };\r\n    getView().getDrawing().fireUndoableEditHappened(edit);\r\n}'),(3040,'getEditor()','org.jhotdraw.draw.action.AttributeToggler.getEditor()','293','org.jhotdraw.draw.action.AttributeToggler','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(3041,'getView()','org.jhotdraw.draw.action.AttributeToggler.getView()','293','org.jhotdraw.draw.action.AttributeToggler','public DrawingView getView() {\r\n    return editor.getActiveView();\r\n}'),(3042,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.BringToFrontAction.-init-(org.jhotdraw.draw.DrawingEditor)','294','org.jhotdraw.draw.action.BringToFrontAction','/**\r\n * Creates a new instance.\r\n */\r\npublic BringToFrontAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, BringToFrontAction.ID);\r\n}'),(3043,'-init-()','org.jhotdraw.draw.action.BringToFrontAction.-init-()','294','org.jhotdraw.draw.action.BringToFrontAction','1() {\r\n}'),(3044,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.BringToFrontAction.actionPerformed(java.awt.event.ActionEvent)','294','org.jhotdraw.draw.action.BringToFrontAction','public void actionPerformed(ActionEvent e) {\r\n    final DrawingView view = getView();\r\n    final LinkedList<Figure> figures = new LinkedList<Figure>(view.getSelectedFigures());\r\n    BringToFrontAction.bringToFront(view, figures);\r\n    fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            return labels.getTextProperty(BringToFrontAction.ID);\r\n        }\r\n\r\n        @Override\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            BringToFrontAction.bringToFront(view, figures);\r\n        }\r\n\r\n        @Override\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            SendToBackAction.sendToBack(view, figures);\r\n        }\r\n    });\r\n}'),(3045,'bringToFront(org.jhotdraw.draw.DrawingView,java.util.Collection)','org.jhotdraw.draw.action.BringToFrontAction.bringToFront(org.jhotdraw.draw.DrawingView,java.util.Collection)','294','org.jhotdraw.draw.action.BringToFrontAction','public static void bringToFront(DrawingView view, Collection<Figure> figures) {\r\n    Drawing drawing = view.getDrawing();\r\n    Iterator i = drawing.sort(figures).iterator();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        drawing.bringToFront(figure);\r\n    } \r\n}'),(3046,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(3047,'-init-()','org.jhotdraw.draw.action.ButtonFactory.-init-()','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Prevent instance creation.\r\n */\r\nprivate ButtonFactory() {\r\n}'),(3048,'-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)','org.jhotdraw.draw.action.ButtonFactory.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)','296','org.jhotdraw.draw.action.ButtonFactory','3( $anonymous0,  $anonymous1,  $anonymous2) {\r\n}'),(3049,'-init-(org.jhotdraw.draw.DrawingView,double,javax.swing.AbstractButton)','org.jhotdraw.draw.action.ButtonFactory.-init-(org.jhotdraw.draw.DrawingView,double,javax.swing.AbstractButton)','296','org.jhotdraw.draw.action.ButtonFactory','5( $anonymous0,  $anonymous1,  $anonymous2) {\r\n}'),(3050,'addAlignmentButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addAlignmentButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\npublic static void addAlignmentButtonsTo(JToolBar bar, final DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    bar.add(new AlignAction.West(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.East(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.Horizontal(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.North(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.South(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.Vertical(editor)).setFocusable(false);\r\n    bar.addSeparator();\r\n    bar.add(new MoveAction.West(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.East(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.North(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.South(editor)).setFocusable(false);\r\n    bar.addSeparator();\r\n    bar.add(new BringToFrontAction(editor)).setFocusable(false);\r\n    bar.add(new SendToBackAction(editor)).setFocusable(false);\r\n}'),(3051,'addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\npublic static void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JButton b;\r\n    b = bar.add(new PickAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    b = bar.add(new ApplyAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    bar.addSeparator();\r\n    ButtonFactory.addColorButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addStrokeButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addFontButtonsTo(bar, editor);\r\n}'),(3052,'addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static void addColorButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ButtonFactory.addColorButtonsTo(bar, editor, ButtonFactory.DEFAULT_COLORS, ButtonFactory.DEFAULT_COLORS_COLUMN_COUNT);\r\n}'),(3053,'addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.List,int)','org.jhotdraw.draw.action.ButtonFactory.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.List,int)','296','org.jhotdraw.draw.action.ButtonFactory','public static void addColorButtonsTo(JToolBar bar, DrawingEditor editor, List<ColorIcon> colors, int columnCount) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.STROKE_COLOR, colors, columnCount, \"attribute.strokeColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.FILL_COLOR, colors, columnCount, \"attribute.fillColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.TEXT_COLOR, colors, columnCount, \"attribute.textColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n}'),(3054,'addFontButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addFontButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static void addFontButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createFontButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleBoldButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleItalicButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleUnderlineButton(editor));\r\n}'),(3055,'addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor) {\r\n    return ButtonFactory.addSelectionToolTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}'),(3056,'addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)','org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)','296','org.jhotdraw.draw.action.ButtonFactory','public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    Tool selectionTool = new DelegationSelectionTool(drawingActions, selectionActions);\r\n    return ButtonFactory.addSelectionToolTo(tb, editor, selectionTool);\r\n}'),(3057,'addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool)','org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool)','296','org.jhotdraw.draw.action.ButtonFactory','public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Tool selectionTool) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JToggleButton t;\r\n    Tool tool;\r\n    HashMap<String, Object> attributes;\r\n    ButtonGroup group;\r\n    if ((tb.getClientProperty(\"toolButtonGroup\")) instanceof ButtonGroup) {\r\n        group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    } else {\r\n        group = new ButtonGroup();\r\n        tb.putClientProperty(\"toolButtonGroup\", group);\r\n    }\r\n    // Selection tool\r\n    editor.setTool(selectionTool);\r\n    t = new JToggleButton();\r\n    final JToggleButton defaultToolButton = t;\r\n    ToolListener toolHandler;\r\n    if ((tb.getClientProperty(\"toolHandler\")) instanceof ToolListener) {\r\n        toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    } else {\r\n        toolHandler = new ToolListener() {\r\n            public void toolStarted(ToolEvent event) {\r\n            }\r\n\r\n            public void toolDone(ToolEvent event) {\r\n                defaultToolButton.setSelected(true);\r\n            }\r\n\r\n            public void areaInvalidated(ToolEvent e) {\r\n            }\r\n        };\r\n        tb.putClientProperty(\"toolHandler\", toolHandler);\r\n    }\r\n    labels.configureToolBarButton(t, \"selectionTool\");\r\n    t.setSelected(true);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(selectionTool, editor));\r\n    t.setFocusable(false);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(3058,'addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static void addStrokeButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createStrokeDecorationButton(editor));\r\n    bar.add(ButtonFactory.createStrokeWidthButton(editor));\r\n    bar.add(ButtonFactory.createStrokeDashesButton(editor));\r\n    bar.add(ButtonFactory.createStrokeTypeButton(editor));\r\n    bar.add(ButtonFactory.createStrokePlacementButton(editor));\r\n    bar.add(ButtonFactory.createStrokeCapButton(editor));\r\n    bar.add(ButtonFactory.createStrokeJoinButton(editor));\r\n}'),(3059,'addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(3060,'addZoomButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.addZoomButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static void addZoomButtonsTo(JToolBar bar, final DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createZoomButton(editor));\r\n}'),(3061,'createApplyAttributesButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createApplyAttributesButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a button that applies the default attributes of the editor to\r\n * the current selection.\r\n */\r\npublic static JButton createApplyAttributesButton(DrawingEditor editor) {\r\n    JButton btn;\r\n    btn = new JButton(new ApplyAttributesAction(editor));\r\n    if ((btn.getIcon()) != null) {\r\n        btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n    }\r\n    btn.setHorizontalTextPosition(JButton.CENTER);\r\n    btn.setVerticalTextPosition(JButton.BOTTOM);\r\n    btn.setText(null);\r\n    btn.setFocusable(false);\r\n    return btn;\r\n}'),(3062,'createDrawingActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createDrawingActions(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static Collection<Action> createDrawingActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(3063,'createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(3064,'createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)','org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(3065,'createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)','org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}'),(3066,'createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(3067,'createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)','org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(3068,'createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)','org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}'),(3069,'createFontButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createFontButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3070,'createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}'),(3071,'createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}'),(3072,'createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createFontStyleBoldButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleBoldButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3073,'createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createFontStyleBoldButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.bold\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_BOLD, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.bold.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(3074,'createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createFontStyleItalicButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleItalicButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3075,'createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createFontStyleItalicButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.italic\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_ITALIC, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.italic.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(3076,'createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createFontStyleUnderlineButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleUnderlineButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3077,'createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createFontStyleUnderlineButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.underline\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_UNDERLINE, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.underline.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(3078,'createPickAttributesButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createPickAttributesButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JButton createPickAttributesButton(DrawingEditor editor) {\r\n    JButton btn;\r\n    btn = new JButton(new PickAttributesAction(editor));\r\n    if ((btn.getIcon()) != null) {\r\n        btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n    }\r\n    btn.setHorizontalTextPosition(JButton.CENTER);\r\n    btn.setVerticalTextPosition(JButton.BOTTOM);\r\n    btn.setText(null);\r\n    btn.setFocusable(false);\r\n    return btn;\r\n}'),(3079,'createSelectionActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createSelectionActions(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor));\r\n    a.add(new UngroupAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(3080,'createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(3081,'createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)','org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(3082,'createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)','org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}'),(3083,'createStrokeCapButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeCapButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeCapButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3084,'createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}'),(3085,'createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeDashesButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3086,'createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][])','org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][])','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, dashes, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3087,'createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}'),(3088,'createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}'),(3089,'createStrokeDecorationButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokeDecorationButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeDecorationButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeDecorationPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDecorationPopupButton, \"attribute.strokeDecoration\");\r\n    strokeDecorationPopupButton.setFocusable(false);\r\n    strokeDecorationPopupButton.setColumnCount(2, false);\r\n    LineDecoration[] decorations = new LineDecoration[]{ // Arrow\r\n    new ArrowTip(0.35, 12, 11.3), // Arrow\r\n    new ArrowTip(0.35, 13, 7), // Generalization triangle\r\n    new ArrowTip(((Math.PI) / 5), 12, 9.8, true, true, false), // Dependency arrow\r\n    new ArrowTip(((Math.PI) / 6), 12, 0, false, true, false), // Link arrow\r\n    new ArrowTip(((Math.PI) / 11), 13, 0, false, true, true), // Aggregation diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, false, true, false), // Composition diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, true, true, true), null };\r\n    for (int i = 0; i < (decorations.length); i++) {\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.START_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], true)));\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.END_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], false)));\r\n    }\r\n    return strokeDecorationPopupButton;\r\n}'),(3090,'createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeJoinButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeJoinButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3091,'createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}'),(3092,'createStrokePlacementButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokePlacementButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokePlacementButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokePlacementPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokePlacementPopupButton, \"attribute.strokePlacement\");\r\n    strokePlacementPopupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.center\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.inside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideUnfilled\"), null));\r\n    return strokePlacementPopupButton;\r\n}'),(3093,'createStrokeTypeButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokeTypeButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeTypeButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeTypePopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeTypePopupButton, \"attribute.strokeType\");\r\n    strokeTypePopupButton.setFocusable(false);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.BASIC, labels.getString(\"attribute.strokeType.basic\"), new StrokeIcon(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL))));\r\n    HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 2.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(2, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 3.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(3, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 4.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(4, 1))));\r\n    return strokeTypePopupButton;\r\n}'),(3094,'createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeWidthButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3095,'createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[])','org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[])','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(3096,'createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}'),(3097,'createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)','296','org.jhotdraw.draw.action.ButtonFactory','public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}'),(3098,'createToggleGridButton(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.action.ButtonFactory.createToggleGridButton(org.jhotdraw.draw.DrawingView)','296','org.jhotdraw.draw.action.ButtonFactory','/**\r\n * Creates a button which toggles between two GridConstrainer for\r\n * a DrawingView.\r\n */\r\npublic static AbstractButton createToggleGridButton(final DrawingView view) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JToggleButton toggleButton;\r\n    toggleButton = new JToggleButton();\r\n    labels.configureToolBarButton(toggleButton, \"view.toggleGrid\");\r\n    toggleButton.setFocusable(false);\r\n    toggleButton.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent event) {\r\n            view.setConstrainerVisible(toggleButton.isSelected());\r\n            // view.getComponent().repaint();\r\n        }\r\n    });\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == (DrawingView.CONSTRAINER_VISIBLE_PROPERTY)) {\r\n                toggleButton.setSelected(view.isConstrainerVisible());\r\n            }\r\n        }\r\n    });\r\n    return toggleButton;\r\n}'),(3099,'createZoomButton(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingEditor)','296','org.jhotdraw.draw.action.ButtonFactory','public static AbstractButton createZoomButton(final DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JPopupButton zoomPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(zoomPopupButton, \"view.zoomFactor\");\r\n    zoomPopupButton.setFocusable(false);\r\n    if ((editor.getDrawingViews().size()) == 0) {\r\n        zoomPopupButton.setText(\"100 %\");\r\n    } else {\r\n        zoomPopupButton.setText((((int) ((editor.getDrawingViews().iterator().next().getScaleFactor()) * 100)) + \" %\"));\r\n    }\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n                if ((evt.getNewValue()) == null) {\r\n                    zoomPopupButton.setText(\"100 %\");\r\n                } else {\r\n                    zoomPopupButton.setText((((int) ((editor.getActiveView().getScaleFactor()) * 100)) + \" %\"));\r\n                }\r\n            }\r\n        }\r\n    });\r\n    double[] factors = new double[]{ 16, 8, 5, 4, 3, 2, 1.5, 1.25, 1, 0.75, 0.5, 0.25, 0.1 };\r\n    for (int i = 0; i < (factors.length); i++) {\r\n        zoomPopupButton.add(new ZoomEditorAction(editor, factors[i], zoomPopupButton) {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                super.actionPerformed(e);\r\n                zoomPopupButton.setText((((int) ((editor.getActiveView().getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        });\r\n    }\r\n    // zoomPopupButton.setPreferredSize(new Dimension(16,16));\r\n    zoomPopupButton.setFocusable(false);\r\n    return zoomPopupButton;\r\n}'),(3100,'createZoomButton(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingView)','296','org.jhotdraw.draw.action.ButtonFactory','public static AbstractButton createZoomButton(DrawingView view) {\r\n    return ButtonFactory.createZoomButton(view, new double[]{ 5, 4, 3, 2, 1.5, 1.25, 1, 0.75, 0.5, 0.25, 0.1 });\r\n}'),(3101,'createZoomButton(org.jhotdraw.draw.DrawingView,double[])','org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingView,double[])','296','org.jhotdraw.draw.action.ButtonFactory','public static AbstractButton createZoomButton(final DrawingView view, double[] factors) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JPopupButton zoomPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(zoomPopupButton, \"view.zoomFactor\");\r\n    zoomPopupButton.setFocusable(false);\r\n    zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == \"scaleFactor\") {\r\n                zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        }\r\n    });\r\n    for (int i = 0; i < (factors.length); i++) {\r\n        zoomPopupButton.add(new ZoomAction(view, factors[i], zoomPopupButton) {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                super.actionPerformed(e);\r\n                zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        });\r\n    }\r\n    // zoomPopupButton.setPreferredSize(new Dimension(16,16));\r\n    zoomPopupButton.setFocusable(false);\r\n    return zoomPopupButton;\r\n}'),(3102,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','295','org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener','public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(3103,'itemStateChanged(java.awt.event.ItemEvent)','org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener.itemStateChanged(java.awt.event.ItemEvent)','295','org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener','public void itemStateChanged(ItemEvent evt) {\r\n    if ((evt.getStateChange()) == (ItemEvent.SELECTED)) {\r\n        editor.setTool(tool);\r\n    }\r\n}'),(3104,'-init-(int)','org.jhotdraw.draw.action.ColorIcon.-init-(int)','297','org.jhotdraw.draw.action.ColorIcon','/**\r\n * Creates a new instance.\r\n */\r\npublic ColorIcon(int rgb) {\r\n    this(new Color(rgb));\r\n}'),(3105,'-init-(java.awt.Color)','org.jhotdraw.draw.action.ColorIcon.-init-(java.awt.Color)','297','org.jhotdraw.draw.action.ColorIcon','public ColorIcon(Color color) {\r\n    this(color, (color == null ? ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getToolTipTextProperty(\"attribute.color.noColor\") : ((((color.getRed()) + \",\") + (color.getGreen())) + \",\") + (color.getBlue())), 14, 14);\r\n}'),(3106,'-init-(int,java.lang.String)','org.jhotdraw.draw.action.ColorIcon.-init-(int,java.lang.String)','297','org.jhotdraw.draw.action.ColorIcon','public ColorIcon(int rgb, String name) {\r\n    this(new Color(rgb), name, 14, 14);\r\n}'),(3107,'-init-(java.awt.Color,java.lang.String)','org.jhotdraw.draw.action.ColorIcon.-init-(java.awt.Color,java.lang.String)','297','org.jhotdraw.draw.action.ColorIcon','public ColorIcon(Color color, String name) {\r\n    this(color, name, 14, 14);\r\n}'),(3108,'-init-(java.awt.Color,java.lang.String,int,int)','org.jhotdraw.draw.action.ColorIcon.-init-(java.awt.Color,java.lang.String,int,int)','297','org.jhotdraw.draw.action.ColorIcon','public ColorIcon(Color color, String name, int width, int height) {\r\n    this.fillColor = color;\r\n    this.name = name;\r\n    this.width = width;\r\n    this.height = height;\r\n    if ((ColorIcon.noColorImage) == null) {\r\n        ColorIcon.noColorImage = Images.toBufferedImage(Images.createImage(ColorIcon.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.noColor.png\")));\r\n    }\r\n}'),(3109,'getColor()','org.jhotdraw.draw.action.ColorIcon.getColor()','297','org.jhotdraw.draw.action.ColorIcon','public Color getColor() {\r\n    return fillColor;\r\n}'),(3110,'getIconHeight()','org.jhotdraw.draw.action.ColorIcon.getIconHeight()','297','org.jhotdraw.draw.action.ColorIcon','public int getIconHeight() {\r\n    return height;\r\n}'),(3111,'getIconWidth()','org.jhotdraw.draw.action.ColorIcon.getIconWidth()','297','org.jhotdraw.draw.action.ColorIcon','public int getIconWidth() {\r\n    return width;\r\n}'),(3112,'getName()','org.jhotdraw.draw.action.ColorIcon.getName()','297','org.jhotdraw.draw.action.ColorIcon','public String getName() {\r\n    return name;\r\n}'),(3113,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.draw.action.ColorIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','297','org.jhotdraw.draw.action.ColorIcon','public void paintIcon(Component c, Graphics g, int x, int y) {\r\n    // Graphics2D g = (Graphics2D) gr;\r\n    if ((fillColor) == null) {\r\n        if (((width) == (ColorIcon.noColorImage.getWidth())) && ((height) == (ColorIcon.noColorImage.getHeight()))) {\r\n            g.drawImage(ColorIcon.noColorImage, x, y, c);\r\n        } else {\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect((x + 1), (y + 1), ((width) - 2), ((height) - 2));\r\n            g.setColor(Color.red);\r\n            int[] xpoints = new int[]{ x + 2, (x + (width)) - 5, (x + (width)) - 3, (x + (width)) - 3, x + 4, x + 2 };\r\n            int[] ypoints = new int[]{ (y + (height)) - 5, y + 2, y + 2, y + 4, (y + (height)) - 3, (y + (height)) - 3 };\r\n            g.fillPolygon(xpoints, ypoints, xpoints.length);\r\n        }\r\n    } else {\r\n        // g.setColor(Color.WHITE);\r\n        // g.fillRect(x + 1, y + 1, width - 2, height - 2);\r\n        g.setColor(fillColor);\r\n        // g.fillRect(x + 2, y + 2, width - 4, height - 4);\r\n        g.fillRect((x + 1), (y + 1), ((width) - 2), ((height) - 2));\r\n    }\r\n    g.setColor(new Color(6710886));\r\n    // Draw the rectangle using drawLine to work around a drawing bug in\r\n    // Apples MRJ for Java 1.5\r\n    // g.drawRect(x, y, getIconWidth() - 1, getIconHeight() - 1);\r\n    g.drawLine(x, y, ((x + (width)) - 1), y);\r\n    g.drawLine(((x + (width)) - 1), y, ((x + (width)) - 1), ((y + (width)) - 1));\r\n    g.drawLine(((x + (width)) - 1), ((y + (height)) - 1), x, ((y + (height)) - 1));\r\n    g.drawLine(x, ((y + (height)) - 1), x, y);\r\n}'),(3114,'-init-()','org.jhotdraw.draw.action.Colors.-init-()','298','org.jhotdraw.draw.action.Colors','/**\r\n * Prevent instance creation.\r\n */\r\nprivate Colors() {\r\n}'),(3115,'shadow(java.awt.Color,int)','org.jhotdraw.draw.action.Colors.shadow(java.awt.Color,int)','298','org.jhotdraw.draw.action.Colors','/**\r\n * Blackens the specified color by casting a black shadow of the specified\r\n * amount on the color.\r\n */\r\npublic static Color shadow(Color c, int amount) {\r\n    return new Color(Math.max(0, ((c.getRed()) - amount)), Math.max(0, ((c.getGreen()) - amount)), Math.max(0, ((c.getBlue()) - amount)), c.getAlpha());\r\n}'),(3116,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','299','org.jhotdraw.draw.action.DefaultAttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key) {\r\n    this(editor, key, null, null);\r\n}'),(3117,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.Map)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.Map)','299','org.jhotdraw.draw.action.DefaultAttributeAction','public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Map<AttributeKey, Object> fixedAttributes) {\r\n    this(editor, new AttributeKey[]{ key }, null, null, fixedAttributes);\r\n}'),(3118,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[])','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[])','299','org.jhotdraw.draw.action.DefaultAttributeAction','public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys) {\r\n    this(editor, keys, null, null);\r\n}'),(3119,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','299','org.jhotdraw.draw.action.DefaultAttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(3120,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','299','org.jhotdraw.draw.action.DefaultAttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(3121,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','299','org.jhotdraw.draw.action.DefaultAttributeAction','public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name, Icon icon) {\r\n    this(editor, new AttributeKey[]{ key }, name, icon);\r\n}'),(3122,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon)','299','org.jhotdraw.draw.action.DefaultAttributeAction','public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys, String name, Icon icon) {\r\n    this(editor, keys, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(3123,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon,java.util.Map)','org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon,java.util.Map)','299','org.jhotdraw.draw.action.DefaultAttributeAction','public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor);\r\n    this.keys = keys;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(DefaultAttributeAction.this.keys[0])) {\r\n                putValue((\"attribute_\" + (DefaultAttributeAction.this.keys[0])), evt.getNewValue());\r\n            }\r\n        }\r\n    });\r\n    this.fixedAttributes = fixedAttributes;\r\n}'),(3124,'-init-()','org.jhotdraw.draw.action.DefaultAttributeAction.-init-()','299','org.jhotdraw.draw.action.DefaultAttributeAction','1() {\r\n}'),(3125,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.DefaultAttributeAction.actionPerformed(java.awt.event.ActionEvent)','299','org.jhotdraw.draw.action.DefaultAttributeAction','public void actionPerformed(ActionEvent evt) {\r\n    if (((getView()) != null) && ((getView().getSelectionCount()) > 0)) {\r\n        CompositeEdit edit = new CompositeEdit(labels.getString(\"drawAttributeChange\"));\r\n        fireUndoableEditHappened(edit);\r\n        changeAttribute();\r\n        fireUndoableEditHappened(edit);\r\n    }\r\n}'),(3126,'changeAttribute()','org.jhotdraw.draw.action.DefaultAttributeAction.changeAttribute()','299','org.jhotdraw.draw.action.DefaultAttributeAction','@SuppressWarnings(\"unchecked\")\r\npublic void changeAttribute() {\r\n    CompositeEdit edit = new CompositeEdit(\"attributes\");\r\n    fireUndoableEditHappened(edit);\r\n    Drawing drawing = getDrawing();\r\n    Iterator i = getView().getSelectedFigures().iterator();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        figure.willChange();\r\n        for (int j = 0; j < (keys.length); j++) {\r\n            keys[j].basicSet(figure, getEditor().getDefaultAttribute(keys[j]));\r\n        }\r\n        for (Map.Entry<AttributeKey, Object> entry : fixedAttributes.entrySet()) {\r\n            entry.getKey().basicSet(figure, entry.getValue());\r\n        }\r\n        figure.changed();\r\n    } \r\n    fireUndoableEditHappened(edit);\r\n}'),(3127,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.action.DefaultAttributeAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','299','org.jhotdraw.draw.action.DefaultAttributeAction','public void selectionChanged(FigureSelectionEvent evt) {\r\n    // setEnabled(getView().getSelectionCount() > 0);\r\n}'),(3128,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)','300','org.jhotdraw.draw.action.DrawingAttributeAction','/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}'),(3129,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)','org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)','300','org.jhotdraw.draw.action.DrawingAttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}'),(3130,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)','org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)','300','org.jhotdraw.draw.action.DrawingAttributeAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}'),(3131,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)','300','org.jhotdraw.draw.action.DrawingAttributeAction','public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}'),(3132,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)','org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)','300','org.jhotdraw.draw.action.DrawingAttributeAction','public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}'),(3133,'-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)','300','org.jhotdraw.draw.action.DrawingAttributeAction','public DrawingAttributeAction(DrawingEditor editor, Map<AttributeKey, Object> attributes, String name, Icon icon) {\r\n    super(editor);\r\n    this.attributes = attributes;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    updateEnabledState();\r\n}'),(3134,'-init-()','org.jhotdraw.draw.action.DrawingAttributeAction.-init-()','300','org.jhotdraw.draw.action.DrawingAttributeAction','1() {\r\n}'),(3135,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.DrawingAttributeAction.actionPerformed(java.awt.event.ActionEvent)','300','org.jhotdraw.draw.action.DrawingAttributeAction','@SuppressWarnings(\"unchecked\")\r\npublic void actionPerformed(ActionEvent evt) {\r\n    final ArrayList<Object> restoreData = new ArrayList<Object>();\r\n    final Figure drawing = getView().getDrawing();\r\n    restoreData.add(drawing.getAttributesRestoreData());\r\n    drawing.willChange();\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(drawing, entry.getValue());\r\n    }\r\n    drawing.changed();\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            String name = ((String) (getValue(Actions.UNDO_PRESENTATION_NAME_KEY)));\r\n            if (name == null) {\r\n                name = ((String) (getValue(AbstractAction.NAME)));\r\n            }\r\n            if (name == null) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                name = labels.getString(\"attribute.text\");\r\n            }\r\n            return name;\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            Iterator<Object> iRestore = restoreData.iterator();\r\n            drawing.willChange();\r\n            drawing.restoreAttributesTo(iRestore.next());\r\n            drawing.changed();\r\n        }\r\n\r\n        @Override\r\n        @SuppressWarnings(\"unchecked\")\r\n        public void redo() {\r\n            super.redo();\r\n            restoreData.add(drawing.getAttributesRestoreData());\r\n            drawing.willChange();\r\n            for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n                entry.getKey().basicSet(drawing, entry.getValue());\r\n            }\r\n            drawing.changed();\r\n        }\r\n    };\r\n    fireUndoableEditHappened(edit);\r\n}'),(3136,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','301','org.jhotdraw.draw.action.DrawingColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(3137,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','301','org.jhotdraw.draw.action.DrawingColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(3138,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','301','org.jhotdraw.draw.action.DrawingColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(3139,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','301','org.jhotdraw.draw.action.DrawingColorChooserAction','public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(3140,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)','org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)','301','org.jhotdraw.draw.action.DrawingColorChooserAction','public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}'),(3141,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.DrawingColorChooserAction.actionPerformed(java.awt.event.ActionEvent)','301','org.jhotdraw.draw.action.DrawingColorChooserAction','@Override\r\npublic void actionPerformed(ActionEvent e) {\r\n    if ((EditorColorChooserAction.colorChooser) == null) {\r\n        EditorColorChooserAction.colorChooser = new JColorChooser();\r\n    }\r\n    Color initialColor = getInitialColor();\r\n    // FIXME - Reuse colorChooser object instead of calling static method here.\r\n    Color chosenColor = EditorColorChooserAction.colorChooser.showDialog(((Component) (e.getSource())), labels.getString(\"attribute.color.text\"), initialColor);\r\n    if (chosenColor != null) {\r\n        HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>(attributes);\r\n        attr.put(key, chosenColor);\r\n        HashSet<Figure> figures = new HashSet<Figure>();\r\n        figures.add(getView().getDrawing());\r\n        applyAttributesTo(attr, figures);\r\n    }\r\n}'),(3142,'getInitialColor()','org.jhotdraw.draw.action.DrawingColorChooserAction.getInitialColor()','301','org.jhotdraw.draw.action.DrawingColorChooserAction','@Override\r\nprotected Color getInitialColor() {\r\n    Color initialColor = null;\r\n    DrawingView v = getEditor().getActiveView();\r\n    if (v != null) {\r\n        Figure f = v.getDrawing();\r\n        initialColor = key.get(f);\r\n    }\r\n    if (initialColor == null) {\r\n        initialColor = super.getInitialColor();\r\n    }\r\n    return initialColor;\r\n}'),(3143,'updateEnabledState()','org.jhotdraw.draw.action.DrawingColorChooserAction.updateEnabledState()','301','org.jhotdraw.draw.action.DrawingColorChooserAction','protected void updateEnabledState() {\r\n    if ((getView()) != null) {\r\n        setEnabled(getView().isEnabled());\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}'),(3144,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)','org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)','302','org.jhotdraw.draw.action.DrawingColorIcon','/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(3145,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)','org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)','302','org.jhotdraw.draw.action.DrawingColorIcon','public DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(3146,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.draw.action.DrawingColorIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','302','org.jhotdraw.draw.action.DrawingColorIcon','@Override\r\npublic void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    super.paintIcon(c, g, x, y);\r\n    if ((editor) != null) {\r\n        Color color;\r\n        DrawingView view = editor.getActiveView();\r\n        if (view != null) {\r\n            color = key.get(view.getDrawing());\r\n        } else {\r\n            color = key.getDefaultValue();\r\n        }\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.translate(x, y);\r\n            g.fill(colorShape);\r\n            g.translate((-x), (-y));\r\n        }\r\n    }\r\n}'),(3147,'-init-()','org.jhotdraw.draw.action.DrawingEditorProxy.-init-()','304','org.jhotdraw.draw.action.DrawingEditorProxy','Forwarder() {\r\n}'),(3148,'add(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.action.DrawingEditorProxy.add(org.jhotdraw.draw.DrawingView)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void add(DrawingView view) {\r\n    target.add(view);\r\n}'),(3149,'applyDefaultAttributesTo(org.jhotdraw.draw.Figure)','org.jhotdraw.draw.action.DrawingEditorProxy.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void applyDefaultAttributesTo(Figure f) {\r\n    target.applyDefaultAttributesTo(f);\r\n}'),(3150,'findView(java.awt.Container)','org.jhotdraw.draw.action.DrawingEditorProxy.findView(java.awt.Container)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public DrawingView findView(Container c) {\r\n    return target.findView(c);\r\n}'),(3151,'getActiveView()','org.jhotdraw.draw.action.DrawingEditorProxy.getActiveView()','304','org.jhotdraw.draw.action.DrawingEditorProxy','public DrawingView getActiveView() {\r\n    return (target) == null ? null : target.getActiveView();\r\n}'),(3152,'getDefaultAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.action.DrawingEditorProxy.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public <T> T getDefaultAttribute(AttributeKey<T> key) {\r\n    return target.getDefaultAttribute(key);\r\n}'),(3153,'getDefaultAttributes()','org.jhotdraw.draw.action.DrawingEditorProxy.getDefaultAttributes()','304','org.jhotdraw.draw.action.DrawingEditorProxy','public Map<AttributeKey, Object> getDefaultAttributes() {\r\n    return target.getDefaultAttributes();\r\n}'),(3154,'getDrawingViews()','org.jhotdraw.draw.action.DrawingEditorProxy.getDrawingViews()','304','org.jhotdraw.draw.action.DrawingEditorProxy','public Collection<DrawingView> getDrawingViews() {\r\n    return target.getDrawingViews();\r\n}'),(3155,'getFocusedView()','org.jhotdraw.draw.action.DrawingEditorProxy.getFocusedView()','304','org.jhotdraw.draw.action.DrawingEditorProxy','public DrawingView getFocusedView() {\r\n    return (target) == null ? null : target.getActiveView();\r\n}'),(3156,'getHandleAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.action.DrawingEditorProxy.getHandleAttribute(org.jhotdraw.draw.AttributeKey)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public <T> T getHandleAttribute(AttributeKey<T> key) {\r\n    return target.getHandleAttribute(key);\r\n}'),(3157,'getTarget()','org.jhotdraw.draw.action.DrawingEditorProxy.getTarget()','304','org.jhotdraw.draw.action.DrawingEditorProxy','/**\r\n * Gets the target of the proxy.\r\n */\r\npublic DrawingEditor getTarget() {\r\n    return target;\r\n}'),(3158,'getTool()','org.jhotdraw.draw.action.DrawingEditorProxy.getTool()','304','org.jhotdraw.draw.action.DrawingEditorProxy','public Tool getTool() {\r\n    return target.getTool();\r\n}'),(3159,'isEnabled()','org.jhotdraw.draw.action.DrawingEditorProxy.isEnabled()','304','org.jhotdraw.draw.action.DrawingEditorProxy','public boolean isEnabled() {\r\n    return target.isEnabled();\r\n}'),(3160,'remove(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.action.DrawingEditorProxy.remove(org.jhotdraw.draw.DrawingView)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void remove(DrawingView view) {\r\n    target.remove(view);\r\n}'),(3161,'setActiveView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.draw.action.DrawingEditorProxy.setActiveView(org.jhotdraw.draw.DrawingView)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void setActiveView(DrawingView newValue) {\r\n    target.setActiveView(newValue);\r\n}'),(3162,'setCursor(java.awt.Cursor)','org.jhotdraw.draw.action.DrawingEditorProxy.setCursor(java.awt.Cursor)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void setCursor(Cursor c) {\r\n    target.setCursor(c);\r\n}'),(3163,'setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.action.DrawingEditorProxy.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public <T> void setDefaultAttribute(AttributeKey<T> key, T value) {\r\n    target.setDefaultAttribute(key, value);\r\n}'),(3164,'setEnabled(boolean)','org.jhotdraw.draw.action.DrawingEditorProxy.setEnabled(boolean)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void setEnabled(boolean newValue) {\r\n    target.setEnabled(newValue);\r\n}'),(3165,'setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.draw.action.DrawingEditorProxy.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public <T> void setHandleAttribute(AttributeKey<T> key, T value) {\r\n    target.setHandleAttribute(key, value);\r\n}'),(3166,'setTarget(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.DrawingEditorProxy.setTarget(org.jhotdraw.draw.DrawingEditor)','304','org.jhotdraw.draw.action.DrawingEditorProxy','/**\r\n * Sets the target of the proxy.\r\n */\r\npublic void setTarget(DrawingEditor newValue) {\r\n    if ((target) != null) {\r\n        target.removePropertyChangeListener(forwarder);\r\n    }\r\n    this.target = newValue;\r\n    if ((target) != null) {\r\n        target.addPropertyChangeListener(forwarder);\r\n    }\r\n}'),(3167,'setTool(org.jhotdraw.draw.Tool)','org.jhotdraw.draw.action.DrawingEditorProxy.setTool(org.jhotdraw.draw.Tool)','304','org.jhotdraw.draw.action.DrawingEditorProxy','public void setTool(Tool t) {\r\n    target.setTool(t);\r\n}'),(3168,'-init-()','org.jhotdraw.draw.action.DrawingEditorProxy$Forwarder.-init-()','303','org.jhotdraw.draw.action.DrawingEditorProxy$Forwarder','Forwarder() {\r\n}'),(3169,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.draw.action.DrawingEditorProxy$Forwarder.propertyChange(java.beans.PropertyChangeEvent)','303','org.jhotdraw.draw.action.DrawingEditorProxy$Forwarder','public void propertyChange(PropertyChangeEvent evt) {\r\n    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());\r\n}'),(3170,'-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.EditCanvasAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)','305','org.jhotdraw.draw.action.EditCanvasAction','/**\r\n * Creates a new instance.\r\n */\r\npublic EditCanvasAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditCanvasAction.ID);\r\n}'),(3171,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.EditCanvasAction.actionPerformed(java.awt.event.ActionEvent)','305','org.jhotdraw.draw.action.EditCanvasAction','public void actionPerformed(ActionEvent e) {\r\n    getFrame().setVisible(true);\r\n}'),(3172,'getApplication()','org.jhotdraw.draw.action.EditCanvasAction.getApplication()','305','org.jhotdraw.draw.action.EditCanvasAction','protected Application getApplication() {\r\n    return app;\r\n}'),(3173,'getFrame()','org.jhotdraw.draw.action.EditCanvasAction.getFrame()','305','org.jhotdraw.draw.action.EditCanvasAction','protected JFrame getFrame() {\r\n    if ((frame) == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        frame = new JFrame();\r\n        frame.setTitle(labels.getString(\"window.editCanvas.title\"));\r\n        frame.setResizable(false);\r\n        settingsPanel = new EditCanvasPanel();\r\n        frame.add(settingsPanel);\r\n        frame.pack();\r\n        Preferences prefs = Preferences.userNodeForPackage(getClass());\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"canvasSettings\", frame);\r\n        getApplication().addWindow(frame, null);\r\n    }\r\n    settingsPanel.setDrawing(getView().getDrawing());\r\n    return frame;\r\n}'),(3174,'updateViewState()','org.jhotdraw.draw.action.EditCanvasAction.updateViewState()','305','org.jhotdraw.draw.action.EditCanvasAction','@Override\r\nprotected void updateViewState() {\r\n    if (((getView()) != null) && ((settingsPanel) != null)) {\r\n        settingsPanel.setDrawing(getView().getDrawing());\r\n    }\r\n}'),(3175,'-init-()','org.jhotdraw.draw.action.EditCanvasPanel.-init-()','306','org.jhotdraw.draw.action.EditCanvasPanel','/**\r\n * Creates new form.\r\n */\r\npublic EditCanvasPanel() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    initComponents();\r\n    colorButton.putClientProperty(\"Quaqua.Button.style\", \"colorWell\");\r\n    opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n    opacityPopupButton.add(opacitySlider);\r\n    opacityPopupButton.putClientProperty(\"JButton.buttonType\", \"toolbar\");\r\n    add(opacityPopupButton);\r\n    NumberFormatter nf = new NumberFormatter();\r\n    nf.setMaximum(1.0);\r\n    nf.setMinimum(0.0);\r\n    opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1.0, 100.0));\r\n    opacityFieldHandler = new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_FILL_OPACITY, opacityField, null);\r\n    opacitySliderHandler = new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_FILL_OPACITY, opacitySlider, null);\r\n}'),(3176,'colorButtonPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.EditCanvasPanel.colorButtonPerformed(java.awt.event.ActionEvent)','306','org.jhotdraw.draw.action.EditCanvasPanel','private void colorButtonPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_colorButtonPerformed\r\n    if ((drawing) != null) {\r\n        Color color = getColorChooser().showDialog(this, labels.getString(\"attribute.backgroundColor\"), AttributeKeys.CANVAS_FILL_COLOR.get(drawing));\r\n        colorButton.setBackground(color);\r\n        updateDrawing();\r\n    }\r\n}// GEN-LAST:event_colorButtonPerformed\r\n'),(3177,'getColorChooser()','org.jhotdraw.draw.action.EditCanvasPanel.getColorChooser()','306','org.jhotdraw.draw.action.EditCanvasPanel','private JColorChooser getColorChooser() {\r\n    if ((colorChooser) == null) {\r\n        colorChooser = new JColorChooser();\r\n    }\r\n    return colorChooser;\r\n}'),(3178,'getDrawing()','org.jhotdraw.draw.action.EditCanvasPanel.getDrawing()','306','org.jhotdraw.draw.action.EditCanvasPanel','/**\r\n * Returns the GridConstrainer currently being edited by this panel.\r\n *\r\n * @return The GridConstrainer.\r\n */\r\npublic Drawing getDrawing() {\r\n    return drawing;\r\n}'),(3179,'initComponents()','org.jhotdraw.draw.action.EditCanvasPanel.initComponents()','306','org.jhotdraw.draw.action.EditCanvasPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    bgColorButtonGroup = new ButtonGroup();\r\n    colorLabel = new JLabel();\r\n    colorButton = new JButton();\r\n    opacityLabel = new JLabel();\r\n    opacityField = new JAttributeTextField<Double>();\r\n    opacityPopupButton = new JPopupButton();\r\n    setLayout(new GridBagLayout());\r\n    colorLabel.setText(labels.getString(\"attribute.canvasFillColor.text\"));// NOI18N\r\n\r\n    colorLabel.setToolTipText(labels.getString(\"attribute.backgroundColor.toolTipText\"));// NOI18N\r\n\r\n    add(colorLabel, new GridBagConstraints());\r\n    colorButton.setText(\" \");\r\n    colorButton.setToolTipText(labels.getString(\"attribute.backgroundColor.toolTipText\"));// NOI18N\r\n\r\n    colorButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            colorButtonPerformed(evt);\r\n        }\r\n    });\r\n    add(colorButton, new GridBagConstraints());\r\n    opacityLabel.setIcon(new ImageIcon(getClass().getResource(\"/org/jhotdraw/draw/action/images/attributeOpacity.png\")));// NOI18N\r\n\r\n    opacityLabel.setToolTipText(labels.getString(\"attribute.opacity.toolTipText\"));// NOI18N\r\n\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.insets = new Insets(0, 10, 0, 0);\r\n    add(opacityLabel, gridBagConstraints);\r\n    opacityField.setColumns(3);\r\n    add(opacityField, new GridBagConstraints());\r\n    opacityPopupButton.setIcon(new ImageIcon(getClass().getResource(\"/org/jhotdraw/draw/action/images/popupIcon.png\")));// NOI18N\r\n\r\n    opacityPopupButton.setToolTipText(labels.getString(\"attribute.opacity.toolTipText\"));// NOI18N\r\n\r\n    add(opacityPopupButton, new GridBagConstraints());\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3180,'main(java.lang.String[])','org.jhotdraw.draw.action.EditCanvasPanel.main(java.lang.String[])','306','org.jhotdraw.draw.action.EditCanvasPanel','public static void main(String[] args) {\r\n    try {\r\n        UIManager.setLookAndFeel(new QuaquaLookAndFeel());\r\n    } catch (UnsupportedLookAndFeelException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n    JFrame f = new JFrame(\"Drawing Settings2\");\r\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    f.add(new EditCanvasPanel());\r\n    f.pack();\r\n    f.setVisible(true);\r\n}'),(3181,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.draw.action.EditCanvasPanel.setDrawing(org.jhotdraw.draw.Drawing)','306','org.jhotdraw.draw.action.EditCanvasPanel','/**\r\n * Sets the GridConstrainer to be edited by this panel.\r\n *\r\n * @param newValue\r\n * 		The GridConstrainer.\r\n */\r\npublic void setDrawing(Drawing newValue) {\r\n    drawing = newValue;\r\n    // XXX - This does not work, we must pass the drawing editor here!\r\n    opacitySliderHandler.setDrawing(drawing);\r\n    opacityFieldHandler.setDrawing(drawing);\r\n    updatePanel();\r\n}'),(3182,'updateDrawing()','org.jhotdraw.draw.action.EditCanvasPanel.updateDrawing()','306','org.jhotdraw.draw.action.EditCanvasPanel','/**\r\n * Updates the drawing due to changes made on this panel.\r\n */\r\nprivate void updateDrawing() {\r\n    if ((drawing) != null) {\r\n        drawing.fireUndoableEditHappened(AttributeKeys.CANVAS_FILL_COLOR.setUndoable(drawing, colorButton.getBackground()));\r\n    }\r\n}'),(3183,'updatePanel()','org.jhotdraw.draw.action.EditCanvasPanel.updatePanel()','306','org.jhotdraw.draw.action.EditCanvasPanel','/**\r\n * Updates the panel due to changes made on the drawing.\r\n */\r\nprivate void updatePanel() {\r\n    if ((drawing) != null) {\r\n        colorButton.setBackground(AttributeKeys.CANVAS_FILL_COLOR.get(drawing));\r\n    }\r\n}'),(3184,'-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.EditGridAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)','307','org.jhotdraw.draw.action.EditGridAction','/**\r\n * Creates a new instance.\r\n */\r\npublic EditGridAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditGridAction.ID);\r\n}'),(3185,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.EditGridAction.actionPerformed(java.awt.event.ActionEvent)','307','org.jhotdraw.draw.action.EditGridAction','public void actionPerformed(ActionEvent e) {\r\n    getDialog().setVisible(true);\r\n}'),(3186,'getApplication()','org.jhotdraw.draw.action.EditGridAction.getApplication()','307','org.jhotdraw.draw.action.EditGridAction','protected Application getApplication() {\r\n    return app;\r\n}'),(3187,'getDialog()','org.jhotdraw.draw.action.EditGridAction.getDialog()','307','org.jhotdraw.draw.action.EditGridAction','protected JDialog getDialog() {\r\n    if ((dialog) == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        dialog = new JDialog();\r\n        dialog.setTitle(labels.getString(\"editGrid\"));\r\n        dialog.setResizable(false);\r\n        settingsPanel = new EditGridPanel();\r\n        dialog.add(settingsPanel);\r\n        dialog.pack();\r\n        Preferences prefs = Preferences.userNodeForPackage(getClass());\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"editGrid\", dialog);\r\n        getApplication().addWindow(dialog, null);\r\n    }\r\n    settingsPanel.setConstrainer(((GridConstrainer) (getView().getVisibleConstrainer())));\r\n    return dialog;\r\n}'),(3188,'updateViewState()','org.jhotdraw.draw.action.EditGridAction.updateViewState()','307','org.jhotdraw.draw.action.EditGridAction','@Override\r\nprotected void updateViewState() {\r\n    if (((getView()) != null) && ((settingsPanel) != null)) {\r\n        settingsPanel.setConstrainer(((GridConstrainer) (getView().getVisibleConstrainer())));\r\n    }\r\n}'),(3189,'-init-()','org.jhotdraw.draw.action.EditGridPanel.-init-()','308','org.jhotdraw.draw.action.EditGridPanel','/**\r\n * Creates new instance.\r\n */\r\npublic EditGridPanel() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    initComponents();\r\n    widthField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0, 1000, 1));\r\n    heightField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0, 1000, 1));\r\n    thetaField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0, 180, 1));\r\n    constrainer = new GridConstrainer(10, 10);\r\n    widthField.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(\"value\")) {\r\n                if ((evt.getNewValue()) != null) {\r\n                    constrainer.setWidth(((Double) (evt.getNewValue())));\r\n                }\r\n            }\r\n        }\r\n    });\r\n    heightField.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(\"value\")) {\r\n                if ((evt.getNewValue()) != null) {\r\n                    constrainer.setHeight(((Double) (evt.getNewValue())));\r\n                }\r\n            }\r\n        }\r\n    });\r\n    thetaField.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(\"value\")) {\r\n                if ((evt.getNewValue()) != null) {\r\n                    constrainer.setTheta(((((Double) (evt.getNewValue())) * (Math.PI)) / 180.0));\r\n                }\r\n            }\r\n        }\r\n    });\r\n}'),(3190,'getConstrainer()','org.jhotdraw.draw.action.EditGridPanel.getConstrainer()','308','org.jhotdraw.draw.action.EditGridPanel','/**\r\n * Returns the GridConstrainer currently being edited by this panel.\r\n *\r\n * @return The GridConstrainer.\r\n */\r\npublic GridConstrainer getConstrainer() {\r\n    return constrainer;\r\n}'),(3191,'initComponents()','org.jhotdraw.draw.action.EditGridPanel.initComponents()','308','org.jhotdraw.draw.action.EditGridPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    widthLabel = new JLabel();\r\n    heightLabel = new JLabel();\r\n    widthField = new JLifeFormattedTextField();\r\n    heightField = new JLifeFormattedTextField();\r\n    thetaLabel = new JLabel();\r\n    thetaField = new JLifeFormattedTextField();\r\n    widthLabel.setText(labels.getString(\"view.grid.width.text\"));// NOI18N\r\n\r\n    heightLabel.setText(labels.getString(\"view.grid.height.text\"));// NOI18N\r\n\r\n    widthField.setColumns(5);\r\n    heightField.setColumns(5);\r\n    thetaLabel.setText(labels.getString(\"view.grid.theta.text\"));// NOI18N\r\n\r\n    thetaField.setColumns(5);\r\n    GroupLayout layout = new GroupLayout(this);\r\n    this.setLayout(layout);\r\n    layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(org.jdesktop.layout.GroupLayout, heightLabel).add(org.jdesktop.layout.GroupLayout, widthLabel).add(org.jdesktop.layout.GroupLayout, thetaLabel)).add(4, 4, 4).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(thetaField, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).add(heightField, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).add(widthField, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)).addContainerGap(67, Short.MAX_VALUE)));\r\n    layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(widthLabel).add(widthField, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)).addPreferredGap(RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(heightLabel).add(heightField, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)).addPreferredGap(RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(thetaLabel).add(thetaField, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)).addContainerGap(org.jdesktop.layout.GroupLayout, Short.MAX_VALUE)));\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3192,'setConstrainer(org.jhotdraw.draw.GridConstrainer)','org.jhotdraw.draw.action.EditGridPanel.setConstrainer(org.jhotdraw.draw.GridConstrainer)','308','org.jhotdraw.draw.action.EditGridPanel','/**\r\n * Sets the GridConstrainer to be edited by this panel.\r\n *\r\n * @param newValue\r\n * 		The GridConstrainer.\r\n */\r\npublic void setConstrainer(GridConstrainer newValue) {\r\n    constrainer = newValue;\r\n    widthField.setValue(constrainer.getWidth());\r\n    heightField.setValue(constrainer.getHeight());\r\n    thetaField.setValue((((constrainer.getTheta()) * 180.0) / (Math.PI)));\r\n}'),(3193,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','309','org.jhotdraw.draw.action.EditorColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(3194,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','309','org.jhotdraw.draw.action.EditorColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(3195,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','309','org.jhotdraw.draw.action.EditorColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(3196,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','309','org.jhotdraw.draw.action.EditorColorChooserAction','public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(3197,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)','org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)','309','org.jhotdraw.draw.action.EditorColorChooserAction','public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, fixedAttributes, name, icon);\r\n    this.key = key;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}'),(3198,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.EditorColorChooserAction.actionPerformed(java.awt.event.ActionEvent)','309','org.jhotdraw.draw.action.EditorColorChooserAction','@Override\r\npublic void actionPerformed(ActionEvent e) {\r\n    if ((EditorColorChooserAction.colorChooser) == null) {\r\n        EditorColorChooserAction.colorChooser = new JColorChooser();\r\n    }\r\n    Color initialColor = getInitialColor();\r\n    // FIXME - Reuse colorChooser object instead of calling static method here.\r\n    Color chosenColor = EditorColorChooserAction.colorChooser.showDialog(((Component) (e.getSource())), labels.getString(\"attribute.color.text\"), initialColor);\r\n    if (chosenColor != null) {\r\n        HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>(attributes);\r\n        attr.put(key, chosenColor);\r\n        applyAttributesTo(attr, getView().getSelectedFigures());\r\n    }\r\n}'),(3199,'getInitialColor()','org.jhotdraw.draw.action.EditorColorChooserAction.getInitialColor()','309','org.jhotdraw.draw.action.EditorColorChooserAction','protected Color getInitialColor() {\r\n    Color initialColor = ((Color) (getEditor().getDefaultAttribute(key)));\r\n    if (initialColor == null) {\r\n        initialColor = Color.red;\r\n    }\r\n    return initialColor;\r\n}'),(3200,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.action.EditorColorChooserAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','309','org.jhotdraw.draw.action.EditorColorChooserAction','public void selectionChanged(FigureSelectionEvent evt) {\r\n    // setEnabled(getView().getSelectionCount() > 0);\r\n}'),(3201,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)','org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)','310','org.jhotdraw.draw.action.EditorColorIcon','/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(3202,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)','org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)','310','org.jhotdraw.draw.action.EditorColorIcon','public EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(3203,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.draw.action.EditorColorIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','310','org.jhotdraw.draw.action.EditorColorIcon','public void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    super.paintIcon(c, g, x, y);\r\n    Color color = ((Color) (editor.getDefaultAttribute(key)));\r\n    if (color != null) {\r\n        g.setColor(color);\r\n        g.translate(x, y);\r\n        g.fill(colorShape);\r\n        g.translate((-x), (-y));\r\n    }\r\n}'),(3204,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)','org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)','311','org.jhotdraw.draw.action.FontChooserHandler','// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}'),(3205,'-init-()','org.jhotdraw.draw.action.FontChooserHandler.-init-()','311','org.jhotdraw.draw.action.FontChooserHandler','1() {\r\n}'),(3206,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.FontChooserHandler.actionPerformed(java.awt.event.ActionEvent)','311','org.jhotdraw.draw.action.FontChooserHandler','public void actionPerformed(ActionEvent evt) {\r\n    if ((evt.getActionCommand()) == (JFontChooser.APPROVE_SELECTION)) {\r\n        applySelectedFontToFigures();\r\n    } else\r\n        if ((evt.getActionCommand()) == (JFontChooser.CANCEL_SELECTION)) {\r\n        }\r\n\r\n    popupMenu.setVisible(false);\r\n}'),(3207,'applySelectedFontToFigures()','org.jhotdraw.draw.action.FontChooserHandler.applySelectedFontToFigures()','311','org.jhotdraw.draw.action.FontChooserHandler','protected void applySelectedFontToFigures() {\r\n    final ArrayList<Figure> selectedFigures = new ArrayList<Figure>(getView().getSelectedFigures());\r\n    final ArrayList<Object> restoreData = new ArrayList<Object>(selectedFigures.size());\r\n    for (Figure figure : selectedFigures) {\r\n        restoreData.add(figure.getAttributesRestoreData());\r\n        key.set(figure, fontChooser.getSelectedFont());\r\n    }\r\n    getEditor().setDefaultAttribute(key, fontChooser.getSelectedFont());\r\n    final Font undoValue = fontChooser.getSelectedFont();\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            return AttributeKeys.FONT_FACE.getPresentationName();\r\n            /* String name = (String) getValue(Actions.UNDO_PRESENTATION_NAME_KEY);\n            if (name == null) {\n            name = (String) getValue(AbstractAction.NAME);\n            }\n            if (name == null) {\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\n            name = labels.getString(\"attribute.text\");\n            }\n            return name;\n             */\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            Iterator<Object> iRestore = restoreData.iterator();\r\n            for (Figure figure : selectedFigures) {\r\n                figure.willChange();\r\n                figure.restoreAttributesTo(iRestore.next());\r\n                figure.changed();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            for (Figure figure : selectedFigures) {\r\n                restoreData.add(figure.getAttributesRestoreData());\r\n                figure.willChange();\r\n                key.basicSet(figure, undoValue);\r\n                figure.changed();\r\n            }\r\n        }\r\n    };\r\n    fireUndoableEditHappened(edit);\r\n}'),(3208,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.draw.action.FontChooserHandler.propertyChange(java.beans.PropertyChangeEvent)','311','org.jhotdraw.draw.action.FontChooserHandler','public void propertyChange(PropertyChangeEvent evt) {\r\n    if (((isUpdating)++) == 0) {\r\n        if ((evt.getPropertyName()) == (JFontChooser.SELECTED_FONT_PROPERTY)) {\r\n            applySelectedFontToFigures();\r\n        }\r\n    }\r\n    (isUpdating)--;\r\n}'),(3209,'updateEnabledState()','org.jhotdraw.draw.action.FontChooserHandler.updateEnabledState()','311','org.jhotdraw.draw.action.FontChooserHandler','@Override\r\nprotected void updateEnabledState() {\r\n    setEnabled(getEditor().isEnabled());\r\n    if ((((getView()) != null) && ((fontChooser) != null)) && ((popupMenu) != null)) {\r\n        fontChooser.setEnabled(((getView().getSelectionCount()) > 0));\r\n        popupMenu.setEnabled(((getView().getSelectionCount()) > 0));\r\n        (isUpdating)++;\r\n        /* && fontChooser.isShowing() */\r\n        if ((getView().getSelectionCount()) > 0) {\r\n            for (Figure f : getView().getSelectedFigures()) {\r\n                if (f instanceof TextHolderFigure) {\r\n                    TextHolderFigure thf = ((TextHolderFigure) (f));\r\n                    fontChooser.setSelectedFont(thf.getFont());\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        (isUpdating)--;\r\n    }\r\n}'),(3210,'-init-()','org.jhotdraw.draw.action.GenericListener.-init-()','313','org.jhotdraw.draw.action.GenericListener','1() {\r\n}'),(3211,'create(java.lang.Class,java.lang.String,java.lang.Object,java.lang.String)','org.jhotdraw.draw.action.GenericListener.create(java.lang.Class,java.lang.String,java.lang.Object,java.lang.String)','313','org.jhotdraw.draw.action.GenericListener','/**\r\n * A convenient version of <code>create(listenerMethod, targetObject, targetMethod)</code>.\r\n * This version looks up the listener and target Methods, so you dont have to.\r\n */\r\npublic static Object create(Class listenerInterface, String listenerMethodName, Object target, String targetMethodName) {\r\n    Method listenerMethod = GenericListener.getListenerMethod(listenerInterface, listenerMethodName);\r\n    // Search a target method with the same parameter types as the listener method.\r\n    Method targetMethod = GenericListener.getTargetMethod(target, targetMethodName, listenerMethod.getParameterTypes());\r\n    // Nothing found? Search a target method with no parameters\r\n    if (targetMethod == null) {\r\n        targetMethod = GenericListener.getTargetMethod(target, targetMethodName, new Class[0]);\r\n    }\r\n    // Still nothing found? We give up.\r\n    if (targetMethod == null) {\r\n        throw new RuntimeException((((\"no such method \" + targetMethodName) + \" in \") + (target.getClass())));\r\n    }\r\n    return GenericListener.create(listenerMethod, target, targetMethod);\r\n}'),(3212,'create(java.lang.reflect.Method,java.lang.Object,java.lang.reflect.Method)','org.jhotdraw.draw.action.GenericListener.create(java.lang.reflect.Method,java.lang.Object,java.lang.reflect.Method)','313','org.jhotdraw.draw.action.GenericListener','/**\r\n * Return an instance of a class that implements the interface that contains\r\n * the declaration for <code>listenerMethod</code>.  In this new class,\r\n * <code>listenerMethod</code> will apply <code>target.targetMethod</code>\r\n * to the incoming Event.\r\n */\r\npublic static Object create(final Method listenerMethod, final Object target, final Method targetMethod) {\r\n    /**\r\n     * The implementation of the create method uses the Dynamic Proxy API\r\n     * introduced in JDK 1.3.\r\n     *\r\n     * Create an instance of the DefaultInvoker and override the invoke\r\n     * method to handle the invoking the targetMethod on the target.\r\n     */\r\n    InvocationHandler handler = new GenericListener.DefaultInvoker() {\r\n        @Override\r\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n            // Send all methods except for the targetMethod to\r\n            // the superclass for handling.\r\n            if (listenerMethod.equals(method)) {\r\n                if ((targetMethod.getParameterTypes().length) == 0) {\r\n                    // Special treatment for parameterless target methods:\r\n                    return targetMethod.invoke(target, new Object[0]);\r\n                } else {\r\n                    // Regular treatment for target methods having the same\r\n                    // argument list as the listener method.\r\n                    return targetMethod.invoke(target, args);\r\n                }\r\n            } else {\r\n                return super.invoke(proxy, method, args);\r\n            }\r\n        }\r\n    };\r\n    Class cls = listenerMethod.getDeclaringClass();\r\n    ClassLoader cl = cls.getClassLoader();\r\n    return Proxy.newProxyInstance(cl, new Class[]{ cls }, handler);\r\n}'),(3213,'getListenerMethod(java.lang.Class,java.lang.String)','org.jhotdraw.draw.action.GenericListener.getListenerMethod(java.lang.Class,java.lang.String)','313','org.jhotdraw.draw.action.GenericListener','/* Helper methods for \"EZ\" version of create(): */\r\nprivate static Method getListenerMethod(Class listenerInterface, String listenerMethodName) {\r\n    // given the arguments to create(), find out which listener is desired:\r\n    Method[] m = listenerInterface.getMethods();\r\n    Method result = null;\r\n    for (int i = 0; i < (m.length); i++) {\r\n        if (listenerMethodName.equals(m[i].getName())) {\r\n            if (result != null) {\r\n                throw new RuntimeException((((\"ambiguous method: \" + (m[i])) + \" vs. \") + result));\r\n            }\r\n            result = m[i];\r\n        }\r\n    }\r\n    if (result == null) {\r\n        throw new RuntimeException((((\"no such method \" + listenerMethodName) + \" in \") + listenerInterface));\r\n    }\r\n    return result;\r\n}'),(3214,'getTargetMethod(java.lang.Object,java.lang.String,java.lang.Class[])','org.jhotdraw.draw.action.GenericListener.getTargetMethod(java.lang.Object,java.lang.String,java.lang.Class[])','313','org.jhotdraw.draw.action.GenericListener','@SuppressWarnings(\"unchecked\")\r\nprivate static Method getTargetMethod(Object target, String targetMethodName, Class[] parameterTypes) {\r\n    Method[] m = target.getClass().getMethods();\r\n    Method result = null;\r\n    eachMethod : for (int i = 0; i < (m.length); i++) {\r\n        if (!(targetMethodName.equals(m[i].getName())))\r\n            continue eachMethod;\r\n\r\n        Class[] p = m[i].getParameterTypes();\r\n        if ((p.length) != (parameterTypes.length))\r\n            continue eachMethod;\r\n\r\n        for (int j = 0; j < (p.length); j++) {\r\n            if (!(p[j].isAssignableFrom(parameterTypes[j])))\r\n                continue eachMethod;\r\n\r\n        }\r\n        if (result != null) {\r\n            throw new RuntimeException((((\"ambiguous method: \" + (m[i])) + \" vs. \") + result));\r\n        }\r\n        result = m[i];\r\n    }\r\n    /* if (result == null) {\n    throw new RuntimeException(\"no such method \"+targetMethodName+\" in \"+target.getClass());\n    }\n     */\r\n    if (result == null) {\r\n        return null;\r\n    }\r\n    Method publicResult = GenericListener.raiseToPublicClass(result);\r\n    if (publicResult != null)\r\n        result = publicResult;\r\n\r\n    return result;\r\n}'),(3215,'raiseToPublicClass(java.lang.reflect.Method)','org.jhotdraw.draw.action.GenericListener.raiseToPublicClass(java.lang.reflect.Method)','313','org.jhotdraw.draw.action.GenericListener','private static Method raiseToPublicClass(Method m) {\r\n    Class c = m.getDeclaringClass();\r\n    if ((Modifier.isPublic(m.getModifiers())) && (Modifier.isPublic(c.getModifiers())))\r\n        return m;\r\n    // yes!\r\n\r\n    // search for a public version which m overrides\r\n    Class sc = c.getSuperclass();\r\n    if (sc != null) {\r\n        Method sm = GenericListener.raiseToPublicClass(m, sc);\r\n        if (sm != null)\r\n            return sm;\r\n\r\n    }\r\n    Class[] ints = c.getInterfaces();\r\n    for (int i = 0; i < (ints.length); i++) {\r\n        Method im = GenericListener.raiseToPublicClass(m, ints[i]);\r\n        if (im != null)\r\n            return im;\r\n\r\n    }\r\n    // no public version of m here\r\n    return null;\r\n}'),(3216,'raiseToPublicClass(java.lang.reflect.Method,java.lang.Class)','org.jhotdraw.draw.action.GenericListener.raiseToPublicClass(java.lang.reflect.Method,java.lang.Class)','313','org.jhotdraw.draw.action.GenericListener','@SuppressWarnings(\"unchecked\")\r\nprivate static Method raiseToPublicClass(Method m, Class c) {\r\n    try {\r\n        Method sm = c.getMethod(m.getName(), m.getParameterTypes());\r\n        return GenericListener.raiseToPublicClass(sm);\r\n    } catch (NoSuchMethodException ee) {\r\n        return null;\r\n    }\r\n}'),(3217,'-init-()','org.jhotdraw.draw.action.GenericListener$DefaultInvoker.-init-()','312','org.jhotdraw.draw.action.GenericListener$DefaultInvoker','DefaultInvoker() {\r\n}'),(3218,'invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])','org.jhotdraw.draw.action.GenericListener$DefaultInvoker.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])','312','org.jhotdraw.draw.action.GenericListener$DefaultInvoker','public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n    if ((method.getDeclaringClass()) == (Object.class)) {\r\n        String methodName = method.getName();\r\n        if (methodName.equals(\"hashCode\")) {\r\n            return proxyHashCode(proxy);\r\n        } else\r\n            if (methodName.equals(\"equals\")) {\r\n                return proxyEquals(proxy, args[0]);\r\n            } else\r\n                if (methodName.equals(\"toString\")) {\r\n                    return proxyToString(proxy);\r\n                }\r\n\r\n\r\n    }\r\n    // Although listener methods are supposed to be void, we\r\n    // allow for any return type here and produce null/0/false\r\n    // as appropriate.\r\n    return GenericListener.DefaultInvoker.nullValueOf(method.getReturnType());\r\n}'),(3219,'nullValueOf(java.lang.Class)','org.jhotdraw.draw.action.GenericListener$DefaultInvoker.nullValueOf(java.lang.Class)','312','org.jhotdraw.draw.action.GenericListener$DefaultInvoker','private static final Object nullValueOf(Class rt) {\r\n    if (!(rt.isPrimitive())) {\r\n        return null;\r\n    } else\r\n        if (rt == (void.class)) {\r\n            return null;\r\n        } else\r\n            if (rt == (boolean.class)) {\r\n                return Boolean.FALSE;\r\n            } else\r\n                if (rt == (char.class)) {\r\n                    return GenericListener.DefaultInvoker.char_0;\r\n                } else {\r\n                    // this will convert to any other kind of number\r\n                    return GenericListener.DefaultInvoker.byte_0;\r\n                }\r\n\r\n\r\n\r\n}'),(3220,'proxyEquals(java.lang.Object,java.lang.Object)','org.jhotdraw.draw.action.GenericListener$DefaultInvoker.proxyEquals(java.lang.Object,java.lang.Object)','312','org.jhotdraw.draw.action.GenericListener$DefaultInvoker','protected Boolean proxyEquals(Object proxy, Object other) {\r\n    return proxy == other ? Boolean.TRUE : Boolean.FALSE;\r\n}'),(3221,'proxyHashCode(java.lang.Object)','org.jhotdraw.draw.action.GenericListener$DefaultInvoker.proxyHashCode(java.lang.Object)','312','org.jhotdraw.draw.action.GenericListener$DefaultInvoker','protected Integer proxyHashCode(Object proxy) {\r\n    return new Integer(System.identityHashCode(proxy));\r\n}'),(3222,'proxyToString(java.lang.Object)','org.jhotdraw.draw.action.GenericListener$DefaultInvoker.proxyToString(java.lang.Object)','312','org.jhotdraw.draw.action.GenericListener$DefaultInvoker','protected String proxyToString(Object proxy) {\r\n    return ((proxy.getClass().getName()) + @) + (Integer.toHexString(proxy.hashCode()));\r\n}'),(3223,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor)','314','org.jhotdraw.draw.action.GroupAction','/**\r\n * Creates a new instance.\r\n */\r\npublic GroupAction(DrawingEditor editor) {\r\n    this(editor, new GroupFigure(), true);\r\n}'),(3224,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)','org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)','314','org.jhotdraw.draw.action.GroupAction','public GroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    this(editor, prototype, true);\r\n}'),(3225,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure,boolean)','org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure,boolean)','314','org.jhotdraw.draw.action.GroupAction','public GroupAction(DrawingEditor editor, CompositeFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isGroupingAction = isGroupingAction;\r\n    labels.configureAction(this, GroupAction.ID);\r\n    updateEnabledState();\r\n}'),(3226,'-init-()','org.jhotdraw.draw.action.GroupAction.-init-()','314','org.jhotdraw.draw.action.GroupAction','1() {\r\n}'),(3227,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.GroupAction.actionPerformed(java.awt.event.ActionEvent)','314','org.jhotdraw.draw.action.GroupAction','public void actionPerformed(ActionEvent e) {\r\n    if (isGroupingAction) {\r\n        if (canGroup()) {\r\n            final DrawingView view = getView();\r\n            final LinkedList<Figure> ungroupedFigures = new LinkedList<Figure>(view.getSelectedFigures());\r\n            final CompositeFigure group = ((CompositeFigure) (prototype.clone()));\r\n            UndoableEdit edit = new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    return labels.getString(\"edit.groupSelection.text\");\r\n                }\r\n\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    groupFigures(view, group, ungroupedFigures);\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    ungroupFigures(view, group);\r\n                    super.undo();\r\n                }\r\n\r\n                @Override\r\n                public boolean addEdit(UndoableEdit anEdit) {\r\n                    return super.addEdit(anEdit);\r\n                }\r\n            };\r\n            groupFigures(view, group, ungroupedFigures);\r\n            fireUndoableEditHappened(edit);\r\n        }\r\n    } else {\r\n        if (canUngroup()) {\r\n            final DrawingView view = getView();\r\n            final CompositeFigure group = ((CompositeFigure) (getView().getSelectedFigures().iterator().next()));\r\n            final LinkedList<Figure> ungroupedFigures = new LinkedList<Figure>();\r\n            UndoableEdit edit = new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    return labels.getString(\"edit.ungroupSelection.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    ungroupFigures(view, group);\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    groupFigures(view, group, ungroupedFigures);\r\n                    super.undo();\r\n                }\r\n            };\r\n            ungroupedFigures.addAll(ungroupFigures(view, group));\r\n            fireUndoableEditHappened(edit);\r\n        }\r\n    }\r\n}'),(3228,'canGroup()','org.jhotdraw.draw.action.GroupAction.canGroup()','314','org.jhotdraw.draw.action.GroupAction','protected boolean canGroup() {\r\n    return ((getView()) != null) && ((getView().getSelectionCount()) > 1);\r\n}'),(3229,'canUngroup()','org.jhotdraw.draw.action.GroupAction.canUngroup()','314','org.jhotdraw.draw.action.GroupAction','protected boolean canUngroup() {\r\n    return ((((getView()) != null) && ((getView().getSelectionCount()) == 1)) && ((prototype) != null)) && (getView().getSelectedFigures().iterator().next().getClass().equals(prototype.getClass()));\r\n}'),(3230,'groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)','org.jhotdraw.draw.action.GroupAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)','314','org.jhotdraw.draw.action.GroupAction','public void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    int index = view.getDrawing().indexOf(sorted.iterator().next());\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(index, group);\r\n    group.willChange();\r\n    for (Figure f : sorted) {\r\n        group.basicAdd(f);\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(3231,'ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)','org.jhotdraw.draw.action.GroupAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)','314','org.jhotdraw.draw.action.GroupAction','public Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    // XXX - This code is redundant with UngroupAction\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().basicAddAll(view.getDrawing().indexOf(group), figures);\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(figures);\r\n    return figures;\r\n}'),(3232,'updateEnabledState()','org.jhotdraw.draw.action.GroupAction.updateEnabledState()','314','org.jhotdraw.draw.action.GroupAction','@Override\r\nprotected void updateEnabledState() {\r\n    if ((getView()) != null) {\r\n        setEnabled((isGroupingAction ? canGroup() : canUngroup()));\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}'),(3233,'-init-(java.awt.Image,java.awt.Insets)','org.jhotdraw.draw.action.ImageBevelBorder.-init-(java.awt.Image,java.awt.Insets)','315','org.jhotdraw.draw.action.ImageBevelBorder','/**\r\n * Creates a new instance with the given image and insets.\r\n * The image has the same insets as the border.\r\n */\r\npublic ImageBevelBorder(Image img, Insets borderInsets) {\r\n    this(img, borderInsets, borderInsets, true);\r\n}'),(3234,'-init-(java.awt.Image,java.awt.Insets,java.awt.Insets)','org.jhotdraw.draw.action.ImageBevelBorder.-init-(java.awt.Image,java.awt.Insets,java.awt.Insets)','315','org.jhotdraw.draw.action.ImageBevelBorder','/**\r\n * Creates a new instance with the given image and insets.\r\n * The image has different insets than the border.\r\n */\r\npublic ImageBevelBorder(Image img, Insets imageInsets, Insets borderInsets) {\r\n    this(img, imageInsets, borderInsets, true);\r\n}'),(3235,'-init-(java.awt.Image,java.awt.Insets,java.awt.Insets,boolean)','org.jhotdraw.draw.action.ImageBevelBorder.-init-(java.awt.Image,java.awt.Insets,java.awt.Insets,boolean)','315','org.jhotdraw.draw.action.ImageBevelBorder','/**\r\n * Creates a new instance with the given image and insets.\r\n * The image has different insets than the border.\r\n */\r\npublic ImageBevelBorder(Image img, Insets imageInsets, Insets borderInsets, boolean fillContentArea) {\r\n    if (img instanceof BufferedImage) {\r\n        this.image = ((BufferedImage) (img));\r\n    } else {\r\n        Frame f = new Frame();\r\n        f.pack();\r\n        MediaTracker t = new MediaTracker(f);\r\n        t.addImage(img, 0);\r\n        try {\r\n            t.waitForAll();\r\n        } catch (InterruptedException e) {\r\n        }\r\n        image = new BufferedImage(img.getWidth(f), img.getHeight(f), BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D imgGraphics = image.createGraphics();\r\n        imgGraphics.drawImage(img, 0, 0, f);\r\n        imgGraphics.dispose();\r\n        f.dispose();\r\n    }\r\n    this.imageInsets = imageInsets;\r\n    this.borderInsets = borderInsets;\r\n    this.fillContentArea = fillContentArea;\r\n}'),(3236,'getBorderInsets(java.awt.Component)','org.jhotdraw.draw.action.ImageBevelBorder.getBorderInsets(java.awt.Component)','315','org.jhotdraw.draw.action.ImageBevelBorder','/**\r\n * Returns the insets of the border.\r\n *\r\n * @param c\r\n * 		the component for which this border insets value applies\r\n */\r\npublic Insets getBorderInsets(Component c) {\r\n    return ((Insets) (borderInsets.clone()));\r\n}'),(3237,'isBorderOpaque()','org.jhotdraw.draw.action.ImageBevelBorder.isBorderOpaque()','315','org.jhotdraw.draw.action.ImageBevelBorder','/**\r\n * Returns true if the border is opaque.\r\n * This implementation always returns false.\r\n */\r\npublic boolean isBorderOpaque() {\r\n    return false;\r\n}'),(3238,'paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','org.jhotdraw.draw.action.ImageBevelBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','315','org.jhotdraw.draw.action.ImageBevelBorder','/**\r\n * Paints the bevel image for the specified component with the\r\n * specified position and size.\r\n *\r\n * @param c\r\n * 		the component for which this border is being painted\r\n * @param gr\r\n * 		the paint graphics\r\n * @param x\r\n * 		the x position of the painted border\r\n * @param y\r\n * 		the y position of the painted border\r\n * @param width\r\n * 		the width of the painted border\r\n * @param height\r\n * 		the height of the painted border\r\n */\r\npublic void paintBorder(Component c, Graphics gr, int x, int y, int width, int height) {\r\n    if ((image) == null)\r\n        return;\r\n\r\n    // Cast Graphics to Graphics2D\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    // Set some variables for easy access of insets and image size\r\n    int top = imageInsets.top;\r\n    int left = imageInsets.left;\r\n    int bottom = imageInsets.bottom;\r\n    int right = imageInsets.right;\r\n    int imgWidth = image.getWidth();\r\n    int imgHeight = image.getHeight();\r\n    // Optimisation: Draw image directly if it fits into the component\r\n    if (fillContentArea) {\r\n        if ((width == imgWidth) && (height == imgHeight)) {\r\n            g.drawImage(image, x, y, c);\r\n            return;\r\n        }\r\n    }\r\n    // Optimisation: Remove insets, if image width or image height fits\r\n    if (width == imgWidth) {\r\n        left = imgWidth;\r\n        right = 0;\r\n    }\r\n    if (height == imgHeight) {\r\n        top = imgHeight;\r\n        bottom = 0;\r\n    }\r\n    // Adjust insets if component is too small\r\n    if (width < (left + right)) {\r\n        left = Math.min(left, (width / 2));// Math.max(0, left + (width - left - right) / 2);\r\n\r\n        right = width - left;\r\n    }\r\n    if (height < (top + bottom)) {\r\n        top = Math.min(top, (height / 2));// Math.max(0, top + (height - top - bottom) / 2);\r\n\r\n        bottom = height - top;\r\n    }\r\n    // Draw the Leads\r\n    if ((top > 0) && (left > 0)) {\r\n        g.drawImage(image, x, y, (x + left), (y + top), 0, 0, left, top, c);\r\n    }\r\n    if ((top > 0) && (right > 0)) {\r\n        // g.fillRect(x+width-right, y, x+width, y+top);\r\n        g.drawImage(image, ((x + width) - right), y, (x + width), (y + top), (imgWidth - right), 0, imgWidth, top, c);\r\n    }\r\n    if ((bottom > 0) && (left > 0)) {\r\n        g.drawImage(image, x, ((y + height) - bottom), (x + left), (y + height), 0, (imgHeight - bottom), left, imgHeight, c);\r\n    }\r\n    if ((bottom > 0) && (right > 0)) {\r\n        g.drawImage(image, ((x + width) - right), ((y + height) - bottom), (x + width), (y + height), (imgWidth - right), (imgHeight - bottom), imgWidth, imgHeight, c);\r\n    }\r\n    // Draw the edges\r\n    BufferedImage subImg = null;\r\n    TexturePaint paint;\r\n    // North\r\n    if ((top > 0) && ((left + right) < width)) {\r\n        subImg = image.getSubimage(left, 0, ((imgWidth - right) - left), top);\r\n        paint = new TexturePaint(subImg, new Rectangle((x + left), y, ((imgWidth - left) - right), top));\r\n        g.setPaint(paint);\r\n        g.fillRect((x + left), y, ((width - left) - right), top);\r\n    }\r\n    // South\r\n    if ((bottom > 0) && ((left + right) < width)) {\r\n        subImg = image.getSubimage(left, (imgHeight - bottom), ((imgWidth - right) - left), bottom);\r\n        paint = new TexturePaint(subImg, new Rectangle((x + left), ((y + height) - bottom), ((imgWidth - left) - right), bottom));\r\n        g.setPaint(paint);\r\n        g.fillRect((x + left), ((y + height) - bottom), ((width - left) - right), bottom);\r\n    }\r\n    // West\r\n    if ((left > 0) && ((top + bottom) < height)) {\r\n        subImg = image.getSubimage(0, top, left, ((imgHeight - top) - bottom));\r\n        paint = new TexturePaint(subImg, new Rectangle(x, (y + top), left, ((imgHeight - top) - bottom)));\r\n        g.setPaint(paint);\r\n        g.fillRect(x, (y + top), left, ((height - top) - bottom));\r\n    }\r\n    // East\r\n    if ((right > 0) && ((top + bottom) < height)) {\r\n        subImg = image.getSubimage((imgWidth - right), top, right, ((imgHeight - top) - bottom));\r\n        paint = new TexturePaint(subImg, new Rectangle(((x + width) - right), (y + top), right, ((imgHeight - top) - bottom)));\r\n        g.setPaint(paint);\r\n        g.fillRect(((x + width) - right), (y + top), right, ((height - top) - bottom));\r\n    }\r\n    // Fill the center\r\n    if (fillContentArea) {\r\n        g.setColor(Color.yellow);\r\n        if (((left + right) < width) && ((top + bottom) < height)) {\r\n            subImg = image.getSubimage(left, top, ((imgWidth - right) - left), ((imgHeight - top) - bottom));\r\n            paint = new TexturePaint(subImg, new Rectangle((x + left), (y + top), ((imgWidth - right) - left), ((imgHeight - top) - bottom)));\r\n            g.setPaint(paint);\r\n            g.fillRect((x + left), (y + top), ((width - right) - left), ((height - top) - bottom));\r\n        }\r\n    }\r\n}'),(3239,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction.-init-(org.jhotdraw.draw.DrawingEditor)','316','org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction','/**\r\n * Creates a new instance.\r\n */\r\npublic IncreaseHandleDetailLevelAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, IncreaseHandleDetailLevelAction.ID);\r\n    // putValue(AbstractAction.NAME, labels.getString(\"editSelectSame\"));\r\n    // putValue(AbstractAction.MNEMONIC_KEY, labels.getString(\"editSelectSameMnem\"));\r\n}'),(3240,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction.actionPerformed(java.awt.event.ActionEvent)','316','org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction','public void actionPerformed(ActionEvent e) {\r\n    increaseHandleDetaiLevel();\r\n}'),(3241,'increaseHandleDetaiLevel()','org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction.increaseHandleDetaiLevel()','316','org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction','public void increaseHandleDetaiLevel() {\r\n    DrawingView view = getView();\r\n    if (view != null) {\r\n        view.setHandleDetailLevel(((view.getHandleDetailLevel()) + 1));\r\n    }\r\n}'),(3242,'-init-(org.jhotdraw.draw.LineDecoration,boolean)','org.jhotdraw.draw.action.LineDecorationIcon.-init-(org.jhotdraw.draw.LineDecoration,boolean)','317','org.jhotdraw.draw.action.LineDecorationIcon','/**\r\n * Creates a new instance.\r\n */\r\npublic LineDecorationIcon(LineDecoration decoration, boolean isStartDecoration) {\r\n    lineFigure = new LineFigure();\r\n    lineFigure.setBounds(new Point2D.Double(2, 8), new Point2D.Double(23, 8));\r\n    if (isStartDecoration) {\r\n        AttributeKeys.START_DECORATION.basicSet(lineFigure, decoration);\r\n    } else {\r\n        AttributeKeys.END_DECORATION.basicSet(lineFigure, decoration);\r\n    }\r\n    AttributeKeys.STROKE_COLOR.basicSet(lineFigure, Color.black);\r\n}'),(3243,'getIconHeight()','org.jhotdraw.draw.action.LineDecorationIcon.getIconHeight()','317','org.jhotdraw.draw.action.LineDecorationIcon','public int getIconHeight() {\r\n    return 16;\r\n}'),(3244,'getIconWidth()','org.jhotdraw.draw.action.LineDecorationIcon.getIconWidth()','317','org.jhotdraw.draw.action.LineDecorationIcon','public int getIconWidth() {\r\n    return 25;\r\n}'),(3245,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.draw.action.LineDecorationIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','317','org.jhotdraw.draw.action.LineDecorationIcon','public void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    lineFigure.draw(g);\r\n}'),(3246,'-init-(org.jhotdraw.draw.DrawingEditor,int,int)','org.jhotdraw.draw.action.MoveAction.-init-(org.jhotdraw.draw.DrawingEditor,int,int)','322','org.jhotdraw.draw.action.MoveAction','/**\r\n * Creates a new instance.\r\n */\r\npublic MoveAction(DrawingEditor editor, int dx, int dy) {\r\n    super(editor);\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n}'),(3247,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveAction.-init-(org.jhotdraw.draw.DrawingEditor)','322','org.jhotdraw.draw.action.MoveAction','public East(DrawingEditor editor) {\r\n    super(editor, 1, 0);\r\n    labels.configureAction(this, MoveAction.East.ID);\r\n}'),(3248,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.MoveAction.actionPerformed(java.awt.event.ActionEvent)','322','org.jhotdraw.draw.action.MoveAction','public void actionPerformed(ActionEvent e) {\r\n    CompositeEdit edit;\r\n    AffineTransform tx = new AffineTransform();\r\n    tx.translate(dx, dy);\r\n    for (Figure f : getView().getSelectedFigures()) {\r\n        f.willChange();\r\n        f.transform(tx);\r\n        f.changed();\r\n    }\r\n    fireUndoableEditHappened(new TransformEdit(getView().getSelectedFigures(), tx));\r\n}'),(3249,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveAction$East.-init-(org.jhotdraw.draw.DrawingEditor)','318','org.jhotdraw.draw.action.MoveAction$East','public East(DrawingEditor editor) {\r\n    super(editor, 1, 0);\r\n    labels.configureAction(this, MoveAction.East.ID);\r\n}'),(3250,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveAction$North.-init-(org.jhotdraw.draw.DrawingEditor)','319','org.jhotdraw.draw.action.MoveAction$North','public North(DrawingEditor editor) {\r\n    super(editor, 0, (-1));\r\n    labels.configureAction(this, MoveAction.North.ID);\r\n}'),(3251,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveAction$South.-init-(org.jhotdraw.draw.DrawingEditor)','320','org.jhotdraw.draw.action.MoveAction$South','public South(DrawingEditor editor) {\r\n    super(editor, 0, 1);\r\n    labels.configureAction(this, MoveAction.South.ID);\r\n}'),(3252,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveAction$West.-init-(org.jhotdraw.draw.DrawingEditor)','321','org.jhotdraw.draw.action.MoveAction$West','public West(DrawingEditor editor) {\r\n    super(editor, (-1), 0);\r\n    labels.configureAction(this, MoveAction.West.ID);\r\n}'),(3253,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.TranslationDirection)','org.jhotdraw.draw.action.MoveConstrainedAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.TranslationDirection)','327','org.jhotdraw.draw.action.MoveConstrainedAction','/**\r\n * Creates a new instance.\r\n */\r\npublic MoveConstrainedAction(DrawingEditor editor, TranslationDirection dir) {\r\n    super(editor);\r\n    this.dir = dir;\r\n}'),(3254,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveConstrainedAction.-init-(org.jhotdraw.draw.DrawingEditor)','327','org.jhotdraw.draw.action.MoveConstrainedAction','public East(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.EAST);\r\n    labels.configureAction(this, MoveConstrainedAction.East.ID);\r\n}'),(3255,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.MoveConstrainedAction.actionPerformed(java.awt.event.ActionEvent)','327','org.jhotdraw.draw.action.MoveConstrainedAction','public void actionPerformed(ActionEvent e) {\r\n    if ((getView().getSelectionCount()) > 0) {\r\n        Rectangle2D.Double r = null;\r\n        for (Figure f : getView().getSelectedFigures()) {\r\n            if (r == null) {\r\n                r = f.getBounds();\r\n            } else {\r\n                r.add(f.getBounds());\r\n            }\r\n        }\r\n        Point2D.Double p0 = new Point2D.Double(r.x, r.y);\r\n        if ((getView().getConstrainer()) != null) {\r\n            getView().getConstrainer().translateRectangle(r, dir);\r\n        } else {\r\n            switch (dir) {\r\n                case NORTH :\r\n                    r.y -= 1;\r\n                    break;\r\n                case SOUTH :\r\n                    r.y += 1;\r\n                    break;\r\n                case WEST :\r\n                    r.x -= 1;\r\n                    break;\r\n                case EAST :\r\n                    r.x += 1;\r\n                    break;\r\n            }\r\n        }\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(((r.x) - (p0.x)), ((r.y) - (p0.y)));\r\n        for (Figure f : getView().getSelectedFigures()) {\r\n            if (f.isTransformable()) {\r\n                f.willChange();\r\n                f.transform(tx);\r\n                f.changed();\r\n            }\r\n        }\r\n        CompositeEdit edit;\r\n        fireUndoableEditHappened(new TransformEdit(getView().getSelectedFigures(), tx));\r\n    }\r\n}'),(3256,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveConstrainedAction$East.-init-(org.jhotdraw.draw.DrawingEditor)','323','org.jhotdraw.draw.action.MoveConstrainedAction$East','public East(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.EAST);\r\n    labels.configureAction(this, MoveConstrainedAction.East.ID);\r\n}'),(3257,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveConstrainedAction$North.-init-(org.jhotdraw.draw.DrawingEditor)','324','org.jhotdraw.draw.action.MoveConstrainedAction$North','public North(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.NORTH);\r\n    labels.configureAction(this, MoveConstrainedAction.North.ID);\r\n}'),(3258,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveConstrainedAction$South.-init-(org.jhotdraw.draw.DrawingEditor)','325','org.jhotdraw.draw.action.MoveConstrainedAction$South','public South(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.SOUTH);\r\n    labels.configureAction(this, MoveConstrainedAction.South.ID);\r\n}'),(3259,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.MoveConstrainedAction$West.-init-(org.jhotdraw.draw.DrawingEditor)','326','org.jhotdraw.draw.action.MoveConstrainedAction$West','public West(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.WEST);\r\n    labels.configureAction(this, MoveConstrainedAction.West.ID);\r\n}'),(3260,'-init-()','org.jhotdraw.draw.action.PaletteMenuItemUI.-init-()','328','org.jhotdraw.draw.action.PaletteMenuItemUI','/**\r\n * Creates a new instance.\r\n */\r\npublic PaletteMenuItemUI() {\r\n}'),(3261,'getPreferredMenuItemSize(javax.swing.JComponent,javax.swing.Icon,javax.swing.Icon,int)','org.jhotdraw.draw.action.PaletteMenuItemUI.getPreferredMenuItemSize(javax.swing.JComponent,javax.swing.Icon,javax.swing.Icon,int)','328','org.jhotdraw.draw.action.PaletteMenuItemUI','protected Dimension getPreferredMenuItemSize(JComponent c, Icon checkIcon, Icon arrowIcon, int defaultTextIconGap) {\r\n    JMenuItem b = ((JMenuItem) (c));\r\n    Icon icon = ((Icon) (b.getIcon()));\r\n    if (icon == null) {\r\n        return new Dimension(22, 22);\r\n    }\r\n    return new Dimension(((icon.getIconWidth()) + 2), ((icon.getIconHeight()) + 2));\r\n}'),(3262,'installDefaults()','org.jhotdraw.draw.action.PaletteMenuItemUI.installDefaults()','328','org.jhotdraw.draw.action.PaletteMenuItemUI','protected void installDefaults() {\r\n    super.installDefaults();\r\n    defaultTextIconGap = 0;// Should be from table\r\n\r\n    // menuItem.setBorderPainted(false);\r\n    // menuItem.setBorder(null);\r\n    arrowIcon = null;\r\n    checkIcon = null;\r\n}'),(3263,'paint(java.awt.Graphics,javax.swing.JComponent)','org.jhotdraw.draw.action.PaletteMenuItemUI.paint(java.awt.Graphics,javax.swing.JComponent)','328','org.jhotdraw.draw.action.PaletteMenuItemUI','public void paint(Graphics g, JComponent c) {\r\n    JMenuItem b = ((JMenuItem) (c));\r\n    // Paint background\r\n    paintBackground(g, b, selectionBackground);\r\n    // Paint the icon\r\n    // ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    Icon icon = ((Icon) (b.getIcon()));\r\n    if (icon != null) {\r\n        icon.paintIcon(b, g, 1, 1);\r\n    }\r\n}'),(3264,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.PickAttributesAction.-init-(org.jhotdraw.draw.DrawingEditor)','329','org.jhotdraw.draw.action.PickAttributesAction','/**\r\n * Creates a new instance.\r\n */\r\npublic PickAttributesAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.pickAttributes\");\r\n    setEnabled(true);\r\n}'),(3265,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.PickAttributesAction.actionPerformed(java.awt.event.ActionEvent)','329','org.jhotdraw.draw.action.PickAttributesAction','public void actionPerformed(ActionEvent e) {\r\n    pickAttributes();\r\n}'),(3266,'pickAttributes()','org.jhotdraw.draw.action.PickAttributesAction.pickAttributes()','329','org.jhotdraw.draw.action.PickAttributesAction','@SuppressWarnings(\"unchecked\")\r\npublic void pickAttributes() {\r\n    DrawingEditor editor = getEditor();\r\n    Collection<Figure> selection = getView().getSelectedFigures();\r\n    if ((selection.size()) > 0) {\r\n        Figure figure = ((Figure) (selection.iterator().next()));\r\n        for (Map.Entry<AttributeKey, Object> entry : figure.getAttributes().entrySet()) {\r\n            if (!(excludedAttributes.contains(entry.getKey()))) {\r\n                editor.setDefaultAttribute(entry.getKey(), entry.getValue());\r\n            }\r\n        }\r\n    }\r\n}'),(3267,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.action.PickAttributesAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','329','org.jhotdraw.draw.action.PickAttributesAction','public void selectionChanged(FigureSelectionEvent evt) {\r\n    setEnabled(((getView().getSelectionCount()) == 1));\r\n}'),(3268,'setExcludedAttributes(java.util.Set)','org.jhotdraw.draw.action.PickAttributesAction.setExcludedAttributes(java.util.Set)','329','org.jhotdraw.draw.action.PickAttributesAction','/**\r\n * Set of attributes that is excluded when applying default attributes.\r\n * By default, the TRANSFORM attribute is excluded.\r\n */\r\npublic void setExcludedAttributes(Set<AttributeKey> a) {\r\n    this.excludedAttributes = a;\r\n}'),(3269,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.SelectSameAction.-init-(org.jhotdraw.draw.DrawingEditor)','330','org.jhotdraw.draw.action.SelectSameAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SelectSameAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, SelectSameAction.ID);\r\n    // putValue(AbstractAction.NAME, labels.getString(\"editSelectSame\"));\r\n    // putValue(AbstractAction.MNEMONIC_KEY, labels.getString(\"editSelectSameMnem\"));\r\n}'),(3270,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.SelectSameAction.actionPerformed(java.awt.event.ActionEvent)','330','org.jhotdraw.draw.action.SelectSameAction','public void actionPerformed(ActionEvent e) {\r\n    selectSame();\r\n}'),(3271,'selectSame()','org.jhotdraw.draw.action.SelectSameAction.selectSame()','330','org.jhotdraw.draw.action.SelectSameAction','public void selectSame() {\r\n    HashSet<Class> selectedClasses = new HashSet<Class>();\r\n    for (Figure selected : getView().getSelectedFigures()) {\r\n        selectedClasses.add(selected.getClass());\r\n    }\r\n    for (Figure f : getDrawing().getChildren()) {\r\n        if (selectedClasses.contains(f.getClass())) {\r\n            getView().addToSelection(f);\r\n        }\r\n    }\r\n}'),(3272,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)','331','org.jhotdraw.draw.action.SelectionColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(3273,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)','331','org.jhotdraw.draw.action.SelectionColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(3274,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)','331','org.jhotdraw.draw.action.SelectionColorChooserAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(3275,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)','331','org.jhotdraw.draw.action.SelectionColorChooserAction','public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(3276,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)','org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)','331','org.jhotdraw.draw.action.SelectionColorChooserAction','public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}'),(3277,'getInitialColor()','org.jhotdraw.draw.action.SelectionColorChooserAction.getInitialColor()','331','org.jhotdraw.draw.action.SelectionColorChooserAction','protected Color getInitialColor() {\r\n    Color initialColor = null;\r\n    DrawingView v = getEditor().getActiveView();\r\n    if ((v != null) && ((v.getSelectedFigures().size()) == 1)) {\r\n        Figure f = v.getSelectedFigures().iterator().next();\r\n        initialColor = key.get(f);\r\n    }\r\n    if (initialColor == null) {\r\n        initialColor = super.getInitialColor();\r\n    }\r\n    return initialColor;\r\n}'),(3278,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)','org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)','332','org.jhotdraw.draw.action.SelectionColorIcon','/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(3279,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)','org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)','332','org.jhotdraw.draw.action.SelectionColorIcon','public SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(3280,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.draw.action.SelectionColorIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','332','org.jhotdraw.draw.action.SelectionColorIcon','@Override\r\npublic void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    super.paintIcon(c, g, x, y);\r\n    Color color;\r\n    DrawingView view = editor.getActiveView();\r\n    if ((view != null) && ((view.getSelectedFigures().size()) == 1)) {\r\n        color = key.get(view.getSelectedFigures().iterator().next());\r\n    } else {\r\n        color = key.get(editor.getDefaultAttributes());\r\n    }\r\n    if (color != null) {\r\n        g.setColor(color);\r\n        g.translate(x, y);\r\n        g.fill(colorShape);\r\n        g.translate((-x), (-y));\r\n    }\r\n}'),(3281,'-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','org.jhotdraw.draw.action.SelectionComponentRepainter.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','333','org.jhotdraw.draw.action.SelectionComponentRepainter','public SelectionComponentRepainter(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if (editor != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.addPropertyChangeListener(this);\r\n            view.addFigureSelectionListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        editor.addPropertyChangeListener(this);\r\n    }\r\n}'),(3282,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.draw.action.SelectionComponentRepainter.attributeChanged(org.jhotdraw.draw.FigureEvent)','333','org.jhotdraw.draw.action.SelectionComponentRepainter','@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    component.repaint();\r\n}'),(3283,'dispose()','org.jhotdraw.draw.action.SelectionComponentRepainter.dispose()','333','org.jhotdraw.draw.action.SelectionComponentRepainter','public void dispose() {\r\n    if ((editor) != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.removePropertyChangeListener(this);\r\n            view.removeFigureSelectionListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().removeFigureListener(this);\r\n            }\r\n        }\r\n        editor.removePropertyChangeListener(this);\r\n        editor = null;\r\n    }\r\n    component = null;\r\n}'),(3284,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.draw.action.SelectionComponentRepainter.propertyChange(java.beans.PropertyChangeEvent)','333','org.jhotdraw.draw.action.SelectionComponentRepainter','public void propertyChange(PropertyChangeEvent evt) {\r\n    String name = evt.getPropertyName();\r\n    if (name == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n        DrawingView view = ((DrawingView) (evt.getOldValue()));\r\n        if (view != null) {\r\n            view.removePropertyChangeListener(this);\r\n            view.removeFigureSelectionListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().removeFigureListener(this);\r\n            }\r\n        }\r\n        view = ((DrawingView) (evt.getNewValue()));\r\n        if (view != null) {\r\n            view.addPropertyChangeListener(this);\r\n            view.addFigureSelectionListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        component.repaint();\r\n    } else\r\n        if (name == (DrawingView.DRAWING_PROPERTY)) {\r\n            Drawing drawing = ((Drawing) (evt.getOldValue()));\r\n            if (drawing != null) {\r\n                drawing.removeFigureListener(this);\r\n            }\r\n            drawing = ((Drawing) (evt.getNewValue()));\r\n            if (drawing != null) {\r\n                drawing.addFigureListener(this);\r\n            }\r\n            component.repaint();\r\n        } else {\r\n            component.repaint();\r\n        }\r\n\r\n}'),(3285,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.draw.action.SelectionComponentRepainter.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','333','org.jhotdraw.draw.action.SelectionComponentRepainter','public void selectionChanged(FigureSelectionEvent evt) {\r\n    component.repaint();\r\n}'),(3286,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.SendToBackAction.-init-(org.jhotdraw.draw.DrawingEditor)','334','org.jhotdraw.draw.action.SendToBackAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SendToBackAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, SendToBackAction.ID);\r\n}'),(3287,'-init-()','org.jhotdraw.draw.action.SendToBackAction.-init-()','334','org.jhotdraw.draw.action.SendToBackAction','1() {\r\n}'),(3288,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.SendToBackAction.actionPerformed(java.awt.event.ActionEvent)','334','org.jhotdraw.draw.action.SendToBackAction','public void actionPerformed(ActionEvent e) {\r\n    final DrawingView view = getView();\r\n    final LinkedList<Figure> figures = new LinkedList<Figure>(view.getSelectedFigures());\r\n    SendToBackAction.sendToBack(view, figures);\r\n    fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            return labels.getTextProperty(SendToBackAction.ID);\r\n        }\r\n\r\n        @Override\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            SendToBackAction.sendToBack(view, figures);\r\n        }\r\n\r\n        @Override\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            BringToFrontAction.bringToFront(view, figures);\r\n        }\r\n    });\r\n}'),(3289,'sendToBack(org.jhotdraw.draw.DrawingView,java.util.Collection)','org.jhotdraw.draw.action.SendToBackAction.sendToBack(org.jhotdraw.draw.DrawingView,java.util.Collection)','334','org.jhotdraw.draw.action.SendToBackAction','public static void sendToBack(DrawingView view, Collection figures) {\r\n    Iterator i = figures.iterator();\r\n    Drawing drawing = view.getDrawing();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        drawing.sendToBack(figure);\r\n    } \r\n}'),(3290,'-init-(java.awt.Stroke)','org.jhotdraw.draw.action.StrokeIcon.-init-(java.awt.Stroke)','335','org.jhotdraw.draw.action.StrokeIcon','/**\r\n * Creates a new instance.\r\n */\r\npublic StrokeIcon(Stroke stroke) {\r\n    this.stroke = stroke;\r\n}'),(3291,'getIconHeight()','org.jhotdraw.draw.action.StrokeIcon.getIconHeight()','335','org.jhotdraw.draw.action.StrokeIcon','public int getIconHeight() {\r\n    return 12;\r\n}'),(3292,'getIconWidth()','org.jhotdraw.draw.action.StrokeIcon.getIconWidth()','335','org.jhotdraw.draw.action.StrokeIcon','public int getIconWidth() {\r\n    return 40;\r\n}'),(3293,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.draw.action.StrokeIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','335','org.jhotdraw.draw.action.StrokeIcon','public void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setStroke(stroke);\r\n    g.setColor((c.isEnabled() ? Color.black : Color.GRAY));\r\n    g.drawLine(x, (y + ((getIconHeight()) / 2)), (x + (getIconWidth())), (y + ((getIconHeight()) / 2)));\r\n    /* g.setStroke(new BasicStroke());\n    g.setColor(Color.red);\n    g.drawLine(x, y, x + getIconWidth(), y + getIconHeight());\n     */\r\n}'),(3294,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.ToggleGridAction.-init-(org.jhotdraw.draw.DrawingEditor)','336','org.jhotdraw.draw.action.ToggleGridAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleGridAction(DrawingEditor editor) {\r\n    super(editor);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, ToggleGridAction.ID);\r\n    updateViewState();\r\n}'),(3295,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.ToggleGridAction.actionPerformed(java.awt.event.ActionEvent)','336','org.jhotdraw.draw.action.ToggleGridAction','public void actionPerformed(ActionEvent e) {\r\n    DrawingView view = getView();\r\n    if (view != null) {\r\n        view.setConstrainerVisible((!(view.isConstrainerVisible())));\r\n    }\r\n}'),(3296,'updateViewState()','org.jhotdraw.draw.action.ToggleGridAction.updateViewState()','336','org.jhotdraw.draw.action.ToggleGridAction','@Override\r\nprotected void updateViewState() {\r\n    DrawingView view = getView();\r\n    putValue(Actions.SELECTED_KEY, ((view != null) && (view.isConstrainerVisible())));\r\n}'),(3297,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor)','337','org.jhotdraw.draw.action.UngroupAction','/**\r\n * Creates a new instance.\r\n */\r\npublic UngroupAction(DrawingEditor editor) {\r\n    super(editor, new GroupFigure(), false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}'),(3298,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)','org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)','337','org.jhotdraw.draw.action.UngroupAction','public UngroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}'),(3299,'-init-()','org.jhotdraw.draw.action.VerticalGridLayout.-init-()','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Creates a grid layout with a default of one column per component,\r\n * in a single row.\r\n */\r\npublic VerticalGridLayout() {\r\n    this(1, 0, 0, 0);\r\n}'),(3300,'-init-(int,int)','org.jhotdraw.draw.action.VerticalGridLayout.-init-(int,int)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Creates a grid layout with the specified number of rows and\r\n * columns. All components in the layout are given equal size.\r\n * <p>\r\n * One, but not both, of <code>rows</code> and <code>cols</code> can\r\n * be zero, which means that any number of objects can be placed in a\r\n * row or in a column.\r\n *\r\n * @param rows\r\n * 		the rows, with the value zero meaning\r\n * 		any number of rows.\r\n * @param cols\r\n * 		the columns, with the value zero meaning\r\n * 		any number of columns.\r\n */\r\npublic VerticalGridLayout(int rows, int cols) {\r\n    this(rows, cols, 0, 0);\r\n}'),(3301,'-init-(int,int,boolean)','org.jhotdraw.draw.action.VerticalGridLayout.-init-(int,int,boolean)','338','org.jhotdraw.draw.action.VerticalGridLayout','public VerticalGridLayout(int rows, int cols, boolean isVertical) {\r\n    this(rows, cols, 0, 0, isVertical);\r\n}'),(3302,'-init-(int,int,int,int)','org.jhotdraw.draw.action.VerticalGridLayout.-init-(int,int,int,int)','338','org.jhotdraw.draw.action.VerticalGridLayout','public VerticalGridLayout(int rows, int cols, int hgap, int vgap) {\r\n    this(rows, cols, hgap, vgap, true);\r\n}'),(3303,'-init-(int,int,int,int,boolean)','org.jhotdraw.draw.action.VerticalGridLayout.-init-(int,int,int,int,boolean)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Creates a grid layout with the specified number of rows and\r\n * columns. All components in the layout are given equal size.\r\n * <p>\r\n * In addition, the horizontal and vertical gaps are set to the\r\n * specified values. Horizontal gaps are placed at the left and\r\n * right edges, and between each of the columns. Vertical gaps are\r\n * placed at the top and bottom edges, and between each of the rows.\r\n * <p>\r\n * One, but not both, of <code>rows</code> and <code>cols</code> can\r\n * be zero, which means that any number of objects can be placed in a\r\n * row or in a column.\r\n * <p>\r\n * All <code>VerticalGridLayout</code> constructors defer to this one.\r\n *\r\n * @param rows\r\n * 		the rows, with the value zero meaning\r\n * 		any number of rows\r\n * @param cols\r\n * 		the columns, with the value zero meaning\r\n * 		any number of columns\r\n * @param hgap\r\n * 		the horizontal gap\r\n * @param vgap\r\n * 		the vertical gap\r\n * @exception IllegalArgumentException  if the value of both\r\n<code>rows</code> and <code>cols</code> is\r\nset to zero\r\n */\r\npublic VerticalGridLayout(int rows, int cols, int hgap, int vgap, boolean isVertical) {\r\n    if ((rows == 0) && (cols == 0)) {\r\n        throw new IllegalArgumentException(\"rows and cols cannot both be zero\");\r\n    }\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.hgap = hgap;\r\n    this.vgap = vgap;\r\n    this.isVertical = isVertical;\r\n}'),(3304,'addLayoutComponent(java.lang.String,java.awt.Component)','org.jhotdraw.draw.action.VerticalGridLayout.addLayoutComponent(java.lang.String,java.awt.Component)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Adds the specified component with the specified name to the layout.\r\n *\r\n * @param name\r\n * 		the name of the component\r\n * @param comp\r\n * 		the component to be added\r\n */\r\npublic void addLayoutComponent(String name, Component comp) {\r\n}'),(3305,'getColumns()','org.jhotdraw.draw.action.VerticalGridLayout.getColumns()','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Gets the number of columns in this layout.\r\n *\r\n * @return the number of columns in this layout\r\n * @since JDK1.1\r\n */\r\npublic int getColumns() {\r\n    return cols;\r\n}'),(3306,'getHgap()','org.jhotdraw.draw.action.VerticalGridLayout.getHgap()','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Gets the horizontal gap between components.\r\n *\r\n * @return the horizontal gap between components\r\n * @since JDK1.1\r\n */\r\npublic int getHgap() {\r\n    return hgap;\r\n}'),(3307,'getRows()','org.jhotdraw.draw.action.VerticalGridLayout.getRows()','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Gets the number of rows in this layout.\r\n *\r\n * @return the number of rows in this layout\r\n * @since JDK1.1\r\n */\r\npublic int getRows() {\r\n    return rows;\r\n}'),(3308,'getVgap()','org.jhotdraw.draw.action.VerticalGridLayout.getVgap()','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Gets the vertical gap between components.\r\n *\r\n * @return the vertical gap between components\r\n * @since JDK1.1\r\n */\r\npublic int getVgap() {\r\n    return vgap;\r\n}'),(3309,'isVertical()','org.jhotdraw.draw.action.VerticalGridLayout.isVertical()','338','org.jhotdraw.draw.action.VerticalGridLayout','public boolean isVertical() {\r\n    return isVertical;\r\n}'),(3310,'layoutContainer(java.awt.Container)','org.jhotdraw.draw.action.VerticalGridLayout.layoutContainer(java.awt.Container)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Lays out the specified container using this layout.\r\n * <p>\r\n * This method reshapes the components in the specified target\r\n * container in order to satisfy the constraints of the\r\n * <code>VerticalGridLayout</code> object.\r\n * <p>\r\n * The grid layout manager determines the size of individual\r\n * components by dividing the free space in the container into\r\n * equal-sized portions according to the number of rows and columns\r\n * in the layout. The containers free space equals the containers\r\n * size minus any insets and any specified horizontal or vertical\r\n * gap. All components in a grid layout are given the same size.\r\n *\r\n * @param parent\r\n * 		the container in which to do the layout\r\n * @see java.awt.Container\r\n * @see java.awt.Container#doLayout\r\n */\r\npublic void layoutContainer(Container parent) {\r\n    synchronized(parent.getTreeLock()) {\r\n        Insets insets = parent.getInsets();\r\n        int ncomponents = parent.getComponentCount();\r\n        int nrows = rows;\r\n        int ncols = cols;\r\n        boolean ltr = parent.getComponentOrientation().isLeftToRight();\r\n        if (ncomponents == 0) {\r\n            return;\r\n        }\r\n        if (nrows > 0) {\r\n            ncols = ((ncomponents + nrows) - 1) / nrows;\r\n        } else {\r\n            nrows = ((ncomponents + ncols) - 1) / ncols;\r\n        }\r\n        int w = (parent.getWidth()) - ((insets.left) + (insets.right));\r\n        int h = (parent.getHeight()) - ((insets.top) + (insets.bottom));\r\n        w = (w - ((ncols - 1) * (hgap))) / ncols;\r\n        h = (h - ((nrows - 1) * (vgap))) / nrows;\r\n        int i;\r\n        if (ltr) {\r\n            for (int c = 0, x = insets.left; c < ncols; c++ , x += w + (hgap)) {\r\n                for (int r = 0, y = insets.top; r < nrows; r++ , y += h + (vgap)) {\r\n                    if (isVertical) {\r\n                        i = r + (c * nrows);\r\n                    } else {\r\n                        i = (r * ncols) + c;\r\n                    }\r\n                    if (i < ncomponents) {\r\n                        parent.getComponent(i).setBounds(x, y, w, h);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (int c = 0, x = ((parent.getWidth()) - (insets.right)) - w; c < ncols; c++ , x -= w + (hgap)) {\r\n                for (int r = 0, y = insets.top; r < nrows; r++ , y += h + (vgap)) {\r\n                    if (isVertical) {\r\n                        i = r + (c * nrows);\r\n                    } else {\r\n                        i = (r * ncols) + c;\r\n                    }\r\n                    if (i < ncomponents) {\r\n                        parent.getComponent(i).setBounds(x, y, w, h);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(3311,'minimumLayoutSize(java.awt.Container)','org.jhotdraw.draw.action.VerticalGridLayout.minimumLayoutSize(java.awt.Container)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Determines the minimum size of the container argument using this\r\n * grid layout.\r\n * <p>\r\n * The minimum width of a grid layout is the largest minimum width\r\n * of any of the components in the container times the number of columns,\r\n * plus the horizontal padding times the number of columns plus one,\r\n * plus the left and right insets of the target container.\r\n * <p>\r\n * The minimum height of a grid layout is the largest minimum height\r\n * of any of the components in the container times the number of rows,\r\n * plus the vertical padding times the number of rows plus one, plus\r\n * the top and bottom insets of the target container.\r\n *\r\n * @param parent\r\n * 		the container in which to do the layout\r\n * @return the minimum dimensions needed to lay out the\r\nsubcomponents of the specified container\r\n */\r\npublic Dimension minimumLayoutSize(Container parent) {\r\n    synchronized(parent.getTreeLock()) {\r\n        Insets insets = parent.getInsets();\r\n        int ncomponents = parent.getComponentCount();\r\n        int nrows = rows;\r\n        int ncols = cols;\r\n        if (nrows > 0) {\r\n            ncols = ((ncomponents + nrows) - 1) / nrows;\r\n        } else {\r\n            nrows = ((ncomponents + ncols) - 1) / ncols;\r\n        }\r\n        int w = 0;\r\n        int h = 0;\r\n        for (int i = 0; i < ncomponents; i++) {\r\n            Component comp = parent.getComponent(i);\r\n            Dimension d = comp.getMinimumSize();\r\n            if (w < (d.width)) {\r\n                w = d.width;\r\n            }\r\n            if (h < (d.height)) {\r\n                h = d.height;\r\n            }\r\n        }\r\n        return new Dimension(((((insets.left) + (insets.right)) + (ncols * w)) + ((ncols - 1) * (hgap))), ((((insets.top) + (insets.bottom)) + (nrows * h)) + ((nrows - 1) * (vgap))));\r\n    }\r\n}'),(3312,'preferredLayoutSize(java.awt.Container)','org.jhotdraw.draw.action.VerticalGridLayout.preferredLayoutSize(java.awt.Container)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Determines the preferred size of the container argument using\r\n * this grid layout.\r\n * <p>\r\n * The preferred width of a grid layout is the largest preferred\r\n * width of any of the components in the container times the number of\r\n * columns, plus the horizontal padding times the number of columns\r\n * plus one, plus the left and right insets of the target container.\r\n * <p>\r\n * The preferred height of a grid layout is the largest preferred\r\n * height of any of the components in the container times the number of\r\n * rows, plus the vertical padding times the number of rows plus one,\r\n * plus the top and bottom insets of the target container.\r\n *\r\n * @param parent\r\n * 		the container in which to do the layout\r\n * @return the preferred dimensions to lay out the\r\nsubcomponents of the specified container\r\n */\r\npublic Dimension preferredLayoutSize(Container parent) {\r\n    synchronized(parent.getTreeLock()) {\r\n        Insets insets = parent.getInsets();\r\n        int ncomponents = parent.getComponentCount();\r\n        int nrows = rows;\r\n        int ncols = cols;\r\n        if (nrows > 0) {\r\n            ncols = ((ncomponents + nrows) - 1) / nrows;\r\n        } else {\r\n            nrows = ((ncomponents + ncols) - 1) / ncols;\r\n        }\r\n        int w = 0;\r\n        int h = 0;\r\n        for (int i = 0; i < ncomponents; i++) {\r\n            Component comp = parent.getComponent(i);\r\n            Dimension d = comp.getPreferredSize();\r\n            if (w < (d.width)) {\r\n                w = d.width;\r\n            }\r\n            if (h < (d.height)) {\r\n                h = d.height;\r\n            }\r\n        }\r\n        return new Dimension(((((insets.left) + (insets.right)) + (ncols * w)) + ((ncols - 1) * (hgap))), ((((insets.top) + (insets.bottom)) + (nrows * h)) + ((nrows - 1) * (vgap))));\r\n    }\r\n}'),(3313,'removeLayoutComponent(java.awt.Component)','org.jhotdraw.draw.action.VerticalGridLayout.removeLayoutComponent(java.awt.Component)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Removes the specified component from the layout.\r\n *\r\n * @param comp\r\n * 		the component to be removed\r\n */\r\npublic void removeLayoutComponent(Component comp) {\r\n}'),(3314,'setColumns(int)','org.jhotdraw.draw.action.VerticalGridLayout.setColumns(int)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Sets the number of columns in this layout to the specified value.\r\n * Setting the number of columns has no affect on the layout\r\n * if the number of rows specified by a constructor or by\r\n * the <tt>setRows</tt> method is non-zero. In that case, the number\r\n * of columns displayed in the layout is determined by the total\r\n * number of components and the number of rows specified.\r\n *\r\n * @param cols\r\n * 		the number of columns in this layout\r\n * @exception IllegalArgumentException  if the value of both\r\n<code>rows</code> and <code>cols</code> is set to zero\r\n * @since JDK1.1\r\n */\r\npublic void setColumns(int cols) {\r\n    if ((cols == 0) && ((this.rows) == 0)) {\r\n        throw new IllegalArgumentException(\"rows and cols cannot both be zero\");\r\n    }\r\n    this.cols = cols;\r\n}'),(3315,'setHgap(int)','org.jhotdraw.draw.action.VerticalGridLayout.setHgap(int)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Sets the horizontal gap between components to the specified value.\r\n *\r\n * @param hgap\r\n * 		the horizontal gap between components\r\n * @since JDK1.1\r\n */\r\npublic void setHgap(int hgap) {\r\n    this.hgap = hgap;\r\n}'),(3316,'setRows(int)','org.jhotdraw.draw.action.VerticalGridLayout.setRows(int)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Sets the number of rows in this layout to the specified value.\r\n *\r\n * @param rows\r\n * 		the number of rows in this layout\r\n * @exception IllegalArgumentException  if the value of both\r\n<code>rows</code> and <code>cols</code> is set to zero\r\n * @since JDK1.1\r\n */\r\npublic void setRows(int rows) {\r\n    if ((rows == 0) && ((this.cols) == 0)) {\r\n        throw new IllegalArgumentException(\"rows and cols cannot both be zero\");\r\n    }\r\n    this.rows = rows;\r\n}'),(3317,'setVertical(boolean)','org.jhotdraw.draw.action.VerticalGridLayout.setVertical(boolean)','338','org.jhotdraw.draw.action.VerticalGridLayout','public void setVertical(boolean b) {\r\n    isVertical = b;\r\n}'),(3318,'setVgap(int)','org.jhotdraw.draw.action.VerticalGridLayout.setVgap(int)','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Sets the vertical gap between components to the specified value.\r\n *\r\n * @param vgap\r\n * 		the vertical gap between components\r\n * @since JDK1.1\r\n */\r\npublic void setVgap(int vgap) {\r\n    this.vgap = vgap;\r\n}'),(3319,'toString()','org.jhotdraw.draw.action.VerticalGridLayout.toString()','338','org.jhotdraw.draw.action.VerticalGridLayout','/**\r\n * Returns the string representation of this grid layouts values.\r\n *\r\n * @return a string representation of this grid layout\r\n */\r\npublic String toString() {\r\n    return (((((((((getClass().getName()) + \"[hgap=\") + (hgap)) + \",vgap=\") + (vgap)) + \",rows=\") + (rows)) + \",cols=\") + (cols)) + \"]\";\r\n}'),(3320,'-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)','org.jhotdraw.draw.action.ZoomAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)','339','org.jhotdraw.draw.action.ZoomAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {\r\n    this(((DrawingView) (null)), scaleFactor, button);\r\n    setEditor(editor);\r\n}'),(3321,'-init-(org.jhotdraw.draw.DrawingView,double,javax.swing.AbstractButton)','org.jhotdraw.draw.action.ZoomAction.-init-(org.jhotdraw.draw.DrawingView,double,javax.swing.AbstractButton)','339','org.jhotdraw.draw.action.ZoomAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomAction(DrawingView view, double scaleFactor, AbstractButton button) {\r\n    super(view);\r\n    this.scaleFactor = scaleFactor;\r\n    this.button = button;\r\n    label = ((int) (scaleFactor * 100)) + \" %\";\r\n    putValue(Action.DEFAULT, label);\r\n    putValue(Action.NAME, label);\r\n}'),(3322,'-init-()','org.jhotdraw.draw.action.ZoomAction.-init-()','339','org.jhotdraw.draw.action.ZoomAction','1() {\r\n}'),(3323,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.ZoomAction.actionPerformed(java.awt.event.ActionEvent)','339','org.jhotdraw.draw.action.ZoomAction','public void actionPerformed(ActionEvent e) {\r\n    if ((button) != null) {\r\n        button.setText(label);\r\n    }\r\n    final Rectangle vRect = getView().getComponent().getVisibleRect();\r\n    final double oldFactor = getView().getScaleFactor();\r\n    getView().setScaleFactor(scaleFactor);\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            if (vRect != null) {\r\n                vRect.x = ((int) (((vRect.x) / oldFactor) * (scaleFactor)));\r\n                vRect.y = ((int) (((vRect.y) / oldFactor) * (scaleFactor)));\r\n                vRect.width = ((int) (((vRect.width) / oldFactor) * (scaleFactor)));\r\n                vRect.height = ((int) (((vRect.height) / oldFactor) * (scaleFactor)));\r\n                vRect.x += (vRect.width) / 3;\r\n                vRect.y += (vRect.height) / 3;\r\n                vRect.width /= 3;\r\n                vRect.height /= 3;\r\n                getView().getComponent().scrollRectToVisible(vRect);\r\n            }\r\n        }\r\n    });\r\n}'),(3324,'-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)','org.jhotdraw.draw.action.ZoomEditorAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)','340','org.jhotdraw.draw.action.ZoomEditorAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {\r\n    this(editor, scaleFactor, button, true);\r\n}'),(3325,'-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton,boolean)','org.jhotdraw.draw.action.ZoomEditorAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton,boolean)','340','org.jhotdraw.draw.action.ZoomEditorAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button, boolean updateAllViews) {\r\n    super(editor);\r\n    this.scaleFactor = scaleFactor;\r\n    this.button = button;\r\n    this.updateAllViews = updateAllViews;\r\n    label = ((int) (scaleFactor * 100)) + \" %\";\r\n    putValue(Action.DEFAULT, label);\r\n    putValue(Action.NAME, label);\r\n}'),(3326,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.draw.action.ZoomEditorAction.actionPerformed(java.awt.event.ActionEvent)','340','org.jhotdraw.draw.action.ZoomEditorAction','public void actionPerformed(ActionEvent e) {\r\n    if ((button) != null) {\r\n        button.setText(label);\r\n    }\r\n    if (updateAllViews) {\r\n        for (DrawingView v : getEditor().getDrawingViews()) {\r\n            v.setScaleFactor(scaleFactor);\r\n        }\r\n    } else {\r\n        getView().setScaleFactor(scaleFactor);\r\n    }\r\n}'),(3327,'-init-()','org.jhotdraw.geom.Bezier.-init-()','341','org.jhotdraw.geom.Bezier','/**\r\n * Prevent instance creation.\r\n */\r\nprivate Bezier() {\r\n}'),(3328,'addCurveTo(java.awt.geom.Point2D$Double[],org.jhotdraw.geom.BezierPath,double,boolean)','org.jhotdraw.geom.Bezier.addCurveTo(java.awt.geom.Point2D$Double[],org.jhotdraw.geom.BezierPath,double,boolean)','341','org.jhotdraw.geom.Bezier','/**\r\n * Adds the curve to the bezier path.\r\n *\r\n * @param bezCurve\r\n * 		\r\n * @param bezierPath\r\n * 		\r\n */\r\nprivate static void addCurveTo(Point2D.Double[] bezCurve, BezierPath bezierPath, double errorSquared, boolean connectsCorners) {\r\n    BezierPath.Node lastNode = bezierPath.get(((bezierPath.size()) - 1));\r\n    double error = Math.sqrt(errorSquared);\r\n    if ((connectsCorners && (Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[1].x, bezCurve[1].y, error))) && (Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[2].x, bezCurve[2].y, error))) {\r\n        bezierPath.lineTo(bezCurve[3].x, bezCurve[3].y);\r\n    } else {\r\n        bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y, bezCurve[2].x, bezCurve[2].y, bezCurve[3].x, bezCurve[3].y);\r\n    }\r\n}'),(3329,'b0(double)','org.jhotdraw.geom.Bezier.b0(double)','341','org.jhotdraw.geom.Bezier','/**\r\n * B0, B1, B2, B3 :\r\n * 	Bezier multipliers\r\n */\r\nprivate static double b0(double u) {\r\n    double tmp = 1.0 - u;\r\n    return (tmp * tmp) * tmp;\r\n}'),(3330,'b1(double)','org.jhotdraw.geom.Bezier.b1(double)','341','org.jhotdraw.geom.Bezier','private static double b1(double u) {\r\n    double tmp = 1.0 - u;\r\n    return (3 * u) * (tmp * tmp);\r\n}'),(3331,'b2(double)','org.jhotdraw.geom.Bezier.b2(double)','341','org.jhotdraw.geom.Bezier','private static double b2(double u) {\r\n    double tmp = 1.0 - u;\r\n    return ((3 * u) * u) * tmp;\r\n}'),(3332,'b3(double)','org.jhotdraw.geom.Bezier.b3(double)','341','org.jhotdraw.geom.Bezier','private static double b3(double u) {\r\n    return (u * u) * u;\r\n}'),(3333,'bezierII(int,java.awt.geom.Point2D$Double[],double)','org.jhotdraw.geom.Bezier.bezierII(int,java.awt.geom.Point2D$Double[],double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Evaluate a Bezier curve at a particular parameter value.\r\n *\r\n * @param degree\r\n * 		The degree of the bezier curve.\r\n * @param V\r\n * 		Array of control points.\r\n * @param t\r\n * 		Parametric value to find point for.\r\n */\r\nprivate static Point2D.Double bezierII(int degree, Point2D.Double[] V, double t) {\r\n    int i;\r\n    int j;\r\n    Point2D.Double q;/* Point on curve at parameter t */\r\n\r\n    Point2D.Double[] vTemp;/* Local copy of control points */\r\n\r\n    /* Copy array */\r\n    vTemp = new Point2D.Double[degree + 1];\r\n    for (i = 0; i <= degree; i++) {\r\n        vTemp[i] = ((Point2D.Double) (V[i].clone()));\r\n    }\r\n    /* Triangle computation */\r\n    for (i = 1; i <= degree; i++) {\r\n        for (j = 0; j <= (degree - i); j++) {\r\n            vTemp[j].x = ((1.0 - t) * (vTemp[j].x)) + (t * (vTemp[(j + 1)].x));\r\n            vTemp[j].y = ((1.0 - t) * (vTemp[j].y)) + (t * (vTemp[(j + 1)].y));\r\n        }\r\n    }\r\n    q = vTemp[0];\r\n    return q;\r\n}'),(3334,'chordLengthParameterize(java.util.ArrayList,int,int)','org.jhotdraw.geom.Bezier.chordLengthParameterize(java.util.ArrayList,int,int)','341','org.jhotdraw.geom.Bezier','/**\r\n * Assign parameter values to digitized points\r\n * using relative distances between points.\r\n *\r\n * @param d\r\n * 		Digitized points.\r\n * @param first\r\n * 		Indice of first point of region in d.\r\n * @param last\r\n * 		Indice of last point of region in d.\r\n */\r\nprivate static double[] chordLengthParameterize(ArrayList<Point2D.Double> d, int first, int last) {\r\n    int i;\r\n    double[] u;/* Parameterization */\r\n\r\n    u = new double[(last - first) + 1];\r\n    u[0] = 0.0;\r\n    for (i = first + 1; i <= last; i++) {\r\n        u[(i - first)] = (u[((i - first) - 1)]) + (Bezier.v2DistanceBetween2Points(d.get(i), d.get((i - 1))));\r\n    }\r\n    for (i = first + 1; i <= last; i++) {\r\n        u[(i - first)] = (u[(i - first)]) / (u[(last - first)]);\r\n    }\r\n    return u;\r\n}'),(3335,'computeCenterTangent(java.util.ArrayList,int)','org.jhotdraw.geom.Bezier.computeCenterTangent(java.util.ArrayList,int)','341','org.jhotdraw.geom.Bezier','/**\r\n * Approximate unit tangents at \"center\" of digitized curve.\r\n *\r\n * @param d\r\n * 		Digitized points.\r\n * @param center\r\n * 		Index to \"center\" end of region.\r\n */\r\nprivate static Point2D.Double computeCenterTangent(ArrayList<Point2D.Double> d, int center) {\r\n    Point2D.Double V1 = new Point2D.Double();\r\n    Point2D.Double V2 = new Point2D.Double();\r\n    Point2D.Double tHatCenter = new Point2D.Double();\r\n    V1 = Bezier.v2SubII(d.get((center - 1)), d.get(center));\r\n    V2 = Bezier.v2SubII(d.get(center), d.get((center + 1)));\r\n    tHatCenter.x = ((V1.x) + (V2.x)) / 2.0;\r\n    tHatCenter.y = ((V1.y) + (V2.y)) / 2.0;\r\n    tHatCenter = Bezier.v2Normalize(tHatCenter);\r\n    return tHatCenter;\r\n}'),(3336,'computeLeftTangent(java.util.ArrayList,int)','org.jhotdraw.geom.Bezier.computeLeftTangent(java.util.ArrayList,int)','341','org.jhotdraw.geom.Bezier','/**\r\n * Approximate unit tangents at \"left\" endpoint of digitized curve.\r\n *\r\n * @param d\r\n * 		Digitized points.\r\n * @param end\r\n * 		Index to \"left\" end of region.\r\n */\r\nprivate static Point2D.Double computeLeftTangent(ArrayList<Point2D.Double> d, int end) {\r\n    Point2D.Double tHat1 = new Point2D.Double();\r\n    tHat1 = Bezier.v2SubII(d.get((end + 1)), d.get(end));\r\n    tHat1 = Bezier.v2Normalize(tHat1);\r\n    return tHat1;\r\n}'),(3337,'computeMaxError(java.util.ArrayList,int,int,java.awt.geom.Point2D$Double[],double[],int[])','org.jhotdraw.geom.Bezier.computeMaxError(java.util.ArrayList,int,int,java.awt.geom.Point2D$Double[],double[],int[])','341','org.jhotdraw.geom.Bezier','/**\r\n * Find the maximum squared distance of digitized points\r\n * to fitted curve.\r\n *\r\n * @param d\r\n * 		Digitized points.\r\n * @param first\r\n * 		Indice of first point of region in d.\r\n * @param last\r\n * 		Indice of last point of region in d.\r\n * @param bezCurve\r\n * 		Fitted Bezier curve\r\n * @param u\r\n * 		Parameterization of points*\r\n * @param splitPoint\r\n * 		Point of maximum error (input/output parameter, must be\r\n * 		an array of 1)\r\n */\r\nprivate static double computeMaxError(ArrayList<Point2D.Double> d, int first, int last, Point2D.Double[] bezCurve, double[] u, int[] splitPoint) {\r\n    int i;\r\n    double maxDist;/* Maximum error */\r\n\r\n    double dist;/* Current error */\r\n\r\n    Point2D.Double P = new Point2D.Double();/* Point on curve */\r\n\r\n    Point2D.Double v = new Point2D.Double();/* Vector from point to curve */\r\n\r\n    splitPoint[0] = ((last - first) + 1) / 2;\r\n    maxDist = 0.0;\r\n    for (i = first + 1; i < last; i++) {\r\n        P = Bezier.bezierII(3, bezCurve, u[(i - first)]);\r\n        v = Bezier.v2SubII(P, d.get(i));\r\n        dist = Bezier.v2SquaredLength(v);\r\n        if (dist >= maxDist) {\r\n            maxDist = dist;\r\n            splitPoint[0] = i;\r\n        }\r\n    }\r\n    return maxDist;\r\n}'),(3338,'computeRightTangent(java.util.ArrayList,int)','org.jhotdraw.geom.Bezier.computeRightTangent(java.util.ArrayList,int)','341','org.jhotdraw.geom.Bezier','/**\r\n * Approximate unit tangents at \"right\" endpoint of digitized curve.\r\n *\r\n * @param d\r\n * 		Digitized points.\r\n * @param end\r\n * 		Index to \"right\" end of region.\r\n */\r\nprivate static Point2D.Double computeRightTangent(ArrayList<Point2D.Double> d, int end) {\r\n    Point2D.Double tHat2 = new Point2D.Double();\r\n    tHat2 = Bezier.v2SubII(d.get((end - 1)), d.get(end));\r\n    tHat2 = Bezier.v2Normalize(tHat2);\r\n    return tHat2;\r\n}'),(3339,'findCorners(java.util.List,double,double)','org.jhotdraw.geom.Bezier.findCorners(java.util.List,double,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Finds corners in the provided point list, and returns their indices.\r\n *\r\n * @param digitizedPoints\r\n * 		List of digitized points.\r\n * @param minAngle\r\n * 		Minimal angle for corner points\r\n * @param minDistance\r\n * 		Minimal distance between a point and adjacent points\r\n * 		for corner detection\r\n * @return list of corner indices.\r\n */\r\npublic static ArrayList<Integer> findCorners(List<Point2D.Double> digitizedPoints, double minAngle, double minDistance) {\r\n    ArrayList<Integer> cornerIndices = new ArrayList<Integer>();\r\n    double squaredDistance = minDistance * minDistance;\r\n    int previousCorner = -1;\r\n    double previousCornerAngle = 0;\r\n    for (int i = 1, n = digitizedPoints.size(); i < (n - 1); i++) {\r\n        Point2D.Double p = digitizedPoints.get(i);\r\n        // search for a preceding point for corner detection\r\n        Point2D.Double prev = null;\r\n        boolean intersectsPreviousCorner = false;\r\n        for (int j = i - 1; j >= 0; j--) {\r\n            if ((j == previousCorner) || ((Bezier.v2SquaredDistanceBetween2Points(digitizedPoints.get(j), p)) >= squaredDistance)) {\r\n                prev = digitizedPoints.get(j);\r\n                intersectsPreviousCorner = j < previousCorner;\r\n                break;\r\n            }\r\n        }\r\n        if (prev == null) {\r\n            continue;\r\n        }\r\n        // search for a succeeding point for corner detection\r\n        Point2D.Double next = null;\r\n        for (int j = i + 1; j < n; j++) {\r\n            if ((Bezier.v2SquaredDistanceBetween2Points(digitizedPoints.get(j), p)) >= squaredDistance) {\r\n                next = digitizedPoints.get(j);\r\n                break;\r\n            }\r\n        }\r\n        if (next == null) {\r\n            continue;\r\n        }\r\n        double aPrev = Math.atan2(((prev.y) - (p.y)), ((prev.x) - (p.x)));\r\n        double aNext = Math.atan2(((next.y) - (p.y)), ((next.x) - (p.x)));\r\n        double angle = Math.abs((aPrev - aNext));\r\n        if ((angle < ((Math.PI) - minAngle)) || (angle > ((Math.PI) + minAngle))) {\r\n            if (intersectsPreviousCorner) {\r\n                cornerIndices.set(((cornerIndices.size()) - 1), i);\r\n            } else {\r\n                cornerIndices.add(i);\r\n            }\r\n            previousCorner = i;\r\n            previousCornerAngle = angle;\r\n        }\r\n    }\r\n    return cornerIndices;\r\n}'),(3340,'fitBezierPath(java.awt.geom.Point2D$Double[],double)','org.jhotdraw.geom.Bezier.fitBezierPath(java.awt.geom.Point2D$Double[],double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n * <p>\r\n * This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);\r\n *\r\n * @param digitizedPoints\r\n * 		digited points.\r\n * @param error\r\n * 		the maximal allowed error between the bezier path and the\r\n * 		digitized points.\r\n */\r\npublic static BezierPath fitBezierPath(Point2D.Double[] digitizedPoints, double error) {\r\n    return Bezier.fitBezierPath(Arrays.asList(digitizedPoints), error);\r\n}'),(3341,'fitBezierPath(java.util.List,double)','org.jhotdraw.geom.Bezier.fitBezierPath(java.util.List,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n *\r\n * @param digitizedPoints\r\n * 		digited points.\r\n * @param error\r\n * 		the maximal allowed error between the bezier path and the\r\n * 		digitized points.\r\n */\r\npublic static BezierPath fitBezierPath(List<Point2D.Double> digitizedPoints, double error) {\r\n    // Split into segments at corners\r\n    ArrayList<ArrayList<Point2D.Double>> segments = new ArrayList<ArrayList<Point2D.Double>>();\r\n    segments = Bezier.splitAtCorners(digitizedPoints, ((77 / 180.0) * (Math.PI)), (error * error));\r\n    // Clean up the data in the segments\r\n    for (int i = 0, n = segments.size(); i < n; i++) {\r\n        ArrayList<Point2D.Double> seg = segments.get(i);\r\n        seg = Bezier.removeClosePoints(seg, (error * 2));\r\n        seg = Bezier.reduceNoise(seg, 0.8);\r\n        segments.set(i, seg);\r\n    }\r\n    // Create fitted bezier path\r\n    BezierPath fittedPath = new BezierPath();\r\n    // Quickly deal with empty dataset\r\n    boolean isEmpty = false;\r\n    for (ArrayList<Point2D.Double> seg : segments) {\r\n        if (seg.isEmpty()) {\r\n            isEmpty = false;\r\n            break;\r\n        }\r\n    }\r\n    if (!isEmpty) {\r\n        // Process each segment of digitized points\r\n        double errorSquared = error * error;\r\n        for (ArrayList<Point2D.Double> seg : segments) {\r\n            switch (seg.size()) {\r\n                case 0 :\r\n                    break;\r\n                case 1 :\r\n                    fittedPath.add(new BezierPath.Node(seg.get(0)));\r\n                    break;\r\n                case 2 :\r\n                    if (fittedPath.isEmpty()) {\r\n                        fittedPath.add(new BezierPath.Node(seg.get(0)));\r\n                    }\r\n                    fittedPath.lineTo(seg.get(1).x, seg.get(1).y);\r\n                    break;\r\n                default :\r\n                    if (fittedPath.isEmpty()) {\r\n                        fittedPath.add(new BezierPath.Node(seg.get(0)));\r\n                    }\r\n                    /* Unit tangent vectors at endpoints */\r\n                    Point2D.Double tHat1 = new Point2D.Double();\r\n                    Point2D.Double tHat2 = new Point2D.Double();\r\n                    tHat1 = Bezier.computeLeftTangent(seg, 0);\r\n                    tHat2 = Bezier.computeRightTangent(seg, ((seg.size()) - 1));\r\n                    Bezier.fitCubic(seg, 0, ((seg.size()) - 1), tHat1, tHat2, errorSquared, fittedPath);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    return fittedPath;\r\n}'),(3342,'fitBezierPath(org.jhotdraw.geom.BezierPath,double)','org.jhotdraw.geom.Bezier.fitBezierPath(org.jhotdraw.geom.BezierPath,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n * <p>\r\n * This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);\r\n *\r\n * @param digitizedPoints\r\n * 		digited points.\r\n * @param error\r\n * 		the maximal allowed error between the bezier path and the\r\n * 		digitized points.\r\n */\r\npublic static BezierPath fitBezierPath(BezierPath digitizedPoints, double error) {\r\n    ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>(digitizedPoints.size());\r\n    for (BezierPath.Node n : digitizedPoints) {\r\n        d.add(new Point2D.Double(n.x[0], n.y[0]));\r\n    }\r\n    return Bezier.fitBezierPath(d, error);\r\n}'),(3343,'fitCubic(java.util.ArrayList,int,int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,org.jhotdraw.geom.BezierPath)','org.jhotdraw.geom.Bezier.fitCubic(java.util.ArrayList,int,int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,org.jhotdraw.geom.BezierPath)','341','org.jhotdraw.geom.Bezier','/**\r\n * Fit one or multiple subsequent cubic bezier curves to a (sub)set of\r\n * digitized points. The digitized points represent a smooth curve without\r\n * corners.\r\n *\r\n * @param d\r\n * 		Array of digitized points. Must not contain subsequent\r\n * 		coincident points.\r\n * @param first\r\n * 		Indice of first point in d.\r\n * @param last\r\n * 		Indice of last point in d.\r\n * @param tHat1\r\n * 		Unit tangent vectors at start point.\r\n * @param tHat2\r\n * 		Unit tanget vector at end point.\r\n * @param errorSquared\r\n * 		User-defined errorSquared squared.\r\n * @param bezierPath\r\n * 		Path to which the bezier curve segments are added.\r\n */\r\nprivate static void fitCubic(ArrayList<Point2D.Double> d, int first, int last, Point2D.Double tHat1, Point2D.Double tHat2, double errorSquared, BezierPath bezierPath) {\r\n    Point2D.Double[] bezCurve;/* Control points of fitted Bezier curve */\r\n\r\n    double[] u;/* Parameter values for point */\r\n\r\n    double maxError;/* Maximum fitting errorSquared */\r\n\r\n    int[] splitPoint = new int[1];/* Point to split point set at.\n    This is an array of size one, because we need it as an input/output parameter.\n     */\r\n\r\n    int nPts;/* Number of points in subset */\r\n\r\n    double iterationError;/* Error below which you try iterating */\r\n\r\n    int maxIterations = 4;/* Max times to try iterating */\r\n\r\n    Point2D.Double tHatCenter = new Point2D.Double();/* Unit tangent vector at splitPoint */\r\n\r\n    int i;\r\n    // clone unit tangent vectors, so that we can alter their coordinates\r\n    // without affecting the input values.\r\n    tHat1 = ((Point2D.Double) (tHat1.clone()));\r\n    tHat2 = ((Point2D.Double) (tHat2.clone()));\r\n    iterationError = errorSquared * errorSquared;\r\n    nPts = (last - first) + 1;\r\n    /* Use heuristic if region only has two points in it */\r\n    if (nPts == 2) {\r\n        double dist = (Bezier.v2DistanceBetween2Points(d.get(last), d.get(first))) / 3.0;\r\n        bezCurve = new Point2D.Double[4];\r\n        for (i = 0; i < (bezCurve.length); i++) {\r\n            bezCurve[i] = new Point2D.Double();\r\n        }\r\n        bezCurve[0] = d.get(first);\r\n        bezCurve[3] = d.get(last);\r\n        Bezier.v2Add(bezCurve[0], Bezier.v2Scale(tHat1, dist), bezCurve[1]);\r\n        Bezier.v2Add(bezCurve[3], Bezier.v2Scale(tHat2, dist), bezCurve[2]);\r\n        bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y, bezCurve[2].x, bezCurve[2].y, bezCurve[3].x, bezCurve[3].y);\r\n        return;\r\n    }\r\n    /* Parameterize points, and attempt to fit curve */\r\n    u = Bezier.chordLengthParameterize(d, first, last);\r\n    bezCurve = Bezier.generateBezier(d, first, last, u, tHat1, tHat2);\r\n    /* Find max deviation of points to fitted curve */\r\n    maxError = Bezier.computeMaxError(d, first, last, bezCurve, u, splitPoint);\r\n    if (maxError < errorSquared) {\r\n        Bezier.addCurveTo(bezCurve, bezierPath, errorSquared, ((first == 0) && (last == ((d.size()) - 1))));\r\n        return;\r\n    }\r\n    /* If errorSquared not too large, try some reparameterization */\r\n    /* and iteration */\r\n    if (maxError < iterationError) {\r\n        double[] uPrime;/* Improved parameter values */\r\n\r\n        for (i = 0; i < maxIterations; i++) {\r\n            uPrime = Bezier.reparameterize(d, first, last, u, bezCurve);\r\n            bezCurve = Bezier.generateBezier(d, first, last, uPrime, tHat1, tHat2);\r\n            maxError = Bezier.computeMaxError(d, first, last, bezCurve, uPrime, splitPoint);\r\n            if (maxError < errorSquared) {\r\n                Bezier.addCurveTo(bezCurve, bezierPath, errorSquared, ((first == 0) && (last == ((d.size()) - 1))));\r\n                return;\r\n            }\r\n            u = uPrime;\r\n        }\r\n    }\r\n    /* Fitting failed -- split at max errorSquared point and fit recursively */\r\n    tHatCenter = Bezier.computeCenterTangent(d, splitPoint[0]);\r\n    if (first < (splitPoint[0])) {\r\n        Bezier.fitCubic(d, first, splitPoint[0], tHat1, tHatCenter, errorSquared, bezierPath);\r\n    } else {\r\n        bezierPath.lineTo(d.get(splitPoint[0]).x, d.get(splitPoint[0]).y);\r\n        // System.err.println(\"Cant split any further \" + first + \"..\" + splitPoint[0]);\r\n    }\r\n    Bezier.v2Negate(tHatCenter);\r\n    if ((splitPoint[0]) < last) {\r\n        Bezier.fitCubic(d, splitPoint[0], last, tHatCenter, tHat2, errorSquared, bezierPath);\r\n    } else {\r\n        bezierPath.lineTo(d.get(last).x, d.get(last).y);\r\n        // System.err.println(\"Cant split any further \" + splitPoint[0] + \"..\" + last);\r\n    }\r\n}'),(3344,'generateBezier(java.util.ArrayList,int,int,double[],java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.generateBezier(java.util.ArrayList,int,int,double[],java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Use least-squares method to find Bezier control points for region.\r\n *\r\n * @param d\r\n * 		Array of digitized points.\r\n * @param first\r\n * 		Indice of first point in d.\r\n * @param last\r\n * 		Indice of last point in d.\r\n * @param uPrime\r\n * 		Parameter values for region .\r\n * @param tHat1\r\n * 		Unit tangent vectors at start point.\r\n * @param tHat2\r\n * 		Unit tanget vector at end point.\r\n * @return A cubic bezier curve consisting of 4 control points.\r\n */\r\nprivate static Point2D.Double[] generateBezier(ArrayList<Point2D.Double> d, int first, int last, double[] uPrime, Point2D.Double tHat1, Point2D.Double tHat2) {\r\n    Point2D.Double[] bezCurve;\r\n    bezCurve = new Point2D.Double[4];\r\n    for (int i = 0; i < (bezCurve.length); i++) {\r\n        bezCurve[i] = new Point2D.Double();\r\n    }\r\n    /* Use the Wu/Barsky heuristic */\r\n    double dist = (Bezier.v2DistanceBetween2Points(d.get(last), d.get(first))) / 3.0;\r\n    bezCurve[0] = d.get(first);\r\n    bezCurve[3] = d.get(last);\r\n    Bezier.v2Add(bezCurve[0], Bezier.v2Scale(tHat1, dist), bezCurve[1]);\r\n    Bezier.v2Add(bezCurve[3], Bezier.v2Scale(tHat2, dist), bezCurve[2]);\r\n    return bezCurve;\r\n}'),(3345,'main(java.lang.String[])','org.jhotdraw.geom.Bezier.main(java.lang.String[])','341','org.jhotdraw.geom.Bezier','public static void main(String[] args) {\r\n    ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>();\r\n    d.add(new Point2D.Double(0, 0));\r\n    d.add(new Point2D.Double(5, 1));\r\n    d.add(new Point2D.Double(10, 0));\r\n    d.add(new Point2D.Double(10, 10));\r\n    d.add(new Point2D.Double(0, 10));\r\n    d.add(new Point2D.Double(0, 0));\r\n    ArrayList<ArrayList<Point2D.Double>> segments = Bezier.splitAtCorners(d, ((45 / 180.0) * (Math.PI)), 2.0);\r\n    for (ArrayList<Point2D.Double> seg : segments) {\r\n        for (int i = 0; i < 2; i++) {\r\n            seg = Bezier.reduceNoise(seg, 0.8);\r\n        }\r\n    }\r\n}'),(3346,'newtonRaphsonRootFind(java.awt.geom.Point2D$Double[],java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.Bezier.newtonRaphsonRootFind(java.awt.geom.Point2D$Double[],java.awt.geom.Point2D$Double,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Use Newton-Raphson iteration to find better root.\r\n *\r\n * @param Q\r\n * 		Current fitted bezier curve.\r\n * @param P\r\n * 		Digitized point.\r\n * @param u\r\n * 		Parameter value vor P.\r\n */\r\nprivate static double newtonRaphsonRootFind(Point2D.Double[] Q, Point2D.Double P, double u) {\r\n    double numerator;\r\n    double denominator;\r\n    Point2D.Double[] Q1 = new Point2D.Double[3];/* Q and Q */\r\n\r\n    Point2D.Double[] Q2 = new Point2D.Double[2];\r\n    Point2D.Double Q_u = new Point2D.Double();/* u evaluated at Q, Q, & Q */\r\n\r\n    Point2D.Double Q1_u = new Point2D.Double();\r\n    Point2D.Double Q2_u = new Point2D.Double();\r\n    double uPrime;/* Improved u */\r\n\r\n    int i;\r\n    /* Compute Q(u) */\r\n    Q_u = Bezier.bezierII(3, Q, u);\r\n    /* Generate control vertices for Q */\r\n    for (i = 0; i <= 2; i++) {\r\n        Q1[i] = new Point2D.Double((((Q[(i + 1)].x) - (Q[i].x)) * 3.0), (((Q[(i + 1)].y) - (Q[i].y)) * 3.0));\r\n    }\r\n    /* Generate control vertices for Q */\r\n    for (i = 0; i <= 1; i++) {\r\n        Q2[i] = new Point2D.Double((((Q1[(i + 1)].x) - (Q1[i].x)) * 2.0), (((Q1[(i + 1)].y) - (Q1[i].y)) * 2.0));\r\n    }\r\n    /* Compute Q(u) and Q(u) */\r\n    Q1_u = Bezier.bezierII(2, Q1, u);\r\n    Q2_u = Bezier.bezierII(1, Q2, u);\r\n    /* Compute f(u)/f(u) */\r\n    numerator = (((Q_u.x) - (P.x)) * (Q1_u.x)) + (((Q_u.y) - (P.y)) * (Q1_u.y));\r\n    denominator = ((((Q1_u.x) * (Q1_u.x)) + ((Q1_u.y) * (Q1_u.y))) + (((Q_u.x) - (P.x)) * (Q2_u.x))) + (((Q_u.y) - (P.y)) * (Q2_u.y));\r\n    /* u = u - f(u)/f(u) */\r\n    uPrime = u - (numerator / denominator);\r\n    return uPrime;\r\n}'),(3347,'reduceNoise(java.util.List,double)','org.jhotdraw.geom.Bezier.reduceNoise(java.util.List,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Reduces noise from the digitized points, by applying an approximation\r\n * of a gaussian filter to the data.\r\n * <p>\r\n * The filter does the following for each point P, with weight 0.5:\r\n * <p>\r\n * x[i] = 0.5*x[i] + 0.25*x[i-1] + 0.25*x[i+1];\r\n * y[i] = 0.5*y[i] + 0.25*y[i-1] + 0.25*y[i+1];\r\n *\r\n * @param digitizedPoints\r\n * 		Digitized points\r\n * @param weight\r\n * 		Weight of the current point\r\n * @return Digitized points with reduced noise.\r\n */\r\npublic static ArrayList<Point2D.Double> reduceNoise(List<Point2D.Double> digitizedPoints, double weight) {\r\n    ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();\r\n    if ((digitizedPoints.size()) > 0) {\r\n        Point2D.Double prev = digitizedPoints.get(0);\r\n        cleaned.add(prev);\r\n        double pnWeight = (1.0 - weight) / 2.0;// weight of previous and next\r\n\r\n        for (int i = 1, n = (digitizedPoints.size()) - 1; i < n; i++) {\r\n            Point2D.Double cur = digitizedPoints.get(i);\r\n            Point2D.Double next = digitizedPoints.get((i + 1));\r\n            cleaned.add(new Point2D.Double(((((cur.x) * weight) + (pnWeight * (prev.x))) + (pnWeight * (next.x))), ((((cur.y) * weight) + (pnWeight * (prev.y))) + (pnWeight * (next.y)))));\r\n            prev = cur;\r\n        }\r\n        if ((digitizedPoints.size()) > 1) {\r\n            cleaned.add(digitizedPoints.get(((digitizedPoints.size()) - 1)));\r\n        }\r\n    }\r\n    return cleaned;\r\n}'),(3348,'removeClosePoints(java.util.List,double)','org.jhotdraw.geom.Bezier.removeClosePoints(java.util.List,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Removes points which are closer together than the specified minimal\r\n * distance.\r\n * <p>\r\n * The minimal distance should be chosen dependent on the size and resolution of the\r\n * display device, and on the sampling rate. A good value for mouse input\r\n * on a display with 100% Zoom factor is 2.\r\n * <p>\r\n * The purpose of this method, is to remove points, which add no additional\r\n * information about the shape of the curve from the list of digitized points.\r\n * <p>\r\n * The cleaned up set of digitized points gives better results, when used\r\n * as input for method {@link #splitAtCorners}.\r\n *\r\n * @param digitizedPoints\r\n * 		Digitized points\r\n * @param minDistance\r\n * 		minimal distance between two points. If minDistance is\r\n * 		0, this method only removes sequences of coincident points.\r\n * @return Digitized points with a minimal distance.\r\n */\r\npublic static ArrayList<Point2D.Double> removeClosePoints(List<Point2D.Double> digitizedPoints, double minDistance) {\r\n    if (minDistance == 0) {\r\n        return Bezier.removeCoincidentPoints(digitizedPoints);\r\n    } else {\r\n        double squaredDistance = minDistance * minDistance;\r\n        ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();\r\n        if ((digitizedPoints.size()) > 0) {\r\n            Point2D.Double prev = digitizedPoints.get(0);\r\n            cleaned.add(prev);\r\n            for (Point2D.Double p : digitizedPoints) {\r\n                if ((Bezier.v2SquaredDistanceBetween2Points(prev, p)) > squaredDistance) {\r\n                    cleaned.add(p);\r\n                    prev = p;\r\n                }\r\n            }\r\n            if (!(prev.equals(digitizedPoints.get(((digitizedPoints.size()) - 1))))) {\r\n                cleaned.set(((cleaned.size()) - 1), digitizedPoints.get(((digitizedPoints.size()) - 1)));\r\n            }\r\n        }\r\n        return cleaned;\r\n    }\r\n}'),(3349,'removeCoincidentPoints(java.util.List)','org.jhotdraw.geom.Bezier.removeCoincidentPoints(java.util.List)','341','org.jhotdraw.geom.Bezier','/**\r\n * Removes sequences of coincident points.\r\n * <p>\r\n * The purpose of this method, is to clean up a list of digitized points\r\n * for later processing using method {@link #splitAtCorners}.\r\n * <p>\r\n * Use this method only, if you know that the digitized points contain no\r\n * quantization errors - which is never the case, unless you want to debug\r\n * the curve fitting algorithm of this class.\r\n *\r\n * @param digitizedPoints\r\n * 		Digitized points\r\n * @return Digitized points without subsequent duplicates.\r\n */\r\nprivate static ArrayList<Point2D.Double> removeCoincidentPoints(List<Point2D.Double> digitizedPoints) {\r\n    ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();\r\n    if ((digitizedPoints.size()) > 0) {\r\n        Point2D.Double prev = digitizedPoints.get(0);\r\n        cleaned.add(prev);\r\n        for (Point2D.Double p : digitizedPoints) {\r\n            if (!(prev.equals(p))) {\r\n                cleaned.add(p);\r\n                prev = p;\r\n            }\r\n        }\r\n    }\r\n    return cleaned;\r\n}'),(3350,'reparameterize(java.util.ArrayList,int,int,double[],java.awt.geom.Point2D$Double[])','org.jhotdraw.geom.Bezier.reparameterize(java.util.ArrayList,int,int,double[],java.awt.geom.Point2D$Double[])','341','org.jhotdraw.geom.Bezier','/**\r\n * Given set of points and their parameterization, try to find\r\n * a better parameterization.\r\n *\r\n * @param d\r\n * 		Array of digitized points.\r\n * @param first\r\n * 		Indice of first point of region in d.\r\n * @param last\r\n * 		Indice of last point of region in d.\r\n * @param u\r\n * 		Current parameter values.\r\n * @param bezCurve\r\n * 		Current fitted curve.\r\n */\r\nprivate static double[] reparameterize(ArrayList<Point2D.Double> d, int first, int last, double[] u, Point2D.Double[] bezCurve) {\r\n    int nPts = (last - first) + 1;\r\n    int i;\r\n    double[] uPrime;/* New parameter values */\r\n\r\n    uPrime = new double[nPts];\r\n    for (i = first; i <= last; i++) {\r\n        uPrime[(i - first)] = Bezier.newtonRaphsonRootFind(bezCurve, d.get(i), u[(i - first)]);\r\n    }\r\n    return uPrime;\r\n}'),(3351,'splitAtCorners(java.util.List,double,double)','org.jhotdraw.geom.Bezier.splitAtCorners(java.util.List,double,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Splits the digitized points into multiple segments at each corner point.\r\n * <p>\r\n * Corner points are both contained as the last point of a segment and\r\n * the first point of a subsequent segment.\r\n *\r\n * @param digitizedPoints\r\n * 		Digitized points\r\n * @param maxAngle\r\n * 		maximal angle in radians between the current point and its\r\n * 		predecessor and successor up to which the point does not break the\r\n * 		digitized list into segments. Recommended value 44° = 44 * 180d / Math.PI\r\n * @return Segments of digitized points, each segment having less than maximal\r\nangle between points.\r\n */\r\npublic static ArrayList<ArrayList<Point2D.Double>> splitAtCorners(List<Point2D.Double> digitizedPoints, double maxAngle, double minDistance) {\r\n    ArrayList<Integer> cornerIndices = Bezier.findCorners(digitizedPoints, maxAngle, minDistance);\r\n    ArrayList<ArrayList<Point2D.Double>> segments = new ArrayList<ArrayList<Point2D.Double>>(((cornerIndices.size()) + 1));\r\n    if ((cornerIndices.size()) == 0) {\r\n        segments.add(new ArrayList<Point2D.Double>(digitizedPoints));\r\n    } else {\r\n        segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(0, ((cornerIndices.get(0)) + 1))));\r\n        for (int i = 1; i < (cornerIndices.size()); i++) {\r\n            segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(cornerIndices.get((i - 1)), ((cornerIndices.get(i)) + 1))));\r\n        }\r\n        segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(cornerIndices.get(((cornerIndices.size()) - 1)), digitizedPoints.size())));\r\n    }\r\n    return segments;\r\n}'),(3352,'v2Add(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2Add(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Return vector sum c = a+b.\r\n * <p>\r\n * This method alters the value of c.\r\n */\r\nprivate static Point2D.Double v2Add(Point2D.Double a, Point2D.Double b, Point2D.Double c) {\r\n    c.x = (a.x) + (b.x);\r\n    c.y = (a.y) + (b.y);\r\n    return c;\r\n}'),(3353,'v2AddII(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2AddII(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Return vector sum = a+b.\r\n */\r\nprivate static Point2D.Double v2AddII(Point2D.Double a, Point2D.Double b) {\r\n    Point2D.Double c = new Point2D.Double();\r\n    c.x = (a.x) + (b.x);\r\n    c.y = (a.y) + (b.y);\r\n    return c;\r\n}'),(3354,'v2DistanceBetween2Points(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2DistanceBetween2Points(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/* -------------------------------------------------------------------------\nGraphicsGems.c\n2d and 3d Vector C Library\nby Andrew Glassner\nfrom \"Graphics Gems\", Academic Press, 1990\n-------------------------------------------------------------------------\n */\r\n/**\r\n * Return the distance between two points\r\n */\r\nprivate static double v2DistanceBetween2Points(Point2D.Double a, Point2D.Double b) {\r\n    return Math.sqrt(Bezier.v2SquaredDistanceBetween2Points(a, b));\r\n}'),(3355,'v2Dot(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2Dot(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Return the dot product of vectors a and b.\r\n */\r\nprivate static double v2Dot(Point2D.Double a, Point2D.Double b) {\r\n    return ((a.x) * (b.x)) + ((a.y) * (b.y));\r\n}'),(3356,'v2Length(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2Length(java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Returns length of input vector.\r\n */\r\nprivate static double v2Length(Point2D.Double a) {\r\n    return Math.sqrt(Bezier.v2SquaredLength(a));\r\n}'),(3357,'v2Negate(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2Negate(java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Negates the input vector and returns it.\r\n */\r\nprivate static Point2D.Double v2Negate(Point2D.Double v) {\r\n    v.x = -(v.x);\r\n    v.y = -(v.y);\r\n    return v;\r\n}'),(3358,'v2Normalize(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2Normalize(java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Normalizes the input vector and returns it.\r\n */\r\nprivate static Point2D.Double v2Normalize(Point2D.Double v) {\r\n    double len = Bezier.v2Length(v);\r\n    if (len != 0.0) {\r\n        v.x /= len;\r\n        v.y /= len;\r\n    }\r\n    return v;\r\n}'),(3359,'v2Scale(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.Bezier.v2Scale(java.awt.geom.Point2D$Double,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Scales the input vector to the new length and returns it.\r\n * <p>\r\n * This method alters the value of the input point!\r\n */\r\nprivate static Point2D.Double v2Scale(Point2D.Double v, double newlen) {\r\n    double len = Bezier.v2Length(v);\r\n    if (len != 0.0) {\r\n        v.x *= newlen / len;\r\n        v.y *= newlen / len;\r\n    }\r\n    return v;\r\n}'),(3360,'v2ScaleIII(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.Bezier.v2ScaleIII(java.awt.geom.Point2D$Double,double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Scales the input vector by the specified factor and returns it.\r\n * <p>\r\n * This method alters the value of the input point!\r\n */\r\nprivate static Point2D.Double v2ScaleIII(Point2D.Double v, double s) {\r\n    Point2D.Double result = new Point2D.Double();\r\n    result.x = (v.x) * s;\r\n    result.y = (v.y) * s;\r\n    return result;\r\n}'),(3361,'v2SquaredDistanceBetween2Points(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2SquaredDistanceBetween2Points(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Return the distance between two points\r\n */\r\nprivate static double v2SquaredDistanceBetween2Points(Point2D.Double a, Point2D.Double b) {\r\n    double dx = (a.x) - (b.x);\r\n    double dy = (a.y) - (b.y);\r\n    return (dx * dx) + (dy * dy);\r\n}'),(3362,'v2SquaredLength(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2SquaredLength(java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Returns squared length of input vector.\r\n */\r\nprivate static double v2SquaredLength(Point2D.Double a) {\r\n    return ((a.x) * (a.x)) + ((a.y) * (a.y));\r\n}'),(3363,'v2SubII(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Bezier.v2SubII(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','341','org.jhotdraw.geom.Bezier','/**\r\n * Subtract Vector a from Vector b.\r\n *\r\n * @param a\r\n * 		Vector a - the value is not changed by this method\r\n * @param b\r\n * 		Vector b - the value is not changed by this method\r\n * @return Vector a subtracted by Vector v.\r\n */\r\nprivate static Point2D.Double v2SubII(Point2D.Double a, Point2D.Double b) {\r\n    Point2D.Double c = new Point2D.Double();\r\n    c.x = (a.x) - (b.x);\r\n    c.y = (a.y) - (b.y);\r\n    return c;\r\n}'),(3364,'-init-()','org.jhotdraw.geom.BezierPath.-init-()','343','org.jhotdraw.geom.BezierPath','public Node() {\r\n}'),(3365,'-init-(org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.geom.BezierPath.-init-(org.jhotdraw.geom.BezierPath$Node)','343','org.jhotdraw.geom.BezierPath','public Node(BezierPath.Node that) {\r\n    setTo(that);\r\n}'),(3366,'-init-(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath.-init-(java.awt.geom.Point2D$Double)','343','org.jhotdraw.geom.BezierPath','public Node(Point2D.Double c0) {\r\n    this.mask = 0;\r\n    x[0] = c0.x;\r\n    y[0] = c0.y;\r\n    x[1] = c0.x;\r\n    y[1] = c0.y;\r\n    x[2] = c0.x;\r\n    y[2] = c0.y;\r\n}'),(3367,'-init-(int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath.-init-(int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','343','org.jhotdraw.geom.BezierPath','public Node(int mask, Point2D.Double c0, Point2D.Double c1, Point2D.Double c2) {\r\n    this.mask = mask;\r\n    x[0] = c0.x;\r\n    y[0] = c0.y;\r\n    x[1] = c1.x;\r\n    y[1] = c1.y;\r\n    x[2] = c2.x;\r\n    y[2] = c2.y;\r\n}'),(3368,'-init-(double,double)','org.jhotdraw.geom.BezierPath.-init-(double,double)','343','org.jhotdraw.geom.BezierPath','public Node(double x0, double y0) {\r\n    this.mask = 0;\r\n    x[0] = x0;\r\n    y[0] = y0;\r\n    x[1] = x0;\r\n    y[1] = y0;\r\n    x[2] = x0;\r\n    y[2] = y0;\r\n}'),(3369,'-init-(int,double,double,double,double,double,double)','org.jhotdraw.geom.BezierPath.-init-(int,double,double,double,double,double,double)','343','org.jhotdraw.geom.BezierPath','public Node(int mask, double x0, double y0, double x1, double y1, double x2, double y2) {\r\n    this.mask = mask;\r\n    x[0] = x0;\r\n    y[0] = y0;\r\n    x[1] = x1;\r\n    y[1] = y1;\r\n    x[2] = x2;\r\n    y[2] = y2;\r\n}'),(3370,'add(int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath.add(int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Convenience method for adding a control point with three\r\n * coordinates C0, C1 and C2 with a mask.\r\n */\r\npublic void add(int mask, Point2D.Double c0, Point2D.Double c1, Point2D.Double c2) {\r\n    add(new BezierPath.Node(mask, c0, c1, c2));\r\n}'),(3371,'add(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath.add(java.awt.geom.Point2D$Double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Convenience method for adding a control point with a single\r\n * coordinate C0.\r\n */\r\npublic void add(Point2D.Double c0) {\r\n    add(new BezierPath.Node(0, c0, c0, c0));\r\n}'),(3372,'addAll(java.util.Collection)','org.jhotdraw.geom.BezierPath.addAll(java.util.Collection)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Convenience method for adding multiple control points with a single\r\n * coordinate C0.\r\n */\r\npublic void addAll(Collection<Point2D.Double> points) {\r\n    for (Point2D.Double c0 : points) {\r\n        add(new BezierPath.Node(0, c0, c0, c0));\r\n    }\r\n}'),(3373,'addPoint(double,double)','org.jhotdraw.geom.BezierPath.addPoint(double,double)','343','org.jhotdraw.geom.BezierPath','public void addPoint(double x, double y) {\r\n    add(new BezierPath.Node(0, x, y, x, y, x, y));\r\n}'),(3374,'arcTo(double,double,double,boolean,boolean,double,double)','org.jhotdraw.geom.BezierPath.arcTo(double,double,double,boolean,boolean,double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Adds an elliptical arc, defined by two radii, an angle from the\r\n * x-axis, a flag to choose the large arc or not, a flag to\r\n * indicate if we increase or decrease the angles and the final\r\n * point of the arc.\r\n * <p>\r\n * As specified in http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\r\n * <p>\r\n * The implementation of this method has been derived from\r\n * Apache Batik class org.apache.batik.ext.awt.geom.ExtendedGeneralPath#computArc\r\n *\r\n * @param rx\r\n * 		the x radius of the ellipse\r\n * @param ry\r\n * 		the y radius of the ellipse\r\n * @param xAxisRotation\r\n * 		the angle from the x-axis of the current\r\n * 		coordinate system to the x-axis of the ellipse in degrees.\r\n * @param largeArcFlag\r\n * 		the large arc flag. If true the arc\r\n * 		spanning less than or equal to 180 degrees is chosen, otherwise\r\n * 		the arc spanning greater than 180 degrees is chosen\r\n * @param sweepFlag\r\n * 		the sweep flag. If true the line joining\r\n * 		center to arc sweeps through decreasing angles otherwise it\r\n * 		sweeps through increasing angles\r\n * @param x\r\n * 		the absolute x coordinate of the final point of the arc.\r\n * @param y\r\n * 		the absolute y coordinate of the final point of the arc.\r\n */\r\npublic void arcTo(double rx, double ry, double xAxisRotation, boolean largeArcFlag, boolean sweepFlag, double x, double y) {\r\n    // Ensure radii are valid\r\n    if ((rx == 0) || (ry == 0)) {\r\n        lineTo(x, y);\r\n        return;\r\n    }\r\n    // Get the current (x, y) coordinates of the path\r\n    BezierPath.Node lastPoint = get(((size()) - 1));\r\n    double x0 = (((lastPoint.mask) & (BezierPath.C2_MASK)) == (BezierPath.C2_MASK)) ? lastPoint.x[2] : lastPoint.x[0];\r\n    double y0 = (((lastPoint.mask) & (BezierPath.C2_MASK)) == (BezierPath.C2_MASK)) ? lastPoint.y[2] : lastPoint.y[0];\r\n    if ((x0 == x) && (y0 == y)) {\r\n        // If the endpoints (x, y) and (x0, y0) are identical, then this\r\n        // is equivalent to omitting the elliptical arc segment entirely.\r\n        return;\r\n    }\r\n    // Compute the half distance between the current and the final point\r\n    double dx2 = (x0 - x) / 2.0;\r\n    double dy2 = (y0 - y) / 2.0;\r\n    // Convert angle from degrees to radians\r\n    double angle = Math.toRadians(xAxisRotation);\r\n    double cosAngle = Math.cos(angle);\r\n    double sinAngle = Math.sin(angle);\r\n    // \r\n    // Step 1 : Compute (x1, y1)\r\n    // \r\n    double x1 = (cosAngle * dx2) + (sinAngle * dy2);\r\n    double y1 = ((-sinAngle) * dx2) + (cosAngle * dy2);\r\n    // Ensure radii are large enough\r\n    rx = Math.abs(rx);\r\n    ry = Math.abs(ry);\r\n    double Prx = rx * rx;\r\n    double Pry = ry * ry;\r\n    double Px1 = x1 * x1;\r\n    double Py1 = y1 * y1;\r\n    // check that radii are large enough\r\n    double radiiCheck = (Px1 / Prx) + (Py1 / Pry);\r\n    if (radiiCheck > 1) {\r\n        rx = (Math.sqrt(radiiCheck)) * rx;\r\n        ry = (Math.sqrt(radiiCheck)) * ry;\r\n        Prx = rx * rx;\r\n        Pry = ry * ry;\r\n    }\r\n    // \r\n    // Step 2 : Compute (cx1, cy1)\r\n    // \r\n    double sign = (largeArcFlag == sweepFlag) ? -1 : 1;\r\n    double sq = (((Prx * Pry) - (Prx * Py1)) - (Pry * Px1)) / ((Prx * Py1) + (Pry * Px1));\r\n    sq = (sq < 0) ? 0 : sq;\r\n    double coef = sign * (Math.sqrt(sq));\r\n    double cx1 = coef * ((rx * y1) / ry);\r\n    double cy1 = coef * (-((ry * x1) / rx));\r\n    // \r\n    // Step 3 : Compute (cx, cy) from (cx1, cy1)\r\n    // \r\n    double sx2 = (x0 + x) / 2.0;\r\n    double sy2 = (y0 + y) / 2.0;\r\n    double cx = sx2 + ((cosAngle * cx1) - (sinAngle * cy1));\r\n    double cy = sy2 + ((sinAngle * cx1) + (cosAngle * cy1));\r\n    // \r\n    // Step 4 : Compute the angleStart (angle1) and the angleExtent (dangle)\r\n    // \r\n    double ux = (x1 - cx1) / rx;\r\n    double uy = (y1 - cy1) / ry;\r\n    double vx = ((-x1) - cx1) / rx;\r\n    double vy = ((-y1) - cy1) / ry;\r\n    double p;\r\n    double n;\r\n    // Compute the angle start\r\n    n = Math.sqrt(((ux * ux) + (uy * uy)));\r\n    p = ux;// (1 * ux) + (0 * uy)\r\n\r\n    sign = (uy < 0) ? -1.0 : 1.0;\r\n    double angleStart = Math.toDegrees((sign * (Math.acos((p / n)))));\r\n    // Compute the angle extent\r\n    n = Math.sqrt((((ux * ux) + (uy * uy)) * ((vx * vx) + (vy * vy))));\r\n    p = (ux * vx) + (uy * vy);\r\n    sign = (((ux * vy) - (uy * vx)) < 0) ? -1.0 : 1.0;\r\n    double angleExtent = Math.toDegrees((sign * (Math.acos((p / n)))));\r\n    if ((!sweepFlag) && (angleExtent > 0)) {\r\n        angleExtent -= 360.0F;\r\n    } else\r\n        if (sweepFlag && (angleExtent < 0)) {\r\n            angleExtent += 360.0F;\r\n        }\r\n\r\n    angleExtent %= 360.0F;\r\n    angleStart %= 360.0F;\r\n    // \r\n    // We can now build the resulting Arc2D in double precision\r\n    // \r\n    Arc2D.Double arc = new Arc2D.Double((cx - rx), (cy - ry), (rx * 2.0), (ry * 2.0), (-angleStart), (-angleExtent), Arc2D.OPEN);\r\n    // Create a path iterator of the rotated arc\r\n    PathIterator i = arc.getPathIterator(AffineTransform.getRotateInstance(angle, arc.getCenterX(), arc.getCenterY()));\r\n    // Add the segments to the bezier path\r\n    double[] coords = new double[6];\r\n    i.next();// skip first moveto\r\n\r\n    while (!(i.isDone())) {\r\n        int type = i.currentSegment(coords);\r\n        switch (type) {\r\n            case PathIterator.SEG_CLOSE :\r\n                // ignore\r\n                break;\r\n            case PathIterator.SEG_CUBICTO :\r\n                curveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);\r\n                break;\r\n            case PathIterator.SEG_LINETO :\r\n                lineTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_MOVETO :\r\n                // ignore\r\n                break;\r\n            case PathIterator.SEG_QUADTO :\r\n                quadTo(coords[0], coords[1], coords[2], coords[3]);\r\n                break;\r\n        }\r\n        i.next();\r\n    } \r\n}'),(3375,'chop(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath.chop(java.awt.geom.Point2D$Double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Returns a point on the edge of the bezier path which crosses the line\r\n * from the center of the bezier path to the specified point.\r\n * If no edge crosses the line, the nearest C0 control point is returned.\r\n */\r\npublic Point2D.Double chop(Point2D.Double p) {\r\n    validatePath();\r\n    return Geom.chop(generalPath, p);\r\n    /* Point2D.Double ctr = getCenter();\n\n    // Chopped point\n    double cx = -1;\n    double cy = -1;\n    double len = Double.MAX_VALUE;\n\n    // Try for points along edge\n    validatePath();\n    PathIterator i = generalPath.getPathIterator(new AffineTransform(), 1);\n    double[] coords = new double[6];\n    int type = i.currentSegment(coords);\n    double prevX = coords[0];\n    double prevY = coords[1];\n    i.next();\n    for (; ! i.isDone(); i.next()) {\n    i.currentSegment(coords);\n    Point2D.Double chop = Geom.intersect(\n    prevX, prevY,\n    coords[0], coords[1],\n    p.x, p.y,\n    ctr.x, ctr.y\n    );\n\n    if (chop != null) {\n    double cl = Geom.length2(chop.x, chop.y, p.x, p.y);\n    if (cl < len) {\n    len = cl;\n    cx = chop.x;\n    cy = chop.y;\n    }\n    }\n\n    prevX = coords[0];\n    prevY = coords[1];\n    }\n\n    //\n    if (isClosed() && size() > 1) {\n    Node first = get(0);\n    Node last = get(size() - 1);\n    Point2D.Double chop = Geom.intersect(\n    first.x[0], first.y[0],\n    last.x[0], last.y[0],\n    p.x, p.y,\n    ctr.x, ctr.y\n    );\n    if (chop != null) {\n    double cl = Geom.length2(chop.x, chop.y, p.x, p.y);\n    if (cl < len) {\n    len = cl;\n    cx = chop.x;\n    cy = chop.y;\n    }\n    }\n    }\n\n\n    // if none found, pick closest vertex\n    if (len == Double.MAX_VALUE) {\n    for (int j = 0, n = size(); j < n; j++) {\n    Node cp = get(j);\n    double l = Geom.length2(cp.x[0], cp.y[0], p.x, p.y);\n    if (l < len) {\n    len = l;\n    cx = cp.x[0];\n    cy = cp.y[0];\n    }\n    }\n    }\n    return new Point2D.Double(cx, cy);\n     */\r\n}'),(3376,'clone()','org.jhotdraw.geom.BezierPath.clone()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Creates a deep copy of the BezierPath.\r\n */\r\npublic BezierPath clone() {\r\n    BezierPath that = ((BezierPath) (super.clone()));\r\n    for (int i = 0, n = this.size(); i < n; i++) {\r\n        that.set(i, ((BezierPath.Node) (this.get(i).clone())));\r\n    }\r\n    return that;\r\n}'),(3377,'contains(double,double)','org.jhotdraw.geom.BezierPath.contains(double,double)','343','org.jhotdraw.geom.BezierPath','public boolean contains(double x, double y) {\r\n    validatePath();\r\n    return generalPath.contains(x, y);\r\n}'),(3378,'contains(double,double,double,double)','org.jhotdraw.geom.BezierPath.contains(double,double,double,double)','343','org.jhotdraw.geom.BezierPath','public boolean contains(double x, double y, double w, double h) {\r\n    validatePath();\r\n    return generalPath.contains(x, y, w, h);\r\n}'),(3379,'contains(java.awt.geom.Point2D)','org.jhotdraw.geom.BezierPath.contains(java.awt.geom.Point2D)','343','org.jhotdraw.geom.BezierPath','public boolean contains(Point2D p) {\r\n    validatePath();\r\n    return generalPath.contains(p);\r\n}'),(3380,'contains(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.BezierPath.contains(java.awt.geom.Rectangle2D)','343','org.jhotdraw.geom.BezierPath','public boolean contains(Rectangle2D r) {\r\n    validatePath();\r\n    return generalPath.contains(r);\r\n}'),(3381,'curveTo(double,double,double,double,double,double)','org.jhotdraw.geom.BezierPath.curveTo(double,double,double,double,double,double)','343','org.jhotdraw.geom.BezierPath','public void curveTo(double x1, double y1, double x2, double y2, double x3, double y3) {\r\n    if ((size()) == 0) {\r\n        throw new IllegalPathStateException(\"curveTo only allowed when not empty\");\r\n    }\r\n    BezierPath.Node lastPoint = get(((size()) - 1));\r\n    lastPoint.mask |= BezierPath.C2_MASK;\r\n    lastPoint.x[2] = x1;\r\n    lastPoint.y[2] = y1;\r\n    if (((lastPoint.mask) & (BezierPath.C1C2_MASK)) == (BezierPath.C1C2_MASK)) {\r\n        lastPoint.keepColinear = (Math.abs(((Geom.angle(lastPoint.x[0], lastPoint.y[0], lastPoint.x[1], lastPoint.y[1])) - (Geom.angle(lastPoint.x[2], lastPoint.y[2], lastPoint.x[0], lastPoint.y[0]))))) < 0.001;\r\n    }\r\n    add(new BezierPath.Node(BezierPath.C1_MASK, x3, y3, x2, y2, x3, y3));\r\n}'),(3382,'findSegment(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.BezierPath.findSegment(java.awt.geom.Point2D$Double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Gets the segment of the polyline that is hit by\r\n * the given Point2D.Double.\r\n *\r\n * @return the index of the segment or -1 if no segment was hit.\r\n */\r\npublic int findSegment(Point2D.Double find, double tolerance) {\r\n    // XXX - This works only for straight lines!\r\n    BezierPath.Node v1;\r\n    BezierPath.Node v2;\r\n    BezierPath tempPath = new BezierPath();\r\n    BezierPath.Node t1;\r\n    BezierPath.Node t2;\r\n    tempPath.add((t1 = new BezierPath.Node()));\r\n    tempPath.add((t2 = new BezierPath.Node()));\r\n    for (int i = 0, n = (size()) - 1; i < n; i++) {\r\n        v1 = get(i);\r\n        v2 = get((i + 1));\r\n        if (((v1.mask) == 0) && ((v2.mask) == 0)) {\r\n            if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, tolerance)) {\r\n                return i;\r\n            }\r\n        } else {\r\n            t1.setTo(v1);\r\n            t2.setTo(v2);\r\n            tempPath.invalidatePath();\r\n            if (tempPath.outlineContains(find, tolerance)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    if ((isClosed) && ((size()) > 1)) {\r\n        v1 = get(((size()) - 1));\r\n        v2 = get(0);\r\n        if (((v1.mask) == 0) && ((v2.mask) == 0)) {\r\n            if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, tolerance)) {\r\n                return (size()) - 1;\r\n            }\r\n        } else {\r\n            t1.setTo(v1);\r\n            t2.setTo(v2);\r\n            tempPath.invalidatePath();\r\n            if (tempPath.outlineContains(find, tolerance)) {\r\n                return (size()) - 1;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}'),(3383,'get(int,int)','org.jhotdraw.geom.BezierPath.get(int,int)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Convenience method for getting a single coordinate of a control point.\r\n */\r\npublic Point2D.Double get(int index, int coord) {\r\n    BezierPath.Node c = get(index);\r\n    return new Point2D.Double(c.x[coord], c.y[coord]);\r\n}'),(3384,'getBounds()','org.jhotdraw.geom.BezierPath.getBounds()','343','org.jhotdraw.geom.BezierPath','public Rectangle getBounds() {\r\n    return getBounds2D().getBounds();\r\n}'),(3385,'getBounds2D()','org.jhotdraw.geom.BezierPath.getBounds2D()','343','org.jhotdraw.geom.BezierPath','public Rectangle2D.Double getBounds2D() {\r\n    if ((bounds) == null) {\r\n        double x1;\r\n        double y1;\r\n        double x2;\r\n        double y2;\r\n        int size = size();\r\n        if (size == 0) {\r\n            x1 = y1 = x2 = y2 = 0.0F;\r\n        } else {\r\n            double x;\r\n            double y;\r\n            // handle first node\r\n            BezierPath.Node node = get(0);\r\n            y1 = y2 = node.y[0];\r\n            x1 = x2 = node.x[0];\r\n            if ((isClosed) && (((node.mask) & (BezierPath.C1_MASK)) != 0)) {\r\n                y = node.y[1];\r\n                x = node.x[1];\r\n                if (x < x1) {\r\n                    x1 = x;\r\n                }\r\n                if (y < y1) {\r\n                    y1 = y;\r\n                }\r\n                if (x > x2) {\r\n                    x2 = x;\r\n                }\r\n                if (y > y2) {\r\n                    y2 = y;\r\n                }\r\n            }\r\n            if (((node.mask) & (BezierPath.C2_MASK)) != 0) {\r\n                y = node.y[2];\r\n                x = node.x[2];\r\n                if (x < x1) {\r\n                    x1 = x;\r\n                }\r\n                if (y < y1) {\r\n                    y1 = y;\r\n                }\r\n                if (x > x2) {\r\n                    x2 = x;\r\n                }\r\n                if (y > y2) {\r\n                    y2 = y;\r\n                }\r\n            }\r\n            // handle last node\r\n            node = get((size - 1));\r\n            y = node.y[0];\r\n            x = node.x[0];\r\n            if (x < x1) {\r\n                x1 = x;\r\n            }\r\n            if (y < y1) {\r\n                y1 = y;\r\n            }\r\n            if (x > x2) {\r\n                x2 = x;\r\n            }\r\n            if (y > y2) {\r\n                y2 = y;\r\n            }\r\n            if (((node.mask) & (BezierPath.C1_MASK)) != 0) {\r\n                y = node.y[1];\r\n                x = node.x[1];\r\n                if (x < x1) {\r\n                    x1 = x;\r\n                }\r\n                if (y < y1) {\r\n                    y1 = y;\r\n                }\r\n                if (x > x2) {\r\n                    x2 = x;\r\n                }\r\n                if (y > y2) {\r\n                    y2 = y;\r\n                }\r\n            }\r\n            if ((isClosed) && (((node.mask) & (BezierPath.C2_MASK)) != 0)) {\r\n                y = node.y[2];\r\n                x = node.x[2];\r\n                if (x < x1) {\r\n                    x1 = x;\r\n                }\r\n                if (y < y1) {\r\n                    y1 = y;\r\n                }\r\n                if (x > x2) {\r\n                    x2 = x;\r\n                }\r\n                if (y > y2) {\r\n                    y2 = y;\r\n                }\r\n            }\r\n            // handle all other nodes\r\n            for (int i = 1, n = size - 1; i < n; i++) {\r\n                node = get(i);\r\n                y = node.y[0];\r\n                x = node.x[0];\r\n                if (x < x1) {\r\n                    x1 = x;\r\n                }\r\n                if (y < y1) {\r\n                    y1 = y;\r\n                }\r\n                if (x > x2) {\r\n                    x2 = x;\r\n                }\r\n                if (y > y2) {\r\n                    y2 = y;\r\n                }\r\n                if (((node.mask) & (BezierPath.C1_MASK)) != 0) {\r\n                    y = node.y[1];\r\n                    x = node.x[1];\r\n                    if (x < x1) {\r\n                        x1 = x;\r\n                    }\r\n                    if (y < y1) {\r\n                        y1 = y;\r\n                    }\r\n                    if (x > x2) {\r\n                        x2 = x;\r\n                    }\r\n                    if (y > y2) {\r\n                        y2 = y;\r\n                    }\r\n                }\r\n                if (((node.mask) & (BezierPath.C2_MASK)) != 0) {\r\n                    y = node.y[2];\r\n                    x = node.x[2];\r\n                    if (x < x1) {\r\n                        x1 = x;\r\n                    }\r\n                    if (y < y1) {\r\n                        y1 = y;\r\n                    }\r\n                    if (x > x2) {\r\n                        x2 = x;\r\n                    }\r\n                    if (y > y2) {\r\n                        y2 = y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        bounds = new Rectangle2D.Double(x1, y1, (x2 - x1), (y2 - y1));\r\n    }\r\n    return ((Rectangle2D.Double) (bounds.clone()));\r\n}'),(3386,'getCenter()','org.jhotdraw.geom.BezierPath.getCenter()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Returns the point at the center of the bezier path.\r\n */\r\npublic Point2D.Double getCenter() {\r\n    double sx = 0;\r\n    double sy = 0;\r\n    for (BezierPath.Node p : this) {\r\n        sx += p.x[0];\r\n        sy += p.y[0];\r\n    }\r\n    int n = size();\r\n    return new Point2D.Double((sx / n), (sy / n));\r\n}'),(3387,'getLengthOfPath(double)','org.jhotdraw.geom.BezierPath.getLengthOfPath(double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Returns the length of the path.\r\n *\r\n * @param flatness\r\n * 		the flatness used to approximate the length.\r\n */\r\npublic double getLengthOfPath(double flatness) {\r\n    double len = 0;\r\n    PathIterator i = generalPath.getPathIterator(new AffineTransform(), flatness);\r\n    double[] coords = new double[6];\r\n    int type = i.currentSegment(coords);\r\n    double prevX = coords[0];\r\n    double prevY = coords[1];\r\n    i.next();\r\n    for (; !(i.isDone()); i.next()) {\r\n        i.currentSegment(coords);\r\n        len += Geom.length(prevX, prevY, coords[0], coords[1]);\r\n        prevX = coords[0];\r\n        prevY = coords[1];\r\n    }\r\n    return len;\r\n}'),(3388,'getPathIterator(java.awt.geom.AffineTransform)','org.jhotdraw.geom.BezierPath.getPathIterator(java.awt.geom.AffineTransform)','343','org.jhotdraw.geom.BezierPath','public PathIterator getPathIterator(AffineTransform at) {\r\n    /* validatePath();\n    PathIterator git = generalPath.getPathIterator(at);\n    PathIterator bit = new BezierPathIterator(this, at);\n    float gcoords[] = new float[6];\n    float bcoords[] = new float[6];\n    int i=0;\n    while (! git.isDone() && ! bit.isDone()) {\n    int gtype = git.currentSegment(gcoords);\n    int btype = bit.currentSegment(bcoords);\n    System.out.println(i+\" \"+gtype+\"[\"+gcoords[0]+\",\"+gcoords[1]+\",\"+gcoords[2]+\",\"+gcoords[3]+\",\"+gcoords[4]+\",\"+gcoords[5]+\n    \"]=\"+btype+\"[\"+bcoords[0]+\",\"+bcoords[1]+\",\"+bcoords[2]+\",\"+bcoords[3]+\",\"+bcoords[4]+\",\"+bcoords[5]+\"]\");\n    git.next();\n    bit.next();\n    i++;\n    }\n    System.out.println(\"- \"+git.isDone()+\"=\"+bit.isDone());\n\n\n    //  return generalPath.getPathIterator(at);\n     */\r\n    return new BezierPathIterator(this, at);\r\n}'),(3389,'getPathIterator(java.awt.geom.AffineTransform,double)','org.jhotdraw.geom.BezierPath.getPathIterator(java.awt.geom.AffineTransform,double)','343','org.jhotdraw.geom.BezierPath','public PathIterator getPathIterator(AffineTransform at, double flatness) {\r\n    /* validatePath();\n    return generalPath.getPathIterator(at, flatness);\n     */\r\n    return new FlatteningPathIterator(new BezierPathIterator(this, at), flatness);\r\n}'),(3390,'getPointOnPath(double,double)','org.jhotdraw.geom.BezierPath.getPointOnPath(double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Returns a relative point on the path.\r\n * Where 0 is the start point of the path and 1 is the end point of the\r\n * path.\r\n *\r\n * @param relative\r\n * 		a value between 0 and 1.\r\n */\r\npublic Point2D.Double getPointOnPath(double relative, double flatness) {\r\n    // This method works only for straight lines\r\n    if ((size()) == 0) {\r\n        return null;\r\n    } else\r\n        if ((size()) == 1) {\r\n            return get(0).getControlPoint(0);\r\n        }\r\n\r\n    if (relative <= 0) {\r\n        return get(0).getControlPoint(0);\r\n    } else\r\n        if (relative >= 1) {\r\n            return get(((size()) - 1)).getControlPoint(0);\r\n        }\r\n\r\n    validatePath();\r\n    // Compute the relative point on the path\r\n    double len = getLengthOfPath(flatness);\r\n    double relativeLen = len * relative;\r\n    double pos = 0;\r\n    double[] coords = new double[6];\r\n    PathIterator i = generalPath.getPathIterator(new AffineTransform(), flatness);\r\n    int type = i.currentSegment(coords);\r\n    double prevX = coords[0];\r\n    double prevY = coords[1];\r\n    i.next();\r\n    for (; !(i.isDone()); i.next()) {\r\n        i.currentSegment(coords);\r\n        double segLen = Geom.length(prevX, prevY, coords[0], coords[1]);\r\n        if ((pos + segLen) >= relativeLen) {\r\n            // if (true) return new Point2D.Double(coords[0], coords[1]);\r\n            // Compute the relative Point2D.Double on the line\r\n            /* return new Point2D.Double(\n            prevX * pos / len + coords[0] * (pos + segLen) / len,\n            prevY * pos / len + coords[1] * (pos + segLen) / len\n            );\n             */\r\n            double factor = (relativeLen - pos) / segLen;\r\n            return new Point2D.Double(((prevX * (1 - factor)) + ((coords[0]) * factor)), ((prevY * (1 - factor)) + ((coords[1]) * factor)));\r\n        }\r\n        pos += segLen;\r\n        prevX = coords[0];\r\n        prevY = coords[1];\r\n    }\r\n    throw new InternalError(\"We should never get here\");\r\n}'),(3391,'getRelativePositionOnPath(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.BezierPath.getRelativePositionOnPath(java.awt.geom.Point2D$Double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Returns the relative position of the specified point on the path.\r\n *\r\n * @param flatness\r\n * 		the flatness used to approximate the length.\r\n * @return relative position on path, this is a number between 0 and 1.\r\nReturns -1, if the point is not on the path.\r\n */\r\npublic double getRelativePositionOnPath(Point2D.Double find, double flatness) {\r\n    // XXX - This method works only for straight lines!\r\n    double len = getLengthOfPath(flatness);\r\n    double relativeLen = 0.0;\r\n    BezierPath.Node v1;\r\n    BezierPath.Node v2;\r\n    BezierPath tempPath = new BezierPath();\r\n    BezierPath.Node t1;\r\n    BezierPath.Node t2;\r\n    tempPath.add((t1 = new BezierPath.Node()));\r\n    tempPath.add((t2 = new BezierPath.Node()));\r\n    for (int i = 0, n = (size()) - 1; i < n; i++) {\r\n        v1 = get(i);\r\n        v2 = get((i + 1));\r\n        if (((v1.mask) == 0) && ((v2.mask) == 0)) {\r\n            if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, flatness)) {\r\n                relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);\r\n                return relativeLen / len;\r\n            } else {\r\n                relativeLen += Geom.length(v1.x[0], v1.y[0], v2.x[0], v2.y[0]);\r\n            }\r\n        } else {\r\n            t1.setTo(v1);\r\n            t2.setTo(v2);\r\n            tempPath.invalidatePath();\r\n            if (tempPath.outlineContains(find, flatness)) {\r\n                relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);\r\n                return relativeLen / len;\r\n            } else {\r\n                relativeLen += Geom.length(v1.x[0], v1.y[0], v2.x[0], v2.y[0]);\r\n            }\r\n        }\r\n    }\r\n    if ((isClosed) && ((size()) > 1)) {\r\n        v1 = get(((size()) - 1));\r\n        v2 = get(0);\r\n        if (((v1.mask) == 0) && ((v2.mask) == 0)) {\r\n            if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, flatness)) {\r\n                relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);\r\n                return relativeLen / len;\r\n            }\r\n        } else {\r\n            t1.setTo(v1);\r\n            t2.setTo(v2);\r\n            tempPath.invalidatePath();\r\n            if (tempPath.outlineContains(find, flatness)) {\r\n                relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);\r\n                return relativeLen / len;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}'),(3392,'getWindingRule()','org.jhotdraw.geom.BezierPath.getWindingRule()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Gets winding rule for filling the bezier path.\r\n *\r\n * @return GeneralPath.WIND_EVEN_ODD or GeneralPath.WIND_NON_ZERO.\r\n */\r\npublic int getWindingRule() {\r\n    return windingRule;\r\n}'),(3393,'indexOfOutermostNode()','org.jhotdraw.geom.BezierPath.indexOfOutermostNode()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Return the index of the control point that is furthest from the center\r\n */\r\npublic int indexOfOutermostNode() {\r\n    if ((outer) == (-1)) {\r\n        Point2D.Double ctr = getCenter();\r\n        outer = 0;\r\n        double dist = 0;\r\n        for (int i = 0, n = size(); i < n; i++) {\r\n            BezierPath.Node cp = get(i);\r\n            double d = Geom.length2(ctr.x, ctr.y, cp.x[0], cp.y[0]);\r\n            if (d > dist) {\r\n                dist = d;\r\n                outer = i;\r\n            }\r\n        }\r\n    }\r\n    return outer;\r\n}'),(3394,'intersects(double,double,double,double)','org.jhotdraw.geom.BezierPath.intersects(double,double,double,double)','343','org.jhotdraw.geom.BezierPath','public boolean intersects(double x, double y, double w, double h) {\r\n    validatePath();\r\n    return generalPath.intersects(x, y, w, h);\r\n}'),(3395,'intersects(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.BezierPath.intersects(java.awt.geom.Rectangle2D)','343','org.jhotdraw.geom.BezierPath','public boolean intersects(Rectangle2D r) {\r\n    validatePath();\r\n    return generalPath.intersects(r);\r\n}'),(3396,'invalidatePath()','org.jhotdraw.geom.BezierPath.invalidatePath()','343','org.jhotdraw.geom.BezierPath','/**\r\n * This must be called after the BezierPath has been changed.\r\n */\r\npublic void invalidatePath() {\r\n    generalPath = null;\r\n    bounds = null;\r\n    outer = -1;\r\n}'),(3397,'isClosed()','org.jhotdraw.geom.BezierPath.isClosed()','343','org.jhotdraw.geom.BezierPath','public boolean isClosed() {\r\n    return isClosed;\r\n}'),(3398,'joinSegments(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.BezierPath.joinSegments(java.awt.geom.Point2D$Double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Joins two segments into one if the given Point2D.Double hits a node\r\n * of the bezier path.\r\n *\r\n * @return the index of the joined segment or -1 if no segment was joined.\r\n */\r\npublic int joinSegments(Point2D.Double join, double tolerance) {\r\n    for (int i = 0; i < (size()); i++) {\r\n        BezierPath.Node p = get(i);\r\n        if ((Geom.length(p.x[0], p.y[0], join.x, join.y)) < tolerance) {\r\n            remove(i);\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}'),(3399,'lineTo(double,double)','org.jhotdraw.geom.BezierPath.lineTo(double,double)','343','org.jhotdraw.geom.BezierPath','public void lineTo(double x1, double y1) {\r\n    if ((size()) == 0) {\r\n        throw new IllegalPathStateException(\"lineTo only allowed when not empty\");\r\n    }\r\n    get(((size()) - 1)).keepColinear = false;\r\n    add(new BezierPath.Node(x1, y1));\r\n}'),(3400,'moveTo(double,double)','org.jhotdraw.geom.BezierPath.moveTo(double,double)','343','org.jhotdraw.geom.BezierPath','public void moveTo(double x1, double y1) {\r\n    if ((size()) != 0) {\r\n        throw new IllegalPathStateException(\"moveTo only allowed when empty\");\r\n    }\r\n    BezierPath.Node node = new BezierPath.Node(x1, y1);\r\n    node.keepColinear = false;\r\n    add(node);\r\n}'),(3401,'outlineContains(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.BezierPath.outlineContains(java.awt.geom.Point2D$Double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Returns true, if the outline of this bezier path contains the specified\r\n * point.\r\n *\r\n * @param p\r\n * 		The point to be tested.\r\n * @param tolerance\r\n * 		The tolerance for the test.\r\n */\r\npublic boolean outlineContains(Point2D.Double p, double tolerance) {\r\n    return Shapes.outlineContains(this, p, tolerance);\r\n    /* validatePath();\n\n    PathIterator i = generalPath.getPathIterator(new AffineTransform(), tolerance);\n\n    double[] coords = new double[6];\n    int type = i.currentSegment(coords);\n    double prevX = coords[0];\n    double prevY = coords[1];\n    i.next();\n    while (! i.isDone()) {\n    i.currentSegment(coords);\n    if (Geom.lineContainsPoint(\n    prevX, prevY, coords[0], coords[1],\n    p.x, p.y, tolerance)\n    ) {\n    return true;\n    }\n    prevX = coords[0];\n    prevY = coords[1];\n    i.next();\n    }\n    return false;\n     */\r\n}'),(3402,'quadTo(double,double,double,double)','org.jhotdraw.geom.BezierPath.quadTo(double,double,double,double)','343','org.jhotdraw.geom.BezierPath','public void quadTo(double x1, double y1, double x2, double y2) {\r\n    if ((size()) == 0) {\r\n        throw new IllegalPathStateException(\"quadTo only allowed when not empty\");\r\n    }\r\n    add(new BezierPath.Node(BezierPath.C1_MASK, x2, y2, x1, y1, x2, y2));\r\n}'),(3403,'set(int,int,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath.set(int,int,java.awt.geom.Point2D$Double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Convenience method for changing a single coordinate of a control point.\r\n */\r\npublic void set(int index, int coord, Point2D.Double p) {\r\n    BezierPath.Node c = get(index);\r\n    c.x[coord] = p.x;\r\n    c.y[coord] = p.y;\r\n}'),(3404,'setClosed(boolean)','org.jhotdraw.geom.BezierPath.setClosed(boolean)','343','org.jhotdraw.geom.BezierPath','public void setClosed(boolean newValue) {\r\n    if ((isClosed) != newValue) {\r\n        isClosed = newValue;\r\n        invalidatePath();\r\n    }\r\n}'),(3405,'setTo(org.jhotdraw.geom.BezierPath)','org.jhotdraw.geom.BezierPath.setTo(org.jhotdraw.geom.BezierPath)','343','org.jhotdraw.geom.BezierPath','public void setTo(BezierPath that) {\r\n    while ((that.size()) < (size())) {\r\n        remove(((size()) - 1));\r\n    } \r\n    for (int i = 0, n = size(); i < n; i++) {\r\n        get(i).setTo(that.get(i));\r\n    }\r\n    while ((size()) < (that.size())) {\r\n        add(((BezierPath.Node) (that.get(size()).clone())));\r\n    } \r\n}'),(3406,'setWindingRule(int)','org.jhotdraw.geom.BezierPath.setWindingRule(int)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Sets winding rule for filling the bezier path.\r\n *\r\n * @param newValue\r\n * 		Must be GeneralPath.WIND_EVEN_ODD or GeneralPath.WIND_NON_ZERO.\r\n */\r\npublic void setWindingRule(int newValue) {\r\n    if (newValue != (windingRule)) {\r\n        invalidatePath();\r\n        int oldValue = windingRule;\r\n        this.windingRule = newValue;\r\n    }\r\n}'),(3407,'splitSegment(java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.BezierPath.splitSegment(java.awt.geom.Point2D$Double,double)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Splits the segment at the given Point2D.Double if a segment was hit.\r\n *\r\n * @return the index of the segment or -1 if no segment was hit.\r\n */\r\npublic int splitSegment(Point2D.Double split, double tolerance) {\r\n    int i = findSegment(split, tolerance);\r\n    int nextI = (i + 1) % (size());\r\n    if (i != (-1)) {\r\n        if ((((get(i).mask) & (BezierPath.C2_MASK)) == (BezierPath.C2_MASK)) && (((get(nextI).mask) & (BezierPath.C1_MASK)) == 0)) {\r\n            // quadto\r\n            add((i + 1), new BezierPath.Node(BezierPath.C2_MASK, split, split, split));\r\n        } else\r\n            if ((((get(i).mask) & (BezierPath.C2_MASK)) == 0) && (((get(nextI).mask) & (BezierPath.C1_MASK)) == (BezierPath.C1_MASK))) {\r\n                // quadto\r\n                add((i + 1), new BezierPath.Node(BezierPath.C1_MASK, split, split, split));\r\n            } else\r\n                if ((((get(i).mask) & (BezierPath.C2_MASK)) == (BezierPath.C2_MASK)) && (((get(nextI).mask) & (BezierPath.C1_MASK)) == (BezierPath.C1_MASK))) {\r\n                    // cubicto\r\n                    add((i + 1), new BezierPath.Node(((BezierPath.C1_MASK) | (BezierPath.C2_MASK)), split, split, split));\r\n                } else {\r\n                    // lineto\r\n                    add((i + 1), new BezierPath.Node(split));\r\n                }\r\n\r\n\r\n    }\r\n    return i + 1;\r\n}'),(3408,'toGeneralPath()','org.jhotdraw.geom.BezierPath.toGeneralPath()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Converts the BezierPath into a GeneralPath.\r\n */\r\npublic GeneralPath toGeneralPath() {\r\n    GeneralPath gp = new GeneralPath();\r\n    gp.setWindingRule(windingRule);\r\n    if ((size()) == 0) {\r\n        gp.moveTo(0, 0);\r\n        gp.lineTo(0, (0 + 1));\r\n    } else\r\n        if ((size()) == 1) {\r\n            BezierPath.Node current = get(0);\r\n            gp.moveTo(((float) (current.x[0])), ((float) (current.y[0])));\r\n            gp.lineTo(((float) (current.x[0])), (((float) (current.y[0])) + 1));\r\n        } else {\r\n            BezierPath.Node previous;\r\n            BezierPath.Node current;\r\n            previous = current = get(0);\r\n            gp.moveTo(((float) (current.x[0])), ((float) (current.y[0])));\r\n            for (int i = 1, n = size(); i < n; i++) {\r\n                previous = current;\r\n                current = get(i);\r\n                if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                    if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                        gp.lineTo(((float) (current.x[0])), ((float) (current.y[0])));\r\n                    } else {\r\n                        gp.quadTo(((float) (current.x[1])), ((float) (current.y[1])), ((float) (current.x[0])), ((float) (current.y[0])));\r\n                    }\r\n                } else {\r\n                    if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                        gp.quadTo(((float) (previous.x[2])), ((float) (previous.y[2])), ((float) (current.x[0])), ((float) (current.y[0])));\r\n                    } else {\r\n                        gp.curveTo(((float) (previous.x[2])), ((float) (previous.y[2])), ((float) (current.x[1])), ((float) (current.y[1])), ((float) (current.x[0])), ((float) (current.y[0])));\r\n                    }\r\n                }\r\n            }\r\n            if (isClosed) {\r\n                if ((size()) > 1) {\r\n                    previous = get(((size()) - 1));\r\n                    current = get(0);\r\n                    if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            gp.lineTo(((float) (current.x[0])), ((float) (current.y[0])));\r\n                        } else {\r\n                            gp.quadTo(((float) (current.x[1])), ((float) (current.y[1])), ((float) (current.x[0])), ((float) (current.y[0])));\r\n                        }\r\n                    } else {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            gp.quadTo(((float) (previous.x[2])), ((float) (previous.y[2])), ((float) (current.x[0])), ((float) (current.y[0])));\r\n                        } else {\r\n                            gp.curveTo(((float) (previous.x[2])), ((float) (previous.y[2])), ((float) (current.x[1])), ((float) (current.y[1])), ((float) (current.x[0])), ((float) (current.y[0])));\r\n                        }\r\n                    }\r\n                }\r\n                gp.closePath();\r\n            }\r\n        }\r\n\r\n    return gp;\r\n}'),(3409,'toPolygonArray()','org.jhotdraw.geom.BezierPath.toPolygonArray()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Creates a polygon array of the bezier path.\r\n *\r\n * @return Point array.\r\n */\r\npublic Point2D.Double[] toPolygonArray() {\r\n    Point2D.Double[] points = new Point2D.Double[size()];\r\n    for (int i = 0, n = size(); i < n; i++) {\r\n        points[i] = new Point2D.Double(get(i).x[0], get(i).y[0]);\r\n    }\r\n    return points;\r\n}'),(3410,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.geom.BezierPath.transform(java.awt.geom.AffineTransform)','343','org.jhotdraw.geom.BezierPath','/**\r\n * Transforms the BezierPath.\r\n *\r\n * @param tx\r\n * 		the transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    Point2D.Double p = new Point2D.Double();\r\n    for (BezierPath.Node cp : this) {\r\n        for (int i = 0; i < 3; i++) {\r\n            p.x = cp.x[i];\r\n            p.y = cp.y[i];\r\n            tx.transform(p, p);\r\n            cp.x[i] = p.x;\r\n            cp.y[i] = p.y;\r\n        }\r\n    }\r\n    invalidatePath();\r\n}'),(3411,'validatePath()','org.jhotdraw.geom.BezierPath.validatePath()','343','org.jhotdraw.geom.BezierPath','/**\r\n * Recomputes the BezierPath, if it is invalid.\r\n */\r\npublic void validatePath() {\r\n    if ((generalPath) == null) {\r\n        generalPath = toGeneralPath();\r\n    }\r\n}'),(3412,'-init-()','org.jhotdraw.geom.BezierPath$Node.-init-()','342','org.jhotdraw.geom.BezierPath$Node','public Node() {\r\n}'),(3413,'-init-(org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.geom.BezierPath$Node.-init-(org.jhotdraw.geom.BezierPath$Node)','342','org.jhotdraw.geom.BezierPath$Node','public Node(BezierPath.Node that) {\r\n    setTo(that);\r\n}'),(3414,'-init-(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath$Node.-init-(java.awt.geom.Point2D$Double)','342','org.jhotdraw.geom.BezierPath$Node','public Node(Point2D.Double c0) {\r\n    this.mask = 0;\r\n    x[0] = c0.x;\r\n    y[0] = c0.y;\r\n    x[1] = c0.x;\r\n    y[1] = c0.y;\r\n    x[2] = c0.x;\r\n    y[2] = c0.y;\r\n}'),(3415,'-init-(int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath$Node.-init-(int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','342','org.jhotdraw.geom.BezierPath$Node','public Node(int mask, Point2D.Double c0, Point2D.Double c1, Point2D.Double c2) {\r\n    this.mask = mask;\r\n    x[0] = c0.x;\r\n    y[0] = c0.y;\r\n    x[1] = c1.x;\r\n    y[1] = c1.y;\r\n    x[2] = c2.x;\r\n    y[2] = c2.y;\r\n}'),(3416,'-init-(double,double)','org.jhotdraw.geom.BezierPath$Node.-init-(double,double)','342','org.jhotdraw.geom.BezierPath$Node','public Node(double x0, double y0) {\r\n    this.mask = 0;\r\n    x[0] = x0;\r\n    y[0] = y0;\r\n    x[1] = x0;\r\n    y[1] = y0;\r\n    x[2] = x0;\r\n    y[2] = y0;\r\n}'),(3417,'-init-(int,double,double,double,double,double,double)','org.jhotdraw.geom.BezierPath$Node.-init-(int,double,double,double,double,double,double)','342','org.jhotdraw.geom.BezierPath$Node','public Node(int mask, double x0, double y0, double x1, double y1, double x2, double y2) {\r\n    this.mask = mask;\r\n    x[0] = x0;\r\n    y[0] = y0;\r\n    x[1] = x1;\r\n    y[1] = y1;\r\n    x[2] = x2;\r\n    y[2] = y2;\r\n}'),(3418,'clone()','org.jhotdraw.geom.BezierPath$Node.clone()','342','org.jhotdraw.geom.BezierPath$Node','public Object clone() {\r\n    try {\r\n        BezierPath.Node that = ((BezierPath.Node) (super.clone()));\r\n        that.x = this.x.clone();\r\n        that.y = this.y.clone();\r\n        return that;\r\n    } catch (CloneNotSupportedException e) {\r\n        InternalError error = new InternalError();\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(3419,'equals(java.lang.Object)','org.jhotdraw.geom.BezierPath$Node.equals(java.lang.Object)','342','org.jhotdraw.geom.BezierPath$Node','public boolean equals(Object o) {\r\n    if (o instanceof BezierPath.Node) {\r\n        BezierPath.Node that = ((BezierPath.Node) (o));\r\n        return (((that.mask) == (this.mask)) && (Arrays.equals(that.x, this.x))) && (Arrays.equals(that.y, this.y));\r\n    }\r\n    return false;\r\n}'),(3420,'getControlPoint(int)','org.jhotdraw.geom.BezierPath$Node.getControlPoint(int)','342','org.jhotdraw.geom.BezierPath$Node','public Point2D.Double getControlPoint(int index) {\r\n    return new Point2D.Double(x[index], y[index]);\r\n}'),(3421,'getMask()','org.jhotdraw.geom.BezierPath$Node.getMask()','342','org.jhotdraw.geom.BezierPath$Node','public int getMask() {\r\n    return mask;\r\n}'),(3422,'hashCode()','org.jhotdraw.geom.BezierPath$Node.hashCode()','342','org.jhotdraw.geom.BezierPath$Node','public int hashCode() {\r\n    return ((((mask) & 3) << 29) | ((Arrays.hashCode(x)) & 1073676288)) | ((Arrays.hashCode(y)) & 65535);\r\n}'),(3423,'moveBy(double,double)','org.jhotdraw.geom.BezierPath$Node.moveBy(double,double)','342','org.jhotdraw.geom.BezierPath$Node','public void moveBy(double dx, double dy) {\r\n    for (int i = 0; i < 3; i++) {\r\n        x[i] += dx;\r\n        y[i] += dy;\r\n    }\r\n}'),(3424,'moveTo(double,double)','org.jhotdraw.geom.BezierPath$Node.moveTo(double,double)','342','org.jhotdraw.geom.BezierPath$Node','public void moveTo(double x, double y) {\r\n    moveBy((x - (this.x[0])), (y - (this.y[0])));\r\n}'),(3425,'moveTo(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath$Node.moveTo(java.awt.geom.Point2D$Double)','342','org.jhotdraw.geom.BezierPath$Node','public void moveTo(Point2D.Double p) {\r\n    moveBy(((p.x) - (x[0])), ((p.y) - (y[0])));\r\n}'),(3426,'setControlPoint(int,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.BezierPath$Node.setControlPoint(int,java.awt.geom.Point2D$Double)','342','org.jhotdraw.geom.BezierPath$Node','public void setControlPoint(int index, Point2D.Double p) {\r\n    x[index] = p.x;\r\n    y[index] = p.y;\r\n}'),(3427,'setMask(int)','org.jhotdraw.geom.BezierPath$Node.setMask(int)','342','org.jhotdraw.geom.BezierPath$Node','public void setMask(int newValue) {\r\n    mask = newValue;\r\n}'),(3428,'setTo(org.jhotdraw.geom.BezierPath$Node)','org.jhotdraw.geom.BezierPath$Node.setTo(org.jhotdraw.geom.BezierPath$Node)','342','org.jhotdraw.geom.BezierPath$Node','public void setTo(BezierPath.Node that) {\r\n    this.mask = that.mask;\r\n    this.keepColinear = that.keepColinear;\r\n    System.arraycopy(that.x, 0, this.x, 0, 3);\r\n    System.arraycopy(that.y, 0, this.y, 0, 3);\r\n}'),(3429,'toString()','org.jhotdraw.geom.BezierPath$Node.toString()','342','org.jhotdraw.geom.BezierPath$Node','public String toString() {\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append([);\r\n    for (int i = 0; i < 3; i++) {\r\n        if (i != 0) {\r\n            if (((mask) & i) == i) {\r\n                buf.append(,);\r\n            } else {\r\n                continue;\r\n            }\r\n        }\r\n        buf.append(x);\r\n        buf.append(i);\r\n        buf.append(=);\r\n        buf.append(x[i]);\r\n        buf.append(\",y\");\r\n        buf.append(i);\r\n        buf.append(=);\r\n        buf.append(y[i]);\r\n    }\r\n    buf.append(]);\r\n    return buf.toString();\r\n}'),(3430,'-init-(org.jhotdraw.geom.BezierPath)','org.jhotdraw.geom.BezierPathIterator.-init-(org.jhotdraw.geom.BezierPath)','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Constructs an iterator given a BezierPath.\r\n *\r\n * @see BezierPath#getPathIterator\r\n */\r\npublic BezierPathIterator(BezierPath path) {\r\n    this(path, null);\r\n}'),(3431,'-init-(org.jhotdraw.geom.BezierPath,java.awt.geom.AffineTransform)','org.jhotdraw.geom.BezierPathIterator.-init-(org.jhotdraw.geom.BezierPath,java.awt.geom.AffineTransform)','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Constructs an iterator given a BezierPath and an optional\r\n * AffineTransform.\r\n *\r\n * @see BezierPath#getPathIterator\r\n */\r\npublic BezierPathIterator(BezierPath path, AffineTransform at) {\r\n    this.path = path;\r\n    this.affine = at;\r\n}'),(3432,'currentSegment(double[])','org.jhotdraw.geom.BezierPathIterator.currentSegment(double[])','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Returns the coordinates and type of the current path segment in\r\n * the iteration.\r\n * The return value is the path segment type:\r\n * SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.\r\n * A double array of length 6 must be passed in and may be used to\r\n * store the coordinates of the point(s).\r\n * Each point is stored as a pair of double x,y coordinates.\r\n * SEG_MOVETO and SEG_LINETO types will return one point,\r\n * SEG_QUADTO will return two points,\r\n * SEG_CUBICTO will return 3 points\r\n * and SEG_CLOSE will not return any points.\r\n *\r\n * @see PathIterator#SEG_MOVETO\r\n * @see PathIterator#SEG_LINETO\r\n * @see PathIterator#SEG_QUADTO\r\n * @see PathIterator#SEG_CUBICTO\r\n * @see PathIterator#SEG_CLOSE\r\n */\r\npublic int currentSegment(double[] coords) {\r\n    int numCoords = 0;\r\n    int type = 0;\r\n    if ((index) == (path.size())) {\r\n        // We only get here for closed paths\r\n        if ((path.size()) > 1) {\r\n            BezierPath.Node previous = path.get(((path.size()) - 1));\r\n            BezierPath.Node current = path.get(0);\r\n            if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                    numCoords = 1;\r\n                    type = PathIterator.SEG_LINETO;\r\n                    coords[0] = current.x[0];\r\n                    coords[1] = current.y[0];\r\n                } else {\r\n                    numCoords = 2;\r\n                    type = PathIterator.SEG_QUADTO;\r\n                    coords[0] = current.x[1];\r\n                    coords[1] = current.y[1];\r\n                    coords[2] = current.x[0];\r\n                    coords[3] = current.y[0];\r\n                }\r\n            } else {\r\n                if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                    numCoords = 2;\r\n                    type = PathIterator.SEG_QUADTO;\r\n                    coords[0] = previous.x[2];\r\n                    coords[1] = previous.y[2];\r\n                    coords[2] = current.x[0];\r\n                    coords[3] = current.y[0];\r\n                } else {\r\n                    numCoords = 3;\r\n                    type = PathIterator.SEG_CUBICTO;\r\n                    coords[0] = previous.x[2];\r\n                    coords[1] = previous.y[2];\r\n                    coords[2] = current.x[1];\r\n                    coords[3] = current.y[1];\r\n                    coords[4] = current.x[0];\r\n                    coords[5] = current.y[0];\r\n                }\r\n            }\r\n        }\r\n    } else\r\n        if ((index) > (path.size())) {\r\n            // We only get here for closed paths\r\n            return PathIterator.SEG_CLOSE;\r\n        } else\r\n            if ((index) == 0) {\r\n                BezierPath.Node current = path.get(index);\r\n                coords[0] = current.x[0];\r\n                coords[1] = current.y[0];\r\n                numCoords = 1;\r\n                type = PathIterator.SEG_MOVETO;\r\n            } else\r\n                if ((index) < (path.size())) {\r\n                    BezierPath.Node current = path.get(index);\r\n                    BezierPath.Node previous = path.get(((index) - 1));\r\n                    if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            numCoords = 1;\r\n                            type = PathIterator.SEG_LINETO;\r\n                            coords[0] = current.x[0];\r\n                            coords[1] = current.y[0];\r\n                        } else {\r\n                            numCoords = 2;\r\n                            type = PathIterator.SEG_QUADTO;\r\n                            coords[0] = current.x[1];\r\n                            coords[1] = current.y[1];\r\n                            coords[2] = current.x[0];\r\n                            coords[3] = current.y[0];\r\n                        }\r\n                    } else {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            numCoords = 2;\r\n                            type = PathIterator.SEG_QUADTO;\r\n                            coords[0] = previous.x[2];\r\n                            coords[1] = previous.y[2];\r\n                            coords[2] = current.x[0];\r\n                            coords[3] = current.y[0];\r\n                        } else {\r\n                            numCoords = 3;\r\n                            type = PathIterator.SEG_CUBICTO;\r\n                            coords[0] = previous.x[2];\r\n                            coords[1] = previous.y[2];\r\n                            coords[2] = current.x[1];\r\n                            coords[3] = current.y[1];\r\n                            coords[4] = current.x[0];\r\n                            coords[5] = current.y[0];\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n    if ((affine) != null) {\r\n        affine.transform(coords, 0, coords, 0, numCoords);\r\n    } else {\r\n        System.arraycopy(coords, 0, coords, 0, numCoords);\r\n    }\r\n    return type;\r\n}'),(3433,'currentSegment(float[])','org.jhotdraw.geom.BezierPathIterator.currentSegment(float[])','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Returns the coordinates and type of the current path segment in\r\n * the iteration.\r\n * The return value is the path segment type:\r\n * SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.\r\n * A float array of length 6 must be passed in and may be used to\r\n * store the coordinates of the point(s).\r\n * Each point is stored as a pair of float x,y coordinates.\r\n * SEG_MOVETO and SEG_LINETO types will return one point,\r\n * SEG_QUADTO will return two points,\r\n * SEG_CUBICTO will return 3 points\r\n * and SEG_CLOSE will not return any points.\r\n *\r\n * @see PathIterator#SEG_MOVETO\r\n * @see PathIterator#SEG_LINETO\r\n * @see PathIterator#SEG_QUADTO\r\n * @see PathIterator#SEG_CUBICTO\r\n * @see PathIterator#SEG_CLOSE\r\n */\r\npublic int currentSegment(float[] coords) {\r\n    int numCoords = 0;\r\n    int type = 0;\r\n    if ((index) == (path.size())) {\r\n        // We only get here for closed paths\r\n        if ((path.size()) > 1) {\r\n            BezierPath.Node previous = path.get(((path.size()) - 1));\r\n            BezierPath.Node current = path.get(0);\r\n            if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                    numCoords = 1;\r\n                    type = PathIterator.SEG_LINETO;\r\n                    coords[0] = ((float) (current.x[0]));\r\n                    coords[1] = ((float) (current.y[0]));\r\n                } else {\r\n                    numCoords = 2;\r\n                    type = PathIterator.SEG_QUADTO;\r\n                    coords[0] = ((float) (current.x[1]));\r\n                    coords[1] = ((float) (current.y[1]));\r\n                    coords[2] = ((float) (current.x[0]));\r\n                    coords[3] = ((float) (current.y[0]));\r\n                }\r\n            } else {\r\n                if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                    numCoords = 2;\r\n                    type = PathIterator.SEG_QUADTO;\r\n                    coords[0] = ((float) (previous.x[2]));\r\n                    coords[1] = ((float) (previous.y[2]));\r\n                    coords[2] = ((float) (current.x[0]));\r\n                    coords[3] = ((float) (current.y[0]));\r\n                } else {\r\n                    numCoords = 3;\r\n                    type = PathIterator.SEG_CUBICTO;\r\n                    coords[0] = ((float) (previous.x[2]));\r\n                    coords[1] = ((float) (previous.y[2]));\r\n                    coords[2] = ((float) (current.x[1]));\r\n                    coords[3] = ((float) (current.y[1]));\r\n                    coords[4] = ((float) (current.x[0]));\r\n                    coords[5] = ((float) (current.y[0]));\r\n                }\r\n            }\r\n        }\r\n    } else\r\n        if ((index) > (path.size())) {\r\n            // We only get here for closed paths\r\n            return PathIterator.SEG_CLOSE;\r\n        } else\r\n            if ((index) == 0) {\r\n                BezierPath.Node current = path.get(index);\r\n                coords[0] = ((float) (current.x[0]));\r\n                coords[1] = ((float) (current.y[0]));\r\n                numCoords = 1;\r\n                type = PathIterator.SEG_MOVETO;\r\n            } else\r\n                if ((index) < (path.size())) {\r\n                    BezierPath.Node current = path.get(index);\r\n                    BezierPath.Node previous = path.get(((index) - 1));\r\n                    if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            numCoords = 1;\r\n                            type = PathIterator.SEG_LINETO;\r\n                            coords[0] = ((float) (current.x[0]));\r\n                            coords[1] = ((float) (current.y[0]));\r\n                        } else {\r\n                            numCoords = 2;\r\n                            type = PathIterator.SEG_QUADTO;\r\n                            coords[0] = ((float) (current.x[1]));\r\n                            coords[1] = ((float) (current.y[1]));\r\n                            coords[2] = ((float) (current.x[0]));\r\n                            coords[3] = ((float) (current.y[0]));\r\n                        }\r\n                    } else {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            numCoords = 2;\r\n                            type = PathIterator.SEG_QUADTO;\r\n                            coords[0] = ((float) (previous.x[2]));\r\n                            coords[1] = ((float) (previous.y[2]));\r\n                            coords[2] = ((float) (current.x[0]));\r\n                            coords[3] = ((float) (current.y[0]));\r\n                        } else {\r\n                            numCoords = 3;\r\n                            type = PathIterator.SEG_CUBICTO;\r\n                            coords[0] = ((float) (previous.x[2]));\r\n                            coords[1] = ((float) (previous.y[2]));\r\n                            coords[2] = ((float) (current.x[1]));\r\n                            coords[3] = ((float) (current.y[1]));\r\n                            coords[4] = ((float) (current.x[0]));\r\n                            coords[5] = ((float) (current.y[0]));\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n    if ((affine) != null) {\r\n        affine.transform(coords, 0, coords, 0, numCoords);\r\n    }\r\n    return type;\r\n}'),(3434,'getWindingRule()','org.jhotdraw.geom.BezierPathIterator.getWindingRule()','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Return the winding rule for determining the interior of the\r\n * path.\r\n *\r\n * @see PathIterator#WIND_EVEN_ODD\r\n * @see PathIterator#WIND_NON_ZERO\r\n */\r\npublic int getWindingRule() {\r\n    return path.getWindingRule();\r\n}'),(3435,'isDone()','org.jhotdraw.geom.BezierPathIterator.isDone()','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Tests if there are more points to read.\r\n *\r\n * @return true if there are more points to read\r\n */\r\npublic boolean isDone() {\r\n    return (index) >= ((path.size()) + (path.isClosed() ? 2 : 0));\r\n}'),(3436,'next()','org.jhotdraw.geom.BezierPathIterator.next()','344','org.jhotdraw.geom.BezierPathIterator','/**\r\n * Moves the iterator to the next segment of the path forwards\r\n * along the primary direction of traversal as long as there are\r\n * more points in that direction.\r\n */\r\npublic void next() {\r\n    if (!(isDone())) {\r\n        (index)++;\r\n    }\r\n}'),(3437,'-init-()','org.jhotdraw.geom.ConvexHull.-init-()','345','org.jhotdraw.geom.ConvexHull','ConvexHull() {\r\n}'),(3438,'getConvexHull(java.awt.Point[])','org.jhotdraw.geom.ConvexHull.getConvexHull(java.awt.Point[])','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a set of points.\r\n *\r\n * @param points\r\n * 		\r\n * @return convex hull of the points\r\n */\r\npublic static Point[] getConvexHull(Point[] points) {\r\n    // Quickly return if no work is needed\r\n    if ((points.length) < 3) {\r\n        return points.clone();\r\n    }\r\n    // Sort points from left to right O(n log n)\r\n    Point[] sorted = points.clone();\r\n    Arrays.sort(sorted, new Comparator<Point>() {\r\n        public int compare(Point o1, Point o2) {\r\n            int v = (o1.x) - (o2.x);\r\n            return v == 0 ? (o1.y) - (o2.y) : v;\r\n        }\r\n    });\r\n    Point[] hull = new Point[(sorted.length) + 2];\r\n    // Process upper part of convex hull O(n)\r\n    int upper = 0;// Number of points in upper part of convex hull\r\n\r\n    hull[(upper++)] = sorted[0];\r\n    hull[(upper++)] = sorted[1];\r\n    for (int i = 2; i < (sorted.length); i++) {\r\n        hull[(upper++)] = sorted[i];\r\n        while ((upper > 2) && (!(ConvexHull.isRightTurn(hull[(upper - 3)], hull[(upper - 2)], hull[(upper - 1)])))) {\r\n            hull[(upper - 2)] = hull[(upper - 1)];\r\n            upper--;\r\n        } \r\n    }\r\n    // Process lower part of convex hull O(n)\r\n    int lower = upper;// (lower - number + 1) = number of points in the lower part of the convex hull\r\n\r\n    hull[(lower++)] = sorted[((sorted.length) - 2)];\r\n    for (int i = (sorted.length) - 3; i >= 0; i--) {\r\n        hull[(lower++)] = sorted[i];\r\n        while (((lower - upper) > 1) && (!(ConvexHull.isRightTurn(hull[(lower - 3)], hull[(lower - 2)], hull[(lower - 1)])))) {\r\n            hull[(lower - 2)] = hull[(lower - 1)];\r\n            lower--;\r\n        } \r\n    }\r\n    lower -= 1;\r\n    // Reduce array\r\n    Point[] convexHull = new Point[lower];\r\n    System.arraycopy(hull, 0, convexHull, 0, lower);\r\n    return convexHull;\r\n}'),(3439,'getConvexHull(java.util.List)','org.jhotdraw.geom.ConvexHull.getConvexHull(java.util.List)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a set of points.\r\n *\r\n * @param points\r\n * 		\r\n * @return convex hull of the points\r\n */\r\npublic static List<Point> getConvexHull(List<Point> points) {\r\n    return Arrays.asList(ConvexHull.getConvexHull(points.toArray(new Point[points.size()])));\r\n}'),(3440,'getConvexHull2D(java.awt.geom.Point2D$Double[])','org.jhotdraw.geom.ConvexHull.getConvexHull2D(java.awt.geom.Point2D$Double[])','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a set of points.\r\n *\r\n * @param points\r\n * 		\r\n * @return convex hull of the points\r\n */\r\npublic static Point2D.Double[] getConvexHull2D(Point2D.Double[] points) {\r\n    // Quickly return if no work is needed\r\n    if ((points.length) < 3) {\r\n        return points.clone();\r\n    }\r\n    // Sort points from left to right O(n log n)\r\n    Point2D.Double[] sorted = points.clone();\r\n    Arrays.sort(sorted, new Comparator<Point2D.Double>() {\r\n        public int compare(Point2D.Double o1, Point2D.Double o2) {\r\n            double v = (o1.x) - (o2.x);\r\n            if (v == 0) {\r\n                v = (o1.y) - (o2.y);\r\n            }\r\n            return v > 0 ? 1 : v < 0 ? -1 : 0;\r\n        }\r\n    });\r\n    Point2D.Double[] hull = new Point2D.Double[(sorted.length) + 2];\r\n    // Process upper part of convex hull O(n)\r\n    int upper = 0;// Number of points in upper part of convex hull\r\n\r\n    hull[(upper++)] = sorted[0];\r\n    hull[(upper++)] = sorted[1];\r\n    for (int i = 2; i < (sorted.length); i++) {\r\n        hull[(upper++)] = sorted[i];\r\n        while ((upper > 2) && (!(ConvexHull.isRightTurn2D(hull[(upper - 3)], hull[(upper - 2)], hull[(upper - 1)])))) {\r\n            hull[(upper - 2)] = hull[(upper - 1)];\r\n            upper--;\r\n        } \r\n    }\r\n    // Process lower part of convex hull O(n)\r\n    int lower = upper;// (lower - number + 1) = number of points in the lower part of the convex hull\r\n\r\n    hull[(lower++)] = sorted[((sorted.length) - 2)];\r\n    for (int i = (sorted.length) - 3; i >= 0; i--) {\r\n        hull[(lower++)] = sorted[i];\r\n        while (((lower - upper) > 1) && (!(ConvexHull.isRightTurn2D(hull[(lower - 3)], hull[(lower - 2)], hull[(lower - 1)])))) {\r\n            hull[(lower - 2)] = hull[(lower - 1)];\r\n            lower--;\r\n        } \r\n    }\r\n    lower -= 1;\r\n    // Reduce array\r\n    Point2D.Double[] convexHull = new Point2D.Double[lower];\r\n    System.arraycopy(hull, 0, convexHull, 0, lower);\r\n    return convexHull;\r\n}'),(3441,'getConvexHull2D(java.util.List)','org.jhotdraw.geom.ConvexHull.getConvexHull2D(java.util.List)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a set of points.\r\n *\r\n * @param points\r\n * 		\r\n * @return convex hull of the points\r\n */\r\npublic static List<Point2D.Double> getConvexHull2D(List<Point2D.Double> points) {\r\n    return Arrays.asList(ConvexHull.getConvexHull2D(points.toArray(new Point2D.Double[points.size()])));\r\n}'),(3442,'getConvexHullPath2D(java.awt.Shape)','org.jhotdraw.geom.ConvexHull.getConvexHullPath2D(java.awt.Shape)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a shape.\r\n *\r\n * @param shape\r\n * 		an arbitray shape\r\n * @return convex hull of the points as a Polygon2D object.\r\n */\r\npublic static Polygon2D.Double getConvexHullPath2D(Shape shape) {\r\n    List<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    double[] coords = new double[6];\r\n    for (PathIterator i = shape.getPathIterator(null); !(i.isDone()); i.next()) {\r\n        switch (i.currentSegment(coords)) {\r\n            case PathIterator.SEG_CLOSE :\r\n                break;\r\n            case PathIterator.SEG_MOVETO :\r\n            case PathIterator.SEG_LINETO :\r\n                points.add(new Point2D.Double(coords[0], coords[1]));\r\n                break;\r\n            case PathIterator.SEG_QUADTO :\r\n                points.add(new Point2D.Double(coords[0], coords[1]));\r\n                points.add(new Point2D.Double(coords[2], coords[3]));\r\n                break;\r\n            case PathIterator.SEG_CUBICTO :\r\n                points.add(new Point2D.Double(coords[0], coords[1]));\r\n                points.add(new Point2D.Double(coords[2], coords[3]));\r\n                points.add(new Point2D.Double(coords[4], coords[5]));\r\n                break;\r\n        }\r\n    }\r\n    Polygon2D.Double convexHull = new Polygon2D.Double();\r\n    for (Point2D.Double p : ConvexHull.getConvexHull2D(points.toArray(new Point2D.Double[points.size()]))) {\r\n        convexHull.add(p);\r\n    }\r\n    return convexHull;\r\n}'),(3443,'getConvexHullPath2D(java.util.List)','org.jhotdraw.geom.ConvexHull.getConvexHullPath2D(java.util.List)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a set of points.\r\n *\r\n * @param points\r\n * 		\r\n * @return convex hull of the points as a Polygon2D object.\r\n */\r\npublic static Polygon2D.Double getConvexHullPath2D(List<Point2D.Double> points) {\r\n    Polygon2D.Double convexHull = new Polygon2D.Double();\r\n    for (Point p : ConvexHull.getConvexHull(points.toArray(new Point[points.size()]))) {\r\n        convexHull.add(p);\r\n    }\r\n    return convexHull;\r\n}'),(3444,'getConvexHullPolygon(java.util.List)','org.jhotdraw.geom.ConvexHull.getConvexHullPolygon(java.util.List)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Computes the convex hull from a set of points.\r\n *\r\n * @param points\r\n * 		\r\n * @return convex hull of the points as a polygon object.\r\n */\r\npublic static Polygon getConvexHullPolygon(List<Point> points) {\r\n    Polygon convexHull = new Polygon();\r\n    for (Point p : ConvexHull.getConvexHull(points.toArray(new Point[points.size()]))) {\r\n        convexHull.addPoint(p.x, p.y);\r\n    }\r\n    return convexHull;\r\n}'),(3445,'isRightTurn(java.awt.Point,java.awt.Point,java.awt.Point)','org.jhotdraw.geom.ConvexHull.isRightTurn(java.awt.Point,java.awt.Point,java.awt.Point)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Returns true, if the three given points make a right turn.\r\n *\r\n * @param p1\r\n * 		first point\r\n * @param p2\r\n * 		second point\r\n * @param p3\r\n * 		third point\r\n * @return true if right turn.\r\n */\r\npublic static boolean isRightTurn(Point p1, Point p2, Point p3) {\r\n    if ((p1.equals(p2)) || (p2.equals(p3))) {\r\n        // no right turn if points are at same location\r\n        return false;\r\n    }\r\n    double val = ((((p2.x) * (p3.y)) + ((p1.x) * (p2.y))) + ((p3.x) * (p1.y))) - ((((p2.x) * (p1.y)) + ((p3.x) * (p2.y))) + ((p1.x) * (p3.y)));\r\n    return val > 0;\r\n}'),(3446,'isRightTurn2D(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.ConvexHull.isRightTurn2D(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','345','org.jhotdraw.geom.ConvexHull','/**\r\n * Returns true, if the three given points make a right turn.\r\n *\r\n * @param p1\r\n * 		first point\r\n * @param p2\r\n * 		second point\r\n * @param p3\r\n * 		third point\r\n * @return true if right turn.\r\n */\r\npublic static boolean isRightTurn2D(Point2D.Double p1, Point2D.Double p2, Point2D.Double p3) {\r\n    if ((p1.equals(p2)) || (p2.equals(p3))) {\r\n        // no right turn if points are at same location\r\n        return false;\r\n    }\r\n    double val = ((((p2.x) * (p3.y)) + ((p1.x) * (p2.y))) + ((p3.x) * (p1.y))) - ((((p2.x) * (p1.y)) + ((p3.x) * (p2.y))) + ((p1.x) * (p3.y)));\r\n    return val > 0;\r\n}'),(3447,'-init-()','org.jhotdraw.geom.Dimension2DDouble.-init-()','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Creates an instance of <code>Dimension2DDouble</code> with a width\r\n * of zero and a height of zero.\r\n */\r\npublic Dimension2DDouble() {\r\n    this(0, 0);\r\n}'),(3448,'-init-(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.geom.Dimension2DDouble.-init-(org.jhotdraw.geom.Dimension2DDouble)','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Creates an instance of <code>Dimension2DDouble</code> whose width\r\n * and height are the same as for the specified dimension.\r\n *\r\n * @param d\r\n * 		the specified dimension for the\r\n * 		<code>width</code> and\r\n * 		<code>height</code> values\r\n */\r\npublic Dimension2DDouble(Dimension2DDouble d) {\r\n    this(d.width, d.height);\r\n}'),(3449,'-init-(double,double)','org.jhotdraw.geom.Dimension2DDouble.-init-(double,double)','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Constructs a <code>Dimension2DDouble</code> and initializes\r\n * it to the specified width and specified height.\r\n *\r\n * @param width\r\n * 		the specified width\r\n * @param height\r\n * 		the specified height\r\n */\r\npublic Dimension2DDouble(double width, double height) {\r\n    this.width = width;\r\n    this.height = height;\r\n}'),(3450,'equals(java.lang.Object)','org.jhotdraw.geom.Dimension2DDouble.equals(java.lang.Object)','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Checks whether two dimension objects have equal values.\r\n */\r\npublic boolean equals(Object obj) {\r\n    if (obj instanceof Dimension2DDouble) {\r\n        Dimension2DDouble d = ((Dimension2DDouble) (obj));\r\n        return ((width) == (d.width)) && ((height) == (d.height));\r\n    }\r\n    return false;\r\n}'),(3451,'getHeight()','org.jhotdraw.geom.Dimension2DDouble.getHeight()','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Returns the height of this dimension in double precision.\r\n *\r\n * @return the height of this dimension in double precision\r\n */\r\npublic double getHeight() {\r\n    return height;\r\n}'),(3452,'getSize()','org.jhotdraw.geom.Dimension2DDouble.getSize()','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Gets the size of this <code>Dimension2DDouble</code> object.\r\n * This method is included for completeness, to parallel the\r\n * <code>getSize</code> method defined by <code>Component</code>.\r\n *\r\n * @return the size of this dimension, a new instance of\r\n<code>Dimension2DDouble</code> with the same width and height\r\n * @see Dimension2DDouble#setSize\r\n * @see java.awt.Component#getSize\r\n * @since JDK1.1\r\n */\r\npublic Dimension2DDouble getSize() {\r\n    return new Dimension2DDouble(width, height);\r\n}'),(3453,'getWidth()','org.jhotdraw.geom.Dimension2DDouble.getWidth()','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Returns the width of this dimension in double precision.\r\n *\r\n * @return the width of this dimension in double precision\r\n */\r\npublic double getWidth() {\r\n    return width;\r\n}'),(3454,'hashCode()','org.jhotdraw.geom.Dimension2DDouble.hashCode()','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Returns the hash code for this <code>Dimension2DDouble</code>.\r\n *\r\n * @return a hash code for this <code>Dimension2DDouble</code>\r\n */\r\npublic int hashCode() {\r\n    float sum = ((float) ((width) + (height)));\r\n    return Float.floatToIntBits((((sum * (sum + 1)) / 2) + ((float) (width))));\r\n}'),(3455,'setSize(double,double)','org.jhotdraw.geom.Dimension2DDouble.setSize(double,double)','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Sets the size of this <code>Dimension2DDouble</code> object to\r\n * the specified width and height in double precision.\r\n * Note that if <code>width</code> or <code>height</code>\r\n * are larger than <code>Integer.MAX_VALUE</code>, they will\r\n * be reset to <code>Integer.MAX_VALUE</code>.\r\n *\r\n * @param width\r\n * 		the new width for the <code>Dimension2DDouble</code> object\r\n * @param height\r\n * 		the new height for the <code>Dimension2DDouble</code> object\r\n */\r\npublic void setSize(double width, double height) {\r\n    this.width = width;\r\n    this.height = height;\r\n}'),(3456,'setSize(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.geom.Dimension2DDouble.setSize(org.jhotdraw.geom.Dimension2DDouble)','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Sets the size of this <code>Dimension2DDouble</code> object to the specified size.\r\n * This method is included for completeness, to parallel the\r\n * <code>setSize</code> method defined by <code>Component</code>.\r\n *\r\n * @param d\r\n * 		the new size for this <code>Dimension2DDouble</code> object\r\n * @see Dimension2DDouble#getSize\r\n * @see java.awt.Component#setSize\r\n * @since JDK1.1\r\n */\r\npublic void setSize(Dimension2DDouble d) {\r\n    setSize(d.width, d.height);\r\n}'),(3457,'toString()','org.jhotdraw.geom.Dimension2DDouble.toString()','346','org.jhotdraw.geom.Dimension2DDouble','/**\r\n * Returns a string representation of the values of this\r\n * <code>Dimension2DDouble</code> objects <code>height</code> and\r\n * <code>width</code> fields. This method is intended to be used only\r\n * for debugging purposes, and the content and format of the returned\r\n * string may vary between implementations. The returned string may be\r\n * empty but may not be <code>null</code>.\r\n *\r\n * @return a string representation of this <code>Dimension2DDouble</code>\r\nobject\r\n */\r\npublic String toString() {\r\n    return (((((getClass().getName()) + \"[width=\") + (width)) + \",height=\") + (height)) + \"]\";\r\n}'),(3458,'-init-(float,float)','org.jhotdraw.geom.DoubleStroke.-init-(float,float)','347','org.jhotdraw.geom.DoubleStroke','public DoubleStroke(float innerWidth, float outlineWidth) {\r\n    this(innerWidth, outlineWidth, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL, 10.0F, null, 0.0F);\r\n}'),(3459,'-init-(float,float,int,int,float,float[],float)','org.jhotdraw.geom.DoubleStroke.-init-(float,float,int,int,float,float[],float)','347','org.jhotdraw.geom.DoubleStroke','public DoubleStroke(float innerWidth, float outlineWidth, int cap, int join, float miterLimit, float[] dashes, float dashPhase) {\r\n    this.innerWidth = innerWidth;\r\n    this.outlineWidth = outlineWidth;\r\n    this.miterLimit = miterLimit;\r\n    // outlineStroke = new BasicStroke(outlineWidth, cap, join, miterLimit, dashes, dashPhase);\r\n    outlineStroke = new BasicStroke(outlineWidth, cap, BasicStroke.JOIN_BEVEL, miterLimit, dashes, dashPhase);\r\n}'),(3460,'computeThickLine(double,double,double,double,double,double[])','org.jhotdraw.geom.DoubleStroke.computeThickLine(double,double,double,double,double,double[])','347','org.jhotdraw.geom.DoubleStroke','private double[] computeThickLine(double x1, double y1, double x2, double y2, double thickness, double[] corners) {\r\n    double dx = x2 - x1;\r\n    double dy = y2 - y1;\r\n    // line length\r\n    double lineLength = Math.sqrt(((dx * dx) + (dy * dy)));\r\n    double scale = thickness / (2.0 * lineLength);\r\n    // The x and y increments from an endpoint needed to create a rectangle...\r\n    double ddx = (-scale) * dy;\r\n    double ddy = scale * dx;\r\n    /* ddx += (ddx > 0) ? 0.5 : -0.5;\n    ddy += (ddy > 0) ? 0.5 : -0.5;\n     */\r\n    // Now we can compute the corner points...\r\n    corners[0] = x1 + ddx;\r\n    corners[1] = y1 + ddy;\r\n    corners[2] = x1 - ddx;\r\n    corners[3] = y1 - ddy;\r\n    corners[4] = x2 + ddx;\r\n    corners[5] = y2 + ddy;\r\n    corners[6] = x2 - ddx;\r\n    corners[7] = y2 - ddy;\r\n    return corners;\r\n}'),(3461,'computeThickLine(double[],int,double[])','org.jhotdraw.geom.DoubleStroke.computeThickLine(double[],int,double[])','347','org.jhotdraw.geom.DoubleStroke','private double[] computeThickLine(double[] seg, int offset, double[] corners) {\r\n    return computeThickLine(seg[(0 + offset)], seg[(1 + offset)], seg[(2 + offset)], seg[(3 + offset)], innerWidth, corners);\r\n}'),(3462,'createStrokedShape(java.awt.Shape)','org.jhotdraw.geom.DoubleStroke.createStrokedShape(java.awt.Shape)','347','org.jhotdraw.geom.DoubleStroke','public Shape createStrokedShape(Shape s) {\r\n    BezierPath bp = new BezierPath();\r\n    GeneralPath left = new GeneralPath();\r\n    GeneralPath right = new GeneralPath();\r\n    double[] coords = new double[6];\r\n    // FIXME - We only do a flattened path\r\n    for (PathIterator i = s.getPathIterator(null, 0.1); !(i.isDone()); i.next()) {\r\n        int type = i.currentSegment(coords);\r\n        switch (type) {\r\n            case PathIterator.SEG_MOVETO :\r\n                if ((bp.size()) != 0) {\r\n                    traceStroke(bp, left, right);\r\n                }\r\n                bp.clear();\r\n                bp.setClosed(false);\r\n                bp.moveTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_LINETO :\r\n                if (((coords[0]) != (bp.get(((bp.size()) - 1)).x[0])) || ((coords[1]) != (bp.get(((bp.size()) - 1)).y[0]))) {\r\n                    bp.lineTo(coords[0], coords[1]);\r\n                }\r\n                break;\r\n            case PathIterator.SEG_QUADTO :\r\n                bp.quadTo(coords[0], coords[1], coords[2], coords[3]);\r\n                break;\r\n            case PathIterator.SEG_CUBICTO :\r\n                bp.curveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);\r\n                break;\r\n            case PathIterator.SEG_CLOSE :\r\n                bp.setClosed(true);\r\n                break;\r\n        }\r\n    }\r\n    if ((bp.size()) != 0) {\r\n        traceStroke(bp, left, right);\r\n    }\r\n    // Note: This could be extended to use different stroke objects for\r\n    // the inner and the outher path.\r\n    right.append(left, false);\r\n    return outlineStroke.createStrokedShape(right);\r\n}'),(3463,'traceStroke(org.jhotdraw.geom.BezierPath,java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)','org.jhotdraw.geom.DoubleStroke.traceStroke(org.jhotdraw.geom.BezierPath,java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)','347','org.jhotdraw.geom.DoubleStroke','protected void traceStroke(BezierPath bp, GeneralPath left, GeneralPath right) {\r\n    // XXX - We only support straight line segments here\r\n    // Corners of the current and the previous thick line\r\n    double[] currentCorners = new double[8];\r\n    double[] prevCorners = new double[8];\r\n    Point2D.Double intersect;\r\n    // Remove duplicate nodes from bezier path.\r\n    if (bp.isClosed()) {\r\n        BezierPath.Node prev = bp.get(((bp.size()) - 1));\r\n        for (int i = 0; i < (bp.size()); i++) {\r\n            BezierPath.Node node = bp.get(i);\r\n            if (((prev.x[0]) == (node.x[0])) && ((prev.y[0]) == (node.y[0]))) {\r\n                bp.remove((i--));\r\n            } else {\r\n                prev = node;\r\n            }\r\n        }\r\n    } else {\r\n        BezierPath.Node prev = bp.get(0);\r\n        for (int i = 1; i < (bp.size()); i++) {\r\n            BezierPath.Node node = bp.get(i);\r\n            if (((prev.x[0]) == (node.x[0])) && ((prev.y[0]) == (node.y[0]))) {\r\n                bp.remove((i--));\r\n            } else {\r\n                prev = node;\r\n            }\r\n        }\r\n    }\r\n    // Handle the first point of the bezier path\r\n    if ((bp.isClosed()) && ((bp.size()) > 1)) {\r\n        prevCorners = computeThickLine(bp.get(((bp.size()) - 1)).x[0], bp.get(((bp.size()) - 1)).y[0], bp.get(0).x[0], bp.get(0).y[0], innerWidth, prevCorners);\r\n        currentCorners = computeThickLine(bp.get(0).x[0], bp.get(0).y[0], bp.get(1).x[0], bp.get(1).y[0], innerWidth, currentCorners);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.moveTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.moveTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.moveTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.moveTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    } else {\r\n        if ((bp.size()) > 1) {\r\n            currentCorners = computeThickLine(bp.get(0).x[0], bp.get(0).y[0], bp.get(1).x[0], bp.get(1).y[0], innerWidth, currentCorners);\r\n            right.moveTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n            left.moveTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    }\r\n    // Handle points in the middle of the bezier path\r\n    for (int i = 1, n = (bp.size()) - 1; i < n; i++) {\r\n        double[] tmp = prevCorners;\r\n        prevCorners = currentCorners;\r\n        currentCorners = computeThickLine(bp.get(i).x[0], bp.get(i).y[0], bp.get((i + 1)).x[0], bp.get((i + 1)).y[0], innerWidth, tmp);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.lineTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.lineTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    }\r\n    // Handle the last point of the bezier path\r\n    if ((bp.isClosed()) && ((bp.size()) > 0)) {\r\n        double[] tmp = prevCorners;\r\n        prevCorners = currentCorners;\r\n        currentCorners = // bp.get(1).x[0], bp.get(1).y[0],\r\n        computeThickLine(bp.get(((bp.size()) - 1)).x[0], bp.get(((bp.size()) - 1)).y[0], bp.get(0).x[0], bp.get(0).y[0], innerWidth, tmp);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.lineTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.lineTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n        right.closePath();\r\n        left.closePath();\r\n    } else {\r\n        if ((bp.size()) > 1) {\r\n            right.lineTo(((float) (currentCorners[4])), ((float) (currentCorners[5])));\r\n            left.lineTo(((float) (currentCorners[6])), ((float) (currentCorners[7])));\r\n        }\r\n    }\r\n}'),(3464,'-init-()','org.jhotdraw.geom.Geom.-init-()','348','org.jhotdraw.geom.Geom','// never instantiated\r\nprivate Geom() {\r\n}'),(3465,'angle(double,double,double,double)','org.jhotdraw.geom.Geom.angle(double,double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the angle of the specified line.\r\n */\r\npublic static double angle(double x1, double y1, double x2, double y2) {\r\n    return Math.atan2((y2 - y1), (x2 - x1));\r\n}'),(3466,'angleToPoint(java.awt.Rectangle,double)','org.jhotdraw.geom.Geom.angleToPoint(java.awt.Rectangle,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the point on a rectangle that corresponds to the given angle.\r\n */\r\npublic static Point angleToPoint(Rectangle r, double angle) {\r\n    double si = Math.sin(angle);\r\n    double co = Math.cos(angle);\r\n    double e = 1.0E-4;\r\n    int x = 0;\r\n    int y = 0;\r\n    if ((Math.abs(si)) > e) {\r\n        x = ((int) (((1.0 + (co / (Math.abs(si)))) / 2.0) * (r.width)));\r\n        x = Geom.range(0, r.width, x);\r\n    } else\r\n        if (co >= 0.0) {\r\n            x = r.width;\r\n        }\r\n\r\n    if ((Math.abs(co)) > e) {\r\n        y = ((int) (((1.0 + (si / (Math.abs(co)))) / 2.0) * (r.height)));\r\n        y = Geom.range(0, r.height, y);\r\n    } else\r\n        if (si >= 0.0) {\r\n            y = r.height;\r\n        }\r\n\r\n    return new Point(((r.x) + x), ((r.y) + y));\r\n}'),(3467,'angleToPoint(java.awt.geom.Rectangle2D$Double,double)','org.jhotdraw.geom.Geom.angleToPoint(java.awt.geom.Rectangle2D$Double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the point on a rectangle that corresponds to the given angle.\r\n */\r\npublic static Point2D.Double angleToPoint(Rectangle2D.Double r, double angle) {\r\n    double si = Math.sin(angle);\r\n    double co = Math.cos(angle);\r\n    double e = 1.0E-4;\r\n    double x = 0;\r\n    double y = 0;\r\n    if ((Math.abs(si)) > e) {\r\n        x = ((1.0 + (co / (Math.abs(si)))) / 2.0) * (r.width);\r\n        x = Geom.range(0, r.width, x);\r\n    } else\r\n        if (co >= 0.0) {\r\n            x = r.width;\r\n        }\r\n\r\n    if ((Math.abs(co)) > e) {\r\n        y = ((1.0 + (si / (Math.abs(co)))) / 2.0) * (r.height);\r\n        y = Geom.range(0, r.height, y);\r\n    } else\r\n        if (si >= 0.0) {\r\n            y = r.height;\r\n        }\r\n\r\n    return new Point2D.Double(((r.x) + x), ((r.y) + y));\r\n}'),(3468,'cap(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.Geom.cap(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Caps the line defined by p1 and p2 by the number of units\r\n * specified by radius.\r\n *\r\n * @return A new end point for the line.\r\n */\r\npublic static Point2D.Double cap(Point2D.Double p1, Point2D.Double p2, double radius) {\r\n    double angle = ((Math.PI) / 2) - (Math.atan2(((p2.x) - (p1.x)), ((p2.y) - (p1.y))));\r\n    Point2D.Double p3 = new Point2D.Double(((p2.x) + (radius * (Math.cos(angle)))), ((p2.y) + (radius * (Math.sin(angle)))));\r\n    return p3;\r\n}'),(3469,'center(java.awt.Rectangle)','org.jhotdraw.geom.Geom.center(java.awt.Rectangle)','348','org.jhotdraw.geom.Geom','public static Point center(Rectangle r) {\r\n    return new Point(((r.x) + ((r.width) / 2)), ((r.y) + ((r.height) / 2)));\r\n}'),(3470,'center(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.center(java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','public static Point2D.Double center(Rectangle2D.Double r) {\r\n    return new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + ((r.height) / 2)));\r\n}'),(3471,'chop(java.awt.Shape,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Geom.chop(java.awt.Shape,java.awt.geom.Point2D$Double)','348','org.jhotdraw.geom.Geom','/**\r\n * Returns a point on the edge of the bezier path which crosses the line\r\n * from the center of the bezier path to the specified point.\r\n * If no edge crosses the line, the nearest C0 control point is returned.\r\n */\r\npublic static Point2D.Double chop(Shape shape, Point2D.Double p) {\r\n    Rectangle2D bounds = shape.getBounds2D();\r\n    Point2D.Double ctr = new Point2D.Double(bounds.getCenterX(), bounds.getCenterY());\r\n    // Chopped point\r\n    double cx = -1;\r\n    double cy = -1;\r\n    double len = Double.MAX_VALUE;\r\n    // Try for points along edge\r\n    PathIterator i = shape.getPathIterator(new AffineTransform(), 1);\r\n    double[] coords = new double[6];\r\n    int type = i.currentSegment(coords);\r\n    double prevX = coords[0];\r\n    double prevY = coords[1];\r\n    double moveToX = prevX;\r\n    double moveToY = prevY;\r\n    i.next();\r\n    for (; !(i.isDone()); i.next()) {\r\n        switch (i.currentSegment(coords)) {\r\n            case PathIterator.SEG_MOVETO :\r\n                moveToX = coords[0];\r\n                moveToY = coords[1];\r\n                break;\r\n            case PathIterator.SEG_CLOSE :\r\n                coords[0] = moveToX;\r\n                coords[1] = moveToY;\r\n                break;\r\n        }\r\n        Point2D.Double chop = Geom.intersect(prevX, prevY, coords[0], coords[1], p.x, p.y, ctr.x, ctr.y);\r\n        if (chop != null) {\r\n            double cl = Geom.length2(chop.x, chop.y, p.x, p.y);\r\n            if (cl < len) {\r\n                len = cl;\r\n                cx = chop.x;\r\n                cy = chop.y;\r\n            }\r\n        }\r\n        prevX = coords[0];\r\n        prevY = coords[1];\r\n    }\r\n    /* if (isClosed() && size() > 1) {\n    Node first = get(0);\n    Node last = get(size() - 1);\n    Point2D.Double chop = Geom.intersect(\n    first.x[0], first.y[0],\n    last.x[0], last.y[0],\n    p.x, p.y,\n    ctr.x, ctr.y\n    );\n    if (chop != null) {\n    double cl = Geom.length2(chop.x, chop.y, p.x, p.y);\n    if (cl < len) {\n    len = cl;\n    cx = chop.x;\n    cy = chop.y;\n    }\n    }\n    }\n     */\r\n    // if none found, pick closest vertex\r\n    if (len == (Double.MAX_VALUE)) {\r\n        i = shape.getPathIterator(new AffineTransform(), 1);\r\n        for (; !(i.isDone()); i.next()) {\r\n            i.currentSegment(coords);\r\n            double l = Geom.length2(ctr.x, ctr.y, coords[0], coords[1]);\r\n            if (l < len) {\r\n                len = l;\r\n                cx = coords[0];\r\n                cy = coords[1];\r\n            }\r\n        }\r\n    }\r\n    return new Point2D.Double(cx, cy);\r\n}'),(3472,'contains(java.awt.geom.Rectangle2D$Double,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.contains(java.awt.geom.Rectangle2D$Double,java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','/**\r\n * Returns true, if rectangle 1 contains rectangle 2.\r\n * <p>\r\n * This method is similar to Rectangle2D.contains, but also returns true,\r\n * when rectangle1 contains rectangle2 and either or both of them\r\n * are empty.\r\n *\r\n * @param r1\r\n * 		Rectangle 1.\r\n * @param r2\r\n * 		Rectangle 2.\r\n * @return true if r1 contains r2.\r\n */\r\npublic static boolean contains(Rectangle2D.Double r1, Rectangle2D.Double r2) {\r\n    return ((((r2.x) >= (r1.x)) && ((r2.y) >= (r1.y))) && (((r2.x) + (Math.max(0, r2.width))) <= ((r1.x) + (Math.max(0, r1.width))))) && (((r2.y) + (Math.max(0, r2.height))) <= ((r1.y) + (Math.max(0, r1.height))));\r\n}'),(3473,'contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)','org.jhotdraw.geom.Geom.contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)','348','org.jhotdraw.geom.Geom','/**\r\n * Returns true, if rectangle 1 contains rectangle 2.\r\n * <p>\r\n * This method is similar to Rectangle2D.contains, but also returns true,\r\n * when rectangle1 contains rectangle2 and either or both of them\r\n * are empty.\r\n *\r\n * @param r1\r\n * 		Rectangle 1.\r\n * @param r2\r\n * 		Rectangle 2.\r\n * @return true if r1 contains r2.\r\n */\r\npublic static boolean contains(Rectangle2D r1, Rectangle2D r2) {\r\n    return ((((r2.getX()) >= (r1.getX())) && ((r2.getY()) >= (r1.getY()))) && (((r2.getX()) + (Math.max(0, r2.getWidth()))) <= ((r1.getX()) + (Math.max(0, r1.getWidth()))))) && (((r2.getY()) + (Math.max(0, r2.getHeight()))) <= ((r1.getY()) + (Math.max(0, r1.getHeight()))));\r\n}'),(3474,'direction(double,double,double,double)','org.jhotdraw.geom.Geom.direction(double,double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Returns the direction OUT_TOP, OUT_BOTTOM, OUT_LEFT, OUT_RIGHT from\r\n * one point to another one.\r\n */\r\npublic static int direction(double x1, double y1, double x2, double y2) {\r\n    int direction = 0;\r\n    double vx = x2 - x1;\r\n    double vy = y2 - y1;\r\n    if ((vy < vx) && (vx > (-vy))) {\r\n        direction = Geom.OUT_RIGHT;\r\n    } else\r\n        if ((vy > vx) && (vy > (-vx))) {\r\n            direction = Geom.OUT_TOP;\r\n        } else\r\n            if ((vx < vy) && (vx < (-vy))) {\r\n                direction = Geom.OUT_LEFT;\r\n            } else {\r\n                direction = Geom.OUT_BOTTOM;\r\n            }\r\n\r\n\r\n    return direction;\r\n}'),(3475,'direction(int,int,int,int)','org.jhotdraw.geom.Geom.direction(int,int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * Returns the direction OUT_TOP, OUT_BOTTOM, OUT_LEFT, OUT_RIGHT from\r\n * one point to another one.\r\n */\r\npublic static int direction(int x1, int y1, int x2, int y2) {\r\n    int direction = 0;\r\n    int vx = x2 - x1;\r\n    int vy = y2 - y1;\r\n    if ((vy < vx) && (vx > (-vy))) {\r\n        direction = Geom.OUT_RIGHT;\r\n    } else\r\n        if ((vy > vx) && (vy > (-vx))) {\r\n            direction = Geom.OUT_TOP;\r\n        } else\r\n            if ((vx < vy) && (vx < (-vy))) {\r\n                direction = Geom.OUT_LEFT;\r\n            } else {\r\n                direction = Geom.OUT_BOTTOM;\r\n            }\r\n\r\n\r\n    return direction;\r\n}'),(3476,'distanceFromLine(int,int,int,int,int,int)','org.jhotdraw.geom.Geom.distanceFromLine(int,int,int,int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * compute distance of point from line segment, or\r\n * Double.MAX_VALUE if perpendicular projection is outside segment; or\r\n * If pts on line are same, return distance from point\r\n */\r\n// from Doug Leas PolygonFigure\r\npublic static double distanceFromLine(int xa, int ya, int xb, int yb, int xc, int yc) {\r\n    // source:http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html#q7\r\n    // Let the point be C (XC,YC) and the line be AB (XA,YA) to (XB,YB).\r\n    // The length of the\r\n    // line segment AB is L:\r\n    // \r\n    // ___________________\r\n    // |        2         2\r\n    // L = | (XB-XA) + (YB-YA)\r\n    // and\r\n    // \r\n    // (YA-YC)(YA-YB)-(XA-XC)(XB-XA)\r\n    // r = -----------------------------\r\n    // L**2\r\n    // \r\n    // (YA-YC)(XB-XA)-(XA-XC)(YB-YA)\r\n    // s = -----------------------------\r\n    // L**2\r\n    // \r\n    // Let I be the point of perpendicular projection of C onto AB, the\r\n    // \r\n    // XI=XA+r(XB-XA)\r\n    // YI=YA+r(YB-YA)\r\n    // \r\n    // Distance from A to I = r*L\r\n    // Distance from C to I = s*L\r\n    // \r\n    // If r < 0 I is on backward extension of AB\r\n    // If r>1 I is on ahead extension of AB\r\n    // If 0<=r<=1 I is on AB\r\n    // \r\n    // If s < 0 C is left of AB (you can just check the numerator)\r\n    // If s>0 C is right of AB\r\n    // If s=0 C is on AB\r\n    int xdiff = xb - xa;\r\n    int ydiff = yb - ya;\r\n    long l2 = (xdiff * xdiff) + (ydiff * ydiff);\r\n    if (l2 == 0) {\r\n        return Geom.length(xa, ya, xc, yc);\r\n    }\r\n    double rnum = ((ya - yc) * (ya - yb)) - ((xa - xc) * (xb - xa));\r\n    double r = rnum / l2;\r\n    if ((r < 0.0) || (r > 1.0)) {\r\n        return Double.MAX_VALUE;\r\n    }\r\n    double xi = xa + (r * xdiff);\r\n    double yi = ya + (r * ydiff);\r\n    double xd = xc - xi;\r\n    double yd = yc - yi;\r\n    return Math.sqrt(((xd * xd) + (yd * yd)));\r\n    /* for directional version, instead use\n    double snum =  (ya-yc) * (xb-xa) - (xa-xc) * (yb-ya);\n    double s = snum / l2;\n\n    double l = sqrt((double)l2);\n    return = s * l;\n     */\r\n}'),(3477,'east(java.awt.Rectangle)','org.jhotdraw.geom.Geom.east(java.awt.Rectangle)','348','org.jhotdraw.geom.Geom','public static Point east(Rectangle r) {\r\n    return new Point(((r.x) + (r.width)), ((r.y) + ((r.height) / 2)));\r\n}'),(3478,'east(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.east(java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','public static Point2D.Double east(Rectangle2D.Double r) {\r\n    return new Point2D.Double(((r.x) + (r.width)), ((r.y) + ((r.height) / 2)));\r\n}'),(3479,'grow(java.awt.geom.Rectangle2D$Double,double,double)','org.jhotdraw.geom.Geom.grow(java.awt.geom.Rectangle2D$Double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Resizes the <code>Rectangle2D.Double</code> both horizontally and vertically.\r\n * <p>\r\n * This method modifies the <code>Rectangle2D.Double</code> so that it is\r\n * <code>h</code> units larger on both the left and right side,\r\n * and <code>v</code> units larger at both the top and bottom.\r\n * <p>\r\n * The new <code>Rectangle2D.Double</code> has (<code>x&nbsp;-&nbsp;h</code>,\r\n * <code>y&nbsp;-&nbsp;v</code>) as its top-left corner, a\r\n * width of\r\n * <code>width</code>&nbsp;<code>+</code>&nbsp;<code>2h</code>,\r\n * and a height of\r\n * <code>height</code>&nbsp;<code>+</code>&nbsp;<code>2v</code>.\r\n * <p>\r\n * If negative values are supplied for <code>h</code> and\r\n * <code>v</code>, the size of the <code>Rectangle2D.Double</code>\r\n * decreases accordingly.\r\n * The <code>grow</code> method does not check whether the resulting\r\n * values of <code>width</code> and <code>height</code> are\r\n * non-negative.\r\n *\r\n * @param h\r\n * 		the horizontal expansion\r\n * @param v\r\n * 		the vertical expansion\r\n */\r\npublic static void grow(Rectangle2D.Double r, double h, double v) {\r\n    r.x -= h;\r\n    r.y -= v;\r\n    r.width += h * 2.0;\r\n    r.height += v * 2.0;\r\n}'),(3480,'intersect(double,double,double,double,double,double,double,double)','org.jhotdraw.geom.Geom.intersect(double,double,double,double,double,double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Standard line intersection algorithm\r\n * Return the point of intersection if it exists, else null\r\n */\r\n// from Doug Leas PolygonFigure\r\npublic static Point2D.Double intersect(double xa, // line 1 point 1 x\r\ndouble ya, // line 1 point 1 y\r\ndouble xb, // line 1 point 2 x\r\ndouble yb, // line 1 point 2 y\r\ndouble xc, // line 2 point 1 x\r\ndouble yc, // line 2 point 1 y\r\ndouble xd, // line 2 point 2 x\r\ndouble yd) {\r\n    // line 2 point 2 y\r\n    // source: http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html\r\n    // eq: for lines AB and CD\r\n    // (YA-YC)(XD-XC)-(XA-XC)(YD-YC)\r\n    // r = -----------------------------  (eqn 1)\r\n    // (XB-XA)(YD-YC)-(YB-YA)(XD-XC)\r\n    // \r\n    // (YA-YC)(XB-XA)-(XA-XC)(YB-YA)\r\n    // s = -----------------------------  (eqn 2)\r\n    // (XB-XA)(YD-YC)-(YB-YA)(XD-XC)\r\n    // XI = XA + r(XB-XA)\r\n    // YI = YA + r(YB-YA)\r\n    double denom = ((xb - xa) * (yd - yc)) - ((yb - ya) * (xd - xc));\r\n    double rnum = ((ya - yc) * (xd - xc)) - ((xa - xc) * (yd - yc));\r\n    if (denom == 0.0) {\r\n        // parallel\r\n        if (rnum == 0.0) {\r\n            // coincident; pick one end of first line\r\n            if (((xa < xb) && ((xb < xc) || (xb < xd))) || ((xa > xb) && ((xb > xc) || (xb > xd)))) {\r\n                return new Point2D.Double(xb, yb);\r\n            } else {\r\n                return new Point2D.Double(xa, ya);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    double r = rnum / denom;\r\n    double snum = ((ya - yc) * (xb - xa)) - ((xa - xc) * (yb - ya));\r\n    double s = snum / denom;\r\n    if ((((0.0 <= r) && (r <= 1.0)) && (0.0 <= s)) && (s <= 1.0)) {\r\n        double px = xa + ((xb - xa) * r);\r\n        double py = ya + ((yb - ya) * r);\r\n        return new Point2D.Double(px, py);\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(3481,'intersect(double,double,double,double,double,double,double,double,double)','org.jhotdraw.geom.Geom.intersect(double,double,double,double,double,double,double,double,double)','348','org.jhotdraw.geom.Geom','public static Point2D.Double intersect(double xa, // line 1 point 1 x\r\ndouble ya, // line 1 point 1 y\r\ndouble xb, // line 1 point 2 x\r\ndouble yb, // line 1 point 2 y\r\ndouble xc, // line 2 point 1 x\r\ndouble yc, // line 2 point 1 y\r\ndouble xd, // line 2 point 2 x\r\ndouble yd, double limit) {\r\n    // line 2 point 2 y\r\n    // source: http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html\r\n    // eq: for lines AB and CD\r\n    // (YA-YC)(XD-XC)-(XA-XC)(YD-YC)\r\n    // r = -----------------------------  (eqn 1)\r\n    // (XB-XA)(YD-YC)-(YB-YA)(XD-XC)\r\n    // \r\n    // (YA-YC)(XB-XA)-(XA-XC)(YB-YA)\r\n    // s = -----------------------------  (eqn 2)\r\n    // (XB-XA)(YD-YC)-(YB-YA)(XD-XC)\r\n    // XI = XA + r(XB-XA)\r\n    // YI = YA + r(YB-YA)\r\n    double denom = ((xb - xa) * (yd - yc)) - ((yb - ya) * (xd - xc));\r\n    double rnum = ((ya - yc) * (xd - xc)) - ((xa - xc) * (yd - yc));\r\n    if (denom == 0.0) {\r\n        // parallel\r\n        if (rnum == 0.0) {\r\n            // coincident; pick one end of first line\r\n            if (((xa < xb) && ((xb < xc) || (xb < xd))) || ((xa > xb) && ((xb > xc) || (xb > xd)))) {\r\n                return new Point2D.Double(xb, yb);\r\n            } else {\r\n                return new Point2D.Double(xa, ya);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    double r = rnum / denom;\r\n    double snum = ((ya - yc) * (xb - xa)) - ((xa - xc) * (yb - ya));\r\n    double s = snum / denom;\r\n    if ((((0.0 <= r) && (r <= 1.0)) && (0.0 <= s)) && (s <= 1.0)) {\r\n        double px = xa + ((xb - xa) * r);\r\n        double py = ya + ((yb - ya) * r);\r\n        return new Point2D.Double(px, py);\r\n    } else {\r\n        double px = xa + ((xb - xa) * r);\r\n        double py = ya + ((yb - ya) * r);\r\n        if (((((Geom.length(xa, ya, px, py)) <= limit) || ((Geom.length(xb, yb, px, py)) <= limit)) || ((Geom.length(xc, yc, px, py)) <= limit)) || ((Geom.length(xd, yd, px, py)) <= limit)) {\r\n            return new Point2D.Double(px, py);\r\n        }\r\n        return null;\r\n    }\r\n}'),(3482,'intersect(int,int,int,int,int,int,int,int)','org.jhotdraw.geom.Geom.intersect(int,int,int,int,int,int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * Standard line intersection algorithm\r\n * Return the point of intersection if it exists, else null\r\n */\r\n// from Doug Leas PolygonFigure\r\npublic static Point intersect(int xa, // line 1 point 1 x\r\nint ya, // line 1 point 1 y\r\nint xb, // line 1 point 2 x\r\nint yb, // line 1 point 2 y\r\nint xc, // line 2 point 1 x\r\nint yc, // line 2 point 1 y\r\nint xd, // line 2 point 2 x\r\nint yd) {\r\n    // line 2 point 2 y\r\n    // source: http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html\r\n    // eq: for lines AB and CD\r\n    // (YA-YC)(XD-XC)-(XA-XC)(YD-YC)\r\n    // r = -----------------------------  (eqn 1)\r\n    // (XB-XA)(YD-YC)-(YB-YA)(XD-XC)\r\n    // \r\n    // (YA-YC)(XB-XA)-(XA-XC)(YB-YA)\r\n    // s = -----------------------------  (eqn 2)\r\n    // (XB-XA)(YD-YC)-(YB-YA)(XD-XC)\r\n    // XI = XA + r(XB-XA)\r\n    // YI = YA + r(YB-YA)\r\n    double denom = ((xb - xa) * (yd - yc)) - ((yb - ya) * (xd - xc));\r\n    double rnum = ((ya - yc) * (xd - xc)) - ((xa - xc) * (yd - yc));\r\n    if (denom == 0.0) {\r\n        // parallel\r\n        if (rnum == 0.0) {\r\n            // coincident; pick one end of first line\r\n            if (((xa < xb) && ((xb < xc) || (xb < xd))) || ((xa > xb) && ((xb > xc) || (xb > xd)))) {\r\n                return new Point(xb, yb);\r\n            } else {\r\n                return new Point(xa, ya);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    double r = rnum / denom;\r\n    double snum = ((ya - yc) * (xb - xa)) - ((xa - xc) * (yb - ya));\r\n    double s = snum / denom;\r\n    if ((((0.0 <= r) && (r <= 1.0)) && (0.0 <= s)) && (s <= 1.0)) {\r\n        int px = ((int) (xa + ((xb - xa) * r)));\r\n        int py = ((int) (ya + ((yb - ya) * r)));\r\n        return new Point(px, py);\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(3483,'length(double,double,double,double)','org.jhotdraw.geom.Geom.length(double,double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the distance between to points\r\n */\r\npublic static double length(double x1, double y1, double x2, double y2) {\r\n    return Math.sqrt(Geom.length2(x1, y1, x2, y2));\r\n}'),(3484,'length(int,int,int,int)','org.jhotdraw.geom.Geom.length(int,int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the distance between to points\r\n */\r\npublic static long length(int x1, int y1, int x2, int y2) {\r\n    return ((long) (Math.sqrt(Geom.length2(x1, y1, x2, y2))));\r\n}'),(3485,'length(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Geom.length(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the distance between to points\r\n */\r\npublic static double length(Point2D.Double p1, Point2D.Double p2) {\r\n    return Math.sqrt(Geom.length2(p1.x, p1.y, p2.x, p2.y));\r\n}'),(3486,'length2(double,double,double,double)','org.jhotdraw.geom.Geom.length2(double,double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the square distance between two points.\r\n */\r\npublic static double length2(double x1, double y1, double x2, double y2) {\r\n    return ((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1));\r\n}'),(3487,'length2(int,int,int,int)','org.jhotdraw.geom.Geom.length2(int,int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the square distance between two points.\r\n */\r\npublic static long length2(int x1, int y1, int x2, int y2) {\r\n    return ((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1));\r\n}'),(3488,'lineContainsPoint(double,double,double,double,double,double,double)','org.jhotdraw.geom.Geom.lineContainsPoint(double,double,double,double,double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Tests if a point is on a line.\r\n * <p>changed Werner Randelshofer 2003-11-26\r\n */\r\npublic static boolean lineContainsPoint(double x1, double y1, double x2, double y2, double px, double py, double tolerance) {\r\n    Rectangle2D.Double r = new Rectangle2D.Double(x1, y1, 0, 0);\r\n    r.add(x2, y2);\r\n    double grow = Math.max(2, ((int) (Math.ceil(tolerance))));\r\n    r.x -= grow;\r\n    r.y -= grow;\r\n    r.width += grow * 2;\r\n    r.height += grow * 2;\r\n    if (!(r.contains(px, py))) {\r\n        return false;\r\n    }\r\n    double a;\r\n    double b;\r\n    double x;\r\n    double y;\r\n    if (x1 == x2) {\r\n        return (Math.abs((px - x1))) <= tolerance;\r\n    }\r\n    if (y1 == y2) {\r\n        return (Math.abs((py - y1))) <= tolerance;\r\n    }\r\n    a = ((double) (y1 - y2)) / ((double) (x1 - x2));\r\n    b = ((double) (y1)) - (a * ((double) (x1)));\r\n    x = (py - b) / a;\r\n    y = (a * px) + b;\r\n    return (Math.min(Math.abs((x - px)), Math.abs((y - py)))) <= tolerance;\r\n}'),(3489,'lineContainsPoint(int,int,int,int,int,int)','org.jhotdraw.geom.Geom.lineContainsPoint(int,int,int,int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * Tests if a point is on a line.\r\n */\r\npublic static boolean lineContainsPoint(int x1, int y1, int x2, int y2, int px, int py) {\r\n    return Geom.lineContainsPoint(x1, y1, x2, y2, px, py, 3.0);\r\n}'),(3490,'lineContainsPoint(int,int,int,int,int,int,double)','org.jhotdraw.geom.Geom.lineContainsPoint(int,int,int,int,int,int,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Tests if a point is on a line.\r\n * <p>changed Werner Randelshofer 2003-11-26\r\n */\r\npublic static boolean lineContainsPoint(int x1, int y1, int x2, int y2, int px, int py, double tolerance) {\r\n    Rectangle r = new Rectangle(new Point(x1, y1));\r\n    r.add(x2, y2);\r\n    r.grow(Math.max(2, ((int) (Math.ceil(tolerance)))), Math.max(2, ((int) (Math.ceil(tolerance)))));\r\n    if (!(r.contains(px, py))) {\r\n        return false;\r\n    }\r\n    double a;\r\n    double b;\r\n    double x;\r\n    double y;\r\n    if (x1 == x2) {\r\n        return (Math.abs((px - x1))) <= tolerance;\r\n    }\r\n    if (y1 == y2) {\r\n        return (Math.abs((py - y1))) <= tolerance;\r\n    }\r\n    a = ((double) (y1 - y2)) / ((double) (x1 - x2));\r\n    b = ((double) (y1)) - (a * ((double) (x1)));\r\n    x = (py - b) / a;\r\n    y = (a * px) + b;\r\n    return (Math.min(Math.abs((x - px)), Math.abs((y - py)))) <= tolerance;\r\n}'),(3491,'north(java.awt.Rectangle)','org.jhotdraw.geom.Geom.north(java.awt.Rectangle)','348','org.jhotdraw.geom.Geom','public static Point north(Rectangle r) {\r\n    return new Point(((r.x) + ((r.width) / 2)), r.y);\r\n}'),(3492,'north(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.north(java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','public static Point2D.Double north(Rectangle2D.Double r) {\r\n    return new Point2D.Double(((r.x) + ((r.width) / 2)), r.y);\r\n}'),(3493,'outcode(java.awt.Rectangle,java.awt.Rectangle)','org.jhotdraw.geom.Geom.outcode(java.awt.Rectangle,java.awt.Rectangle)','348','org.jhotdraw.geom.Geom','/**\r\n * This method computes a binary OR of the appropriate mask values\r\n * indicating, for each side of Rectangle r1, whether or not the\r\n * Rectangle r2 is on the same side of the edge as the rest\r\n * of this Rectangle.\r\n *\r\n * @return the logical OR of all appropriate out codes OUT_RIGHT, OUT_LEFT, OUT_BOTTOM,\r\nOUT_TOP.\r\n */\r\npublic static int outcode(Rectangle r1, Rectangle r2) {\r\n    int outcode = 0;\r\n    if ((r2.x) > ((r1.x) + (r1.width))) {\r\n        outcode = Geom.OUT_RIGHT;\r\n    } else\r\n        if (((r2.x) + (r2.width)) < (r1.x)) {\r\n            outcode = Geom.OUT_LEFT;\r\n        }\r\n\r\n    if ((r2.y) > ((r1.y) + (r1.height))) {\r\n        outcode |= Geom.OUT_BOTTOM;\r\n    } else\r\n        if (((r2.y) + (r2.height)) < (r1.y)) {\r\n            outcode |= Geom.OUT_TOP;\r\n        }\r\n\r\n    return outcode;\r\n}'),(3494,'outcode(java.awt.geom.Rectangle2D$Double,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.outcode(java.awt.geom.Rectangle2D$Double,java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','/**\r\n * This method computes a binary OR of the appropriate mask values\r\n * indicating, for each side of Rectangle r1, whether or not the\r\n * Rectangle r2 is on the same side of the edge as the rest\r\n * of this Rectangle.\r\n *\r\n * @return the logical OR of all appropriate out codes OUT_RIGHT, OUT_LEFT, OUT_BOTTOM,\r\nOUT_TOP.\r\n */\r\npublic static int outcode(Rectangle2D.Double r1, Rectangle2D.Double r2) {\r\n    int outcode = 0;\r\n    if ((r2.x) > ((r1.x) + (r1.width))) {\r\n        outcode = Geom.OUT_RIGHT;\r\n    } else\r\n        if (((r2.x) + (r2.width)) < (r1.x)) {\r\n            outcode = Geom.OUT_LEFT;\r\n        }\r\n\r\n    if ((r2.y) > ((r1.y) + (r1.height))) {\r\n        outcode |= Geom.OUT_BOTTOM;\r\n    } else\r\n        if (((r2.y) + (r2.height)) < (r1.y)) {\r\n            outcode |= Geom.OUT_TOP;\r\n        }\r\n\r\n    return outcode;\r\n}'),(3495,'ovalAngleToPoint(java.awt.Rectangle,double)','org.jhotdraw.geom.Geom.ovalAngleToPoint(java.awt.Rectangle,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the point on an oval that corresponds to the given angle.\r\n */\r\npublic static Point ovalAngleToPoint(Rectangle r, double angle) {\r\n    Point center = Geom.center(r);\r\n    Point p = Geom.polarToPoint(angle, ((r.width) / 2), ((r.height) / 2));\r\n    return new Point(((center.x) + (p.x)), ((center.y) + (p.y)));\r\n}'),(3496,'ovalAngleToPoint(java.awt.geom.Rectangle2D$Double,double)','org.jhotdraw.geom.Geom.ovalAngleToPoint(java.awt.geom.Rectangle2D$Double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the point on an oval that corresponds to the given angle.\r\n */\r\npublic static Point2D.Double ovalAngleToPoint(Rectangle2D.Double r, double angle) {\r\n    Point2D.Double center = Geom.center(r);\r\n    Point2D.Double p = Geom.polarToPoint2D(angle, ((r.width) / 2), ((r.height) / 2));\r\n    return new Point2D.Double(((center.x) + (p.x)), ((center.y) + (p.y)));\r\n}'),(3497,'pointToAngle(java.awt.Rectangle,java.awt.Point)','org.jhotdraw.geom.Geom.pointToAngle(java.awt.Rectangle,java.awt.Point)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the angle of a point relative to a rectangle.\r\n */\r\npublic static double pointToAngle(Rectangle r, Point p) {\r\n    int px = (p.x) - ((r.x) + ((r.width) / 2));\r\n    int py = (p.y) - ((r.y) + ((r.height) / 2));\r\n    return Math.atan2((py * (r.width)), (px * (r.height)));\r\n}'),(3498,'pointToAngle(java.awt.geom.Rectangle2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.geom.Geom.pointToAngle(java.awt.geom.Rectangle2D$Double,java.awt.geom.Point2D$Double)','348','org.jhotdraw.geom.Geom','/**\r\n * Gets the angle of a point relative to a rectangle.\r\n */\r\npublic static double pointToAngle(Rectangle2D.Double r, Point2D.Double p) {\r\n    double px = (p.x) - ((r.x) + ((r.width) / 2));\r\n    double py = (p.y) - ((r.y) + ((r.height) / 2));\r\n    return Math.atan2((py * (r.width)), (px * (r.height)));\r\n}'),(3499,'polarToPoint(double,double,double)','org.jhotdraw.geom.Geom.polarToPoint(double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Converts a polar to a point\r\n */\r\npublic static Point polarToPoint(double angle, double fx, double fy) {\r\n    double si = Math.sin(angle);\r\n    double co = Math.cos(angle);\r\n    return new Point(((int) ((fx * co) + 0.5)), ((int) ((fy * si) + 0.5)));\r\n}'),(3500,'polarToPoint2D(double,double,double)','org.jhotdraw.geom.Geom.polarToPoint2D(double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Converts a polar to a point\r\n */\r\npublic static Point2D.Double polarToPoint2D(double angle, double fx, double fy) {\r\n    double si = Math.sin(angle);\r\n    double co = Math.cos(angle);\r\n    return new Point2D.Double(((fx * co) + 0.5), ((fy * si) + 0.5));\r\n}'),(3501,'range(double,double,double)','org.jhotdraw.geom.Geom.range(double,double,double)','348','org.jhotdraw.geom.Geom','/**\r\n * Constains a value to the given range.\r\n *\r\n * @return the constrained value\r\n */\r\npublic static double range(double min, double max, double value) {\r\n    if (value < min) {\r\n        value = min;\r\n    }\r\n    if (value > max) {\r\n        value = max;\r\n    }\r\n    return value;\r\n}'),(3502,'range(int,int,int)','org.jhotdraw.geom.Geom.range(int,int,int)','348','org.jhotdraw.geom.Geom','/**\r\n * Constains a value to the given range.\r\n *\r\n * @return the constrained value\r\n */\r\npublic static int range(int min, int max, int value) {\r\n    if (value < min) {\r\n        value = min;\r\n    }\r\n    if (value > max) {\r\n        value = max;\r\n    }\r\n    return value;\r\n}'),(3503,'south(java.awt.Rectangle)','org.jhotdraw.geom.Geom.south(java.awt.Rectangle)','348','org.jhotdraw.geom.Geom','public static Point south(Rectangle r) {\r\n    return new Point(((r.x) + ((r.width) / 2)), ((r.y) + (r.height)));\r\n}'),(3504,'south(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.south(java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','public static Point2D.Double south(Rectangle2D.Double r) {\r\n    return new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + (r.height)));\r\n}'),(3505,'west(java.awt.Rectangle)','org.jhotdraw.geom.Geom.west(java.awt.Rectangle)','348','org.jhotdraw.geom.Geom','public static Point west(Rectangle r) {\r\n    return new Point(r.x, ((r.y) + ((r.height) / 2)));\r\n}'),(3506,'west(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.Geom.west(java.awt.geom.Rectangle2D$Double)','348','org.jhotdraw.geom.Geom','public static Point2D.Double west(Rectangle2D.Double r) {\r\n    return new Point2D.Double(r.x, ((r.y) + ((r.height) / 2)));\r\n}'),(3507,'-init-(float,float)','org.jhotdraw.geom.GrowStroke.-init-(float,float)','349','org.jhotdraw.geom.GrowStroke','public GrowStroke(float grow, float miterLimit) {\r\n    super((grow * 2.0F), 1.0F, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL, miterLimit, null, 0.0F);\r\n    this.grow = grow;\r\n}'),(3508,'createStrokedShape(java.awt.Shape)','org.jhotdraw.geom.GrowStroke.createStrokedShape(java.awt.Shape)','349','org.jhotdraw.geom.GrowStroke','public Shape createStrokedShape(Shape s) {\r\n    BezierPath bp = new BezierPath();\r\n    GeneralPath left = new GeneralPath();\r\n    GeneralPath right = new GeneralPath();\r\n    if (s instanceof GeneralPath) {\r\n        left.setWindingRule(((GeneralPath) (s)).getWindingRule());\r\n        right.setWindingRule(((GeneralPath) (s)).getWindingRule());\r\n    } else\r\n        if (s instanceof BezierPath) {\r\n            left.setWindingRule(((BezierPath) (s)).getWindingRule());\r\n            right.setWindingRule(((BezierPath) (s)).getWindingRule());\r\n        }\r\n\r\n    double[] coords = new double[6];\r\n    // FIXME - We only do a flattened path\r\n    for (PathIterator i = s.getPathIterator(null, 0.1); !(i.isDone()); i.next()) {\r\n        int type = i.currentSegment(coords);\r\n        switch (type) {\r\n            case PathIterator.SEG_MOVETO :\r\n                if ((bp.size()) != 0) {\r\n                    traceStroke(bp, left, right);\r\n                }\r\n                bp.clear();\r\n                bp.moveTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_LINETO :\r\n                if (((coords[0]) != (bp.get(((bp.size()) - 1)).x[0])) || ((coords[1]) != (bp.get(((bp.size()) - 1)).y[0]))) {\r\n                    bp.lineTo(coords[0], coords[1]);\r\n                }\r\n                break;\r\n            case PathIterator.SEG_QUADTO :\r\n                bp.quadTo(coords[0], coords[1], coords[2], coords[3]);\r\n                break;\r\n            case PathIterator.SEG_CUBICTO :\r\n                bp.curveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);\r\n                break;\r\n            case PathIterator.SEG_CLOSE :\r\n                bp.setClosed(true);\r\n                break;\r\n        }\r\n    }\r\n    if ((bp.size()) > 1) {\r\n        traceStroke(bp, left, right);\r\n    }\r\n    if (Geom.contains(left.getBounds2D(), right.getBounds2D())) {\r\n        return (grow) > 0 ? left : right;\r\n    } else {\r\n        return (grow) > 0 ? right : left;\r\n    }\r\n}'),(3509,'-init-()','org.jhotdraw.geom.Insets2D.-init-()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Creates a new instance.\r\n */\r\nprotected Insets2D() {\r\n}'),(3510,'-init-(float,float,float,float)','org.jhotdraw.geom.Insets2D.-init-(float,float,float,float)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Constructs and initializes an <code>Insets2D</code> with the\r\n * specified insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic Float(float top, float left, float bottom, float right) {\r\n    this.top = top;\r\n    this.left = left;\r\n    this.bottom = bottom;\r\n    this.right = right;\r\n}'),(3511,'-init-(double,double,double,double)','org.jhotdraw.geom.Insets2D.-init-(double,double,double,double)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Constructs and initializes an <code>Insets2D</code> with the\r\n * specified insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic Double(double top, double left, double bottom, double right) {\r\n    this.top = top;\r\n    this.left = left;\r\n    this.bottom = bottom;\r\n    this.right = right;\r\n}'),(3512,'add(double,double,double,double)','org.jhotdraw.geom.Insets2D.add(double,double,double,double)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Adds the specified insets to the current insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic void add(double top, double left, double bottom, double right) {\r\n    set(((getTop()) + top), ((getLeft()) + left), ((getBottom()) + bottom), ((getRight()) + right));\r\n}'),(3513,'add(org.jhotdraw.geom.Insets2D)','org.jhotdraw.geom.Insets2D.add(org.jhotdraw.geom.Insets2D)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Adds the specified insets to the current insets.\r\n *\r\n * @param i\r\n * 		The insets to be added.\r\n */\r\npublic void add(Insets2D i) {\r\n    set(((getTop()) + (i.getTop())), ((getLeft()) + (i.getLeft())), ((getBottom()) + (i.getBottom())), ((getRight()) + (i.getRight())));\r\n}'),(3514,'addTo(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.Insets2D.addTo(java.awt.geom.Rectangle2D)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Adds the current insets to the specified Rectangle2D making the\r\n * rectangle larger.\r\n *\r\n * @param r\r\n * 		The Rectangle2D.\r\n */\r\npublic void addTo(Rectangle2D r) {\r\n    r.setRect(((r.getX()) - (getLeft())), ((r.getY()) - (getTop())), (((r.getWidth()) + (getLeft())) + (getRight())), (((r.getHeight()) + (getTop())) + (getBottom())));\r\n}'),(3515,'clone()','org.jhotdraw.geom.Insets2D.clone()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Creates a new object of the same class as this object.\r\n */\r\npublic Object clone() {\r\n    try {\r\n        return super.clone();\r\n    } catch (CloneNotSupportedException e) {\r\n        // this shouldnt happen, since we are Cloneable\r\n        throw new InternalError();\r\n    }\r\n}'),(3516,'equals(java.lang.Object)','org.jhotdraw.geom.Insets2D.equals(java.lang.Object)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Checks whether two insets objects are equal. Two instances\r\n * of <code>Insets2DDouble</code> are equal if the four integer values\r\n * of the fields <code>top</code>, <code>left</code>,\r\n * <code>bottom</code>, and <code>right</code> are all equal.\r\n *\r\n * @return <code>true</code> if the two insets are equal;\r\notherwise <code>false</code>.\r\n * @since JDK1.1\r\n */\r\npublic boolean equals(Object obj) {\r\n    if (obj instanceof Insets2D) {\r\n        Insets2D that = ((Insets2D) (obj));\r\n        return ((((getTop()) == (that.getTop())) && ((getLeft()) == (that.getLeft()))) && ((getBottom()) == (that.getBottom()))) && ((getRight()) == (that.getRight()));\r\n    }\r\n    return false;\r\n}'),(3517,'getBottom()','org.jhotdraw.geom.Insets2D.getBottom()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Returns the bottom insets in double precision.\r\n *\r\n * @return the bottom insets of this <code>Insets2D</code>.\r\n */\r\npublic abstract double getBottom();'),(3518,'getLeft()','org.jhotdraw.geom.Insets2D.getLeft()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Returns the left insets in double precision.\r\n *\r\n * @return the left insets of this <code>Insets2D</code>.\r\n */\r\npublic abstract double getLeft();'),(3519,'getRight()','org.jhotdraw.geom.Insets2D.getRight()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Returns the right insets in double precision.\r\n *\r\n * @return the right insets of this <code>Insets2D</code>.\r\n */\r\npublic abstract double getRight();'),(3520,'getTop()','org.jhotdraw.geom.Insets2D.getTop()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Returns the top insets in double precision.\r\n *\r\n * @return the top insets of this <code>Insets2D</code>.\r\n */\r\npublic abstract double getTop();'),(3521,'hashCode()','org.jhotdraw.geom.Insets2D.hashCode()','352','org.jhotdraw.geom.Insets2D','/**\r\n * Returns the hash code for this Insets2DDouble.\r\n *\r\n * @return a hash code for this Insets2DDouble.\r\n */\r\npublic int hashCode() {\r\n    double sum1 = (getLeft()) + (getBottom());\r\n    double sum2 = (getRight()) + (getTop());\r\n    double val1 = ((sum1 * (sum1 + 1)) / 2) + (getLeft());\r\n    double val2 = ((sum2 * (sum2 + 1)) / 2) + (getTop());\r\n    double sum3 = val1 + val2;\r\n    return Float.floatToIntBits(((float) (((sum3 * (sum3 + 1)) / 2) + val2)));\r\n}'),(3522,'set(double,double,double,double)','org.jhotdraw.geom.Insets2D.set(double,double,double,double)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Sets the insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic abstract void set(double top, double left, double bottom, double right);'),(3523,'set(org.jhotdraw.geom.Insets2D)','org.jhotdraw.geom.Insets2D.set(org.jhotdraw.geom.Insets2D)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Sets the insets.\r\n *\r\n * @param i\r\n * 		The new insets.\r\n */\r\npublic void set(Insets2D i) {\r\n    set(i.getTop(), i.getLeft(), i.getBottom(), i.getRight());\r\n}'),(3524,'subtract(double,double,double,double)','org.jhotdraw.geom.Insets2D.subtract(double,double,double,double)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Subtracts the specified insets from the current insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic void subtract(double top, double left, double bottom, double right) {\r\n    set(((getTop()) - top), ((getLeft()) - left), ((getBottom()) - bottom), ((getRight()) - right));\r\n}'),(3525,'subtract(org.jhotdraw.geom.Insets2D)','org.jhotdraw.geom.Insets2D.subtract(org.jhotdraw.geom.Insets2D)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Subtracts the specified insets from the current insets.\r\n *\r\n * @param i\r\n * 		The insets to be subtracted.\r\n */\r\npublic void subtract(Insets2D i) {\r\n    set(((getTop()) - (i.getTop())), ((getLeft()) - (i.getLeft())), ((getBottom()) - (i.getBottom())), ((getRight()) - (i.getRight())));\r\n}'),(3526,'subtractTo(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.Insets2D.subtractTo(java.awt.geom.Rectangle2D)','352','org.jhotdraw.geom.Insets2D','/**\r\n * Subtracts the current insets to the specified Rectangle2D making the\r\n * rectangle smaller.\r\n *\r\n * @param r\r\n * 		The Rectangle2D.\r\n */\r\npublic void subtractTo(Rectangle2D r) {\r\n    r.setRect(((r.getX()) + (getLeft())), ((r.getY()) + (getTop())), (((r.getWidth()) - (getLeft())) - (getRight())), (((r.getHeight()) - (getTop())) - (getBottom())));\r\n}'),(3527,'-init-()','org.jhotdraw.geom.Insets2D$Double.-init-()','350','org.jhotdraw.geom.Insets2D$Double','/**\r\n * Constructs and initializes an <code>Insets2D</code> with\r\n * all insets set to 0.\r\n */\r\npublic Double() {\r\n}'),(3528,'-init-(double,double,double,double)','org.jhotdraw.geom.Insets2D$Double.-init-(double,double,double,double)','350','org.jhotdraw.geom.Insets2D$Double','/**\r\n * Constructs and initializes an <code>Insets2D</code> with the\r\n * specified insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic Double(double top, double left, double bottom, double right) {\r\n    this.top = top;\r\n    this.left = left;\r\n    this.bottom = bottom;\r\n    this.right = right;\r\n}'),(3529,'getBottom()','org.jhotdraw.geom.Insets2D$Double.getBottom()','350','org.jhotdraw.geom.Insets2D$Double','public double getBottom() {\r\n    return bottom;\r\n}'),(3530,'getLeft()','org.jhotdraw.geom.Insets2D$Double.getLeft()','350','org.jhotdraw.geom.Insets2D$Double','public double getLeft() {\r\n    return left;\r\n}'),(3531,'getRight()','org.jhotdraw.geom.Insets2D$Double.getRight()','350','org.jhotdraw.geom.Insets2D$Double','public double getRight() {\r\n    return right;\r\n}'),(3532,'getTop()','org.jhotdraw.geom.Insets2D$Double.getTop()','350','org.jhotdraw.geom.Insets2D$Double','public double getTop() {\r\n    return top;\r\n}'),(3533,'set(double,double,double,double)','org.jhotdraw.geom.Insets2D$Double.set(double,double,double,double)','350','org.jhotdraw.geom.Insets2D$Double','public void set(double top, double left, double bottom, double right) {\r\n    this.top = top;\r\n    this.left = left;\r\n    this.bottom = bottom;\r\n    this.right = right;\r\n}'),(3534,'-init-()','org.jhotdraw.geom.Insets2D$Float.-init-()','351','org.jhotdraw.geom.Insets2D$Float','/**\r\n * Constructs and initializes an <code>Insets2D</code> with\r\n * all insets set to 0.\r\n */\r\npublic Float() {\r\n}'),(3535,'-init-(float,float,float,float)','org.jhotdraw.geom.Insets2D$Float.-init-(float,float,float,float)','351','org.jhotdraw.geom.Insets2D$Float','/**\r\n * Constructs and initializes an <code>Insets2D</code> with the\r\n * specified insets.\r\n *\r\n * @param top\r\n * 		The top insets.\r\n * @param left\r\n * 		The left insets.\r\n * @param bottom\r\n * 		The bottom insets.\r\n * @param right\r\n * 		The right insets.\r\n */\r\npublic Float(float top, float left, float bottom, float right) {\r\n    this.top = top;\r\n    this.left = left;\r\n    this.bottom = bottom;\r\n    this.right = right;\r\n}'),(3536,'getBottom()','org.jhotdraw.geom.Insets2D$Float.getBottom()','351','org.jhotdraw.geom.Insets2D$Float','public double getBottom() {\r\n    return bottom;\r\n}'),(3537,'getLeft()','org.jhotdraw.geom.Insets2D$Float.getLeft()','351','org.jhotdraw.geom.Insets2D$Float','public double getLeft() {\r\n    return left;\r\n}'),(3538,'getRight()','org.jhotdraw.geom.Insets2D$Float.getRight()','351','org.jhotdraw.geom.Insets2D$Float','public double getRight() {\r\n    return right;\r\n}'),(3539,'getTop()','org.jhotdraw.geom.Insets2D$Float.getTop()','351','org.jhotdraw.geom.Insets2D$Float','public double getTop() {\r\n    return top;\r\n}'),(3540,'set(double,double,double,double)','org.jhotdraw.geom.Insets2D$Float.set(double,double,double,double)','351','org.jhotdraw.geom.Insets2D$Float','public void set(double top, double left, double bottom, double right) {\r\n    this.top = ((float) (top));\r\n    this.left = ((float) (left));\r\n    this.bottom = ((float) (bottom));\r\n    this.right = ((float) (right));\r\n}'),(3541,'set(float,float,float,float)','org.jhotdraw.geom.Insets2D$Float.set(float,float,float,float)','351','org.jhotdraw.geom.Insets2D$Float','public void set(float top, float left, float bottom, float right) {\r\n    this.top = top;\r\n    this.left = left;\r\n    this.bottom = bottom;\r\n    this.right = right;\r\n}'),(3542,'-init-()','org.jhotdraw.geom.Polygon2D.-init-()','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Creates an empty polygon.\r\n */\r\npublic Polygon2D() {\r\n}'),(3543,'-init-(double[],double[],int)','org.jhotdraw.geom.Polygon2D.-init-(double[],double[],int)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Constructs and initializes a <code>Polygon</code> from the specified\r\n * parameters.\r\n *\r\n * @param xpoints\r\n * 		an array of X coordinates\r\n * @param ypoints\r\n * 		an array of Y coordinates\r\n * @param npoints\r\n * 		the total number of points in the\r\n * 		<code>Polygon</code>\r\n * @exception NegativeArraySizeException if the value of\r\n<code>npoints</code> is negative.\r\n * @exception IndexOutOfBoundsException if <code>npoints</code> is\r\ngreater than the length of <code>xpoints</code>\r\nor the length of <code>ypoints</code>.\r\n * @exception NullPointerException if <code>xpoints</code> or\r\n<code>ypoints</code> is <code>null</code>.\r\n */\r\npublic Double(double[] xpoints, double[] ypoints, int npoints) {\r\n    // Fix 4489009: should throw IndexOutofBoundsException instead\r\n    // of OutofMemoryException if npoints is huge and > {x,y}points.length\r\n    if ((npoints > (xpoints.length)) || (npoints > (ypoints.length))) {\r\n        throw new IndexOutOfBoundsException((\"npoints > xpoints.length || \" + \"npoints > ypoints.length\"));\r\n    }\r\n    // Fix 6191114: should throw NegativeArraySizeException with\r\n    // negative npoints\r\n    if (npoints < 0) {\r\n        throw new NegativeArraySizeException(\"npoints < 0\");\r\n    }\r\n    // Fix 6343431: Applet compatibility problems if arrays are not\r\n    // exactly npoints in length\r\n    this.npoints = npoints;\r\n    this.xpoints = new double[npoints];\r\n    System.arraycopy(xpoints, 0, this.xpoints, 0, npoints);\r\n    this.ypoints = new double[npoints];\r\n    System.arraycopy(ypoints, 0, this.ypoints, 0, npoints);\r\n}'),(3544,'-init-(float[],float[],int)','org.jhotdraw.geom.Polygon2D.-init-(float[],float[],int)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Constructs and initializes a <code>Polygon</code> from the specified\r\n * parameters.\r\n *\r\n * @param xpoints\r\n * 		an array of X coordinates\r\n * @param ypoints\r\n * 		an array of Y coordinates\r\n * @param npoints\r\n * 		the total number of points in the\r\n * 		<code>Polygon</code>\r\n * @exception NegativeArraySizeException if the value of\r\n<code>npoints</code> is negative.\r\n * @exception IndexOutOfBoundsException if <code>npoints</code> is\r\ngreater than the length of <code>xpoints</code>\r\nor the length of <code>ypoints</code>.\r\n * @exception NullPointerException if <code>xpoints</code> or\r\n<code>ypoints</code> is <code>null</code>.\r\n */\r\npublic Float(float[] xpoints, float[] ypoints, int npoints) {\r\n    // Fix 4489009: should throw IndexOutofBoundsException instead\r\n    // of OutofMemoryException if npoints is huge and > {x,y}points.length\r\n    if ((npoints > (xpoints.length)) || (npoints > (ypoints.length))) {\r\n        throw new IndexOutOfBoundsException((\"npoints > xpoints.length || \" + \"npoints > ypoints.length\"));\r\n    }\r\n    // Fix 6191114: should throw NegativeArraySizeException with\r\n    // negative npoints\r\n    if (npoints < 0) {\r\n        throw new NegativeArraySizeException(\"npoints < 0\");\r\n    }\r\n    // Fix 6343431: Applet compatibility problems if arrays are not\r\n    // exactly npoints in length\r\n    this.npoints = npoints;\r\n    this.xpoints = new float[npoints];\r\n    System.arraycopy(xpoints, 0, this.xpoints, 0, npoints);\r\n    this.ypoints = new float[npoints];\r\n    System.arraycopy(ypoints, 0, this.ypoints, 0, npoints);\r\n}'),(3545,'-init-(org.jhotdraw.geom.Polygon2D$Double,java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D.-init-(org.jhotdraw.geom.Polygon2D$Double,java.awt.geom.AffineTransform)','357','org.jhotdraw.geom.Polygon2D','public PolygonPathIteratorDouble(Polygon2D.Double pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}'),(3546,'-init-(org.jhotdraw.geom.Polygon2D$Float,java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D.-init-(org.jhotdraw.geom.Polygon2D$Float,java.awt.geom.AffineTransform)','357','org.jhotdraw.geom.Polygon2D','public PolygonPathIteratorFloat(Polygon2D.Float pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}'),(3547,'add(java.awt.geom.Point2D)','org.jhotdraw.geom.Polygon2D.add(java.awt.geom.Point2D)','357','org.jhotdraw.geom.Polygon2D','public void add(Point2D p) {\r\n    addPoint(p.getX(), p.getY());\r\n}'),(3548,'addPoint(double,double)','org.jhotdraw.geom.Polygon2D.addPoint(double,double)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Appends the specified coordinates to this <code>Polygon</code>.\r\n * <p>\r\n * If an operation that calculates the bounding box of this\r\n * <code>Polygon</code> has already been performed, such as\r\n * <code>getBounds</code> or <code>contains</code>, then this\r\n * method updates the bounding box.\r\n *\r\n * @param x\r\n * 		the specified X coordinate\r\n * @param y\r\n * 		the specified Y coordinate\r\n * @see java.awt.Polygon#getBounds\r\n * @see java.awt.Polygon#contains\r\n */\r\npublic abstract void addPoint(double x, double y);'),(3549,'contains(double,double)','org.jhotdraw.geom.Polygon2D.contains(double,double)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic abstract boolean contains(double x, double y);'),(3550,'contains(double,double,double,double)','org.jhotdraw.geom.Polygon2D.contains(double,double,double,double)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic abstract boolean contains(double x, double y, double w, double h);'),(3551,'contains(int,int)','org.jhotdraw.geom.Polygon2D.contains(int,int)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Determines whether the specified coordinates are inside this\r\n * <code>Polygon</code>.\r\n * <p>\r\n *\r\n * @param x\r\n * 		the specified X coordinate to be tested\r\n * @param y\r\n * 		the specified Y coordinate to be tested\r\n * @return {@code true} if this {@code Polygon} contains\r\nthe specified coordinates {@code (x,y)};\r\n{@code false} otherwise.\r\n * @see #contains(double, double)\r\n */\r\npublic boolean contains(int x, int y) {\r\n    return contains(((double) (x)), ((double) (y)));\r\n}'),(3552,'contains(java.awt.Point)','org.jhotdraw.geom.Polygon2D.contains(java.awt.Point)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Determines whether the specified {@link Point} is inside this\r\n * <code>Polygon</code>.\r\n *\r\n * @param p\r\n * 		the specified <code>Point</code> to be tested\r\n * @return <code>true</code> if the <code>Polygon</code> contains the\r\n<code>Point</code>; <code>false</code> otherwise.\r\n * @see #contains(double, double)\r\n */\r\npublic boolean contains(Point p) {\r\n    return contains(p.x, p.y);\r\n}'),(3553,'contains(java.awt.geom.Point2D)','org.jhotdraw.geom.Polygon2D.contains(java.awt.geom.Point2D)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean contains(Point2D p) {\r\n    return contains(p.getX(), p.getY());\r\n}'),(3554,'contains(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.Polygon2D.contains(java.awt.geom.Rectangle2D)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean contains(Rectangle2D r) {\r\n    return contains(r.getX(), r.getY(), r.getWidth(), r.getHeight());\r\n}'),(3555,'getBounds()','org.jhotdraw.geom.Polygon2D.getBounds()','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Gets the bounding box of this <code>Polygon</code>.\r\n * The bounding box is the smallest {@link Rectangle} whose\r\n * sides are parallel to the x and y axes of the\r\n * coordinate space, and can completely contain the <code>Polygon</code>.\r\n *\r\n * @return a <code>Rectangle</code> that defines the bounds of this\r\n<code>Polygon</code>.\r\n */\r\npublic Rectangle getBounds() {\r\n    return getBounds2D().getBounds();\r\n}'),(3556,'getBounds2D()','org.jhotdraw.geom.Polygon2D.getBounds2D()','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic abstract Rectangle2D getBounds2D();'),(3557,'getPathIterator(java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D.getPathIterator(java.awt.geom.AffineTransform)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Returns an iterator object that iterates along the boundary of this\r\n * <code>Polygon</code> and provides access to the geometry\r\n * of the outline of this <code>Polygon</code>.  An optional\r\n * {@link AffineTransform} can be specified so that the coordinates\r\n * returned in the iteration are transformed accordingly.\r\n *\r\n * @param at\r\n * 		an optional <code>AffineTransform</code> to be applied to the\r\n * 		coordinates as they are returned in the iteration, or\r\n * 		<code>null</code> if untransformed coordinates are desired\r\n * @return a {@link PathIterator} object that provides access to the\r\ngeometry of this <code>Polygon</code>.\r\n */\r\npublic abstract PathIterator getPathIterator(AffineTransform at);'),(3558,'getPathIterator(java.awt.geom.AffineTransform,double)','org.jhotdraw.geom.Polygon2D.getPathIterator(java.awt.geom.AffineTransform,double)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Returns an iterator object that iterates along the boundary of\r\n * the <code>Shape</code> and provides access to the geometry of the\r\n * outline of the <code>Shape</code>.  Only SEG_MOVETO, SEG_LINETO, and\r\n * SEG_CLOSE point types are returned by the iterator.\r\n * Since polygons are already flat, the <code>flatness</code> parameter\r\n * is ignored.  An optional <code>AffineTransform</code> can be specified\r\n * in which case the coordinates returned in the iteration are transformed\r\n * accordingly.\r\n *\r\n * @param at\r\n * 		an optional <code>AffineTransform</code> to be applied to the\r\n * 		coordinates as they are returned in the iteration, or\r\n * 		<code>null</code> if untransformed coordinates are desired\r\n * @param flatness\r\n * 		the maximum amount that the control points\r\n * 		for a given curve can vary from colinear before a subdivided\r\n * 		curve is replaced by a straight line connecting the\r\n * 		endpoints.  Since polygons are already flat the\r\n * 		<code>flatness</code> parameter is ignored.\r\n * @return a <code>PathIterator</code> object that provides access to the\r\n<code>Shape</code> objects geometry.\r\n */\r\npublic PathIterator getPathIterator(AffineTransform at, double flatness) {\r\n    return getPathIterator(at);\r\n}'),(3559,'inside(int,int)','org.jhotdraw.geom.Polygon2D.inside(int,int)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Determines whether the specified coordinates are contained in this\r\n * <code>Polygon</code>.\r\n *\r\n * @param x\r\n * 		the specified X coordinate to be tested\r\n * @param y\r\n * 		the specified Y coordinate to be tested\r\n * @return {@code true} if this {@code Polygon} contains\r\nthe specified coordinates {@code (x,y)};\r\n{@code false} otherwise.\r\n * @see #contains(double, double)\r\n * @deprecated As of JDK version 1.1,\r\nreplaced by <code>contains(int, int)</code>.\r\n */\r\n@Deprecated\r\npublic boolean inside(int x, int y) {\r\n    return contains(((double) (x)), ((double) (y)));\r\n}'),(3560,'intersects(double,double,double,double)','org.jhotdraw.geom.Polygon2D.intersects(double,double,double,double)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic abstract boolean intersects(double x, double y, double w, double h);'),(3561,'intersects(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.Polygon2D.intersects(java.awt.geom.Rectangle2D)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean intersects(Rectangle2D r) {\r\n    return intersects(r.getX(), r.getY(), r.getWidth(), r.getHeight());\r\n}'),(3562,'invalidate()','org.jhotdraw.geom.Polygon2D.invalidate()','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Invalidates or flushes any internally-cached data that depends\r\n * on the vertex coordinates of this <code>Polygon</code>.\r\n * This method should be called after any direct manipulation\r\n * of the coordinates in the <code>xpoints</code> or\r\n * <code>ypoints</code> arrays to avoid inconsistent results\r\n * from methods such as <code>getBounds</code> or <code>contains</code>\r\n * that might cache data from earlier computations relating to\r\n * the vertex coordinates.\r\n *\r\n * @see java.awt.Polygon#getBounds\r\n */\r\npublic abstract void invalidate();'),(3563,'reset()','org.jhotdraw.geom.Polygon2D.reset()','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Resets this <code>Polygon</code> object to an empty polygon.\r\n * The coordinate arrays and the data in them are left untouched\r\n * but the number of points is reset to zero to mark the old\r\n * vertex data as invalid and to start accumulating new vertex\r\n * data at the beginning.\r\n * All internally-cached data relating to the old vertices\r\n * are discarded.\r\n * Note that since the coordinate arrays from before the reset\r\n * are reused, creating a new empty <code>Polygon</code> might\r\n * be more memory efficient than resetting the current one if\r\n * the number of vertices in the new polygon data is significantly\r\n * smaller than the number of vertices in the data from before the\r\n * reset.\r\n *\r\n * @see java.awt.Polygon#invalidate\r\n */\r\npublic void reset() {\r\n    npoints = 0;\r\n    invalidate();\r\n}'),(3564,'translate(double,double)','org.jhotdraw.geom.Polygon2D.translate(double,double)','357','org.jhotdraw.geom.Polygon2D','/**\r\n * Translates the vertices of the <code>Polygon</code> by\r\n * <code>deltaX</code> along the x axis and by\r\n * <code>deltaY</code> along the y axis.\r\n *\r\n * @param deltaX\r\n * 		the amount to translate along the X axis\r\n * @param deltaY\r\n * 		the amount to translate along the Y axis\r\n */\r\npublic abstract void translate(double deltaX, double deltaY);'),(3565,'-init-()','org.jhotdraw.geom.Polygon2D$Double.-init-()','353','org.jhotdraw.geom.Polygon2D$Double','public Double() {\r\n    xpoints = new double[Polygon2D.MIN_LENGTH];\r\n    ypoints = new double[Polygon2D.MIN_LENGTH];\r\n}'),(3566,'-init-(double[],double[],int)','org.jhotdraw.geom.Polygon2D$Double.-init-(double[],double[],int)','353','org.jhotdraw.geom.Polygon2D$Double','/**\r\n * Constructs and initializes a <code>Polygon</code> from the specified\r\n * parameters.\r\n *\r\n * @param xpoints\r\n * 		an array of X coordinates\r\n * @param ypoints\r\n * 		an array of Y coordinates\r\n * @param npoints\r\n * 		the total number of points in the\r\n * 		<code>Polygon</code>\r\n * @exception NegativeArraySizeException if the value of\r\n<code>npoints</code> is negative.\r\n * @exception IndexOutOfBoundsException if <code>npoints</code> is\r\ngreater than the length of <code>xpoints</code>\r\nor the length of <code>ypoints</code>.\r\n * @exception NullPointerException if <code>xpoints</code> or\r\n<code>ypoints</code> is <code>null</code>.\r\n */\r\npublic Double(double[] xpoints, double[] ypoints, int npoints) {\r\n    // Fix 4489009: should throw IndexOutofBoundsException instead\r\n    // of OutofMemoryException if npoints is huge and > {x,y}points.length\r\n    if ((npoints > (xpoints.length)) || (npoints > (ypoints.length))) {\r\n        throw new IndexOutOfBoundsException((\"npoints > xpoints.length || \" + \"npoints > ypoints.length\"));\r\n    }\r\n    // Fix 6191114: should throw NegativeArraySizeException with\r\n    // negative npoints\r\n    if (npoints < 0) {\r\n        throw new NegativeArraySizeException(\"npoints < 0\");\r\n    }\r\n    // Fix 6343431: Applet compatibility problems if arrays are not\r\n    // exactly npoints in length\r\n    this.npoints = npoints;\r\n    this.xpoints = new double[npoints];\r\n    System.arraycopy(xpoints, 0, this.xpoints, 0, npoints);\r\n    this.ypoints = new double[npoints];\r\n    System.arraycopy(ypoints, 0, this.ypoints, 0, npoints);\r\n}'),(3567,'addPoint(double,double)','org.jhotdraw.geom.Polygon2D$Double.addPoint(double,double)','353','org.jhotdraw.geom.Polygon2D$Double','public void addPoint(double x, double y) {\r\n    if (((npoints) >= (xpoints.length)) || ((npoints) >= (ypoints.length))) {\r\n        int newLength = (npoints) * 2;\r\n        // Make sure that newLength will be greater than MIN_LENGTH and\r\n        // aligned to the power of 2\r\n        if (newLength < (Polygon2D.MIN_LENGTH)) {\r\n            newLength = Polygon2D.MIN_LENGTH;\r\n        } else\r\n            if ((newLength & (newLength - 1)) != 0) {\r\n                newLength = Integer.highestOneBit(newLength);\r\n            }\r\n\r\n        double[] helper = new double[newLength];\r\n        System.arraycopy(xpoints, 0, helper, 0, npoints);\r\n        xpoints = helper;\r\n        helper = new double[newLength];\r\n        System.arraycopy(ypoints, 0, helper, 0, npoints);\r\n        ypoints = helper;\r\n    }\r\n    xpoints[npoints] = x;\r\n    ypoints[npoints] = y;\r\n    (npoints)++;\r\n    if ((bounds) != null) {\r\n        updateBounds(x, y);\r\n    }\r\n}'),(3568,'calculateBounds(double[],double[],int)','org.jhotdraw.geom.Polygon2D$Double.calculateBounds(double[],double[],int)','353','org.jhotdraw.geom.Polygon2D$Double','/* Calculates the bounding box of the points passed to the constructor.\nSets <code>bounds</code> to the result.\n@param xpoints[] array of <i>x</i> coordinates\n@param ypoints[] array of <i>y</i> coordinates\n@param npoints the total number of points\n */\r\nvoid calculateBounds(double[] xpoints, double[] ypoints, int npoints) {\r\n    double boundsMinX = Double.MAX_VALUE;\r\n    double boundsMinY = Double.MAX_VALUE;\r\n    double boundsMaxX = -(Double.MAX_VALUE);\r\n    double boundsMaxY = -(Double.MAX_VALUE);\r\n    for (int i = 0; i < npoints; i++) {\r\n        double x = xpoints[i];\r\n        boundsMinX = Math.min(boundsMinX, x);\r\n        boundsMaxX = Math.max(boundsMaxX, x);\r\n        double y = ypoints[i];\r\n        boundsMinY = Math.min(boundsMinY, y);\r\n        boundsMaxY = Math.max(boundsMaxY, y);\r\n    }\r\n    bounds = new Rectangle2D.Double(boundsMinX, boundsMinY, (boundsMaxX - boundsMinX), (boundsMaxY - boundsMinY));\r\n}'),(3569,'contains(double,double)','org.jhotdraw.geom.Polygon2D$Double.contains(double,double)','353','org.jhotdraw.geom.Polygon2D$Double','public boolean contains(double x, double y) {\r\n    if (((npoints) <= 2) || (!(getBounds2D().contains(x, y)))) {\r\n        return false;\r\n    }\r\n    int hits = 0;\r\n    double lastx = xpoints[((npoints) - 1)];\r\n    double lasty = ypoints[((npoints) - 1)];\r\n    double curx;\r\n    double cury;\r\n    // Walk the edges of the polygon\r\n    for (int i = 0; i < (npoints); lastx = curx , lasty = cury , i++) {\r\n        curx = xpoints[i];\r\n        cury = ypoints[i];\r\n        if (cury == lasty) {\r\n            continue;\r\n        }\r\n        double leftx;\r\n        if (curx < lastx) {\r\n            if (x >= lastx) {\r\n                continue;\r\n            }\r\n            leftx = curx;\r\n        } else {\r\n            if (x >= curx) {\r\n                continue;\r\n            }\r\n            leftx = lastx;\r\n        }\r\n        double test1;\r\n        double test2;\r\n        if (cury < lasty) {\r\n            if ((y < cury) || (y >= lasty)) {\r\n                continue;\r\n            }\r\n            if (x < leftx) {\r\n                hits++;\r\n                continue;\r\n            }\r\n            test1 = x - curx;\r\n            test2 = y - cury;\r\n        } else {\r\n            if ((y < lasty) || (y >= cury)) {\r\n                continue;\r\n            }\r\n            if (x < leftx) {\r\n                hits++;\r\n                continue;\r\n            }\r\n            test1 = x - lastx;\r\n            test2 = y - lasty;\r\n        }\r\n        if (test1 < ((test2 / (lasty - cury)) * (lastx - curx))) {\r\n            hits++;\r\n        }\r\n    }\r\n    return (hits & 1) != 0;\r\n}'),(3570,'contains(double,double,double,double)','org.jhotdraw.geom.Polygon2D$Double.contains(double,double,double,double)','353','org.jhotdraw.geom.Polygon2D$Double','public boolean contains(double x, double y, double w, double h) {\r\n    if (((npoints) <= 0) || (!(getBounds2D().intersects(x, y, w, h)))) {\r\n        return false;\r\n    }\r\n    Crossings cross = getCrossings(x, y, (x + w), (y + h));\r\n    return (cross != null) && (cross.covers(y, (y + h)));\r\n}'),(3571,'getBounds()','org.jhotdraw.geom.Polygon2D$Double.getBounds()','353','org.jhotdraw.geom.Polygon2D$Double','@Override\r\npublic Rectangle getBounds() {\r\n    Polygon x;\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(3572,'getBounds2D()','org.jhotdraw.geom.Polygon2D$Double.getBounds2D()','353','org.jhotdraw.geom.Polygon2D$Double','@Override\r\npublic Rectangle2D getBounds2D() {\r\n    if ((npoints) == 0) {\r\n        return new Rectangle2D.Double();\r\n    }\r\n    if ((bounds) == null) {\r\n        calculateBounds(xpoints, ypoints, npoints);\r\n    }\r\n    return ((Rectangle2D) (bounds.clone()));\r\n}'),(3573,'getCrossings(double,double,double,double)','org.jhotdraw.geom.Polygon2D$Double.getCrossings(double,double,double,double)','353','org.jhotdraw.geom.Polygon2D$Double','private Crossings getCrossings(double xlo, double ylo, double xhi, double yhi) {\r\n    Crossings cross = new Crossings.EvenOdd(xlo, ylo, xhi, yhi);\r\n    double lastx = xpoints[((npoints) - 1)];\r\n    double lasty = ypoints[((npoints) - 1)];\r\n    double curx;\r\n    double cury;\r\n    // Walk the edges of the polygon\r\n    for (int i = 0; i < (npoints); i++) {\r\n        curx = xpoints[i];\r\n        cury = ypoints[i];\r\n        if (cross.accumulateLine(lastx, lasty, curx, cury)) {\r\n            return null;\r\n        }\r\n        lastx = curx;\r\n        lasty = cury;\r\n    }\r\n    return cross;\r\n}'),(3574,'getPathIterator(java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D$Double.getPathIterator(java.awt.geom.AffineTransform)','353','org.jhotdraw.geom.Polygon2D$Double','public PathIterator getPathIterator(AffineTransform at) {\r\n    return new Polygon2D.PolygonPathIteratorDouble(this, at);\r\n}'),(3575,'intersects(double,double,double,double)','org.jhotdraw.geom.Polygon2D$Double.intersects(double,double,double,double)','353','org.jhotdraw.geom.Polygon2D$Double','@Override\r\npublic boolean intersects(double x, double y, double w, double h) {\r\n    if (((npoints) <= 0) || (!(getBounds2D().intersects(x, y, w, h)))) {\r\n        return false;\r\n    }\r\n    Crossings cross = getCrossings(x, y, (x + w), (y + h));\r\n    return (cross == null) || (!(cross.isEmpty()));\r\n}'),(3576,'invalidate()','org.jhotdraw.geom.Polygon2D$Double.invalidate()','353','org.jhotdraw.geom.Polygon2D$Double','public void invalidate() {\r\n    bounds = null;\r\n}'),(3577,'translate(double,double)','org.jhotdraw.geom.Polygon2D$Double.translate(double,double)','353','org.jhotdraw.geom.Polygon2D$Double','/**\r\n * Translates the vertices of the <code>Polygon</code> by\r\n * <code>deltaX</code> along the x axis and by\r\n * <code>deltaY</code> along the y axis.\r\n *\r\n * @param deltaX\r\n * 		the amount to translate along the X axis\r\n * @param deltaY\r\n * 		the amount to translate along the Y axis\r\n */\r\n@Override\r\npublic void translate(double deltaX, double deltaY) {\r\n    for (int i = 0; i < (npoints); i++) {\r\n        xpoints[i] += deltaX;\r\n        ypoints[i] += deltaY;\r\n    }\r\n    if ((bounds) != null) {\r\n        bounds.x += deltaX;\r\n        bounds.y += deltaY;\r\n    }\r\n}'),(3578,'updateBounds(double,double)','org.jhotdraw.geom.Polygon2D$Double.updateBounds(double,double)','353','org.jhotdraw.geom.Polygon2D$Double','/* Resizes the bounding box to accomodate the specified coordinates.\n@param x,&nbsp;y the specified coordinates\n */\r\nvoid updateBounds(double x, double y) {\r\n    if (x < (bounds.x)) {\r\n        bounds.width = (bounds.width) + ((bounds.x) - x);\r\n        bounds.x = x;\r\n    } else {\r\n        bounds.width = Math.max(bounds.width, (x - (bounds.x)));\r\n        // bounds.x = bounds.x;\r\n    }\r\n    if (y < (bounds.y)) {\r\n        bounds.height = (bounds.height) + ((bounds.y) - y);\r\n        bounds.y = y;\r\n    } else {\r\n        bounds.height = Math.max(bounds.height, (y - (bounds.y)));\r\n        // bounds.y = bounds.y;\r\n    }\r\n}'),(3579,'-init-()','org.jhotdraw.geom.Polygon2D$Float.-init-()','354','org.jhotdraw.geom.Polygon2D$Float','public Float() {\r\n    xpoints = new float[Polygon2D.MIN_LENGTH];\r\n    ypoints = new float[Polygon2D.MIN_LENGTH];\r\n}'),(3580,'-init-(float[],float[],int)','org.jhotdraw.geom.Polygon2D$Float.-init-(float[],float[],int)','354','org.jhotdraw.geom.Polygon2D$Float','/**\r\n * Constructs and initializes a <code>Polygon</code> from the specified\r\n * parameters.\r\n *\r\n * @param xpoints\r\n * 		an array of X coordinates\r\n * @param ypoints\r\n * 		an array of Y coordinates\r\n * @param npoints\r\n * 		the total number of points in the\r\n * 		<code>Polygon</code>\r\n * @exception NegativeArraySizeException if the value of\r\n<code>npoints</code> is negative.\r\n * @exception IndexOutOfBoundsException if <code>npoints</code> is\r\ngreater than the length of <code>xpoints</code>\r\nor the length of <code>ypoints</code>.\r\n * @exception NullPointerException if <code>xpoints</code> or\r\n<code>ypoints</code> is <code>null</code>.\r\n */\r\npublic Float(float[] xpoints, float[] ypoints, int npoints) {\r\n    // Fix 4489009: should throw IndexOutofBoundsException instead\r\n    // of OutofMemoryException if npoints is huge and > {x,y}points.length\r\n    if ((npoints > (xpoints.length)) || (npoints > (ypoints.length))) {\r\n        throw new IndexOutOfBoundsException((\"npoints > xpoints.length || \" + \"npoints > ypoints.length\"));\r\n    }\r\n    // Fix 6191114: should throw NegativeArraySizeException with\r\n    // negative npoints\r\n    if (npoints < 0) {\r\n        throw new NegativeArraySizeException(\"npoints < 0\");\r\n    }\r\n    // Fix 6343431: Applet compatibility problems if arrays are not\r\n    // exactly npoints in length\r\n    this.npoints = npoints;\r\n    this.xpoints = new float[npoints];\r\n    System.arraycopy(xpoints, 0, this.xpoints, 0, npoints);\r\n    this.ypoints = new float[npoints];\r\n    System.arraycopy(ypoints, 0, this.ypoints, 0, npoints);\r\n}'),(3581,'addPoint(double,double)','org.jhotdraw.geom.Polygon2D$Float.addPoint(double,double)','354','org.jhotdraw.geom.Polygon2D$Float','public void addPoint(double x, double y) {\r\n    addPoint(((float) (x)), ((float) (y)));\r\n}'),(3582,'addPoint(float,float)','org.jhotdraw.geom.Polygon2D$Float.addPoint(float,float)','354','org.jhotdraw.geom.Polygon2D$Float','public void addPoint(float x, float y) {\r\n    if (((npoints) >= (xpoints.length)) || ((npoints) >= (ypoints.length))) {\r\n        int newLength = (npoints) * 2;\r\n        // Make sure that newLength will be greater than MIN_LENGTH and\r\n        // aligned to the power of 2\r\n        if (newLength < (Polygon2D.MIN_LENGTH)) {\r\n            newLength = Polygon2D.MIN_LENGTH;\r\n        } else\r\n            if ((newLength & (newLength - 1)) != 0) {\r\n                newLength = Integer.highestOneBit(newLength);\r\n            }\r\n\r\n        float[] helper = new float[newLength];\r\n        System.arraycopy(xpoints, 0, helper, 0, npoints);\r\n        xpoints = helper;\r\n        helper = new float[newLength];\r\n        System.arraycopy(ypoints, 0, helper, 0, npoints);\r\n        ypoints = helper;\r\n    }\r\n    xpoints[npoints] = x;\r\n    ypoints[npoints] = y;\r\n    (npoints)++;\r\n    if ((bounds) != null) {\r\n        updateBounds(x, y);\r\n    }\r\n}'),(3583,'calculateBounds(float[],float[],int)','org.jhotdraw.geom.Polygon2D$Float.calculateBounds(float[],float[],int)','354','org.jhotdraw.geom.Polygon2D$Float','/* Calculates the bounding box of the points passed to the constructor.\nSets <code>bounds</code> to the result.\n@param xpoints[] array of <i>x</i> coordinates\n@param ypoints[] array of <i>y</i> coordinates\n@param npoints the total number of points\n */\r\nvoid calculateBounds(float[] xpoints, float[] ypoints, int npoints) {\r\n    float boundsMinX = Float.MAX_VALUE;\r\n    float boundsMinY = Float.MAX_VALUE;\r\n    float boundsMaxX = -(Float.MAX_VALUE);\r\n    float boundsMaxY = -(Float.MAX_VALUE);\r\n    for (int i = 0; i < npoints; i++) {\r\n        float x = xpoints[i];\r\n        boundsMinX = Math.min(boundsMinX, x);\r\n        boundsMaxX = Math.max(boundsMaxX, x);\r\n        float y = ypoints[i];\r\n        boundsMinY = Math.min(boundsMinY, y);\r\n        boundsMaxY = Math.max(boundsMaxY, y);\r\n    }\r\n    bounds = new Rectangle2D.Float(boundsMinX, boundsMinY, (boundsMaxX - boundsMinX), (boundsMaxY - boundsMinY));\r\n}'),(3584,'contains(double,double)','org.jhotdraw.geom.Polygon2D$Float.contains(double,double)','354','org.jhotdraw.geom.Polygon2D$Float','@Override\r\npublic boolean contains(double x, double y) {\r\n    return contains(((float) (x)), ((float) (y)));\r\n}'),(3585,'contains(double,double,double,double)','org.jhotdraw.geom.Polygon2D$Float.contains(double,double,double,double)','354','org.jhotdraw.geom.Polygon2D$Float','public boolean contains(double x, double y, double w, double h) {\r\n    return contains(((float) (x)), ((float) (y)), ((float) (w)), ((float) (h)));\r\n}'),(3586,'contains(float,float)','org.jhotdraw.geom.Polygon2D$Float.contains(float,float)','354','org.jhotdraw.geom.Polygon2D$Float','public boolean contains(float x, float y) {\r\n    if (((npoints) <= 2) || (!(getBounds2D().contains(x, y)))) {\r\n        return false;\r\n    }\r\n    int hits = 0;\r\n    float lastx = xpoints[((npoints) - 1)];\r\n    float lasty = ypoints[((npoints) - 1)];\r\n    float curx;\r\n    float cury;\r\n    // Walk the edges of the polygon\r\n    for (int i = 0; i < (npoints); lastx = curx , lasty = cury , i++) {\r\n        curx = xpoints[i];\r\n        cury = ypoints[i];\r\n        if (cury == lasty) {\r\n            continue;\r\n        }\r\n        float leftx;\r\n        if (curx < lastx) {\r\n            if (x >= lastx) {\r\n                continue;\r\n            }\r\n            leftx = curx;\r\n        } else {\r\n            if (x >= curx) {\r\n                continue;\r\n            }\r\n            leftx = lastx;\r\n        }\r\n        float test1;\r\n        float test2;\r\n        if (cury < lasty) {\r\n            if ((y < cury) || (y >= lasty)) {\r\n                continue;\r\n            }\r\n            if (x < leftx) {\r\n                hits++;\r\n                continue;\r\n            }\r\n            test1 = x - curx;\r\n            test2 = y - cury;\r\n        } else {\r\n            if ((y < lasty) || (y >= cury)) {\r\n                continue;\r\n            }\r\n            if (x < leftx) {\r\n                hits++;\r\n                continue;\r\n            }\r\n            test1 = x - lastx;\r\n            test2 = y - lasty;\r\n        }\r\n        if (test1 < ((test2 / (lasty - cury)) * (lastx - curx))) {\r\n            hits++;\r\n        }\r\n    }\r\n    return (hits & 1) != 0;\r\n}'),(3587,'contains(float,float,float,float)','org.jhotdraw.geom.Polygon2D$Float.contains(float,float,float,float)','354','org.jhotdraw.geom.Polygon2D$Float','public boolean contains(float x, float y, float w, float h) {\r\n    if (((npoints) <= 0) || (!(getBounds2D().intersects(x, y, w, h)))) {\r\n        return false;\r\n    }\r\n    Crossings cross = getCrossings(x, y, (x + w), (y + h));\r\n    return (cross != null) && (cross.covers(y, (y + h)));\r\n}'),(3588,'getBounds()','org.jhotdraw.geom.Polygon2D$Float.getBounds()','354','org.jhotdraw.geom.Polygon2D$Float','@Override\r\npublic Rectangle getBounds() {\r\n    Polygon x;\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(3589,'getBounds2D()','org.jhotdraw.geom.Polygon2D$Float.getBounds2D()','354','org.jhotdraw.geom.Polygon2D$Float','@Override\r\npublic Rectangle2D getBounds2D() {\r\n    if ((npoints) == 0) {\r\n        return new Rectangle2D.Float();\r\n    }\r\n    if ((bounds) == null) {\r\n        calculateBounds(xpoints, ypoints, npoints);\r\n    }\r\n    return ((Rectangle2D) (bounds.clone()));\r\n}'),(3590,'getCrossings(float,float,float,float)','org.jhotdraw.geom.Polygon2D$Float.getCrossings(float,float,float,float)','354','org.jhotdraw.geom.Polygon2D$Float','private Crossings getCrossings(float xlo, float ylo, float xhi, float yhi) {\r\n    Crossings cross = new Crossings.EvenOdd(xlo, ylo, xhi, yhi);\r\n    float lastx = xpoints[((npoints) - 1)];\r\n    float lasty = ypoints[((npoints) - 1)];\r\n    float curx;\r\n    float cury;\r\n    // Walk the edges of the polygon\r\n    for (int i = 0; i < (npoints); i++) {\r\n        curx = xpoints[i];\r\n        cury = ypoints[i];\r\n        if (cross.accumulateLine(lastx, lasty, curx, cury)) {\r\n            return null;\r\n        }\r\n        lastx = curx;\r\n        lasty = cury;\r\n    }\r\n    return cross;\r\n}'),(3591,'getPathIterator(java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D$Float.getPathIterator(java.awt.geom.AffineTransform)','354','org.jhotdraw.geom.Polygon2D$Float','public PathIterator getPathIterator(AffineTransform at) {\r\n    return new Polygon2D.PolygonPathIteratorFloat(this, at);\r\n}'),(3592,'intersects(double,double,double,double)','org.jhotdraw.geom.Polygon2D$Float.intersects(double,double,double,double)','354','org.jhotdraw.geom.Polygon2D$Float','@Override\r\npublic boolean intersects(double x, double y, double w, double h) {\r\n    return intersects(((float) (x)), ((float) (y)), ((float) (w)), ((float) (h)));\r\n}'),(3593,'intersects(float,float,float,float)','org.jhotdraw.geom.Polygon2D$Float.intersects(float,float,float,float)','354','org.jhotdraw.geom.Polygon2D$Float','public boolean intersects(float x, float y, float w, float h) {\r\n    if (((npoints) <= 0) || (!(getBounds2D().intersects(x, y, w, h)))) {\r\n        return false;\r\n    }\r\n    Crossings cross = getCrossings(x, y, (x + w), (y + h));\r\n    return (cross == null) || (!(cross.isEmpty()));\r\n}'),(3594,'invalidate()','org.jhotdraw.geom.Polygon2D$Float.invalidate()','354','org.jhotdraw.geom.Polygon2D$Float','public void invalidate() {\r\n    bounds = null;\r\n}'),(3595,'translate(double,double)','org.jhotdraw.geom.Polygon2D$Float.translate(double,double)','354','org.jhotdraw.geom.Polygon2D$Float','/**\r\n * Translates the vertices of the <code>Polygon</code> by\r\n * <code>deltaX</code> along the x axis and by\r\n * <code>deltaY</code> along the y axis.\r\n *\r\n * @param deltaX\r\n * 		the amount to translate along the X axis\r\n * @param deltaY\r\n * 		the amount to translate along the Y axis\r\n */\r\n@Override\r\npublic void translate(double deltaX, double deltaY) {\r\n    translate(((float) (deltaX)), ((float) (deltaY)));\r\n}'),(3596,'translate(float,float)','org.jhotdraw.geom.Polygon2D$Float.translate(float,float)','354','org.jhotdraw.geom.Polygon2D$Float','public void translate(float deltaX, float deltaY) {\r\n    for (int i = 0; i < (npoints); i++) {\r\n        xpoints[i] += deltaX;\r\n        ypoints[i] += deltaY;\r\n    }\r\n    if ((bounds) != null) {\r\n        bounds.x += deltaX;\r\n        bounds.y += deltaY;\r\n    }\r\n}'),(3597,'updateBounds(float,float)','org.jhotdraw.geom.Polygon2D$Float.updateBounds(float,float)','354','org.jhotdraw.geom.Polygon2D$Float','/* Resizes the bounding box to accomodate the specified coordinates.\n@param x,&nbsp;y the specified coordinates\n */\r\nvoid updateBounds(float x, float y) {\r\n    if (x < (bounds.x)) {\r\n        bounds.width = (bounds.width) + ((bounds.x) - x);\r\n        bounds.x = x;\r\n    } else {\r\n        bounds.width = Math.max(bounds.width, (x - (bounds.x)));\r\n        // bounds.x = bounds.x;\r\n    }\r\n    if (y < (bounds.y)) {\r\n        bounds.height = (bounds.height) + ((bounds.y) - y);\r\n        bounds.y = y;\r\n    } else {\r\n        bounds.height = Math.max(bounds.height, (y - (bounds.y)));\r\n        // bounds.y = bounds.y;\r\n    }\r\n}'),(3598,'-init-(org.jhotdraw.geom.Polygon2D$Double,java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.-init-(org.jhotdraw.geom.Polygon2D$Double,java.awt.geom.AffineTransform)','355','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble','public PolygonPathIteratorDouble(Polygon2D.Double pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}'),(3599,'currentSegment(double[])','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.currentSegment(double[])','355','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble','/**\r\n * Returns the coordinates and type of the current path segment in\r\n * the iteration.\r\n * The return value is the path segment type:\r\n * SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.\r\n * A <code>double</code> array of length 2 must be passed in and\r\n * can be used to store the coordinates of the point(s).\r\n * Each point is stored as a pair of <code>double</code> x,&nbsp;y\r\n * coordinates.\r\n * SEG_MOVETO and SEG_LINETO types return one point,\r\n * and SEG_CLOSE does not return any points.\r\n *\r\n * @param coords\r\n * 		a <code>double</code> array that specifies the\r\n * 		coordinates of the point(s)\r\n * @return an integer representing the type and coordinates of the\r\ncurrent path segment.\r\n * @see PathIterator#SEG_MOVETO\r\n * @see PathIterator#SEG_LINETO\r\n * @see PathIterator#SEG_CLOSE\r\n */\r\npublic int currentSegment(double[] coords) {\r\n    if ((index) >= (poly.npoints)) {\r\n        return PathIterator.SEG_CLOSE;\r\n    }\r\n    coords[0] = poly.xpoints[index];\r\n    coords[1] = poly.ypoints[index];\r\n    if ((transform) != null) {\r\n        transform.transform(coords, 0, coords, 0, 1);\r\n    }\r\n    return (index) == 0 ? PathIterator.SEG_MOVETO : PathIterator.SEG_LINETO;\r\n}'),(3600,'currentSegment(float[])','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.currentSegment(float[])','355','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble','/**\r\n * Returns the coordinates and type of the current path segment in\r\n * the iteration.\r\n * The return value is the path segment type:\r\n * SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.\r\n * A <code>float</code> array of length 2 must be passed in and\r\n * can be used to store the coordinates of the point(s).\r\n * Each point is stored as a pair of <code>float</code> x,&nbsp;y\r\n * coordinates.  SEG_MOVETO and SEG_LINETO types return one\r\n * point, and SEG_CLOSE does not return any points.\r\n *\r\n * @param coords\r\n * 		a <code>float</code> array that specifies the\r\n * 		coordinates of the point(s)\r\n * @return an integer representing the type and coordinates of the\r\ncurrent path segment.\r\n * @see PathIterator#SEG_MOVETO\r\n * @see PathIterator#SEG_LINETO\r\n * @see PathIterator#SEG_CLOSE\r\n */\r\npublic int currentSegment(float[] coords) {\r\n    if ((index) >= (poly.npoints)) {\r\n        return PathIterator.SEG_CLOSE;\r\n    }\r\n    coords[0] = ((float) (poly.xpoints[index]));\r\n    coords[1] = ((float) (poly.ypoints[index]));\r\n    if ((transform) != null) {\r\n        transform.transform(coords, 0, coords, 0, 1);\r\n    }\r\n    return (index) == 0 ? PathIterator.SEG_MOVETO : PathIterator.SEG_LINETO;\r\n}'),(3601,'getWindingRule()','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.getWindingRule()','355','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble','/**\r\n * Returns the winding rule for determining the interior of the\r\n * path.\r\n *\r\n * @return an integer representing the current winding rule.\r\n * @see PathIterator#WIND_NON_ZERO\r\n */\r\npublic int getWindingRule() {\r\n    return PathIterator.WIND_EVEN_ODD;\r\n}'),(3602,'isDone()','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.isDone()','355','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble','/**\r\n * Tests if there are more points to read.\r\n *\r\n * @return <code>true</code> if there are more points to read;\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean isDone() {\r\n    return (index) > (poly.npoints);\r\n}'),(3603,'next()','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.next()','355','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble','/**\r\n * Moves the iterator forwards, along the primary direction of\r\n * traversal, to the next segment of the path when there are\r\n * more points in that direction.\r\n */\r\npublic void next() {\r\n    (index)++;\r\n}'),(3604,'-init-(org.jhotdraw.geom.Polygon2D$Float,java.awt.geom.AffineTransform)','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.-init-(org.jhotdraw.geom.Polygon2D$Float,java.awt.geom.AffineTransform)','356','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat','public PolygonPathIteratorFloat(Polygon2D.Float pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}'),(3605,'currentSegment(double[])','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.currentSegment(double[])','356','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat','/**\r\n * Returns the coordinates and type of the current path segment in\r\n * the iteration.\r\n * The return value is the path segment type:\r\n * SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.\r\n * A <code>double</code> array of length 2 must be passed in and\r\n * can be used to store the coordinates of the point(s).\r\n * Each point is stored as a pair of <code>double</code> x,&nbsp;y\r\n * coordinates.\r\n * SEG_MOVETO and SEG_LINETO types return one point,\r\n * and SEG_CLOSE does not return any points.\r\n *\r\n * @param coords\r\n * 		a <code>double</code> array that specifies the\r\n * 		coordinates of the point(s)\r\n * @return an integer representing the type and coordinates of the\r\ncurrent path segment.\r\n * @see PathIterator#SEG_MOVETO\r\n * @see PathIterator#SEG_LINETO\r\n * @see PathIterator#SEG_CLOSE\r\n */\r\npublic int currentSegment(double[] coords) {\r\n    if ((index) >= (poly.npoints)) {\r\n        return PathIterator.SEG_CLOSE;\r\n    }\r\n    coords[0] = poly.xpoints[index];\r\n    coords[1] = poly.ypoints[index];\r\n    if ((transform) != null) {\r\n        transform.transform(coords, 0, coords, 0, 1);\r\n    }\r\n    return (index) == 0 ? PathIterator.SEG_MOVETO : PathIterator.SEG_LINETO;\r\n}'),(3606,'currentSegment(float[])','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.currentSegment(float[])','356','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat','/**\r\n * Returns the coordinates and type of the current path segment in\r\n * the iteration.\r\n * The return value is the path segment type:\r\n * SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.\r\n * A <code>float</code> array of length 2 must be passed in and\r\n * can be used to store the coordinates of the point(s).\r\n * Each point is stored as a pair of <code>float</code> x,&nbsp;y\r\n * coordinates.  SEG_MOVETO and SEG_LINETO types return one\r\n * point, and SEG_CLOSE does not return any points.\r\n *\r\n * @param coords\r\n * 		a <code>float</code> array that specifies the\r\n * 		coordinates of the point(s)\r\n * @return an integer representing the type and coordinates of the\r\ncurrent path segment.\r\n * @see PathIterator#SEG_MOVETO\r\n * @see PathIterator#SEG_LINETO\r\n * @see PathIterator#SEG_CLOSE\r\n */\r\npublic int currentSegment(float[] coords) {\r\n    if ((index) >= (poly.npoints)) {\r\n        return PathIterator.SEG_CLOSE;\r\n    }\r\n    coords[0] = ((float) (poly.xpoints[index]));\r\n    coords[1] = ((float) (poly.ypoints[index]));\r\n    if ((transform) != null) {\r\n        transform.transform(coords, 0, coords, 0, 1);\r\n    }\r\n    return (index) == 0 ? PathIterator.SEG_MOVETO : PathIterator.SEG_LINETO;\r\n}'),(3607,'getWindingRule()','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.getWindingRule()','356','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat','/**\r\n * Returns the winding rule for determining the interior of the\r\n * path.\r\n *\r\n * @return an integer representing the current winding rule.\r\n * @see PathIterator#WIND_NON_ZERO\r\n */\r\npublic int getWindingRule() {\r\n    return PathIterator.WIND_EVEN_ODD;\r\n}'),(3608,'isDone()','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.isDone()','356','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat','/**\r\n * Tests if there are more points to read.\r\n *\r\n * @return <code>true</code> if there are more points to read;\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean isDone() {\r\n    return (index) > (poly.npoints);\r\n}'),(3609,'next()','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.next()','356','org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat','/**\r\n * Moves the iterator forwards, along the primary direction of\r\n * traversal, to the next segment of the path when there are\r\n * more points in that direction.\r\n */\r\npublic void next() {\r\n    (index)++;\r\n}'),(3610,'-init-()','org.jhotdraw.geom.QuadTree.-init-()','359','org.jhotdraw.geom.QuadTree','/**\r\n * Creates a new instance.\r\n */\r\npublic QuadTree() {\r\n    root = new QuadNode(new Rectangle2D.Double(0, 0, 800, 600));\r\n}'),(3611,'-init-(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.QuadTree.-init-(java.awt.geom.Rectangle2D$Double)','359','org.jhotdraw.geom.QuadTree','public QuadTree(Rectangle2D.Double bounds) {\r\n    root = new QuadNode(bounds);\r\n}'),(3612,'add(java.lang.Object,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.QuadTree.add(java.lang.Object,java.awt.geom.Rectangle2D$Double)','359','org.jhotdraw.geom.QuadTree','public void add(T o, Rectangle2D.Double bounds) {\r\n    if (root.bounds.contains(bounds)) {\r\n        root.add(o, ((Rectangle2D.Double) (bounds.clone())));\r\n    } else {\r\n        outside.put(o, ((Rectangle2D.Double) (bounds.clone())));\r\n        if ((outside.size()) > (maxOutside)) {\r\n            reorganize();\r\n        }\r\n    }\r\n}'),(3613,'findContains(java.awt.geom.Point2D$Double)','org.jhotdraw.geom.QuadTree.findContains(java.awt.geom.Point2D$Double)','359','org.jhotdraw.geom.QuadTree','public Collection<T> findContains(Point2D.Double p) {\r\n    HashSet<T> result = new HashSet<T>();\r\n    root.findContains(p, result);\r\n    for (Map.Entry<T, Rectangle2D.Double> entry : outside.entrySet()) {\r\n        if (entry.getValue().contains(p)) {\r\n            result.add(entry.getKey());\r\n        }\r\n    }\r\n    return result;\r\n}'),(3614,'findInside(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.QuadTree.findInside(java.awt.geom.Rectangle2D$Double)','359','org.jhotdraw.geom.QuadTree','public Collection<T> findInside(Rectangle2D.Double r) {\r\n    HashSet<T> result = new HashSet<T>();\r\n    root.findInside(r, result);\r\n    for (Map.Entry<T, Rectangle2D.Double> entry : outside.entrySet()) {\r\n        if (r.contains(entry.getValue())) {\r\n            result.add(entry.getKey());\r\n        }\r\n    }\r\n    return result;\r\n}'),(3615,'findIntersects(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.QuadTree.findIntersects(java.awt.geom.Rectangle2D$Double)','359','org.jhotdraw.geom.QuadTree','public Collection<T> findIntersects(Rectangle2D.Double r) {\r\n    HashSet<T> result = new HashSet<T>();\r\n    root.findIntersects(r, result);\r\n    for (Map.Entry<T, Rectangle2D.Double> entry : outside.entrySet()) {\r\n        if (entry.getValue().intersects(r)) {\r\n            result.add(entry.getKey());\r\n        }\r\n    }\r\n    return result;\r\n}'),(3616,'findIntersects(java.awt.geom.Rectangle2D)','org.jhotdraw.geom.QuadTree.findIntersects(java.awt.geom.Rectangle2D)','359','org.jhotdraw.geom.QuadTree','public Collection<T> findIntersects(Rectangle2D r) {\r\n    return findIntersects(new Rectangle2D.Double(r.getX(), r.getY(), r.getWidth(), r.getHeight()));\r\n}'),(3617,'remove(java.lang.Object)','org.jhotdraw.geom.QuadTree.remove(java.lang.Object)','359','org.jhotdraw.geom.QuadTree','public void remove(T o) {\r\n    outside.remove(o);\r\n    root.remove(o);\r\n}'),(3618,'reorganize()','org.jhotdraw.geom.QuadTree.reorganize()','359','org.jhotdraw.geom.QuadTree','public void reorganize() {\r\n    root.join();\r\n    outside.putAll(root.objects);\r\n    root.objects.clear();\r\n    Iterator<Map.Entry<T, Rectangle2D.Double>> i = outside.entrySet().iterator();\r\n    Map.Entry<T, Rectangle2D.Double> entry = i.next();\r\n    Rectangle2D.Double treeBounds = ((Rectangle2D.Double) (entry.getValue().clone()));\r\n    while (i.hasNext()) {\r\n        entry = i.next();\r\n        Rectangle2D.Double bounds = entry.getValue();\r\n        treeBounds.add(bounds);\r\n    } \r\n    root.bounds = treeBounds;\r\n    i = outside.entrySet().iterator();\r\n    while (i.hasNext()) {\r\n        entry = i.next();\r\n        root.add(entry.getKey(), entry.getValue());\r\n    } \r\n    outside.clear();\r\n}'),(3619,'-init-(java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.QuadTree$QuadNode.-init-(java.awt.geom.Rectangle2D$Double)','358','org.jhotdraw.geom.QuadTree$QuadNode','public QuadNode(Rectangle2D.Double bounds) {\r\n    this.bounds = bounds;\r\n    this.objects = new HashMap<T, Rectangle2D.Double>();\r\n}'),(3620,'add(java.lang.Object,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.geom.QuadTree$QuadNode.add(java.lang.Object,java.awt.geom.Rectangle2D$Double)','358','org.jhotdraw.geom.QuadTree$QuadNode','public void add(T o, Rectangle2D.Double oBounds) {\r\n    // Do we have to split?\r\n    if ((((isLeaf()) && ((objects.size()) >= (maxCapacity))) && ((bounds.width) > (minSize))) && ((bounds.height) > (minSize))) {\r\n        split();\r\n    }\r\n    if ((isLeaf()) || (oBounds.contains(bounds))) {\r\n        // We put an object into our hashtable if we are\r\n        // a leaf, or if the bounds of the object contain our bounds.\r\n        objects.put(o, oBounds);\r\n    } else {\r\n        if (northEast.bounds.intersects(oBounds)) {\r\n            northEast.add(o, oBounds);\r\n        }\r\n        if (northWest.bounds.intersects(oBounds)) {\r\n            northWest.add(o, oBounds);\r\n        }\r\n        if (southEast.bounds.intersects(oBounds)) {\r\n            southEast.add(o, oBounds);\r\n        }\r\n        if (southWest.bounds.intersects(oBounds)) {\r\n            southWest.add(o, oBounds);\r\n        }\r\n    }\r\n}'),(3621,'findContains(java.awt.geom.Point2D$Double,java.util.HashSet)','org.jhotdraw.geom.QuadTree$QuadNode.findContains(java.awt.geom.Point2D$Double,java.util.HashSet)','358','org.jhotdraw.geom.QuadTree$QuadNode','public void findContains(Point2D.Double p, HashSet<T> result) {\r\n    if (bounds.contains(p)) {\r\n        for (Map.Entry<T, Rectangle2D.Double> entry : objects.entrySet()) {\r\n            if (entry.getValue().contains(p)) {\r\n                result.add(entry.getKey());\r\n            }\r\n        }\r\n        if (!(isLeaf())) {\r\n            northWest.findContains(p, result);\r\n            northEast.findContains(p, result);\r\n            southWest.findContains(p, result);\r\n            southEast.findContains(p, result);\r\n        }\r\n    }\r\n}'),(3622,'findInside(java.awt.geom.Rectangle2D$Double,java.util.HashSet)','org.jhotdraw.geom.QuadTree$QuadNode.findInside(java.awt.geom.Rectangle2D$Double,java.util.HashSet)','358','org.jhotdraw.geom.QuadTree$QuadNode','public void findInside(Rectangle2D.Double r, HashSet<T> result) {\r\n    if (bounds.intersects(r)) {\r\n        for (Map.Entry<T, Rectangle2D.Double> entry : objects.entrySet()) {\r\n            if (r.contains(entry.getValue())) {\r\n                result.add(entry.getKey());\r\n            }\r\n        }\r\n        if (!(isLeaf())) {\r\n            northWest.findInside(r, result);\r\n            northEast.findInside(r, result);\r\n            southWest.findInside(r, result);\r\n            southEast.findInside(r, result);\r\n        }\r\n    }\r\n}'),(3623,'findIntersects(java.awt.geom.Rectangle2D$Double,java.util.HashSet)','org.jhotdraw.geom.QuadTree$QuadNode.findIntersects(java.awt.geom.Rectangle2D$Double,java.util.HashSet)','358','org.jhotdraw.geom.QuadTree$QuadNode','public void findIntersects(Rectangle2D.Double r, HashSet<T> result) {\r\n    if (bounds.intersects(r)) {\r\n        int oldSize = result.size();\r\n        for (Map.Entry<T, Rectangle2D.Double> entry : objects.entrySet()) {\r\n            if (entry.getValue().intersects(r)) {\r\n                result.add(entry.getKey());\r\n            }\r\n        }\r\n        if (!(isLeaf())) {\r\n            northWest.findIntersects(r, result);\r\n            northEast.findIntersects(r, result);\r\n            southWest.findIntersects(r, result);\r\n            southEast.findIntersects(r, result);\r\n        }\r\n    }\r\n}'),(3624,'isLeaf()','org.jhotdraw.geom.QuadTree$QuadNode.isLeaf()','358','org.jhotdraw.geom.QuadTree$QuadNode','public boolean isLeaf() {\r\n    return (northEast) == null;\r\n}'),(3625,'join()','org.jhotdraw.geom.QuadTree$QuadNode.join()','358','org.jhotdraw.geom.QuadTree$QuadNode','public void join() {\r\n    if (!(isLeaf())) {\r\n        northWest.join();\r\n        northEast.join();\r\n        southWest.join();\r\n        southEast.join();\r\n        objects.putAll(northWest.objects);\r\n        objects.putAll(northEast.objects);\r\n        objects.putAll(southWest.objects);\r\n        objects.putAll(southEast.objects);\r\n        northWest = null;\r\n        northEast = null;\r\n        southWest = null;\r\n        southEast = null;\r\n    }\r\n}'),(3626,'remove(java.lang.Object)','org.jhotdraw.geom.QuadTree$QuadNode.remove(java.lang.Object)','358','org.jhotdraw.geom.QuadTree$QuadNode','public void remove(T o) {\r\n    if (((objects.remove(o)) == null) && (!(isLeaf()))) {\r\n        northEast.remove(o);\r\n        northWest.remove(o);\r\n        southEast.remove(o);\r\n        southWest.remove(o);\r\n    }\r\n}'),(3627,'split()','org.jhotdraw.geom.QuadTree$QuadNode.split()','358','org.jhotdraw.geom.QuadTree$QuadNode','public void split() {\r\n    if (isLeaf()) {\r\n        double hw = (bounds.width) / 2;\r\n        double hh = (bounds.height) / 2;\r\n        northWest = new QuadNode(new Rectangle2D.Double(bounds.x, bounds.y, hw, hh));\r\n        northEast = new QuadNode(new Rectangle2D.Double(((bounds.x) + hw), bounds.y, ((bounds.width) - hw), hh));\r\n        southWest = new QuadNode(new Rectangle2D.Double(bounds.x, ((bounds.y) + hh), hw, ((bounds.height) - hh)));\r\n        southEast = new QuadNode(new Rectangle2D.Double(((bounds.x) + hw), ((bounds.y) + hh), ((bounds.width) - hw), ((bounds.height) - hh)));\r\n        HashMap<T, Rectangle2D.Double> temp = objects;\r\n        objects = new HashMap<T, Rectangle2D.Double>();\r\n        for (Map.Entry<T, Rectangle2D.Double> entry : temp.entrySet()) {\r\n            add(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n}'),(3628,'-init-()','org.jhotdraw.geom.Shapes.-init-()','360','org.jhotdraw.geom.Shapes','/**\r\n * Creates a new instance.\r\n */\r\nprivate Shapes() {\r\n}'),(3629,'outlineContains(java.awt.Shape,java.awt.geom.Point2D$Double,double)','org.jhotdraw.geom.Shapes.outlineContains(java.awt.Shape,java.awt.geom.Point2D$Double,double)','360','org.jhotdraw.geom.Shapes','/**\r\n * Returns true, if the outline of this bezier path contains the specified\r\n * point.\r\n *\r\n * @param p\r\n * 		The point to be tested.\r\n * @param tolerance\r\n * 		The tolerance for the test.\r\n */\r\npublic static boolean outlineContains(Shape shape, Point2D.Double p, double tolerance) {\r\n    PathIterator i = shape.getPathIterator(new AffineTransform(), tolerance);\r\n    if (!(i.isDone())) {\r\n        double[] coords = new double[6];\r\n        int type = i.currentSegment(coords);\r\n        double prevX = coords[0];\r\n        double prevY = coords[1];\r\n        i.next();\r\n        while (!(i.isDone())) {\r\n            i.currentSegment(coords);\r\n            if (Geom.lineContainsPoint(prevX, prevY, coords[0], coords[1], p.x, p.y, tolerance)) {\r\n                return true;\r\n            }\r\n            prevX = coords[0];\r\n            prevY = coords[1];\r\n            i.next();\r\n        } \r\n    }\r\n    return false;\r\n}'),(3630,'-init-()','org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','EventHandler() {\r\n}'),(3631,'-init-(java.util.Set,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.util.LinkedList)','org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(java.util.Set,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.util.LinkedList)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','public UndoableAttributeEdit(Set<Figure> editedFigures, AttributeKey<T> attributeKey, T editRedoValue, LinkedList<Object> editUndoData) {\r\n    this.editedFigures = editedFigures;\r\n    this.attributeKey = attributeKey;\r\n    this.editRedoValue = editRedoValue;\r\n    this.editUndoData = editUndoData;\r\n}'),(3632,'-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}'),(3633,'-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(3634,'-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}'),(3635,'getActiveView()','org.jhotdraw.gui.AbstractAttributeEditorHandler.getActiveView()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','protected DrawingView getActiveView() {\r\n    if ((getView()) != null) {\r\n        return getView();\r\n    } else {\r\n        return drawingEditor.getActiveView();\r\n    }\r\n}'),(3636,'getAttributeEditor()','org.jhotdraw.gui.AbstractAttributeEditorHandler.getAttributeEditor()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Returns the AttributeEditor to which this FigureAttributeEditorHandler is\r\n * attached.\r\n */\r\npublic AttributeEditor<T> getAttributeEditor() {\r\n    return attributeEditor;\r\n}'),(3637,'getAttributeKey()','org.jhotdraw.gui.AbstractAttributeEditorHandler.getAttributeKey()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','public AttributeKey<T> getAttributeKey() {\r\n    return attributeKey;\r\n}'),(3638,'getDrawingEditor()','org.jhotdraw.gui.AbstractAttributeEditorHandler.getDrawingEditor()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Returns the DrawingEditor to which this FigureAttributeEditorHandler is\r\n * attached.\r\n */\r\npublic DrawingEditor getDrawingEditor() {\r\n    return drawingEditor;\r\n}'),(3639,'getEditedFigures()','org.jhotdraw.gui.AbstractAttributeEditorHandler.getEditedFigures()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','protected abstract Set<Figure> getEditedFigures();'),(3640,'getView()','org.jhotdraw.gui.AbstractAttributeEditorHandler.getView()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Returns the DrawingView to which this FigureAttributeEditorHandler is\r\n * attached. Returns null, if the FigureAttributeEditorHandler is attached\r\n * to all views of the DrawingEditor.\r\n */\r\npublic DrawingView getView() {\r\n    return view;\r\n}'),(3641,'isUpdateDrawingEditorDefaults()','org.jhotdraw.gui.AbstractAttributeEditorHandler.isUpdateDrawingEditorDefaults()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Returns true if the attribute editor updates the\r\n * default values of the drawing editor.\r\n */\r\npublic boolean isUpdateDrawingEditorDefaults() {\r\n    return isUpdateDrawingEditorDefaults;\r\n}'),(3642,'setAttributeEditor(org.jhotdraw.gui.AttributeEditor)','org.jhotdraw.gui.AbstractAttributeEditorHandler.setAttributeEditor(org.jhotdraw.gui.AttributeEditor)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Attaches the FigureAttributeEditorHandler to the specified AttributeEditor.\r\n */\r\npublic void setAttributeEditor(AttributeEditor<T> newValue) {\r\n    if ((attributeEditor) != null) {\r\n        attributeEditor.removePropertyChangeListener(eventHandler);\r\n    }\r\n    this.attributeEditor = newValue;\r\n    if ((attributeEditor) != null) {\r\n        attributeEditor.addPropertyChangeListener(eventHandler);\r\n    }\r\n}'),(3643,'setAttributeKey(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.gui.AbstractAttributeEditorHandler.setAttributeKey(org.jhotdraw.draw.AttributeKey)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','public void setAttributeKey(AttributeKey<T> newValue) {\r\n    attributeKey = newValue;\r\n}'),(3644,'setDrawingEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.gui.AbstractAttributeEditorHandler.setDrawingEditor(org.jhotdraw.draw.DrawingEditor)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Attaches the FigureAttributeEditorHandler to the specified DrawingEditor.\r\n * <p>\r\n * The FigureAttributeEditorHandler listens to view changes and selection\r\n * changes of the drawing editor and calls setEnabled(boolean) and\r\n * updateField(Set&lt;Figure&gt;) on the field accordingly.\r\n *\r\n * @param newValue\r\n * 		a drawing editor.\r\n */\r\npublic void setDrawingEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = drawingEditor;\r\n    if ((drawingEditor) != null) {\r\n        drawingEditor.removePropertyChangeListener(eventHandler);\r\n    }\r\n    this.drawingEditor = newValue;\r\n    if ((drawingEditor) != null) {\r\n        drawingEditor.addPropertyChangeListener(eventHandler);\r\n    }\r\n    updateActiveView();\r\n}'),(3645,'setUpdateDrawingEditorDefaults(boolean)','org.jhotdraw.gui.AbstractAttributeEditorHandler.setUpdateDrawingEditorDefaults(boolean)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Set this to true if you want the attribute editor to update the\r\n * default values of the drawing editor.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setUpdateDrawingEditorDefaults(boolean newValue) {\r\n    isUpdateDrawingEditorDefaults = newValue;\r\n}'),(3646,'setView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.gui.AbstractAttributeEditorHandler.setView(org.jhotdraw.draw.DrawingView)','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','/**\r\n * Attaches the FigureAttributeEditorHandler to the specified DrawingView.\r\n * <p>\r\n * If a non-null value is provided, the FigureAttributeEditorHandler listens only\r\n * to selection changes of the specified view. If a null value is provided,\r\n * the FigureAttributeEditorHandler listens to all views of the drawing editor.\r\n *\r\n * @param newValue\r\n * 		a drawing view.\r\n */\r\npublic void setView(DrawingView newValue) {\r\n    this.view = newValue;\r\n    updateActiveView();\r\n}'),(3647,'updateActiveView()','org.jhotdraw.gui.AbstractAttributeEditorHandler.updateActiveView()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','protected void updateActiveView() {\r\n    DrawingView newValue = ((view) != null// \r\n    ) ? view// \r\n     : ((drawingEditor) != null) && ((drawingEditor.getActiveView()) != null)// \r\n     ? drawingEditor.getActiveView() : null;\r\n    DrawingView oldValue = activeView;\r\n    if ((activeView) != null) {\r\n        activeView.removePropertyChangeListener(eventHandler);\r\n        activeView.removeFigureSelectionListener(eventHandler);\r\n        if ((figuresOfInterest) != null) {\r\n            for (Figure f : figuresOfInterest) {\r\n                f.removeFigureListener(eventHandler);\r\n            }\r\n        }\r\n    }\r\n    activeView = newValue;\r\n    if ((activeView) != null) {\r\n        activeView.addPropertyChangeListener(eventHandler);\r\n        activeView.addFigureSelectionListener(eventHandler);\r\n        figuresOfInterest = getEditedFigures();\r\n        for (Figure f : figuresOfInterest) {\r\n            f.addFigureListener(eventHandler);\r\n        }\r\n    }\r\n    attributeRestoreData = null;\r\n    updateAttributeEditor();\r\n}'),(3648,'updateAttributeEditor()','org.jhotdraw.gui.AbstractAttributeEditorHandler.updateAttributeEditor()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','protected void updateAttributeEditor() {\r\n    if (((updateDepth)++) == 0) {\r\n        Set<Figure> figures = getEditedFigures();\r\n        if (((activeView) == null) || (figures.isEmpty())) {\r\n            attributeEditor.getComponent().setEnabled(false);\r\n        } else {\r\n            attributeEditor.getComponent().setEnabled(true);\r\n            T value = attributeKey.get(figures.iterator().next());\r\n            boolean isMultiple = false;\r\n            for (Figure f : figures) {\r\n                T v = attributeKey.get(f);\r\n                if ((((v == null) || (value == null)) && (v != value))// \r\n                 || (((v != null) && (value != null)) && (!(v.equals(value))))) {\r\n                    isMultiple = true;\r\n                    break;\r\n                }\r\n            }\r\n            attributeEditor.setAttributeValue(value);\r\n            attributeEditor.setMultipleValues(isMultiple);\r\n        }\r\n    }\r\n    (updateDepth)--;\r\n}'),(3649,'updateFigures()','org.jhotdraw.gui.AbstractAttributeEditorHandler.updateFigures()','363','org.jhotdraw.gui.AbstractAttributeEditorHandler','@SuppressWarnings(\"unchecked\")\r\nprotected void updateFigures() {\r\n    if (((updateDepth)++) == 0) {\r\n        Set<Figure> figures = getEditedFigures();\r\n        if (((activeView) == null) || (figures.isEmpty())) {\r\n        } else {\r\n            T value = attributeEditor.getAttributeValue();\r\n            if ((attributeRestoreData) == null) {\r\n                attributeRestoreData = new LinkedList<Object>();\r\n                for (Figure f : figures) {\r\n                    attributeRestoreData.add(f.getAttributesRestoreData());\r\n                }\r\n            }\r\n            for (Figure f : figures) {\r\n                f.willChange();\r\n                attributeKey.basicSet(f, value);\r\n                for (Map.Entry<AttributeKey, Object> entry : defaultAttributes.entrySet()) {\r\n                    entry.getKey().basicSet(f, entry.getValue());\r\n                }\r\n                f.changed();\r\n            }\r\n            if (((drawingEditor) != null) && (isUpdateDrawingEditorDefaults)) {\r\n                drawingEditor.setDefaultAttribute(attributeKey, value);\r\n            }\r\n            // \r\n            // \r\n            getActiveView().getDrawing().fireUndoableEditHappened(new AbstractAttributeEditorHandler.UndoableAttributeEdit<T>(new HashSet<Figure>(figures), attributeKey, value, attributeRestoreData));\r\n            if (!(attributeEditor.getValueIsAdjusting())) {\r\n                attributeRestoreData = null;\r\n            }\r\n        }\r\n    }\r\n    (updateDepth)--;\r\n}'),(3650,'-init-()','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.-init-()','361','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler','EventHandler() {\r\n}'),(3651,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)','361','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler','@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    if ((e.getAttribute()) == (attributeKey)) {\r\n        updateAttributeEditor();\r\n    }\r\n}'),(3652,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.propertyChange(java.beans.PropertyChangeEvent)','361','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler','public void propertyChange(PropertyChangeEvent evt) {\r\n    Object src = evt.getSource();\r\n    String name = evt.getPropertyName();\r\n    if ((src == (drawingEditor)) && (name == (DrawingEditor.ACTIVE_VIEW_PROPERTY))) {\r\n        updateActiveView();\r\n    } else\r\n        if ((src == (attributeEditor)) && (name == (AttributeEditor.ATTRIBUTE_VALUE_PROPERTY))) {\r\n            updateFigures();\r\n        } else\r\n            if ((src == (activeView)) && (name == (DrawingView.DRAWING_PROPERTY))) {\r\n                updateActiveView();\r\n            } else\r\n                if (((figuresOfInterest) != null) && (figuresOfInterest.contains(src))) {\r\n                    updateFigures();\r\n                }\r\n\r\n\r\n\r\n}'),(3653,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','361','org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler','public void selectionChanged(FigureSelectionEvent evt) {\r\n    attributeRestoreData = null;\r\n    if ((figuresOfInterest) != null) {\r\n        for (Figure f : figuresOfInterest) {\r\n            f.removeFigureListener(this);\r\n        }\r\n    }\r\n    figuresOfInterest = getEditedFigures();\r\n    for (Figure f : figuresOfInterest) {\r\n        f.addFigureListener(this);\r\n    }\r\n    updateAttributeEditor();\r\n}'),(3654,'-init-(java.util.Set,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.util.LinkedList)','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.-init-(java.util.Set,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.util.LinkedList)','362','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit','public UndoableAttributeEdit(Set<Figure> editedFigures, AttributeKey<T> attributeKey, T editRedoValue, LinkedList<Object> editUndoData) {\r\n    this.editedFigures = editedFigures;\r\n    this.attributeKey = attributeKey;\r\n    this.editRedoValue = editRedoValue;\r\n    this.editUndoData = editUndoData;\r\n}'),(3655,'getPresentationName()','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.getPresentationName()','362','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit','@Override\r\npublic String getPresentationName() {\r\n    return attributeKey.toString();\r\n}'),(3656,'redo()','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.redo()','362','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit','@Override\r\npublic void redo() throws CannotRedoException {\r\n    super.redo();\r\n    for (Figure f : editedFigures) {\r\n        attributeKey.set(f, editRedoValue);\r\n    }\r\n}'),(3657,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.replaceEdit(javax.swing.undo.UndoableEdit)','362','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit','@Override\r\npublic boolean replaceEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof AbstractAttributeEditorHandler.UndoableAttributeEdit) {\r\n        return (((AbstractAttributeEditorHandler.UndoableAttributeEdit) (anEdit)).editUndoData) == (this.editUndoData);\r\n    }\r\n    return false;\r\n}'),(3658,'undo()','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.undo()','362','org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit','@Override\r\npublic void undo() throws CannotRedoException {\r\n    super.undo();\r\n    Iterator<Object> di = editUndoData.iterator();\r\n    for (Figure f : editedFigures) {\r\n        f.willChange();\r\n        f.restoreAttributesTo(di.next());\r\n        f.changed();\r\n    }\r\n}'),(3659,'-init-()','org.jhotdraw.gui.Arrangeable.-init-()','365','org.jhotdraw.gui.Arrangeable','Arrangement() {\r\n}'),(3660,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.gui.Arrangeable.addPropertyChangeListener(java.beans.PropertyChangeListener)','365','org.jhotdraw.gui.Arrangeable','public void addPropertyChangeListener(PropertyChangeListener l);'),(3661,'getArrangement()','org.jhotdraw.gui.Arrangeable.getArrangement()','365','org.jhotdraw.gui.Arrangeable','public Arrangeable.Arrangement getArrangement();'),(3662,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.gui.Arrangeable.removePropertyChangeListener(java.beans.PropertyChangeListener)','365','org.jhotdraw.gui.Arrangeable','public void removePropertyChangeListener(PropertyChangeListener l);'),(3663,'setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)','org.jhotdraw.gui.Arrangeable.setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)','365','org.jhotdraw.gui.Arrangeable','public void setArrangement(Arrangeable.Arrangement newValue);'),(3664,'-init-()','org.jhotdraw.gui.Arrangeable$Arrangement.-init-()','364','org.jhotdraw.gui.Arrangeable$Arrangement','Arrangement() {\r\n}'),(3665,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.gui.AttributeEditor.addPropertyChangeListener(java.beans.PropertyChangeListener)','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * Adds a property change listener.\r\n *\r\n * @param l\r\n * 		\r\n */\r\npublic void addPropertyChangeListener(PropertyChangeListener l);'),(3666,'getAttributeValue()','org.jhotdraw.gui.AttributeEditor.getAttributeValue()','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * Gets the attribute value.\r\n */\r\npublic T getAttributeValue();'),(3667,'getComponent()','org.jhotdraw.gui.AttributeEditor.getComponent()','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * Returns the JComponent of the attribute field.\r\n */\r\npublic JComponent getComponent();'),(3668,'getValueIsAdjusting()','org.jhotdraw.gui.AttributeEditor.getValueIsAdjusting()','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * Returns true if the field is currently adjusting the value.\r\n */\r\npublic boolean getValueIsAdjusting();'),(3669,'isMultipleValues()','org.jhotdraw.gui.AttributeEditor.isMultipleValues()','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * This method returns the value of the multipleValues property.\r\n */\r\npublic boolean isMultipleValues();'),(3670,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.gui.AttributeEditor.removePropertyChangeListener(java.beans.PropertyChangeListener)','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * Removes a property change listener.\r\n *\r\n * @param l\r\n * 		\r\n */\r\npublic void removePropertyChangeListener(PropertyChangeListener l);'),(3671,'setAttributeValue(java.lang.Object)','org.jhotdraw.gui.AttributeEditor.setAttributeValue(java.lang.Object)','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * Sets the attribute value. This is a bound property.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setAttributeValue(T newValue);'),(3672,'setMultipleValues(boolean)','org.jhotdraw.gui.AttributeEditor.setMultipleValues(boolean)','366','org.jhotdraw.gui.AttributeEditor','/**\r\n * This method is called, if the figures of the attribute field have\r\n * multiple values.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setMultipleValues(boolean newValue);'),(3673,'-init-()','org.jhotdraw.gui.DisclosureIcon.-init-()','367','org.jhotdraw.gui.DisclosureIcon','DisclosureIcon() {\r\n}'),(3674,'getIconHeight()','org.jhotdraw.gui.DisclosureIcon.getIconHeight()','367','org.jhotdraw.gui.DisclosureIcon','public int getIconHeight() {\r\n    return 8;\r\n}'),(3675,'getIconWidth()','org.jhotdraw.gui.DisclosureIcon.getIconWidth()','367','org.jhotdraw.gui.DisclosureIcon','public int getIconWidth() {\r\n    return 10;\r\n}'),(3676,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.gui.DisclosureIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','367','org.jhotdraw.gui.DisclosureIcon','public void paintIcon(Component component, Graphics g, int x, int y) {\r\n    JComponent c = ((JComponent) (component));\r\n    int nbOfStates = ((c.getClientProperty(DisclosureIcon.STATE_COUNT_PROPERTY)) instanceof Integer) ? ((Integer) (c.getClientProperty(DisclosureIcon.STATE_COUNT_PROPERTY))) : 2;\r\n    int currentState = ((c.getClientProperty(DisclosureIcon.CURRENT_STATE_PROPERTY)) instanceof Integer) ? ((Integer) (c.getClientProperty(DisclosureIcon.CURRENT_STATE_PROPERTY))) : 1;\r\n    g.setColor(Color.black);\r\n    g.drawRect(x, y, ((getIconWidth()) - 1), ((getIconHeight()) - 1));\r\n    g.setColor(new Color(6710886));\r\n    g.fillRect((x + 1), (y + 1), (1 + ((((getIconWidth()) - 3) * currentState) / (nbOfStates - 1))), ((getIconHeight()) - 2));\r\n}'),(3677,'-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)','368','org.jhotdraw.gui.DrawingAttributeEditorHandler','public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}'),(3678,'getDrawing()','org.jhotdraw.gui.DrawingAttributeEditorHandler.getDrawing()','368','org.jhotdraw.gui.DrawingAttributeEditorHandler','public Drawing getDrawing() {\r\n    return drawing;\r\n}'),(3679,'getEditedFigures()','org.jhotdraw.gui.DrawingAttributeEditorHandler.getEditedFigures()','368','org.jhotdraw.gui.DrawingAttributeEditorHandler','@Override\r\nprotected Set<Figure> getEditedFigures() {\r\n    HashSet<Figure> s = new HashSet<Figure>();\r\n    if ((drawing) != null) {\r\n        s.add(drawing);\r\n    } else\r\n        if ((activeView) != null) {\r\n            s.add(activeView.getDrawing());\r\n        }\r\n\r\n    return s;\r\n}'),(3680,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.gui.DrawingAttributeEditorHandler.setDrawing(org.jhotdraw.draw.Drawing)','368','org.jhotdraw.gui.DrawingAttributeEditorHandler','public void setDrawing(Drawing newValue) {\r\n    drawing = newValue;\r\n    updateAttributeEditor();\r\n}'),(3681,'-init-(int,int)','org.jhotdraw.gui.EmptyIcon.-init-(int,int)','369','org.jhotdraw.gui.EmptyIcon','public EmptyIcon(int width, int height) {\r\n    this.width = width;\r\n    this.height = height;\r\n}'),(3682,'getIconHeight()','org.jhotdraw.gui.EmptyIcon.getIconHeight()','369','org.jhotdraw.gui.EmptyIcon','public int getIconHeight() {\r\n    return height;\r\n}'),(3683,'getIconWidth()','org.jhotdraw.gui.EmptyIcon.getIconWidth()','369','org.jhotdraw.gui.EmptyIcon','public int getIconWidth() {\r\n    return width;\r\n}'),(3684,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.gui.EmptyIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','369','org.jhotdraw.gui.EmptyIcon','public void paintIcon(Component c, Graphics g, int x, int y) {\r\n}'),(3685,'-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)','370','org.jhotdraw.gui.FigureAttributeEditorHandler','public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}'),(3686,'-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','370','org.jhotdraw.gui.FigureAttributeEditorHandler','public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(3687,'-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)','370','org.jhotdraw.gui.FigureAttributeEditorHandler','public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(3688,'getEditedFigures()','org.jhotdraw.gui.FigureAttributeEditorHandler.getEditedFigures()','370','org.jhotdraw.gui.FigureAttributeEditorHandler','@Override\r\n@SuppressWarnings(\"unchecked\")\r\nprotected Set<Figure> getEditedFigures() {\r\n    return ((Set<Figure>) ((activeView) == null ? Collections.emptySet() : activeView.getSelectedFigures()));\r\n}'),(3689,'-init-()','org.jhotdraw.gui.JAttributeSlider.-init-()','371','org.jhotdraw.gui.JAttributeSlider','/**\r\n * Creates new instance.\r\n */\r\npublic JAttributeSlider() {\r\n    this(JSlider.VERTICAL, 0, 100, 50);\r\n}'),(3690,'-init-(int,int,int,int)','org.jhotdraw.gui.JAttributeSlider.-init-(int,int,int,int)','371','org.jhotdraw.gui.JAttributeSlider','public JAttributeSlider(int orientation, int min, int max, int value) {\r\n    super(orientation, min, max, value);\r\n}'),(3691,'fireStateChanged()','org.jhotdraw.gui.JAttributeSlider.fireStateChanged()','371','org.jhotdraw.gui.JAttributeSlider','@Override\r\nprotected void fireStateChanged() {\r\n    super.fireStateChanged();\r\n    Double oldValue = attributeValue;\r\n    attributeValue = (getValue()) / (scaleFactor);\r\n    firePropertyChange(AttributeEditor.ATTRIBUTE_VALUE_PROPERTY, oldValue, attributeValue);\r\n}'),(3692,'getAttributeValue()','org.jhotdraw.gui.JAttributeSlider.getAttributeValue()','371','org.jhotdraw.gui.JAttributeSlider','public Double getAttributeValue() {\r\n    return attributeValue;\r\n}'),(3693,'getComponent()','org.jhotdraw.gui.JAttributeSlider.getComponent()','371','org.jhotdraw.gui.JAttributeSlider','public JComponent getComponent() {\r\n    return this;\r\n}'),(3694,'getScaleFactor()','org.jhotdraw.gui.JAttributeSlider.getScaleFactor()','371','org.jhotdraw.gui.JAttributeSlider','public double getScaleFactor() {\r\n    return scaleFactor;\r\n}'),(3695,'initComponents()','org.jhotdraw.gui.JAttributeSlider.initComponents()','371','org.jhotdraw.gui.JAttributeSlider','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3696,'isMultipleValues()','org.jhotdraw.gui.JAttributeSlider.isMultipleValues()','371','org.jhotdraw.gui.JAttributeSlider','public boolean isMultipleValues() {\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(3697,'setAttributeValue(java.lang.Double)','org.jhotdraw.gui.JAttributeSlider.setAttributeValue(java.lang.Double)','371','org.jhotdraw.gui.JAttributeSlider','public void setAttributeValue(Double newValue) {\r\n    attributeValue = newValue;\r\n    setValue(((int) (newValue * (scaleFactor))));\r\n}'),(3698,'setMultipleValues(boolean)','org.jhotdraw.gui.JAttributeSlider.setMultipleValues(boolean)','371','org.jhotdraw.gui.JAttributeSlider','public void setMultipleValues(boolean newValue) {\r\n    boolean oldValue = isMultipleValues;\r\n    isMultipleValues = newValue;\r\n    firePropertyChange(AttributeEditor.MULTIPLE_VALUES_PROPERTY, oldValue, newValue);\r\n}'),(3699,'setScaleFactor(double)','org.jhotdraw.gui.JAttributeSlider.setScaleFactor(double)','371','org.jhotdraw.gui.JAttributeSlider','public void setScaleFactor(double newValue) {\r\n    scaleFactor = newValue;\r\n}'),(3700,'-init-()','org.jhotdraw.gui.JAttributeSliderBeanInfo.-init-()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','JAttributeSliderBeanInfo() {\r\n}'),(3701,'getBdescriptor()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getBdescriptor()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JAttributeSliderBeanInfo.beanDescriptor) == null)\r\n        JAttributeSliderBeanInfo.beanDescriptor = new BeanDescriptor(JAttributeTextFieldBeanInfo.class);\r\n\r\n    JAttributeSliderBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JAttributeSliderBeanInfo.beanDescriptor.setDisplayName(\"JDoubleAttributeSlider\");\r\n    return JAttributeSliderBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3702,'getBeanDescriptor()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getBeanDescriptor()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JAttributeSliderBeanInfo.getBdescriptor();\r\n}'),(3703,'getDefaultEventIndex()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getDefaultEventIndex()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JAttributeSliderBeanInfo.defaultEventIndex;\r\n}'),(3704,'getDefaultPropertyIndex()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getDefaultPropertyIndex()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JAttributeSliderBeanInfo.defaultPropertyIndex;\r\n}'),(3705,'getEdescriptor()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getEdescriptor()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JAttributeSliderBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3706,'getEventSetDescriptors()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getEventSetDescriptors()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JAttributeSliderBeanInfo.getEdescriptor();\r\n}'),(3707,'getIcon(int)','org.jhotdraw.gui.JAttributeSliderBeanInfo.getIcon(int)','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JAttributeSliderBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((JAttributeSliderBeanInfo.iconColor16) == null)\r\n                    JAttributeSliderBeanInfo.iconColor16 = loadImage(JAttributeSliderBeanInfo.iconNameC16);\r\n\r\n                return JAttributeSliderBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JAttributeSliderBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((JAttributeSliderBeanInfo.iconColor32) == null)\r\n                    JAttributeSliderBeanInfo.iconColor32 = loadImage(JAttributeSliderBeanInfo.iconNameC32);\r\n\r\n                return JAttributeSliderBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JAttributeSliderBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((JAttributeSliderBeanInfo.iconMono16) == null)\r\n                    JAttributeSliderBeanInfo.iconMono16 = loadImage(JAttributeSliderBeanInfo.iconNameM16);\r\n\r\n                return JAttributeSliderBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JAttributeSliderBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((JAttributeSliderBeanInfo.iconMono32) == null)\r\n                    JAttributeSliderBeanInfo.iconMono32 = loadImage(JAttributeSliderBeanInfo.iconNameM32);\r\n\r\n                return JAttributeSliderBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3708,'getMdescriptor()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getMdescriptor()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JAttributeSliderBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3709,'getMethodDescriptors()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getMethodDescriptors()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JAttributeSliderBeanInfo.getMdescriptor();\r\n}'),(3710,'getPdescriptor()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getPdescriptor()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JAttributeSliderBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3711,'getPropertyDescriptors()','org.jhotdraw.gui.JAttributeSliderBeanInfo.getPropertyDescriptors()','372','org.jhotdraw.gui.JAttributeSliderBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JAttributeSliderBeanInfo.getPdescriptor();\r\n}'),(3712,'-init-()','org.jhotdraw.gui.JAttributeTextArea.-init-()','373','org.jhotdraw.gui.JAttributeTextArea','/**\r\n * Creates new instance.\r\n */\r\npublic JAttributeTextArea() {\r\n}'),(3713,'firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','org.jhotdraw.gui.JAttributeTextArea.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','373','org.jhotdraw.gui.JAttributeTextArea','@Override\r\nprotected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {\r\n    super.firePropertyChange(propertyName, oldValue, newValue);\r\n    if (propertyName == \"value\") {\r\n        super.firePropertyChange(AttributeEditor.ATTRIBUTE_VALUE_PROPERTY, oldValue, newValue);\r\n    }\r\n}'),(3714,'getAttributeValue()','org.jhotdraw.gui.JAttributeTextArea.getAttributeValue()','373','org.jhotdraw.gui.JAttributeTextArea','@SuppressWarnings(\"unchecked\")\r\npublic T getAttributeValue() {\r\n    return ((T) (getValue()));\r\n}'),(3715,'getComponent()','org.jhotdraw.gui.JAttributeTextArea.getComponent()','373','org.jhotdraw.gui.JAttributeTextArea','public JComponent getComponent() {\r\n    return this;\r\n}'),(3716,'getValueIsAdjusting()','org.jhotdraw.gui.JAttributeTextArea.getValueIsAdjusting()','373','org.jhotdraw.gui.JAttributeTextArea','public boolean getValueIsAdjusting() {\r\n    return isFocusOwner();\r\n}'),(3717,'initComponents()','org.jhotdraw.gui.JAttributeTextArea.initComponents()','373','org.jhotdraw.gui.JAttributeTextArea','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3718,'isMultipleValues()','org.jhotdraw.gui.JAttributeTextArea.isMultipleValues()','373','org.jhotdraw.gui.JAttributeTextArea','public boolean isMultipleValues() {\r\n    return isMultipleValues;\r\n}'),(3719,'paintComponent(java.awt.Graphics)','org.jhotdraw.gui.JAttributeTextArea.paintComponent(java.awt.Graphics)','373','org.jhotdraw.gui.JAttributeTextArea','@Override\r\nprotected void paintComponent(Graphics g) {\r\n    if ((!(isFocusOwner())) && (isMultipleValues)) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        Color c = getForeground();\r\n        setForeground(new Color(0, true));\r\n        super.paintComponent(g);\r\n        Insets insets = getInsets();\r\n        Insets margin = getMargin();\r\n        FontMetrics fm = g.getFontMetrics(getFont());\r\n        g.setFont(getFont().deriveFont(Font.ITALIC));\r\n        setForeground(c);\r\n        g.setColor(c);\r\n        g.drawString(labels.getString(\"attribute.multipleValues.text\"), ((insets.left) + (margin.left)), (((insets.top) + (margin.top)) + (fm.getAscent())));\r\n    } else {\r\n        super.paintComponent(g);\r\n    }\r\n}'),(3720,'setAttributeValue(java.lang.Object)','org.jhotdraw.gui.JAttributeTextArea.setAttributeValue(java.lang.Object)','373','org.jhotdraw.gui.JAttributeTextArea','public void setAttributeValue(T newValue) {\r\n    setValue(newValue);\r\n}'),(3721,'setMultipleValues(boolean)','org.jhotdraw.gui.JAttributeTextArea.setMultipleValues(boolean)','373','org.jhotdraw.gui.JAttributeTextArea','public void setMultipleValues(boolean newValue) {\r\n    isMultipleValues = newValue;\r\n    repaint();\r\n}'),(3722,'-init-()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.-init-()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','JAttributeTextAreaBeanInfo() {\r\n}'),(3723,'getBdescriptor()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getBdescriptor()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JAttributeTextAreaBeanInfo.beanDescriptor) == null) {\r\n        JAttributeTextAreaBeanInfo.beanDescriptor = new BeanDescriptor(JAttributeTextAreaBeanInfo.class);\r\n    }\r\n    JAttributeTextAreaBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JAttributeTextAreaBeanInfo.beanDescriptor.setDisplayName(\"JAttributeTextArea\");\r\n    return JAttributeTextAreaBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3724,'getBeanDescriptor()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getBeanDescriptor()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JAttributeTextAreaBeanInfo.getBdescriptor();\r\n}'),(3725,'getDefaultEventIndex()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getDefaultEventIndex()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JAttributeTextAreaBeanInfo.defaultEventIndex;\r\n}'),(3726,'getDefaultPropertyIndex()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getDefaultPropertyIndex()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JAttributeTextAreaBeanInfo.defaultPropertyIndex;\r\n}'),(3727,'getEdescriptor()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getEdescriptor()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JAttributeTextAreaBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3728,'getEventSetDescriptors()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getEventSetDescriptors()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JAttributeTextAreaBeanInfo.getEdescriptor();\r\n}'),(3729,'getIcon(int)','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getIcon(int)','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JAttributeTextAreaBeanInfo.iconNameC16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextAreaBeanInfo.iconColor16) == null) {\r\n                    JAttributeTextAreaBeanInfo.iconColor16 = loadImage(JAttributeTextAreaBeanInfo.iconNameC16);\r\n                }\r\n                return JAttributeTextAreaBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JAttributeTextAreaBeanInfo.iconNameC32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextAreaBeanInfo.iconColor32) == null) {\r\n                    JAttributeTextAreaBeanInfo.iconColor32 = loadImage(JAttributeTextAreaBeanInfo.iconNameC32);\r\n                }\r\n                return JAttributeTextAreaBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JAttributeTextAreaBeanInfo.iconNameM16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextAreaBeanInfo.iconMono16) == null) {\r\n                    JAttributeTextAreaBeanInfo.iconMono16 = loadImage(JAttributeTextAreaBeanInfo.iconNameM16);\r\n                }\r\n                return JAttributeTextAreaBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JAttributeTextAreaBeanInfo.iconNameM32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextAreaBeanInfo.iconMono32) == null) {\r\n                    JAttributeTextAreaBeanInfo.iconMono32 = loadImage(JAttributeTextAreaBeanInfo.iconNameM32);\r\n                }\r\n                return JAttributeTextAreaBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3730,'getMdescriptor()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getMdescriptor()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JAttributeTextAreaBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3731,'getMethodDescriptors()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getMethodDescriptors()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JAttributeTextAreaBeanInfo.getMdescriptor();\r\n}'),(3732,'getPdescriptor()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getPdescriptor()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JAttributeTextAreaBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3733,'getPropertyDescriptors()','org.jhotdraw.gui.JAttributeTextAreaBeanInfo.getPropertyDescriptors()','374','org.jhotdraw.gui.JAttributeTextAreaBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JAttributeTextAreaBeanInfo.getPdescriptor();\r\n}'),(3734,'-init-()','org.jhotdraw.gui.JAttributeTextField.-init-()','375','org.jhotdraw.gui.JAttributeTextField','/**\r\n * Creates new instance.\r\n */\r\npublic JAttributeTextField() {\r\n}'),(3735,'firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','org.jhotdraw.gui.JAttributeTextField.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','375','org.jhotdraw.gui.JAttributeTextField','@Override\r\nprotected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {\r\n    super.firePropertyChange(propertyName, oldValue, newValue);\r\n    if (propertyName == \"value\") {\r\n        super.firePropertyChange(AttributeEditor.ATTRIBUTE_VALUE_PROPERTY, oldValue, newValue);\r\n    }\r\n}'),(3736,'getAttributeValue()','org.jhotdraw.gui.JAttributeTextField.getAttributeValue()','375','org.jhotdraw.gui.JAttributeTextField','@SuppressWarnings(\"unchecked\")\r\npublic T getAttributeValue() {\r\n    return ((T) (getValue()));\r\n}'),(3737,'getComponent()','org.jhotdraw.gui.JAttributeTextField.getComponent()','375','org.jhotdraw.gui.JAttributeTextField','public JComponent getComponent() {\r\n    return this;\r\n}'),(3738,'getValueIsAdjusting()','org.jhotdraw.gui.JAttributeTextField.getValueIsAdjusting()','375','org.jhotdraw.gui.JAttributeTextField','public boolean getValueIsAdjusting() {\r\n    return isFocusOwner();\r\n}'),(3739,'initComponents()','org.jhotdraw.gui.JAttributeTextField.initComponents()','375','org.jhotdraw.gui.JAttributeTextField','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3740,'isMultipleValues()','org.jhotdraw.gui.JAttributeTextField.isMultipleValues()','375','org.jhotdraw.gui.JAttributeTextField','public boolean isMultipleValues() {\r\n    return isMultipleValues;\r\n}'),(3741,'paintComponent(java.awt.Graphics)','org.jhotdraw.gui.JAttributeTextField.paintComponent(java.awt.Graphics)','375','org.jhotdraw.gui.JAttributeTextField','@Override\r\nprotected void paintComponent(Graphics g) {\r\n    if ((!(isFocusOwner())) && (isMultipleValues)) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        Color c = getForeground();\r\n        setForeground(new Color(0, true));\r\n        super.paintComponent(g);\r\n        Insets insets = getInsets();\r\n        Insets margin = getMargin();\r\n        FontMetrics fm = g.getFontMetrics(getFont());\r\n        g.setFont(getFont().deriveFont(Font.ITALIC));\r\n        setForeground(c);\r\n        g.setColor(c);\r\n        g.drawString(labels.getString(\"attribute.multipleValues.text\"), ((insets.left) + (margin.left)), (((insets.top) + (margin.top)) + (fm.getAscent())));\r\n    } else {\r\n        super.paintComponent(g);\r\n    }\r\n}'),(3742,'setAttributeValue(java.lang.Object)','org.jhotdraw.gui.JAttributeTextField.setAttributeValue(java.lang.Object)','375','org.jhotdraw.gui.JAttributeTextField','public void setAttributeValue(T newValue) {\r\n    setValue(newValue);\r\n}'),(3743,'setMultipleValues(boolean)','org.jhotdraw.gui.JAttributeTextField.setMultipleValues(boolean)','375','org.jhotdraw.gui.JAttributeTextField','public void setMultipleValues(boolean newValue) {\r\n    isMultipleValues = newValue;\r\n    repaint();\r\n}'),(3744,'-init-()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.-init-()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','JAttributeTextFieldBeanInfo() {\r\n}'),(3745,'getBdescriptor()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getBdescriptor()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JAttributeTextFieldBeanInfo.beanDescriptor) == null) {\r\n        JAttributeTextFieldBeanInfo.beanDescriptor = new BeanDescriptor(JAttributeTextFieldBeanInfo.class);\r\n    }\r\n    JAttributeTextFieldBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JAttributeTextFieldBeanInfo.beanDescriptor.setDisplayName(\"JAttributeTextField\");\r\n    return JAttributeTextFieldBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3746,'getBeanDescriptor()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getBeanDescriptor()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JAttributeTextFieldBeanInfo.getBdescriptor();\r\n}'),(3747,'getDefaultEventIndex()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getDefaultEventIndex()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JAttributeTextFieldBeanInfo.defaultEventIndex;\r\n}'),(3748,'getDefaultPropertyIndex()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getDefaultPropertyIndex()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JAttributeTextFieldBeanInfo.defaultPropertyIndex;\r\n}'),(3749,'getEdescriptor()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getEdescriptor()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JAttributeTextFieldBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3750,'getEventSetDescriptors()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getEventSetDescriptors()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JAttributeTextFieldBeanInfo.getEdescriptor();\r\n}'),(3751,'getIcon(int)','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getIcon(int)','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JAttributeTextFieldBeanInfo.iconNameC16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextFieldBeanInfo.iconColor16) == null) {\r\n                    JAttributeTextFieldBeanInfo.iconColor16 = loadImage(JAttributeTextFieldBeanInfo.iconNameC16);\r\n                }\r\n                return JAttributeTextFieldBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JAttributeTextFieldBeanInfo.iconNameC32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextFieldBeanInfo.iconColor32) == null) {\r\n                    JAttributeTextFieldBeanInfo.iconColor32 = loadImage(JAttributeTextFieldBeanInfo.iconNameC32);\r\n                }\r\n                return JAttributeTextFieldBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JAttributeTextFieldBeanInfo.iconNameM16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextFieldBeanInfo.iconMono16) == null) {\r\n                    JAttributeTextFieldBeanInfo.iconMono16 = loadImage(JAttributeTextFieldBeanInfo.iconNameM16);\r\n                }\r\n                return JAttributeTextFieldBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JAttributeTextFieldBeanInfo.iconNameM32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JAttributeTextFieldBeanInfo.iconMono32) == null) {\r\n                    JAttributeTextFieldBeanInfo.iconMono32 = loadImage(JAttributeTextFieldBeanInfo.iconNameM32);\r\n                }\r\n                return JAttributeTextFieldBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3752,'getMdescriptor()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getMdescriptor()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JAttributeTextFieldBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3753,'getMethodDescriptors()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getMethodDescriptors()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JAttributeTextFieldBeanInfo.getMdescriptor();\r\n}'),(3754,'getPdescriptor()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getPdescriptor()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JAttributeTextFieldBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3755,'getPropertyDescriptors()','org.jhotdraw.gui.JAttributeTextFieldBeanInfo.getPropertyDescriptors()','376','org.jhotdraw.gui.JAttributeTextFieldBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JAttributeTextFieldBeanInfo.getPdescriptor();\r\n}'),(3756,'-init-()','org.jhotdraw.gui.JDisclosureToolBar.-init-()','377','org.jhotdraw.gui.JDisclosureToolBar','/**\r\n * Creates new form.\r\n */\r\npublic JDisclosureToolBar() {\r\n    setUI(PaletteToolBarUI.createUI(this));\r\n    initComponents();\r\n}'),(3757,'getDisclosedComponent(int)','org.jhotdraw.gui.JDisclosureToolBar.getDisclosedComponent(int)','377','org.jhotdraw.gui.JDisclosureToolBar','protected JComponent getDisclosedComponent(int state) {\r\n    return new JLabel(Integer.toString(state));\r\n}'),(3758,'getDisclosureState()','org.jhotdraw.gui.JDisclosureToolBar.getDisclosureState()','377','org.jhotdraw.gui.JDisclosureToolBar','public int getDisclosureState() {\r\n    Integer value = ((Integer) (disclosureButton.getClientProperty(DisclosureIcon.CURRENT_STATE_PROPERTY)));\r\n    return value == null ? 1 : value;\r\n}'),(3759,'getDisclosureStateCount()','org.jhotdraw.gui.JDisclosureToolBar.getDisclosureStateCount()','377','org.jhotdraw.gui.JDisclosureToolBar','public int getDisclosureStateCount() {\r\n    Integer value = ((Integer) (disclosureButton.getClientProperty(DisclosureIcon.STATE_COUNT_PROPERTY)));\r\n    return value == null ? 2 : value;\r\n}'),(3760,'initComponents()','org.jhotdraw.gui.JDisclosureToolBar.initComponents()','377','org.jhotdraw.gui.JDisclosureToolBar','private void initComponents() {\r\n    GridBagConstraints gbc;\r\n    AbstractButton btn;\r\n    setLayout(new GridBagLayout());\r\n    gbc = new GridBagConstraints();\r\n    if ((disclosureButton) == null) {\r\n        btn = new JButton();\r\n        btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n        btn.setBorderPainted(false);\r\n        btn.setIcon(new DisclosureIcon());\r\n        btn.setOpaque(false);\r\n        disclosureButton = ((JButton) (btn));\r\n        disclosureButton.putClientProperty(DisclosureIcon.CURRENT_STATE_PROPERTY, 1);\r\n        disclosureButton.putClientProperty(DisclosureIcon.STATE_COUNT_PROPERTY, 2);\r\n        disclosureButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                int newState = (((Integer) (disclosureButton.getClientProperty(DisclosureIcon.CURRENT_STATE_PROPERTY))) + 1) % ((Integer) (disclosureButton.getClientProperty(DisclosureIcon.STATE_COUNT_PROPERTY)));\r\n                setDisclosureState(newState);\r\n            }\r\n        });\r\n    } else {\r\n        btn = disclosureButton;\r\n    }\r\n    gbc.gridx = 0;\r\n    gbc.insets = new Insets(0, 1, 0, 1);\r\n    gbc.anchor = GridBagConstraints.SOUTHWEST;\r\n    gbc.fill = GridBagConstraints.NONE;\r\n    gbc.weighty = 1.0;\r\n    gbc.weightx = 1.0;\r\n    add(btn, gbc);\r\n    putClientProperty(PaletteToolBarUI.TOOLBAR_INSETS_OVERRIDE_PROPERTY, new Insets(0, 0, 0, 0));\r\n    putClientProperty(PaletteToolBarUI.TOOLBAR_ICON_PROPERTY, new EmptyIcon(10, 8));\r\n}'),(3761,'setDisclosureState(int)','org.jhotdraw.gui.JDisclosureToolBar.setDisclosureState(int)','377','org.jhotdraw.gui.JDisclosureToolBar','public void setDisclosureState(int newValue) {\r\n    int oldValue = getDisclosureState();\r\n    disclosureButton.putClientProperty(DisclosureIcon.CURRENT_STATE_PROPERTY, newValue);\r\n    removeAll();\r\n    JComponent c = getDisclosedComponent(newValue);\r\n    GridBagLayout layout = ((GridBagLayout) (getLayout()));\r\n    GridBagConstraints gbc = new GridBagConstraints();\r\n    if (c != null) {\r\n        gbc = new GridBagConstraints();\r\n        gbc.gridx = 1;\r\n        gbc.weightx = 1.0;\r\n        gbc.weighty = 1.0;\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n        gbc.anchor = GridBagConstraints.WEST;\r\n        add(c, gbc);\r\n        gbc = new GridBagConstraints();\r\n        gbc.gridx = 0;\r\n        gbc.weightx = 0.0;\r\n        gbc.insets = new Insets(0, 1, 0, 1);\r\n        gbc.weighty = 1.0;\r\n        gbc.fill = GridBagConstraints.NONE;\r\n        gbc.anchor = GridBagConstraints.SOUTHWEST;\r\n        add(disclosureButton, gbc);\r\n    } else {\r\n        gbc = new GridBagConstraints();\r\n        gbc.gridx = 1;\r\n        gbc.weightx = 1.0;\r\n        gbc.weighty = 1.0;\r\n        gbc.fill = GridBagConstraints.NONE;\r\n        gbc.anchor = GridBagConstraints.SOUTHWEST;\r\n        gbc.insets = new Insets(0, 1, 0, 1);\r\n        add(disclosureButton, gbc);\r\n    }\r\n    invalidate();\r\n    Container parent = getParent();\r\n    while (((parent.getParent()) != null) && (!(parent.getParent().isValid()))) {\r\n        parent = parent.getParent();\r\n    } \r\n    parent.validate();\r\n    repaint();\r\n    firePropertyChange(JDisclosureToolBar.DISCLOSURE_STATE_PROPERTY, oldValue, newValue);\r\n}'),(3762,'setDisclosureStateCount(int)','org.jhotdraw.gui.JDisclosureToolBar.setDisclosureStateCount(int)','377','org.jhotdraw.gui.JDisclosureToolBar','public void setDisclosureStateCount(int newValue) {\r\n    int oldValue = getDisclosureStateCount();\r\n    disclosureButton.putClientProperty(DisclosureIcon.STATE_COUNT_PROPERTY, newValue);\r\n    firePropertyChange(JDisclosureToolBar.DISCLOSURE_STATE_COUNT_PROPERTY, oldValue, newValue);\r\n}'),(3763,'-init-()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.-init-()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','JDisclosureToolBarBeanInfo() {\r\n}'),(3764,'getBdescriptor()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getBdescriptor()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JDisclosureToolBarBeanInfo.beanDescriptor) == null)\r\n        JDisclosureToolBarBeanInfo.beanDescriptor = new BeanDescriptor(JDisclosureToolBarBeanInfo.class);\r\n\r\n    JDisclosureToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JDisclosureToolBarBeanInfo.beanDescriptor.setDisplayName(\"JDisclosureToolBar\");\r\n    return JDisclosureToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3765,'getBeanDescriptor()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getBeanDescriptor()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JDisclosureToolBarBeanInfo.getBdescriptor();\r\n}'),(3766,'getDefaultEventIndex()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getDefaultEventIndex()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JDisclosureToolBarBeanInfo.defaultEventIndex;\r\n}'),(3767,'getDefaultPropertyIndex()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getDefaultPropertyIndex()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JDisclosureToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(3768,'getEdescriptor()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getEdescriptor()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JDisclosureToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3769,'getEventSetDescriptors()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getEventSetDescriptors()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JDisclosureToolBarBeanInfo.getEdescriptor();\r\n}'),(3770,'getIcon(int)','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getIcon(int)','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JDisclosureToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((JDisclosureToolBarBeanInfo.iconColor16) == null)\r\n                    JDisclosureToolBarBeanInfo.iconColor16 = loadImage(JDisclosureToolBarBeanInfo.iconNameC16);\r\n\r\n                return JDisclosureToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JDisclosureToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((JDisclosureToolBarBeanInfo.iconColor32) == null)\r\n                    JDisclosureToolBarBeanInfo.iconColor32 = loadImage(JDisclosureToolBarBeanInfo.iconNameC32);\r\n\r\n                return JDisclosureToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JDisclosureToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((JDisclosureToolBarBeanInfo.iconMono16) == null)\r\n                    JDisclosureToolBarBeanInfo.iconMono16 = loadImage(JDisclosureToolBarBeanInfo.iconNameM16);\r\n\r\n                return JDisclosureToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JDisclosureToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((JDisclosureToolBarBeanInfo.iconMono32) == null)\r\n                    JDisclosureToolBarBeanInfo.iconMono32 = loadImage(JDisclosureToolBarBeanInfo.iconNameM32);\r\n\r\n                return JDisclosureToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3771,'getMdescriptor()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getMdescriptor()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JDisclosureToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3772,'getMethodDescriptors()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getMethodDescriptors()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JDisclosureToolBarBeanInfo.getMdescriptor();\r\n}'),(3773,'getPdescriptor()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getPdescriptor()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JDisclosureToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3774,'getPropertyDescriptors()','org.jhotdraw.gui.JDisclosureToolBarBeanInfo.getPropertyDescriptors()','378','org.jhotdraw.gui.JDisclosureToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JDisclosureToolBarBeanInfo.getPdescriptor();\r\n}'),(3775,'-init-()','org.jhotdraw.gui.JFontChooser.-init-()','379','org.jhotdraw.gui.JFontChooser','1() {\r\n}'),(3776,'addActionListener(java.awt.event.ActionListener)','org.jhotdraw.gui.JFontChooser.addActionListener(java.awt.event.ActionListener)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Adds an <code>ActionListener</code> to the font chooser.\r\n *\r\n * @param l\r\n * 		the listener to be added\r\n * @see #approveSelection\r\n * @see #cancelSelection\r\n */\r\npublic void addActionListener(ActionListener l) {\r\n    listenerList.add(ActionListener.class, l);\r\n}'),(3777,'approveSelection()','org.jhotdraw.gui.JFontChooser.approveSelection()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Called by the UI when the user hits the Approve button\r\n * (labeled \"Open\" or \"Save\", by default). This can also be\r\n * called by the programmer.\r\n * This method causes an action event to fire\r\n * with the command string equal to\r\n * <code>APPROVE_SELECTION</code>.\r\n *\r\n * @see #APPROVE_SELECTION\r\n */\r\npublic void approveSelection() {\r\n    returnValue = JFontChooser.APPROVE_OPTION;\r\n    if ((dialog) != null) {\r\n        dialog.setVisible(false);\r\n    }\r\n    fireActionPerformed(JFontChooser.APPROVE_SELECTION);\r\n}'),(3778,'cancelSelection()','org.jhotdraw.gui.JFontChooser.cancelSelection()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Called by the UI when the user chooses the Cancel button.\r\n * This can also be called by the programmer.\r\n * This method causes an action event to fire\r\n * with the command string equal to\r\n * <code>CANCEL_SELECTION</code>.\r\n *\r\n * @see #CANCEL_SELECTION\r\n */\r\npublic void cancelSelection() {\r\n    returnValue = JFontChooser.CANCEL_OPTION;\r\n    if ((dialog) != null) {\r\n        dialog.setVisible(false);\r\n    }\r\n    fireActionPerformed(JFontChooser.CANCEL_SELECTION);\r\n}'),(3779,'fireActionPerformed(java.lang.String)','org.jhotdraw.gui.JFontChooser.fireActionPerformed(java.lang.String)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Notifies all listeners that have registered interest for\r\n * notification on this event type. The event instance\r\n * is lazily created using the <code>command</code> parameter.\r\n */\r\nprotected void fireActionPerformed(String command) {\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    long mostRecentEventTime = EventQueue.getMostRecentEventTime();\r\n    int modifiers = 0;\r\n    AWTEvent currentEvent = EventQueue.getCurrentEvent();\r\n    if (currentEvent instanceof InputEvent) {\r\n        modifiers = ((InputEvent) (currentEvent)).getModifiers();\r\n    } else\r\n        if (currentEvent instanceof ActionEvent) {\r\n            modifiers = ((ActionEvent) (currentEvent)).getModifiers();\r\n        }\r\n\r\n    ActionEvent e = null;\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ActionListener.class)) {\r\n            // Lazily create the event:\r\n            if (e == null) {\r\n                e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, command, mostRecentEventTime, modifiers);\r\n            }\r\n            ((ActionListener) (listeners[(i + 1)])).actionPerformed(e);\r\n        }\r\n    }\r\n}'),(3780,'getAllFonts()','org.jhotdraw.gui.JFontChooser.getAllFonts()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Gets all fonts from the graphics environment. This may take a long\r\n * time. It is recommended to call loadAllFonts during the startup\r\n * of an application. If you do this, you can retrieve the fonts from\r\n * this method from the AWT Event Dispatcher Thread.\r\n *\r\n * @return All fonts.\r\n */\r\npublic static synchronized Font[] getAllFonts() {\r\n    JFontChooser.loadAllFonts();\r\n    try {\r\n        return JFontChooser.future.get().clone();\r\n    } catch (InterruptedException ex) {\r\n        return new Font[0];\r\n    } catch (ExecutionException ex) {\r\n        return new Font[0];\r\n    }\r\n}'),(3781,'getModel()','org.jhotdraw.gui.JFontChooser.getModel()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Gets the selected Font.\r\n * This is a bound property.\r\n *\r\n * @return The selected font, or null, if no font is selected.\r\n */\r\npublic FontChooserModel getModel() {\r\n    return model;\r\n}'),(3782,'getSelectedFont()','org.jhotdraw.gui.JFontChooser.getSelectedFont()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Gets the selected Font.\r\n * This is a bound property.\r\n *\r\n * @return The selected font, or null, if no font is selected.\r\n */\r\npublic Font getSelectedFont() {\r\n    return selectedFont;\r\n}'),(3783,'getSelectionPath()','org.jhotdraw.gui.JFontChooser.getSelectionPath()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Gets the selected Font.\r\n * This is a bound property.\r\n *\r\n * @return The selected font, or null, if no font is selected.\r\n */\r\npublic TreePath getSelectionPath() {\r\n    return selectionPath;\r\n}'),(3784,'getUI()','org.jhotdraw.gui.JFontChooser.getUI()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Returns the look and feel (L&F) object that renders this component.\r\n *\r\n * @return the PanelUI object that renders this component\r\n * @since 1.4\r\n */\r\npublic FontChooserUI getUI() {\r\n    return ((FontChooserUI) (ui));\r\n}'),(3785,'getUIClassID()','org.jhotdraw.gui.JFontChooser.getUIClassID()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Returns a string that specifies the name of the L&F class\r\n * that renders this component.\r\n *\r\n * @return \"FontChooserUI\"\r\n * @see JComponent#getUIClassID\r\n * @see UIDefaults#getUI\r\n */\r\n@Override\r\npublic String getUIClassID() {\r\n    return JFontChooser.uiClassID;\r\n}'),(3786,'loadAllFonts()','org.jhotdraw.gui.JFontChooser.loadAllFonts()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Starts loading all fonts from the local graphics environment\r\n * using a worker thread.\r\n */\r\npublic static synchronized void loadAllFonts() {\r\n    if ((JFontChooser.future) == null) {\r\n        JFontChooser.future = new FutureTask<Font[]>(new Callable<Font[]>() {\r\n            public Font[] call() throws Exception {\r\n                long start = System.currentTimeMillis();\r\n                Font[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();\r\n                long end = System.currentTimeMillis();\r\n                // System.out.println(\"JFontChooser has loaded all fonts. Elapsed:\"+(end-start));\r\n                // get rid of bogus fonts\r\n                ArrayList<Font> goodFonts = new ArrayList<Font>(fonts.length);\r\n                for (Font f : fonts) {\r\n                    Font decoded = Font.decode(f.getFontName());\r\n                    if ((decoded.getFontName().equals(f.getFontName())) || (decoded.getFontName().endsWith(\"-Derived\"))) {\r\n                        goodFonts.add(f);\r\n                    }\r\n                }\r\n                return goodFonts.toArray(new Font[goodFonts.size()]);\r\n                // return fonts;\r\n            }\r\n        });\r\n        new Thread(JFontChooser.future).start();\r\n    }\r\n}'),(3787,'removeActionListener(java.awt.event.ActionListener)','org.jhotdraw.gui.JFontChooser.removeActionListener(java.awt.event.ActionListener)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Removes an <code>ActionListener</code> from the font chooser.\r\n *\r\n * @param l\r\n * 		the listener to be removed\r\n * @see #addActionListener\r\n */\r\npublic void removeActionListener(ActionListener l) {\r\n    listenerList.remove(ActionListener.class, l);\r\n}'),(3788,'setModel(org.jhotdraw.gui.fontchooser.FontChooserModel)','org.jhotdraw.gui.JFontChooser.setModel(org.jhotdraw.gui.fontchooser.FontChooserModel)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Sets the selected Font.\r\n * This is a bound property.\r\n *\r\n * @param newValue\r\n * 		The new selected font, or null if no font is to be\r\n * 		selected..\r\n */\r\npublic void setModel(FontChooserModel newValue) {\r\n    FontChooserModel oldValue = model;\r\n    if (oldValue != null) {\r\n        oldValue.removeTreeModelListener(modelHandler);\r\n    }\r\n    this.model = newValue;\r\n    if (newValue != null) {\r\n        newValue.addTreeModelListener(modelHandler);\r\n    }\r\n    firePropertyChange(JFontChooser.MODEL_PROPERTY, oldValue, newValue);\r\n    updateSelectionPath(selectedFont);\r\n}'),(3789,'setSelectedFont(java.awt.Font)','org.jhotdraw.gui.JFontChooser.setSelectedFont(java.awt.Font)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Sets the selected Font.\r\n * <p>\r\n * Changing the selected font, causes a change of the\r\n * selection path, if the selected font is not the last\r\n * path segment of the selection path.\r\n *\r\n * This is a bound property.\r\n *\r\n * @param newValue\r\n * 		The new selected font, or null if no font is to be\r\n * 		selected.\r\n */\r\npublic void setSelectedFont(Font newValue) {\r\n    Font oldValue = selectedFont;\r\n    this.selectedFont = newValue;\r\n    firePropertyChange(JFontChooser.SELECTED_FONT_PROPERTY, oldValue, newValue);\r\n    updateSelectionPath(newValue);\r\n}'),(3790,'setSelectionPath(javax.swing.tree.TreePath)','org.jhotdraw.gui.JFontChooser.setSelectionPath(javax.swing.tree.TreePath)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Sets the selected Font.\r\n * This is a bound property.\r\n * <p>\r\n * Changing the selection path, causes a change of the\r\n * selected font, if the selected font is not the last\r\n * path segment of the selection path.\r\n *\r\n * @param newValue\r\n * 		The new selected font, or null if no font is to be\r\n * 		selected..\r\n */\r\npublic void setSelectionPath(TreePath newValue) {\r\n    TreePath oldValue = selectionPath;\r\n    this.selectionPath = newValue;\r\n    firePropertyChange(JFontChooser.SELECTION_PATH_PROPERTY, oldValue, newValue);\r\n    if (((selectionPath) != null) && ((selectionPath.getPathCount()) == 4)) {\r\n        setSelectedFont(((FontFaceNode) (selectionPath.getLastPathComponent())).getFont());\r\n    }\r\n}'),(3791,'setUI(org.jhotdraw.gui.plaf.FontChooserUI)','org.jhotdraw.gui.JFontChooser.setUI(org.jhotdraw.gui.plaf.FontChooserUI)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Sets the look and feel (L&F) object that renders this component.\r\n *\r\n * @param ui\r\n * 		the PanelUI L&F object\r\n * @see UIDefaults#getUI\r\n */\r\npublic void setUI(FontChooserUI ui) {\r\n    super.setUI(ui);\r\n}'),(3792,'updateSelectionPath(java.awt.Font)','org.jhotdraw.gui.JFontChooser.updateSelectionPath(java.awt.Font)','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Updates the selection path to the selected font.\r\n * <p>\r\n * This method is invoked, when a font is selected, and when then\r\n * structure of the model has changed.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\nprotected void updateSelectionPath(Font newValue) {\r\n    if ((((newValue == null) || ((selectionPath) == null)) || ((selectionPath.getPathCount()) != 4)) || (!(((FontFaceNode) (selectionPath.getLastPathComponent())).getFont().getFontName().equals(newValue.getFontName())))) {\r\n        if (newValue == null) {\r\n            setSelectionPath(null);\r\n        } else {\r\n            TreePath path = selectionPath;\r\n            FontCollectionNode oldCollection = ((path != null) && ((path.getPathCount()) > 1)) ? ((FontCollectionNode) (path.getPathComponent(1))) : null;\r\n            FontFamilyNode oldFamily = ((path != null) && ((path.getPathCount()) > 2)) ? ((FontFamilyNode) (path.getPathComponent(2))) : null;\r\n            FontFaceNode oldFace = ((path != null) && ((path.getPathCount()) > 3)) ? ((FontFaceNode) (path.getPathComponent(3))) : null;\r\n            FontCollectionNode newCollection = oldCollection;\r\n            FontFamilyNode newFamily = oldFamily;\r\n            FontFaceNode newFace = null;\r\n            // search in the current family\r\n            if ((newFace == null) && (newFamily != null)) {\r\n                for (FontFaceNode face : newFamily.faces()) {\r\n                    if (face.getFont().getFontName().equals(newValue.getFontName())) {\r\n                        newFace = face;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // search in the current collection\r\n            if ((newFace == null) && (newCollection != null)) {\r\n                for (FontFamilyNode family : newCollection.families()) {\r\n                    for (FontFaceNode face : family.faces()) {\r\n                        if (face.getFont().getFontName().equals(newValue.getFontName())) {\r\n                            newFamily = family;\r\n                            newFace = face;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // search in all collections\r\n            if (newFace == null) {\r\n                TreeNode root = ((TreeNode) (getModel().getRoot()));\r\n                OuterLoop : for (int i = 0, n = root.getChildCount(); i < n; i++) {\r\n                    FontCollectionNode collection = ((FontCollectionNode) (root.getChildAt(i)));\r\n                    for (FontFamilyNode family : collection.families()) {\r\n                        for (FontFaceNode face : family.faces()) {\r\n                            if (face.getFont().getFontName().equals(newValue.getFontName())) {\r\n                                newCollection = collection;\r\n                                newFamily = family;\r\n                                newFace = face;\r\n                                break OuterLoop;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (newFace != null) {\r\n                setSelectionPath(new TreePath(new Object[]{ getModel().getRoot(), newCollection, newFamily, newFace }));\r\n            } else {\r\n                setSelectionPath(null);\r\n            }\r\n        }\r\n    }\r\n}'),(3793,'updateUI()','org.jhotdraw.gui.JFontChooser.updateUI()','379','org.jhotdraw.gui.JFontChooser','/**\r\n * Resets the UI property with a value from the current look and feel.\r\n *\r\n * @see JComponent#updateUI\r\n */\r\n@Override\r\npublic void updateUI() {\r\n    // Try to get a browser UI from the UIManager.\r\n    // Fall back to BasicBrowserUI, if none is available.\r\n    if ((UIManager.get(getUIClassID())) != null) {\r\n        setUI(((FontChooserUI) (UIManager.getUI(this))));\r\n    } else {\r\n        setUI(PaletteFontChooserUI.createUI(this));\r\n    }\r\n}'),(3794,'-init-()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.-init-()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','JLifeFormattedTexAreaBeanInfo() {\r\n}'),(3795,'getBdescriptor()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getBdescriptor()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JLifeFormattedTexAreaBeanInfo.beanDescriptor) == null) {\r\n        JLifeFormattedTexAreaBeanInfo.beanDescriptor = new BeanDescriptor(JLifeFormattedTexAreaBeanInfo.class);\r\n    }\r\n    JLifeFormattedTexAreaBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JLifeFormattedTexAreaBeanInfo.beanDescriptor.setDisplayName(\"JLifeFormattedTextArea\");\r\n    return JLifeFormattedTexAreaBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3796,'getBeanDescriptor()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getBeanDescriptor()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JLifeFormattedTexAreaBeanInfo.getBdescriptor();\r\n}'),(3797,'getDefaultEventIndex()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getDefaultEventIndex()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JLifeFormattedTexAreaBeanInfo.defaultEventIndex;\r\n}'),(3798,'getDefaultPropertyIndex()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getDefaultPropertyIndex()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JLifeFormattedTexAreaBeanInfo.defaultPropertyIndex;\r\n}'),(3799,'getEdescriptor()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getEdescriptor()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JLifeFormattedTexAreaBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3800,'getEventSetDescriptors()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getEventSetDescriptors()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JLifeFormattedTexAreaBeanInfo.getEdescriptor();\r\n}'),(3801,'getIcon(int)','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getIcon(int)','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JLifeFormattedTexAreaBeanInfo.iconNameC16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTexAreaBeanInfo.iconColor16) == null) {\r\n                    JLifeFormattedTexAreaBeanInfo.iconColor16 = loadImage(JLifeFormattedTexAreaBeanInfo.iconNameC16);\r\n                }\r\n                return JLifeFormattedTexAreaBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JLifeFormattedTexAreaBeanInfo.iconNameC32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTexAreaBeanInfo.iconColor32) == null) {\r\n                    JLifeFormattedTexAreaBeanInfo.iconColor32 = loadImage(JLifeFormattedTexAreaBeanInfo.iconNameC32);\r\n                }\r\n                return JLifeFormattedTexAreaBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JLifeFormattedTexAreaBeanInfo.iconNameM16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTexAreaBeanInfo.iconMono16) == null) {\r\n                    JLifeFormattedTexAreaBeanInfo.iconMono16 = loadImage(JLifeFormattedTexAreaBeanInfo.iconNameM16);\r\n                }\r\n                return JLifeFormattedTexAreaBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JLifeFormattedTexAreaBeanInfo.iconNameM32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTexAreaBeanInfo.iconMono32) == null) {\r\n                    JLifeFormattedTexAreaBeanInfo.iconMono32 = loadImage(JLifeFormattedTexAreaBeanInfo.iconNameM32);\r\n                }\r\n                return JLifeFormattedTexAreaBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3802,'getMdescriptor()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getMdescriptor()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JLifeFormattedTexAreaBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3803,'getMethodDescriptors()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getMethodDescriptors()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JLifeFormattedTexAreaBeanInfo.getMdescriptor();\r\n}'),(3804,'getPdescriptor()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getPdescriptor()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JLifeFormattedTexAreaBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3805,'getPropertyDescriptors()','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo.getPropertyDescriptors()','380','org.jhotdraw.gui.JLifeFormattedTexAreaBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JLifeFormattedTexAreaBeanInfo.getPdescriptor();\r\n}'),(3806,'-init-()','org.jhotdraw.gui.JLifeFormattedTextArea.-init-()','381','org.jhotdraw.gui.JLifeFormattedTextArea','/**\r\n * Creates new instance.\r\n */\r\npublic JLifeFormattedTextArea() {\r\n}'),(3807,'getFormatterFactory()','org.jhotdraw.gui.JLifeFormattedTextArea.getFormatterFactory()','381','org.jhotdraw.gui.JLifeFormattedTextArea','public JFormattedTextField.AbstractFormatterFactory getFormatterFactory() {\r\n    return formattedTextFieldAdapter.getFormatterFactory();\r\n}'),(3808,'getValue()','org.jhotdraw.gui.JLifeFormattedTextArea.getValue()','381','org.jhotdraw.gui.JLifeFormattedTextArea','public Object getValue() {\r\n    return formattedTextFieldAdapter.getValue();\r\n}'),(3809,'initComponents()','org.jhotdraw.gui.JLifeFormattedTextArea.initComponents()','381','org.jhotdraw.gui.JLifeFormattedTextArea','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3810,'setDocument(javax.swing.text.Document)','org.jhotdraw.gui.JLifeFormattedTextArea.setDocument(javax.swing.text.Document)','381','org.jhotdraw.gui.JLifeFormattedTextArea','@Override\r\npublic void setDocument(Document newValue) {\r\n    super.setDocument(newValue);\r\n    // We must check for null here, because setDocument is called in the\r\n    // super class constructor.\r\n    if ((formattedTextFieldAdapter) == null) {\r\n        formattedTextFieldAdapter = new JLifeFormattedTextField();\r\n        handler = new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                if (((evt.getSource()) == (formattedTextFieldAdapter))// \r\n                 && ((evt.getPropertyName()) == \"value\")) {\r\n                    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());\r\n                }\r\n            }\r\n        };\r\n        formattedTextFieldAdapter.addPropertyChangeListener(handler);\r\n    }\r\n    formattedTextFieldAdapter.setDocument(newValue);\r\n}'),(3811,'setFormatterFactory(javax.swing.JFormattedTextField$AbstractFormatterFactory)','org.jhotdraw.gui.JLifeFormattedTextArea.setFormatterFactory(javax.swing.JFormattedTextField$AbstractFormatterFactory)','381','org.jhotdraw.gui.JLifeFormattedTextArea','public void setFormatterFactory(JFormattedTextField.AbstractFormatterFactory newValue) {\r\n    formattedTextFieldAdapter.setFormatterFactory(newValue);\r\n}'),(3812,'setValue(java.lang.Object)','org.jhotdraw.gui.JLifeFormattedTextArea.setValue(java.lang.Object)','381','org.jhotdraw.gui.JLifeFormattedTextArea','public void setValue(Object value) {\r\n    formattedTextFieldAdapter.setValue(value);\r\n}'),(3813,'-init-()','org.jhotdraw.gui.JLifeFormattedTextField.-init-()','383','org.jhotdraw.gui.JLifeFormattedTextField','DocumentHandler() {\r\n}'),(3814,'getDefaultFormatterFactory(java.lang.Object)','org.jhotdraw.gui.JLifeFormattedTextField.getDefaultFormatterFactory(java.lang.Object)','383','org.jhotdraw.gui.JLifeFormattedTextField','/**\r\n * Returns an AbstractFormatterFactory suitable for the passed in\r\n * Object type.\r\n */\r\nprivate JFormattedTextField.AbstractFormatterFactory getDefaultFormatterFactory(Object type) {\r\n    if (type instanceof DateFormat) {\r\n        return new DefaultFormatterFactory(new DateFormatter(((DateFormat) (type))));\r\n    }\r\n    if (type instanceof NumberFormat) {\r\n        return new DefaultFormatterFactory(new NumberFormatter(((NumberFormat) (type))));\r\n    }\r\n    if (type instanceof Format) {\r\n        return new DefaultFormatterFactory(new InternationalFormatter(((Format) (type))));\r\n    }\r\n    if (type instanceof Date) {\r\n        return new DefaultFormatterFactory(new DateFormatter());\r\n    }\r\n    if (type instanceof Number) {\r\n        JFormattedTextField.AbstractFormatter displayFormatter = new NumberFormatter();\r\n        ((NumberFormatter) (displayFormatter)).setValueClass(type.getClass());\r\n        JFormattedTextField.AbstractFormatter editFormatter = new NumberFormatter(new DecimalFormat(\"#.#\"));\r\n        ((NumberFormatter) (editFormatter)).setValueClass(type.getClass());\r\n        return new DefaultFormatterFactory(displayFormatter, displayFormatter, editFormatter);\r\n    }\r\n    return new DefaultFormatterFactory(new DefaultFormatter());\r\n}'),(3815,'getValue()','org.jhotdraw.gui.JLifeFormattedTextField.getValue()','383','org.jhotdraw.gui.JLifeFormattedTextField','@Override\r\npublic Object getValue() {\r\n    return value;\r\n}'),(3816,'initComponents()','org.jhotdraw.gui.JLifeFormattedTextField.initComponents()','383','org.jhotdraw.gui.JLifeFormattedTextField','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3817,'setDocument(javax.swing.text.Document)','org.jhotdraw.gui.JLifeFormattedTextField.setDocument(javax.swing.text.Document)','383','org.jhotdraw.gui.JLifeFormattedTextField','@Override\r\npublic void setDocument(Document newValue) {\r\n    Document oldValue = getDocument();\r\n    super.setDocument(newValue);\r\n    if ((documentHandler) == null) {\r\n        documentHandler = new JLifeFormattedTextField.DocumentHandler();\r\n    }\r\n    if (oldValue != null) {\r\n        oldValue.removeDocumentListener(documentHandler);\r\n    }\r\n    if (newValue != null) {\r\n        newValue.addDocumentListener(documentHandler);\r\n    }\r\n    updateValue();\r\n}'),(3818,'setValue(java.lang.Object)','org.jhotdraw.gui.JLifeFormattedTextField.setValue(java.lang.Object)','383','org.jhotdraw.gui.JLifeFormattedTextField','@Override\r\npublic void setValue(Object newValue) {\r\n    Object oldValue = this.value;\r\n    if (((oldValue != null) && (newValue != null)) && (oldValue.equals(newValue))) {\r\n        return;\r\n    }\r\n    if ((newValue != null) && ((getFormatterFactory()) == null)) {\r\n        setFormatterFactory(getDefaultFormatterFactory(newValue));\r\n    }\r\n    this.value = newValue;\r\n    firePropertyChange(\"value\", oldValue, newValue);\r\n    updateText();\r\n}'),(3819,'updateText()','org.jhotdraw.gui.JLifeFormattedTextField.updateText()','383','org.jhotdraw.gui.JLifeFormattedTextField','/**\r\n * Updates the text of the field from the value.\r\n */\r\nprotected void updateText() {\r\n    if (((updatingDepth)++) == 0) {\r\n        if ((getFormatter()) != null) {\r\n            try {\r\n                String newText = getFormatter().valueToString(getValue());\r\n                setText(newText);\r\n                if (!(isFocusOwner())) {\r\n                    // This is like selectAll(), but we set the\r\n                    // cursor at the start of the field, because\r\n                    // the start of the field contains the most\r\n                    // significant part of the field content.\r\n                    setCaretPosition(getDocument().getLength());\r\n                    moveCaretPosition(0);\r\n                }\r\n            } catch (ParseException ex) {\r\n                // ex.printStackTrace(); do nothing\r\n            }\r\n        }\r\n    }\r\n    (updatingDepth)--;\r\n}'),(3820,'updateValue()','org.jhotdraw.gui.JLifeFormattedTextField.updateValue()','383','org.jhotdraw.gui.JLifeFormattedTextField','/**\r\n * Updates the value from the text of the field.\r\n */\r\nprotected void updateValue() {\r\n    if (((updatingDepth)++) == 0) {\r\n        if ((getFormatter()) != null) {\r\n            try {\r\n                Object newValue = getFormatter().stringToValue(getText());\r\n                setValue(newValue);\r\n            } catch (ParseException ex) {\r\n                // ex.printStackTrace();// do nothing\r\n            }\r\n        }\r\n    }\r\n    (updatingDepth)--;\r\n}'),(3821,'-init-()','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler.-init-()','382','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler','DocumentHandler() {\r\n}'),(3822,'changedUpdate(javax.swing.event.DocumentEvent)','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler.changedUpdate(javax.swing.event.DocumentEvent)','382','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler','public void changedUpdate(DocumentEvent e) {\r\n    updateValue();\r\n}'),(3823,'insertUpdate(javax.swing.event.DocumentEvent)','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler.insertUpdate(javax.swing.event.DocumentEvent)','382','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler','public void insertUpdate(DocumentEvent e) {\r\n    updateValue();\r\n}'),(3824,'removeUpdate(javax.swing.event.DocumentEvent)','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler.removeUpdate(javax.swing.event.DocumentEvent)','382','org.jhotdraw.gui.JLifeFormattedTextField$DocumentHandler','public void removeUpdate(DocumentEvent e) {\r\n    updateValue();\r\n}'),(3825,'-init-()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.-init-()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','JLifeFormattedTextFieldBeanInfo() {\r\n}'),(3826,'getBdescriptor()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getBdescriptor()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JLifeFormattedTextFieldBeanInfo.beanDescriptor) == null) {\r\n        JLifeFormattedTextFieldBeanInfo.beanDescriptor = new BeanDescriptor(JLifeFormattedTextFieldBeanInfo.class);\r\n    }\r\n    JLifeFormattedTextFieldBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JLifeFormattedTextFieldBeanInfo.beanDescriptor.setDisplayName(\"JLifeFormattedTextField\");\r\n    return JLifeFormattedTextFieldBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3827,'getBeanDescriptor()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getBeanDescriptor()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JLifeFormattedTextFieldBeanInfo.getBdescriptor();\r\n}'),(3828,'getDefaultEventIndex()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getDefaultEventIndex()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JLifeFormattedTextFieldBeanInfo.defaultEventIndex;\r\n}'),(3829,'getDefaultPropertyIndex()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getDefaultPropertyIndex()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JLifeFormattedTextFieldBeanInfo.defaultPropertyIndex;\r\n}'),(3830,'getEdescriptor()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getEdescriptor()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JLifeFormattedTextFieldBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3831,'getEventSetDescriptors()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getEventSetDescriptors()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JLifeFormattedTextFieldBeanInfo.getEdescriptor();\r\n}'),(3832,'getIcon(int)','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getIcon(int)','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JLifeFormattedTextFieldBeanInfo.iconNameC16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTextFieldBeanInfo.iconColor16) == null) {\r\n                    JLifeFormattedTextFieldBeanInfo.iconColor16 = loadImage(JLifeFormattedTextFieldBeanInfo.iconNameC16);\r\n                }\r\n                return JLifeFormattedTextFieldBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JLifeFormattedTextFieldBeanInfo.iconNameC32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTextFieldBeanInfo.iconColor32) == null) {\r\n                    JLifeFormattedTextFieldBeanInfo.iconColor32 = loadImage(JLifeFormattedTextFieldBeanInfo.iconNameC32);\r\n                }\r\n                return JLifeFormattedTextFieldBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JLifeFormattedTextFieldBeanInfo.iconNameM16) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTextFieldBeanInfo.iconMono16) == null) {\r\n                    JLifeFormattedTextFieldBeanInfo.iconMono16 = loadImage(JLifeFormattedTextFieldBeanInfo.iconNameM16);\r\n                }\r\n                return JLifeFormattedTextFieldBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JLifeFormattedTextFieldBeanInfo.iconNameM32) == null) {\r\n                return null;\r\n            } else {\r\n                if ((JLifeFormattedTextFieldBeanInfo.iconMono32) == null) {\r\n                    JLifeFormattedTextFieldBeanInfo.iconMono32 = loadImage(JLifeFormattedTextFieldBeanInfo.iconNameM32);\r\n                }\r\n                return JLifeFormattedTextFieldBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3833,'getMdescriptor()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getMdescriptor()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JLifeFormattedTextFieldBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3834,'getMethodDescriptors()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getMethodDescriptors()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JLifeFormattedTextFieldBeanInfo.getMdescriptor();\r\n}'),(3835,'getPdescriptor()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getPdescriptor()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JLifeFormattedTextFieldBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3836,'getPropertyDescriptors()','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo.getPropertyDescriptors()','384','org.jhotdraw.gui.JLifeFormattedTextFieldBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JLifeFormattedTextFieldBeanInfo.getPdescriptor();\r\n}'),(3837,'-init-()','org.jhotdraw.gui.JPopupButton.-init-()','386','org.jhotdraw.gui.JPopupButton','ActionPropertyHandler() {\r\n}'),(3838,'add(javax.swing.Action)','org.jhotdraw.gui.JPopupButton.add(javax.swing.Action)','386','org.jhotdraw.gui.JPopupButton','public AbstractButton add(Action action) {\r\n    JMenuItem item = getPopupMenu().add(action);\r\n    if ((getColumnCount()) > 1) {\r\n        item.setUI(new PaletteMenuItemUI());\r\n    }\r\n    item.setFont(itemFont);\r\n    return item;\r\n}'),(3839,'add(javax.swing.JComponent)','org.jhotdraw.gui.JPopupButton.add(javax.swing.JComponent)','386','org.jhotdraw.gui.JPopupButton','public void add(JComponent submenu) {\r\n    getPopupMenu().add(submenu);\r\n}'),(3840,'add(javax.swing.JMenu)','org.jhotdraw.gui.JPopupButton.add(javax.swing.JMenu)','386','org.jhotdraw.gui.JPopupButton','public void add(JMenu submenu) {\r\n    JMenuItem item = getPopupMenu().add(submenu);\r\n    updateFont(submenu);\r\n}'),(3841,'add(javax.swing.JMenuItem)','org.jhotdraw.gui.JPopupButton.add(javax.swing.JMenuItem)','386','org.jhotdraw.gui.JPopupButton','public void add(JMenuItem item) {\r\n    getPopupMenu().add(item);\r\n    item.setFont(itemFont);\r\n}'),(3842,'addSeparator()','org.jhotdraw.gui.JPopupButton.addSeparator()','386','org.jhotdraw.gui.JPopupButton','public void addSeparator() {\r\n    getPopupMenu().addSeparator();\r\n}'),(3843,'getColumnCount()','org.jhotdraw.gui.JPopupButton.getColumnCount()','386','org.jhotdraw.gui.JPopupButton','public int getColumnCount() {\r\n    return columnCount;\r\n}'),(3844,'getPopupAnchor()','org.jhotdraw.gui.JPopupButton.getPopupAnchor()','386','org.jhotdraw.gui.JPopupButton','/**\r\n * Gets the popup anchor.\r\n *\r\n * @return SwingConstants.SOUTH_WEST or SOUTH_EAST.\r\n */\r\npublic int getPopupAnchor() {\r\n    return popupAnchor;\r\n}'),(3845,'getPopupMenu()','org.jhotdraw.gui.JPopupButton.getPopupMenu()','386','org.jhotdraw.gui.JPopupButton','public JPopupMenu getPopupMenu() {\r\n    if ((popupMenu) == null) {\r\n        popupMenu = new JPopupMenu();\r\n        popupMenu.setLayout(new VerticalGridLayout(0, getColumnCount()));\r\n    }\r\n    return popupMenu;\r\n}'),(3846,'handleMousePressed(java.awt.event.MouseEvent)','org.jhotdraw.gui.JPopupButton.handleMousePressed(java.awt.event.MouseEvent)','386','org.jhotdraw.gui.JPopupButton','private void handleMousePressed(MouseEvent evt) {\r\n    // GEN-FIRST:event_handleMousePressed\r\n    showPopup(evt);\r\n}// GEN-LAST:event_handleMousePressed\r\n'),(3847,'initComponents()','org.jhotdraw.gui.JPopupButton.initComponents()','386','org.jhotdraw.gui.JPopupButton','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    addMouseListener(new MouseAdapter() {\r\n        public void mousePressed(MouseEvent evt) {\r\n            handleMousePressed(evt);\r\n        }\r\n\r\n        public void mouseReleased(MouseEvent evt) {\r\n            performAction(evt);\r\n        }\r\n    });\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(3848,'performAction(java.awt.event.MouseEvent)','org.jhotdraw.gui.JPopupButton.performAction(java.awt.event.MouseEvent)','386','org.jhotdraw.gui.JPopupButton','private void performAction(MouseEvent evt) {\r\n    // GEN-FIRST:event_performAction\r\n    // Add your handling code here:\r\n    if (((actionArea) != null) && (actionArea.contains(((evt.getX()) - (getInsets().left)), ((evt.getY()) - (getInsets().top))))) {\r\n        action.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null, evt.getWhen(), evt.getModifiers()));\r\n    }\r\n}// GEN-LAST:event_performAction\r\n'),(3849,'setAction(javax.swing.Action,java.awt.Rectangle)','org.jhotdraw.gui.JPopupButton.setAction(javax.swing.Action,java.awt.Rectangle)','386','org.jhotdraw.gui.JPopupButton','public void setAction(Action action, Rectangle actionArea) {\r\n    if ((this.action) != null) {\r\n        this.action.removePropertyChangeListener(actionPropertyHandler);\r\n    }\r\n    this.action = action;\r\n    this.actionArea = actionArea;\r\n    if (action != null) {\r\n        action.addPropertyChangeListener(actionPropertyHandler);\r\n    }\r\n}'),(3850,'setColumnCount(int,boolean)','org.jhotdraw.gui.JPopupButton.setColumnCount(int,boolean)','386','org.jhotdraw.gui.JPopupButton','public void setColumnCount(int count, boolean isVertical) {\r\n    columnCount = count;\r\n    getPopupMenu().setLayout(new VerticalGridLayout(0, getColumnCount(), isVertical));\r\n}'),(3851,'setItemFont(java.awt.Font)','org.jhotdraw.gui.JPopupButton.setItemFont(java.awt.Font)','386','org.jhotdraw.gui.JPopupButton','public void setItemFont(Font newValue) {\r\n    itemFont = newValue;\r\n    if ((popupMenu) != null) {\r\n        updateFont(popupMenu);\r\n    }\r\n}'),(3852,'setPopupAnchor(int)','org.jhotdraw.gui.JPopupButton.setPopupAnchor(int)','386','org.jhotdraw.gui.JPopupButton','/**\r\n * Sets the popup anchor.\r\n * <p>\r\n * <ul>\r\n * <li>SOUTH_WEST places the popup below the button and aligns it with its\r\n * left bound.</li>\r\n * <li>SOUTH_EAST places the popup below the button and aligns it with its\r\n * right bound.</li>\r\n * </ul>\r\n *\r\n * @param newValue\r\n * 		SwingConstants.SOUTH_WEST or SOUTH_EAST.\r\n */\r\npublic void setPopupAnchor(int newValue) {\r\n    popupAnchor = newValue;\r\n}'),(3853,'setPopupMenu(javax.swing.JPopupMenu)','org.jhotdraw.gui.JPopupButton.setPopupMenu(javax.swing.JPopupMenu)','386','org.jhotdraw.gui.JPopupButton','public void setPopupMenu(JPopupMenu popupMenu) {\r\n    this.popupMenu = popupMenu;\r\n}'),(3854,'showPopup(java.awt.event.MouseEvent)','org.jhotdraw.gui.JPopupButton.showPopup(java.awt.event.MouseEvent)','386','org.jhotdraw.gui.JPopupButton','protected void showPopup(MouseEvent evt) {\r\n    // Add your handling code here:\r\n    if (((popupMenu) != null) && (((actionArea) == null) || (!(actionArea.contains(((evt.getX()) - (getInsets().left)), ((evt.getY()) - (getInsets().top))))))) {\r\n        int x;\r\n        int y;\r\n        switch (popupAnchor) {\r\n            case SwingConstants.SOUTH_EAST :\r\n                x = (getWidth()) - (popupMenu.getPreferredSize().width);\r\n                y = getHeight();\r\n                break;\r\n            case SwingConstants.SOUTH_WEST :\r\n            default :\r\n                x = 0;\r\n                y = getHeight();\r\n                break;\r\n        }\r\n        if ((getParent()) instanceof JToolBar) {\r\n            JToolBar toolbar = ((JToolBar) (getParent()));\r\n            if ((toolbar.getOrientation()) == (JToolBar.VERTICAL)) {\r\n                y = 0;\r\n                if ((toolbar.getX()) > (toolbar.getParent().getInsets().left)) {\r\n                    x = -(popupMenu.getPreferredSize().width);\r\n                } else {\r\n                    x = getWidth();\r\n                }\r\n            } else {\r\n                if ((toolbar.getY()) > (toolbar.getParent().getInsets().top)) {\r\n                    y = -(popupMenu.getPreferredSize().height);\r\n                }\r\n            }\r\n        }\r\n        popupMenu.show(this, x, y);\r\n        popupMenu.repaint();\r\n    }\r\n}'),(3855,'updateFont(javax.swing.MenuElement)','org.jhotdraw.gui.JPopupButton.updateFont(javax.swing.MenuElement)','386','org.jhotdraw.gui.JPopupButton','private void updateFont(MenuElement menu) {\r\n    menu.getComponent().setFont(itemFont);\r\n    for (MenuElement child : menu.getSubElements()) {\r\n        updateFont(child);\r\n    }\r\n}'),(3856,'-init-()','org.jhotdraw.gui.JPopupButton$ActionPropertyHandler.-init-()','385','org.jhotdraw.gui.JPopupButton$ActionPropertyHandler','ActionPropertyHandler() {\r\n}'),(3857,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.gui.JPopupButton$ActionPropertyHandler.propertyChange(java.beans.PropertyChangeEvent)','385','org.jhotdraw.gui.JPopupButton$ActionPropertyHandler','public void propertyChange(PropertyChangeEvent evt) {\r\n    if (evt.getPropertyName().equals(\"enabled\")) {\r\n        setEnabled(((Boolean) (evt.getNewValue())).booleanValue());\r\n    } else {\r\n        repaint();\r\n    }\r\n}'),(3858,'-init-()','org.jhotdraw.gui.JPopupButtonBeanInfo.-init-()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','JPopupButtonBeanInfo() {\r\n}'),(3859,'getBdescriptor()','org.jhotdraw.gui.JPopupButtonBeanInfo.getBdescriptor()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((JPopupButtonBeanInfo.beanDescriptor) == null)\r\n        JPopupButtonBeanInfo.beanDescriptor = new BeanDescriptor(JPopupButtonBeanInfo.class);\r\n\r\n    JPopupButtonBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    JPopupButtonBeanInfo.beanDescriptor.setDisplayName(\"JPopupButton\");\r\n    return JPopupButtonBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(3860,'getBeanDescriptor()','org.jhotdraw.gui.JPopupButtonBeanInfo.getBeanDescriptor()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return JPopupButtonBeanInfo.getBdescriptor();\r\n}'),(3861,'getDefaultEventIndex()','org.jhotdraw.gui.JPopupButtonBeanInfo.getDefaultEventIndex()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return JPopupButtonBeanInfo.defaultEventIndex;\r\n}'),(3862,'getDefaultPropertyIndex()','org.jhotdraw.gui.JPopupButtonBeanInfo.getDefaultPropertyIndex()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return JPopupButtonBeanInfo.defaultPropertyIndex;\r\n}'),(3863,'getEdescriptor()','org.jhotdraw.gui.JPopupButtonBeanInfo.getEdescriptor()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return JPopupButtonBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(3864,'getEventSetDescriptors()','org.jhotdraw.gui.JPopupButtonBeanInfo.getEventSetDescriptors()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return JPopupButtonBeanInfo.getEdescriptor();\r\n}');
INSERT INTO `methods` VALUES (3865,'getIcon(int)','org.jhotdraw.gui.JPopupButtonBeanInfo.getIcon(int)','387','org.jhotdraw.gui.JPopupButtonBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((JPopupButtonBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((JPopupButtonBeanInfo.iconColor16) == null)\r\n                    JPopupButtonBeanInfo.iconColor16 = loadImage(JPopupButtonBeanInfo.iconNameC16);\r\n\r\n                return JPopupButtonBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((JPopupButtonBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((JPopupButtonBeanInfo.iconColor32) == null)\r\n                    JPopupButtonBeanInfo.iconColor32 = loadImage(JPopupButtonBeanInfo.iconNameC32);\r\n\r\n                return JPopupButtonBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((JPopupButtonBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((JPopupButtonBeanInfo.iconMono16) == null)\r\n                    JPopupButtonBeanInfo.iconMono16 = loadImage(JPopupButtonBeanInfo.iconNameM16);\r\n\r\n                return JPopupButtonBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((JPopupButtonBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((JPopupButtonBeanInfo.iconMono32) == null)\r\n                    JPopupButtonBeanInfo.iconMono32 = loadImage(JPopupButtonBeanInfo.iconNameM32);\r\n\r\n                return JPopupButtonBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(3866,'getMdescriptor()','org.jhotdraw.gui.JPopupButtonBeanInfo.getMdescriptor()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return JPopupButtonBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(3867,'getMethodDescriptors()','org.jhotdraw.gui.JPopupButtonBeanInfo.getMethodDescriptors()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return JPopupButtonBeanInfo.getMdescriptor();\r\n}'),(3868,'getPdescriptor()','org.jhotdraw.gui.JPopupButtonBeanInfo.getPdescriptor()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return JPopupButtonBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(3869,'getPropertyDescriptors()','org.jhotdraw.gui.JPopupButtonBeanInfo.getPropertyDescriptors()','387','org.jhotdraw.gui.JPopupButtonBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return JPopupButtonBeanInfo.getPdescriptor();\r\n}'),(3870,'-init-(java.awt.Frame)','org.jhotdraw.gui.JSheet.-init-(java.awt.Frame)','388','org.jhotdraw.gui.JSheet','/**\r\n * Creates a new JSheet.\r\n */\r\npublic JSheet(Frame owner) {\r\n    super(owner);\r\n    init();\r\n}'),(3871,'-init-(java.awt.Dialog)','org.jhotdraw.gui.JSheet.-init-(java.awt.Dialog)','388','org.jhotdraw.gui.JSheet','/**\r\n * Creates a new JSheet.\r\n */\r\npublic JSheet(Dialog owner) {\r\n    super(owner);\r\n    init();\r\n}'),(3872,'-init-()','org.jhotdraw.gui.JSheet.-init-()','388','org.jhotdraw.gui.JSheet','1() {\r\n}'),(3873,'addNotify()','org.jhotdraw.gui.JSheet.addNotify()','388','org.jhotdraw.gui.JSheet','public void addNotify() {\r\n    super.addNotify();\r\n    if (UIManager.getBoolean(\"Sheet.showAsSheet\")) {\r\n        // QuaquaUtilities.setWindowAlpha(this, 240);\r\n    }\r\n}'),(3874,'addSheetListener(org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.addSheetListener(org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Adds a sheet listener.\r\n */\r\npublic void addSheetListener(SheetListener l) {\r\n    listenerList.add(SheetListener.class, l);\r\n}'),(3875,'createSheet(javax.swing.JOptionPane,java.awt.Component,int)','org.jhotdraw.gui.JSheet.createSheet(javax.swing.JOptionPane,java.awt.Component,int)','388','org.jhotdraw.gui.JSheet','private static JSheet createSheet(final JOptionPane pane, Component parentComponent, int style) {\r\n    Window window = JSheet.getWindowForComponent(parentComponent);\r\n    final JSheet sheet;\r\n    if (window instanceof Frame) {\r\n        sheet = new JSheet(((Frame) (window)));\r\n    } else {\r\n        sheet = new JSheet(((Dialog) (window)));\r\n    }\r\n    JComponent contentPane = ((JComponent) (sheet.getContentPane()));\r\n    contentPane.setLayout(new BorderLayout());\r\n    if (JSheet.isNativeSheetSupported()) {\r\n        contentPane.setBorder(new EmptyBorder(12, 0, 0, 0));\r\n    }\r\n    contentPane.add(pane, BorderLayout.CENTER);\r\n    sheet.setResizable(false);\r\n    sheet.addWindowListener(new WindowAdapter() {\r\n        private boolean gotFocus = false;\r\n\r\n        int count;\r\n\r\n        public void windowClosing(WindowEvent we) {\r\n            pane.setValue(null);\r\n        }\r\n\r\n        public void windowClosed(WindowEvent we) {\r\n            if ((pane.getValue()) == (JOptionPane.UNINITIALIZED_VALUE)) {\r\n                sheet.fireOptionSelected(pane);\r\n            }\r\n        }\r\n\r\n        public void windowGainedFocus(WindowEvent we) {\r\n            // Once window gets focus, set initial focus\r\n            if (!(gotFocus)) {\r\n                // Ugly dirty hack: JOptionPane.selectInitialValue() is protected.\r\n                // So we call directly into the UI. This may cause mayhem,\r\n                // because we override the encapsulation.\r\n                // pane.selectInitialValue();\r\n                OptionPaneUI ui = pane.getUI();\r\n                if (ui != null) {\r\n                    ui.selectInitialValue(pane);\r\n                }\r\n                gotFocus = true;\r\n            }\r\n        }\r\n    });\r\n    sheet.addComponentListener(new ComponentAdapter() {\r\n        public void componentShown(ComponentEvent ce) {\r\n            // reset value to ensure closing works properly\r\n            pane.setValue(JOptionPane.UNINITIALIZED_VALUE);\r\n        }\r\n    });\r\n    pane.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent event) {\r\n            // Let the defaultCloseOperation handle the closing\r\n            // if the user closed the window without selecting a button\r\n            // (newValue = null in that case).  Otherwise, close the sheet.\r\n            if (((((sheet.isVisible()) && ((event.getSource()) == pane)) && (event.getPropertyName().equals(JOptionPane.VALUE_PROPERTY))) && ((event.getNewValue()) != null)) && ((event.getNewValue()) != (JOptionPane.UNINITIALIZED_VALUE))) {\r\n                sheet.setVisible(false);\r\n                sheet.fireOptionSelected(pane);\r\n            }\r\n        }\r\n    });\r\n    sheet.pack();\r\n    return sheet;\r\n}'),(3876,'dispose()','org.jhotdraw.gui.JSheet.dispose()','388','org.jhotdraw.gui.JSheet','public void dispose() {\r\n    super.dispose();\r\n    uninstallSheet();\r\n}'),(3877,'fireOptionSelected(javax.swing.JFileChooser,int)','org.jhotdraw.gui.JSheet.fireOptionSelected(javax.swing.JFileChooser,int)','388','org.jhotdraw.gui.JSheet','/**\r\n * Notify all listeners that have registered interest for\r\n *   notification on this event type.  The event instance\r\n *   is lazily created using the parameters passed into\r\n *   the fire method.\r\n */\r\nprotected void fireOptionSelected(JFileChooser pane, int option) {\r\n    SheetEvent sheetEvent = null;\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (SheetListener.class)) {\r\n            // Lazily create the event:\r\n            if (sheetEvent == null) {\r\n                sheetEvent = new SheetEvent(this, pane, option, null);\r\n            }\r\n            ((SheetListener) (listeners[(i + 1)])).optionSelected(sheetEvent);\r\n        }\r\n    }\r\n}'),(3878,'fireOptionSelected(javax.swing.JOptionPane)','org.jhotdraw.gui.JSheet.fireOptionSelected(javax.swing.JOptionPane)','388','org.jhotdraw.gui.JSheet','/**\r\n * Notify all listeners that have registered interest for\r\n *   notification on this event type.  The event instance\r\n *   is lazily created using the parameters passed into\r\n *   the fire method.\r\n */\r\nprotected void fireOptionSelected(JOptionPane pane) {\r\n    Object value = pane.getValue();\r\n    int option;\r\n    if (value == null) {\r\n        option = JOptionPane.CLOSED_OPTION;\r\n    } else {\r\n        if ((pane.getOptions()) == null) {\r\n            if (value instanceof Integer) {\r\n                option = ((Integer) (value)).intValue();\r\n            } else {\r\n                option = JOptionPane.CLOSED_OPTION;\r\n            }\r\n        } else {\r\n            option = JOptionPane.CLOSED_OPTION;\r\n            Object[] options = pane.getOptions();\r\n            for (int i = 0, n = options.length; i < n; i++) {\r\n                if (options[i].equals(value)) {\r\n                    option = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (option == (JOptionPane.CLOSED_OPTION)) {\r\n                value = null;\r\n            }\r\n        }\r\n    }\r\n    fireOptionSelected(pane, option, value, pane.getInputValue());\r\n}'),(3879,'fireOptionSelected(javax.swing.JOptionPane,int,java.lang.Object,java.lang.Object)','org.jhotdraw.gui.JSheet.fireOptionSelected(javax.swing.JOptionPane,int,java.lang.Object,java.lang.Object)','388','org.jhotdraw.gui.JSheet','/**\r\n * Notify all listeners that have registered interest for\r\n *   notification on this event type.  The event instance\r\n *   is lazily created using the parameters passed into\r\n *   the fire method.\r\n */\r\nprotected void fireOptionSelected(JOptionPane pane, int option, Object value, Object inputValue) {\r\n    SheetEvent sheetEvent = null;\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (SheetListener.class)) {\r\n            // Lazily create the event:\r\n            if (sheetEvent == null) {\r\n                sheetEvent = new SheetEvent(this, pane, option, value, inputValue);\r\n            }\r\n            ((SheetListener) (listeners[(i + 1)])).optionSelected(sheetEvent);\r\n        }\r\n    }\r\n}'),(3880,'getWindowForComponent(java.awt.Component)','org.jhotdraw.gui.JSheet.getWindowForComponent(java.awt.Component)','388','org.jhotdraw.gui.JSheet','/**\r\n * Returns the specified components toplevel <code>Frame</code> or\r\n * <code>Dialog</code>.\r\n *\r\n * @param parentComponent\r\n * 		the <code>Component</code> to check for a\r\n * 		<code>Frame</code> or <code>Dialog</code>\r\n * @return the <code>Frame</code> or <code>Dialog</code> that\r\ncontains the component, or the default\r\nframe if the component is <code>null</code>,\r\nor does not have a valid\r\n<code>Frame</code> or <code>Dialog</code> parent\r\n */\r\nstatic Window getWindowForComponent(Component parentComponent) {\r\n    if (parentComponent == null) {\r\n        return JOptionPane.getRootFrame();\r\n    }\r\n    if ((parentComponent instanceof Frame) || (parentComponent instanceof Dialog)) {\r\n        return ((Window) (parentComponent));\r\n    }\r\n    return JSheet.getWindowForComponent(parentComponent.getParent());\r\n}'),(3881,'hide()','org.jhotdraw.gui.JSheet.hide()','388','org.jhotdraw.gui.JSheet','public void hide() {\r\n    if (((isAnimated()) && (isShowAsSheet())) && (!(JSheet.isNativeSheetSupported()))) {\r\n        getContentPane().setVisible(false);\r\n        final Rectangle startBounds = getBounds();\r\n        int parentWidth = getParent().getWidth();\r\n        final Rectangle endBounds = new Rectangle((parentWidth < (startBounds.width) ? (startBounds.x) + (((startBounds.width) - parentWidth) / 2) : startBounds.x), startBounds.y, Math.min(startBounds.width, parentWidth), 0);\r\n        final Timer timer = new Timer(20, null);\r\n        timer.addActionListener(new ActionListener() {\r\n            long startTime;\r\n\r\n            long endTime;\r\n\r\n            public void actionPerformed(ActionEvent evt) {\r\n                long now = System.currentTimeMillis();\r\n                if ((startTime) == 0) {\r\n                    startTime = now;\r\n                    endTime = (startTime) + 200;\r\n                }\r\n                if (now > (endTime)) {\r\n                    timer.stop();\r\n                    hide0();\r\n                    setBounds(startBounds);\r\n                    getContentPane().setVisible(true);\r\n                    uninstallSheet();\r\n                } else {\r\n                    float ratio = (now - (startTime)) / ((float) ((endTime) - (startTime)));\r\n                    setBounds(((int) (((startBounds.x) * (1.0F - ratio)) + ((endBounds.x) * ratio))), ((int) (((startBounds.y) * (1.0F - ratio)) + ((endBounds.y) * ratio))), ((int) (((startBounds.width) * (1.0F - ratio)) + ((endBounds.width) * ratio))), ((int) (((startBounds.height) * (1.0F - ratio)) + ((endBounds.height) * ratio))));\r\n                }\r\n            }\r\n        });\r\n        timer.setRepeats(true);\r\n        timer.setInitialDelay(5);\r\n        timer.start();\r\n    } else {\r\n        hide0();\r\n        uninstallSheet();\r\n    }\r\n}'),(3882,'hide0()','org.jhotdraw.gui.JSheet.hide0()','388','org.jhotdraw.gui.JSheet','protected void hide0() {\r\n    JRootPane rp = null;\r\n    if ((getOwner()) instanceof JFrame) {\r\n        rp = ((JFrame) (getOwner())).getRootPane();\r\n    } else\r\n        if ((getOwner()) instanceof JDialog) {\r\n            rp = ((JDialog) (getOwner())).getRootPane();\r\n        }\r\n\r\n    if ((rp != null) && (!(JSheet.isDocumentModalitySupported()))) {\r\n        Component blockingComponent = rp.getGlassPane();\r\n        blockingComponent.setVisible(false);\r\n        if ((ownersGlassPane) != null) {\r\n            rp.setGlassPane(ownersGlassPane);\r\n            ownersGlassPane = null;\r\n        }\r\n    }\r\n    super.hide();\r\n}'),(3883,'init()','org.jhotdraw.gui.JSheet.init()','388','org.jhotdraw.gui.JSheet','private void init() {\r\n    if (((getOwner()) != null) && (isShowAsSheet())) {\r\n        if (JSheet.isNativeSheetSupported()) {\r\n            getRootPane().putClientProperty(\"apple.awt.documentModalSheet\", Boolean.TRUE);\r\n        } else {\r\n            setUndecorated(true);\r\n            getRootPane().setWindowDecorationStyle(JRootPane.NONE);\r\n            getRootPane().setBorder(UIManager.getBorder(\"Sheet.border\"));\r\n        }\r\n        if (JSheet.isDocumentModalitySupported()) {\r\n            Methods.invokeIfExistsWithEnum(this, \"setModalityType\", \"java.awt.Dialog$ModalityType\", \"DOCUMENT_MODAL\");\r\n        }\r\n    }\r\n    // We move the sheet when the user moves the owner, so that it\r\n    // will always stay centered below the title bar of the owner.\r\n    // If the user has moved the owner, we forget the shift back location,\r\n    // and dont shift the owner back to the place it was, when we opened\r\n    // the sheet.\r\n    ownerMovementHandler = new ComponentAdapter() {\r\n        public void componentMoved(ComponentEvent evt) {\r\n            Window owner = getOwner();\r\n            Point newLocation = owner.getLocation();\r\n            if (!(newLocation.equals(oldLocation))) {\r\n                setLocation(((newLocation.x) + (((owner.getWidth()) - (getWidth())) / 2)), ((newLocation.y) + (owner.getInsets().top)));\r\n                shiftBackLocation = null;\r\n                oldLocation = newLocation;\r\n            }\r\n        }\r\n    };\r\n}'),(3884,'installSheet()','org.jhotdraw.gui.JSheet.installSheet()','388','org.jhotdraw.gui.JSheet','/**\r\n * Installs the sheet on the owner.\r\n * This method is invoked just before the JSheet is shown.\r\n */\r\nprotected void installSheet() {\r\n    if ((!(JSheet.isNativeSheetSupported())) && (!(isInstalled))) {\r\n        Window owner = getOwner();\r\n        if (owner != null) {\r\n            // Determine the location for the sheet and its owner while\r\n            // the sheet will be visible.\r\n            // In case we have to shift the owner to fully display the\r\n            // dialog, we remember the shift back position.\r\n            Point ownerLoc = owner.getLocation();\r\n            Point sheetLoc;\r\n            if (isShowAsSheet()) {\r\n                if (owner instanceof JFrame) {\r\n                    sheetLoc = new Point(((ownerLoc.x) + (((owner.getWidth()) - (getWidth())) / 2)), (((ownerLoc.y) + (owner.getInsets().top)) + (((JFrame) (owner)).getRootPane().getContentPane().getY())));\r\n                } else\r\n                    if (owner instanceof JDialog) {\r\n                        sheetLoc = new Point(((ownerLoc.x) + (((owner.getWidth()) - (getWidth())) / 2)), (((ownerLoc.y) + (owner.getInsets().top)) + (((JDialog) (owner)).getRootPane().getContentPane().getY())));\r\n                    } else {\r\n                        sheetLoc = new Point(((ownerLoc.x) + (((owner.getWidth()) - (getWidth())) / 2)), ((ownerLoc.y) + (owner.getInsets().top)));\r\n                    }\r\n\r\n                if ((sheetLoc.x) < 0) {\r\n                    owner.setLocation(((ownerLoc.x) - (sheetLoc.x)), ownerLoc.y);\r\n                    sheetLoc.x = 0;\r\n                    shiftBackLocation = ownerLoc;\r\n                    oldLocation = owner.getLocation();\r\n                } else {\r\n                    shiftBackLocation = null;\r\n                    oldLocation = ownerLoc;\r\n                }\r\n            } else {\r\n                sheetLoc = new Point(((ownerLoc.x) + (((owner.getWidth()) - (getWidth())) / 2)), ((ownerLoc.y) + (((owner.getHeight()) - (getHeight())) / 2)));\r\n            }\r\n            setLocation(sheetLoc);\r\n            oldFocusOwner = owner.getFocusOwner();\r\n            // Note: We mustnt change the windows focusable state because\r\n            // this also affects the focusable state of the JSheet.\r\n            // owner.setFocusableWindowState(false);\r\n            owner.setEnabled(false);\r\n            // ((JFrame) owner).setResizable(false);\r\n            if (isShowAsSheet()) {\r\n                owner.addComponentListener(ownerMovementHandler);\r\n            } else {\r\n                if (owner instanceof Frame) {\r\n                    setTitle(((Frame) (owner)).getTitle());\r\n                }\r\n            }\r\n        }\r\n        isInstalled = true;\r\n    }\r\n}'),(3885,'isAnimated()','org.jhotdraw.gui.JSheet.isAnimated()','388','org.jhotdraw.gui.JSheet','/**\r\n * If this returns true, the JSheet uses a transition effect when shown\r\n * and when hidden.\r\n */\r\npublic boolean isAnimated() {\r\n    return isAnimated;\r\n}'),(3886,'isDocumentModalitySupported()','org.jhotdraw.gui.JSheet.isDocumentModalitySupported()','388','org.jhotdraw.gui.JSheet','/**\r\n * If this returns true, the JSheet uses native support for\r\n * sheet display.\r\n */\r\nprivate static boolean isDocumentModalitySupported() {\r\n    return JSheet.isDocumentModalitySupported;\r\n}'),(3887,'isNativeSheetSupported()','org.jhotdraw.gui.JSheet.isNativeSheetSupported()','388','org.jhotdraw.gui.JSheet','/**\r\n * If this returns true, the JSheet uses native support for\r\n * sheet display.\r\n */\r\nprivate static boolean isNativeSheetSupported() {\r\n    return JSheet.isNativeSheetSupported;\r\n}'),(3888,'isShowAsSheet()','org.jhotdraw.gui.JSheet.isShowAsSheet()','388','org.jhotdraw.gui.JSheet','protected boolean isShowAsSheet() {\r\n    return UIManager.getBoolean(\"Sheet.showAsSheet\");\r\n}'),(3889,'removeSheetListener(org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.removeSheetListener(org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Removes a sheet listener.\r\n */\r\npublic void removeSheetListener(SheetListener l) {\r\n    listenerList.remove(SheetListener.class, l);\r\n}'),(3890,'requestUserAttention(boolean)','org.jhotdraw.gui.JSheet.requestUserAttention(boolean)','388','org.jhotdraw.gui.JSheet','/**\r\n * Requests attention from user. This is invoked when the sheet is opened.\r\n */\r\npublic static void requestUserAttention(boolean requestCritical) {\r\n    /* NSApplication app = NSApplication.sharedApplication();\n    int id = app.requestUserAttention(\n    NSApplication.UserAttentionRequestInformational);\n     */\r\n    /* try {\n    Object app = Methods.invokeStatic(\"com.apple.cocoa.application.NSApplication\", \"sharedApplication\");\n    Methods.invoke(app, \"requestUserAttention\", app.getClass().getDeclaredField(\"UserAttentionRequestInformational\").getInt(app));\n    } catch (Throwable ex) {\n    System.err.println(\"Quaqua Warning: Couldnt invoke NSApplication.requestUserAttention\");\n    }\n     */\r\n}'),(3891,'setAnimated(boolean)','org.jhotdraw.gui.JSheet.setAnimated(boolean)','388','org.jhotdraw.gui.JSheet','/**\r\n * If this is set to true, the JSheet uses a transition effect when shown\r\n * and when hidden.\r\n */\r\npublic void setAnimated(boolean newValue) {\r\n    boolean oldValue = isAnimated;\r\n    isAnimated = newValue;\r\n    firePropertyChange(\"animated\", oldValue, newValue);\r\n}'),(3892,'show()','org.jhotdraw.gui.JSheet.show()','388','org.jhotdraw.gui.JSheet','public void show() {\r\n    if (((isAnimated()) && (isShowAsSheet())) && (!(JSheet.isNativeSheetSupported()))) {\r\n        installSheet();\r\n        getContentPane().setVisible(false);\r\n        final long startTime = System.currentTimeMillis();\r\n        final long endTime = startTime + 300;\r\n        final Rectangle endBounds = getBounds();\r\n        int parentWidth = getParent().getWidth();\r\n        final Rectangle startBounds = new Rectangle((parentWidth < (endBounds.width) ? (endBounds.x) + (((endBounds.width) - parentWidth) / 2) : endBounds.x), endBounds.y, Math.min(endBounds.width, parentWidth), 0);\r\n        setBounds(startBounds);\r\n        if (!(JSheet.isDocumentModalitySupported())) {\r\n            ((Window) (getParent())).toFront();\r\n        }\r\n        show0();\r\n        final Timer timer = new Timer(20, null);\r\n        timer.addActionListener(new ActionListener() {\r\n            long startTime;\r\n\r\n            long endTime;\r\n\r\n            public void actionPerformed(ActionEvent evt) {\r\n                long now = System.currentTimeMillis();\r\n                if ((startTime) == 0) {\r\n                    startTime = now;\r\n                    endTime = (startTime) + 200;\r\n                }\r\n                if (now > (endTime)) {\r\n                    timer.stop();\r\n                    setBounds(endBounds);\r\n                    getContentPane().setVisible(true);\r\n                    Component c = getFocusTraversalPolicy().getInitialComponent(JSheet.this);\r\n                    if (c != null) {\r\n                        c.requestFocus();\r\n                    } else {\r\n                        getContentPane().requestFocus();\r\n                    }\r\n                } else {\r\n                    float ratio = (now - (startTime)) / ((float) ((endTime) - (startTime)));\r\n                    setBounds(((int) (((startBounds.x) * (1.0F - ratio)) + ((endBounds.x) * ratio))), ((int) (((startBounds.y) * (1.0F - ratio)) + ((endBounds.y) * ratio))), ((int) (((startBounds.width) * (1.0F - ratio)) + ((endBounds.width) * ratio))), ((int) (((startBounds.height) * (1.0F - ratio)) + ((endBounds.height) * ratio))));\r\n                }\r\n            }\r\n        });\r\n        timer.setRepeats(true);\r\n        timer.setInitialDelay(5);\r\n        timer.start();\r\n    } else {\r\n        installSheet();\r\n        show0();\r\n    }\r\n    JSheet.requestUserAttention(true);\r\n}'),(3893,'show0()','org.jhotdraw.gui.JSheet.show0()','388','org.jhotdraw.gui.JSheet','protected void show0() {\r\n    JRootPane rp = null;\r\n    if ((getOwner()) instanceof JFrame) {\r\n        rp = ((JFrame) (getOwner())).getRootPane();\r\n    } else\r\n        if ((getOwner()) instanceof JDialog) {\r\n            rp = ((JDialog) (getOwner())).getRootPane();\r\n        }\r\n\r\n    if ((rp != null) && (!(JSheet.isDocumentModalitySupported()))) {\r\n        ownersGlassPane = rp.getGlassPane();\r\n        JPanel blockingPanel = new JPanel();\r\n        blockingPanel.setOpaque(false);\r\n        rp.setGlassPane(blockingPanel);\r\n        blockingPanel.setVisible(true);\r\n    }\r\n    super.show();\r\n}'),(3894,'showConfirmSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet with a specified icon, where the number of\r\n * choices is determined by the <code>optionType</code> parameter.\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the look and feel.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the Object to display\r\n * @param optionType\r\n * 		an int designating the options available on the dialog:\r\n * 		<code>YES_NO_OPTION</code>,\r\n * 		or <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * 		an int designating the kind of message this is,\r\n * 		primarily used to determine the icon from the pluggable\r\n * 		Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		the icon to display in the dialog\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, int messageType, Icon icon, SheetListener listener) {\r\n    JSheet.showOptionSheet(parentComponent, message, optionType, messageType, icon, null, null, listener);\r\n}'),(3895,'showConfirmSheet(java.awt.Component,java.lang.Object,int,int,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,int,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet where the number of choices is determined\r\n * by the <code>optionType</code> parameter, where the\r\n * <code>messageType</code>\r\n * parameter determines the icon to display.\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the Look and Feel.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in\r\n * 		which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param optionType\r\n * 		an integer designating the options available\r\n * 		on the dialog: <code>YES_NO_OPTION</code>,\r\n * 		or <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * 		an integer designating the kind of message this is;\r\n * 		primarily used to determine the icon from the pluggable\r\n * 		Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, int messageType, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, optionType, messageType, null, listener);\r\n}'),(3896,'showConfirmSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet where the number of choices is determined\r\n * by the <code>optionType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		sheet is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param optionType\r\n * 		an int designating the options available on the dialog:\r\n * 		<code>YES_NO_OPTION</code>, or\r\n * 		<code>YES_NO_CANCEL_OPTION</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, optionType, JOptionPane.QUESTION_MESSAGE, listener);\r\n}'),(3897,'showConfirmSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet with the options <i>Yes</i>,\r\n * <i>No</i> and <i>Cancel</i>.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		sheet is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, JOptionPane.YES_NO_CANCEL_OPTION, listener);\r\n}'),(3898,'showInputSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Prompts the user for input in a sheet where the\r\n * initial selection, possible selections, and all other options can\r\n * be specified. The user will able to choose from\r\n * <code>selectionValues</code>, where <code>null</code> implies the\r\n * user can input\r\n * whatever they wish, usually by means of a <code>JTextField</code>.\r\n * <code>initialSelectionValue</code> is the initial value to prompt\r\n * the user with. It is up to the UI to decide how best to represent\r\n * the <code>selectionValues</code>, but usually a\r\n * <code>JComboBox</code>, <code>JList</code>, or\r\n * <code>JTextField</code> will be used.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		the <code>Icon</code> image to display\r\n * @param selectionValues\r\n * 		an array of <code>Object</code>s that\r\n * 		gives the possible selections\r\n * @param initialSelectionValue\r\n * 		the value used to initialize the input\r\n * 		field\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue, SheetListener listener) {\r\n    JOptionPane pane = new JOptionPane(message, messageType, JOptionPane.OK_CANCEL_OPTION, icon, null, null);\r\n    pane.setWantsInput(true);\r\n    pane.setSelectionValues(selectionValues);\r\n    pane.setInitialSelectionValue(initialSelectionValue);\r\n    pane.setComponentOrientation((parentComponent == null ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());\r\n    int style = JSheet.styleFromMessageType(messageType);\r\n    JSheet sheet = JSheet.createSheet(pane, parentComponent, style);\r\n    pane.selectInitialValue();\r\n    /* sheet.addWindowListener(new WindowAdapter() {\n    public void windowClosed(WindowEvent evt) {\n    sheet.dispose();\n    }\n    });\n     */\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n    sheet.toFront();\r\n}'),(3899,'showInputSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Shows a sheet requesting input from the user parented to\r\n * <code>parentComponent</code> and message type <code>messageType</code>.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message that is to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, int messageType, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, messageType, null, null, null, listener);\r\n}'),(3900,'showInputSheet(java.awt.Component,java.lang.Object,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Shows a question-message sheet requesting input from the user and\r\n * parented to <code>parentComponent</code>. The input value will be\r\n * initialized to <code>initialSelectionValue</code>.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param initialSelectionValue\r\n * 		the value used to initialize the input\r\n * 		field\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, Object initialSelectionValue, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, null, null, initialSelectionValue, listener);\r\n}'),(3901,'showInputSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Shows a question-message sheet requesting input from the user\r\n * parented to <code>parentComponent</code>.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, listener);\r\n}'),(3902,'showMessageSheet(java.awt.Component,java.lang.Object)','org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up an information-message sheet.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in\r\n * 		which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message) {\r\n    JSheet.showMessageSheet(parentComponent, message, JOptionPane.INFORMATION_MESSAGE);\r\n}'),(3903,'showMessageSheet(java.awt.Component,java.lang.Object,int)','org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet that displays a message using a default\r\n * icon determined by the <code>messageType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code>\r\n * 		in which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType) {\r\n    JSheet.showMessageSheet(parentComponent, message, messageType, null, null);\r\n}'),(3904,'showMessageSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet displaying a message, specifying all parameters.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		sheet is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		an icon to display in the sheet that helps the user\r\n * 		identify the kind of message that is being displayed\r\n * @param listener\r\n * 		This listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType, Icon icon, SheetListener listener) {\r\n    JSheet.showOptionSheet(parentComponent, message, JOptionPane.DEFAULT_OPTION, messageType, icon, null, null, listener);\r\n}'),(3905,'showMessageSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet that displays a message using a default\r\n * icon determined by the <code>messageType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code>\r\n * 		in which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * 		This listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType, SheetListener listener) {\r\n    JSheet.showMessageSheet(parentComponent, message, messageType, null, listener);\r\n}'),(3906,'showMessageSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up an information-message sheet.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in\r\n * 		which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param listener\r\n * 		This listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showMessageSheet(parentComponent, message, JOptionPane.INFORMATION_MESSAGE, listener);\r\n}'),(3907,'showOpenSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showOpenSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Displays an \"Open File\" file chooser sheet. Note that the\r\n * text that appears in the approve button is determined by\r\n * the L&F.\r\n *\r\n * @param parent\r\n * 		the parent component of the dialog,\r\n * 		can be <code>null</code>.\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showOpenSheet(JFileChooser chooser, Component parent, SheetListener listener) {\r\n    chooser.setDialogType(JFileChooser.OPEN_DIALOG);\r\n    JSheet.showSheet(chooser, parent, null, listener);\r\n}'),(3908,'showOptionSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showOptionSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Brings up a sheet with a specified icon, where the initial\r\n * choice is determined by the <code>initialValue</code> parameter and\r\n * the number of choices is determined by the <code>optionType</code>\r\n * parameter.\r\n * <p>\r\n * If <code>optionType</code> is <code>YES_NO_OPTION</code>,\r\n * or <code>YES_NO_CANCEL_OPTION</code>\r\n * and the <code>options</code> parameter is <code>null</code>,\r\n * then the options are\r\n * supplied by the look and feel.\r\n * <p>\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the look and feel.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code>\r\n * 		in which the dialog is displayed;  if\r\n * 		<code>null</code>, or if the\r\n * 		<code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param optionType\r\n * 		an integer designating the options available on the\r\n * 		dialog: <code>YES_NO_OPTION</code>,\r\n * 		or <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * 		an integer designating the kind of message this is,\r\n * 		primarily used to determine the icon from the\r\n * 		pluggable Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		the icon to display in the dialog\r\n * @param options\r\n * 		an array of objects indicating the possible choices\r\n * 		the user can make; if the objects are components, they\r\n * 		are rendered properly; non-<code>String</code>\r\n * 		objects are\r\n * 		rendered using their <code>toString</code> methods;\r\n * 		if this parameter is <code>null</code>,\r\n * 		the options are determined by the Look and Feel\r\n * @param initialValue\r\n * 		the object that represents the default selection\r\n * 		for the dialog; only meaningful if <code>options</code>\r\n * 		is used; can be <code>null</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showOptionSheet(Component parentComponent, Object message, int optionType, int messageType, Icon icon, Object[] options, Object initialValue, SheetListener listener) {\r\n    JOptionPane pane = new JOptionPane(message, messageType, optionType, icon, options, initialValue);\r\n    pane.setInitialValue(initialValue);\r\n    pane.setComponentOrientation((parentComponent == null ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());\r\n    int style = JSheet.styleFromMessageType(messageType);\r\n    JSheet sheet = JSheet.createSheet(pane, parentComponent, style);\r\n    pane.selectInitialValue();\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n    sheet.toFront();\r\n}'),(3909,'showSaveSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showSaveSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Displays a \"Save File\" file chooser sheet. Note that the\r\n * text that appears in the approve button is determined by\r\n * the L&F.\r\n *\r\n * @param parent\r\n * 		the parent component of the dialog,\r\n * 		can be <code>null</code>.\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showSaveSheet(JFileChooser chooser, Component parent, SheetListener listener) {\r\n    chooser.setDialogType(JFileChooser.SAVE_DIALOG);\r\n    JSheet.showSheet(chooser, parent, null, listener);\r\n}'),(3910,'showSheet(javax.swing.JFileChooser,java.awt.Component,java.lang.String,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showSheet(javax.swing.JFileChooser,java.awt.Component,java.lang.String,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Displays a custom file chooser sheet with a custom approve button.\r\n *\r\n * @param parent\r\n * 		the parent component of the dialog;\r\n * 		can be <code>null</code>\r\n * @param approveButtonText\r\n * 		the text of the <code>ApproveButton</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showSheet(final JFileChooser chooser, Component parent, String approveButtonText, SheetListener listener) {\r\n    if (approveButtonText != null) {\r\n        chooser.setApproveButtonText(approveButtonText);\r\n        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);\r\n    }\r\n    // Begin Create Dialog\r\n    Frame frame = (parent instanceof Frame) ? ((Frame) (parent)) : ((Frame) (SwingUtilities.getAncestorOfClass(Frame.class, parent)));\r\n    String title = chooser.getUI().getDialogTitle(chooser);\r\n    chooser.getAccessibleContext().setAccessibleDescription(title);\r\n    final JSheet sheet = new JSheet(frame);\r\n    sheet.addSheetListener(listener);\r\n    Container contentPane = sheet.getContentPane();\r\n    contentPane.setLayout(new BorderLayout());\r\n    contentPane.add(chooser, BorderLayout.CENTER);\r\n    // End Create Dialog\r\n    final ActionListener actionListener = new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            int option;\r\n            if (evt.getActionCommand().equals(\"ApproveSelection\")) {\r\n                option = JFileChooser.APPROVE_OPTION;\r\n            } else {\r\n                option = JFileChooser.CANCEL_OPTION;\r\n            }\r\n            sheet.hide();\r\n            sheet.fireOptionSelected(chooser, option);\r\n            chooser.removeActionListener(this);\r\n        }\r\n    };\r\n    chooser.addActionListener(actionListener);\r\n    sheet.addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent e) {\r\n            sheet.fireOptionSelected(chooser, JFileChooser.CANCEL_OPTION);\r\n            chooser.removeActionListener(actionListener);\r\n        }\r\n    });\r\n    chooser.rescanCurrentDirectory();\r\n    sheet.pack();\r\n    sheet.show();\r\n    sheet.toFront();\r\n}'),(3911,'showSheet(javax.swing.JOptionPane,java.awt.Component,org.jhotdraw.gui.event.SheetListener)','org.jhotdraw.gui.JSheet.showSheet(javax.swing.JOptionPane,java.awt.Component,org.jhotdraw.gui.event.SheetListener)','388','org.jhotdraw.gui.JSheet','/**\r\n * Displays an option pane as a sheet on its parent window.\r\n *\r\n * @param pane\r\n * 		The option pane.\r\n * @param parentComponent\r\n * 		The parent of the option pane.\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showSheet(JOptionPane pane, Component parentComponent, SheetListener listener) {\r\n    final JSheet sheet = JSheet.createSheet(pane, parentComponent, JSheet.styleFromMessageType(pane.getMessageType()));\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n}'),(3912,'styleFromMessageType(int)','org.jhotdraw.gui.JSheet.styleFromMessageType(int)','388','org.jhotdraw.gui.JSheet','private static int styleFromMessageType(int messageType) {\r\n    switch (messageType) {\r\n        case JOptionPane.ERROR_MESSAGE :\r\n            return JRootPane.ERROR_DIALOG;\r\n        case JOptionPane.QUESTION_MESSAGE :\r\n            return JRootPane.QUESTION_DIALOG;\r\n        case JOptionPane.WARNING_MESSAGE :\r\n            return JRootPane.WARNING_DIALOG;\r\n        case JOptionPane.INFORMATION_MESSAGE :\r\n            return JRootPane.INFORMATION_DIALOG;\r\n        case JOptionPane.PLAIN_MESSAGE :\r\n        default :\r\n            return JRootPane.PLAIN_DIALOG;\r\n    }\r\n}'),(3913,'uninstallSheet()','org.jhotdraw.gui.JSheet.uninstallSheet()','388','org.jhotdraw.gui.JSheet','/**\r\n * Uninstalls the sheet on the owner.\r\n * This method is invoked immediately after the JSheet is hidden.\r\n */\r\nprotected void uninstallSheet() {\r\n    if (isInstalled) {\r\n        Window owner = getOwner();\r\n        if (owner != null) {\r\n            // Note: We mustnt change the windows focusable state because\r\n            // this also affects the focusable state of the JSheet.\r\n            // owner.setFocusableWindowState(true);\r\n            owner.setEnabled(true);\r\n            // ((JFrame) owner).setResizable(true);\r\n            owner.removeComponentListener(ownerMovementHandler);\r\n            if ((shiftBackLocation) != null) {\r\n                owner.setLocation(shiftBackLocation);\r\n            }\r\n            if ((oldFocusOwner) != null) {\r\n                owner.toFront();\r\n                oldFocusOwner.requestFocus();\r\n            }\r\n        }\r\n        isInstalled = false;\r\n    }\r\n}'),(3914,'-init-(org.jhotdraw.gui.MDIDesktopPane)','org.jhotdraw.gui.MDIDesktopManager.-init-(org.jhotdraw.gui.MDIDesktopPane)','389','org.jhotdraw.gui.MDIDesktopManager','public MDIDesktopManager(MDIDesktopPane newDesktop) {\r\n    this.desktop = newDesktop;\r\n}'),(3915,'endDraggingFrame(javax.swing.JComponent)','org.jhotdraw.gui.MDIDesktopManager.endDraggingFrame(javax.swing.JComponent)','389','org.jhotdraw.gui.MDIDesktopManager','public void endDraggingFrame(JComponent f) {\r\n    super.endDraggingFrame(f);\r\n    resizeDesktop();\r\n}'),(3916,'endResizingFrame(javax.swing.JComponent)','org.jhotdraw.gui.MDIDesktopManager.endResizingFrame(javax.swing.JComponent)','389','org.jhotdraw.gui.MDIDesktopManager','public void endResizingFrame(JComponent f) {\r\n    super.endResizingFrame(f);\r\n    resizeDesktop();\r\n}'),(3917,'getScrollPane()','org.jhotdraw.gui.MDIDesktopManager.getScrollPane()','389','org.jhotdraw.gui.MDIDesktopManager','public JScrollPane getScrollPane() {\r\n    if ((desktop.getParent()) instanceof JViewport) {\r\n        JViewport viewPort = ((JViewport) (desktop.getParent()));\r\n        if ((viewPort.getParent()) instanceof JScrollPane)\r\n            return ((JScrollPane) (viewPort.getParent()));\r\n\r\n    }\r\n    return null;\r\n}'),(3918,'getScrollPaneInsets()','org.jhotdraw.gui.MDIDesktopManager.getScrollPaneInsets()','389','org.jhotdraw.gui.MDIDesktopManager','private Insets getScrollPaneInsets() {\r\n    JScrollPane scrollPane = getScrollPane();\r\n    if ((scrollPane == null) || ((getScrollPane().getBorder()) == null)) {\r\n        return new Insets(0, 0, 0, 0);\r\n    } else {\r\n        return getScrollPane().getBorder().getBorderInsets(scrollPane);\r\n    }\r\n}'),(3919,'resizeDesktop()','org.jhotdraw.gui.MDIDesktopManager.resizeDesktop()','389','org.jhotdraw.gui.MDIDesktopManager','protected void resizeDesktop() {\r\n    int x = 0;\r\n    int y = 0;\r\n    JScrollPane scrollPane = getScrollPane();\r\n    Insets scrollInsets = getScrollPaneInsets();\r\n    if (scrollPane != null) {\r\n        JInternalFrame[] allFrames = desktop.getAllFrames();\r\n        for (int i = 0; i < (allFrames.length); i++) {\r\n            if (((allFrames[i].getX()) + (allFrames[i].getWidth())) > x) {\r\n                x = (allFrames[i].getX()) + (allFrames[i].getWidth());\r\n            }\r\n            if (((allFrames[i].getY()) + (allFrames[i].getHeight())) > y) {\r\n                y = (allFrames[i].getY()) + (allFrames[i].getHeight());\r\n            }\r\n        }\r\n        Dimension d = scrollPane.getVisibleRect().getSize();\r\n        if ((scrollPane.getBorder()) != null) {\r\n            d.setSize((((d.getWidth()) - (scrollInsets.left)) - (scrollInsets.right)), (((d.getHeight()) - (scrollInsets.top)) - (scrollInsets.bottom)));\r\n        }\r\n        if (x <= (d.getWidth())) {\r\n            x = ((int) (d.getWidth())) - 20;\r\n        }\r\n        if (y <= (d.getHeight())) {\r\n            y = ((int) (d.getHeight())) - 20;\r\n        }\r\n        desktop.setAllSize(x, y);\r\n        scrollPane.invalidate();\r\n        scrollPane.validate();\r\n    }\r\n}'),(3920,'setNormalSize()','org.jhotdraw.gui.MDIDesktopManager.setNormalSize()','389','org.jhotdraw.gui.MDIDesktopManager','public void setNormalSize() {\r\n    JScrollPane scrollPane = getScrollPane();\r\n    Insets scrollInsets = getScrollPaneInsets();\r\n    if (scrollPane != null) {\r\n        Dimension d = scrollPane.getVisibleRect().getSize();\r\n        if ((scrollPane.getBorder()) != null) {\r\n            d.setSize((((d.getWidth()) - (scrollInsets.left)) - (scrollInsets.right)), (((d.getHeight()) - (scrollInsets.top)) - (scrollInsets.bottom)));\r\n        }\r\n        d.setSize(((d.getWidth()) - 20), ((d.getHeight()) - 20));\r\n        desktop.setAllSize(d);\r\n        scrollPane.invalidate();\r\n        scrollPane.validate();\r\n    }\r\n}'),(3921,'-init-()','org.jhotdraw.gui.MDIDesktopPane.-init-()','390','org.jhotdraw.gui.MDIDesktopPane','public MDIDesktopPane() {\r\n    manager = new MDIDesktopManager(this);\r\n    setDesktopManager(manager);\r\n    setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);\r\n    setAlignmentX(JComponent.LEFT_ALIGNMENT);\r\n}'),(3922,'arrangeFramesCascading()','org.jhotdraw.gui.MDIDesktopPane.arrangeFramesCascading()','390','org.jhotdraw.gui.MDIDesktopPane','/**\r\n * Cascade all internal frames\r\n */\r\nprivate void arrangeFramesCascading() {\r\n    int x = 0;\r\n    int y = 0;\r\n    JInternalFrame[] allFrames = getAllFrames();\r\n    // do nothing if no frames to work with\r\n    if ((allFrames.length) == 0) {\r\n        return;\r\n    }\r\n    manager.setNormalSize();\r\n    int frameHeight = ((getBounds().height) - 5) - ((allFrames.length) * (MDIDesktopPane.FRAME_OFFSET));\r\n    int frameWidth = ((getBounds().width) - 5) - ((allFrames.length) * (MDIDesktopPane.FRAME_OFFSET));\r\n    for (int i = (allFrames.length) - 1; i >= 0; i--) {\r\n        try {\r\n            allFrames[i].setMaximum(false);\r\n        } catch (PropertyVetoException e) {\r\n            e.printStackTrace();\r\n        }\r\n        allFrames[i].setBounds(x, y, frameWidth, frameHeight);\r\n        x = x + (MDIDesktopPane.FRAME_OFFSET);\r\n        y = y + (MDIDesktopPane.FRAME_OFFSET);\r\n    }\r\n    checkDesktopSize();\r\n}'),(3923,'arrangeFramesHorizontally()','org.jhotdraw.gui.MDIDesktopPane.arrangeFramesHorizontally()','390','org.jhotdraw.gui.MDIDesktopPane','/**\r\n * Arranges the frames as efficiently as possibly with preference for\r\n * keeping horizontal size maximal.<br>\r\n */\r\npublic void arrangeFramesHorizontally() {\r\n    Component[] allFrames = getAllFrames();\r\n    // do nothing if no frames to work with\r\n    if ((allFrames.length) == 0) {\r\n        return;\r\n    }\r\n    manager.setNormalSize();\r\n    int vertFrames = ((int) (Math.ceil(Math.sqrt(allFrames.length))));\r\n    int horFrames = ((int) (Math.floor(Math.sqrt(allFrames.length))));\r\n    // first arrange the windows that have equal size\r\n    int frameWidth = (getBounds().width) / horFrames;\r\n    int frameHeight = (getBounds().height) / vertFrames;\r\n    int x = 0;\r\n    int y = 0;\r\n    int frameIdx = 0;\r\n    for (int vertCnt = 0; vertCnt < (vertFrames - 1); vertCnt++) {\r\n        x = 0;\r\n        for (int horCnt = 0; horCnt < horFrames; horCnt++) {\r\n            try {\r\n                ((JInternalFrame) (allFrames[frameIdx])).setMaximum(false);\r\n            } catch (PropertyVetoException e) {\r\n                e.printStackTrace();\r\n            }\r\n            allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);\r\n            frameIdx++;\r\n            x = x + frameWidth;\r\n        }\r\n        y = y + frameHeight;\r\n    }\r\n    // the rest of the frames are tiled down on the last column with equal\r\n    // height\r\n    frameWidth = (getBounds().width) / ((allFrames.length) - frameIdx);\r\n    x = 0;\r\n    for (; frameIdx < (allFrames.length); frameIdx++) {\r\n        try {\r\n            ((JInternalFrame) (allFrames[frameIdx])).setMaximum(false);\r\n        } catch (PropertyVetoException e) {\r\n            e.printStackTrace();\r\n        }\r\n        allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);\r\n        x = x + frameWidth;\r\n    }\r\n    checkDesktopSize();\r\n}'),(3924,'arrangeFramesVertically()','org.jhotdraw.gui.MDIDesktopPane.arrangeFramesVertically()','390','org.jhotdraw.gui.MDIDesktopPane','/**\r\n * Arranges the frames as efficiently as possibly with preference for\r\n * keeping vertical size maximal.<br>\r\n */\r\npublic void arrangeFramesVertically() {\r\n    Component[] allFrames = getAllFrames();\r\n    // do nothing if no frames to work with\r\n    if ((allFrames.length) == 0) {\r\n        return;\r\n    }\r\n    manager.setNormalSize();\r\n    int vertFrames = ((int) (Math.floor(Math.sqrt(allFrames.length))));\r\n    int horFrames = ((int) (Math.ceil(Math.sqrt(allFrames.length))));\r\n    // first arrange the windows that have equal size\r\n    int frameWidth = (getBounds().width) / horFrames;\r\n    int frameHeight = (getBounds().height) / vertFrames;\r\n    int x = 0;\r\n    int y = 0;\r\n    int frameIdx = 0;\r\n    for (int horCnt = 0; horCnt < (horFrames - 1); horCnt++) {\r\n        y = 0;\r\n        for (int vertCnt = 0; vertCnt < vertFrames; vertCnt++) {\r\n            try {\r\n                ((JInternalFrame) (allFrames[frameIdx])).setMaximum(false);\r\n            } catch (PropertyVetoException e) {\r\n                e.printStackTrace();\r\n            }\r\n            allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);\r\n            frameIdx++;\r\n            y = y + frameHeight;\r\n        }\r\n        x = x + frameWidth;\r\n    }\r\n    // the rest of the frames are tiled down on the last column with equal\r\n    // height\r\n    frameHeight = (getBounds().height) / ((allFrames.length) - frameIdx);\r\n    y = 0;\r\n    for (; frameIdx < (allFrames.length); frameIdx++) {\r\n        try {\r\n            ((JInternalFrame) (allFrames[frameIdx])).setMaximum(false);\r\n        } catch (PropertyVetoException e) {\r\n            e.printStackTrace();\r\n        }\r\n        allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);\r\n        y = y + frameHeight;\r\n    }\r\n    checkDesktopSize();\r\n}'),(3925,'checkDesktopSize()','org.jhotdraw.gui.MDIDesktopPane.checkDesktopSize()','390','org.jhotdraw.gui.MDIDesktopPane','private void checkDesktopSize() {\r\n    if (((getParent()) != null) && (isVisible())) {\r\n        manager.resizeDesktop();\r\n    }\r\n}'),(3926,'getArrangement()','org.jhotdraw.gui.MDIDesktopPane.getArrangement()','390','org.jhotdraw.gui.MDIDesktopPane','public Arrangeable.Arrangement getArrangement() {\r\n    // FIXME Check for the arrangement of the JInternalFrames here\r\n    // and return the true value\r\n    return Arrangeable.Arrangement.CASCADE;\r\n}'),(3927,'setAllSize(int,int)','org.jhotdraw.gui.MDIDesktopPane.setAllSize(int,int)','390','org.jhotdraw.gui.MDIDesktopPane','/**\r\n * Sets all component size properties ( maximum, minimum, preferred)\r\n * to the given width and height.\r\n */\r\npublic void setAllSize(int width, int height) {\r\n    setAllSize(new Dimension(width, height));\r\n}'),(3928,'setAllSize(java.awt.Dimension)','org.jhotdraw.gui.MDIDesktopPane.setAllSize(java.awt.Dimension)','390','org.jhotdraw.gui.MDIDesktopPane','/**\r\n * Sets all component size properties ( maximum, minimum, preferred)\r\n * to the given dimension.\r\n */\r\npublic void setAllSize(Dimension d) {\r\n    setMinimumSize(d);\r\n    setMaximumSize(d);\r\n    setPreferredSize(d);\r\n    setBounds(0, 0, d.width, d.height);\r\n}'),(3929,'setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)','org.jhotdraw.gui.MDIDesktopPane.setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)','390','org.jhotdraw.gui.MDIDesktopPane','public void setArrangement(Arrangeable.Arrangement newValue) {\r\n    Arrangeable.Arrangement oldValue = getArrangement();\r\n    switch (newValue) {\r\n        case CASCADE :\r\n            arrangeFramesCascading();\r\n            break;\r\n        case HORIZONTAL :\r\n            arrangeFramesHorizontally();\r\n            break;\r\n        case VERTICAL :\r\n            arrangeFramesVertically();\r\n            break;\r\n    }\r\n    firePropertyChange(\"arrangement\", oldValue, newValue);\r\n}'),(3930,'tileFramesHorizontally()','org.jhotdraw.gui.MDIDesktopPane.tileFramesHorizontally()','390','org.jhotdraw.gui.MDIDesktopPane','private void tileFramesHorizontally() {\r\n    Component[] allFrames = getAllFrames();\r\n    // do nothing if no frames to work with\r\n    if ((allFrames.length) == 0) {\r\n        return;\r\n    }\r\n    manager.setNormalSize();\r\n    int frameHeight = (getBounds().height) / (allFrames.length);\r\n    int y = 0;\r\n    for (int i = 0; i < (allFrames.length); i++) {\r\n        try {\r\n            ((JInternalFrame) (allFrames[i])).setMaximum(false);\r\n        } catch (PropertyVetoException e) {\r\n            e.printStackTrace();\r\n        }\r\n        allFrames[i].setBounds(0, y, getBounds().width, frameHeight);\r\n        y = y + frameHeight;\r\n    }\r\n    checkDesktopSize();\r\n}'),(3931,'tileFramesVertically()','org.jhotdraw.gui.MDIDesktopPane.tileFramesVertically()','390','org.jhotdraw.gui.MDIDesktopPane','public void tileFramesVertically() {\r\n    Component[] allFrames = getAllFrames();\r\n    // do nothing if no frames to work with\r\n    if ((allFrames.length) == 0) {\r\n        return;\r\n    }\r\n    manager.setNormalSize();\r\n    int frameWidth = (getBounds().width) / (allFrames.length);\r\n    int x = 0;\r\n    for (int i = 0; i < (allFrames.length); i++) {\r\n        try {\r\n            ((JInternalFrame) (allFrames[i])).setMaximum(false);\r\n        } catch (PropertyVetoException e) {\r\n            e.printStackTrace();\r\n        }\r\n        allFrames[i].setBounds(x, 0, frameWidth, getBounds().height);\r\n        x = x + frameWidth;\r\n    }\r\n    checkDesktopSize();\r\n}'),(3932,'-init-()','org.jhotdraw.gui.PlacardScrollPaneLayout.-init-()','392','org.jhotdraw.gui.PlacardScrollPaneLayout','/**\r\n * Creates a new instance.\r\n */\r\npublic PlacardScrollPaneLayout() {\r\n}'),(3933,'layoutContainer(java.awt.Container)','org.jhotdraw.gui.PlacardScrollPaneLayout.layoutContainer(java.awt.Container)','392','org.jhotdraw.gui.PlacardScrollPaneLayout','public void layoutContainer(Container parent) {\r\n    super.layoutContainer(parent);\r\n    if (((lowerLeft) != null) && ((hsb) != null)) {\r\n        Dimension llp = lowerLeft.getPreferredSize();\r\n        // Insets insets = parent.getInsets();\r\n        lowerLeft.setBounds(hsb.getX(), hsb.getY(), llp.width, hsb.getHeight());\r\n        hsb.setBounds(((hsb.getX()) + (llp.width)), hsb.getY(), ((hsb.getWidth()) - (llp.width)), hsb.getHeight());\r\n    }\r\n}'),(3934,'-init-()','org.jhotdraw.gui.PlacardScrollPaneLayout$UIResource.-init-()','391','org.jhotdraw.gui.PlacardScrollPaneLayout$UIResource','UIResource() {\r\n}'),(3935,'-init-()','org.jhotdraw.gui.ToolBarLayout.-init-()','393','org.jhotdraw.gui.ToolBarLayout','/**\r\n * Creates a layout manager that will lay out components along the\r\n * X-axis.\r\n */\r\npublic ToolBarLayout() {\r\n    this(ToolBarLayout.X_AXIS);\r\n}'),(3936,'-init-(int)','org.jhotdraw.gui.ToolBarLayout.-init-(int)','393','org.jhotdraw.gui.ToolBarLayout','/**\r\n * Creates a layout manager that will lay out components along the\r\n * given axis.\r\n *\r\n * @param axis\r\n * 		the axis to lay out components along. Can be one of:\r\n * 		<code>BoxLayout.X_AXIS</code>,\r\n * 		<code>BoxLayout.Y_AXIS</code>,\r\n * @exception AWTError  if the value of <code>axis</code> is invalid\r\n */\r\npublic ToolBarLayout(int axis) {\r\n    this.axis = axis;\r\n}'),(3937,'addLayoutComponent(java.awt.Component,java.lang.Object)','org.jhotdraw.gui.ToolBarLayout.addLayoutComponent(java.awt.Component,java.lang.Object)','393','org.jhotdraw.gui.ToolBarLayout','public void addLayoutComponent(Component comp, Object constraints) {\r\n}'),(3938,'addLayoutComponent(java.lang.String,java.awt.Component)','org.jhotdraw.gui.ToolBarLayout.addLayoutComponent(java.lang.String,java.awt.Component)','393','org.jhotdraw.gui.ToolBarLayout','public void addLayoutComponent(String name, Component comp) {\r\n}'),(3939,'getLayoutAlignmentX(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.getLayoutAlignmentX(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public float getLayoutAlignmentX(Container target) {\r\n    switch (axis) {\r\n        case ToolBarLayout.Y_AXIS :\r\n            return 0.0F;\r\n        case ToolBarLayout.X_AXIS :\r\n        default :\r\n            return 0.0F;\r\n    }\r\n}'),(3940,'getLayoutAlignmentY(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.getLayoutAlignmentY(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public float getLayoutAlignmentY(Container target) {\r\n    switch (axis) {\r\n        case ToolBarLayout.Y_AXIS :\r\n            return 0.0F;\r\n        case ToolBarLayout.X_AXIS :\r\n        default :\r\n            return 0.0F;\r\n    }\r\n}'),(3941,'invalidateLayout(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.invalidateLayout(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public void invalidateLayout(Container target) {\r\n}'),(3942,'layoutContainer(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.layoutContainer(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public void layoutContainer(Container parent) {\r\n    Dimension ps = preferredLayoutSize(parent);\r\n    Insets insets = parent.getInsets();\r\n    int w = ((ps.width) - (insets.left)) - (insets.right);\r\n    int h = ((ps.height) - (insets.top)) - (insets.bottom);\r\n    int x = insets.left;\r\n    int y = insets.top;\r\n    switch (axis) {\r\n        case ToolBarLayout.Y_AXIS :\r\n            for (Component c : parent.getComponents()) {\r\n                ps = c.getPreferredSize();\r\n                c.setBounds(x, y, w, ps.height);\r\n                y += ps.height;\r\n            }\r\n            break;\r\n        case ToolBarLayout.X_AXIS :\r\n        default :\r\n            for (Component c : parent.getComponents()) {\r\n                ps = c.getPreferredSize();\r\n                c.setBounds(x, y, ps.width, h);\r\n                x += ps.width;\r\n            }\r\n    }\r\n}'),(3943,'maximumLayoutSize(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.maximumLayoutSize(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public Dimension maximumLayoutSize(Container target) {\r\n    return preferredLayoutSize(target);\r\n}'),(3944,'minimumLayoutSize(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.minimumLayoutSize(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public Dimension minimumLayoutSize(Container parent) {\r\n    return preferredLayoutSize(parent);\r\n}'),(3945,'preferredLayoutSize(java.awt.Container)','org.jhotdraw.gui.ToolBarLayout.preferredLayoutSize(java.awt.Container)','393','org.jhotdraw.gui.ToolBarLayout','public Dimension preferredLayoutSize(Container parent) {\r\n    int w = 0;\r\n    int h = 0;\r\n    switch (axis) {\r\n        case ToolBarLayout.Y_AXIS :\r\n            for (Component c : parent.getComponents()) {\r\n                Dimension ps = c.getPreferredSize();\r\n                w = Math.max(w, ps.width);\r\n                h += ps.height;\r\n            }\r\n            break;\r\n        case ToolBarLayout.X_AXIS :\r\n        default :\r\n            for (Component c : parent.getComponents()) {\r\n                Dimension ps = c.getPreferredSize();\r\n                h = Math.max(h, ps.height);\r\n                w += ps.width;\r\n            }\r\n    }\r\n    Insets i = parent.getInsets();\r\n    return new Dimension(((w + (i.left)) + (i.right)), ((h + (i.top)) + (i.bottom)));\r\n}'),(3946,'removeLayoutComponent(java.awt.Component)','org.jhotdraw.gui.ToolBarLayout.removeLayoutComponent(java.awt.Component)','393','org.jhotdraw.gui.ToolBarLayout','public void removeLayoutComponent(Component comp) {\r\n}'),(3947,'-init-()','org.jhotdraw.gui.Worker.-init-()','394','org.jhotdraw.gui.Worker','Worker() {\r\n}'),(3948,'construct()','org.jhotdraw.gui.Worker.construct()','394','org.jhotdraw.gui.Worker','/**\r\n * Compute the value to be returned by the <code>get</code> method.\r\n */\r\npublic abstract Object construct();'),(3949,'finished(java.lang.Object)','org.jhotdraw.gui.Worker.finished(java.lang.Object)','394','org.jhotdraw.gui.Worker','/**\r\n * Called on the event dispatching thread (not on the worker thread)\r\n * after the <code>construct</code> method has returned.\r\n *\r\n * @param value\r\n * 		The return value of the construct method.\r\n */\r\npublic abstract void finished(Object value);'),(3950,'getValue()','org.jhotdraw.gui.Worker.getValue()','394','org.jhotdraw.gui.Worker','/**\r\n * Get the value produced by the worker thread, or null if it\r\n * hasnt been constructed yet.\r\n */\r\nprotected synchronized Object getValue() {\r\n    return value;\r\n}'),(3951,'run()','org.jhotdraw.gui.Worker.run()','394','org.jhotdraw.gui.Worker','/**\r\n * Calls #construct on the current thread and invokes\r\n * #finished on the AWT event dispatcher thread.\r\n */\r\npublic final void run() {\r\n    final Runnable doFinished = new Runnable() {\r\n        public void run() {\r\n            finished(getValue());\r\n        }\r\n    };\r\n    try {\r\n        setValue(construct());\r\n    } catch (Throwable e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        SwingUtilities.invokeLater(doFinished);\r\n    }\r\n}'),(3952,'setValue(java.lang.Object)','org.jhotdraw.gui.Worker.setValue(java.lang.Object)','394','org.jhotdraw.gui.Worker','/**\r\n * Set the value produced by worker thread\r\n */\r\nprivate synchronized void setValue(Object x) {\r\n    value = x;\r\n}'),(3953,'start()','org.jhotdraw.gui.Worker.start()','394','org.jhotdraw.gui.Worker','/**\r\n * Starts the Worker on an internal worker thread.\r\n */\r\npublic void start() {\r\n    new Thread(this).start();\r\n}'),(3954,'-init-(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.AbstractTransferable.-init-(java.awt.datatransfer.DataFlavor)','395','org.jhotdraw.gui.datatransfer.AbstractTransferable','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractTransferable(DataFlavor flavor) {\r\n    this.flavors = new DataFlavor[]{ flavor };\r\n}'),(3955,'-init-(java.awt.datatransfer.DataFlavor[])','org.jhotdraw.gui.datatransfer.AbstractTransferable.-init-(java.awt.datatransfer.DataFlavor[])','395','org.jhotdraw.gui.datatransfer.AbstractTransferable','/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractTransferable(DataFlavor[] flavors) {\r\n    this.flavors = flavors;\r\n}'),(3956,'getTransferDataFlavors()','org.jhotdraw.gui.datatransfer.AbstractTransferable.getTransferDataFlavors()','395','org.jhotdraw.gui.datatransfer.AbstractTransferable','public DataFlavor[] getTransferDataFlavors() {\r\n    return flavors.clone();\r\n}'),(3957,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.AbstractTransferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','395','org.jhotdraw.gui.datatransfer.AbstractTransferable','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    for (DataFlavor f : flavors) {\r\n        if (f.equals(flavor)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(3958,'-init-()','org.jhotdraw.gui.datatransfer.CompositeTransferable.-init-()','396','org.jhotdraw.gui.datatransfer.CompositeTransferable','/**\r\n * Creates a new instance of CompositeTransferable\r\n */\r\npublic CompositeTransferable() {\r\n}'),(3959,'add(java.awt.datatransfer.Transferable)','org.jhotdraw.gui.datatransfer.CompositeTransferable.add(java.awt.datatransfer.Transferable)','396','org.jhotdraw.gui.datatransfer.CompositeTransferable','public void add(Transferable t) {\r\n    DataFlavor[] f = t.getTransferDataFlavors();\r\n    for (int i = 0; i < (f.length); i++) {\r\n        if (!(transferables.containsKey(f[i])))\r\n            flavors.add(f[i]);\r\n\r\n        transferables.put(f[i], t);\r\n    }\r\n}'),(3960,'getTransferData(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.CompositeTransferable.getTransferData(java.awt.datatransfer.DataFlavor)','396','org.jhotdraw.gui.datatransfer.CompositeTransferable','/**\r\n * Returns an object which represents the data to be transferred.  The class\r\n * of the object returned is defined by the representation class of the flavor.\r\n *\r\n * @param flavor\r\n * 		the requested flavor for the data\r\n * @see DataFlavor#getRepresentationClass\r\n * @exception IOException                if the data is no longer available\r\nin the requested flavor.\r\n * @exception UnsupportedFlavorException if the requested data flavor is\r\nnot supported.\r\n */\r\npublic Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n    Transferable t = ((Transferable) (transferables.get(flavor)));\r\n    if (t == null)\r\n        throw new UnsupportedFlavorException(flavor);\r\n\r\n    return t.getTransferData(flavor);\r\n}'),(3961,'getTransferDataFlavors()','org.jhotdraw.gui.datatransfer.CompositeTransferable.getTransferDataFlavors()','396','org.jhotdraw.gui.datatransfer.CompositeTransferable','/**\r\n * Returns an array of DataFlavor objects indicating the flavors the data\r\n * can be provided in.  The array should be ordered according to preference\r\n * for providing the data (from most richly descriptive to least descriptive).\r\n *\r\n * @return an array of data flavors in which this data can be transferred\r\n */\r\npublic DataFlavor[] getTransferDataFlavors() {\r\n    return ((DataFlavor[]) (flavors.toArray(new DataFlavor[transferables.size()])));\r\n}'),(3962,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.CompositeTransferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','396','org.jhotdraw.gui.datatransfer.CompositeTransferable','/**\r\n * Returns whether or not the specified data flavor is supported for\r\n * this object.\r\n *\r\n * @param flavor\r\n * 		the requested flavor for the data\r\n * @return boolean indicating wjether or not the data flavor is supported\r\n */\r\npublic boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return transferables.containsKey(flavor);\r\n}'),(3963,'lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)','org.jhotdraw.gui.datatransfer.CompositeTransferable.lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)','396','org.jhotdraw.gui.datatransfer.CompositeTransferable','public void lostOwnership(Clipboard clipboard, Transferable contents) {\r\n}'),(3964,'-init-(java.awt.Image)','org.jhotdraw.gui.datatransfer.ImageTransferable.-init-(java.awt.Image)','397','org.jhotdraw.gui.datatransfer.ImageTransferable','/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTransferable(Image image) {\r\n    this.image = image;\r\n}'),(3965,'getTransferData(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.ImageTransferable.getTransferData(java.awt.datatransfer.DataFlavor)','397','org.jhotdraw.gui.datatransfer.ImageTransferable','public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n    /* if (! isDataFlavorSupported(flavor)) {\n    throw new UnsupportedFlavorException(flavor);\n    }\n     */\r\n    if (flavor.equals(DataFlavor.imageFlavor)) {\r\n        return image;\r\n    } else\r\n        if (flavor.equals(ImageTransferable.IMAGE_PNG_FLAVOR)) {\r\n            ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n            ImageIO.write(Images.toBufferedImage(image), \"PNG\", buf);\r\n            return new ByteArrayInputStream(buf.toByteArray());\r\n        } else {\r\n            throw new UnsupportedFlavorException(flavor);\r\n        }\r\n\r\n}'),(3966,'getTransferDataFlavors()','org.jhotdraw.gui.datatransfer.ImageTransferable.getTransferDataFlavors()','397','org.jhotdraw.gui.datatransfer.ImageTransferable','public DataFlavor[] getTransferDataFlavors() {\r\n    return new DataFlavor[]{ DataFlavor.imageFlavor, ImageTransferable.IMAGE_PNG_FLAVOR };\r\n}'),(3967,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.ImageTransferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','397','org.jhotdraw.gui.datatransfer.ImageTransferable','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return (flavor.equals(DataFlavor.imageFlavor)) || (flavor.equals(ImageTransferable.IMAGE_PNG_FLAVOR));\r\n}'),(3968,'-init-(java.awt.datatransfer.DataFlavor,byte[])','org.jhotdraw.gui.datatransfer.InputStreamTransferable.-init-(java.awt.datatransfer.DataFlavor,byte[])','398','org.jhotdraw.gui.datatransfer.InputStreamTransferable','/**\r\n * Creates a new instance.\r\n */\r\npublic InputStreamTransferable(DataFlavor flavor, byte[] data) {\r\n    this(new DataFlavor[]{ flavor }, data);\r\n}'),(3969,'-init-(java.awt.datatransfer.DataFlavor[],byte[])','org.jhotdraw.gui.datatransfer.InputStreamTransferable.-init-(java.awt.datatransfer.DataFlavor[],byte[])','398','org.jhotdraw.gui.datatransfer.InputStreamTransferable','public InputStreamTransferable(DataFlavor[] flavors, byte[] data) {\r\n    super(flavors);\r\n    this.data = data;\r\n}'),(3970,'getTransferData(java.awt.datatransfer.DataFlavor)','org.jhotdraw.gui.datatransfer.InputStreamTransferable.getTransferData(java.awt.datatransfer.DataFlavor)','398','org.jhotdraw.gui.datatransfer.InputStreamTransferable','public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n    if (!(isDataFlavorSupported(flavor))) {\r\n        throw new UnsupportedFlavorException(flavor);\r\n    }\r\n    return new ByteArrayInputStream(data);\r\n}'),(3971,'-init-(org.jhotdraw.gui.JSheet)','org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet)','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source) {\r\n    super(source);\r\n}'),(3972,'-init-(org.jhotdraw.gui.JSheet,javax.swing.JFileChooser,int,java.lang.Object)','org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet,javax.swing.JFileChooser,int,java.lang.Object)','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source, JFileChooser fileChooser, int option, Object value) {\r\n    super(source);\r\n    this.pane = fileChooser;\r\n    this.option = option;\r\n    this.value = value;\r\n}'),(3973,'-init-(org.jhotdraw.gui.JSheet,javax.swing.JOptionPane,int,java.lang.Object,java.lang.Object)','org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet,javax.swing.JOptionPane,int,java.lang.Object,java.lang.Object)','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source, JOptionPane optionPane, int option, Object value, Object inputValue) {\r\n    super(source);\r\n    this.pane = optionPane;\r\n    this.option = option;\r\n    this.value = value;\r\n    this.inputValue = inputValue;\r\n}'),(3974,'getFileChooser()','org.jhotdraw.gui.event.SheetEvent.getFileChooser()','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Returns the JFileChooser pane on the sheet.\r\n */\r\npublic JFileChooser getFileChooser() {\r\n    return ((JFileChooser) (pane));\r\n}'),(3975,'getInputValue()','org.jhotdraw.gui.event.SheetEvent.getInputValue()','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Returns the input value that the JOptionPane returned, if it wants input.\r\n */\r\npublic Object getInputValue() {\r\n    return inputValue;\r\n}'),(3976,'getOption()','org.jhotdraw.gui.event.SheetEvent.getOption()','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Returns the option that the JFileChooser or JOptionPane returned.\r\n */\r\npublic int getOption() {\r\n    return option;\r\n}'),(3977,'getOptionPane()','org.jhotdraw.gui.event.SheetEvent.getOptionPane()','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Returns the JOptionPane pane on the sheet.\r\n */\r\npublic JOptionPane getOptionPane() {\r\n    return ((JOptionPane) (pane));\r\n}'),(3978,'getPane()','org.jhotdraw.gui.event.SheetEvent.getPane()','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Returns the pane on the sheet. This is either a JFileChooser or a\r\n * JOptionPane.\r\n */\r\npublic JComponent getPane() {\r\n    return pane;\r\n}'),(3979,'getValue()','org.jhotdraw.gui.event.SheetEvent.getValue()','399','org.jhotdraw.gui.event.SheetEvent','/**\r\n * Returns the value that the JFileChooser or JOptionPane returned.\r\n */\r\npublic Object getValue() {\r\n    return value;\r\n}'),(3980,'optionSelected(org.jhotdraw.gui.event.SheetEvent)','org.jhotdraw.gui.event.SheetListener.optionSelected(org.jhotdraw.gui.event.SheetEvent)','400','org.jhotdraw.gui.event.SheetListener','/**\r\n * This method is invoked, when the user selected an option on the\r\n * JOptionPane or the JFileChooser pane on the JSheet.\r\n */\r\npublic void optionSelected(SheetEvent evt);'),(3981,'-init-()','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.-init-()','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','AbstractFontChooserModel() {\r\n}'),(3982,'addTreeModelListener(javax.swing.event.TreeModelListener)','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.addTreeModelListener(javax.swing.event.TreeModelListener)','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','// \r\n// Events\r\n// \r\n/**\r\n * Adds a listener for the TreeModelEvent posted after the tree changes.\r\n *\r\n * @see #removeTreeModelListener\r\n * @param l\r\n * 		the listener to add\r\n */\r\npublic void addTreeModelListener(TreeModelListener l) {\r\n    listenerList.add(TreeModelListener.class, l);\r\n}'),(3983,'fireTreeNodesChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.fireTreeNodesChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Notifies all listeners that have registered interest for\r\n * notification on this event type.  The event instance\r\n * is lazily created using the parameters passed into\r\n * the fire method.\r\n *\r\n * @param source\r\n * 		the node being changed\r\n * @param path\r\n * 		the path to the root node\r\n * @param childIndices\r\n * 		the indices of the changed elements\r\n * @param children\r\n * 		the changed elements\r\n * @see EventListenerList\r\n */\r\nprotected void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children) {\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    TreeModelEvent e = null;\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (TreeModelListener.class)) {\r\n            // Lazily create the event:\r\n            if (e == null)\r\n                e = new TreeModelEvent(source, path, childIndices, children);\r\n\r\n            ((TreeModelListener) (listeners[(i + 1)])).treeNodesChanged(e);\r\n        }\r\n    }\r\n}'),(3984,'fireTreeNodesInserted(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.fireTreeNodesInserted(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Notifies all listeners that have registered interest for\r\n * notification on this event type.  The event instance\r\n * is lazily created using the parameters passed into\r\n * the fire method.\r\n *\r\n * @param source\r\n * 		the node where new elements are being inserted\r\n * @param path\r\n * 		the path to the root node\r\n * @param childIndices\r\n * 		the indices of the new elements\r\n * @param children\r\n * 		the new elements\r\n * @see EventListenerList\r\n */\r\nprotected void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children) {\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    TreeModelEvent e = null;\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (TreeModelListener.class)) {\r\n            // Lazily create the event:\r\n            if (e == null)\r\n                e = new TreeModelEvent(source, path, childIndices, children);\r\n\r\n            ((TreeModelListener) (listeners[(i + 1)])).treeNodesInserted(e);\r\n        }\r\n    }\r\n}'),(3985,'fireTreeNodesRemoved(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.fireTreeNodesRemoved(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Notifies all listeners that have registered interest for\r\n * notification on this event type.  The event instance\r\n * is lazily created using the parameters passed into\r\n * the fire method.\r\n *\r\n * @param source\r\n * 		the node where elements are being removed\r\n * @param path\r\n * 		the path to the root node\r\n * @param childIndices\r\n * 		the indices of the removed elements\r\n * @param children\r\n * 		the removed elements\r\n * @see EventListenerList\r\n */\r\nprotected void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children) {\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    TreeModelEvent e = null;\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (TreeModelListener.class)) {\r\n            // Lazily create the event:\r\n            if (e == null)\r\n                e = new TreeModelEvent(source, path, childIndices, children);\r\n\r\n            ((TreeModelListener) (listeners[(i + 1)])).treeNodesRemoved(e);\r\n        }\r\n    }\r\n}'),(3986,'fireTreeStructureChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.fireTreeStructureChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Notifies all listeners that have registered interest for\r\n * notification on this event type.  The event instance\r\n * is lazily created using the parameters passed into\r\n * the fire method.\r\n *\r\n * @param source\r\n * 		the node where the tree model has changed\r\n * @param path\r\n * 		the path to the root node\r\n * @param childIndices\r\n * 		the indices of the affected elements\r\n * @param children\r\n * 		the affected elements\r\n * @see EventListenerList\r\n */\r\nprotected void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children) {\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    TreeModelEvent e = null;\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (TreeModelListener.class)) {\r\n            // Lazily create the event:\r\n            if (e == null)\r\n                e = new TreeModelEvent(source, path, childIndices, children);\r\n\r\n            ((TreeModelListener) (listeners[(i + 1)])).treeStructureChanged(e);\r\n        }\r\n    }\r\n}'),(3987,'fireTreeStructureChanged(java.lang.Object,javax.swing.tree.TreePath)','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.fireTreeStructureChanged(java.lang.Object,javax.swing.tree.TreePath)','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/* Notifies all listeners that have registered interest for\nnotification on this event type.  The event instance \nis lazily created using the parameters passed into \nthe fire method.\n\n@param source the node where the tree model has changed\n@param path the path to the root node\n@see EventListenerList\n */\r\nprotected void fireTreeStructureChanged(Object source, TreePath path) {\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    TreeModelEvent e = null;\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (TreeModelListener.class)) {\r\n            // Lazily create the event:\r\n            if (e == null)\r\n                e = new TreeModelEvent(source, path);\r\n\r\n            ((TreeModelListener) (listeners[(i + 1)])).treeStructureChanged(e);\r\n        }\r\n    }\r\n}'),(3988,'getListeners(java.lang.Class)','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.getListeners(java.lang.Class)','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Returns an array of all the objects currently registered\r\n * as <code><em>Foo</em>Listener</code>s\r\n * upon this model.\r\n * <code><em>Foo</em>Listener</code>s are registered using the\r\n * <code>add<em>Foo</em>Listener</code> method.\r\n *\r\n * <p>\r\n *\r\n * You can specify the <code>listenerType</code> argument\r\n * with a class literal,\r\n * such as\r\n * <code><em>Foo</em>Listener.class</code>.\r\n * For example, you can query a\r\n * <code>DefaultTreeModel</code> <code>m</code>\r\n * for its tree model listeners with the following code:\r\n *\r\n * <pre>TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));</pre>\r\n *\r\n * If no such listeners exist, this method returns an empty array.\r\n *\r\n * @param listenerType\r\n * 		the type of listeners requested; this parameter\r\n * 		should specify an interface that descends from\r\n * 		<code>java.util.EventListener</code>\r\n * @return an array of all objects registered as\r\n<code><em>Foo</em>Listener</code>s on this component,\r\nor an empty array if no such\r\nlisteners have been added\r\n * @exception ClassCastException if <code>listenerType</code>\r\ndoesnt specify a class or interface that implements\r\n<code>java.util.EventListener</code>\r\n * @see #getTreeModelListeners\r\n * @since 1.3\r\n */\r\npublic <T extends EventListener> T[] getListeners(Class<T> listenerType) {\r\n    return listenerList.getListeners(listenerType);\r\n}'),(3989,'getTreeModelListeners()','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.getTreeModelListeners()','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Returns an array of all the tree model listeners\r\n * registered on this model.\r\n *\r\n * @return all of this models <code>TreeModelListener</code>s\r\nor an empty\r\narray if no tree model listeners are currently registered\r\n * @see #addTreeModelListener\r\n * @see #removeTreeModelListener\r\n * @since 1.4\r\n */\r\npublic TreeModelListener[] getTreeModelListeners() {\r\n    return ((TreeModelListener[]) (listenerList.getListeners(TreeModelListener.class)));\r\n}'),(3990,'removeTreeModelListener(javax.swing.event.TreeModelListener)','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel.removeTreeModelListener(javax.swing.event.TreeModelListener)','401','org.jhotdraw.gui.fontchooser.AbstractFontChooserModel','/**\r\n * Removes a listener previously added with <B>addTreeModelListener()</B>.\r\n *\r\n * @see #addTreeModelListener\r\n * @param l\r\n * 		the listener to remove\r\n */\r\npublic void removeTreeModelListener(TreeModelListener l) {\r\n    listenerList.remove(TreeModelListener.class, l);\r\n}'),(3991,'-init-()','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.-init-()','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public DefaultFontChooserModel() {\r\n    root = new DefaultMutableTreeNode();\r\n}'),(3992,'-init-(java.awt.Font[])','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.-init-(java.awt.Font[])','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public DefaultFontChooserModel(Font[] fonts) {\r\n    root = new DefaultMutableTreeNode();\r\n    setFonts(fonts);\r\n}'),(3993,'collectFamiliesNamed(java.util.ArrayList,java.lang.String[])','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.collectFamiliesNamed(java.util.ArrayList,java.lang.String[])','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','protected ArrayList<FontFamilyNode> collectFamiliesNamed(ArrayList<FontFamilyNode> families, String... names) {\r\n    ArrayList<FontFamilyNode> coll = new ArrayList<FontFamilyNode>();\r\n    HashSet<String> nameMap = new HashSet<String>();\r\n    nameMap.addAll(Arrays.asList(names));\r\n    for (FontFamilyNode family : families) {\r\n        String fName = family.getName();\r\n        if (nameMap.contains(family.getName())) {\r\n            coll.add(family.clone());\r\n        }\r\n    }\r\n    return coll;\r\n}'),(3994,'getChild(java.lang.Object,int)','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.getChild(java.lang.Object,int)','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public Object getChild(Object parent, int index) {\r\n    return ((TreeNode) (parent)).getChildAt(index);\r\n}'),(3995,'getChildCount(java.lang.Object)','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.getChildCount(java.lang.Object)','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public int getChildCount(Object parent) {\r\n    return ((TreeNode) (parent)).getChildCount();\r\n}'),(3996,'getIndexOfChild(java.lang.Object,java.lang.Object)','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.getIndexOfChild(java.lang.Object,java.lang.Object)','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public int getIndexOfChild(Object parent, Object child) {\r\n    return ((TreeNode) (parent)).getIndex(((TreeNode) (child)));\r\n}'),(3997,'getRoot()','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.getRoot()','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public Object getRoot() {\r\n    return root;\r\n}'),(3998,'isEditable(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.isEditable(javax.swing.tree.MutableTreeNode)','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public boolean isEditable(MutableTreeNode node) {\r\n    boolean result = true;\r\n    if (node instanceof FontFaceNode) {\r\n        result &= ((FontFaceNode) (node)).isEditable();\r\n        node = ((MutableTreeNode) (node.getParent()));\r\n    }\r\n    if (result && (node instanceof FontFamilyNode)) {\r\n        result &= ((FontFamilyNode) (node)).isEditable();\r\n        node = ((MutableTreeNode) (node.getParent()));\r\n    }\r\n    if (result && (node instanceof FontCollectionNode)) {\r\n        result &= ((FontFamilyNode) (node)).isEditable();\r\n    }\r\n    return result;\r\n}'),(3999,'isLeaf(java.lang.Object)','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.isLeaf(java.lang.Object)','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public boolean isLeaf(Object node) {\r\n    return ((TreeNode) (node)).isLeaf();\r\n}'),(4000,'setFonts(java.awt.Font[])','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.setFonts(java.awt.Font[])','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','/**\r\n * Sets the fonts of the DefaultFontChooserModel.\r\n * <p>\r\n * Fires treeStructureChanged event on the root node.\r\n *\r\n * @param fonts\r\n * 		\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic void setFonts(Font[] fonts) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.gui.Labels\");\r\n    // collect families and sort them alphabetically\r\n    ArrayList<FontFamilyNode> families = new ArrayList<FontFamilyNode>();\r\n    HashMap<String, FontFamilyNode> familyMap = new HashMap<String, FontFamilyNode>();\r\n    for (Font f : fonts) {\r\n        String familyName = f.getFamily();\r\n        FontFamilyNode family;\r\n        if (familyMap.containsKey(familyName)) {\r\n            family = familyMap.get(familyName);\r\n        } else {\r\n            family = new FontFamilyNode(familyName);\r\n            familyMap.put(familyName, family);\r\n        }\r\n        family.add(new FontFaceNode(f));\r\n    }\r\n    families.addAll(familyMap.values());\r\n    Collections.sort(families);\r\n    // group families into collections\r\n    root.removeAllChildren();\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.allFonts\"), ((ArrayList<FontFamilyNode>) (families.clone()))));\r\n    // Web-save fonts\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.web\"), collectFamiliesNamed(families, \"Arial\", \"Arial Black\", \"Comic Sans MS\", \"Georgia\", \"Impact\", \"Times New Roman\", \"Trebuchet MS\", \"Verdana\", \"Webdings\")));\r\n    /* // PDF Fonts\n    root.add(\n    new FontCollectionNode(labels.getString(\"FontCollection.pdf\"), collectFamiliesNamed(families,\n    \"Andale Mono\",\n    \"Courier\",\n    \"Helvetica\",\n    \"Symbol\",\n    \"Times\",\n    \"Zapf Dingbats\")));\n     */\r\n    // Java System fonts\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.system\"), collectFamiliesNamed(families, \"Dialog\", \"DialogInput\", \"Monospaced\", \"SansSerif\", \"Serif\")));\r\n    // Serif fonts\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.serif\"), // Fonts on Mac OS X 10.5:\r\n    // Fonts on Windows XP:\r\n    // Fonts on Windows Vista\r\n    collectFamiliesNamed(families, \"Adobe Caslon Pro\", \"Adobe Garamond Pro\", \"American Typewriter\", \"Arno Pro\", \"Baskerville\", \"Baskerville Old Face\", \"Bell MT\", \"Big Caslon\", \"Bodoni SvtyTwo ITC TT\", \"Bodoni SvtyTwo OS ITC TT\", \"Bodoni SvtyTwo SC ITC TT\", \"Book Antiqua\", \"Bookman Old Style\", \"Calisto MT\", \"Chaparral Pro\", \"Century\", \"Century Schoolbook\", \"Cochin\", \"Footlight MT Light\", \"Garamond\", \"Garamond Premier Pro\", \"Georgia\", \"Goudy Old Style\", \"Hoefler Text\", \"Lucida Bright\", \"Lucida Fax\", \"Minion Pro\", \"Palatino\", \"Times\", \"Times New Roman\", \"Palatino Linotype\", \"Bitstream Vera Serif Bold\", \"Bodoni MT\", \"Bodoni MT Black\", \"Bodoni MT Condensed\", \"Californian FB\", \"Cambria\", \"Cambria Math\", \"Centaur\", \"Constantia\", \"High Tower Text\", \"Perpetua\", \"Poor Richard\", \"Rockwell Condensed\", \"Slimbach-Black\", \"Slimbach-BlackItalic\", \"Slimbach-Bold\", \"Slimbach-BoldItalic\", \"Slimbach-Book\", \"Slimbach-BookItalic\", \"Slimbach-Medium\", \"Slimbach-MediumItalic\", \"Sylfaen\", \"Andalus\", \"Angsana New\", \"AngsanaUPC\", \"Arabic Typesetting\", \"Cambria\", \"Cambria Math\", \"Constantia\", \"DaunPenh\", \"David\", \"DilleniaUPC\", \"EucrosiaUPC\", \"Frank Ruehl\", \"IrisUPC\", \"Iskoola Pota\", \"JasmineUPC\", \"KodchiangUPC\", \"Narkisim\")));\r\n    // Sans Serif\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.sansSerif\"), // Fonts on Mac OS X 10.5:\r\n    // Fonts on Windows XP:\r\n    // Fonts on Windows Vista:\r\n    collectFamiliesNamed(families, \"Abadi MT Condensed Extra Bold\", \"Abadi MT Condensed Light\", \"Al Bayan\", \"AppleGothic\", \"Arial\", \"Arial Black\", \"Arial Narrow\", \"Arial Rounded MT Bold\", \"Arial Unicode MS\", \"Bell Gothic Std\", \"Blair MdITC TT\", \"Century Gothic\", \"Frutiger\", \"Futura\", \"Geneva\", \"Gill Sans\", \"Gulim\", \"Helvetica\", \"Helvetica Neue\", \"Lucida Grande\", \"Lucida Sans\", \"Microsoft Sans Serif\", \"Myriad Pro\", \"News Gothic\", \"Tahoma\", \"Trebuchet MS\", \"Verdana\", \"Franklin Gothic Medium\", \"Lucida Sans Unicode\", \"Agency FB\", \"Berlin Sans FB\", \"Berlin Sans FB Demi Bold\", \"Bitstream Vera Sans Bold\", \"Calibri\", \"Candara\", \"Corbel\", \"Estrangelo Edessa\", \"Eras Bold ITC\", \"Eras Demi ITC\", \"Eras Light ITC\", \"Eras Medium ITC\", \"Franklin Gothic Book\", \"Franklin Gothic Demi\", \"Franklin Gothic Demi Cond\", \"Franklin Gothic Heavy\", \"Franklin Gothic Medium Cond\", \"Gill Sans MT\", \"Gill Sans MT Condensed\", \"Gill Sans MT Ext Condensed Bold\", \"Maiandra GD\", \"MS Reference Sans...\", \"Tw Cen MT\", \"Tw Cen MT Condensed\", \"Tw Cen MT Condensed Extra Bold\", \"Aharoni\", \"Browallia New\", \"BrowalliaUPC\", \"Calibri\", \"Candara\", \"Corbel\", \"Cordia New\", \"CordiaUPC\", \"DokChampa\", \"Dotum\", \"Estrangelo Edessa\", \"Euphemia\", \"Freesia UPC\", \"Gautami\", \"Gisha\", \"Kalinga\", \"Kartika\", \"Levenim MT\", \"LilyUPC\", \"Malgun Gothic\", \"Meiryo\", \"Miriam\", \"Segoe UI\")));\r\n    // Scripts\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.script\"), // Fonts on Mac OS X 10.5:\r\n    // Fonts on Windows XP\r\n    // Fonts on Windows Vista\r\n    collectFamiliesNamed(families, \"Apple Chancery\", \"Bickham Script Pro\", \"Blackmoor LET\", \"Bradley Hand ITC TT\", \"Brush Script MT\", \"Brush Script Std\", \"Chalkboard\", \"Charlemagne Std\", \"Comic Sans MS\", \"Curlz MT\", \"Edwardian Script ITC\", \"Footlight MT Light\", \"Giddyup Std\", \"Handwriting - Dakota\", \"Harrington\", \"Herculanum\", \"Kokonor\", \"Lithos Pro\", \"Lucida Blackletter\", \"Lucida Calligraphy\", \"Lucida Handwriting\", \"Marker Felt\", \"Matura MT Script Capitals\", \"Mistral\", \"Monotype Corsiva\", \"Party LET\", \"Papyrus\", \"Santa Fe LET\", \"Savoye LET\", \"SchoolHouse Cursive B\", \"SchoolHouse Printed A\", \"Skia\", \"Snell Roundhand\", \"Tekton Pro\", \"Trajan Pro\", \"Zapfino\", \"Blackadder ITC\", \"Bradley Hand ITC\", \"Chiller\", \"Freestyle Script\", \"French Script MT\", \"Gigi\", \"Harlow Solid Italic\", \"Informal Roman\", \"Juice ITC\", \"Kristen ITC\", \"Kunstler Script\", \"Magneto Bold\", \"Maiandra GD\", \"Old English Text\", \"Palace Script MT\", \"Parchment\", \"Pristina\", \"Rage Italic\", \"Ravie\", \"Script MT Bold\", \"Tempus Sans ITC\", \"Viner Hand ITC\", \"Vivaldi Italic\", \"Vladimir Script\", \"Segoe Print\", \"Segoe Script\")));\r\n    // Monospaced\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.monospaced\"), // Fonts on Mac OS X 10.5:\r\n    // Fonts on Windows XP:\r\n    // Fonts on Windows Vista\r\n    collectFamiliesNamed(families, \"Andale Mono\", \"Courier\", \"Courier New\", \"Letter Gothic Std\", \"Lucida Sans Typewriter\", \"Monaco\", \"OCR A Std\", \"Orator Std\", \"Prestige Elite Std\", \"Lucida Console\", \"Bitstream Vera S...\", \"Consolas\", \"OCR A Extended\", \"OCR B\", \"Consolas\", \"DotumChe\", \"Miriam Fixed\", \"Rod\")));\r\n    // Decorative\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.decorative\"), // Fonts on Mac OS X 10.5:\r\n    // Fonts on Windows XP\r\n    // Fonts on Windows Vista:\r\n    collectFamiliesNamed(families, \"Academy Engraved LET\", \"Arial Black\", \"Bank Gothic\", \"Bauhaus 93\", \"Bernard MT Condensed\", \"Birch Std\", \"Blackoak Std\", \"BlairMdITC TT\", \"Bordeaux Roman Bold LET\", \"Braggadocio\", \"Britannic Bold\", \"Capitals\", \"Colonna MT\", \"Cooper Black\", \"Cooper Std\", \"Copperplate\", \"Copperplate Gothic Bold\", \"Copperplate Gothic Light\", \"Cracked\", \"Desdemona\", \"Didot\", \"Eccentric Std\", \"Engravers MT\", \"Eurostile\", \"Gill Sans Ultra Bold\", \"Gloucester MT Extra Condensed\", \"Haettenschweiler\", \"Hobo Std\", \"Impact\", \"Imprint MT Shadow\", \"Jazz LET\", \"Kino MT\", \"Matura MT Script Capitals\", \"Mesquite Std\", \"Modern No. 20\", \"Mona Lisa Solid ITC TT\", \"MS Gothic\", \"Nueva Std\", \"Onyx\", \"Optima\", \"Perpetua Titling MT\", \"Playbill\", \"Poplar Std\", \"PortagoITC TT\", \"Princetown LET\", \"Rockwell\", \"Rockwell Extra Bold\", \"Rosewood Std\", \"Santa Fe LET\", \"Stencil\", \"Stencil Std\", \"Stone Sans ITC TT\", \"Stone Sans OS ITC TT\", \"Stone Sans Sem ITC TT\", \"Stone Sans Sem OS ITCTT\", \"Stone Sans Sem OS ITC TT\", \"Synchro LET\", \"Wide Latin\", \"Algerian\", \"Bodoni MT Black\", \"Bodoni MT Poster Compressed\", \"Broadway\", \"Castellar\", \"Elephant\", \"Felix Titling\", \"Franklin Gothic Heavy\", \"Gill Sans MT Ext Condensed Bold\", \"Gill Sans Ultra Bold Condensed\", \"Goudy Stout\", \"Jokerman\", \"Juice ITC\", \"Magneto\", \"Magneto Bold\", \"Niagara Engraved\", \"Niagara Solid\", \"Poor Richard\", \"Ravie\", \"Rockwell Condensed\", \"Showcard Gothic\", \"Slimbach-Black\", \"Slimbach-BlackItalic\", \"Snap ITC\")));\r\n    root.add(new FontCollectionNode(labels.getString(\"FontCollection.symbols\"), // Fonts on Mac OS X 10.5:\r\n    // Fonts on Windows XP\r\n    // Fonts on Windows Vista\r\n    collectFamiliesNamed(families, \"Apple Symbols\", \"Blackoack Std\", \"Bodoni Ornaments ITC TT\", \"EuropeanPi\", \"Monotype Sorts\", \"MT Extra\", \"Symbol\", \"Type Embellishments One LET\", \"Webdings\", \"Wingdings\", \"Wingdings 2\", \"Wingdings 3\", \"Zapf Dingbats\", \"Bookshelf Symbol\")));\r\n    // Collect font families, which are not in one of the other collections\r\n    // (except the collection AllFonts).\r\n    FontCollectionNode others = new FontCollectionNode(labels.getString(\"FontCollection.other\"));\r\n    HashSet<FontFamilyNode> otherFamilySet = new HashSet<FontFamilyNode>();\r\n    otherFamilySet.addAll(families);\r\n    for (int i = 1, n = root.getChildCount(); i < n; i++) {\r\n        FontCollectionNode fcn = ((FontCollectionNode) (root.getChildAt(i)));\r\n        for (FontFamilyNode ffn : fcn.families()) {\r\n            otherFamilySet.remove(ffn);\r\n        }\r\n    }\r\n    ArrayList<FontFamilyNode> otherFamilies = new ArrayList<FontFamilyNode>();\r\n    for (FontFamilyNode ffn : otherFamilySet) {\r\n        otherFamilies.add(ffn.clone());\r\n    }\r\n    Collections.sort(otherFamilies);\r\n    others.addAll(otherFamilies);\r\n    root.add(others);\r\n    fireTreeStructureChanged(this, new TreePath(root));\r\n}'),(4001,'valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel.valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)','403','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel','public void valueForPathChanged(TreePath path, Object newValue) {\r\n    throw new UnsupportedOperationException(\"Not supported yet.\");\r\n}'),(4002,'-init-()','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource.-init-()','402','org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource','UIResource() {\r\n}'),(4003,'isEditable(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontChooserModel.isEditable(javax.swing.tree.MutableTreeNode)','404','org.jhotdraw.gui.fontchooser.FontChooserModel','/**\r\n * Returns <code>true</code> if <code>node</code> is editable by the user.\r\n * This method returns true, if the node and all its parents are editable.\r\n *\r\n * @param node\r\n * 		a node in the tree, obtained from this data source\r\n * @return true if <code>node</code> is editable\r\n */\r\npublic boolean isEditable(MutableTreeNode node);'),(4004,'-init-(java.lang.String)','org.jhotdraw.gui.fontchooser.FontCollectionNode.-init-(java.lang.String)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public FontCollectionNode(String name) {\r\n    this.name = name;\r\n    children = new ArrayList<FontFamilyNode>();\r\n}'),(4005,'-init-(java.lang.String,java.util.ArrayList)','org.jhotdraw.gui.fontchooser.FontCollectionNode.-init-(java.lang.String,java.util.ArrayList)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public FontCollectionNode(String name, ArrayList<FontFamilyNode> families) {\r\n    this.name = name;\r\n    this.children = families;\r\n}'),(4006,'add(org.jhotdraw.gui.fontchooser.FontFamilyNode)','org.jhotdraw.gui.fontchooser.FontCollectionNode.add(org.jhotdraw.gui.fontchooser.FontFamilyNode)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void add(FontFamilyNode newChild) {\r\n    insert(newChild, getChildCount());\r\n}'),(4007,'addAll(java.util.Collection)','org.jhotdraw.gui.fontchooser.FontCollectionNode.addAll(java.util.Collection)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void addAll(Collection<FontFamilyNode> c) {\r\n    children.addAll(c);\r\n}'),(4008,'children()','org.jhotdraw.gui.fontchooser.FontCollectionNode.children()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public Enumeration children() {\r\n    return Collections.enumeration(children);\r\n}'),(4009,'clone()','org.jhotdraw.gui.fontchooser.FontCollectionNode.clone()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','@Override\r\npublic FontCollectionNode clone() {\r\n    FontCollectionNode that;\r\n    try {\r\n        that = ((FontCollectionNode) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(\"Clone failed\");\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n    that.parent = null;\r\n    that.children = new ArrayList<FontFamilyNode>();\r\n    for (FontFamilyNode f : this.children) {\r\n        that.insert(f.clone(), that.getChildCount());\r\n    }\r\n    return that;\r\n}'),(4010,'compareTo(org.jhotdraw.gui.fontchooser.FontCollectionNode)','org.jhotdraw.gui.fontchooser.FontCollectionNode.compareTo(org.jhotdraw.gui.fontchooser.FontCollectionNode)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public int compareTo(FontCollectionNode that) {\r\n    return Collator.getInstance().compare(this.name, that.name);\r\n}'),(4011,'families()','org.jhotdraw.gui.fontchooser.FontCollectionNode.families()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public List<FontFamilyNode> families() {\r\n    return Collections.unmodifiableList(children);\r\n}'),(4012,'getAllowsChildren()','org.jhotdraw.gui.fontchooser.FontCollectionNode.getAllowsChildren()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public boolean getAllowsChildren() {\r\n    return true;\r\n}'),(4013,'getChildAt(int)','org.jhotdraw.gui.fontchooser.FontCollectionNode.getChildAt(int)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public FontFamilyNode getChildAt(int childIndex) {\r\n    return children.get(childIndex);\r\n}'),(4014,'getChildCount()','org.jhotdraw.gui.fontchooser.FontCollectionNode.getChildCount()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public int getChildCount() {\r\n    return children.size();\r\n}'),(4015,'getIndex(javax.swing.tree.TreeNode)','org.jhotdraw.gui.fontchooser.FontCollectionNode.getIndex(javax.swing.tree.TreeNode)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public int getIndex(TreeNode node) {\r\n    return children.indexOf(node);\r\n}'),(4016,'getName()','org.jhotdraw.gui.fontchooser.FontCollectionNode.getName()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public String getName() {\r\n    return name;\r\n}'),(4017,'getParent()','org.jhotdraw.gui.fontchooser.FontCollectionNode.getParent()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public MutableTreeNode getParent() {\r\n    return parent;\r\n}'),(4018,'insert(javax.swing.tree.MutableTreeNode,int)','org.jhotdraw.gui.fontchooser.FontCollectionNode.insert(javax.swing.tree.MutableTreeNode,int)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void insert(MutableTreeNode newChild, int index) {\r\n    FontCollectionNode oldParent = ((FontCollectionNode) (newChild.getParent()));\r\n    if (oldParent != null) {\r\n        oldParent.remove(newChild);\r\n    }\r\n    newChild.setParent(this);\r\n    children.add(index, ((FontFamilyNode) (newChild)));\r\n}'),(4019,'isEditable()','org.jhotdraw.gui.fontchooser.FontCollectionNode.isEditable()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public boolean isEditable() {\r\n    return isEditable;\r\n}'),(4020,'isLeaf()','org.jhotdraw.gui.fontchooser.FontCollectionNode.isLeaf()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public boolean isLeaf() {\r\n    return children.isEmpty();\r\n}'),(4021,'isNodeChild(javax.swing.tree.TreeNode)','org.jhotdraw.gui.fontchooser.FontCollectionNode.isNodeChild(javax.swing.tree.TreeNode)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','// \r\n// Child Queries\r\n// \r\n/**\r\n * Returns true if <code>aNode</code> is a child of this node.  If\r\n * <code>aNode</code> is null, this method returns false.\r\n *\r\n * @return true if <code>aNode</code> is a child of this node; false if\r\n<code>aNode</code> is null\r\n */\r\npublic boolean isNodeChild(TreeNode aNode) {\r\n    boolean retval;\r\n    if (aNode == null) {\r\n        retval = false;\r\n    } else {\r\n        if ((getChildCount()) == 0) {\r\n            retval = false;\r\n        } else {\r\n            retval = (aNode.getParent()) == (this);\r\n        }\r\n    }\r\n    return retval;\r\n}'),(4022,'remove(int)','org.jhotdraw.gui.fontchooser.FontCollectionNode.remove(int)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void remove(int childIndex) {\r\n    MutableTreeNode child = ((MutableTreeNode) (getChildAt(childIndex)));\r\n    children.remove(childIndex);\r\n    child.setParent(null);\r\n}'),(4023,'remove(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontCollectionNode.remove(javax.swing.tree.MutableTreeNode)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void remove(MutableTreeNode aChild) {\r\n    if (aChild == null) {\r\n        throw new IllegalArgumentException(\"argument is null\");\r\n    }\r\n    if (!(isNodeChild(aChild))) {\r\n        throw new IllegalArgumentException(\"argument is not a child\");\r\n    }\r\n    remove(getIndex(aChild));// linear search\r\n\r\n}'),(4024,'removeFromParent()','org.jhotdraw.gui.fontchooser.FontCollectionNode.removeFromParent()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void removeFromParent() {\r\n    if ((parent) != null) {\r\n        parent.remove(this);\r\n    }\r\n}'),(4025,'setEditable(boolean)','org.jhotdraw.gui.fontchooser.FontCollectionNode.setEditable(boolean)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void setEditable(boolean newValue) {\r\n    isEditable = newValue;\r\n}'),(4026,'setParent(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontCollectionNode.setParent(javax.swing.tree.MutableTreeNode)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void setParent(MutableTreeNode newParent) {\r\n    this.parent = newParent;\r\n}'),(4027,'setUserObject(java.lang.Object)','org.jhotdraw.gui.fontchooser.FontCollectionNode.setUserObject(java.lang.Object)','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','public void setUserObject(Object object) {\r\n    throw new UnsupportedOperationException(\"Not supported.\");\r\n}'),(4028,'toString()','org.jhotdraw.gui.fontchooser.FontCollectionNode.toString()','405','org.jhotdraw.gui.fontchooser.FontCollectionNode','@Override\r\npublic String toString() {\r\n    return name;\r\n}'),(4029,'-init-(java.awt.Font)','org.jhotdraw.gui.fontchooser.FontFaceNode.-init-(java.awt.Font)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public FontFaceNode(Font typeface) {\r\n    this.typeface = typeface;\r\n    this.name = beautifyName(typeface.getPSName());\r\n}'),(4030,'beautifyName(java.lang.String)','org.jhotdraw.gui.fontchooser.FontFaceNode.beautifyName(java.lang.String)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','protected String beautifyName(String name) {\r\n    // Beautify the name\r\n    int p = name.lastIndexOf(-);\r\n    if (p != (-1)) {\r\n        name = name.substring((p + 1));\r\n        String lcName = name.toLowerCase();\r\n        if (lcName.equals(\"plain\")) {\r\n            name = \"Plain\";\r\n        } else\r\n            if (lcName.equals(\"bolditalic\")) {\r\n                name = \"Bold Italic\";\r\n            } else\r\n                if (lcName.equals(\"italic\")) {\r\n                    name = \"Italic\";\r\n                } else\r\n                    if (lcName.equals(\"bold\")) {\r\n                        name = \"Bold\";\r\n                    }\r\n\r\n\r\n\r\n    } else {\r\n        String lcName = name.toLowerCase();\r\n        if (lcName.endsWith(\"plain\")) {\r\n            name = \"Plain\";\r\n        } else\r\n            if (lcName.endsWith(\"boldoblique\")) {\r\n                name = \"Bold Oblique\";\r\n            } else\r\n                if (lcName.endsWith(\"bolditalic\")) {\r\n                    name = \"Bold Italic\";\r\n                } else\r\n                    if (lcName.endsWith(\"bookita\")) {\r\n                        name = \"Book Italic\";\r\n                    } else\r\n                        if (lcName.endsWith(\"bookit\")) {\r\n                            name = \"Book Italic\";\r\n                        } else\r\n                            if (lcName.endsWith(\"demibold\")) {\r\n                                name = \"Demi Bold\";\r\n                            } else\r\n                                if (lcName.endsWith(\"semiita\")) {\r\n                                    name = \"Semi Italic\";\r\n                                } else\r\n                                    if (lcName.endsWith(\"italic\")) {\r\n                                        name = \"Italic\";\r\n                                    } else\r\n                                        if (lcName.endsWith(\"book\")) {\r\n                                            name = \"Book\";\r\n                                        } else\r\n                                            if (lcName.endsWith(\"bold\")) {\r\n                                                name = \"Bold\";\r\n                                            } else\r\n                                                if (lcName.endsWith(\"bol\")) {\r\n                                                    name = \"Bold\";\r\n                                                } else\r\n                                                    if (lcName.endsWith(\"oblique\")) {\r\n                                                        name = \"Oblique\";\r\n                                                    } else\r\n                                                        if (lcName.endsWith(\"regular\")) {\r\n                                                            name = \"Regular\";\r\n                                                        } else\r\n                                                            if (lcName.endsWith(\"semi\")) {\r\n                                                                name = \"Semi\";\r\n                                                            } else {\r\n                                                                name = \"Plain\";\r\n                                                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    char prev = name.charAt(0);\r\n    buf.append(prev);\r\n    for (int i = 1; i < (name.length()); i++) {\r\n        char ch = name.charAt(i);\r\n        if (((((prev !=  ) && (prev != -)) && (Character.isUpperCase(ch))) && (!(Character.isUpperCase(prev)))) || ((Character.isDigit(ch)) && (!(Character.isDigit(prev))))) {\r\n            buf.append( );\r\n        }\r\n        buf.append(ch);\r\n        prev = ch;\r\n    }\r\n    name = buf.toString();\r\n    return name;\r\n}'),(4031,'children()','org.jhotdraw.gui.fontchooser.FontFaceNode.children()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','@SuppressWarnings(\"unchecked\")\r\npublic Enumeration children() {\r\n    return Collections.enumeration(Collections.EMPTY_LIST);\r\n}'),(4032,'clone()','org.jhotdraw.gui.fontchooser.FontFaceNode.clone()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','@Override\r\npublic FontFaceNode clone() {\r\n    FontFaceNode that;\r\n    try {\r\n        that = ((FontFaceNode) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(\"Clone failed\");\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n    that.parent = null;\r\n    return that;\r\n}'),(4033,'compareTo(org.jhotdraw.gui.fontchooser.FontFaceNode)','org.jhotdraw.gui.fontchooser.FontFaceNode.compareTo(org.jhotdraw.gui.fontchooser.FontFaceNode)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public int compareTo(FontFaceNode that) {\r\n    return this.name.compareTo(that.name);\r\n}'),(4034,'getAllowsChildren()','org.jhotdraw.gui.fontchooser.FontFaceNode.getAllowsChildren()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public boolean getAllowsChildren() {\r\n    return false;\r\n}'),(4035,'getChildAt(int)','org.jhotdraw.gui.fontchooser.FontFaceNode.getChildAt(int)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public TreeNode getChildAt(int childIndex) {\r\n    throw new IndexOutOfBoundsException((\"\" + childIndex));\r\n}'),(4036,'getChildCount()','org.jhotdraw.gui.fontchooser.FontFaceNode.getChildCount()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public int getChildCount() {\r\n    return 0;\r\n}'),(4037,'getFont()','org.jhotdraw.gui.fontchooser.FontFaceNode.getFont()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public Font getFont() {\r\n    return typeface;\r\n}'),(4038,'getIndex(javax.swing.tree.TreeNode)','org.jhotdraw.gui.fontchooser.FontFaceNode.getIndex(javax.swing.tree.TreeNode)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public int getIndex(TreeNode node) {\r\n    return -1;\r\n}'),(4039,'getName()','org.jhotdraw.gui.fontchooser.FontFaceNode.getName()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public String getName() {\r\n    return name;\r\n}'),(4040,'getParent()','org.jhotdraw.gui.fontchooser.FontFaceNode.getParent()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public TreeNode getParent() {\r\n    return parent;\r\n}'),(4041,'insert(javax.swing.tree.MutableTreeNode,int)','org.jhotdraw.gui.fontchooser.FontFaceNode.insert(javax.swing.tree.MutableTreeNode,int)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void insert(MutableTreeNode child, int index) {\r\n    throw new UnsupportedOperationException(\"Not allowed.\");\r\n}'),(4042,'isEditable()','org.jhotdraw.gui.fontchooser.FontFaceNode.isEditable()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public boolean isEditable() {\r\n    return false;\r\n}'),(4043,'isLeaf()','org.jhotdraw.gui.fontchooser.FontFaceNode.isLeaf()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public boolean isLeaf() {\r\n    return true;\r\n}'),(4044,'remove(int)','org.jhotdraw.gui.fontchooser.FontFaceNode.remove(int)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void remove(int index) {\r\n    throw new UnsupportedOperationException(\"Not allowed.\");\r\n}'),(4045,'remove(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontFaceNode.remove(javax.swing.tree.MutableTreeNode)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void remove(MutableTreeNode node) {\r\n    throw new UnsupportedOperationException(\"Not allowed.\");\r\n}'),(4046,'removeFromParent()','org.jhotdraw.gui.fontchooser.FontFaceNode.removeFromParent()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void removeFromParent() {\r\n    if ((parent) != null) {\r\n        parent.remove(this);\r\n    }\r\n}'),(4047,'setName(java.lang.String)','org.jhotdraw.gui.fontchooser.FontFaceNode.setName(java.lang.String)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void setName(String newValue) {\r\n    this.name = newValue;\r\n}'),(4048,'setParent(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontFaceNode.setParent(javax.swing.tree.MutableTreeNode)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void setParent(MutableTreeNode newParent) {\r\n    this.parent = ((FontFamilyNode) (newParent));\r\n}'),(4049,'setUserObject(java.lang.Object)','org.jhotdraw.gui.fontchooser.FontFaceNode.setUserObject(java.lang.Object)','406','org.jhotdraw.gui.fontchooser.FontFaceNode','public void setUserObject(Object object) {\r\n    throw new UnsupportedOperationException(\"Not allowed.\");\r\n}'),(4050,'toString()','org.jhotdraw.gui.fontchooser.FontFaceNode.toString()','406','org.jhotdraw.gui.fontchooser.FontFaceNode','@Override\r\npublic String toString() {\r\n    return name;\r\n}'),(4051,'-init-(java.lang.String)','org.jhotdraw.gui.fontchooser.FontFamilyNode.-init-(java.lang.String)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public FontFamilyNode(String name) {\r\n    this.name = name;\r\n}'),(4052,'add(org.jhotdraw.gui.fontchooser.FontFaceNode)','org.jhotdraw.gui.fontchooser.FontFamilyNode.add(org.jhotdraw.gui.fontchooser.FontFaceNode)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void add(FontFaceNode newChild) {\r\n    insert(newChild, getChildCount());\r\n}'),(4053,'children()','org.jhotdraw.gui.fontchooser.FontFamilyNode.children()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public Enumeration children() {\r\n    return Collections.enumeration(children);\r\n}'),(4054,'clone()','org.jhotdraw.gui.fontchooser.FontFamilyNode.clone()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','@Override\r\npublic FontFamilyNode clone() {\r\n    FontFamilyNode that;\r\n    try {\r\n        that = ((FontFamilyNode) (super.clone()));\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError error = new InternalError(\"Clone failed\");\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n    that.parent = null;\r\n    that.children = new ArrayList<FontFaceNode>();\r\n    for (FontFaceNode f : this.children) {\r\n        that.insert(f.clone(), that.getChildCount());\r\n    }\r\n    return that;\r\n}'),(4055,'compareTo(org.jhotdraw.gui.fontchooser.FontFamilyNode)','org.jhotdraw.gui.fontchooser.FontFamilyNode.compareTo(org.jhotdraw.gui.fontchooser.FontFamilyNode)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public int compareTo(FontFamilyNode that) {\r\n    return Collator.getInstance().compare(this.name, that.name);\r\n}'),(4056,'equals(java.lang.Object)','org.jhotdraw.gui.fontchooser.FontFamilyNode.equals(java.lang.Object)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','@Override\r\npublic boolean equals(Object o) {\r\n    if (o instanceof FontFamilyNode) {\r\n        FontFamilyNode that = ((FontFamilyNode) (o));\r\n        return that.name.equals(this.name);\r\n    }\r\n    return false;\r\n}'),(4057,'faces()','org.jhotdraw.gui.fontchooser.FontFamilyNode.faces()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public List<FontFaceNode> faces() {\r\n    return Collections.unmodifiableList(children);\r\n}'),(4058,'getAllowsChildren()','org.jhotdraw.gui.fontchooser.FontFamilyNode.getAllowsChildren()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public boolean getAllowsChildren() {\r\n    return true;\r\n}'),(4059,'getChildAt(int)','org.jhotdraw.gui.fontchooser.FontFamilyNode.getChildAt(int)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public FontFaceNode getChildAt(int childIndex) {\r\n    return children.get(childIndex);\r\n}'),(4060,'getChildCount()','org.jhotdraw.gui.fontchooser.FontFamilyNode.getChildCount()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public int getChildCount() {\r\n    return children.size();\r\n}'),(4061,'getIndex(javax.swing.tree.TreeNode)','org.jhotdraw.gui.fontchooser.FontFamilyNode.getIndex(javax.swing.tree.TreeNode)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public int getIndex(TreeNode node) {\r\n    return children.indexOf(node);\r\n}'),(4062,'getName()','org.jhotdraw.gui.fontchooser.FontFamilyNode.getName()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public String getName() {\r\n    return name;\r\n}'),(4063,'getParent()','org.jhotdraw.gui.fontchooser.FontFamilyNode.getParent()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public TreeNode getParent() {\r\n    return parent;\r\n}'),(4064,'hashCode()','org.jhotdraw.gui.fontchooser.FontFamilyNode.hashCode()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','@Override\r\npublic int hashCode() {\r\n    return name.hashCode();\r\n}'),(4065,'insert(javax.swing.tree.MutableTreeNode,int)','org.jhotdraw.gui.fontchooser.FontFamilyNode.insert(javax.swing.tree.MutableTreeNode,int)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void insert(MutableTreeNode newChild, int index) {\r\n    FontFamilyNode oldParent = ((FontFamilyNode) (newChild.getParent()));\r\n    if (oldParent != null) {\r\n        oldParent.remove(newChild);\r\n    }\r\n    newChild.setParent(this);\r\n    children.add(index, ((FontFaceNode) (newChild)));\r\n}'),(4066,'isEditable()','org.jhotdraw.gui.fontchooser.FontFamilyNode.isEditable()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public boolean isEditable() {\r\n    return true;\r\n}'),(4067,'isLeaf()','org.jhotdraw.gui.fontchooser.FontFamilyNode.isLeaf()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public boolean isLeaf() {\r\n    return children.isEmpty();\r\n}'),(4068,'isNodeChild(javax.swing.tree.TreeNode)','org.jhotdraw.gui.fontchooser.FontFamilyNode.isNodeChild(javax.swing.tree.TreeNode)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','// \r\n// Child Queries\r\n// \r\n/**\r\n * Returns true if <code>aNode</code> is a child of this node.  If\r\n * <code>aNode</code> is null, this method returns false.\r\n *\r\n * @return true if <code>aNode</code> is a child of this node; false if\r\n<code>aNode</code> is null\r\n */\r\npublic boolean isNodeChild(TreeNode aNode) {\r\n    boolean retval;\r\n    if (aNode == null) {\r\n        retval = false;\r\n    } else {\r\n        if ((getChildCount()) == 0) {\r\n            retval = false;\r\n        } else {\r\n            retval = (aNode.getParent()) == (this);\r\n        }\r\n    }\r\n    return retval;\r\n}'),(4069,'remove(int)','org.jhotdraw.gui.fontchooser.FontFamilyNode.remove(int)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void remove(int childIndex) {\r\n    MutableTreeNode child = ((MutableTreeNode) (getChildAt(childIndex)));\r\n    children.remove(childIndex);\r\n    child.setParent(null);\r\n}'),(4070,'remove(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontFamilyNode.remove(javax.swing.tree.MutableTreeNode)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void remove(MutableTreeNode aChild) {\r\n    if (aChild == null) {\r\n        throw new IllegalArgumentException(\"argument is null\");\r\n    }\r\n    if (!(isNodeChild(aChild))) {\r\n        throw new IllegalArgumentException(\"argument is not a child\");\r\n    }\r\n    remove(getIndex(aChild));// linear search\r\n\r\n}'),(4071,'removeFromParent()','org.jhotdraw.gui.fontchooser.FontFamilyNode.removeFromParent()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void removeFromParent() {\r\n    if ((parent) != null) {\r\n        parent.remove(this);\r\n    }\r\n}'),(4072,'setParent(javax.swing.tree.MutableTreeNode)','org.jhotdraw.gui.fontchooser.FontFamilyNode.setParent(javax.swing.tree.MutableTreeNode)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void setParent(MutableTreeNode newParent) {\r\n    this.parent = ((FontCollectionNode) (newParent));\r\n}'),(4073,'setUserObject(java.lang.Object)','org.jhotdraw.gui.fontchooser.FontFamilyNode.setUserObject(java.lang.Object)','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public void setUserObject(Object object) {\r\n    throw new UnsupportedOperationException(\"Not supported.\");\r\n}'),(4074,'toString()','org.jhotdraw.gui.fontchooser.FontFamilyNode.toString()','407','org.jhotdraw.gui.fontchooser.FontFamilyNode','public String toString() {\r\n    return name;\r\n}'),(4075,'-init-()','org.jhotdraw.gui.plaf.FontChooserUI.-init-()','408','org.jhotdraw.gui.plaf.FontChooserUI','FontChooserUI() {\r\n}'),(4076,'-init-(javax.swing.border.Border)','org.jhotdraw.gui.plaf.palette.BackdropBorder.-init-(javax.swing.border.Border)','410','org.jhotdraw.gui.plaf.palette.BackdropBorder','public BackdropBorder(Border backgroundBorder) {\r\n    this(null, backgroundBorder);\r\n}'),(4077,'-init-(javax.swing.border.Border,javax.swing.border.Border)','org.jhotdraw.gui.plaf.palette.BackdropBorder.-init-(javax.swing.border.Border,javax.swing.border.Border)','410','org.jhotdraw.gui.plaf.palette.BackdropBorder','public BackdropBorder(Border foregroundBorder, Border backgroundBorder) {\r\n    this.foregroundBorder = foregroundBorder;\r\n    this.backgroundBorder = backgroundBorder;\r\n}'),(4078,'getBackdropBorder()','org.jhotdraw.gui.plaf.palette.BackdropBorder.getBackdropBorder()','410','org.jhotdraw.gui.plaf.palette.BackdropBorder','public Border getBackdropBorder() {\r\n    return backgroundBorder;\r\n}'),(4079,'getBorderInsets(java.awt.Component)','org.jhotdraw.gui.plaf.palette.BackdropBorder.getBorderInsets(java.awt.Component)','410','org.jhotdraw.gui.plaf.palette.BackdropBorder','public Insets getBorderInsets(Component c) {\r\n    if ((foregroundBorder) != null) {\r\n        return foregroundBorder.getBorderInsets(c);\r\n    } else {\r\n        return backgroundBorder.getBorderInsets(c);\r\n    }\r\n}'),(4080,'isBorderOpaque()','org.jhotdraw.gui.plaf.palette.BackdropBorder.isBorderOpaque()','410','org.jhotdraw.gui.plaf.palette.BackdropBorder','public boolean isBorderOpaque() {\r\n    return backgroundBorder.isBorderOpaque();\r\n}'),(4081,'paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','org.jhotdraw.gui.plaf.palette.BackdropBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','410','org.jhotdraw.gui.plaf.palette.BackdropBorder','public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\r\n    if ((foregroundBorder) != null) {\r\n        foregroundBorder.paintBorder(c, g, x, y, width, height);\r\n    }\r\n}'),(4082,'-init-(javax.swing.border.Border)','org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource.-init-(javax.swing.border.Border)','409','org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource','public UIResource(Border backgroundBorder) {\r\n    this(null, backgroundBorder);\r\n}'),(4083,'-init-(javax.swing.border.Border,javax.swing.border.Border)','org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource.-init-(javax.swing.border.Border,javax.swing.border.Border)','409','org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource','public UIResource(Border foregroundBorder, Border backgroundBorder) {\r\n    super(foregroundBorder, backgroundBorder);\r\n}'),(4084,'-init-()','org.jhotdraw.gui.plaf.palette.Images.-init-()','411','org.jhotdraw.gui.plaf.palette.Images','/**\r\n * Prevent instance creation.\r\n */\r\nprivate Images() {\r\n}'),(4085,'createImage(java.net.URL)','org.jhotdraw.gui.plaf.palette.Images.createImage(java.net.URL)','411','org.jhotdraw.gui.plaf.palette.Images','public static Image createImage(URL resource) {\r\n    Image image = Toolkit.getDefaultToolkit().createImage(resource);\r\n    return image;\r\n}'),(4086,'hasAlpha(java.awt.Image)','org.jhotdraw.gui.plaf.palette.Images.hasAlpha(java.awt.Image)','411','org.jhotdraw.gui.plaf.palette.Images','/**\r\n * This method returns true if the specified image has transparent pixels\r\n *\r\n * Code taken from the Java Developers Almanac 1.4\r\n * http://javaalmanac.com/egs/java.awt.image/HasAlpha.html\r\n */\r\npublic static boolean hasAlpha(Image image) {\r\n    // If buffered image, the color model is readily available\r\n    if (image instanceof BufferedImage) {\r\n        BufferedImage bimage = ((BufferedImage) (image));\r\n        return bimage.getColorModel().hasAlpha();\r\n    }\r\n    // Use a pixel grabber to retrieve the images color model;\r\n    // grabbing a single pixel is usually sufficient\r\n    PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);\r\n    try {\r\n        pg.grabPixels();\r\n    } catch (InterruptedException e) {\r\n    }\r\n    // Get the images color model\r\n    ColorModel cm = pg.getColorModel();\r\n    return cm.hasAlpha();\r\n}'),(4087,'split(java.awt.Image,int,boolean)','org.jhotdraw.gui.plaf.palette.Images.split(java.awt.Image,int,boolean)','411','org.jhotdraw.gui.plaf.palette.Images','/**\r\n * Splits an image into count subimages.\r\n */\r\npublic static BufferedImage[] split(Image image, int count, boolean isHorizontal) {\r\n    BufferedImage src = Images.toBufferedImage(image);\r\n    if (count == 1) {\r\n        return new BufferedImage[]{ src };\r\n    }\r\n    BufferedImage[] parts = new BufferedImage[count];\r\n    for (int i = 0; i < count; i++) {\r\n        if (isHorizontal) {\r\n            parts[i] = src.getSubimage((((src.getWidth()) / count) * i), 0, ((src.getWidth()) / count), src.getHeight());\r\n        } else {\r\n            parts[i] = src.getSubimage(0, (((src.getHeight()) / count) * i), src.getWidth(), ((src.getHeight()) / count));\r\n        }\r\n    }\r\n    return parts;\r\n}'),(4088,'toBufferedImage(java.awt.Image)','org.jhotdraw.gui.plaf.palette.Images.toBufferedImage(java.awt.Image)','411','org.jhotdraw.gui.plaf.palette.Images','public static BufferedImage toBufferedImage(Image image) {\r\n    if (image instanceof BufferedImage) {\r\n        return ((BufferedImage) (image));\r\n    }\r\n    // This code ensures that all the pixels in the image are loaded\r\n    image = new ImageIcon(image).getImage();\r\n    // Create a buffered image with a format thats compatible with the screen\r\n    BufferedImage bimage = null;\r\n    if (System.getProperty(\"java.version\").startsWith(\"1.4.1_\")) {\r\n        // Workaround for Java 1.4.1 on Mac OS X.\r\n        // For this JVM, we always create an ARGB image to prevent a class\r\n        // cast exception in\r\n        // sun.awt.image.BufImgSurfaceData.createData(BufImgSurfaceData.java:434)\r\n        // when we attempt to draw the buffered image.\r\n        bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);\r\n    } else {\r\n        // Determine if the image has transparent pixels; for this methods\r\n        // implementation, see e661 Determining If an Image Has Transparent Pixels\r\n        boolean hasAlpha;\r\n        try {\r\n            hasAlpha = Images.hasAlpha(image);\r\n        } catch (IllegalAccessError e) {\r\n            // If we cant determine this, we assume that we have an alpha,\r\n            // in order not to loose data.\r\n            hasAlpha = true;\r\n        }\r\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n        try {\r\n            // Determine the type of transparency of the new buffered image\r\n            int transparency = Transparency.OPAQUE;\r\n            if (hasAlpha) {\r\n                transparency = Transparency.TRANSLUCENT;\r\n            }\r\n            // Create the buffered image\r\n            GraphicsDevice gs = ge.getDefaultScreenDevice();\r\n            GraphicsConfiguration gc = gs.getDefaultConfiguration();\r\n            bimage = gc.createCompatibleImage(image.getWidth(null), image.getHeight(null), transparency);\r\n        } catch (Exception e) {\r\n            // } catch (HeadlessException e) {\r\n            // The system does not have a screen\r\n        }\r\n        if (bimage == null) {\r\n            // Create a buffered image using the default color model\r\n            int type = BufferedImage.TYPE_INT_RGB;\r\n            if (hasAlpha) {\r\n                type = BufferedImage.TYPE_INT_ARGB;\r\n            }\r\n            bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);\r\n        }\r\n    }\r\n    // Copy image to buffered image\r\n    Graphics g = bimage.createGraphics();\r\n    // Paint the image onto the buffered image\r\n    g.drawImage(image, 0, 0, null);\r\n    g.dispose();\r\n    return bimage;\r\n    // My own implementation:\r\n    /* if (image instanceof BufferedImage) {\n    return (BufferedImage) image;\n    } else {\n    BufferedImage bufImg;\n    Frame f = new Frame();\n    f.pack();\n    MediaTracker t = new MediaTracker(f);\n    t.addImage(image, 0);\n    try { t.waitForAll(); } catch (InterruptedException e) {}\n\n    // Workaround for Java 1.4.1 on Mac OS X.\n    if (System.getProperty(\"java.version\").startsWith(\"1.4.1_\")) {\n    bufImg = new BufferedImage(image.getWidth(f), image.getHeight(f), BufferedImage.TYPE_INT_ARGB);\n    } else {\n    bufImg = GraphicsEnvironment\n    .getLocalGraphicsEnvironment()\n    .getDefaultScreenDevice()\n    .getDefaultConfiguration()\n    .createCompatibleImage(image.getWidth(null), image.getHeight(null), Transparency.TRANSLUCENT);\n    }\n    Graphics2D imgGraphics = bufImg.createGraphics();\n    imgGraphics.drawImage(image, 0, 0, f);\n    imgGraphics.dispose();\n    f.dispose();\n    return bufImg;\n    }\n     */\r\n}'),(4089,'toBufferedImage(java.awt.image.RenderedImage)','org.jhotdraw.gui.plaf.palette.Images.toBufferedImage(java.awt.image.RenderedImage)','411','org.jhotdraw.gui.plaf.palette.Images','public static BufferedImage toBufferedImage(RenderedImage rImg) {\r\n    BufferedImage image;\r\n    if (rImg instanceof BufferedImage) {\r\n        image = ((BufferedImage) (rImg));\r\n    } else {\r\n        Raster r = rImg.getData();\r\n        WritableRaster wr = WritableRaster.createWritableRaster(r.getSampleModel(), null);\r\n        rImg.copyData(wr);\r\n        image = new BufferedImage(rImg.getColorModel(), wr, rImg.getColorModel().isAlphaPremultiplied(), null);\r\n    }\r\n    return image;\r\n}'),(4090,'-init-(javax.swing.Icon[])','org.jhotdraw.gui.plaf.palette.MultiIcon.-init-(javax.swing.Icon[])','412','org.jhotdraw.gui.plaf.palette.MultiIcon','/**\r\n * Creates a new instance from an array of icons.\r\n * All icons must have the same dimensions.\r\n * If an icon is null, an icon is derived for the state from the\r\n * other icons.\r\n */\r\npublic MultiIcon(Icon[] icons) {\r\n    this.icons = icons;\r\n    generateMissingIcons();\r\n}'),(4091,'-init-(java.awt.Image[])','org.jhotdraw.gui.plaf.palette.MultiIcon.-init-(java.awt.Image[])','412','org.jhotdraw.gui.plaf.palette.MultiIcon','/**\r\n * Creates a new instance from an array of images.\r\n * All icons must have the same dimensions.\r\n * If an icon is null, an icon is derived for the state from the\r\n * other icons.\r\n */\r\npublic MultiIcon(Image[] images) {\r\n    this.icons = new Icon[images.length];\r\n    for (int i = 0, n = icons.length; i < n; i++) {\r\n        if ((images[i]) != null) {\r\n            icons[i] = new ImageIcon(images[i]);\r\n        }\r\n    }\r\n    generateMissingIcons();\r\n}'),(4092,'-init-(java.awt.Image,int,boolean)','org.jhotdraw.gui.plaf.palette.MultiIcon.-init-(java.awt.Image,int,boolean)','412','org.jhotdraw.gui.plaf.palette.MultiIcon','/**\r\n * Creates a new instance.\r\n * The icon representations are created lazily from the tiled image.\r\n */\r\npublic MultiIcon(Image tiledImage, int tileCount, boolean isTiledHorizontaly) {\r\n    this.tiledImage = tiledImage;\r\n    this.tileCount = tileCount;\r\n    this.isTiledHorizontaly = isTiledHorizontaly;\r\n}'),(4093,'generateIconsFromTiledImage()','org.jhotdraw.gui.plaf.palette.MultiIcon.generateIconsFromTiledImage()','412','org.jhotdraw.gui.plaf.palette.MultiIcon','private void generateIconsFromTiledImage() {\r\n    if ((icons) == null) {\r\n        icons = new Icon[tileCount];\r\n        Image[] images = Images.split(tiledImage, tileCount, isTiledHorizontaly);\r\n        for (int i = 0, n = Math.min(images.length, icons.length); i < n; i++) {\r\n            if ((images[i]) != null) {\r\n                icons[i] = new ImageIcon(images[i]);\r\n            }\r\n        }\r\n        generateMissingIcons();\r\n        tiledImage = null;\r\n    }\r\n}'),(4094,'generateMissingIcons()','org.jhotdraw.gui.plaf.palette.MultiIcon.generateMissingIcons()','412','org.jhotdraw.gui.plaf.palette.MultiIcon','protected abstract void generateMissingIcons();'),(4095,'getIcon(java.awt.Component)','org.jhotdraw.gui.plaf.palette.MultiIcon.getIcon(java.awt.Component)','412','org.jhotdraw.gui.plaf.palette.MultiIcon','protected abstract Icon getIcon(Component c);'),(4096,'getIconHeight()','org.jhotdraw.gui.plaf.palette.MultiIcon.getIconHeight()','412','org.jhotdraw.gui.plaf.palette.MultiIcon','public int getIconHeight() {\r\n    generateIconsFromTiledImage();\r\n    return icons[0].getIconHeight();\r\n}'),(4097,'getIconWidth()','org.jhotdraw.gui.plaf.palette.MultiIcon.getIconWidth()','412','org.jhotdraw.gui.plaf.palette.MultiIcon','public int getIconWidth() {\r\n    generateIconsFromTiledImage();\r\n    return icons[0].getIconWidth();\r\n}'),(4098,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.gui.plaf.palette.MultiIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','412','org.jhotdraw.gui.plaf.palette.MultiIcon','public void paintIcon(Component c, Graphics g, int x, int y) {\r\n    generateIconsFromTiledImage();\r\n    Icon icon = getIcon(c);\r\n    if (icon != null) {\r\n        icon.paintIcon(c, g, x, y);\r\n    }\r\n}'),(4099,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteBorders.-init-()','413','org.jhotdraw.gui.plaf.palette.PaletteBorders','PaletteBorders() {\r\n}'),(4100,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder.-init-()','414','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder','PaletteButtonBorder() {\r\n}'),(4101,'getBorderInsets(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder.getBorderInsets(java.awt.Component)','414','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder','public Insets getBorderInsets(Component c) {\r\n    Insets insets;\r\n    String segmentPosition = getSegmentPosition(c);\r\n    if ((segmentPosition == \"first\") || (segmentPosition == \"middle\")) {\r\n        insets = new Insets(3, 3, 3, 2);\r\n    } else {\r\n        insets = new Insets(3, 3, 3, 3);\r\n    }\r\n    return insets;\r\n}'),(4102,'getSegmentPosition(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder.getSegmentPosition(java.awt.Component)','414','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder','private String getSegmentPosition(Component c) {\r\n    String segmentPosition = null;\r\n    if (c instanceof JComponent) {\r\n        segmentPosition = ((String) (((JComponent) (c)).getClientProperty(\"Palette.Component.segmentPosition\")));\r\n    }\r\n    return segmentPosition == null ? \"only\" : segmentPosition;\r\n}'),(4103,'isBorderOpaque()','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder.isBorderOpaque()','414','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder','public boolean isBorderOpaque() {\r\n    return true;\r\n}'),(4104,'paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','414','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder','public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\r\n    if (c instanceof AbstractButton) {\r\n        paintBorder(((AbstractButton) (c)), g, x, y, width, height);\r\n    }\r\n}'),(4105,'paintBorder(javax.swing.AbstractButton,java.awt.Graphics,int,int,int,int)','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder.paintBorder(javax.swing.AbstractButton,java.awt.Graphics,int,int,int,int)','414','org.jhotdraw.gui.plaf.palette.PaletteButtonBorder','public void paintBorder(AbstractButton c, Graphics gr, int x, int y, int width, int height) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    ButtonModel m = c.getModel();\r\n    int borderColor;\r\n    float[] stops;\r\n    Color[] stopColors;\r\n    if (!(m.isEnabled())) {\r\n        borderColor = -2136627803;\r\n        stops = PaletteButtonBorder.enabledStops;\r\n        stopColors = PaletteButtonBorder.enabledStopColors;\r\n    } else {\r\n        if ((m.isSelected()) || ((m.isPressed()) && (m.isArmed()))) {\r\n            borderColor = -13421773;\r\n            stops = PaletteButtonBorder.selectedStops;\r\n            stopColors = PaletteButtonBorder.selectedStopColors;\r\n        } else {\r\n            borderColor = -5921371;\r\n            stops = PaletteButtonBorder.enabledStops;\r\n            stopColors = PaletteButtonBorder.enabledStopColors;\r\n        }\r\n    }\r\n    String segmentPosition = getSegmentPosition(c);\r\n    if ((segmentPosition == \"first\") || (segmentPosition == \"middle\")) {\r\n        width += 1;\r\n    }\r\n    g.setColor(new Color(borderColor, true));\r\n    g.drawRect(x, y, (width - 1), (height - 1));\r\n    LinearGradientPaint lgp = new LinearGradientPaint(new Point2D.Float(x, y), new Point2D.Float(x, ((y + height) - 1)), stops, stopColors, MultipleGradientPaint.REPEAT, MultipleGradientPaint.LINEAR_RGB);\r\n    g.setPaint(lgp);\r\n    g.fillRect((x + 1), (y + 1), (width - 2), (height - 2));\r\n}'),(4106,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteButtonUI.-init-()','415','org.jhotdraw.gui.plaf.palette.PaletteButtonUI','PaletteButtonUI() {\r\n}'),(4107,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteButtonUI.createUI(javax.swing.JComponent)','415','org.jhotdraw.gui.plaf.palette.PaletteButtonUI','// ********************************\r\n// Create PLAF\r\n// ********************************\r\npublic static ComponentUI createUI(JComponent c) {\r\n    return PaletteButtonUI.buttonUI;\r\n}'),(4108,'installDefaults(javax.swing.AbstractButton)','org.jhotdraw.gui.plaf.palette.PaletteButtonUI.installDefaults(javax.swing.AbstractButton)','415','org.jhotdraw.gui.plaf.palette.PaletteButtonUI','@Override\r\nprotected void installDefaults(AbstractButton b) {\r\n    super.installDefaults(b);\r\n    // load shared instance defaults\r\n    String pp = getPropertyPrefix();\r\n    LookAndFeel.installProperty(b, \"opaque\", Boolean.FALSE);\r\n    if (((b.getMargin()) == null) || ((b.getMargin()) instanceof UIResource)) {\r\n        b.setMargin(new InsetsUIResource(0, 0, 0, 0));\r\n    }\r\n    PaletteLookAndFeel.installColorsAndFont(b, (pp + \"background\"), (pp + \"foreground\"), (pp + \"font\"));\r\n    PaletteLookAndFeel.installBorder(b, (pp + \"border\"));\r\n    Object rollover = UIManager.get((pp + \"rollover\"));\r\n    if (rollover != null) {\r\n        LookAndFeel.installProperty(b, \"rolloverEnabled\", rollover);\r\n    }\r\n    b.setFocusable(false);\r\n}'),(4109,'paint(java.awt.Graphics,javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)','415','org.jhotdraw.gui.plaf.palette.PaletteButtonUI','@Override\r\npublic void paint(Graphics g, JComponent c) {\r\n    AbstractButton button = ((AbstractButton) (c));\r\n    if ((button.isBorderPainted()) && ((c.getBorder()) instanceof BackdropBorder)) {\r\n        BackdropBorder bb = ((BackdropBorder) (c.getBorder()));\r\n        bb.getBackdropBorder().paintBorder(c, g, 0, 0, c.getWidth(), c.getHeight());\r\n    }\r\n    super.paint(g, c);\r\n}'),(4110,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel.-init-()','416','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel','/**\r\n * Creates new form PaletteFontChooserPreviewPanel\r\n */\r\npublic PaletteFontChooserPreviewPanel() {\r\n    initComponents();\r\n    previewLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(previewLabel))));\r\n    previewLabel.setBackground(Color.WHITE);\r\n    previewLabel.setForeground(Color.BLACK);\r\n    previewLabel.setOpaque(true);\r\n    setPreferredSize(new Dimension(100, 50));\r\n    setMinimumSize(new Dimension(100, 50));\r\n}'),(4111,'beautifyName(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel.beautifyName(java.lang.String)','416','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel','private String beautifyName(String name) {\r\n    // Beautify the name\r\n    StringBuilder buf = new StringBuilder();\r\n    char prev = name.charAt(0);\r\n    buf.append(prev);\r\n    for (int i = 1; i < (name.length()); i++) {\r\n        char ch = name.charAt(i);\r\n        if (((((prev !=  ) && (prev != -)) && (Character.isUpperCase(ch))) && (!(Character.isUpperCase(prev)))) || ((Character.isDigit(ch)) && (!(Character.isDigit(prev))))) {\r\n            buf.append( );\r\n        }\r\n        buf.append(ch);\r\n        prev = ch;\r\n    }\r\n    name = buf.toString();\r\n    return name;\r\n}'),(4112,'initComponents()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel.initComponents()','416','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initComponents() {\r\n    previewLabel = new JLabel();\r\n    setLayout(new BorderLayout());\r\n    previewLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n    add(previewLabel, BorderLayout.CENTER);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4113,'setSelectedFont(java.awt.Font)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel.setSelectedFont(java.awt.Font)','416','org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel','public void setSelectedFont(Font newValue) {\r\n    if (newValue == null) {\r\n        previewLabel.setText(((String) (PaletteLookAndFeel.getInstance().get(\"FontChooser.nothingSelected\"))));\r\n        previewLabel.setFont(getFont());\r\n    } else {\r\n        previewLabel.setText(beautifyName(newValue.getFontName()));\r\n        previewLabel.setFont(newValue.deriveFont(24.0F));\r\n    }\r\n}'),(4114,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel.-init-()','417','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel','/**\r\n * Creates new form FontChooserPanel\r\n */\r\npublic PaletteFontChooserSelectionPanel() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.gui.Labels\");\r\n    initComponents();\r\n    collectionList.setModel(new DefaultListModel());\r\n    familyList.setModel(new DefaultListModel());\r\n    faceList.setModel(new DefaultListModel());\r\n    // Customiziation of Quaqua Look and Feel: Set small scroll bars\r\n    Font smallSystemFont = new Font(\"Dialog\", Font.PLAIN, 11);\r\n    collectionsScrollPane.setFont(smallSystemFont);\r\n    familiesScrollPane.setFont(smallSystemFont);\r\n    facesScrollPane.setFont(smallSystemFont);\r\n}'),(4115,'getCollectionList()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel.getCollectionList()','417','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel','public JList getCollectionList() {\r\n    return collectionList;\r\n}'),(4116,'getFaceList()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel.getFaceList()','417','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel','public JList getFaceList() {\r\n    return faceList;\r\n}'),(4117,'getFamilyList()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel.getFamilyList()','417','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel','public JList getFamilyList() {\r\n    return familyList;\r\n}'),(4118,'initComponents()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel.initComponents()','417','org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    collectionsPanel = new JPanel();\r\n    collectionsScrollPane = new JScrollPane();\r\n    collectionList = new JList();\r\n    collectionsLabel = new JLabel();\r\n    familiesPanel = new JPanel();\r\n    familiesScrollPane = new JScrollPane();\r\n    familyList = new JList();\r\n    familyLabel = new JLabel();\r\n    facesPanel = new JPanel();\r\n    facesScrollPane = new JScrollPane();\r\n    faceList = new JList();\r\n    faceLabel = new JLabel();\r\n    setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));\r\n    setLayout(new GridBagLayout());\r\n    collectionsPanel.setMinimumSize(new Dimension(10, 10));\r\n    collectionsPanel.setPreferredSize(new Dimension(80, 200));\r\n    collectionsPanel.setLayout(new BorderLayout());\r\n    collectionsScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\r\n    collectionList.setFont(collectionList.getFont().deriveFont(((float) (11))));\r\n    collectionsScrollPane.setViewportView(collectionList);\r\n    collectionsPanel.add(collectionsScrollPane, BorderLayout.CENTER);\r\n    collectionsLabel.setFont(collectionsLabel.getFont().deriveFont(((float) (11))));\r\n    collectionsLabel.setText(labels.getString(\"FontCollection.collections\"));// NOI18N\r\n\r\n    collectionsPanel.add(collectionsLabel, BorderLayout.PAGE_START);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 0.3;\r\n    gridBagConstraints.weighty = 1.0;\r\n    add(collectionsPanel, gridBagConstraints);\r\n    familiesPanel.setMinimumSize(new Dimension(10, 10));\r\n    familiesPanel.setPreferredSize(new Dimension(100, 200));\r\n    familiesPanel.setLayout(new BorderLayout());\r\n    familiesScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\r\n    familiesScrollPane.setPreferredSize(new Dimension(130, 240));\r\n    familyList.setFont(familyList.getFont().deriveFont(((float) (11))));\r\n    familiesScrollPane.setViewportView(familyList);\r\n    familiesPanel.add(familiesScrollPane, BorderLayout.CENTER);\r\n    familyLabel.setFont(familyLabel.getFont().deriveFont(((float) (11))));\r\n    familyLabel.setText(labels.getString(\"FontCollection.family\"));// NOI18N\r\n\r\n    familiesPanel.add(familyLabel, BorderLayout.PAGE_START);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 0.4;\r\n    gridBagConstraints.weighty = 1.0;\r\n    gridBagConstraints.insets = new Insets(0, 3, 0, 0);\r\n    add(familiesPanel, gridBagConstraints);\r\n    facesPanel.setMinimumSize(new Dimension(10, 10));\r\n    facesPanel.setPreferredSize(new Dimension(80, 200));\r\n    facesPanel.setLayout(new BorderLayout());\r\n    facesScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\r\n    facesScrollPane.setPreferredSize(new Dimension(130, 240));\r\n    faceList.setFont(faceList.getFont().deriveFont(((float) (11))));\r\n    facesScrollPane.setViewportView(faceList);\r\n    facesPanel.add(facesScrollPane, BorderLayout.CENTER);\r\n    faceLabel.setFont(faceLabel.getFont().deriveFont(((float) (11))));\r\n    faceLabel.setText(labels.getString(\"FontCollection.typeface\"));// NOI18N\r\n\r\n    facesPanel.add(faceLabel, BorderLayout.PAGE_START);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 0.3;\r\n    gridBagConstraints.weighty = 1.0;\r\n    gridBagConstraints.insets = new Insets(0, 3, 0, 0);\r\n    add(facesPanel, gridBagConstraints);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4119,'-init-(org.jhotdraw.gui.JFontChooser)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.-init-(org.jhotdraw.gui.JFontChooser)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','public PaletteFontChooserUI(JFontChooser fontChooser) {\r\n    this.fontChooser = fontChooser;\r\n}'),(4120,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.-init-()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','SelectionPanelHandler() {\r\n}'),(4121,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.createUI(javax.swing.JComponent)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','/**\r\n * Returns an instance of the UI delegate for the specified component.\r\n * Each subclass must provide its own static <code>createUI</code>\r\n * method that returns an instance of that UI delegate subclass.\r\n * If the UI delegate subclass is stateless, it may return an instance\r\n * that is shared by multiple components.  If the UI delegate is\r\n * stateful, then it should return a new instance per component.\r\n * The default implementation of this method throws an error, as it\r\n * should never be invoked.\r\n */\r\npublic static ComponentUI createUI(JComponent c) {\r\n    PaletteFontChooserUI ui = new PaletteFontChooserUI(((JFontChooser) (c)));\r\n    return ui;\r\n}'),(4122,'doCollectionChanged()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.doCollectionChanged()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void doCollectionChanged() {\r\n    JList list = selectionPanel.getCollectionList();\r\n    TreePath path = fontChooser.getSelectionPath();\r\n    FontCollectionNode oldCollection = ((path != null) && ((path.getPathCount()) > 1)) ? ((FontCollectionNode) (path.getPathComponent(1))) : null;\r\n    FontFamilyNode oldFamily = ((path != null) && ((path.getPathCount()) > 2)) ? ((FontFamilyNode) (path.getPathComponent(2))) : null;\r\n    FontFaceNode oldFace = ((path != null) && ((path.getPathCount()) > 3)) ? ((FontFaceNode) (path.getPathComponent(3))) : null;\r\n    FontCollectionNode newCollection = ((FontCollectionNode) (list.getSelectedValue()));\r\n    FontFamilyNode newFamily = null;\r\n    FontFaceNode newFace = null;\r\n    if (((oldFamily == null) || (oldFace == null)) && ((fontChooser.getSelectedFont()) != null)) {\r\n        oldFace = new FontFaceNode(fontChooser.getSelectedFont());\r\n        oldFamily = new FontFamilyNode(fontChooser.getSelectedFont().getFamily());\r\n    }\r\n    if ((newCollection != null) && (oldFamily != null)) {\r\n        for (int i = 0, n = newCollection.getChildCount(); i < n; i++) {\r\n            FontFamilyNode aFamily = newCollection.getChildAt(i);\r\n            if ((aFamily.compareTo(oldFamily)) == 0) {\r\n                newFamily = aFamily;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if ((newFamily != null) && (oldFace != null)) {\r\n        // search in the new family for the face\r\n        for (FontFaceNode aFace : newFamily.faces()) {\r\n            if ((aFace.compareTo(oldFace)) == 0) {\r\n                newFace = aFace;\r\n                break;\r\n            }\r\n        }\r\n    } else\r\n        if (((newFace == null) && (oldFamily != null)) && (oldFace != null)) {\r\n            OuterLoop : for (FontFamilyNode aFamily : newCollection.families()) {\r\n                for (FontFaceNode aFace : aFamily.faces()) {\r\n                    if ((aFace.compareTo(oldFace)) == 0) {\r\n                        newFace = aFace;\r\n                        newFamily = ((FontFamilyNode) (aFace.getParent()));\r\n                        break OuterLoop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    if (newCollection != null) {\r\n        if ((newFamily == null) && ((newCollection.getChildCount()) > 0)) {\r\n            newFamily = newCollection.getChildAt(0);\r\n        }\r\n        if (newFamily != null) {\r\n            if ((newFace == null) && ((newFamily.getChildCount()) > 0)) {\r\n                newFace = newFamily.getChildAt(0);\r\n            }\r\n        }\r\n    }\r\n    setNewSelectionPath(newCollection, newFamily, newFace);\r\n}'),(4123,'doFaceChanged()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.doFaceChanged()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void doFaceChanged() {\r\n    JList list = selectionPanel.getFaceList();\r\n    TreePath path = fontChooser.getSelectionPath();\r\n    FontCollectionNode oldCollection = ((path != null) && ((path.getPathCount()) > 1)) ? ((FontCollectionNode) (path.getPathComponent(1))) : null;\r\n    FontFamilyNode oldFamily = ((path != null) && ((path.getPathCount()) > 2)) ? ((FontFamilyNode) (path.getPathComponent(2))) : null;\r\n    FontFaceNode oldFace = ((path != null) && ((path.getPathCount()) > 3)) ? ((FontFaceNode) (path.getPathComponent(3))) : null;\r\n    FontCollectionNode newCollection = oldCollection;\r\n    FontFamilyNode newFamily = oldFamily;\r\n    FontFaceNode newFace = ((FontFaceNode) (list.getSelectedValue()));\r\n    setNewSelectionPath(newCollection, newFamily, newFace);\r\n}'),(4124,'doFamilyChanged()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.doFamilyChanged()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void doFamilyChanged() {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    JList list = selectionPanel.getFamilyList();\r\n    TreePath path = fontChooser.getSelectionPath();\r\n    FontCollectionNode oldCollection = ((path != null) && ((path.getPathCount()) > 1)) ? ((FontCollectionNode) (path.getPathComponent(1))) : null;\r\n    FontFamilyNode oldFamily = ((path != null) && ((path.getPathCount()) > 2)) ? ((FontFamilyNode) (path.getPathComponent(2))) : null;\r\n    FontFaceNode oldFace = ((path != null) && ((path.getPathCount()) > 3)) ? ((FontFaceNode) (path.getPathComponent(3))) : null;\r\n    FontCollectionNode newCollection = oldCollection;\r\n    FontFamilyNode newFamily = ((FontFamilyNode) (list.getSelectedValue()));\r\n    FontFaceNode newFace = null;\r\n    if ((newFamily != null) && (oldFace != null)) {\r\n        for (int i = 0, n = newFamily.getChildCount(); i < n; i++) {\r\n            FontFaceNode aFace = newFamily.getChildAt(i);\r\n            if ((aFace.compareTo(oldFace)) == 0) {\r\n                newFace = aFace;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (newCollection != null) {\r\n        if ((newFamily == null) && ((newCollection.getChildCount()) > 0)) {\r\n            newFamily = newCollection.getChildAt(0);\r\n        }\r\n        if (newFamily != null) {\r\n            if ((newFace == null) && ((newFamily.getChildCount()) > 0)) {\r\n                newFace = newFamily.getChildAt(0);\r\n            }\r\n        }\r\n    }\r\n    setNewSelectionPath(newCollection, newFamily, newFace);\r\n}'),(4125,'installComponents(org.jhotdraw.gui.JFontChooser)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installComponents(org.jhotdraw.gui.JFontChooser)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','protected void installComponents(JFontChooser fc) {\r\n    fc.removeAll();\r\n    fc.setLayout(new BorderLayout());\r\n    selectionPanel = new PaletteFontChooserSelectionPanel();\r\n    fc.add(selectionPanel, BorderLayout.CENTER);\r\n    previewPanel = new PaletteFontChooserPreviewPanel();\r\n    fc.add(previewPanel, BorderLayout.NORTH);\r\n    FontChooserModel model = fontChooser.getModel();\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n    updatePreview();\r\n}'),(4126,'installListeners(org.jhotdraw.gui.JFontChooser)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installListeners(org.jhotdraw.gui.JFontChooser)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','protected void installListeners(JFontChooser fc) {\r\n    selectionPanelHandler = new PaletteFontChooserUI.SelectionPanelHandler();\r\n    selectionPanel.getCollectionList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().addMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addMouseListener(selectionPanelHandler);\r\n    chooserHandler = new PaletteFontChooserUI.FontChooserHandler();\r\n    fontChooser.addPropertyChangeListener(chooserHandler);\r\n    if ((fontChooser.getModel()) != null) {\r\n        fontChooser.getModel().addTreeModelListener(chooserHandler);\r\n    }\r\n}'),(4127,'installUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installUI(javax.swing.JComponent)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','/**\r\n * Configures the specified component appropriate for the look and feel.\r\n * This method is invoked when the <code>ComponentUI</code> instance is being installed\r\n * as the UI delegate on the specified component.  This method should\r\n * completely configure the component for the look and feel,\r\n * including the following:\r\n * <ol>\r\n * <li>Install any default property values for color, fonts, borders,\r\n *     icons, opacity, etc. on the component.  Whenever possible,\r\n *     property values initialized by the client program should <i>not</i>\r\n *     be overridden.\r\n * <li>Install a <code>LayoutManager</code> on the component if necessary.\r\n * <li>Create/add any required sub-components to the component.\r\n * <li>Create/install event listeners on the component.\r\n * <li>Create/install a <code>PropertyChangeListener</code> on the component in order\r\n *     to detect and respond to component property changes appropriately.\r\n * <li>Install keyboard UI (mnemonics, traversal, etc.) on the component.\r\n * <li>Initialize any appropriate instance data.\r\n * </ol>\r\n *\r\n * @param c\r\n * 		the component where this UI delegate is being installed\r\n * @see #uninstallUI\r\n * @see javax.swing.JComponent#setUI\r\n * @see javax.swing.JComponent#updateUI\r\n */\r\n@Override\r\npublic void installUI(JComponent c) {\r\n    installComponents(fontChooser);\r\n    installListeners(fontChooser);\r\n}'),(4128,'setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}'),(4129,'uninstallComponents(org.jhotdraw.gui.JFontChooser)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallComponents(org.jhotdraw.gui.JFontChooser)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','protected void uninstallComponents(JFontChooser fc) {\r\n    fontChooser.removeAll();\r\n}'),(4130,'uninstallListeners(org.jhotdraw.gui.JFontChooser)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallListeners(org.jhotdraw.gui.JFontChooser)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','protected void uninstallListeners(JFontChooser fc) {\r\n    fontChooser.removePropertyChangeListener(chooserHandler);\r\n    selectionPanel.getCollectionList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().removeMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeMouseListener(selectionPanelHandler);\r\n    if ((fontChooser.getModel()) != null) {\r\n        fontChooser.getModel().removeTreeModelListener(chooserHandler);\r\n    }\r\n    chooserHandler = null;\r\n    selectionPanelHandler = null;\r\n}'),(4131,'uninstallUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallUI(javax.swing.JComponent)','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','/**\r\n * Reverses configuration which was done on the specified component during\r\n * <code>installUI</code>.  This method is invoked when this\r\n * <code>UIComponent</code> instance is being removed as the UI delegate\r\n * for the specified component.  This method should undo the\r\n * configuration performed in <code>installUI</code>, being careful to\r\n * leave the <code>JComponent</code> instance in a clean state (no\r\n * extraneous listeners, look-and-feel-specific property objects, etc.).\r\n * This should include the following:\r\n * <ol>\r\n * <li>Remove any UI-set borders from the component.\r\n * <li>Remove any UI-set layout managers on the component.\r\n * <li>Remove any UI-added sub-components from the component.\r\n * <li>Remove any UI-added event/property listeners from the component.\r\n * <li>Remove any UI-installed keyboard UI from the component.\r\n * <li>Nullify any allocated instance data objects to allow for GC.\r\n * </ol>\r\n *\r\n * @param c\r\n * 		the component from which this UI delegate is being removed;\r\n * 		this argument is often ignored,\r\n * 		but might be used if the UI object is stateless\r\n * 		and shared by multiple components\r\n * @see #installUI\r\n * @see javax.swing.JComponent#updateUI\r\n */\r\npublic void uninstallUI(JComponent c) {\r\n    uninstallListeners(fontChooser);\r\n    uninstallComponents(fontChooser);\r\n}'),(4132,'updateCollectionList()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.updateCollectionList()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void updateCollectionList() {\r\n    (isUpdating)++;\r\n    JList list = selectionPanel.getCollectionList();\r\n    DefaultListModel lm = ((DefaultListModel) (list.getModel()));\r\n    lm.removeAllElements();\r\n    FontChooserModel model = fontChooser.getModel();\r\n    Object parent = model.getRoot();\r\n    for (int i = 0, n = model.getChildCount(parent); i < n; i++) {\r\n        lm.addElement(model.getChild(parent, i));\r\n    }\r\n    TreePath path = fontChooser.getSelectionPath();\r\n    if ((path == null) || ((path.getPathCount()) < 2)) {\r\n        list.clearSelection();\r\n    } else {\r\n        list.setSelectedIndex(((TreeNode) (path.getPathComponent(0))).getIndex(((TreeNode) (path.getPathComponent(1)))));\r\n        list.scrollRectToVisible(list.getCellBounds(list.getSelectedIndex(), list.getSelectedIndex()));\r\n    }\r\n    (isUpdating)--;\r\n}'),(4133,'updateFaceList()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.updateFaceList()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void updateFaceList() {\r\n    (isUpdating)++;\r\n    JList list = selectionPanel.getFaceList();\r\n    FontChooserModel model = fontChooser.getModel();\r\n    FontFamilyNode newParent = null;\r\n    TreePath path = fontChooser.getSelectionPath();\r\n    if ((path != null) && ((path.getPathCount()) > 2)) {\r\n        newParent = ((FontFamilyNode) (path.getPathComponent(2)));\r\n    }\r\n    if (newParent != (faceListParent)) {\r\n        DefaultListModel lm = ((DefaultListModel) (list.getModel()));\r\n        lm.removeAllElements();\r\n        faceListParent = newParent;\r\n        if ((faceListParent) != null) {\r\n            for (int i = 0, n = model.getChildCount(faceListParent); i < n; i++) {\r\n                lm.addElement(model.getChild(faceListParent, i));\r\n            }\r\n        }\r\n    }\r\n    if ((path == null) || ((path.getPathCount()) < 4)) {\r\n        list.clearSelection();\r\n    } else {\r\n        list.setSelectedIndex(((TreeNode) (path.getPathComponent(2))).getIndex(((TreeNode) (path.getPathComponent(3)))));\r\n        list.scrollRectToVisible(list.getCellBounds(list.getSelectedIndex(), list.getSelectedIndex()));\r\n    }\r\n    (isUpdating)--;\r\n}'),(4134,'updateFamilyList()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.updateFamilyList()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void updateFamilyList() {\r\n    (isUpdating)++;\r\n    JList list = selectionPanel.getFamilyList();\r\n    FontChooserModel model = fontChooser.getModel();\r\n    FontCollectionNode newParent = null;\r\n    TreePath path = fontChooser.getSelectionPath();\r\n    if ((path != null) && ((path.getPathCount()) > 1)) {\r\n        newParent = ((FontCollectionNode) (path.getPathComponent(1)));\r\n    }\r\n    if (newParent != (familyListParent)) {\r\n        DefaultListModel lm = ((DefaultListModel) (list.getModel()));\r\n        lm.removeAllElements();\r\n        familyListParent = newParent;\r\n        if ((familyListParent) != null) {\r\n            for (int i = 0, n = model.getChildCount(familyListParent); i < n; i++) {\r\n                lm.addElement(model.getChild(familyListParent, i));\r\n            }\r\n        }\r\n    }\r\n    if ((path == null) || ((path.getPathCount()) < 3)) {\r\n        list.clearSelection();\r\n    } else {\r\n        list.setSelectedIndex(((TreeNode) (path.getPathComponent(1))).getIndex(((TreeNode) (path.getPathComponent(2)))));\r\n        list.scrollRectToVisible(list.getCellBounds(list.getSelectedIndex(), list.getSelectedIndex()));\r\n    }\r\n    (isUpdating)--;\r\n}'),(4135,'updatePreview()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.updatePreview()','420','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI','private void updatePreview() {\r\n    (isUpdating)++;\r\n    previewPanel.setSelectedFont(fontChooser.getSelectedFont());\r\n    (isUpdating)--;\r\n}'),(4136,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler.-init-()','418','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler','FontChooserHandler() {\r\n}'),(4137,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler.propertyChange(java.beans.PropertyChangeEvent)','418','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler','public void propertyChange(PropertyChangeEvent evt) {\r\n    String name = evt.getPropertyName();\r\n    if (name == (JFontChooser.SELECTION_PATH_PROPERTY)) {\r\n        updateCollectionList();\r\n        updateFamilyList();\r\n        updateFaceList();\r\n    } else\r\n        if (name == (JFontChooser.SELECTED_FONT_PROPERTY)) {\r\n            updatePreview();\r\n        } else\r\n            if (name == (JFontChooser.MODEL_PROPERTY)) {\r\n                FontChooserModel m = ((FontChooserModel) (evt.getOldValue()));\r\n                if (m != null) {\r\n                    m.removeTreeModelListener(this);\r\n                }\r\n                m = ((FontChooserModel) (evt.getNewValue()));\r\n                if (m != null) {\r\n                    m.addTreeModelListener(this);\r\n                }\r\n                updateCollectionList();\r\n                updateFamilyList();\r\n                updateFaceList();\r\n            }\r\n\r\n\r\n}'),(4138,'treeNodesChanged(javax.swing.event.TreeModelEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler.treeNodesChanged(javax.swing.event.TreeModelEvent)','418','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler','public void treeNodesChanged(TreeModelEvent e) {\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n}'),(4139,'treeNodesInserted(javax.swing.event.TreeModelEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler.treeNodesInserted(javax.swing.event.TreeModelEvent)','418','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler','public void treeNodesInserted(TreeModelEvent e) {\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n}'),(4140,'treeNodesRemoved(javax.swing.event.TreeModelEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler.treeNodesRemoved(javax.swing.event.TreeModelEvent)','418','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler','public void treeNodesRemoved(TreeModelEvent e) {\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n}'),(4141,'treeStructureChanged(javax.swing.event.TreeModelEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler.treeStructureChanged(javax.swing.event.TreeModelEvent)','418','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler','public void treeStructureChanged(TreeModelEvent e) {\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n}'),(4142,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.-init-()','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','SelectionPanelHandler() {\r\n}'),(4143,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.keyPressed(java.awt.event.KeyEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void keyPressed(KeyEvent evt) {\r\n}'),(4144,'keyReleased(java.awt.event.KeyEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.keyReleased(java.awt.event.KeyEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void keyReleased(KeyEvent evt) {\r\n    Object src = evt.getSource();\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_LEFT :\r\n            if (src == (selectionPanel.getCollectionList())) {\r\n                // \r\n            } else\r\n                if (src == (selectionPanel.getFamilyList())) {\r\n                    selectionPanel.getCollectionList().requestFocus();\r\n                } else\r\n                    if (src == (selectionPanel.getFaceList())) {\r\n                        selectionPanel.getFamilyList().requestFocus();\r\n                    }\r\n\r\n\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            if (src == (selectionPanel.getCollectionList())) {\r\n                selectionPanel.getFamilyList().requestFocus();\r\n            } else\r\n                if (src == (selectionPanel.getFamilyList())) {\r\n                    selectionPanel.getFaceList().requestFocus();\r\n                } else\r\n                    if (src == (selectionPanel.getFaceList())) {\r\n                        // \r\n                    }\r\n\r\n\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_ESCAPE :\r\n            fontChooser.cancelSelection();\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_ENTER :\r\n            fontChooser.approveSelection();\r\n            evt.consume();\r\n            break;\r\n    }\r\n}'),(4145,'keyTyped(java.awt.event.KeyEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.keyTyped(java.awt.event.KeyEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void keyTyped(KeyEvent evt) {\r\n}'),(4146,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.mouseClicked(java.awt.event.MouseEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void mouseClicked(MouseEvent evt) {\r\n    if (((evt.getClickCount()) == 2) && ((evt.getButton()) == (MouseEvent.BUTTON1))) {\r\n        fontChooser.approveSelection();\r\n    }\r\n}'),(4147,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.mouseEntered(java.awt.event.MouseEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void mouseEntered(MouseEvent e) {\r\n}'),(4148,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.mouseExited(java.awt.event.MouseEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void mouseExited(MouseEvent e) {\r\n}'),(4149,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.mousePressed(java.awt.event.MouseEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void mousePressed(MouseEvent e) {\r\n}'),(4150,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.mouseReleased(java.awt.event.MouseEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void mouseReleased(MouseEvent e) {\r\n}'),(4151,'valueChanged(javax.swing.event.ListSelectionEvent)','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler.valueChanged(javax.swing.event.ListSelectionEvent)','419','org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler','public void valueChanged(ListSelectionEvent evt) {\r\n    if ((isUpdating) == 0) {\r\n        Object src = evt.getSource();\r\n        if (src == (selectionPanel.getCollectionList())) {\r\n            doCollectionChanged();\r\n        } else\r\n            if (src == (selectionPanel.getFamilyList())) {\r\n                doFamilyChanged();\r\n            } else\r\n                if (src == (selectionPanel.getFaceList())) {\r\n                    doFaceChanged();\r\n                }\r\n\r\n\r\n    }\r\n}'),(4152,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.-init-()','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','PaletteFormattedTextFieldUI() {\r\n}'),(4153,'-init-(javax.swing.text.Element)','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.-init-(javax.swing.text.Element)','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','1( $anonymous0) {\r\n}'),(4154,'create(javax.swing.text.Element)','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.create(javax.swing.text.Element)','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','/**\r\n * Creates a view (FieldView) based on an element.\r\n *\r\n * @param elem\r\n * 		the element\r\n * @return the view\r\n */\r\n@Override\r\npublic View create(Element elem) {\r\n    /* We create our own view here. This view always uses the\n    text alignment that was specified by the text component. Even\n    then, when the text is longer than in the text component.\n\n    Draws a wavy line if the value of the field is not valid.\n     */\r\n    return new FieldView(elem) {\r\n        /**\r\n         * Adjusts the allocation given to the view\r\n         * to be a suitable allocation for a text field.\r\n         * If the view has been allocated more than the\r\n         * preferred span vertically, the allocation is\r\n         * changed to be centered vertically.  Horizontally\r\n         * the view is adjusted according to the horizontal\r\n         * alignment property set on the associated JTextField\r\n         * (if that is the type of the hosting component).\r\n         *\r\n         * @param a\r\n         * 		the allocation given to the view, which may need\r\n         * 		to be adjusted.\r\n         * @return the allocation that the superclass should use.\r\n         */\r\n        protected Shape adjustAllocationXX(Shape a) {\r\n            if (a != null) {\r\n                Rectangle bounds = a.getBounds();\r\n                int vspan = ((int) (getPreferredSpan(View.Y_AXIS)));\r\n                int hspan = ((int) (getPreferredSpan(View.X_AXIS)));\r\n                if ((bounds.height) != vspan) {\r\n                    int slop = (bounds.height) - vspan;\r\n                    bounds.y += slop / 2;\r\n                    bounds.height -= slop;\r\n                }\r\n                // horizontal adjustments\r\n                Component c = getContainer();\r\n                if (c instanceof JTextField) {\r\n                    JTextField field = ((JTextField) (c));\r\n                    BoundedRangeModel vis = field.getHorizontalVisibility();\r\n                    int max = Math.max(hspan, bounds.width);\r\n                    int value = vis.getValue();\r\n                    int extent = Math.min(max, ((bounds.width) - 1));\r\n                    if ((value + extent) > max) {\r\n                        value = max - extent;\r\n                    }\r\n                    vis.setRangeProperties(value, extent, vis.getMinimum(), max, false);\r\n                    if (hspan < (bounds.width)) {\r\n                        // horizontally align the interior\r\n                        int slop = ((bounds.width) - 1) - hspan;\r\n                        int align = ((JTextField) (c)).getHorizontalAlignment();\r\n                        /* ((JComponent) c).isLeftToRight() */\r\n                        if (true) {\r\n                            if (align == (SwingConstants.LEADING)) {\r\n                                align = SwingConstants.LEFT;\r\n                            } else\r\n                                if (align == (SwingConstants.TRAILING)) {\r\n                                    align = SwingConstants.RIGHT;\r\n                                }\r\n\r\n                        } else {\r\n                            if (align == (SwingConstants.LEADING)) {\r\n                                align = SwingConstants.RIGHT;\r\n                            } else\r\n                                if (align == (SwingConstants.TRAILING)) {\r\n                                    align = SwingConstants.LEFT;\r\n                                }\r\n\r\n                        }\r\n                        switch (align) {\r\n                            case SwingConstants.CENTER :\r\n                                bounds.x += slop / 2;\r\n                                bounds.width -= slop;\r\n                                break;\r\n                            case SwingConstants.RIGHT :\r\n                                bounds.x += slop;\r\n                                bounds.width -= slop;\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        // adjust the allocation to match the bounded range.\r\n                        bounds.width = hspan;\r\n                        bounds.x -= vis.getValue();\r\n                    }\r\n                }\r\n                return bounds;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public void paint(Graphics gr, Shape a) {\r\n            Graphics2D g = ((Graphics2D) (gr));\r\n            JFormattedTextField editor = ((JFormattedTextField) (getComponent()));\r\n            if (!(editor.isEditValid())) {\r\n                Rectangle r = ((Rectangle) (a));\r\n                g.setColor(errorIndicatorForeground);\r\n                g.setStroke(new BasicStroke(2.5F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{ 3.0F, 3.0F }, 0.5F));\r\n                g.draw(new Line2D.Float(r.x, (((r.y) + (r.height)) - 0.5F), (((r.x) + (r.width)) - 1), (((r.y) + (r.height)) - 0.5F)));\r\n            }\r\n            super.paint(g, a);\r\n        }\r\n    };\r\n}'),(4155,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.createUI(javax.swing.JComponent)','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','/**\r\n * Creates a UI for a JTextField.\r\n *\r\n * @param c\r\n * 		the text field\r\n * @return the UI\r\n */\r\npublic static ComponentUI createUI(JComponent c) {\r\n    return new PaletteFormattedTextFieldUI();\r\n}'),(4156,'installDefaults()','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.installDefaults()','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','/**\r\n * Initializes component properties, e.g. font, foreground,\r\n * background, caret color, selection color, selected text color,\r\n * disabled text color, and border color.  The font, foreground, and\r\n * background properties are only set if their current value is either null\r\n * or a UIResource, other properties are set if the current\r\n * value is null.\r\n *\r\n * @see #uninstallDefaults\r\n * @see #installUI\r\n */\r\n@Override\r\nprotected void installDefaults() {\r\n    JTextComponent editor = getComponent();\r\n    PaletteLookAndFeel plaf = PaletteLookAndFeel.getInstance();\r\n    String prefix = getPropertyPrefix();\r\n    Font f = editor.getFont();\r\n    if ((f == null) || (f instanceof UIResource)) {\r\n        editor.setFont(plaf.getFont((prefix + \".font\")));\r\n    }\r\n    Color bg = editor.getBackground();\r\n    if ((bg == null) || (bg instanceof UIResource)) {\r\n        editor.setBackground(plaf.getColor((prefix + \".background\")));\r\n    }\r\n    Color fg = editor.getForeground();\r\n    if ((fg == null) || (fg instanceof UIResource)) {\r\n        editor.setForeground(plaf.getColor((prefix + \".foreground\")));\r\n    }\r\n    Color color = editor.getCaretColor();\r\n    if ((color == null) || (color instanceof UIResource)) {\r\n        editor.setCaretColor(plaf.getColor((prefix + \".caretForeground\")));\r\n    }\r\n    Color s = editor.getSelectionColor();\r\n    if ((s == null) || (s instanceof UIResource)) {\r\n        editor.setSelectionColor(plaf.getColor((prefix + \".selectionBackground\")));\r\n    }\r\n    Color sfg = editor.getSelectedTextColor();\r\n    if ((sfg == null) || (sfg instanceof UIResource)) {\r\n        editor.setSelectedTextColor(plaf.getColor((prefix + \".selectionForeground\")));\r\n    }\r\n    Color dfg = editor.getDisabledTextColor();\r\n    if ((dfg == null) || (dfg instanceof UIResource)) {\r\n        editor.setDisabledTextColor(plaf.getColor((prefix + \".inactiveForeground\")));\r\n    }\r\n    Border b = editor.getBorder();\r\n    if ((b == null) || (b instanceof UIResource)) {\r\n        editor.setBorder(plaf.getBorder((prefix + \".border\")));\r\n    }\r\n    Insets margin = editor.getMargin();\r\n    if ((margin == null) || (margin instanceof UIResource)) {\r\n        editor.setMargin(plaf.getInsets((prefix + \".margin\")));\r\n    }\r\n    errorIndicatorForeground = plaf.getColor((prefix + \".errorIndicatorForeground\"));\r\n    editor.setOpaque(plaf.getBoolean((prefix + \".opaque\")));\r\n}'),(4157,'paintBackground(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.paintBackground(java.awt.Graphics)','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','@Override\r\npublic void paintBackground(Graphics g) {\r\n    JTextComponent c = getComponent();\r\n    if ((c.getBorder()) instanceof BackdropBorder) {\r\n        BackdropBorder bb = ((BackdropBorder) (c.getBorder()));\r\n        bb.getBackdropBorder().paintBorder(c, g, 0, 0, c.getWidth(), c.getHeight());\r\n    } else {\r\n        super.paintBackground(g);\r\n    }\r\n}'),(4158,'paintSafely(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI.paintSafely(java.awt.Graphics)','421','org.jhotdraw.gui.plaf.palette.PaletteFormattedTextFieldUI','@Override\r\nprotected void paintSafely(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    super.paintSafely(g);\r\n}'),(4159,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.-init-()','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','PaletteLabelUI() {\r\n}'),(4160,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.createUI(javax.swing.JComponent)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','/**\r\n * Preferred spacing between labels and other components.\r\n * Pixels from colon and associated controls (RadioButton,\r\n * CheckBox)\r\n * /\r\n * private final static Insets associatedRegularSpacing = new Insets(8,8,8,8);\r\n * private final static Insets associatedSmallSpacing = new Insets(6,6,6,6);\r\n * private final static Insets associatedMiniSpacing = new Insets(5,5,5,5);\r\n */\r\npublic static ComponentUI createUI(JComponent c) {\r\n    return PaletteLabelUI.labelUI;\r\n}'),(4161,'installDefaults(javax.swing.JLabel)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.installDefaults(javax.swing.JLabel)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','@Override\r\nprotected void installDefaults(JLabel b) {\r\n    super.installDefaults(b);\r\n    // load shared instance defaults\r\n    PaletteLookAndFeel.installBorder(b, \"Label.border\");\r\n    PaletteLookAndFeel.installColorsAndFont(b, \"Label.background\", \"Label.foreground\", \"Label.font\");\r\n    // FIXME - Very, very dirty trick to achieve small labels on sliders\r\n    // This hack should be removed, when we implement a SliderUI\r\n    // on our own.\r\n    if (b.getClass().getName().endsWith(\"LabelUIResource\")) {\r\n        b.setFont(UIManager.getFont(\"Slider.labelFont\"));\r\n    }\r\n}'),(4162,'layoutCL(javax.swing.JLabel,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.layoutCL(javax.swing.JLabel,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','/**\r\n * Forwards the call to SwingUtilities.layoutCompoundLabel().\r\n * This method is here so that a subclass could do Label specific\r\n * layout and to shorten the method name a little.\r\n *\r\n * @see SwingUtilities#layoutCompoundLabel\r\n */\r\nprotected String layoutCL(JLabel label, FontMetrics fontMetrics, String text, Icon icon, Rectangle viewR, Rectangle iconR, Rectangle textR) {\r\n    return SwingUtilities.layoutCompoundLabel(((JComponent) (label)), fontMetrics, text, icon, label.getVerticalAlignment(), label.getHorizontalAlignment(), label.getVerticalTextPosition(), label.getHorizontalTextPosition(), viewR, iconR, textR, label.getIconTextGap());\r\n}'),(4163,'paint(java.awt.Graphics,javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','public void paint(Graphics gr, JComponent c) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    Object oldHints = PaletteUtilities.beginGraphics(g);\r\n    // Paint background again so that the texture paint is drawn\r\n    /* if (c.isOpaque()) {\n    g.setPaint(PaintableColor.getPaint(c.getBackground(), c));\n    g.fillRect(0, 0, c.getWidth(), c.getHeight());\n    }\n     */\r\n    // Paint background border\r\n    /* Border b = c.getBorder();\n    if (b != null && b instanceof BackgroundBorder) {\n    ((BackgroundBorder) b).getBackgroundBorder().paintBorder(c, g, 0, 0, c.getWidth(), c.getHeight());\n    }\n     */\r\n    super.paint(g, c);\r\n    PaletteUtilities.endGraphics(g, oldHints);\r\n}'),(4164,'paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','/**\r\n * Paint label with disabled text color.\r\n *\r\n * @see #paint\r\n * @see #paintEnabledText\r\n */\r\nprotected void paintDisabledText(JLabel l, Graphics g, String s, int textX, int textY) {\r\n    Color c = UIManager.getColor(\"Label.disabledForeground\");\r\n    g.setColor((c != null ? c : l.getForeground()));\r\n    int accChar = -1;// l.getDisplayedMnemonicIndex();\r\n\r\n    PaletteUtilities.drawString(g, s, accChar, textX, textY);\r\n}'),(4165,'paintEnabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.paintEnabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','protected void paintEnabledText(JLabel l, Graphics g, String s, int textX, int textY) {\r\n    int mnemIndex = l.getDisplayedMnemonicIndex();\r\n    String style = ((String) (l.getClientProperty(\"Quaqua.Label.style\")));\r\n    if (style != null) {\r\n        if ((style.equals(\"emboss\")) && ((UIManager.getColor(\"Label.embossForeground\")) != null)) {\r\n            g.setColor(UIManager.getColor(\"Label.embossForeground\"));\r\n            PaletteUtilities.drawString(g, s, mnemIndex, textX, (textY + 1));\r\n        } else\r\n            if ((style.equals(\"shadow\")) && ((UIManager.getColor(\"Label.shadowForeground\")) != null)) {\r\n                g.setColor(UIManager.getColor(\"Label.shadowForeground\"));\r\n                PaletteUtilities.drawString(g, s, mnemIndex, textX, (textY + 1));\r\n            }\r\n\r\n    }\r\n    g.setColor(l.getForeground());\r\n    PaletteUtilities.drawString(g, s, mnemIndex, textX, textY);\r\n    // SwingUtilities2.drawStringUnderlineCharAt(l, g, s, mnemIndex,\r\n    // textX, textY);\r\n}'),(4166,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.gui.plaf.palette.PaletteLabelUI.propertyChange(java.beans.PropertyChangeEvent)','422','org.jhotdraw.gui.plaf.palette.PaletteLabelUI','public void propertyChange(PropertyChangeEvent evt) {\r\n    String name = evt.getPropertyName();\r\n    if (name.equals(\"JComponent.sizeVariant\")) {\r\n        // QuaquaUtilities.applySizeVariant((JLabel) evt.getSource());\r\n    } else {\r\n        super.propertyChange(evt);\r\n    }\r\n}'),(4167,'-init-(java.lang.Class)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.-init-(java.lang.Class)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','private PaletteLazyActionMap(Class loader) {\r\n    _loader = loader;\r\n}'),(4168,'allKeys()','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.allKeys()','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public Object[] allKeys() {\r\n    loadIfNecessary();\r\n    return super.allKeys();\r\n}'),(4169,'clear()','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.clear()','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public void clear() {\r\n    loadIfNecessary();\r\n    super.clear();\r\n}'),(4170,'get(java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.get(java.lang.Object)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public Action get(Object key) {\r\n    loadIfNecessary();\r\n    return super.get(key);\r\n}'),(4171,'getActionMap(java.lang.Class,java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.getActionMap(java.lang.Class,java.lang.String)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','/**\r\n * Returns an ActionMap that will be populated by invoking the\r\n * <code>loadActionMap</code> method on the specified Class\r\n * when necessary.\r\n * <p>\r\n * This should be used if the ActionMap can be shared.\r\n *\r\n * @param c\r\n * 		JComponent to install the ActionMap on.\r\n * @param loaderClass\r\n * 		Class object that gets loadActionMap invoked\r\n * 		on.\r\n * @param defaultsKey\r\n * 		Key to use to defaults table to check for\r\n * 		existing map and what resulting Map will be registered on.\r\n */\r\nstatic ActionMap getActionMap(Class loaderClass, String defaultsKey) {\r\n    ActionMap map = ((ActionMap) (UIManager.get(defaultsKey)));\r\n    if (map == null) {\r\n        map = new PaletteLazyActionMap(loaderClass);\r\n        UIManager.getLookAndFeelDefaults().put(defaultsKey, map);\r\n    }\r\n    return map;\r\n}'),(4172,'installLazyActionMap(javax.swing.JComponent,java.lang.Class,java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.installLazyActionMap(javax.swing.JComponent,java.lang.Class,java.lang.String)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','/**\r\n * Installs an ActionMap that will be populated by invoking the\r\n * <code>loadActionMap</code> method on the specified Class\r\n * when necessary.\r\n * <p>\r\n * This should be used if the ActionMap can be shared.\r\n *\r\n * @param c\r\n * 		JComponent to install the ActionMap on.\r\n * @param loaderClass\r\n * 		Class object that gets loadActionMap invoked\r\n * 		on.\r\n * @param defaultsKey\r\n * 		Key to use to defaults table to check for\r\n * 		existing map and what resulting Map will be registered on.\r\n */\r\nstatic void installLazyActionMap(JComponent c, Class loaderClass, String defaultsKey) {\r\n    ActionMap map = ((ActionMap) (UIManager.get(defaultsKey)));\r\n    if (map == null) {\r\n        map = new PaletteLazyActionMap(loaderClass);\r\n        UIManager.getLookAndFeelDefaults().put(defaultsKey, map);\r\n    }\r\n    SwingUtilities.replaceUIActionMap(c, map);\r\n}'),(4173,'keys()','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.keys()','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public Object[] keys() {\r\n    loadIfNecessary();\r\n    return super.keys();\r\n}'),(4174,'loadIfNecessary()','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.loadIfNecessary()','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','@SuppressWarnings(\"unchecked\")\r\nprivate void loadIfNecessary() {\r\n    if ((_loader) != null) {\r\n        Object loader = _loader;\r\n        _loader = null;\r\n        Class klass = ((Class) (loader));\r\n        try {\r\n            Method method = klass.getDeclaredMethod(\"loadActionMap\", new Class[]{ PaletteLazyActionMap.class });\r\n            method.invoke(klass, new Object[]{ this });\r\n        } catch (NoSuchMethodException nsme) {\r\n            assert false : \"LazyActionMap unable to load actions \" + klass;\r\n        } catch (IllegalAccessException iae) {\r\n            assert false : \"LazyActionMap unable to load actions \" + iae;\r\n        } catch (InvocationTargetException ite) {\r\n            assert false : \"LazyActionMap unable to load actions \" + ite;\r\n        } catch (IllegalArgumentException iae) {\r\n            assert false : \"LazyActionMap unable to load actions \" + iae;\r\n        }\r\n    }\r\n}'),(4175,'put(java.lang.Object,javax.swing.Action)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.put(java.lang.Object,javax.swing.Action)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public void put(Object key, Action action) {\r\n    loadIfNecessary();\r\n    super.put(key, action);\r\n}'),(4176,'put(javax.swing.Action)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.put(javax.swing.Action)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public void put(Action action) {\r\n    put(action.getValue(Action.NAME), action);\r\n}'),(4177,'remove(java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.remove(java.lang.Object)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public void remove(Object key) {\r\n    loadIfNecessary();\r\n    super.remove(key);\r\n}'),(4178,'setParent(javax.swing.ActionMap)','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.setParent(javax.swing.ActionMap)','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public void setParent(ActionMap map) {\r\n    loadIfNecessary();\r\n    super.setParent(map);\r\n}'),(4179,'size()','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap.size()','423','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap','public int size() {\r\n    loadIfNecessary();\r\n    return super.size();\r\n}'),(4180,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.-init-()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','PaletteLookAndFeel() {\r\n}'),(4181,'get(java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.get(java.lang.Object)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','/**\r\n * Looks up up the given key in our Hashtable and resolves LazyValues\r\n * or ActiveValues.\r\n */\r\npublic Object get(Object key) {\r\n    UIDefaults defaults = getCachedDefaults();\r\n    /* Quickly handle the common case, without grabbing\n    a lock.\n     */\r\n    Object value = defaults.get(key);\r\n    if ((!(value instanceof UIDefaults.ActiveValue)) && (!(value instanceof UIDefaults.LazyValue))) {\r\n        return value;\r\n    }\r\n    /* At this point we know that the value of key was\n    a LazyValue or an ActiveValue.\n     */\r\n    if (value instanceof UIDefaults.LazyValue) {\r\n        try {\r\n            /* If an exception is thrown well just put the LazyValue\n            back in the table.\n             */\r\n            value = ((UIDefaults.LazyValue) (value)).createValue(defaults);\r\n        } finally {\r\n            if (value == null) {\r\n                defaults.remove(key);\r\n            } else {\r\n                defaults.put(key, value);\r\n            }\r\n        }\r\n    } else {\r\n        value = ((UIDefaults.ActiveValue) (value)).createValue(defaults);\r\n    }\r\n    return value;\r\n}'),(4182,'getBoolean(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getBoolean(java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public boolean getBoolean(String key) {\r\n    return ((Boolean) (get(key))).booleanValue();\r\n}'),(4183,'getBorder(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getBorder(java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public Border getBorder(String key) {\r\n    return ((Border) (get(key)));\r\n}'),(4184,'getCachedDefaults()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getCachedDefaults()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public UIDefaults getCachedDefaults() {\r\n    if ((cachedDefaults) == null) {\r\n        cachedDefaults = getDefaults();\r\n    }\r\n    return cachedDefaults;\r\n}'),(4185,'getColor(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getColor(java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public Color getColor(String key) {\r\n    return ((Color) (get(key)));\r\n}'),(4186,'getDescription()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getDescription()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','@Override\r\npublic String getDescription() {\r\n    return \"A look and feel for palette components\";\r\n}'),(4187,'getFont(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getFont(java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public Font getFont(String key) {\r\n    return ((Font) (get(key)));\r\n}'),(4188,'getID()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getID()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','@Override\r\npublic String getID() {\r\n    return \"Palette\";\r\n}'),(4189,'getInsets(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getInsets(java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public Insets getInsets(String key) {\r\n    return ((Insets) (get(key)));\r\n}'),(4190,'getInstance()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getInstance()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','public static PaletteLookAndFeel getInstance() {\r\n    if ((PaletteLookAndFeel.instance) == null) {\r\n        PaletteLookAndFeel.instance = new PaletteLookAndFeel();\r\n    }\r\n    return PaletteLookAndFeel.instance;\r\n}'),(4191,'getName()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getName()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','@Override\r\npublic String getName() {\r\n    return \"Palette Look and Feel\";\r\n}'),(4192,'getUIOfType(javax.swing.plaf.ComponentUI,java.lang.Class)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.getUIOfType(javax.swing.plaf.ComponentUI,java.lang.Class)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','/**\r\n * Returns the ui that is of type <code>klass</code>, or null if\r\n * one can not be found.\r\n */\r\nstatic Object getUIOfType(ComponentUI ui, Class klass) {\r\n    if (klass.isInstance(ui)) {\r\n        return ui;\r\n    }\r\n    return null;\r\n}'),(4193,'initComponentDefaults(javax.swing.UIDefaults)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.initComponentDefaults(javax.swing.UIDefaults)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','@Override\r\nprotected void initComponentDefaults(UIDefaults table) {\r\n    super.initComponentDefaults(table);\r\n    table.addResourceBundle(\"org.jhotdraw.gui.Labels\");\r\n    // *** Shared Fonts\r\n    Integer eleven = new Integer(11);\r\n    Integer twelve = new Integer(12);\r\n    Integer fontPlain = new Integer(Font.PLAIN);\r\n    Integer fontBold = new Integer(Font.BOLD);\r\n    Object dialogPlain11 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"Dialog Sans\", fontPlain, eleven });\r\n    Object dialogPlain12 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"Dialog Sans\", fontPlain, twelve });\r\n    Object fieldPlain12 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"Verdana\", fontPlain, twelve });\r\n    Object serifPlain12 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"Serif\", fontPlain, twelve });\r\n    Object sansSerifPlain12 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"SansSerif\", fontPlain, twelve });\r\n    Object monospacedPlain12 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"MonoSpaced\", fontPlain, twelve });\r\n    Object dialogBold12 = new UIDefaults.ProxyLazyValue(\"javax.swing.plaf.FontUIResource\", null, new Object[]{ \"Dialog\", fontBold, twelve });\r\n    // *** Shared Colors\r\n    ColorUIResource black = new ColorUIResource(Color.black);\r\n    ColorUIResource control = new ColorUIResource(15790320);\r\n    ColorUIResource controlText = black;\r\n    ColorUIResource selectionBackground = new ColorUIResource(11916799);\r\n    ColorUIResource selectionForeground = black;\r\n    // *** Shared Insets\r\n    InsetsUIResource zeroInsets = new InsetsUIResource(0, 0, 0, 0);\r\n    InsetsUIResource twoInsets = new InsetsUIResource(2, 2, 2, 2);\r\n    // *** Shared Borders\r\n    /* Object buttonBorder = \n    new ProxyLazyValue(\n    \"org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource\",\n    new Object[] {new PaletteButtonBorder()});\n     */\r\n    Object buttonBorder = new BackdropBorder.UIResource(new PaletteButtonBorder());\r\n    Object textBorder = new BackdropBorder.UIResource(new PaletteTextComponentBorder());\r\n    Object[] defaults = // \"ToolBar.separatorSize\", toolBarSeparatorSize,\r\n    new Object[]{ // *** Fonts\r\n    \"SmallSystemFont\", dialogPlain11, // *** Buttons\r\n    \"Button.font\", dialogPlain12, \"Button.background\", control, \"Button.foreground\", controlText, \"Button.border\", buttonBorder, \"Button.margin\", zeroInsets, // *** FontChooser\r\n    \"Button.background\", control, \"Button.foreground\", controlText, \"Button.border\", buttonBorder, \"Button.margin\", zeroInsets, // *** FormattedTextField\r\n    \"FormattedTextField.font\", fieldPlain12, \"FormattedTextField.background\", control, \"FormattedTextField.foreground\", controlText, \"FormattedTextField.border\", textBorder, \"FormattedTextField.margin\", zeroInsets, \"FormattedTextField.opaque\", Boolean.TRUE, \"FormattedTextField.errorIndicatorForeground\", new ColorUIResource(16665153), \"FormattedTextField.selectionBackground\", selectionBackground, \"FormattedTextField.selectionForeground\", selectionForeground, // *** Labels\r\n    \"Label.font\", dialogPlain12, // *** Ribbons\r\n    \"Ribbon.border\", new UIDefaults.ProxyLazyValue(\"javax.swing.border.MatteBorder\", new Object[]{ new Insets(1, 0, 0, 0), new Color(10855845) })// \r\n    , // *** ScrollPane\r\n    \"ScrollPane.border\", new UIDefaults.ProxyLazyValue(\"javax.swing.border.MatteBorder\", new Object[]{ new Insets(1, 1, 1, 1), new Color(10855845) })// \r\n    , // *** Slider\r\n    \"Slider.background\", control, \"Slider.foreground\", controlText, \"Slider.horizontalSize\", new DimensionUIResource(100, 20), \"Slider.verticalSize\", new DimensionUIResource(20, 100), // *** TextArea\r\n    \"TextArea.selectionBackground\", selectionBackground, \"TextArea.selectionForeground\", selectionForeground, // *** TextField\r\n    \"TextField.font\", fieldPlain12, \"TextField.background\", control, \"TextField.foreground\", controlText, \"TextField.border\", textBorder, \"TextField.margin\", zeroInsets, \"TextField.opaque\", Boolean.TRUE, \"TextField.selectionBackground\", selectionBackground, \"TextField.selectionForeground\", selectionForeground, // *** ToolBar\r\n    \"ToolBar.font\", dialogPlain12, \"ToolBar.background\", control, \"ToolBar.foreground\", controlText, \"ToolBar.dockingBackground\", control, // \"ToolBar.dockingForeground\", red,\r\n    \"ToolBar.floatingBackground\", control, // \"ToolBar.floatingForeground\", darkGray,\r\n    // \"ToolBar.border\", etchedBorder,\r\n    \"ToolBar.border\", new UIDefaults.ProxyLazyValue(\"org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder$UIResource\")// \r\n     }// \"ToolBar.separatorSize\", toolBarSeparatorSize,\r\n    ;\r\n    table.putDefaults(defaults);\r\n}'),(4194,'installBorder(javax.swing.JComponent,java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.installBorder(javax.swing.JComponent,java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','/**\r\n * Convenience method for installing a components default Border\r\n * object on the specified component if either the border is\r\n * currently null or already an instance of UIResource.\r\n *\r\n * @param c\r\n * 		the target component for installing default border\r\n * @param defaultBorderName\r\n * 		the key specifying the default border\r\n */\r\npublic static void installBorder(JComponent c, String defaultBorderName) {\r\n    Border b = c.getBorder();\r\n    // if (b == null || b instanceof UIResource) {\r\n    c.setBorder(PaletteLookAndFeel.getInstance().getBorder(defaultBorderName));\r\n    // }\r\n}'),(4195,'installColors(javax.swing.JComponent,java.lang.String,java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.installColors(javax.swing.JComponent,java.lang.String,java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','/**\r\n * Convenience method for initializing a components foreground\r\n * and background color properties with values from the current\r\n * defaults table.  The properties are only set if the current\r\n * value is either null or a UIResource.\r\n *\r\n * @param c\r\n * 		the target component for installing default color/font properties\r\n * @param defaultBgName\r\n * 		the key for the default background\r\n * @param defaultFgName\r\n * 		the key for the default foreground\r\n * @see #installColorsAndFont\r\n * @see UIManager#getColor\r\n */\r\npublic static void installColors(JComponent c, String defaultBgName, String defaultFgName) {\r\n    Color bg = c.getBackground();\r\n    if ((bg == null) || (bg instanceof UIResource)) {\r\n        c.setBackground(PaletteLookAndFeel.getInstance().getColor(defaultBgName));\r\n    }\r\n    Color fg = c.getForeground();\r\n    if ((fg == null) || (fg instanceof UIResource)) {\r\n        c.setForeground(PaletteLookAndFeel.getInstance().getColor(defaultFgName));\r\n    }\r\n}'),(4196,'installColorsAndFont(javax.swing.JComponent,java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.installColorsAndFont(javax.swing.JComponent,java.lang.String,java.lang.String,java.lang.String)','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','/**\r\n * Convenience method for initializing a components foreground\r\n * background and font properties with values from the current\r\n * defaults table.  The properties are only set if the current\r\n * value is either null or a UIResource.\r\n *\r\n * @param c\r\n * 		the target component for installing default color/font properties\r\n * @param defaultBgName\r\n * 		the key for the default background\r\n * @param defaultFgName\r\n * 		the key for the default foreground\r\n * @param defaultFontName\r\n * 		the key for the default font\r\n * @see #installColors\r\n * @see UIManager#getColor\r\n * @see UIManager#getFont\r\n */\r\npublic static void installColorsAndFont(JComponent c, String defaultBgName, String defaultFgName, String defaultFontName) {\r\n    Font f = c.getFont();\r\n    if ((f == null) || (f instanceof UIResource)) {\r\n        c.setFont(PaletteLookAndFeel.getInstance().getFont(defaultFontName));\r\n    }\r\n    PaletteLookAndFeel.installColors(c, defaultBgName, defaultFgName);\r\n}'),(4197,'isNativeLookAndFeel()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.isNativeLookAndFeel()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','@Override\r\npublic boolean isNativeLookAndFeel() {\r\n    return false;\r\n}'),(4198,'isSupportedLookAndFeel()','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel.isSupportedLookAndFeel()','424','org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel','@Override\r\npublic boolean isSupportedLookAndFeel() {\r\n    return true;\r\n}'),(4199,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI.-init-()','426','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI','PaletteRootPaneUI() {\r\n}'),(4200,'-init-(javax.swing.JRootPane)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI.-init-(javax.swing.JRootPane)','426','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI','public PaletteRootLayout(JRootPane rootPane) {\r\n    this.rootPane = rootPane;\r\n}'),(4201,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI.createUI(javax.swing.JComponent)','426','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI','public static ComponentUI createUI(JComponent c) {\r\n    return PaletteRootPaneUI.rootPaneUI;\r\n}'),(4202,'installUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI.installUI(javax.swing.JComponent)','426','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI','public void installUI(JComponent c) {\r\n    super.installUI(c);\r\n    c.setLayout(new PaletteRootPaneUI.PaletteRootLayout(((JRootPane) (c))));\r\n}'),(4203,'-init-(javax.swing.JRootPane)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.-init-(javax.swing.JRootPane)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public PaletteRootLayout(JRootPane rootPane) {\r\n    this.rootPane = rootPane;\r\n}'),(4204,'addLayoutComponent(java.awt.Component,java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.addLayoutComponent(java.awt.Component,java.lang.Object)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public void addLayoutComponent(Component comp, Object constraints) {\r\n}'),(4205,'addLayoutComponent(java.lang.String,java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.addLayoutComponent(java.lang.String,java.awt.Component)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public void addLayoutComponent(String name, Component comp) {\r\n}'),(4206,'getLayoutAlignmentX(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.getLayoutAlignmentX(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public float getLayoutAlignmentX(Container target) {\r\n    return 0.0F;\r\n}'),(4207,'getLayoutAlignmentY(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.getLayoutAlignmentY(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public float getLayoutAlignmentY(Container target) {\r\n    return 0.0F;\r\n}'),(4208,'invalidateLayout(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.invalidateLayout(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public void invalidateLayout(Container target) {\r\n}'),(4209,'layoutContainer(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.layoutContainer(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','/**\r\n * Instructs the layout manager to perform the layout for the specified\r\n * container.\r\n *\r\n * @param parent\r\n * 		the Container for which this layout manager\r\n * 		is being used\r\n */\r\npublic void layoutContainer(Container parent) {\r\n    Rectangle b = parent.getBounds();\r\n    Insets i = rootPane.getInsets();\r\n    JLayeredPane layeredPane = rootPane.getLayeredPane();\r\n    Component glassPane = rootPane.getGlassPane();\r\n    Container contentPane = rootPane.getContentPane();\r\n    JMenuBar menuBar = rootPane.getJMenuBar();\r\n    int contentY = 0;\r\n    int w = ((b.width) - (i.right)) - (i.left);\r\n    int h = ((b.height) - (i.top)) - (i.bottom);\r\n    if (layeredPane != null) {\r\n        layeredPane.setBounds(i.left, i.top, w, h);\r\n    }\r\n    if (glassPane != null) {\r\n        glassPane.setBounds(i.left, i.top, w, h);\r\n    }\r\n    // Note: This is laying out the children in the layeredPane,\r\n    // technically, these are not our children.\r\n    if ((menuBar != null) && (menuBar.isVisible())) {\r\n        Dimension mbd = menuBar.getPreferredSize();\r\n        menuBar.setBounds(0, 0, w, mbd.height);\r\n        contentY += mbd.height;\r\n    }\r\n    if (contentPane != null) {\r\n        contentPane.setBounds(0, contentY, w, (h - contentY));\r\n    }\r\n}'),(4210,'maximumLayoutSize(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.maximumLayoutSize(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','/**\r\n * Returns the maximum amount of space the layout can use.\r\n *\r\n * @param target\r\n * 		the Container for which this layout manager\r\n * 		is being used\r\n * @return a Dimension object containing the layouts maximum size\r\n */\r\npublic Dimension maximumLayoutSize(Container target) {\r\n    Dimension rd;\r\n    Dimension mbd;\r\n    Insets i = rootPane.getInsets();\r\n    Container contentPane = rootPane.getContentPane();\r\n    JMenuBar menuBar = rootPane.getJMenuBar();\r\n    if ((menuBar != null) && (menuBar.isVisible())) {\r\n        mbd = menuBar.getMaximumSize();\r\n    } else {\r\n        mbd = new Dimension(0, 0);\r\n    }\r\n    if ((contentPane != null) && (contentPane.isVisible())) {\r\n        rd = contentPane.getMaximumSize();\r\n    } else {\r\n        // This is silly, but should stop an overflow error\r\n        rd = new Dimension(Integer.MAX_VALUE, (((((Integer.MAX_VALUE) - (i.top)) - (i.bottom)) - (mbd.height)) - 1));\r\n    }\r\n    return new Dimension((((Math.min(rd.width, mbd.width)) + (i.left)) + (i.right)), ((((rd.height) + (mbd.height)) + (i.top)) + (i.bottom)));\r\n}'),(4211,'minimumLayoutSize(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.minimumLayoutSize(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','/**\r\n * Returns the minimum amount of space the layout needs.\r\n *\r\n * @param parent\r\n * 		the Container for which this layout manager\r\n * 		is being used\r\n * @return a Dimension object containing the layouts minimum size\r\n */\r\npublic Dimension minimumLayoutSize(Container parent) {\r\n    Dimension rd;\r\n    Dimension mbd;\r\n    Insets i = rootPane.getInsets();\r\n    Container contentPane = rootPane.getContentPane();\r\n    JMenuBar menuBar = rootPane.getJMenuBar();\r\n    if ((contentPane != null) && (contentPane.isVisible())) {\r\n        rd = contentPane.getMinimumSize();\r\n    } else {\r\n        rd = new Dimension(0, contentPane.getPreferredSize().height);\r\n    }\r\n    if ((menuBar != null) && (menuBar.isVisible())) {\r\n        mbd = menuBar.getMinimumSize();\r\n    } else {\r\n        mbd = new Dimension(0, 0);\r\n    }\r\n    return new Dimension((((Math.max(rd.width, mbd.width)) + (i.left)) + (i.right)), ((((rd.height) + (mbd.height)) + (i.top)) + (i.bottom)));\r\n}'),(4212,'preferredLayoutSize(java.awt.Container)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.preferredLayoutSize(java.awt.Container)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','/**\r\n * Returns the amount of space the layout would like to have.\r\n *\r\n * @param parent\r\n * 		the Container for which this layout manager\r\n * 		is being used\r\n * @return a Dimension object containing the layouts preferred size\r\n */\r\npublic Dimension preferredLayoutSize(Container parent) {\r\n    Dimension rd;\r\n    Dimension mbd;\r\n    Insets i = rootPane.getInsets();\r\n    Container contentPane = rootPane.getContentPane();\r\n    JMenuBar menuBar = rootPane.getJMenuBar();\r\n    if ((contentPane != null) && (contentPane.isVisible())) {\r\n        rd = contentPane.getPreferredSize();\r\n    } else {\r\n        rd = new Dimension(0, contentPane.getPreferredSize().height);\r\n    }\r\n    if ((menuBar != null) && (menuBar.isVisible())) {\r\n        mbd = menuBar.getPreferredSize();\r\n    } else {\r\n        mbd = new Dimension(0, 0);\r\n    }\r\n    return new Dimension((((Math.max(rd.width, mbd.width)) + (i.left)) + (i.right)), ((((rd.height) + (mbd.height)) + (i.top)) + (i.bottom)));\r\n}'),(4213,'removeLayoutComponent(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout.removeLayoutComponent(java.awt.Component)','425','org.jhotdraw.gui.plaf.palette.PaletteRootPaneUI$PaletteRootLayout','public void removeLayoutComponent(Component comp) {\r\n}'),(4214,'-init-(javax.swing.JSlider)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.-init-(javax.swing.JSlider)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','public PaletteSliderUI(JSlider slider) {\r\n    super(slider);\r\n}'),(4215,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.createUI(javax.swing.JComponent)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','public static ComponentUI createUI(JComponent b) {\r\n    return new PaletteSliderUI(((JSlider) (b)));\r\n}'),(4216,'getPreferredHorizontalSize()','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.getPreferredHorizontalSize()','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\npublic Dimension getPreferredHorizontalSize() {\r\n    Dimension horizDim = ((Dimension) (PaletteLookAndFeel.getInstance().get(\"Slider.horizontalSize\")));\r\n    if (horizDim == null) {\r\n        horizDim = new Dimension(100, 21);\r\n    }\r\n    return horizDim;\r\n}'),(4217,'getPreferredVerticalSize()','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.getPreferredVerticalSize()','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\npublic Dimension getPreferredVerticalSize() {\r\n    Dimension vertDim = ((Dimension) (PaletteLookAndFeel.getInstance().get(\"Slider.verticalSize\")));\r\n    if (vertDim == null) {\r\n        vertDim = new Dimension(21, 100);\r\n    }\r\n    return vertDim;\r\n}'),(4218,'getThumbSize()','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.getThumbSize()','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\nprotected Dimension getThumbSize() {\r\n    Dimension size = new Dimension();\r\n    if ((slider.getOrientation()) == (JSlider.VERTICAL)) {\r\n        size.width = 15;\r\n        size.height = 15;\r\n    } else {\r\n        size.width = 15;\r\n        size.height = 15;\r\n    }\r\n    return size;\r\n}'),(4219,'installDefaults(javax.swing.JSlider)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.installDefaults(javax.swing.JSlider)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\nprotected void installDefaults(JSlider slider) {\r\n    super.installDefaults(slider);\r\n    PaletteLookAndFeel laf = PaletteLookAndFeel.getInstance();\r\n    PaletteLookAndFeel.installBorder(slider, \"Slider.border\");\r\n    PaletteLookAndFeel.installColors(slider, \"Slider.background\", \"Slider.foreground\");\r\n}'),(4220,'paint(java.awt.Graphics,javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\npublic void paint(Graphics gr, JComponent c) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    super.paint(g, c);\r\n}'),(4221,'paintFocus(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.paintFocus(java.awt.Graphics)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\npublic void paintFocus(Graphics g) {\r\n    // empty\r\n}'),(4222,'paintThumb(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.paintThumb(java.awt.Graphics)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\npublic void paintThumb(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    Rectangle knobBounds = thumbRect;\r\n    int w = knobBounds.width;\r\n    int h = knobBounds.height;\r\n    g.translate(knobBounds.x, knobBounds.y);\r\n    float[] stops;\r\n    Color[] stopColors;\r\n    if (slider.isEnabled()) {\r\n        g.setColor(slider.getBackground());\r\n        if (slider.getModel().getValueIsAdjusting()) {\r\n            stops = PaletteSliderUI.selectedStops;\r\n            stopColors = PaletteSliderUI.selectedStopColors;\r\n        } else {\r\n            stops = PaletteSliderUI.enabledStops;\r\n            stopColors = PaletteSliderUI.enabledStopColors;\r\n        }\r\n    } else {\r\n        g.setColor(slider.getBackground().darker());\r\n        stops = PaletteSliderUI.enabledStops;\r\n        stopColors = PaletteSliderUI.enabledStopColors;\r\n    }\r\n    Boolean paintThumbArrowShape = ((Boolean) (slider.getClientProperty(\"Slider.paintThumbArrowShape\")));\r\n    if (((!(slider.getPaintTicks())) && (paintThumbArrowShape == null)) || (paintThumbArrowShape == (Boolean.FALSE))) {\r\n        // \"plain\" version\r\n        LinearGradientPaint lgp = new LinearGradientPaint(new Point2D.Float(2, 2), new Point2D.Float(2, ((2 + h) - 4)), stops, stopColors, REPEAT, LINEAR_RGB);\r\n        g.setPaint(lgp);\r\n        g.fillOval(2, 2, (w - 4), (h - 4));\r\n        g.setColor(new Color(4473924));\r\n        g.drawOval(1, 1, (w - 3), (h - 3));\r\n    } else\r\n        if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n            int cw = w / 2;\r\n            g.fillRect(1, 1, (w - 3), ((h - 1) - cw));\r\n            Polygon p = new Polygon();\r\n            p.addPoint(1, (h - cw));\r\n            p.addPoint((cw - 1), (h - 1));\r\n            p.addPoint((w - 2), ((h - 1) - cw));\r\n            g.fillPolygon(p);\r\n            g.setColor(getHighlightColor());\r\n            g.drawLine(0, 0, (w - 2), 0);\r\n            g.drawLine(0, 1, 0, ((h - 1) - cw));\r\n            g.drawLine(0, (h - cw), (cw - 1), (h - 1));\r\n            g.setColor(Color.black);\r\n            g.drawLine((w - 1), 0, (w - 1), ((h - 2) - cw));\r\n            g.drawLine((w - 1), ((h - 1) - cw), ((w - 1) - cw), (h - 1));\r\n            g.setColor(getShadowColor());\r\n            g.drawLine((w - 2), 1, (w - 2), ((h - 2) - cw));\r\n            g.drawLine((w - 2), ((h - 1) - cw), ((w - 1) - cw), (h - 2));\r\n        } else {\r\n            // vertical\r\n            int cw = h / 2;\r\n            if (slider.getComponentOrientation().isLeftToRight()) {\r\n                g.fillRect(1, 1, ((w - 1) - cw), (h - 3));\r\n                Polygon p = new Polygon();\r\n                p.addPoint(((w - cw) - 1), 0);\r\n                p.addPoint((w - 1), cw);\r\n                p.addPoint(((w - 1) - cw), (h - 2));\r\n                g.fillPolygon(p);\r\n                g.setColor(getHighlightColor());\r\n                g.drawLine(0, 0, 0, (h - 2));\r\n                // left\r\n                g.drawLine(1, 0, ((w - 1) - cw), 0);\r\n                // top\r\n                g.drawLine(((w - cw) - 1), 0, (w - 1), cw);// top slant\r\n\r\n                g.setColor(Color.black);\r\n                g.drawLine(0, (h - 1), ((w - 2) - cw), (h - 1));\r\n                // bottom\r\n                g.drawLine(((w - 1) - cw), (h - 1), (w - 1), ((h - 1) - cw));// bottom slant\r\n\r\n                g.setColor(getShadowColor());\r\n                g.drawLine(1, (h - 2), ((w - 2) - cw), (h - 2));// bottom\r\n\r\n                g.drawLine(((w - 1) - cw), (h - 2), (w - 2), ((h - cw) - 1));// bottom slant\r\n\r\n            } else {\r\n                g.fillRect(5, 1, ((w - 1) - cw), (h - 3));\r\n                Polygon p = new Polygon();\r\n                p.addPoint(cw, 0);\r\n                p.addPoint(0, cw);\r\n                p.addPoint(cw, (h - 2));\r\n                g.fillPolygon(p);\r\n                g.setColor(getHighlightColor());\r\n                g.drawLine((cw - 1), 0, (w - 2), 0);// top\r\n\r\n                g.drawLine(0, cw, cw, 0);// top slant\r\n\r\n                g.setColor(Color.black);\r\n                g.drawLine(0, ((h - 1) - cw), cw, (h - 1));// bottom slant\r\n\r\n                g.drawLine(cw, (h - 1), (w - 1), (h - 1));// bottom\r\n\r\n                g.setColor(getShadowColor());\r\n                g.drawLine(cw, (h - 2), (w - 2), (h - 2));// bottom\r\n\r\n                g.drawLine((w - 1), 1, (w - 1), (h - 2));// right\r\n\r\n            }\r\n        }\r\n\r\n    g.translate((-(knobBounds.x)), (-(knobBounds.y)));\r\n}'),(4223,'paintTrack(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteSliderUI.paintTrack(java.awt.Graphics)','427','org.jhotdraw.gui.plaf.palette.PaletteSliderUI','@Override\r\npublic void paintTrack(Graphics g) {\r\n    int cx;\r\n    int cy;\r\n    int cw;\r\n    int ch;\r\n    int pad;\r\n    Rectangle trackBounds = trackRect;\r\n    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {\r\n        pad = trackBuffer;\r\n        cx = pad;\r\n        cy = ((trackBounds.height) / 2) - 2;\r\n        cw = trackBounds.width;\r\n        g.translate(trackBounds.x, ((trackBounds.y) + cy));\r\n        g.setColor(getShadowColor());\r\n        g.drawLine(0, 0, (cw - 1), 0);\r\n        g.drawLine(0, 1, 0, 2);\r\n        g.setColor(getHighlightColor());\r\n        g.drawLine(0, 3, cw, 3);\r\n        g.drawLine(cw, 0, cw, 3);\r\n        g.setColor(Color.black);\r\n        g.drawLine(1, 1, (cw - 2), 1);\r\n        g.translate((-(trackBounds.x)), (-((trackBounds.y) + cy)));\r\n    } else {\r\n        pad = trackBuffer;\r\n        cx = ((trackBounds.width) / 2) - 2;\r\n        cy = pad;\r\n        ch = trackBounds.height;\r\n        g.setColor(new Color((slider.isEnabled() ? 8947848 : 11184810)));\r\n        g.drawRoundRect(((trackBounds.x) + cx), trackBounds.y, 5, ch, 5, 5);\r\n    }\r\n}'),(4224,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder.-init-()','428','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder','PaletteTextComponentBorder() {\r\n}'),(4225,'getBorderInsets(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder.getBorderInsets(java.awt.Component)','428','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder','public Insets getBorderInsets(Component c) {\r\n    Insets insets;\r\n    String segmentPosition = getSegmentPosition(c);\r\n    if ((segmentPosition == \"first\") || (segmentPosition == \"middle\")) {\r\n        insets = new Insets(3, 3, 3, 2);\r\n    } else {\r\n        insets = new Insets(3, 3, 3, 3);\r\n    }\r\n    return insets;\r\n}'),(4226,'getSegmentPosition(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder.getSegmentPosition(java.awt.Component)','428','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder','private String getSegmentPosition(Component c) {\r\n    String segmentPosition = null;\r\n    if (c instanceof JComponent) {\r\n        segmentPosition = ((String) (((JComponent) (c)).getClientProperty(\"Palette.Component.segmentPosition\")));\r\n    }\r\n    return segmentPosition == null ? \"only\" : segmentPosition;\r\n}'),(4227,'isBorderOpaque()','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder.isBorderOpaque()','428','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder','public boolean isBorderOpaque() {\r\n    return true;\r\n}'),(4228,'paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','428','org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder','public void paintBorder(Component c, Graphics gr, int x, int y, int width, int height) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    JComponent jc = ((JComponent) (c));\r\n    int borderColor;\r\n    float[] stops;\r\n    Color[] stopColors;\r\n    if (!(c.isEnabled())) {\r\n        borderColor = -2136627803;\r\n        stops = PaletteTextComponentBorder.enabledStops;\r\n        stopColors = PaletteTextComponentBorder.enabledStopColors;\r\n    } else {\r\n        borderColor = -5921371;\r\n        stops = PaletteTextComponentBorder.enabledStops;\r\n        stopColors = PaletteTextComponentBorder.enabledStopColors;\r\n    }\r\n    String segmentPosition = getSegmentPosition(c);\r\n    if ((segmentPosition == \"first\") || (segmentPosition == \"middle\")) {\r\n        width += 1;\r\n    }\r\n    g.setColor(new Color(borderColor, true));\r\n    g.drawRect(x, y, (width - 1), (height - 1));\r\n    LinearGradientPaint lgp = new LinearGradientPaint(new Point2D.Float(x, y), new Point2D.Float(x, ((y + height) - 1)), stops, stopColors, MultipleGradientPaint.REPEAT, MultipleGradientPaint.LINEAR_RGB);\r\n    g.setPaint(lgp);\r\n    g.fillRect((x + 1), (y + 1), (width - 2), (height - 2));\r\n}'),(4229,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI.-init-()','429','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI','PaletteTextFieldUI() {\r\n}'),(4230,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI.createUI(javax.swing.JComponent)','429','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI','/**\r\n * Creates a UI for a JTextField.\r\n *\r\n * @param c\r\n * 		the text field\r\n * @return the UI\r\n */\r\npublic static ComponentUI createUI(JComponent c) {\r\n    return new PaletteTextFieldUI();\r\n}'),(4231,'installDefaults()','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI.installDefaults()','429','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI','/**\r\n * Initializes component properties, e.g. font, foreground,\r\n * background, caret color, selection color, selected text color,\r\n * disabled text color, and border color.  The font, foreground, and\r\n * background properties are only set if their current value is either null\r\n * or a UIResource, other properties are set if the current\r\n * value is null.\r\n *\r\n * @see #uninstallDefaults\r\n * @see #installUI\r\n */\r\n@Override\r\nprotected void installDefaults() {\r\n    JTextComponent editor = getComponent();\r\n    PaletteLookAndFeel plaf = PaletteLookAndFeel.getInstance();\r\n    String prefix = getPropertyPrefix();\r\n    Font f = editor.getFont();\r\n    if ((f == null) || (f instanceof UIResource)) {\r\n        editor.setFont(plaf.getFont((prefix + \".font\")));\r\n    }\r\n    Color bg = editor.getBackground();\r\n    if ((bg == null) || (bg instanceof UIResource)) {\r\n        editor.setBackground(plaf.getColor((prefix + \".background\")));\r\n    }\r\n    Color fg = editor.getForeground();\r\n    if ((fg == null) || (fg instanceof UIResource)) {\r\n        editor.setForeground(plaf.getColor((prefix + \".foreground\")));\r\n    }\r\n    Color color = editor.getCaretColor();\r\n    if ((color == null) || (color instanceof UIResource)) {\r\n        editor.setCaretColor(plaf.getColor((prefix + \".caretForeground\")));\r\n    }\r\n    Color s = editor.getSelectionColor();\r\n    if ((s == null) || (s instanceof UIResource)) {\r\n        editor.setSelectionColor(plaf.getColor((prefix + \".selectionBackground\")));\r\n    }\r\n    Color sfg = editor.getSelectedTextColor();\r\n    if ((sfg == null) || (sfg instanceof UIResource)) {\r\n        editor.setSelectedTextColor(plaf.getColor((prefix + \".selectionForeground\")));\r\n    }\r\n    Color dfg = editor.getDisabledTextColor();\r\n    if ((dfg == null) || (dfg instanceof UIResource)) {\r\n        editor.setDisabledTextColor(plaf.getColor((prefix + \".inactiveForeground\")));\r\n    }\r\n    Border b = editor.getBorder();\r\n    if ((b == null) || (b instanceof UIResource)) {\r\n        editor.setBorder(plaf.getBorder((prefix + \".border\")));\r\n    }\r\n    Insets margin = editor.getMargin();\r\n    if ((margin == null) || (margin instanceof UIResource)) {\r\n        editor.setMargin(plaf.getInsets((prefix + \".margin\")));\r\n    }\r\n    editor.setOpaque(plaf.getBoolean((prefix + \".opaque\")));\r\n}'),(4232,'paintBackground(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI.paintBackground(java.awt.Graphics)','429','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI','@Override\r\npublic void paintBackground(Graphics g) {\r\n    JTextComponent c = getComponent();\r\n    if ((c.getBorder()) instanceof BackdropBorder) {\r\n        BackdropBorder bb = ((BackdropBorder) (c.getBorder()));\r\n        bb.getBackdropBorder().paintBorder(c, g, 0, 0, c.getWidth(), c.getHeight());\r\n    } else {\r\n        super.paintBackground(g);\r\n    }\r\n}'),(4233,'paintSafely(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI.paintSafely(java.awt.Graphics)','429','org.jhotdraw.gui.plaf.palette.PaletteTextFieldUI','@Override\r\nprotected void paintSafely(Graphics gr) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    super.paintSafely(g);\r\n}'),(4234,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder.-init-()','431','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder','PaletteToolBarBorder() {\r\n}'),(4235,'clippedText(java.lang.String,java.awt.FontMetrics,int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder.clippedText(java.lang.String,java.awt.FontMetrics,int)','431','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder','/**\r\n * Convenience method to clip the passed in text to the specified\r\n * size.\r\n */\r\nprivate String clippedText(String text, FontMetrics fm, int availTextWidth) {\r\n    if ((text == null) || (text.equals(\"\"))) {\r\n        return \"\";\r\n    }\r\n    int textWidth = SwingUtilities.computeStringWidth(fm, text);\r\n    String clipString = \"…\";\r\n    if (textWidth > availTextWidth) {\r\n        int totalWidth = SwingUtilities.computeStringWidth(fm, clipString);\r\n        int nChars;\r\n        for (nChars = 0; nChars < (text.length()); nChars++) {\r\n            totalWidth += fm.charWidth(text.charAt(nChars));\r\n            if (totalWidth > availTextWidth) {\r\n                break;\r\n            }\r\n        }\r\n        text = (text.substring(0, nChars)) + clipString;\r\n    }\r\n    return text;\r\n}'),(4236,'getBorderInsets(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder.getBorderInsets(java.awt.Component)','431','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder','@Override\r\npublic Insets getBorderInsets(Component c) {\r\n    return getBorderInsets(c, new Insets(0, 0, 0, 0));\r\n}'),(4237,'getBorderInsets(java.awt.Component,java.awt.Insets)','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder.getBorderInsets(java.awt.Component,java.awt.Insets)','431','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder','@Override\r\npublic Insets getBorderInsets(Component component, Insets newInsets) {\r\n    if (newInsets == null) {\r\n        newInsets = new Insets(0, 0, 0, 0);\r\n    }\r\n    JComponent c = ((JComponent) (component));\r\n    if ((c.getClientProperty(PaletteToolBarUI.TOOLBAR_INSETS_OVERRIDE_PROPERTY)) instanceof Insets) {\r\n        Insets override = ((Insets) (c.getClientProperty(PaletteToolBarUI.TOOLBAR_INSETS_OVERRIDE_PROPERTY)));\r\n        newInsets.top = override.top;\r\n        newInsets.left = override.left;\r\n        newInsets.bottom = override.bottom;\r\n        newInsets.right = override.right;\r\n        return newInsets;\r\n    }\r\n    newInsets.top = 0;\r\n    newInsets.left = 18;\r\n    newInsets.bottom = 0;\r\n    newInsets.right = 0;\r\n    return newInsets;\r\n}'),(4238,'getDragInsets(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder.getDragInsets(java.awt.Component)','431','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder','/**\r\n * These insets are used by PaletteToolBarUI, to determine if\r\n * the toolbar should be dragged.\r\n *\r\n * @param c\r\n * 		JToolBar.\r\n * @return Return drag insets.\r\n */\r\npublic Insets getDragInsets(Component c) {\r\n    return new Insets(0, 18, 0, 0);\r\n}'),(4239,'paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)','431','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder','/* private final static Color dark = new Color(0x999999);\nprivate final static Color bright = new Color(0xb3b3b3);\n/*\n */\r\n/* private final static Color dark = new Color(0x808080);\nprivate final static Color bright = new Color(0xcccccc);\n */\r\n@Override\r\npublic void paintBorder(Component component, Graphics gr, int x, int y, int w, int h) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    if ((component instanceof JToolBar) && ((((JToolBar) (component)).getUI()) instanceof PaletteToolBarUI)) {\r\n        JToolBar c = ((JToolBar) (component));\r\n        if (c.isFloatable()) {\r\n            int hx = x;\r\n            int hy = y;\r\n            int hw = w;\r\n            int hh = h;\r\n            if ((c.getOrientation()) == (SwingConstants.HORIZONTAL)) {\r\n                if (c.getComponentOrientation().isLeftToRight()) {\r\n                    int barW = 18;\r\n                    int barH = h;\r\n                    int barX = 0;\r\n                    int barY = 0;\r\n                    int borderColor = -5921371;\r\n                    float[] stops = PaletteToolBarBorder.enabledStops;\r\n                    Color[] stopColors = PaletteToolBarBorder.enabledStopColors;\r\n                    g.setColor(new Color(borderColor, true));\r\n                    g.drawRect(barX, barY, (barW - 1), (barH - 1));\r\n                    LinearGradientPaint lgp = new LinearGradientPaint(new Point2D.Float(1, 1), new Point2D.Float(19, 1), stops, stopColors, REPEAT, LINEAR_RGB);\r\n                    g.setPaint(lgp);\r\n                    g.fillRect((barX + 1), (barX + 1), (barW - 2), (barH - 2));\r\n                    // paint the icon\r\n                    Icon icon = ((Icon) (c.getClientProperty(PaletteToolBarUI.TOOLBAR_ICON_PROPERTY)));\r\n                    if (icon != null) {\r\n                        icon.paintIcon(component, gr, (barX + ((barW - (icon.getIconWidth())) / 2)), (((barY + barH) - 4) - (icon.getIconHeight())));\r\n                    }\r\n                    int textIconGap = ((c.getClientProperty(PaletteToolBarUI.TOOLBAR_ICON_PROPERTY)) instanceof Integer) ? ((Integer) (c.getClientProperty(PaletteToolBarUI.TOOLBAR_ICON_PROPERTY))) : 2;\r\n                    String theTitle = c.getName();\r\n                    if (theTitle != null) {\r\n                        Font f = c.getFont();\r\n                        FontMetrics fm = g.getFontMetrics();\r\n                        int titleW;\r\n                        titleW = barH - 8;\r\n                        if (icon != null) {\r\n                            titleW -= (icon.getIconHeight()) + textIconGap;\r\n                        }\r\n                        theTitle = clippedText(theTitle, fm, titleW);\r\n                        AffineTransform savedTransform = g.getTransform();\r\n                        AffineTransform t = g.getTransform();\r\n                        t.rotate(((Math.PI) / (-2.0)), ((barX + 2) + (fm.getAscent())), (titleW + 4));\r\n                        g.setTransform(t);\r\n                        g.setColor(Color.black);\r\n                        g.drawString(theTitle, ((barX + 2) + (fm.getAscent())), (titleW + 4));\r\n                        g.setTransform(savedTransform);\r\n                    }\r\n                } else {\r\n                    g.setColor(PaletteToolBarBorder.bright);\r\n                    g.fillRect(((hw - hx) - 3), (hy + 2), 1, (hh - 4));\r\n                    g.fillRect(((hw - hx) - 5), (hy + 2), 1, (hh - 4));\r\n                    g.setColor(PaletteToolBarBorder.dark);\r\n                    g.fillRect(((hw - hx) - 2), (hy + 2), 1, (hh - 4));\r\n                    g.fillRect(((hw - hx) - 6), (hy + 2), 1, (hh - 4));\r\n                }\r\n            } else // vertical\r\n            {\r\n                g.setColor(PaletteToolBarBorder.bright);\r\n                g.fillRect((hx + 2), (hy + 2), (hw - 4), 1);\r\n                g.fillRect((hx + 2), (hy + 5), (hw - 4), 1);\r\n                g.setColor(PaletteToolBarBorder.dark);\r\n                g.fillRect((hx + 2), (hy + 3), (hw - 4), 1);\r\n                g.fillRect((hx + 2), (hy + 6), (hw - 4), 1);\r\n            }\r\n        }\r\n    }\r\n}'),(4240,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder$UIResource.-init-()','430','org.jhotdraw.gui.plaf.palette.PaletteToolBarBorder$UIResource','UIResource() {\r\n}'),(4241,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','PaletteToolBarUI() {\r\n}'),(4242,'-init-(java.lang.String,java.awt.GraphicsConfiguration)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-(java.lang.String,java.awt.GraphicsConfiguration)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','1( $anonymous0,  $anonymous1) {\r\n}'),(4243,'-init-(java.awt.Frame,java.lang.String,boolean)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-(java.awt.Frame,java.lang.String,boolean)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public ToolBarDialog(Frame owner, String title, boolean modal) {\r\n    super(owner, title, modal);\r\n}'),(4244,'-init-(java.awt.Dialog,java.lang.String,boolean)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-(java.awt.Dialog,java.lang.String,boolean)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public ToolBarDialog(Dialog owner, String title, boolean modal) {\r\n    super(owner, title, modal);\r\n}'),(4245,'-init-(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-(java.lang.String)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public Actions(String name) {\r\n    super(name);\r\n}'),(4246,'-init-(javax.swing.JToolBar)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-(javax.swing.JToolBar)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public DockingListener(JToolBar t) {\r\n    this.toolBar = t;\r\n    getHandler().tb = t;\r\n}'),(4247,'-init-(java.awt.Window)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.-init-(java.awt.Window)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','DragWindow(Window w) {\r\n    super(w);\r\n    getContentPane().add(new JPanel() {\r\n        public void paintComponent(Graphics g) {\r\n            paintDragWindow(g);\r\n        }\r\n    });\r\n}'),(4248,'calculateConstraint()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.calculateConstraint()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','private Integer calculateConstraint() {\r\n    Integer constraint = null;\r\n    LayoutManager lm = dockingSource.getLayout();\r\n    if (lm instanceof BoxLayout) {\r\n        for (int i = 0, n = dockingSource.getComponentCount(); i < n; i++) {\r\n            if ((dockingSource.getComponent(i)) == (toolBar)) {\r\n                constraint = new Integer(i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return constraint != null ? constraint : constraintBeforeFloating;\r\n}'),(4249,'canDock(java.awt.Component,java.awt.Point)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.canDock(java.awt.Component,java.awt.Point)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public boolean canDock(Component c, Point p) {\r\n    return (p != null) && ((getDockingConstraint(c, p)) != null);\r\n}'),(4250,'createDockingListener()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createDockingListener()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected MouseInputListener createDockingListener() {\r\n    getHandler().tb = toolBar;\r\n    return getHandler();\r\n}'),(4251,'createDragWindow(javax.swing.JToolBar)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createDragWindow(javax.swing.JToolBar)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected PaletteToolBarUI.DragWindow createDragWindow(JToolBar toolbar) {\r\n    Window frame = null;\r\n    if ((toolBar) != null) {\r\n        Container p;\r\n        for (p = toolBar.getParent(); (p != null) && (!(p instanceof Window)); p = p.getParent());\r\n        if ((p != null) && (p instanceof Window)) {\r\n            frame = ((Window) (p));\r\n        }\r\n    }\r\n    if ((floatingToolBar) == null) {\r\n        floatingToolBar = createFloatingWindow(toolBar);\r\n    }\r\n    if ((floatingToolBar) instanceof Window) {\r\n        frame = ((Window) (floatingToolBar));\r\n    }\r\n    PaletteToolBarUI.DragWindow w = new PaletteToolBarUI.DragWindow(frame);\r\n    if (w instanceof RootPaneContainer) {\r\n        JRootPane rp = ((RootPaneContainer) (w)).getRootPane();\r\n        rp.putClientProperty(\"Window.alpha\", new Float(0.6F));\r\n    }\r\n    return w;\r\n}'),(4252,'createFloatingFrame(javax.swing.JToolBar)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createFloatingFrame(javax.swing.JToolBar)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * No longer used, use PaletteToolBarUI.createFloatingWindow(JToolBar)\r\n *\r\n * @see #createFloatingWindow\r\n */\r\nprotected JFrame createFloatingFrame(JToolBar toolbar) {\r\n    Window window = SwingUtilities.getWindowAncestor(toolbar);\r\n    JFrame frame = new JFrame(toolbar.getName(), (window != null ? window.getGraphicsConfiguration() : null)) {\r\n        // Override createRootPane() to automatically resize\r\n        // the frame when contents change\r\n        protected JRootPane createRootPane() {\r\n            JRootPane rootPane = new JRootPane() {\r\n                private boolean packing = false;\r\n\r\n                public void validate() {\r\n                    super.validate();\r\n                    if (!(packing)) {\r\n                        packing = true;\r\n                        pack();\r\n                        packing = false;\r\n                    }\r\n                }\r\n            };\r\n            rootPane.setOpaque(true);\r\n            return rootPane;\r\n        }\r\n    };\r\n    frame.getRootPane().setName(\"ToolBar.FloatingFrame\");\r\n    frame.setResizable(false);\r\n    WindowListener wl = createFrameListener();\r\n    frame.addWindowListener(wl);\r\n    return frame;\r\n}'),(4253,'createFloatingWindow(javax.swing.JToolBar)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createFloatingWindow(javax.swing.JToolBar)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Creates a window which contains the toolbar after it has been\r\n * dragged out from its container\r\n *\r\n * @return a <code>RootPaneContainer</code> object, containing the toolbar.\r\n */\r\nprotected RootPaneContainer createFloatingWindow(JToolBar toolbar) {\r\n    class ToolBarDialog extends JDialog {\r\n        public ToolBarDialog(Frame owner, String title, boolean modal) {\r\n            super(owner, title, modal);\r\n        }\r\n\r\n        public ToolBarDialog(Dialog owner, String title, boolean modal) {\r\n            super(owner, title, modal);\r\n        }\r\n\r\n        // Override createRootPane() to automatically resize\r\n        // the frame when contents change\r\n        protected JRootPane createRootPane() {\r\n            JRootPane rootPane = new JRootPane() {\r\n                private boolean packing = false;\r\n\r\n                public void validate() {\r\n                    super.validate();\r\n                    if (!(packing)) {\r\n                        packing = true;\r\n                        pack();\r\n                        packing = false;\r\n                    }\r\n                }\r\n            };\r\n            rootPane.setOpaque(true);\r\n            return rootPane;\r\n        }\r\n    }\r\n    JDialog dialog;\r\n    Window window = SwingUtilities.getWindowAncestor(toolbar);\r\n    if (window instanceof Frame) {\r\n        dialog = new ToolBarDialog(((Frame) (window)), toolbar.getName(), false);\r\n    } else\r\n        if (window instanceof Dialog) {\r\n            dialog = new ToolBarDialog(((Dialog) (window)), toolbar.getName(), false);\r\n        } else {\r\n            dialog = new ToolBarDialog(((Frame) (null)), toolbar.getName(), false);\r\n        }\r\n\r\n    dialog.getRootPane().setName(\"ToolBar.FloatingWindow\");\r\n    dialog.setTitle(toolbar.getName());\r\n    dialog.setResizable(false);\r\n    WindowListener wl = createFrameListener();\r\n    dialog.addWindowListener(wl);\r\n    return dialog;\r\n}'),(4254,'createFrameListener()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createFrameListener()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected WindowListener createFrameListener() {\r\n    return new PaletteToolBarUI.FrameListener();\r\n}'),(4255,'createNonRolloverBorder()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createNonRolloverBorder()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Creates the non rollover border for toolbar components. This\r\n * border will be installed as the border for components added\r\n * to the toolbar if rollover borders are not enabled.\r\n * <p>\r\n * Override this method to provide an alternate rollover border.\r\n *\r\n * @since 1.4\r\n */\r\nprotected Border createNonRolloverBorder() {\r\n    Object border = UIManager.get(\"ToolBar.nonrolloverBorder\");\r\n    if (border != null) {\r\n        return ((Border) (border));\r\n    }\r\n    UIDefaults table = UIManager.getLookAndFeelDefaults();\r\n    return new EmptyBorder(0, 0, 0, 0);\r\n    /* return new CompoundBorder(new BasicBorders.ButtonBorder(\n    table.getColor(\"Button.shadow\"),\n    table.getColor(\"Button.darkShadow\"),\n    table.getColor(\"Button.light\"),\n    table.getColor(\"Button.highlight\")),\n    new BasicBorders.RolloverMarginBorder());\n     */\r\n}'),(4256,'createNonRolloverToggleBorder()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createNonRolloverToggleBorder()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Creates a non rollover border for Toggle buttons in the toolbar.\r\n */\r\nprivate Border createNonRolloverToggleBorder() {\r\n    UIDefaults table = UIManager.getLookAndFeelDefaults();\r\n    return new EmptyBorder(0, 0, 0, 0);\r\n    /* return new CompoundBorder(new BasicBorders.RadioButtonBorder(\n    table.getColor(\"ToggleButton.shadow\"),\n    table.getColor(\"ToggleButton.darkShadow\"),\n    table.getColor(\"ToggleButton.light\"),\n    table.getColor(\"ToggleButton.highlight\")),\n    new BasicBorders.RolloverMarginBorder());\n     */\r\n}'),(4257,'createPropertyListener()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createPropertyListener()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected PropertyChangeListener createPropertyListener() {\r\n    return getHandler();\r\n}'),(4258,'createRolloverBorder()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createRolloverBorder()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Creates a rollover border for toolbar components. The\r\n * rollover border will be installed if rollover borders are\r\n * enabled.\r\n * <p>\r\n * Override this method to provide an alternate rollover border.\r\n *\r\n * @since 1.4\r\n */\r\nprotected Border createRolloverBorder() {\r\n    Object border = UIManager.get(\"ToolBar.rolloverBorder\");\r\n    if (border != null) {\r\n        return ((Border) (border));\r\n    }\r\n    UIDefaults table = UIManager.getLookAndFeelDefaults();\r\n    return new EmptyBorder(0, 0, 0, 0);\r\n    /* return new CompoundBorder(new BasicBorders.RolloverButtonBorder(\n    table.getColor(\"controlShadow\"),\n    table.getColor(\"controlDkShadow\"),\n    table.getColor(\"controlHighlight\"),\n    table.getColor(\"controlLtHighlight\")),\n    new BasicBorders.RolloverMarginBorder());\n     */\r\n}'),(4259,'createToolBarContListener()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createToolBarContListener()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected ContainerListener createToolBarContListener() {\r\n    return getHandler();\r\n}'),(4260,'createToolBarFocusListener()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createToolBarFocusListener()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected FocusListener createToolBarFocusListener() {\r\n    return getHandler();\r\n}'),(4261,'createUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.createUI(javax.swing.JComponent)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public static ComponentUI createUI(JComponent c) {\r\n    return new PaletteToolBarUI();\r\n}'),(4262,'dragTo(java.awt.Point,java.awt.Point)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.dragTo(java.awt.Point,java.awt.Point)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void dragTo(Point position, Point origin) {\r\n    if ((toolBar.isFloatable()) == true) {\r\n        try {\r\n            if ((dragWindow) == null) {\r\n                dragWindow = createDragWindow(toolBar);\r\n            }\r\n            Point offset = dragWindow.getOffset();\r\n            if (offset == null) {\r\n                // Dimension size = toolBar.getPreferredSize();\r\n                Dimension size = toolBar.getSize();\r\n                offset = new Point(((size.width) / 2), ((size.height) / 2));\r\n                dragWindow.setOffset(offset);\r\n            }\r\n            Point global = new Point(((origin.x) + (position.x)), ((origin.y) + (position.y)));\r\n            Point dragPoint = new Point(((global.x) - (offset.x)), ((global.y) - (offset.y)));\r\n            if ((dockingSource) == null) {\r\n                dockingSource = toolBar.getParent();\r\n            }\r\n            constraintBeforeFloating = calculateConstraint();\r\n            Point dockingPosition = dockingSource.getLocationOnScreen();\r\n            Point comparisonPoint = new Point(((global.x) - (dockingPosition.x)), ((global.y) - (dockingPosition.y)));\r\n            if (canDock(dockingSource, comparisonPoint)) {\r\n                dragWindow.setBackground(getDockingColor());\r\n                Object constraint = getDockingConstraint(dockingSource, comparisonPoint);\r\n                int orientation = mapConstraintToOrientation(constraint);\r\n                dragWindow.setOrientation(orientation);\r\n                dragWindow.setBorderColor(dockingBorderColor);\r\n            } else {\r\n                dragWindow.setBackground(getFloatingColor());\r\n                dragWindow.setBorderColor(floatingBorderColor);\r\n            }\r\n            dragWindow.setLocation(dragPoint.x, dragPoint.y);\r\n            if ((dragWindow.isVisible()) == false) {\r\n                // Dimension size = toolBar.getPreferredSize();\r\n                Dimension size = toolBar.getSize();\r\n                dragWindow.setSize(size.width, size.height);\r\n                dragWindow.show();\r\n            }\r\n        } catch (IllegalComponentStateException e) {\r\n        }\r\n    }\r\n}'),(4263,'floatAt(java.awt.Point,java.awt.Point)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.floatAt(java.awt.Point,java.awt.Point)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void floatAt(Point position, Point origin) {\r\n    if ((toolBar.isFloatable()) == true) {\r\n        try {\r\n            Point offset = dragWindow.getOffset();\r\n            if (offset == null) {\r\n                offset = position;\r\n                dragWindow.setOffset(offset);\r\n            }\r\n            Point global = new Point(((origin.x) + (position.x)), ((origin.y) + (position.y)));\r\n            setFloatingLocation(((global.x) - (offset.x)), ((global.y) - (offset.y)));\r\n            if ((dockingSource) != null) {\r\n                Point dockingPosition = dockingSource.getLocationOnScreen();\r\n                Point comparisonPoint = new Point(((global.x) - (dockingPosition.x)), ((global.y) - (dockingPosition.y)));\r\n                if (canDock(dockingSource, comparisonPoint)) {\r\n                    setFloating(false, comparisonPoint);\r\n                } else {\r\n                    setFloating(true, null);\r\n                }\r\n            } else {\r\n                setFloating(true, null);\r\n            }\r\n            dragWindow.setOffset(null);\r\n        } catch (IllegalComponentStateException e) {\r\n        }\r\n    }\r\n}'),(4264,'getDockingColor()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.getDockingColor()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Gets the color displayed when over a docking area\r\n */\r\npublic Color getDockingColor() {\r\n    return dockingColor;\r\n}'),(4265,'getDockingConstraint(java.awt.Component,java.awt.Point)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.getDockingConstraint(java.awt.Component,java.awt.Point)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','private Integer getDockingConstraint(Component c, Point p) {\r\n    if (p == null) {\r\n        return constraintBeforeFloating;\r\n    }\r\n    if (c.contains(p)) {\r\n        for (int i = 0, n = dockingSource.getComponentCount(); i < n; i++) {\r\n            Component child = dockingSource.getComponent(i);\r\n            Point childP = new Point(((p.x) - (child.getX())), ((p.y) - (child.getY())));\r\n            if (child.contains(childP)) {\r\n                return new Integer(Math.min((n - 1), ((childP.x) <= (child.getWidth()) ? i : i + 1)));\r\n            }\r\n        }\r\n        if (((dockingSource.getComponentCount()) == 0) || ((p.x) < (dockingSource.getComponent(0).getX()))) {\r\n            return 0;\r\n        }\r\n        return (dockingSource.getComponentCount()) - 1;\r\n    }\r\n    return null;\r\n}'),(4266,'getFloatingColor()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.getFloatingColor()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Gets the color displayed when over a floating area\r\n */\r\npublic Color getFloatingColor() {\r\n    return floatingColor;\r\n}'),(4267,'getHandler()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.getHandler()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','private PaletteToolBarUI.Handler getHandler() {\r\n    if ((handler) == null) {\r\n        handler = new PaletteToolBarUI.Handler();\r\n    }\r\n    return handler;\r\n}'),(4268,'getInputMap(int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.getInputMap(int)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','InputMap getInputMap(int condition) {\r\n    if (condition == (JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)) {\r\n        return ((InputMap) (PaletteLookAndFeel.getInstance().get(\"ToolBar.ancestorInputMap\")));\r\n    }\r\n    return null;\r\n}'),(4269,'getRolloverBorder(javax.swing.AbstractButton)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.getRolloverBorder(javax.swing.AbstractButton)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','private Border getRolloverBorder(AbstractButton b) {\r\n    Object borderProvider = UIManager.get(\"ToolBar.rolloverBorderProvider\");\r\n    if (borderProvider == null) {\r\n        return PaletteToolBarUI.rolloverBorder;\r\n    }\r\n    // return ((BorderProvider) borderProvider).getRolloverBorder(b);\r\n    return null;\r\n}'),(4270,'installComponents()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installComponents()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void installComponents() {\r\n}'),(4271,'installDefaults()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installDefaults()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void installDefaults() {\r\n    PaletteLookAndFeel.installBorder(toolBar, \"ToolBar.border\");\r\n    PaletteLookAndFeel.installColorsAndFont(toolBar, \"ToolBar.background\", \"ToolBar.foreground\", \"ToolBar.font\");\r\n    // Toolbar specific defaults\r\n    if (((dockingColor) == null) || ((dockingColor) instanceof UIResource)) {\r\n        dockingColor = UIManager.getColor(\"ToolBar.dockingBackground\");\r\n    }\r\n    if (((floatingColor) == null) || ((floatingColor) instanceof UIResource)) {\r\n        floatingColor = UIManager.getColor(\"ToolBar.floatingBackground\");\r\n    }\r\n    if (((dockingBorderColor) == null) || ((dockingBorderColor) instanceof UIResource)) {\r\n        dockingBorderColor = UIManager.getColor(\"ToolBar.dockingForeground\");\r\n    }\r\n    if (((floatingBorderColor) == null) || ((floatingBorderColor) instanceof UIResource)) {\r\n        floatingBorderColor = UIManager.getColor(\"ToolBar.floatingForeground\");\r\n        // ToolBar rollover button borders\r\n    }\r\n    Object rolloverProp = toolBar.getClientProperty(PaletteToolBarUI.IS_ROLLOVER);\r\n    if (rolloverProp == null) {\r\n        rolloverProp = UIManager.get(\"ToolBar.isRollover\");\r\n    }\r\n    if (rolloverProp != null) {\r\n        rolloverBorders = ((Boolean) (rolloverProp)).booleanValue();\r\n    }\r\n    if ((PaletteToolBarUI.rolloverBorder) == null) {\r\n        PaletteToolBarUI.rolloverBorder = createRolloverBorder();\r\n    }\r\n    if ((PaletteToolBarUI.nonRolloverBorder) == null) {\r\n        PaletteToolBarUI.nonRolloverBorder = createNonRolloverBorder();\r\n    }\r\n    if ((PaletteToolBarUI.nonRolloverToggleBorder) == null) {\r\n        PaletteToolBarUI.nonRolloverToggleBorder = createNonRolloverToggleBorder();\r\n    }\r\n    setRolloverBorders(isRolloverBorders());\r\n}'),(4272,'installKeyboardActions()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installKeyboardActions()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void installKeyboardActions() {\r\n    InputMap km = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\r\n    SwingUtilities.replaceUIInputMap(toolBar, JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, km);\r\n    PaletteLazyActionMap.installLazyActionMap(toolBar, PaletteToolBarUI.class, \"ToolBar.actionMap\");\r\n}'),(4273,'installListeners()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installListeners()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void installListeners() {\r\n    dockingListener = createDockingListener();\r\n    if ((dockingListener) != null) {\r\n        toolBar.addMouseMotionListener(dockingListener);\r\n        toolBar.addMouseListener(dockingListener);\r\n    }\r\n    propertyListener = createPropertyListener();// added in setFloating\r\n\r\n    if ((propertyListener) != null) {\r\n        toolBar.addPropertyChangeListener(propertyListener);\r\n    }\r\n    toolBarContListener = createToolBarContListener();\r\n    if ((toolBarContListener) != null) {\r\n        toolBar.addContainerListener(toolBarContListener);\r\n    }\r\n    toolBarFocusListener = createToolBarFocusListener();\r\n    if ((toolBarFocusListener) != null) {\r\n        // Put focus listener on all components in toolbar\r\n        Component[] components = toolBar.getComponents();\r\n        for (int i = 0; i < (components.length); ++i) {\r\n            components[i].addFocusListener(toolBarFocusListener);\r\n        }\r\n    }\r\n}'),(4274,'installNonRolloverBorders(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installNonRolloverBorders(javax.swing.JComponent)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Installs non-rollover borders on all the child components of the JComponent.\r\n * A non-rollover border is the border that is installed on the child component\r\n * while it is in the toolbar.\r\n * <p>\r\n * This is a convenience method to call <code>setBorderToNonRollover</code>\r\n * for each child component.\r\n *\r\n * @param c\r\n * 		container which holds the child components (usally a JToolBar)\r\n * @see #setBorderToNonRollover\r\n * @since 1.4\r\n */\r\nprotected void installNonRolloverBorders(JComponent c) {\r\n    // Put non-rollover borders on buttons. These borders reduce the margin.\r\n    Component[] components = c.getComponents();\r\n    for (int i = 0; i < (components.length); ++i) {\r\n        if ((components[i]) instanceof JComponent) {\r\n            ((JComponent) (components[i])).updateUI();\r\n            setBorderToNonRollover(components[i]);\r\n        }\r\n    }\r\n}'),(4275,'installNormalBorders(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installNormalBorders(javax.swing.JComponent)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Installs normal borders on all the child components of the JComponent.\r\n * A normal border is the original border that was installed on the child\r\n * component before it was added to the toolbar.\r\n * <p>\r\n * This is a convenience method to call <code>setBorderNormal</code>\r\n * for each child component.\r\n *\r\n * @param c\r\n * 		container which holds the child components (usally a JToolBar)\r\n * @see #setBorderToNonRollover\r\n * @since 1.4\r\n */\r\nprotected void installNormalBorders(JComponent c) {\r\n    // Put back the normal borders on buttons\r\n    Component[] components = c.getComponents();\r\n    for (int i = 0; i < (components.length); ++i) {\r\n        setBorderToNormal(components[i]);\r\n    }\r\n}'),(4276,'installRolloverBorders(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installRolloverBorders(javax.swing.JComponent)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Installs rollover borders on all the child components of the JComponent.\r\n * <p>\r\n * This is a convenience method to call <code>setBorderToRollover</code>\r\n * for each child component.\r\n *\r\n * @param c\r\n * 		container which holds the child components (usally a JToolBar)\r\n * @see #setBorderToRollover\r\n * @since 1.4\r\n */\r\nprotected void installRolloverBorders(JComponent c) {\r\n    // Put rollover borders on buttons\r\n    Component[] components = c.getComponents();\r\n    for (int i = 0; i < (components.length); ++i) {\r\n        if ((components[i]) instanceof JComponent) {\r\n            ((JComponent) (components[i])).updateUI();\r\n            setBorderToRollover(components[i]);\r\n        }\r\n    }\r\n}'),(4277,'installUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.installUI(javax.swing.JComponent)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public void installUI(JComponent c) {\r\n    toolBar = ((JToolBar) (c));\r\n    // Set defaults\r\n    installDefaults();\r\n    installComponents();\r\n    installListeners();\r\n    installKeyboardActions();\r\n    // Initialize instance vars\r\n    dockingSensitivity = 0;\r\n    floating = false;\r\n    floatingX = floatingY = 0;\r\n    floatingToolBar = null;\r\n    setOrientation(toolBar.getOrientation());\r\n    LookAndFeel.installProperty(c, \"opaque\", Boolean.TRUE);\r\n    if ((c.getClientProperty(PaletteToolBarUI.FOCUSED_COMP_INDEX)) != null) {\r\n        focusedCompIndex = ((Integer) (c.getClientProperty(PaletteToolBarUI.FOCUSED_COMP_INDEX))).intValue();\r\n    }\r\n}'),(4278,'isBlocked(java.awt.Component,java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.isBlocked(java.awt.Component,java.lang.Object)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','private boolean isBlocked(Component comp, Object constraint) {\r\n    if (comp instanceof Container) {\r\n        Container cont = ((Container) (comp));\r\n        LayoutManager lm = cont.getLayout();\r\n        if (lm instanceof BorderLayout) {\r\n            BorderLayout blm = ((BorderLayout) (lm));\r\n            Component c = blm.getLayoutComponent(cont, constraint);\r\n            return (c != null) && (c != (toolBar));\r\n        }\r\n    }\r\n    return false;\r\n}'),(4279,'isFloating()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.isFloating()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public boolean isFloating() {\r\n    return floating;\r\n}'),(4280,'isRolloverBorders()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.isRolloverBorders()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Returns a flag to determine whether rollover button borders\r\n * are enabled.\r\n *\r\n * @return true if rollover borders are enabled; false otherwise\r\n * @see #setRolloverBorders\r\n * @since 1.4\r\n */\r\npublic boolean isRolloverBorders() {\r\n    return rolloverBorders;\r\n}'),(4281,'loadActionMap(org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.loadActionMap(org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','static void loadActionMap(PaletteLazyActionMap map) {\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_RIGHT));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_LEFT));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_UP));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_DOWN));\r\n}'),(4282,'mapConstraintToOrientation(java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.mapConstraintToOrientation(java.lang.Object)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','private int mapConstraintToOrientation(Object constraint) {\r\n    int orientation = toolBar.getOrientation();\r\n    if (constraint != null) {\r\n        if ((constraint.equals(BorderLayout.EAST)) || (constraint.equals(BorderLayout.WEST))) {\r\n            orientation = JToolBar.VERTICAL;\r\n        } else\r\n            if ((constraint.equals(BorderLayout.NORTH)) || (constraint.equals(BorderLayout.SOUTH))) {\r\n                orientation = JToolBar.HORIZONTAL;\r\n            }\r\n\r\n    }\r\n    return orientation;\r\n}'),(4283,'navigateFocusedComp(int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.navigateFocusedComp(int)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void navigateFocusedComp(int direction) {\r\n    int nComp = toolBar.getComponentCount();\r\n    int j;\r\n    switch (direction) {\r\n        case SwingConstants.EAST :\r\n        case SwingConstants.SOUTH :\r\n            if (((focusedCompIndex) < 0) || ((focusedCompIndex) >= nComp)) {\r\n                break;\r\n            }\r\n            j = (focusedCompIndex) + 1;\r\n            while (j != (focusedCompIndex)) {\r\n                if (j >= nComp) {\r\n                    j = 0;\r\n                }\r\n                Component comp = toolBar.getComponentAtIndex((j++));\r\n                if (((comp != null) && (comp.isFocusTraversable())) && (comp.isEnabled())) {\r\n                    comp.requestFocus();\r\n                    break;\r\n                }\r\n            } \r\n            break;\r\n        case SwingConstants.WEST :\r\n        case SwingConstants.NORTH :\r\n            if (((focusedCompIndex) < 0) || ((focusedCompIndex) >= nComp)) {\r\n                break;\r\n            }\r\n            j = (focusedCompIndex) - 1;\r\n            while (j != (focusedCompIndex)) {\r\n                if (j < 0) {\r\n                    j = nComp - 1;\r\n                }\r\n                Component comp = toolBar.getComponentAtIndex((j--));\r\n                if (((comp != null) && (comp.isFocusTraversable())) && (comp.isEnabled())) {\r\n                    comp.requestFocus();\r\n                    break;\r\n                }\r\n            } \r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n}'),(4284,'paintDragWindow(java.awt.Graphics)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.paintDragWindow(java.awt.Graphics)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Paints the contents of the window used for dragging.\r\n *\r\n * @param g\r\n * 		Graphics to paint to.\r\n * @throws NullPointerException\r\n * 		is <code>g</code> is null\r\n * @since 1.5\r\n */\r\nprotected void paintDragWindow(Graphics g) {\r\n    int w = dragWindow.getWidth();\r\n    int h = dragWindow.getHeight();\r\n    g.setColor(dragWindow.getBackground());\r\n    g.fillRect(0, 0, w, h);\r\n    boolean wasDoubleBuffered = false;\r\n    if (toolBar.isDoubleBuffered()) {\r\n        wasDoubleBuffered = true;\r\n        toolBar.setDoubleBuffered(false);\r\n    }\r\n    Graphics g2 = g.create();\r\n    toolBar.paintAll(g2);\r\n    g2.dispose();\r\n    g.setColor(dragWindow.getBorderColor());\r\n    g.drawRect(0, 0, (w - 1), (h - 1));\r\n    if (wasDoubleBuffered) {\r\n        toolBar.setDoubleBuffered(true);\r\n    }\r\n}'),(4285,'setBorderToNonRollover(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setBorderToNonRollover(java.awt.Component)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Sets the border of the component to have a non-rollover border which\r\n * was created by <code>createNonRolloverBorder</code>.\r\n *\r\n * @param c\r\n * 		component which will have a non-rollover border installed\r\n * @see #createNonRolloverBorder\r\n * @since 1.4\r\n */\r\nprotected void setBorderToNonRollover(Component c) {\r\n    if (true) {\r\n        return;\r\n    }\r\n    if (c instanceof AbstractButton) {\r\n        AbstractButton b = ((AbstractButton) (c));\r\n        Border border = ((Border) (borderTable.get(b)));\r\n        if ((border == null) || (border instanceof UIResource)) {\r\n            borderTable.put(b, b.getBorder());\r\n        }\r\n        // Only set the border if its the default border\r\n        if ((b.getBorder()) instanceof UIResource) {\r\n            if (b instanceof JToggleButton) {\r\n                ((JToggleButton) (b)).setBorder(PaletteToolBarUI.nonRolloverToggleBorder);\r\n            } else {\r\n                b.setBorder(PaletteToolBarUI.nonRolloverBorder);\r\n            }\r\n        }\r\n        rolloverTable.put(b, (b.isRolloverEnabled() ? Boolean.TRUE : Boolean.FALSE));\r\n        b.setRolloverEnabled(false);\r\n    }\r\n}'),(4286,'setBorderToNormal(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setBorderToNormal(java.awt.Component)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Sets the border of the component to have a normal border.\r\n * A normal border is the original border that was installed on the child\r\n * component before it was added to the toolbar.\r\n *\r\n * @param c\r\n * 		component which will have a normal border re-installed\r\n * @see #createNonRolloverBorder\r\n * @since 1.4\r\n */\r\nprotected void setBorderToNormal(Component c) {\r\n    if (true) {\r\n        return;\r\n    }\r\n    if (c instanceof AbstractButton) {\r\n        AbstractButton b = ((AbstractButton) (c));\r\n        Border border = ((Border) (borderTable.remove(b)));\r\n        b.setBorder(border);\r\n        Boolean value = ((Boolean) (rolloverTable.remove(b)));\r\n        if (value != null) {\r\n            b.setRolloverEnabled(value.booleanValue());\r\n        }\r\n    }\r\n}'),(4287,'setBorderToRollover(java.awt.Component)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setBorderToRollover(java.awt.Component)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Sets the border of the component to have a rollover border which\r\n * was created by <code>createRolloverBorder</code>.\r\n *\r\n * @param c\r\n * 		component which will have a rollover border installed\r\n * @see #createRolloverBorder\r\n * @since 1.4\r\n */\r\nprotected void setBorderToRollover(Component c) {\r\n    if (true) {\r\n        return;\r\n    }\r\n    if (c instanceof AbstractButton) {\r\n        AbstractButton b = ((AbstractButton) (c));\r\n        Border border = ((Border) (borderTable.get(b)));\r\n        if ((border == null) || (border instanceof UIResource)) {\r\n            borderTable.put(b, b.getBorder());\r\n        }\r\n        // Only set the border if its the default border\r\n        if ((b.getBorder()) instanceof UIResource) {\r\n            b.setBorder(getRolloverBorder(b));\r\n        }\r\n        rolloverTable.put(b, (b.isRolloverEnabled() ? Boolean.TRUE : Boolean.FALSE));\r\n        b.setRolloverEnabled(true);\r\n    }\r\n}'),(4288,'setDockingColor(java.awt.Color)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setDockingColor(java.awt.Color)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Sets the color displayed when over a docking area\r\n */\r\npublic void setDockingColor(Color c) {\r\n    this.dockingColor = c;\r\n}'),(4289,'setFloating(boolean,java.awt.Point)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setFloating(boolean,java.awt.Point)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public void setFloating(boolean b, Point p) {\r\n    if ((toolBar.isFloatable()) == true) {\r\n        if ((dragWindow) != null) {\r\n            dragWindow.setVisible(false);\r\n        }\r\n        this.floating = b;\r\n        if (b && (PaletteToolBarUI.isFloatingAllowed)) {\r\n            if ((dockingSource) == null) {\r\n                dockingSource = toolBar.getParent();\r\n                dockingSource.remove(toolBar);\r\n            }\r\n            constraintBeforeFloating = calculateConstraint();\r\n            if ((propertyListener) != null) {\r\n                UIManager.addPropertyChangeListener(propertyListener);\r\n            }\r\n            if ((floatingToolBar) == null) {\r\n                floatingToolBar = createFloatingWindow(toolBar);\r\n            }\r\n            floatingToolBar.getContentPane().add(toolBar, BorderLayout.CENTER);\r\n            if ((floatingToolBar) instanceof Window) {\r\n                ((Window) (floatingToolBar)).pack();\r\n            }\r\n            if ((floatingToolBar) instanceof Window) {\r\n                ((Window) (floatingToolBar)).setLocation(floatingX, floatingY);\r\n            }\r\n            if ((floatingToolBar) instanceof Window) {\r\n                ((Window) (floatingToolBar)).show();\r\n            }\r\n        } else {\r\n            if ((floatingToolBar) == null) {\r\n                floatingToolBar = createFloatingWindow(toolBar);\r\n            }\r\n            if ((floatingToolBar) instanceof Window) {\r\n                ((Window) (floatingToolBar)).setVisible(false);\r\n            }\r\n            floatingToolBar.getContentPane().remove(toolBar);\r\n            Integer constraint = getDockingConstraint(dockingSource, p);\r\n            if (constraint == null) {\r\n                constraint = new Integer(0);\r\n            }\r\n            int orientation = mapConstraintToOrientation(constraint);\r\n            setOrientation(orientation);\r\n            if ((dockingSource) == null) {\r\n                dockingSource = toolBar.getParent();\r\n            }\r\n            if ((propertyListener) != null) {\r\n                UIManager.removePropertyChangeListener(propertyListener);\r\n            }\r\n            dockingSource.add(toolBar, constraint.intValue());\r\n        }\r\n        dockingSource.invalidate();\r\n        Container dockingSourceParent = dockingSource.getParent();\r\n        if (dockingSourceParent != null) {\r\n            dockingSourceParent.validate();\r\n        }\r\n        dockingSource.repaint();\r\n    }\r\n}'),(4290,'setFloatingColor(java.awt.Color)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setFloatingColor(java.awt.Color)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Sets the color displayed when over a floating area\r\n */\r\npublic void setFloatingColor(Color c) {\r\n    this.floatingColor = c;\r\n}'),(4291,'setFloatingLocation(int,int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setFloatingLocation(int,int)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public void setFloatingLocation(int x, int y) {\r\n    floatingX = x;\r\n    floatingY = y;\r\n}'),(4292,'setOrientation(int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setOrientation(int)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public void setOrientation(int orientation) {\r\n    toolBar.setOrientation(orientation);\r\n    if ((dragWindow) != null) {\r\n        dragWindow.setOrientation(orientation);\r\n    }\r\n}'),(4293,'setRolloverBorders(boolean)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.setRolloverBorders(boolean)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','/**\r\n * Sets the flag for enabling rollover borders on the toolbar and it will\r\n * also install the apropriate border depending on the state of the flag.\r\n *\r\n * @param rollover\r\n * 		if true, rollover borders are installed.\r\n * 		Otherwise non-rollover borders are installed\r\n * @see #isRolloverBorders\r\n * @since 1.4\r\n */\r\npublic void setRolloverBorders(boolean rollover) {\r\n    rolloverBorders = rollover;\r\n    if (rolloverBorders) {\r\n        installRolloverBorders(toolBar);\r\n    } else {\r\n        installNonRolloverBorders(toolBar);\r\n    }\r\n}'),(4294,'uninstallComponents()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.uninstallComponents()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void uninstallComponents() {\r\n}'),(4295,'uninstallDefaults()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.uninstallDefaults()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void uninstallDefaults() {\r\n    LookAndFeel.uninstallBorder(toolBar);\r\n    dockingColor = null;\r\n    floatingColor = null;\r\n    dockingBorderColor = null;\r\n    floatingBorderColor = null;\r\n    installNormalBorders(toolBar);\r\n    PaletteToolBarUI.rolloverBorder = null;\r\n    PaletteToolBarUI.nonRolloverBorder = null;\r\n    PaletteToolBarUI.nonRolloverToggleBorder = null;\r\n}'),(4296,'uninstallKeyboardActions()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.uninstallKeyboardActions()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void uninstallKeyboardActions() {\r\n    SwingUtilities.replaceUIActionMap(toolBar, null);\r\n    SwingUtilities.replaceUIInputMap(toolBar, JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, null);\r\n}'),(4297,'uninstallListeners()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.uninstallListeners()','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','protected void uninstallListeners() {\r\n    if ((dockingListener) != null) {\r\n        toolBar.removeMouseMotionListener(dockingListener);\r\n        toolBar.removeMouseListener(dockingListener);\r\n        dockingListener = null;\r\n    }\r\n    if ((propertyListener) != null) {\r\n        toolBar.removePropertyChangeListener(propertyListener);\r\n        propertyListener = null;// removed in setFloating\r\n\r\n    }\r\n    if ((toolBarContListener) != null) {\r\n        toolBar.removeContainerListener(toolBarContListener);\r\n        toolBarContListener = null;\r\n    }\r\n    if ((toolBarFocusListener) != null) {\r\n        // Remove focus listener from all components in toolbar\r\n        Component[] components = toolBar.getComponents();\r\n        for (int i = 0; i < (components.length); ++i) {\r\n            components[i].removeFocusListener(toolBarFocusListener);\r\n        }\r\n        toolBarFocusListener = null;\r\n    }\r\n    handler = null;\r\n}'),(4298,'uninstallUI(javax.swing.JComponent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.uninstallUI(javax.swing.JComponent)','440','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI','public void uninstallUI(JComponent c) {\r\n    // Clear defaults\r\n    uninstallDefaults();\r\n    uninstallComponents();\r\n    uninstallListeners();\r\n    uninstallKeyboardActions();\r\n    // Clear instance vars\r\n    if ((isFloating()) == true) {\r\n        setFloating(false, null);\r\n    }\r\n    floatingToolBar = null;\r\n    dragWindow = null;\r\n    dockingSource = null;\r\n    c.putClientProperty(PaletteToolBarUI.FOCUSED_COMP_INDEX, new Integer(focusedCompIndex));\r\n}'),(4299,'-init-(java.lang.String)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Actions.-init-(java.lang.String)','432','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Actions','public Actions(String name) {\r\n    super(name);\r\n}'),(4300,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Actions.actionPerformed(java.awt.event.ActionEvent)','432','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Actions','public void actionPerformed(ActionEvent evt) {\r\n    String key = getName();\r\n    JToolBar toolBar = ((JToolBar) (evt.getSource()));\r\n    PaletteToolBarUI ui = ((PaletteToolBarUI) (PaletteLookAndFeel.getUIOfType(toolBar.getUI(), PaletteToolBarUI.class)));\r\n    if ((PaletteToolBarUI.Actions.NAVIGATE_RIGHT) == key) {\r\n        ui.navigateFocusedComp(SwingConstants.EAST);\r\n    } else\r\n        if ((PaletteToolBarUI.Actions.NAVIGATE_LEFT) == key) {\r\n            ui.navigateFocusedComp(SwingConstants.WEST);\r\n        } else\r\n            if ((PaletteToolBarUI.Actions.NAVIGATE_UP) == key) {\r\n                ui.navigateFocusedComp(SwingConstants.NORTH);\r\n            } else\r\n                if ((PaletteToolBarUI.Actions.NAVIGATE_DOWN) == key) {\r\n                    ui.navigateFocusedComp(SwingConstants.SOUTH);\r\n                }\r\n\r\n\r\n\r\n}'),(4301,'getName()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Actions.getName()','432','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Actions','public String getName() {\r\n    return ((String) (getValue(Action.NAME)));\r\n}'),(4302,'-init-(javax.swing.JToolBar)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.-init-(javax.swing.JToolBar)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public DockingListener(JToolBar t) {\r\n    this.toolBar = t;\r\n    getHandler().tb = t;\r\n}'),(4303,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mouseClicked(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mouseClicked(MouseEvent e) {\r\n    getHandler().mouseClicked(e);\r\n}'),(4304,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mouseDragged(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mouseDragged(MouseEvent e) {\r\n    getHandler().tb = toolBar;\r\n    getHandler().origin = origin;\r\n    getHandler().mouseDragged(e);\r\n    isDragging = getHandler().isDragging;\r\n    origin = getHandler().origin;\r\n}'),(4305,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mouseEntered(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mouseEntered(MouseEvent e) {\r\n    getHandler().mouseEntered(e);\r\n}'),(4306,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mouseExited(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mouseExited(MouseEvent e) {\r\n    getHandler().mouseExited(e);\r\n}'),(4307,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mouseMoved(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mouseMoved(MouseEvent e) {\r\n    getHandler().mouseMoved(e);\r\n}'),(4308,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mousePressed(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mousePressed(MouseEvent e) {\r\n    getHandler().tb = toolBar;\r\n    getHandler().mousePressed(e);\r\n    isDragging = getHandler().isDragging;\r\n}'),(4309,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener.mouseReleased(java.awt.event.MouseEvent)','433','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DockingListener','public void mouseReleased(MouseEvent e) {\r\n    getHandler().tb = toolBar;\r\n    getHandler().isDragging = isDragging;\r\n    getHandler().origin = origin;\r\n    getHandler().mouseReleased(e);\r\n    isDragging = getHandler().isDragging;\r\n    origin = getHandler().origin;\r\n}'),(4310,'-init-(java.awt.Window)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.-init-(java.awt.Window)','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','DragWindow(Window w) {\r\n    super(w);\r\n    getContentPane().add(new JPanel() {\r\n        public void paintComponent(Graphics g) {\r\n            paintDragWindow(g);\r\n        }\r\n    });\r\n}'),(4311,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.-init-()','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','1() {\r\n}'),(4312,'getBorderColor()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.getBorderColor()','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','public Color getBorderColor() {\r\n    return this.borderColor;\r\n}'),(4313,'getInsets()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.getInsets()','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','public Insets getInsets() {\r\n    return new Insets(1, 1, 1, 1);\r\n}'),(4314,'getOffset()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.getOffset()','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','public Point getOffset() {\r\n    return offset;\r\n}'),(4315,'setBorderColor(java.awt.Color)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.setBorderColor(java.awt.Color)','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','public void setBorderColor(Color c) {\r\n    if ((this.borderColor) == c) {\r\n        return;\r\n    }\r\n    this.borderColor = c;\r\n    repaint();\r\n}'),(4316,'setOffset(java.awt.Point)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.setOffset(java.awt.Point)','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','public void setOffset(Point p) {\r\n    this.offset = p;\r\n}'),(4317,'setOrientation(int)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow.setOrientation(int)','434','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$DragWindow','public void setOrientation(int o) {\r\n    if (isShowing()) {\r\n        if (o == (this.orientation)) {\r\n            return;\r\n        }\r\n        this.orientation = o;\r\n        Dimension size = getSize();\r\n        setSize(new Dimension(size.height, size.width));\r\n        if ((offset) != null) {\r\n            if (toolBar.getComponentOrientation().isLeftToRight()) {\r\n                setOffset(new Point(offset.y, offset.x));\r\n            } else\r\n                if (o == (JToolBar.HORIZONTAL)) {\r\n                    setOffset(new Point(((size.height) - (offset.y)), offset.x));\r\n                } else {\r\n                    setOffset(new Point(offset.y, ((size.width) - (offset.x))));\r\n                }\r\n\r\n        }\r\n        repaint();\r\n    }\r\n}'),(4318,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$FrameListener.-init-()','435','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$FrameListener','FrameListener() {\r\n}'),(4319,'windowClosing(java.awt.event.WindowEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$FrameListener.windowClosing(java.awt.event.WindowEvent)','435','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$FrameListener','public void windowClosing(WindowEvent w) {\r\n    if ((toolBar.isFloatable()) == true) {\r\n        if ((dragWindow) != null) {\r\n            dragWindow.setVisible(false);\r\n        }\r\n        floating = false;\r\n        if ((floatingToolBar) == null) {\r\n            floatingToolBar = createFloatingWindow(toolBar);\r\n        }\r\n        if ((floatingToolBar) instanceof Window) {\r\n            ((Window) (floatingToolBar)).setVisible(false);\r\n        }\r\n        floatingToolBar.getContentPane().remove(toolBar);\r\n        Integer constraint = constraintBeforeFloating;\r\n        if ((dockingSource) == null) {\r\n            dockingSource = toolBar.getParent();\r\n        }\r\n        if ((propertyListener) != null) {\r\n            UIManager.removePropertyChangeListener(propertyListener);\r\n        }\r\n        dockingSource.add(toolBar, constraint.intValue());\r\n        dockingSource.invalidate();\r\n        Container dockingSourceParent = dockingSource.getParent();\r\n        if (dockingSourceParent != null) {\r\n            dockingSourceParent.validate();\r\n        }\r\n        dockingSource.repaint();\r\n    }\r\n}'),(4320,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.-init-()','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','Handler() {\r\n}'),(4321,'componentAdded(java.awt.event.ContainerEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.componentAdded(java.awt.event.ContainerEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','// \r\n// ContainerListener\r\n// \r\npublic void componentAdded(ContainerEvent evt) {\r\n    Component c = evt.getChild();\r\n    if ((toolBarFocusListener) != null) {\r\n        c.addFocusListener(toolBarFocusListener);\r\n    }\r\n    if (isRolloverBorders()) {\r\n        setBorderToRollover(c);\r\n    } else {\r\n        setBorderToNonRollover(c);\r\n    }\r\n}'),(4322,'componentRemoved(java.awt.event.ContainerEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.componentRemoved(java.awt.event.ContainerEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void componentRemoved(ContainerEvent evt) {\r\n    Component c = evt.getChild();\r\n    if ((toolBarFocusListener) != null) {\r\n        c.removeFocusListener(toolBarFocusListener);\r\n    }\r\n    // Revert the button border\r\n    setBorderToNormal(c);\r\n}'),(4323,'focusGained(java.awt.event.FocusEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.focusGained(java.awt.event.FocusEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','// \r\n// FocusListener\r\n// \r\npublic void focusGained(FocusEvent evt) {\r\n    Component c = evt.getComponent();\r\n    focusedCompIndex = toolBar.getComponentIndex(c);\r\n}'),(4324,'focusLost(java.awt.event.FocusEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.focusLost(java.awt.event.FocusEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void focusLost(FocusEvent evt) {\r\n}'),(4325,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mouseClicked(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mouseClicked(MouseEvent evt) {\r\n}'),(4326,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mouseDragged(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mouseDragged(MouseEvent evt) {\r\n    if (!(tb.isEnabled())) {\r\n        return;\r\n    }\r\n    if (!(isArmed)) {\r\n        return;\r\n    }\r\n    isDragging = true;\r\n    Point position = evt.getPoint();\r\n    if ((origin) == null) {\r\n        origin = evt.getComponent().getLocationOnScreen();\r\n    }\r\n    dragTo(position, origin);\r\n}'),(4327,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mouseEntered(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mouseEntered(MouseEvent evt) {\r\n}'),(4328,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mouseExited(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mouseExited(MouseEvent evt) {\r\n}'),(4329,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mouseMoved(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mouseMoved(MouseEvent evt) {\r\n}'),(4330,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mousePressed(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mousePressed(MouseEvent evt) {\r\n    if (!(tb.isEnabled())) {\r\n        return;\r\n    }\r\n    isDragging = false;\r\n    if ((evt.getSource()) instanceof JToolBar) {\r\n        JComponent c = ((JComponent) (evt.getSource()));\r\n        Insets insets;\r\n        if ((c.getBorder()) instanceof PaletteToolBarBorder) {\r\n            insets = ((PaletteToolBarBorder) (c.getBorder())).getDragInsets(c);\r\n        } else {\r\n            insets = c.getInsets();\r\n        }\r\n        isArmed = !(((((evt.getX()) > (insets.left)) && ((evt.getX()) < ((c.getWidth()) - (insets.right)))) && ((evt.getY()) > (insets.top))) && ((evt.getY()) < ((c.getHeight()) - (insets.bottom))));\r\n    }\r\n}'),(4331,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.mouseReleased(java.awt.event.MouseEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','public void mouseReleased(MouseEvent evt) {\r\n    if (!(tb.isEnabled())) {\r\n        return;\r\n    }\r\n    if ((isDragging) == true) {\r\n        Point position = evt.getPoint();\r\n        if ((origin) == null) {\r\n            origin = evt.getComponent().getLocationOnScreen();\r\n        }\r\n        floatAt(position, origin);\r\n    }\r\n    origin = null;\r\n    isDragging = false;\r\n}'),(4332,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler.propertyChange(java.beans.PropertyChangeEvent)','436','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$Handler','// \r\n// PropertyChangeListener\r\n// \r\npublic void propertyChange(PropertyChangeEvent evt) {\r\n    String propertyName = evt.getPropertyName();\r\n    if (propertyName == \"lookAndFeel\") {\r\n        toolBar.updateUI();\r\n    } else\r\n        if (propertyName == \"orientation\") {\r\n            // Search for JSeparator components and change its orientation\r\n            // to match the toolbar and flip its orientation.\r\n            Component[] components = toolBar.getComponents();\r\n            int orientation = ((Integer) (evt.getNewValue())).intValue();\r\n            JToolBar.Separator separator;\r\n            for (int i = 0; i < (components.length); ++i) {\r\n                if ((components[i]) instanceof JToolBar.Separator) {\r\n                    separator = ((JToolBar.Separator) (components[i]));\r\n                    if (orientation == (JToolBar.HORIZONTAL)) {\r\n                        separator.setOrientation(JSeparator.VERTICAL);\r\n                    } else {\r\n                        separator.setOrientation(JSeparator.HORIZONTAL);\r\n                    }\r\n                    Dimension size = separator.getSeparatorSize();\r\n                    if ((size != null) && ((size.width) != (size.height))) {\r\n                        // Flip the orientation.\r\n                        Dimension newSize = new Dimension(size.height, size.width);\r\n                        separator.setSeparatorSize(newSize);\r\n                    }\r\n                }\r\n            }\r\n        } else\r\n            if (propertyName == (PaletteToolBarUI.IS_ROLLOVER)) {\r\n                installNormalBorders(toolBar);\r\n                setRolloverBorders(((Boolean) (evt.getNewValue())).booleanValue());\r\n            }\r\n\r\n\r\n}'),(4333,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$PropertyListener.-init-()','437','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$PropertyListener','PropertyListener() {\r\n}'),(4334,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$PropertyListener.propertyChange(java.beans.PropertyChangeEvent)','437','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$PropertyListener','// NOTE: This class exists only for backward compatability. All\r\n// its functionality has been moved into Handler. If you need to add\r\n// new functionality add it to the Handler, but make sure this\r\n// class calls into the Handler.\r\npublic void propertyChange(PropertyChangeEvent e) {\r\n    getHandler().propertyChange(e);\r\n}'),(4335,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarContListener.-init-()','438','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarContListener','ToolBarContListener() {\r\n}'),(4336,'componentAdded(java.awt.event.ContainerEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarContListener.componentAdded(java.awt.event.ContainerEvent)','438','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarContListener','// NOTE: This class exists only for backward compatability. All\r\n// its functionality has been moved into Handler. If you need to add\r\n// new functionality add it to the Handler, but make sure this\r\n// class calls into the Handler.\r\npublic void componentAdded(ContainerEvent e) {\r\n    getHandler().componentAdded(e);\r\n}'),(4337,'componentRemoved(java.awt.event.ContainerEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarContListener.componentRemoved(java.awt.event.ContainerEvent)','438','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarContListener','public void componentRemoved(ContainerEvent e) {\r\n    getHandler().componentRemoved(e);\r\n}'),(4338,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarFocusListener.-init-()','439','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarFocusListener','ToolBarFocusListener() {\r\n}'),(4339,'focusGained(java.awt.event.FocusEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarFocusListener.focusGained(java.awt.event.FocusEvent)','439','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarFocusListener','// NOTE: This class exists only for backward compatability. All\r\n// its functionality has been moved into Handler. If you need to add\r\n// new functionality add it to the Handler, but make sure this\r\n// class calls into the Handler.\r\npublic void focusGained(FocusEvent e) {\r\n    getHandler().focusGained(e);\r\n}'),(4340,'focusLost(java.awt.event.FocusEvent)','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarFocusListener.focusLost(java.awt.event.FocusEvent)','439','org.jhotdraw.gui.plaf.palette.PaletteToolBarUI$ToolBarFocusListener','public void focusLost(FocusEvent e) {\r\n    getHandler().focusLost(e);\r\n}'),(4341,'-init-()','org.jhotdraw.gui.plaf.palette.PaletteUtilities.-init-()','441','org.jhotdraw.gui.plaf.palette.PaletteUtilities','PaletteUtilities() {\r\n}'),(4342,'beginGraphics(java.awt.Graphics2D)','org.jhotdraw.gui.plaf.palette.PaletteUtilities.beginGraphics(java.awt.Graphics2D)','441','org.jhotdraw.gui.plaf.palette.PaletteUtilities','public static final Object beginGraphics(Graphics2D graphics2d) {\r\n    Object object = graphics2d.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);\r\n    /* AffineTransform tx = graphics2d.getTransform();\n    AffineTransform savedTransform = (AffineTransform) tx.clone();\n    tx.scale(0.9,0.9);\n    graphics2d.setTransform(tx);\n     */\r\n    graphics2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    /* graphics2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n    RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n     */\r\n    // if (true) return savedTransform;\r\n    return object;\r\n}'),(4343,'drawStringUnderlineCharAt(java.awt.Graphics,java.lang.String,int,int,int)','org.jhotdraw.gui.plaf.palette.PaletteUtilities.drawStringUnderlineCharAt(java.awt.Graphics,java.lang.String,int,int,int)','441','org.jhotdraw.gui.plaf.palette.PaletteUtilities','/**\r\n * Draw a string with the graphics <code>g</code> at location\r\n * (<code>x</code>, <code>y</code>)\r\n * just like <code>g.drawString</code> would.\r\n * The character at index <code>underlinedIndex</code>\r\n * in text will be underlined. If <code>index</code> is beyond the\r\n * bounds of <code>text</code> (including < 0), nothing will be\r\n * underlined.\r\n *\r\n * @param g\r\n * 		Graphics to draw with\r\n * @param text\r\n * 		String to draw\r\n * @param underlinedIndex\r\n * 		Index of character in text to underline\r\n * @param x\r\n * 		x coordinate to draw at\r\n * @param y\r\n * 		y coordinate to draw at\r\n * @since 1.4\r\n */\r\npublic static void drawStringUnderlineCharAt(Graphics g, String text, int underlinedIndex, int x, int y) {\r\n    g.drawString(text, x, y);\r\n    if ((underlinedIndex >= 0) && (underlinedIndex < (text.length()))) {\r\n        FontMetrics fm = g.getFontMetrics();\r\n        int underlineRectX = x + (fm.stringWidth(text.substring(0, underlinedIndex)));\r\n        int underlineRectY = y;\r\n        int underlineRectWidth = fm.charWidth(text.charAt(underlinedIndex));\r\n        int underlineRectHeight = 1;\r\n        g.fillRect(underlineRectX, ((underlineRectY + (fm.getDescent())) - 1), underlineRectWidth, underlineRectHeight);\r\n    }\r\n}'),(4344,'endGraphics(java.awt.Graphics2D,java.lang.Object)','org.jhotdraw.gui.plaf.palette.PaletteUtilities.endGraphics(java.awt.Graphics2D,java.lang.Object)','441','org.jhotdraw.gui.plaf.palette.PaletteUtilities','public static final void endGraphics(Graphics2D graphics2d, Object oldHints) {\r\n    /* if (true) {\n    graphics2d.setTransform((AffineTransform) oldHints);\n    return;\n    }\n     */\r\n    if (oldHints != null) {\r\n        graphics2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, oldHints);\r\n    }\r\n}'),(4345,'-init-(javax.swing.Icon,javax.swing.Icon,javax.swing.Icon,javax.swing.Icon,javax.swing.Icon)','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.-init-(javax.swing.Icon,javax.swing.Icon,javax.swing.Icon,javax.swing.Icon,javax.swing.Icon)','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','/**\r\n * Creates a new instance.\r\n * All icons must have the same dimensions.\r\n * If an icon is null, an icon is derived for the state from the\r\n * other icons.\r\n */\r\npublic SliderThumbIcon(Icon e, Icon ep, Icon d, Icon i, Icon di) {\r\n    super(new Icon[]{ e, ep, d, i, di });\r\n}'),(4346,'-init-(java.awt.Image[])','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.-init-(java.awt.Image[])','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','/**\r\n * Creates a new instance.\r\n * All icons must have the same dimensions.\r\n *\r\n * The array indices are used to represente the following states:\r\n * [0] Enabled\r\n * [1] Enabled Pressed\r\n * [2] Disabled\r\n * [3] Enabled Inactive\r\n * [4] Disabled Inactive\r\n * [5] Focus Ring\r\n *\r\n * If an array element is null, an icon is derived for the state from the\r\n * other icons.\r\n */\r\npublic SliderThumbIcon(Image[] images) {\r\n    super(images);\r\n}'),(4347,'-init-(javax.swing.Icon[])','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.-init-(javax.swing.Icon[])','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','/**\r\n * Creates a new instance.\r\n * All icons must have the same dimensions.\r\n * If an icon is null, nothing is drawn for this state.\r\n */\r\npublic SliderThumbIcon(Icon[] icons) {\r\n    super(icons);\r\n}'),(4348,'-init-(java.awt.Image,int,boolean)','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.-init-(java.awt.Image,int,boolean)','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','/**\r\n * Creates a new instance.\r\n * The icon representations are created lazily from the image.\r\n */\r\npublic SliderThumbIcon(Image tiledImage, int tileCount, boolean isTiledHorizontaly) {\r\n    super(tiledImage, tileCount, isTiledHorizontaly);\r\n}'),(4349,'generateMissingIcons()','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.generateMissingIcons()','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','protected void generateMissingIcons() {\r\n    Icon[] oldIcons;\r\n    if ((icons.length) != 6) {\r\n        oldIcons = new Icon[6];\r\n        System.arraycopy(icons, 0, oldIcons, 0, Math.min(icons.length, 6));\r\n    } else {\r\n        oldIcons = icons;\r\n    }\r\n    if ((icons[SliderThumbIcon.EP]) == null) {\r\n        icons[SliderThumbIcon.EP] = icons[SliderThumbIcon.E];\r\n    }\r\n    if ((icons[SliderThumbIcon.D]) == null) {\r\n        icons[SliderThumbIcon.D] = icons[SliderThumbIcon.E];\r\n    }\r\n    if ((icons[SliderThumbIcon.I]) == null) {\r\n        icons[SliderThumbIcon.I] = icons[SliderThumbIcon.E];\r\n    }\r\n    if ((icons[SliderThumbIcon.DI]) == null) {\r\n        icons[SliderThumbIcon.DI] = icons[SliderThumbIcon.D];\r\n    }\r\n}'),(4350,'getIcon(java.awt.Component)','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.getIcon(java.awt.Component)','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','protected Icon getIcon(Component c) {\r\n    Icon icon;\r\n    boolean isActive = true;// QuaquaUtilities.isOnActiveWindow(c);\r\n\r\n    if (c instanceof JSlider) {\r\n        JSlider slider = ((JSlider) (c));\r\n        if (isActive) {\r\n            if (c.isEnabled()) {\r\n                if (slider.getModel().getValueIsAdjusting()) {\r\n                    icon = icons[SliderThumbIcon.EP];\r\n                } else {\r\n                    icon = icons[SliderThumbIcon.E];\r\n                }\r\n            } else {\r\n                icon = icons[SliderThumbIcon.D];\r\n            }\r\n        } else {\r\n            if (c.isEnabled()) {\r\n                icon = icons[SliderThumbIcon.I];\r\n            } else {\r\n                icon = icons[SliderThumbIcon.DI];\r\n            }\r\n        }\r\n    } else {\r\n        if (isActive) {\r\n            if (c.isEnabled()) {\r\n                icon = icons[SliderThumbIcon.E];\r\n            } else {\r\n                icon = icons[SliderThumbIcon.D];\r\n            }\r\n        } else {\r\n            if (c.isEnabled()) {\r\n                icon = icons[SliderThumbIcon.I];\r\n            } else {\r\n                icon = icons[SliderThumbIcon.DI];\r\n            }\r\n        }\r\n    }\r\n    return icon;\r\n}'),(4351,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.gui.plaf.palette.SliderThumbIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','442','org.jhotdraw.gui.plaf.palette.SliderThumbIcon','public void paintIcon(Component c, Graphics g, int x, int y) {\r\n    super.paintIcon(c, g, x, y);\r\n    if ((c.isFocusOwner())/* QuaquaUtilities.isFocused(c) */\r\n     && ((icons[SliderThumbIcon.FOCUS_RING]) != null)) {\r\n        icons[SliderThumbIcon.FOCUS_RING].paintIcon(c, g, x, y);\r\n    }\r\n}'),(4352,'-init-()','org.jhotdraw.io.Base64.-init-()','445','org.jhotdraw.io.Base64','/**\r\n * Defeats instantiation.\r\n */\r\nprivate Base64() {\r\n}'),(4353,'-init-(java.io.InputStream)','org.jhotdraw.io.Base64.-init-(java.io.InputStream)','445','org.jhotdraw.io.Base64','/**\r\n * Constructs a {@link Base64.InputStream} in DECODE mode.\r\n *\r\n * @param in\r\n * 		the <tt>java.io.InputStream</tt> from which to read data.\r\n * @since 1.3\r\n */\r\n// end constructor\r\npublic InputStream(InputStream in) {\r\n    this(in, Base64.DECODE);\r\n}'),(4354,'-init-(java.io.InputStream,int)','org.jhotdraw.io.Base64.-init-(java.io.InputStream,int)','445','org.jhotdraw.io.Base64','/**\r\n * Constructs a {@link Base64.InputStream} in\r\n * either ENCODE or DECODE mode.\r\n * <p>\r\n * Valid options:<pre>\r\n *   ENCODE or DECODE: Encode or Decode as data is read.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     (only meaningful when encoding)\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>\r\n *\r\n * @param in\r\n * 		the <tt>java.io.InputStream</tt> from which to read data.\r\n * @param options\r\n * 		Specified options\r\n * @see Base64#ENCODE\r\n * @see Base64#DECODE\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 2.0\r\n */\r\n// end constructor\r\npublic InputStream(InputStream in, int options) {\r\n    super(in);\r\n    this.breakLines = (options & (Base64.DONT_BREAK_LINES)) != (Base64.DONT_BREAK_LINES);\r\n    this.encode = (options & (Base64.ENCODE)) == (Base64.ENCODE);\r\n    this.bufferLength = (encode) ? 4 : 3;\r\n    this.buffer = new byte[bufferLength];\r\n    this.position = -1;\r\n    this.lineLength = 0;\r\n}'),(4355,'-init-(java.io.OutputStream)','org.jhotdraw.io.Base64.-init-(java.io.OutputStream)','445','org.jhotdraw.io.Base64','/**\r\n * Constructs a {@link Base64.OutputStream} in ENCODE mode.\r\n *\r\n * @param out\r\n * 		the <tt>java.io.OutputStream</tt> to which data will be written.\r\n * @since 1.3\r\n */\r\n// end constructor\r\npublic OutputStream(OutputStream out) {\r\n    this(out, Base64.ENCODE);\r\n}'),(4356,'-init-(java.io.OutputStream,int)','org.jhotdraw.io.Base64.-init-(java.io.OutputStream,int)','445','org.jhotdraw.io.Base64','/**\r\n * Constructs a {@link Base64.OutputStream} in\r\n * either ENCODE or DECODE mode.\r\n * <p>\r\n * Valid options:<pre>\r\n *   ENCODE or DECODE: Encode or Decode as data is read.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     (only meaningful when encoding)\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>\r\n *\r\n * @param out\r\n * 		the <tt>java.io.OutputStream</tt> to which data will be written.\r\n * @param options\r\n * 		Specified options.\r\n * @see Base64#ENCODE\r\n * @see Base64#DECODE\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 1.3\r\n */\r\n// end constructor\r\npublic OutputStream(OutputStream out, int options) {\r\n    super(out);\r\n    this.breakLines = (options & (Base64.DONT_BREAK_LINES)) != (Base64.DONT_BREAK_LINES);\r\n    this.encode = (options & (Base64.ENCODE)) == (Base64.ENCODE);\r\n    this.bufferLength = (encode) ? 3 : 4;\r\n    this.buffer = new byte[bufferLength];\r\n    this.position = 0;\r\n    this.lineLength = 0;\r\n    this.suspendEncoding = false;\r\n    this.b4 = new byte[4];\r\n}'),(4357,'decode(byte[],int,int)','org.jhotdraw.io.Base64.decode(byte[],int,int)','445','org.jhotdraw.io.Base64','/**\r\n * Very low-level access to decoding ASCII characters in\r\n * the form of a byte array. Does not support automatically\r\n * gunzipping or any other \"fancy\" features.\r\n *\r\n * @param source\r\n * 		The Base64 encoded data\r\n * @param off\r\n * 		The offset of where to begin decoding\r\n * @param len\r\n * 		The length of characters to decode\r\n * @return decoded data\r\n * @since 1.3\r\n */\r\npublic static byte[] decode(byte[] source, int off, int len) {\r\n    int len34 = (len * 3) / 4;\r\n    byte[] outBuff = new byte[len34];// Upper limit on size of output\r\n\r\n    int outBuffPosn = 0;\r\n    byte[] b4 = new byte[4];\r\n    int b4Posn = 0;\r\n    int i = 0;\r\n    byte sbiCrop = 0;\r\n    byte sbiDecode = 0;\r\n    for (i = off; i < (off + len); i++) {\r\n        sbiCrop = ((byte) ((source[i]) & 127));// Only the low seven bits\r\n\r\n        sbiDecode = Base64.DECODABET[sbiCrop];\r\n        // White space, Equals sign or better\r\n        if (sbiDecode >= (Base64.WHITE_SPACE_ENC)) {\r\n            if (sbiDecode >= (Base64.EQUALS_SIGN_ENC)) {\r\n                b4[(b4Posn++)] = sbiCrop;\r\n                if (b4Posn > 3) {\r\n                    outBuffPosn += Base64.decode4to3(b4, 0, outBuff, outBuffPosn);\r\n                    b4Posn = 0;\r\n                    // If that was the equals sign, break out of for loop\r\n                    if (sbiCrop == (Base64.EQUALS_SIGN))\r\n                        break;\r\n\r\n                }// end if: quartet built\r\n\r\n            }// end if: equals sign or better\r\n\r\n        }// end else:\r\n         else // end if: white space, equals sign or better\r\n        {\r\n            System.err.println(((((\"Bad Base64 input character at \" + i) + \": \") + (source[i])) + \"(decimal)\"));\r\n            return null;\r\n        }// end else:\r\n\r\n    }// each input character\r\n\r\n    byte[] out = new byte[outBuffPosn];\r\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\r\n    return out;\r\n}// end decode\r\n'),(4358,'decode(java.lang.String)','org.jhotdraw.io.Base64.decode(java.lang.String)','445','org.jhotdraw.io.Base64','/**\r\n * Decodes data from Base64 notation, automatically\r\n * detecting gzip-compressed data and decompressing it.\r\n *\r\n * @param s\r\n * 		the string to decode\r\n * @return the decoded data\r\n * @since 1.4\r\n */\r\npublic static byte[] decode(String s) {\r\n    byte[] bytes;\r\n    try {\r\n        bytes = s.getBytes(Base64.PREFERRED_ENCODING);\r\n    }// end try\r\n     catch (UnsupportedEncodingException uee) {\r\n        bytes = s.getBytes();\r\n    }// end catch\r\n\r\n    // </change>\r\n    // Decode\r\n    bytes = Base64.decode(bytes, 0, bytes.length);\r\n    // Check to see if its gzip-compressed\r\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\r\n    if ((bytes != null) && ((bytes.length) >= 4)) {\r\n        int head = (((int) (bytes[0])) & 255) | (((bytes[1]) << 8) & 65280);\r\n        if ((GZIPInputStream.GZIP_MAGIC) == head) {\r\n            ByteArrayInputStream bais = null;\r\n            GZIPInputStream gzis = null;\r\n            ByteArrayOutputStream baos = null;\r\n            byte[] buffer = new byte[2048];\r\n            int length = 0;\r\n            // end catch\r\n            try {\r\n                baos = new ByteArrayOutputStream();\r\n                bais = new ByteArrayInputStream(bytes);\r\n                gzis = new GZIPInputStream(bais);\r\n                while ((length = gzis.read(buffer)) >= 0) {\r\n                    baos.write(buffer, 0, length);\r\n                } // end while: reading input\r\n\r\n                // No error? Get new bytes.\r\n                bytes = baos.toByteArray();\r\n            }// end try\r\n             catch (IOException e) {\r\n                // Just return originally-decoded bytes\r\n            } finally {\r\n                try {\r\n                    baos.close();\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gzis.close();\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    bais.close();\r\n                } catch (Exception e) {\r\n                }\r\n            }// end finally\r\n\r\n        }// end if: gzipped\r\n\r\n    }// end if: bytes.length >= 2\r\n\r\n    return bytes;\r\n}// end decode\r\n'),(4359,'decode4to3(byte[],int,byte[],int)','org.jhotdraw.io.Base64.decode4to3(byte[],int,byte[],int)','445','org.jhotdraw.io.Base64','/* ********  D E C O D I N G   M E T H O D S  ******** */\r\n/**\r\n * Decodes four bytes from array <var>source</var>\r\n * and writes the resulting bytes (up to three of them)\r\n * to <var>destination</var>.\r\n * The source and destination arrays can be manipulated\r\n * anywhere along their length by specifying\r\n * <var>srcOffset</var> and <var>destOffset</var>.\r\n * This method does not check to make sure your arrays\r\n * are large enough to accomodate <var>srcOffset</var> + 4 for\r\n * the <var>source</var> array or <var>destOffset</var> + 3 for\r\n * the <var>destination</var> array.\r\n * This method returns the actual number of bytes that\r\n * were converted from the Base64 encoding.\r\n *\r\n * @param source\r\n * 		the array to convert\r\n * @param srcOffset\r\n * 		the index where conversion begins\r\n * @param destination\r\n * 		the array to hold the conversion\r\n * @param destOffset\r\n * 		the index where output will be put\r\n * @return the number of decoded bytes converted\r\n * @since 1.3\r\n */\r\nprivate static int decode4to3(byte[] source, int srcOffset, byte[] destination, int destOffset) {\r\n    // Example: Dk==\r\n    if ((source[(srcOffset + 2)]) == (Base64.EQUALS_SIGN)) {\r\n        // Two ways to do the same thing. Dont know which way I like best.\r\n        // int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] << 24 ) >>>  6 )\r\n        // | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\r\n        int outBuff = (((Base64.DECODABET[source[srcOffset]]) & 255) << 18) | (((Base64.DECODABET[source[(srcOffset + 1)]]) & 255) << 12);\r\n        destination[destOffset] = ((byte) (outBuff >>> 16));\r\n        return 1;\r\n    } else// Example: DkL=\r\n\r\n        if ((source[(srcOffset + 3)]) == (Base64.EQUALS_SIGN)) {\r\n            // Two ways to do the same thing. Dont know which way I like best.\r\n            // int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\r\n            // | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\r\n            // | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\r\n            int outBuff = ((((Base64.DECODABET[source[srcOffset]]) & 255) << 18) | (((Base64.DECODABET[source[(srcOffset + 1)]]) & 255) << 12)) | (((Base64.DECODABET[source[(srcOffset + 2)]]) & 255) << 6);\r\n            destination[destOffset] = ((byte) (outBuff >>> 16));\r\n            destination[(destOffset + 1)] = ((byte) (outBuff >>> 8));\r\n            return 2;\r\n        } else // Example: DkLE\r\n        {\r\n            try {\r\n                // Two ways to do the same thing. Dont know which way I like best.\r\n                // int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\r\n                // | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\r\n                // | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\r\n                // | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\r\n                int outBuff = (((((Base64.DECODABET[source[srcOffset]]) & 255) << 18) | (((Base64.DECODABET[source[(srcOffset + 1)]]) & 255) << 12)) | (((Base64.DECODABET[source[(srcOffset + 2)]]) & 255) << 6)) | ((Base64.DECODABET[source[(srcOffset + 3)]]) & 255);\r\n                destination[destOffset] = ((byte) (outBuff >> 16));\r\n                destination[(destOffset + 1)] = ((byte) (outBuff >> 8));\r\n                destination[(destOffset + 2)] = ((byte) (outBuff));\r\n                return 3;\r\n            } catch (Exception e) {\r\n                System.out.println((((\"\" + (source[srcOffset])) + \": \") + (Base64.DECODABET[source[srcOffset]])));\r\n                System.out.println((((\"\" + (source[(srcOffset + 1)])) + \": \") + (Base64.DECODABET[source[(srcOffset + 1)]])));\r\n                System.out.println((((\"\" + (source[(srcOffset + 2)])) + \": \") + (Base64.DECODABET[source[(srcOffset + 2)]])));\r\n                System.out.println((((\"\" + (source[(srcOffset + 3)])) + \": \") + (Base64.DECODABET[source[(srcOffset + 3)]])));\r\n                return -1;\r\n            }// e nd catch\r\n\r\n        }\r\n\r\n}// end decodeToBytes\r\n'),(4360,'decodeFromFile(java.lang.String)','org.jhotdraw.io.Base64.decodeFromFile(java.lang.String)','445','org.jhotdraw.io.Base64','/**\r\n * Convenience method for reading a base64-encoded\r\n * file and decoding it.\r\n *\r\n * @param filename\r\n * 		Filename for reading encoded data\r\n * @return decoded byte array or null if unsuccessful\r\n * @since 2.1\r\n */\r\npublic static byte[] decodeFromFile(String filename) {\r\n    byte[] decodedData = null;\r\n    Base64.InputStream bis = null;\r\n    // end catch: IOException\r\n    try {\r\n        // Set up some useful variables\r\n        File file = new File(filename);\r\n        byte[] buffer = null;\r\n        int length = 0;\r\n        int numBytes = 0;\r\n        // Check for size of file\r\n        if ((file.length()) > (Integer.MAX_VALUE)) {\r\n            System.err.println(((\"File is too big for this convenience method (\" + (file.length())) + \" bytes).\"));\r\n            return null;\r\n        }// end if: file too big for int index\r\n\r\n        buffer = new byte[((int) (file.length()))];\r\n        // Open a stream\r\n        bis = new Base64.InputStream(new BufferedInputStream(new FileInputStream(file)), Base64.DECODE);\r\n        // Read until done\r\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0)\r\n            length += numBytes;\r\n\r\n        // Save in a variable to return\r\n        decodedData = new byte[length];\r\n        System.arraycopy(buffer, 0, decodedData, 0, length);\r\n    }// end try\r\n     catch (IOException e) {\r\n        System.err.println((\"Error decoding from file \" + filename));\r\n    } finally {\r\n        try {\r\n            bis.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }// end finally\r\n\r\n    return decodedData;\r\n}// end decodeFromFile\r\n'),(4361,'decodeToFile(java.lang.String,java.lang.String)','org.jhotdraw.io.Base64.decodeToFile(java.lang.String,java.lang.String)','445','org.jhotdraw.io.Base64','/**\r\n * Convenience method for decoding data to a file.\r\n *\r\n * @param dataToDecode\r\n * 		Base64-encoded data as a string\r\n * @param filename\r\n * 		Filename for saving decoded data\r\n * @return <tt>true</tt> if successful, <tt>false</tt> otherwise\r\n * @since 2.1\r\n */\r\npublic static boolean decodeToFile(String dataToDecode, String filename) {\r\n    boolean success = false;\r\n    Base64.OutputStream bos = null;\r\n    // end catch: IOException\r\n    try {\r\n        bos = new Base64.OutputStream(new FileOutputStream(filename), Base64.DECODE);\r\n        bos.write(dataToDecode.getBytes(Base64.PREFERRED_ENCODING));\r\n        success = true;\r\n    }// end try\r\n     catch (IOException e) {\r\n        success = false;\r\n    } finally {\r\n        try {\r\n            bos.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }// end finally\r\n\r\n    return success;\r\n}// end decodeToFile\r\n'),(4362,'decodeToObject(java.lang.String)','org.jhotdraw.io.Base64.decodeToObject(java.lang.String)','445','org.jhotdraw.io.Base64','/**\r\n * Attempts to decode Base64 data and deserialize a Java\r\n * Object within. Returns <tt>null</tt> if there was an error.\r\n *\r\n * @param encodedObject\r\n * 		The Base64 data to decode\r\n * @return The decoded and deserialized object\r\n * @since 1.5\r\n */\r\npublic static Object decodeToObject(String encodedObject) {\r\n    // Decode and gunzip if necessary\r\n    byte[] objBytes = Base64.decode(encodedObject);\r\n    ByteArrayInputStream bais = null;\r\n    ObjectInputStream ois = null;\r\n    Object obj = null;\r\n    // end catch\r\n    try {\r\n        bais = new ByteArrayInputStream(objBytes);\r\n        ois = new ObjectInputStream(bais);\r\n        obj = ois.readObject();\r\n    }// end try\r\n     catch (IOException e) {\r\n        e.printStackTrace();\r\n        obj = null;\r\n    }// end catch\r\n     catch (ClassNotFoundException e) {\r\n        e.printStackTrace();\r\n        obj = null;\r\n    } finally {\r\n        try {\r\n            bais.close();\r\n        } catch (Exception e) {\r\n        }\r\n        try {\r\n            ois.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }// end finally\r\n\r\n    return obj;\r\n}// end decodeObject\r\n'),(4363,'encode3to4(byte[],byte[],int)','org.jhotdraw.io.Base64.encode3to4(byte[],byte[],int)','445','org.jhotdraw.io.Base64','/* ********  E N C O D I N G   M E T H O D S  ******** */\r\n/**\r\n * Encodes up to the first three bytes of array <var>threeBytes</var>\r\n * and returns a four-byte array in Base64 notation.\r\n * The actual number of significant bytes in your array is\r\n * given by <var>numSigBytes</var>.\r\n * The array <var>threeBytes</var> needs only be as big as\r\n * <var>numSigBytes</var>.\r\n * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\r\n *\r\n * @param b4\r\n * 		A reusable byte array to reduce array instantiation\r\n * @param threeBytes\r\n * 		the array to convert\r\n * @param numSigBytes\r\n * 		the number of significant bytes in your array\r\n * @return four byte array in Base64 notation.\r\n * @since 1.5.1\r\n */\r\nprivate static byte[] encode3to4(byte[] b4, byte[] threeBytes, int numSigBytes) {\r\n    Base64.encode3to4(threeBytes, 0, numSigBytes, b4, 0);\r\n    return b4;\r\n}// end encode3to4\r\n'),(4364,'encode3to4(byte[],int,int,byte[],int)','org.jhotdraw.io.Base64.encode3to4(byte[],int,int,byte[],int)','445','org.jhotdraw.io.Base64','/**\r\n * Encodes up to three bytes of the array <var>source</var>\r\n * and writes the resulting four Base64 bytes to <var>destination</var>.\r\n * The source and destination arrays can be manipulated\r\n * anywhere along their length by specifying\r\n * <var>srcOffset</var> and <var>destOffset</var>.\r\n * This method does not check to make sure your arrays\r\n * are large enough to accomodate <var>srcOffset</var> + 3 for\r\n * the <var>source</var> array or <var>destOffset</var> + 4 for\r\n * the <var>destination</var> array.\r\n * The actual number of significant bytes in your array is\r\n * given by <var>numSigBytes</var>.\r\n *\r\n * @param source\r\n * 		the array to convert\r\n * @param srcOffset\r\n * 		the index where conversion begins\r\n * @param numSigBytes\r\n * 		the number of significant bytes in your array\r\n * @param destination\r\n * 		the array to hold the conversion\r\n * @param destOffset\r\n * 		the index where output will be put\r\n * @return the <var>destination</var> array\r\n * @since 1.3\r\n */\r\nprivate static byte[] encode3to4(byte[] source, int srcOffset, int numSigBytes, byte[] destination, int destOffset) {\r\n    // 1         2         3\r\n    // 01234567890123456789012345678901 Bit position\r\n    // --------000000001111111122222222 Array position from threeBytes\r\n    // --------|    ||    ||    ||    | Six bit groups to index ALPHABET\r\n    // >>18  >>12  >> 6  >> 0  Right shift necessary\r\n    // 0x3f  0x3f  0x3f  Additional AND\r\n    // Create buffer with zero-padding if there are only one or two\r\n    // significant bytes passed in the array.\r\n    // We have to shift left 24 in order to flush out the 1s that appear\r\n    // when Java treats a value as negative that is cast from a byte to an int.\r\n    int inBuff = ((numSigBytes > 0 ? ((source[srcOffset]) << 24) >>> 8 : 0) | (numSigBytes > 1 ? ((source[(srcOffset + 1)]) << 24) >>> 16 : 0)) | (numSigBytes > 2 ? ((source[(srcOffset + 2)]) << 24) >>> 24 : 0);\r\n    switch (numSigBytes) {\r\n        case 3 :\r\n            destination[destOffset] = Base64.ALPHABET[(inBuff >>> 18)];\r\n            destination[(destOffset + 1)] = Base64.ALPHABET[((inBuff >>> 12) & 63)];\r\n            destination[(destOffset + 2)] = Base64.ALPHABET[((inBuff >>> 6) & 63)];\r\n            destination[(destOffset + 3)] = Base64.ALPHABET[(inBuff & 63)];\r\n            return destination;\r\n        case 2 :\r\n            destination[destOffset] = Base64.ALPHABET[(inBuff >>> 18)];\r\n            destination[(destOffset + 1)] = Base64.ALPHABET[((inBuff >>> 12) & 63)];\r\n            destination[(destOffset + 2)] = Base64.ALPHABET[((inBuff >>> 6) & 63)];\r\n            destination[(destOffset + 3)] = Base64.EQUALS_SIGN;\r\n            return destination;\r\n        case 1 :\r\n            destination[destOffset] = Base64.ALPHABET[(inBuff >>> 18)];\r\n            destination[(destOffset + 1)] = Base64.ALPHABET[((inBuff >>> 12) & 63)];\r\n            destination[(destOffset + 2)] = Base64.EQUALS_SIGN;\r\n            destination[(destOffset + 3)] = Base64.EQUALS_SIGN;\r\n            return destination;\r\n        default :\r\n            return destination;\r\n    }// end switch\r\n\r\n}// end encode3to4\r\n'),(4365,'encodeBytes(byte[])','org.jhotdraw.io.Base64.encodeBytes(byte[])','445','org.jhotdraw.io.Base64','/**\r\n * Encodes a byte array into Base64 notation.\r\n * Does not GZip-compress data.\r\n *\r\n * @param source\r\n * 		The data to convert\r\n * @since 1.4\r\n */\r\npublic static String encodeBytes(byte[] source) {\r\n    return Base64.encodeBytes(source, 0, source.length, Base64.NO_OPTIONS);\r\n}// end encodeBytes\r\n'),(4366,'encodeBytes(byte[],int)','org.jhotdraw.io.Base64.encodeBytes(byte[],int)','445','org.jhotdraw.io.Base64','/**\r\n * Encodes a byte array into Base64 notation.\r\n * <p>\r\n * Valid options:<pre>\r\n *   GZIP: gzip-compresses object before encoding it.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\r\n * <p>\r\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>\r\n *\r\n * @param source\r\n * 		The data to convert\r\n * @param options\r\n * 		Specified options\r\n * @see Base64#GZIP\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 2.0\r\n */\r\npublic static String encodeBytes(byte[] source, int options) {\r\n    return Base64.encodeBytes(source, 0, source.length, options);\r\n}// end encodeBytes\r\n'),(4367,'encodeBytes(byte[],int,int)','org.jhotdraw.io.Base64.encodeBytes(byte[],int,int)','445','org.jhotdraw.io.Base64','/**\r\n * Encodes a byte array into Base64 notation.\r\n * Does not GZip-compress data.\r\n *\r\n * @param source\r\n * 		The data to convert\r\n * @param off\r\n * 		Offset in array where conversion should begin\r\n * @param len\r\n * 		Length of data to convert\r\n * @since 1.4\r\n */\r\npublic static String encodeBytes(byte[] source, int off, int len) {\r\n    return Base64.encodeBytes(source, off, len, Base64.NO_OPTIONS);\r\n}// end encodeBytes\r\n'),(4368,'encodeBytes(byte[],int,int,int)','org.jhotdraw.io.Base64.encodeBytes(byte[],int,int,int)','445','org.jhotdraw.io.Base64','/**\r\n * Encodes a byte array into Base64 notation.\r\n * <p>\r\n * Valid options:<pre>\r\n *   GZIP: gzip-compresses object before encoding it.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\r\n * <p>\r\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>\r\n *\r\n * @param source\r\n * 		The data to convert\r\n * @param off\r\n * 		Offset in array where conversion should begin\r\n * @param len\r\n * 		Length of data to convert\r\n * @param options\r\n * 		Specified options\r\n * @see Base64#GZIP\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 2.0\r\n */\r\npublic static String encodeBytes(byte[] source, int off, int len, int options) {\r\n    // Isolate options\r\n    int dontBreakLines = options & (Base64.DONT_BREAK_LINES);\r\n    int gzip = options & (Base64.GZIP);\r\n    // Compress?\r\n    if (gzip == (Base64.GZIP)) {\r\n        ByteArrayOutputStream baos = null;\r\n        GZIPOutputStream gzos = null;\r\n        Base64.OutputStream b64os = null;\r\n        // end catch\r\n        try {\r\n            // GZip -> Base64 -> ByteArray\r\n            baos = new ByteArrayOutputStream();\r\n            b64os = new Base64.OutputStream(baos, ((Base64.ENCODE) | dontBreakLines));\r\n            gzos = new GZIPOutputStream(b64os);\r\n            gzos.write(source, off, len);\r\n            gzos.close();\r\n        }// end try\r\n         catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        } finally {\r\n            try {\r\n                gzos.close();\r\n            } catch (Exception e) {\r\n            }\r\n            try {\r\n                b64os.close();\r\n            } catch (Exception e) {\r\n            }\r\n            try {\r\n                baos.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }// end finally\r\n\r\n        // Return value according to relevant encoding.\r\n        try {\r\n            return new String(baos.toByteArray(), Base64.PREFERRED_ENCODING);\r\n        }// end try\r\n         catch (UnsupportedEncodingException uue) {\r\n            return new String(baos.toByteArray());\r\n        }// end catch\r\n\r\n    }// end else: dont compress\r\n     else // end if: compress\r\n    // Else, dont compress. Better not to use streams at all then.\r\n    {\r\n        // Convert option to boolean in way that code likes it.\r\n        boolean breakLines = dontBreakLines == 0;\r\n        int len43 = (len * 4) / 3;\r\n        byte[] outBuff = new byte[(len43// Main 4:3\r\n         + ((len % 3) > 0 ? 4 : 0))// Account for padding\r\n         + (breakLines ? len43 / (Base64.MAX_LINE_LENGTH) : 0)];// New lines\r\n\r\n        int d = 0;\r\n        int e = 0;\r\n        int len2 = len - 2;\r\n        int lineLength = 0;\r\n        for (; d < len2; d += 3 , e += 4) {\r\n            Base64.encode3to4(source, (d + off), 3, outBuff, e);\r\n            lineLength += 4;\r\n            if (breakLines && (lineLength == (Base64.MAX_LINE_LENGTH))) {\r\n                outBuff[(e + 4)] = Base64.NEW_LINE;\r\n                e++;\r\n                lineLength = 0;\r\n            }// end if: end of line\r\n\r\n        }// en dfor: each piece of array\r\n\r\n        if (d < len) {\r\n            Base64.encode3to4(source, (d + off), (len - d), outBuff, e);\r\n            e += 4;\r\n        }// end if: some padding needed\r\n\r\n        // Return value according to relevant encoding.\r\n        try {\r\n            return new String(outBuff, 0, e, Base64.PREFERRED_ENCODING);\r\n        }// end try\r\n         catch (UnsupportedEncodingException uue) {\r\n            return new String(outBuff, 0, e);\r\n        }// end catch\r\n\r\n    }// end else: dont compress\r\n\r\n}// end encodeBytes\r\n'),(4369,'encodeFromFile(java.lang.String)','org.jhotdraw.io.Base64.encodeFromFile(java.lang.String)','445','org.jhotdraw.io.Base64','/**\r\n * Convenience method for reading a binary file\r\n * and base64-encoding it.\r\n *\r\n * @param filename\r\n * 		Filename for reading binary data\r\n * @return base64-encoded string or null if unsuccessful\r\n * @since 2.1\r\n */\r\npublic static String encodeFromFile(String filename) {\r\n    String encodedData = null;\r\n    Base64.InputStream bis = null;\r\n    // end catch: IOException\r\n    try {\r\n        // Set up some useful variables\r\n        File file = new File(filename);\r\n        byte[] buffer = new byte[((int) ((file.length()) * 1.4))];\r\n        int length = 0;\r\n        int numBytes = 0;\r\n        // Open a stream\r\n        bis = new Base64.InputStream(new BufferedInputStream(new FileInputStream(file)), Base64.ENCODE);\r\n        // Read until done\r\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0)\r\n            length += numBytes;\r\n\r\n        // Save in a variable to return\r\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\r\n    }// end try\r\n     catch (IOException e) {\r\n        System.err.println((\"Error encoding from file \" + filename));\r\n    } finally {\r\n        try {\r\n            bis.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }// end finally\r\n\r\n    return encodedData;\r\n}// end encodeFromFile\r\n'),(4370,'encodeObject(java.io.Serializable)','org.jhotdraw.io.Base64.encodeObject(java.io.Serializable)','445','org.jhotdraw.io.Base64','/**\r\n * Serializes an object and returns the Base64-encoded\r\n * version of that serialized object. If the object\r\n * cannot be serialized or there is another error,\r\n * the method will return <tt>null</tt>.\r\n * The object is not GZip-compressed before being encoded.\r\n *\r\n * @param serializableObject\r\n * 		The object to encode\r\n * @return The Base64-encoded object\r\n * @since 1.4\r\n */\r\npublic static String encodeObject(Serializable serializableObject) {\r\n    return Base64.encodeObject(serializableObject, Base64.NO_OPTIONS);\r\n}// end encodeObject\r\n'),(4371,'encodeObject(java.io.Serializable,int)','org.jhotdraw.io.Base64.encodeObject(java.io.Serializable,int)','445','org.jhotdraw.io.Base64','/**\r\n * Serializes an object and returns the Base64-encoded\r\n * version of that serialized object. If the object\r\n * cannot be serialized or there is another error,\r\n * the method will return <tt>null</tt>.\r\n * <p>\r\n * Valid options:<pre>\r\n *   GZIP: gzip-compresses object before encoding it.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\r\n * <p>\r\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>\r\n *\r\n * @param serializableObject\r\n * 		The object to encode\r\n * @param options\r\n * 		Specified options\r\n * @return The Base64-encoded object\r\n * @see Base64#GZIP\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 2.0\r\n */\r\npublic static String encodeObject(Serializable serializableObject, int options) {\r\n    // Streams\r\n    ByteArrayOutputStream baos = null;\r\n    OutputStream b64os = null;\r\n    ObjectOutputStream oos = null;\r\n    GZIPOutputStream gzos = null;\r\n    // Isolate options\r\n    int gzip = options & (Base64.GZIP);\r\n    int dontBreakLines = options & (Base64.DONT_BREAK_LINES);\r\n    // end catch\r\n    try {\r\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\r\n        baos = new ByteArrayOutputStream();\r\n        b64os = new Base64.OutputStream(baos, ((Base64.ENCODE) | dontBreakLines));\r\n        // GZip?\r\n        if (gzip == (Base64.GZIP)) {\r\n            gzos = new GZIPOutputStream(b64os);\r\n            oos = new ObjectOutputStream(gzos);\r\n        } else// end if: gzip\r\n\r\n            oos = new ObjectOutputStream(b64os);\r\n\r\n        oos.writeObject(serializableObject);\r\n    }// end try\r\n     catch (IOException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    } finally {\r\n        try {\r\n            oos.close();\r\n        } catch (Exception e) {\r\n        }\r\n        try {\r\n            gzos.close();\r\n        } catch (Exception e) {\r\n        }\r\n        try {\r\n            b64os.close();\r\n        } catch (Exception e) {\r\n        }\r\n        try {\r\n            baos.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }// end finally\r\n\r\n    // Return value according to relevant encoding.\r\n    try {\r\n        return new String(baos.toByteArray(), Base64.PREFERRED_ENCODING);\r\n    }// end try\r\n     catch (UnsupportedEncodingException uue) {\r\n        return new String(baos.toByteArray());\r\n    }// end catch\r\n\r\n}// end encode\r\n'),(4372,'encodeToFile(byte[],java.lang.String)','org.jhotdraw.io.Base64.encodeToFile(byte[],java.lang.String)','445','org.jhotdraw.io.Base64','/**\r\n * Convenience method for encoding data to a file.\r\n *\r\n * @param dataToEncode\r\n * 		byte array of data to encode in base64 form\r\n * @param filename\r\n * 		Filename for saving encoded data\r\n * @return <tt>true</tt> if successful, <tt>false</tt> otherwise\r\n * @since 2.1\r\n */\r\npublic static boolean encodeToFile(byte[] dataToEncode, String filename) {\r\n    boolean success = false;\r\n    Base64.OutputStream bos = null;\r\n    // end catch: IOException\r\n    try {\r\n        bos = new Base64.OutputStream(new FileOutputStream(filename), Base64.ENCODE);\r\n        bos.write(dataToEncode);\r\n        success = true;\r\n    }// end try\r\n     catch (IOException e) {\r\n        success = false;\r\n    } finally {\r\n        try {\r\n            bos.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }// end finally\r\n\r\n    return success;\r\n}// end encodeToFile\r\n'),(4373,'-init-(java.io.InputStream)','org.jhotdraw.io.Base64$InputStream.-init-(java.io.InputStream)','443','org.jhotdraw.io.Base64$InputStream','/**\r\n * Constructs a {@link Base64.InputStream} in DECODE mode.\r\n *\r\n * @param in\r\n * 		the <tt>java.io.InputStream</tt> from which to read data.\r\n * @since 1.3\r\n */\r\n// end constructor\r\npublic InputStream(InputStream in) {\r\n    this(in, Base64.DECODE);\r\n}'),(4374,'-init-(java.io.InputStream,int)','org.jhotdraw.io.Base64$InputStream.-init-(java.io.InputStream,int)','443','org.jhotdraw.io.Base64$InputStream','/**\r\n * Constructs a {@link Base64.InputStream} in\r\n * either ENCODE or DECODE mode.\r\n * <p>\r\n * Valid options:<pre>\r\n *   ENCODE or DECODE: Encode or Decode as data is read.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     (only meaningful when encoding)\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>\r\n *\r\n * @param in\r\n * 		the <tt>java.io.InputStream</tt> from which to read data.\r\n * @param options\r\n * 		Specified options\r\n * @see Base64#ENCODE\r\n * @see Base64#DECODE\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 2.0\r\n */\r\n// end constructor\r\npublic InputStream(InputStream in, int options) {\r\n    super(in);\r\n    this.breakLines = (options & (Base64.DONT_BREAK_LINES)) != (Base64.DONT_BREAK_LINES);\r\n    this.encode = (options & (Base64.ENCODE)) == (Base64.ENCODE);\r\n    this.bufferLength = (encode) ? 4 : 3;\r\n    this.buffer = new byte[bufferLength];\r\n    this.position = -1;\r\n    this.lineLength = 0;\r\n}'),(4375,'read()','org.jhotdraw.io.Base64$InputStream.read()','443','org.jhotdraw.io.Base64$InputStream','/**\r\n * Reads enough of the input stream to convert\r\n * to/from Base64 and returns the next byte.\r\n *\r\n * @return next byte\r\n * @since 1.3\r\n */\r\npublic int read() throws IOException {\r\n    // Do we need to get data?\r\n    if ((position) < 0) {\r\n        if (encode) {\r\n            byte[] b3 = new byte[3];\r\n            int numBinaryBytes = 0;\r\n            for (int i = 0; i < 3; i++) {\r\n                try {\r\n                    int b = in.read();\r\n                    // If end of stream, b is -1.\r\n                    if (b >= 0) {\r\n                        b3[i] = ((byte) (b));\r\n                        numBinaryBytes++;\r\n                    }// end if: not end of stream\r\n\r\n                }// end try: read\r\n                 catch (IOException e) {\r\n                    // Only a problem if we got no data at all.\r\n                    if (i == 0)\r\n                        throw e;\r\n\r\n                }// end catch\r\n\r\n            }// end for: each needed input byte\r\n\r\n            if (numBinaryBytes > 0) {\r\n                Base64.encode3to4(b3, 0, numBinaryBytes, buffer, 0);\r\n                position = 0;\r\n                numSigBytes = 4;\r\n            }// end else\r\n             else // end if: got data\r\n            {\r\n                return -1;\r\n            }// end else\r\n\r\n        }// end else: decode\r\n         else // end if: encoding\r\n        // Else decoding\r\n        {\r\n            byte[] b4 = new byte[4];\r\n            int i = 0;\r\n            for (i = 0; i < 4; i++) {\r\n                // Read four \"meaningful\" bytes:\r\n                int b = 0;\r\n                do {\r\n                    b = in.read();\r\n                } while ((b >= 0) && ((Base64.DECODABET[(b & 127)]) <= (Base64.WHITE_SPACE_ENC)) );\r\n                if (b < 0)\r\n                    break;\r\n                // Reads a -1 if end of stream\r\n\r\n                b4[i] = ((byte) (b));\r\n            }// end for: each needed input byte\r\n\r\n            if (i == 4) {\r\n                numSigBytes = Base64.decode4to3(b4, 0, buffer, 0);\r\n                position = 0;\r\n            }// end\r\n             else// end if: got four characters\r\n\r\n                if (i == 0) {\r\n                    return -1;\r\n                } else // end else if: also padded correctly\r\n                {\r\n                    // Must have broken out from above.\r\n                    throw new IOException(\"Improperly padded Base64 input.\");\r\n                }\r\n            // end\r\n\r\n        }// end else: decode\r\n\r\n    }// end else: get data\r\n\r\n    // Got data?\r\n    if ((position) >= 0) {\r\n        // End of relevant data?\r\n        /* !encode && */\r\n        if ((position) >= (numSigBytes))\r\n            return -1;\r\n\r\n        if (((encode) && (breakLines)) && ((lineLength) >= (Base64.MAX_LINE_LENGTH))) {\r\n            lineLength = 0;\r\n            return \n;\r\n        }// end else\r\n         else // end if\r\n        {\r\n            (lineLength)++;// This isnt important when decoding\r\n\r\n            // but throwing an extra \"if\" seems\r\n            // just as wasteful.\r\n            int b = buffer[((position)++)];\r\n            if ((position) >= (bufferLength))\r\n                position = -1;\r\n\r\n            return b & 255;// This is how you \"cast\" a byte thats\r\n\r\n            // intended to be unsigned.\r\n        }// end else\r\n\r\n    }// end else\r\n     else // end if: position >= 0\r\n    // Else error\r\n    {\r\n        // When JDK1.4 is more accepted, use an assertion here.\r\n        throw new IOException(\"Error in Base64 code reading stream.\");\r\n    }// end else\r\n\r\n}// end read\r\n'),(4376,'read(byte[],int,int)','org.jhotdraw.io.Base64$InputStream.read(byte[],int,int)','443','org.jhotdraw.io.Base64$InputStream','/**\r\n * Calls {@link #read()} repeatedly until the end of stream\r\n * is reached or <var>len</var> bytes are read.\r\n * Returns number of bytes read into array or -1 if\r\n * end of stream is encountered.\r\n *\r\n * @param dest\r\n * 		array to hold values\r\n * @param off\r\n * 		offset for array\r\n * @param len\r\n * 		max number of bytes to read into array\r\n * @return bytes read into array or -1 if end of stream is encountered.\r\n * @since 1.3\r\n */\r\npublic int read(byte[] dest, int off, int len) throws IOException {\r\n    int i;\r\n    int b;\r\n    for (i = 0; i < len; i++) {\r\n        b = read();\r\n        // if( b < 0 && i == 0 )\r\n        // return -1;\r\n        if (b >= 0)\r\n            dest[(off + i)] = ((byte) (b));\r\n        // Out of for loop\r\n        else\r\n            if (i == 0)\r\n                return -1;\r\n            else\r\n                break;\r\n\r\n        // Out of for loop\r\n\r\n    }// end for: each byte read\r\n\r\n    return i;\r\n}// end read\r\n'),(4377,'-init-(java.io.OutputStream)','org.jhotdraw.io.Base64$OutputStream.-init-(java.io.OutputStream)','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Constructs a {@link Base64.OutputStream} in ENCODE mode.\r\n *\r\n * @param out\r\n * 		the <tt>java.io.OutputStream</tt> to which data will be written.\r\n * @since 1.3\r\n */\r\n// end constructor\r\npublic OutputStream(OutputStream out) {\r\n    this(out, Base64.ENCODE);\r\n}'),(4378,'-init-(java.io.OutputStream,int)','org.jhotdraw.io.Base64$OutputStream.-init-(java.io.OutputStream,int)','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Constructs a {@link Base64.OutputStream} in\r\n * either ENCODE or DECODE mode.\r\n * <p>\r\n * Valid options:<pre>\r\n *   ENCODE or DECODE: Encode or Decode as data is read.\r\n *   DONT_BREAK_LINES: dont break lines at 76 characters\r\n *     (only meaningful when encoding)\r\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\r\n * </pre>\r\n * <p>\r\n * Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>\r\n *\r\n * @param out\r\n * 		the <tt>java.io.OutputStream</tt> to which data will be written.\r\n * @param options\r\n * 		Specified options.\r\n * @see Base64#ENCODE\r\n * @see Base64#DECODE\r\n * @see Base64#DONT_BREAK_LINES\r\n * @since 1.3\r\n */\r\n// end constructor\r\npublic OutputStream(OutputStream out, int options) {\r\n    super(out);\r\n    this.breakLines = (options & (Base64.DONT_BREAK_LINES)) != (Base64.DONT_BREAK_LINES);\r\n    this.encode = (options & (Base64.ENCODE)) == (Base64.ENCODE);\r\n    this.bufferLength = (encode) ? 3 : 4;\r\n    this.buffer = new byte[bufferLength];\r\n    this.position = 0;\r\n    this.lineLength = 0;\r\n    this.suspendEncoding = false;\r\n    this.b4 = new byte[4];\r\n}'),(4379,'close()','org.jhotdraw.io.Base64$OutputStream.close()','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Flushes and closes (I think, in the superclass) the stream.\r\n *\r\n * @since 1.3\r\n */\r\npublic void close() throws IOException {\r\n    // 1. Ensure that pending characters are written\r\n    flushBase64();\r\n    // 2. Actually close the stream\r\n    // Base class both flushes and closes.\r\n    super.close();\r\n    buffer = null;\r\n    out = null;\r\n}// end close\r\n'),(4380,'flushBase64()','org.jhotdraw.io.Base64$OutputStream.flushBase64()','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Method added by PHIL. [Thanks, PHIL. -Rob]\r\n * This pads the buffer without closing the stream.\r\n */\r\npublic void flushBase64() throws IOException {\r\n    if ((position) > 0) {\r\n        if (encode) {\r\n            out.write(Base64.encode3to4(b4, buffer, position));\r\n            position = 0;\r\n        }// end else: decoding\r\n         else // end if: encoding\r\n        {\r\n            throw new IOException(\"Base64 input not properly padded.\");\r\n        }// end else: decoding\r\n\r\n    }// end if: buffer partially full\r\n\r\n}// end flush\r\n'),(4381,'resumeEncoding()','org.jhotdraw.io.Base64$OutputStream.resumeEncoding()','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Resumes encoding of the stream.\r\n * May be helpful if you need to embed a piece of\r\n * base640-encoded data in a stream.\r\n *\r\n * @since 1.5.1\r\n */\r\npublic void resumeEncoding() {\r\n    this.suspendEncoding = false;\r\n}// end resumeEncoding\r\n'),(4382,'suspendEncoding()','org.jhotdraw.io.Base64$OutputStream.suspendEncoding()','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Suspends encoding of the stream.\r\n * May be helpful if you need to embed a piece of\r\n * base640-encoded data in a stream.\r\n *\r\n * @since 1.5.1\r\n */\r\npublic void suspendEncoding() throws IOException {\r\n    flushBase64();\r\n    this.suspendEncoding = true;\r\n}// end suspendEncoding\r\n'),(4383,'write(byte[],int,int)','org.jhotdraw.io.Base64$OutputStream.write(byte[],int,int)','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Calls {@link #write(int)} repeatedly until <var>len</var>\r\n * bytes are written.\r\n *\r\n * @param theBytes\r\n * 		array from which to read bytes\r\n * @param off\r\n * 		offset for array\r\n * @param len\r\n * 		max number of bytes to read into array\r\n * @since 1.3\r\n */\r\npublic void write(byte[] theBytes, int off, int len) throws IOException {\r\n    // Encoding suspended?\r\n    if (suspendEncoding) {\r\n        super.out.write(theBytes, off, len);\r\n        return;\r\n    }// end if: supsended\r\n\r\n    for (int i = 0; i < len; i++) {\r\n        write(theBytes[(off + i)]);\r\n    }// end for: each byte written\r\n\r\n}// end write\r\n'),(4384,'write(int)','org.jhotdraw.io.Base64$OutputStream.write(int)','444','org.jhotdraw.io.Base64$OutputStream','/**\r\n * Writes the byte to the output stream after\r\n * converting to/from Base64 notation.\r\n * When encoding, bytes are buffered three\r\n * at a time before the output stream actually\r\n * gets a write() call.\r\n * When decoding, bytes are buffered four\r\n * at a time.\r\n *\r\n * @param theByte\r\n * 		the byte to write\r\n * @since 1.3\r\n */\r\npublic void write(int theByte) throws IOException {\r\n    // Encoding suspended?\r\n    if (suspendEncoding) {\r\n        super.out.write(theByte);\r\n        return;\r\n    }// end if: supsended\r\n\r\n    // Encode?\r\n    if (encode) {\r\n        buffer[((position)++)] = ((byte) (theByte));\r\n        // Enough to encode.\r\n        if ((position) >= (bufferLength)) {\r\n            out.write(Base64.encode3to4(b4, buffer, bufferLength));\r\n            lineLength += 4;\r\n            if ((breakLines) && ((lineLength) >= (Base64.MAX_LINE_LENGTH))) {\r\n                out.write(Base64.NEW_LINE);\r\n                lineLength = 0;\r\n            }// end if: end of line\r\n\r\n            position = 0;\r\n        }// end if: enough to output\r\n\r\n    }// end else: decoding\r\n     else // end if: encoding\r\n    // Else, Decoding\r\n    {\r\n        // Meaningful Base64 character?\r\n        if ((Base64.DECODABET[(theByte & 127)]) > (Base64.WHITE_SPACE_ENC)) {\r\n            buffer[((position)++)] = ((byte) (theByte));\r\n            // Enough to output.\r\n            if ((position) >= (bufferLength)) {\r\n                int len = Base64.decode4to3(buffer, 0, b4, 0);\r\n                out.write(b4, 0, len);\r\n                // out.write( Base64.decode4to3( buffer ) );\r\n                position = 0;\r\n            }// end if: enough to output\r\n\r\n        }// end else: not white space either\r\n         else// end if: meaningful base64 character\r\n\r\n            if ((Base64.DECODABET[(theByte & 127)]) != (Base64.WHITE_SPACE_ENC)) {\r\n                throw new IOException(\"Invalid character in Base64 data.\");\r\n            }\r\n        // end else: not white space either\r\n\r\n    }// end else: decoding\r\n\r\n}// end write\r\n'),(4385,'-init-(java.io.InputStream)','org.jhotdraw.io.BoundedRangeInputStream.-init-(java.io.InputStream)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Create a new instance.\r\n */\r\npublic BoundedRangeInputStream(InputStream in) {\r\n    super(in);\r\n    try {\r\n        size_ = in.available();\r\n    } catch (IOException ioe) {\r\n        size_ = 0;\r\n    }\r\n}'),(4386,'addChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.io.BoundedRangeInputStream.addChangeListener(javax.swing.event.ChangeListener)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Adds a ChangeListener to the models listener list.\r\n *\r\n * @param l\r\n * 		the ChangeListener to add\r\n * @see #removeChangeListener\r\n */\r\npublic void addChangeListener(ChangeListener l) {\r\n    listenerList_.add(ChangeListener.class, l);\r\n}'),(4387,'fireStateChanged()','org.jhotdraw.io.BoundedRangeInputStream.fireStateChanged()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Run each ChangeListeners stateChanged() method.\r\n *\r\n * @see #setRangeProperties\r\n * @see EventListenerList\r\n */\r\nprotected void fireStateChanged() {\r\n    Object[] listeners = listenerList_.getListenerList();\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ChangeListener.class)) {\r\n            if ((changeEvent_) == null) {\r\n                changeEvent_ = new ChangeEvent(this);\r\n            }\r\n            ((ChangeListener) (listeners[(i + 1)])).stateChanged(changeEvent_);\r\n        }\r\n    }\r\n}'),(4388,'getExtent()','org.jhotdraw.io.BoundedRangeInputStream.getExtent()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Returns the models extent, the length of the inner range that\r\n * begins at the models value.\r\n *\r\n * @return the value of the models extent property\r\n * @see #setExtent\r\n * @see #setValue\r\n */\r\npublic int getExtent() {\r\n    return 0;\r\n}'),(4389,'getMaximum()','org.jhotdraw.io.BoundedRangeInputStream.getMaximum()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Returns the models maximum.  Note that the upper\r\n * limit on the models value is (maximum - extent).\r\n *\r\n * @return the value of the maximum property.\r\n * @see #setMaximum\r\n * @see #setExtent\r\n */\r\npublic int getMaximum() {\r\n    return size_;\r\n}'),(4390,'getMinimum()','org.jhotdraw.io.BoundedRangeInputStream.getMinimum()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Returns the minimum acceptable value.\r\n *\r\n * @return the value of the minimum property\r\n * @see #setMinimum\r\n */\r\npublic int getMinimum() {\r\n    return 0;\r\n}'),(4391,'getValue()','org.jhotdraw.io.BoundedRangeInputStream.getValue()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Returns the current read position.\r\n *\r\n * Returns the models current value.  Note that the upper\r\n * limit on the models value is <code>maximum - extent</code>\r\n * and the lower limit is <code>minimum</code>.\r\n *\r\n * @return the models value\r\n * @see #setValue\r\n */\r\npublic int getValue() {\r\n    return nread_;\r\n}'),(4392,'getValueIsAdjusting()','org.jhotdraw.io.BoundedRangeInputStream.getValueIsAdjusting()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Returns true if the current changes to the value property are part\r\n * of a series of changes.\r\n *\r\n * @return the valueIsAdjustingProperty.\r\n * @see #setValueIsAdjusting\r\n */\r\npublic boolean getValueIsAdjusting() {\r\n    return valueIsAdjusting_;\r\n}'),(4393,'incrementValue(int)','org.jhotdraw.io.BoundedRangeInputStream.incrementValue(int)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Increments the extent by the indicated value.\r\n * Negative Increments are ignored.\r\n *\r\n * @param inc\r\n * 		The incrementValue value.\r\n */\r\nprivate void incrementValue(int inc) {\r\n    if (inc > 0) {\r\n        nread_ += inc;\r\n        if ((nread_) > (size_)) {\r\n            size_ = nread_;\r\n        }\r\n        fireStateChanged();\r\n    }\r\n}'),(4394,'read()','org.jhotdraw.io.BoundedRangeInputStream.read()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Overrides <code>FilterInputStream.read</code>\r\n * to update the value after the read.\r\n */\r\npublic int read() throws IOException {\r\n    int c = in.read();\r\n    if (c >= 0) {\r\n        incrementValue(1);\r\n    }\r\n    return c;\r\n}'),(4395,'read(byte[])','org.jhotdraw.io.BoundedRangeInputStream.read(byte[])','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Overrides <code>FilterInputStream.read</code>\r\n * to update the value after the read.\r\n */\r\npublic int read(byte[] b) throws IOException {\r\n    int nr = in.read(b);\r\n    incrementValue(nr);\r\n    return nr;\r\n}'),(4396,'read(byte[],int,int)','org.jhotdraw.io.BoundedRangeInputStream.read(byte[],int,int)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Overrides <code>FilterInputStream.read</code>\r\n * to update the value after the read.\r\n */\r\npublic int read(byte[] b, int off, int len) throws IOException {\r\n    int nr = in.read(b, off, len);\r\n    incrementValue(nr);\r\n    return nr;\r\n}'),(4397,'removeChangeListener(javax.swing.event.ChangeListener)','org.jhotdraw.io.BoundedRangeInputStream.removeChangeListener(javax.swing.event.ChangeListener)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Removes a ChangeListener.\r\n *\r\n * @param l\r\n * 		the ChangeListener to remove\r\n * @see #addChangeListener\r\n * @see BoundedRangeModel#removeChangeListener\r\n */\r\npublic void removeChangeListener(ChangeListener l) {\r\n    listenerList_.remove(ChangeListener.class, l);\r\n}'),(4398,'reset()','org.jhotdraw.io.BoundedRangeInputStream.reset()','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Overrides <code>FilterInputStream.reset</code>\r\n * to reset the progress monitor as well as the stream.\r\n */\r\npublic synchronized void reset() throws IOException {\r\n    in.reset();\r\n    nread_ = (size_) - (in.available());\r\n    fireStateChanged();\r\n}'),(4399,'setExtent(int)','org.jhotdraw.io.BoundedRangeInputStream.setExtent(int)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Ignored: The extent is always zero.\r\n */\r\npublic void setExtent(int newExtent) {\r\n}'),(4400,'setMaximum(int)','org.jhotdraw.io.BoundedRangeInputStream.setMaximum(int)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Ignored: The maximum of an input stream can not be changed.\r\n * #\r\n * Sets the models maximum to <I>newMaximum</I>. The other\r\n * three properties may be changed as well, to ensure that\r\n * <pre>\r\n * minimum <= value <= value+extent <= maximum\r\n * </pre>\r\n * <p>\r\n * Notifies any listeners if the model changes.\r\n *\r\n * @param newMaximum\r\n * 		the models new maximum\r\n * @see #getMaximum\r\n * @see #addChangeListener\r\n */\r\npublic void setMaximum(int newMaximum) {\r\n    size_ = newMaximum;\r\n    fireStateChanged();\r\n}'),(4401,'setMinimum(int)','org.jhotdraw.io.BoundedRangeInputStream.setMinimum(int)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Ignored: The minimum of an input stream is always zero.\r\n *\r\n * Sets the models minimum to <I>newMinimum</I>.   The\r\n * other three properties may be changed as well, to ensure\r\n * that:\r\n * <pre>\r\n * minimum <= value <= value+extent <= maximum\r\n * </pre>\r\n * <p>\r\n * Notifies any listeners if the model changes.\r\n *\r\n * @param newMinimum\r\n * 		the models new minimum\r\n * @see #getMinimum\r\n * @see #addChangeListener\r\n */\r\npublic void setMinimum(int newMinimum) {\r\n}'),(4402,'setRangeProperties(int,int,int,int,boolean)','org.jhotdraw.io.BoundedRangeInputStream.setRangeProperties(int,int,int,int,boolean)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Ignored: All values depend on the input stream.\r\n */\r\npublic void setRangeProperties(int value, int extent, int min, int max, boolean adjusting) {\r\n}'),(4403,'setValue(int)','org.jhotdraw.io.BoundedRangeInputStream.setValue(int)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Ignored: The value is always zero.\r\n *\r\n * Sets the models current value to <code>newValue</code> if <code>newValue</code>\r\n * satisfies the models constraints. Those constraints are:\r\n * <pre>\r\n * minimum <= value <= value+extent <= maximum\r\n * </pre>\r\n * Otherwise, if <code>newValue</code> is less than <code>minimum</code>\r\n * its set to <code>minimum</code>, if its greater than\r\n * <code>maximum</code> then its set to <code>maximum</code>, and\r\n * if its greater than <code>value+extent</code> then its set to\r\n * <code>value+extent</code>.\r\n * <p>\r\n * When a BoundedRange model is used with a scrollbar the value\r\n * specifies the origin of the scrollbar knob (aka the \"thumb\" or\r\n * \"elevator\").  The value usually represents the origin of the\r\n * visible part of the object being scrolled.\r\n * <p>\r\n * Notifies any listeners if the model changes.\r\n *\r\n * @param newValue\r\n * 		the models new value\r\n * @see #getValue\r\n */\r\npublic void setValue(int newValue) {\r\n}'),(4404,'setValueIsAdjusting(boolean)','org.jhotdraw.io.BoundedRangeInputStream.setValueIsAdjusting(boolean)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * This attribute indicates that any upcoming changes to the value\r\n * of the model should be considered a single event. This attribute\r\n * will be set to true at the start of a series of changes to the value,\r\n * and will be set to false when the value has finished changing.  Normally\r\n * this allows a listener to only take action when the final value change in\r\n * committed, instead of having to do updates for all intermediate values.\r\n * <p>\r\n * Sliders and scrollbars use this property when a drag is underway.\r\n *\r\n * @param b\r\n * 		true if the upcoming changes to the value property are part of a series\r\n */\r\npublic void setValueIsAdjusting(boolean b) {\r\n    valueIsAdjusting_ = b;\r\n}'),(4405,'skip(long)','org.jhotdraw.io.BoundedRangeInputStream.skip(long)','446','org.jhotdraw.io.BoundedRangeInputStream','/**\r\n * Overrides <code>FilterInputStream.skip</code>\r\n * to update the value after the skip.\r\n */\r\npublic long skip(long n) throws IOException {\r\n    long nr = in.skip(n);\r\n    incrementValue(((int) (nr)));\r\n    return nr;\r\n}'),(4406,'-init-(java.lang.String,java.lang.String)','org.jhotdraw.io.ExtensionFileFilter.-init-(java.lang.String,java.lang.String)','447','org.jhotdraw.io.ExtensionFileFilter','/**\r\n * Creates a new instance.\r\n *\r\n * @param description\r\n * 		A human readable description.\r\n * @param extension\r\n * 		The filename extension. This will be converted to\r\n * 		lower-case by this method.\r\n */\r\npublic ExtensionFileFilter(String description, String extension) {\r\n    this.description = description;\r\n    this.extensions = new HashSet<String>();\r\n    extensions.add(extension.toLowerCase());\r\n    defaultExtension = extension;\r\n}'),(4407,'-init-(java.lang.String,java.lang.String[])','org.jhotdraw.io.ExtensionFileFilter.-init-(java.lang.String,java.lang.String[])','447','org.jhotdraw.io.ExtensionFileFilter','/**\r\n * Creates a new instance.\r\n *\r\n * @param description\r\n * 		A human readable description.\r\n * @param extensions\r\n * 		The filename extensions. These will be converted to\r\n * 		lower-case by this method.\r\n */\r\npublic ExtensionFileFilter(String description, String[] extensions) {\r\n    this.description = description;\r\n    this.extensions = new HashSet<String>();\r\n    String[] extlc = new String[extensions.length];\r\n    for (int i = 0; i < (extlc.length); i++) {\r\n        extlc[i] = extensions[i].toLowerCase();\r\n    }\r\n    this.extensions.addAll(Arrays.asList(extlc));\r\n    defaultExtension = extensions[0];\r\n}'),(4408,'accept(java.io.File)','org.jhotdraw.io.ExtensionFileFilter.accept(java.io.File)','447','org.jhotdraw.io.ExtensionFileFilter','public boolean accept(File pathname) {\r\n    if (pathname.isDirectory()) {\r\n        return true;\r\n    } else {\r\n        String name = pathname.getName();\r\n        int p = name.lastIndexOf(.);\r\n        if ((p == (-1)) || (p == ((name.length()) - 1))) {\r\n            return extensions.contains(\"\");\r\n        } else {\r\n            return extensions.contains(name.substring((p + 1)).toLowerCase());\r\n        }\r\n    }\r\n}'),(4409,'getDescription()','org.jhotdraw.io.ExtensionFileFilter.getDescription()','447','org.jhotdraw.io.ExtensionFileFilter','public String getDescription() {\r\n    return description;\r\n}'),(4410,'getExtensions()','org.jhotdraw.io.ExtensionFileFilter.getExtensions()','447','org.jhotdraw.io.ExtensionFileFilter','/**\r\n * Returns an unmodifiable set with the filename extensions.\r\n * All extensions are lower case.\r\n */\r\npublic Set<String> getExtensions() {\r\n    return Collections.unmodifiableSet(extensions);\r\n}'),(4411,'makeAcceptable(java.io.File)','org.jhotdraw.io.ExtensionFileFilter.makeAcceptable(java.io.File)','447','org.jhotdraw.io.ExtensionFileFilter','/**\r\n * Appends the extension to the filename, in case it is missing.\r\n */\r\npublic File makeAcceptable(File pathname) {\r\n    if (accept(pathname)) {\r\n        return pathname;\r\n    } else {\r\n        return new File((((pathname.getPath()) + .) + (defaultExtension)));\r\n    }\r\n}'),(4412,'-init-()','org.jhotdraw.io.StreamPosTokenizer.-init-()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Initializes everything except the streams.\r\n */\r\npublic StreamPosTokenizer() {\r\n    wordChars(a, z);\r\n    wordChars(A, Z);\r\n    wordChars((128 + 32), 255);\r\n    whitespaceChars(0,  );\r\n    commentChar(/);\r\n    quoteChar(\");\r\n    quoteChar();\r\n    parseNumbers();\r\n}'),(4413,'-init-(java.io.Reader)','org.jhotdraw.io.StreamPosTokenizer.-init-(java.io.Reader)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Create a tokenizer that parses the given character stream.\r\n *\r\n * @since JDK1.1\r\n */\r\npublic StreamPosTokenizer(Reader r) {\r\n    this();\r\n    if (r == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    reader = r;\r\n}'),(4414,'commentChar(int)','org.jhotdraw.io.StreamPosTokenizer.commentChar(int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specified that the character argument starts a single-line\r\n * comment. All characters from the comment character to the end of\r\n * the line are ignored by this stream tokenizer.\r\n *\r\n * @param ch\r\n * 		the character.\r\n */\r\npublic void commentChar(int ch) {\r\n    if ((ch >= 0) && (ch < (ctype.length)))\r\n        ctype[ch] = StreamPosTokenizer.CT_COMMENT;\r\n\r\n}'),(4415,'consumeGreedy(java.lang.String)','org.jhotdraw.io.StreamPosTokenizer.consumeGreedy(java.lang.String)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Consumes a substring from the current sval of the StreamPosTokenizer.\r\n */\r\npublic void consumeGreedy(String greedyToken) {\r\n    if ((greedyToken.length()) < (sval.length())) {\r\n        pushBack();\r\n        setStartPosition(((getStartPosition()) + (greedyToken.length())));\r\n        sval = sval.substring(greedyToken.length());\r\n    }\r\n}'),(4416,'eolIsSignificant(boolean)','org.jhotdraw.io.StreamPosTokenizer.eolIsSignificant(boolean)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Determines whether or not ends of line are treated as tokens.\r\n * If the flag argument is true, this tokenizer treats end of lines\r\n * as tokens; the <code>nextToken</code> method returns\r\n * <code>TT_EOL</code> and also sets the <code>ttype</code> field to\r\n * this value when an end of line is read.\r\n * <p>\r\n * A line is a sequence of characters ending with either a\r\n * carriage-return character (<code>&#92;r</code>) or a newline\r\n * character (<code>&#92;n</code>). In addition, a carriage-return\r\n * character followed immediately by a newline character is treated\r\n * as a single end-of-line token.\r\n * <p>\r\n * If the <code>flag</code> is false, end-of-line characters are\r\n * treated as white space and serve only to separate tokens.\r\n *\r\n * @param flag\r\n * 		<code>true</code> indicates that end-of-line characters\r\n * 		are separate tokens; <code>false</code> indicates that\r\n * 		end-of-line characters are white space.\r\n * @see java.io.StreamTokenizer#nextToken()\r\n * @see java.io.StreamTokenizer#ttype\r\n * @see java.io.StreamTokenizer#TT_EOL\r\n */\r\npublic void eolIsSignificant(boolean flag) {\r\n    eolIsSignificantP = flag;\r\n}'),(4417,'getEndPosition()','org.jhotdraw.io.StreamPosTokenizer.getEndPosition()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Returns the end position of the token relative\r\n * to the position that the stream had, when the\r\n * StreamPosTokenizer was constructed.\r\n *\r\n * @return the end position of the token.\r\n */\r\npublic int getEndPosition() {\r\n    return endpos;\r\n}'),(4418,'getStartPosition()','org.jhotdraw.io.StreamPosTokenizer.getStartPosition()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Returns the start position of the token relative\r\n * to the position that the stream had, when the\r\n * StreamPosTokenizer was constructed.\r\n *\r\n * @return the start position of the token.\r\n */\r\npublic int getStartPosition() {\r\n    return startpos;\r\n}'),(4419,'lineno()','org.jhotdraw.io.StreamPosTokenizer.lineno()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Return the current line number.\r\n *\r\n * @return the current line number of this stream tokenizer.\r\n */\r\npublic int lineno() {\r\n    return lineno;\r\n}'),(4420,'lowerCaseMode(boolean)','org.jhotdraw.io.StreamPosTokenizer.lowerCaseMode(boolean)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Determines whether or not word token are automatically lowercased.\r\n * If the flag argument is <code>true</code>, then the value in the\r\n * <code>sval</code> field is lowercased whenever a word token is\r\n * returned (the <code>ttype</code> field has the\r\n * value <code>TT_WORD</code> by the <code>nextToken</code> method\r\n * of this tokenizer.\r\n * <p>\r\n * If the flag argument is <code>false</code>, then the\r\n * <code>sval</code> field is not modified.\r\n *\r\n * @param fl\r\n * 		<code>true</code> indicates that all word tokens should\r\n * 		be lowercased.\r\n * @see java.io.StreamTokenizer#nextToken()\r\n * @see java.io.StreamTokenizer#ttype\r\n * @see java.io.StreamTokenizer#TT_WORD\r\n */\r\npublic void lowerCaseMode(boolean fl) {\r\n    forceLower = fl;\r\n}'),(4421,'nextChar()','org.jhotdraw.io.StreamPosTokenizer.nextChar()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Reads the next character from the input stream, without\r\n * passing it to the tokenizer.\r\n */\r\npublic int nextChar() throws IOException {\r\n    if (pushedBack) {\r\n        throw new IllegalStateException(\"cant read char when a token has been pushed back\");\r\n    }\r\n    if ((peekc) == (StreamPosTokenizer.NEED_CHAR)) {\r\n        return read();\r\n    } else {\r\n        int ch = peekc;\r\n        peekc = StreamPosTokenizer.NEED_CHAR;\r\n        return ch;\r\n    }\r\n}'),(4422,'nextToken()','org.jhotdraw.io.StreamPosTokenizer.nextToken()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Parses the next token from the input stream of this tokenizer.\r\n * The type of the next token is returned in the <code>ttype</code>\r\n * field. Additional information about the token may be in the\r\n * <code>nval</code> field or the <code>sval</code> field of this\r\n * tokenizer.\r\n * <p>\r\n * Typical clients of this\r\n * class first set up the syntax tables and then sit in a loop\r\n * calling nextToken to parse successive tokens until TT_EOF\r\n * is returned.\r\n *\r\n * @return the value of the <code>ttype</code> field.\r\n * @exception IOException  if an I/O error occurs.\r\n * @see java.io.StreamTokenizer#nval\r\n * @see java.io.StreamTokenizer#sval\r\n * @see java.io.StreamTokenizer#ttype\r\n */\r\npublic int nextToken() throws IOException {\r\n    if (pushedBack) {\r\n        pushedBack = false;\r\n        return ttype;\r\n    }\r\n    byte[] ct = ctype;\r\n    sval = null;\r\n    int c = peekc;\r\n    if (c < 0)\r\n        c = StreamPosTokenizer.NEED_CHAR;\r\n\r\n    if (c == (StreamPosTokenizer.SKIP_LF)) {\r\n        c = read();\r\n        if (c < 0) {\r\n            // rlw\r\n            startpos = endpos = (readpos) - 1;\r\n            return ttype = StreamPosTokenizer.TT_EOF;\r\n        }\r\n        if (c == \n)\r\n            c = StreamPosTokenizer.NEED_CHAR;\r\n\r\n    }\r\n    if (c == (StreamPosTokenizer.NEED_CHAR)) {\r\n        c = read();\r\n        if (c < 0) {\r\n            // rlw\r\n            startpos = endpos = (readpos) - 1;\r\n            return ttype = StreamPosTokenizer.TT_EOF;\r\n        }\r\n    }\r\n    ttype = c;/* Just to be safe */\r\n\r\n    /* Set peekc so that the next invocation of nextToken will read\n    another character unless peekc is reset in this invocation\n     */\r\n    peekc = StreamPosTokenizer.NEED_CHAR;\r\n    int ctype = (c < 256) ? ct[c] : StreamPosTokenizer.CT_ALPHA;\r\n    while ((ctype & (StreamPosTokenizer.CT_WHITESPACE)) != 0) {\r\n        if (c == \r) {\r\n            (lineno)++;\r\n            if (eolIsSignificantP) {\r\n                peekc = StreamPosTokenizer.SKIP_LF;\r\n                // rlw\r\n                startpos = endpos = (readpos) - 1;\r\n                return ttype = StreamPosTokenizer.TT_EOL;\r\n            }\r\n            c = read();\r\n            if (c == \n)\r\n                c = read();\r\n\r\n        } else {\r\n            if (c == \n) {\r\n                (lineno)++;\r\n                if (eolIsSignificantP) {\r\n                    // rlw\r\n                    startpos = endpos = (readpos) - 1;\r\n                    return ttype = StreamPosTokenizer.TT_EOL;\r\n                }\r\n            }\r\n            c = read();\r\n        }\r\n        if (c < 0) {\r\n            // rlw\r\n            startpos = endpos = readpos;\r\n            return ttype = StreamPosTokenizer.TT_EOF;\r\n        }\r\n        ctype = (c < 256) ? ct[c] : StreamPosTokenizer.CT_ALPHA;\r\n    } \r\n    // rlw\r\n    startpos = (readpos) - 1;\r\n    // rlw hexadecimal\r\n    hex : if ((((ctype & (StreamPosTokenizer.CT_DIGIT)) != 0) && (c == 0)) && (isParseHexNumbers)) {\r\n        c = read();\r\n        if (c == x) {\r\n            int digits = 0;\r\n            long hval = 0;\r\n            while (digits < 16) {\r\n                c = read();\r\n                if ((c >= 0) && (c <= 9)) {\r\n                    hval = (hval << 4) | (c - 0);\r\n                } else\r\n                    if ((c >= A) && (c <= F)) {\r\n                        hval = (hval << 4) | ((c - A) + 10);\r\n                    } else\r\n                        if ((c >= a) && (c <= f)) {\r\n                            hval = (hval << 4) | ((c - a) + 10);\r\n                        } else {\r\n                            unread(c);\r\n                            if (digits == 0) {\r\n                                sval = \"0x\";\r\n                                endpos = (readpos) - 1;\r\n                                return ttype = StreamPosTokenizer.TT_WORD;\r\n                            } else {\r\n                                nval = ((double) (hval));\r\n                                endpos = (readpos) - 1;\r\n                                return ttype = StreamPosTokenizer.TT_NUMBER;\r\n                            }\r\n                        }\r\n\r\n\r\n                digits++;\r\n            } \r\n            nval = ((double) (hval));\r\n            endpos = (readpos) - 1;\r\n            return ttype = StreamPosTokenizer.TT_NUMBER;\r\n        } else {\r\n            unread(c);\r\n            c = 0;\r\n        }\r\n    }\r\n    digit : if ((ctype & (StreamPosTokenizer.CT_DIGIT)) != 0) {\r\n        int digits = 0;\r\n        boolean neg = false;\r\n        if (c == -) {\r\n            c = read();\r\n            if ((c != .) && ((c < 0) || (c > 9))) {\r\n                peekc = c;\r\n                // rlw\r\n                if ((- & (StreamPosTokenizer.CT_ALPHA)) != 0) {\r\n                    unread(c);\r\n                    c = -;\r\n                    break digit;\r\n                } else {\r\n                    endpos = (readpos) - 1;\r\n                    return ttype = -;\r\n                }\r\n            }\r\n            neg = true;\r\n        } else\r\n            if (c == +) {\r\n                c = read();\r\n                if ((c != .) && ((c < 0) || (c > 9))) {\r\n                    peekc = c;\r\n                    // rlw\r\n                    if ((+ & (StreamPosTokenizer.CT_ALPHA)) != 0) {\r\n                        unread(c);\r\n                        c = +;\r\n                        break digit;\r\n                    } else {\r\n                        endpos = (readpos) - 1;\r\n                        return ttype = -;\r\n                    }\r\n                }\r\n                neg = false;\r\n            }\r\n\r\n        double v = 0;\r\n        int decexp = 0;\r\n        int seendot = 0;\r\n        while (true) {\r\n            if ((c == .) && (seendot == 0))\r\n                seendot = 1;\r\n            else\r\n                if ((0 <= c) && (c <= 9)) {\r\n                    digits++;\r\n                    v = (v * 10) + (c - 0);\r\n                    decexp += seendot;\r\n                } else\r\n                    break;\r\n\r\n\r\n            c = read();\r\n        } \r\n        peekc = c;\r\n        if (decexp != 0) {\r\n            double denom = 10;\r\n            decexp--;\r\n            while (decexp > 0) {\r\n                denom *= 10;\r\n                decexp--;\r\n            } \r\n            /* Do one division of a likely-to-be-more-accurate number */\r\n            v = v / denom;\r\n        }\r\n        nval = (neg) ? -v : v;\r\n        // rlw\r\n        endpos = (c == (-1)) ? (readpos) - 1 : (readpos) - 2;\r\n        if (digits == 0) {\r\n            if ((. & (StreamPosTokenizer.CT_ALPHA)) != 0) {\r\n                unread(c);\r\n                if (neg) {\r\n                    unread(.);\r\n                    c = -;\r\n                } else {\r\n                    read();// consume full stop\r\n\r\n                    c = .;\r\n                }\r\n                break digit;\r\n            } else {\r\n                return ttype = .;\r\n            }\r\n        } else {\r\n            if (isParseExponents) {\r\n                if ((c == E) || (c == e)) {\r\n                    c = read();\r\n                    digits = 0;\r\n                    neg = false;\r\n                    if (c == -) {\r\n                        c = read();\r\n                        if ((c < 0) || (c > 9)) {\r\n                            unread(c);\r\n                            unread(E);\r\n                            return ttype = StreamPosTokenizer.TT_NUMBER;\r\n                        }\r\n                        neg = true;\r\n                    }\r\n                    v = 0;\r\n                    decexp = 0;\r\n                    while (true) {\r\n                        if ((0 <= c) && (c <= 9)) {\r\n                            digits++;\r\n                            v = (v * 10) + (c - 0);\r\n                        } else {\r\n                            break;\r\n                        }\r\n                        c = read();\r\n                    } \r\n                    peekc = c;\r\n                    nval *= Math.pow(10, (neg ? -v : v));\r\n                }\r\n            }\r\n            return ttype = StreamPosTokenizer.TT_NUMBER;\r\n        }\r\n    }\r\n    if ((ctype & (StreamPosTokenizer.CT_ALPHA)) != 0) {\r\n        int i = 0;\r\n        do {\r\n            if (i >= (buf.length)) {\r\n                char[] nb = new char[(buf.length) * 2];\r\n                System.arraycopy(buf, 0, nb, 0, buf.length);\r\n                buf = nb;\r\n            }\r\n            buf[(i++)] = ((char) (c));\r\n            c = read();\r\n            ctype = (c < 0) ? StreamPosTokenizer.CT_WHITESPACE : c < 256 ? ct[c] : StreamPosTokenizer.CT_ALPHA;\r\n        } while ((ctype & ((StreamPosTokenizer.CT_ALPHA) | (StreamPosTokenizer.CT_DIGIT))) != 0 );\r\n        peekc = c;\r\n        sval = String.copyValueOf(buf, 0, i);\r\n        if (forceLower)\r\n            sval = sval.toLowerCase();\r\n\r\n        // rlw EOF must be treated specially\r\n        endpos = (c == (-1)) ? (readpos) - 1 : (readpos) - 2;\r\n        return ttype = StreamPosTokenizer.TT_WORD;\r\n    }\r\n    if ((ctype & (StreamPosTokenizer.CT_QUOTE)) != 0) {\r\n        ttype = c;\r\n        int i = 0;\r\n        /* Invariants (because Octal needs a lookahead):\n          (i)  c contains char value\n          (ii) d contains the lookahead\n         */\r\n        int d = read();\r\n        while ((((d >= 0) && (d != (ttype))) && (d != \n)) && (d != \r)) {\r\n            if (d == \\) {\r\n                c = read();\r\n                int first = c;/* To allow 377, but not 477 */\r\n\r\n                if ((c >= 0) && (c <= 7)) {\r\n                    c = c - 0;\r\n                    int c2 = read();\r\n                    if ((0 <= c2) && (c2 <= 7)) {\r\n                        c = (c << 3) + (c2 - 0);\r\n                        c2 = read();\r\n                        if (((0 <= c2) && (c2 <= 7)) && (first <= 3)) {\r\n                            c = (c << 3) + (c2 - 0);\r\n                            d = read();\r\n                        } else\r\n                            d = c2;\r\n\r\n                    } else\r\n                        d = c2;\r\n\r\n                } else {\r\n                    switch (c) {\r\n                        case a :\r\n                            c = 7;\r\n                            break;\r\n                        case b :\r\n                            c = ;\r\n                            break;\r\n                        case f :\r\n                            c = 12;\r\n                            break;\r\n                        case n :\r\n                            c = \n;\r\n                            break;\r\n                        case r :\r\n                            c = \r;\r\n                            break;\r\n                        case t :\r\n                            c = 	;\r\n                            break;\r\n                        case v :\r\n                            c = 11;\r\n                            break;\r\n                    }\r\n                    d = read();\r\n                }\r\n            } else {\r\n                c = d;\r\n                d = read();\r\n            }\r\n            if (i >= (buf.length)) {\r\n                char[] nb = new char[(buf.length) * 2];\r\n                System.arraycopy(buf, 0, nb, 0, buf.length);\r\n                buf = nb;\r\n            }\r\n            buf[(i++)] = ((char) (c));\r\n        } \r\n        /* If we broke out of the loop because we found a matching quote\n        character then arrange to read a new character next time\n        around; otherwise, save the character.\n         */\r\n        peekc = (d == (ttype)) ? StreamPosTokenizer.NEED_CHAR : d;\r\n        sval = String.copyValueOf(buf, 0, i);\r\n        // rlw\r\n        endpos = (readpos) - 2;\r\n        return ttype;\r\n    }\r\n    /* rlw */\r\n    /* if (c == / && (slashSlashCommentsP || slashStarCommentsP)) {\n    c = read();\n    if (c == * && slashStarCommentsP) {\n    int prevc = 0;\n    while ((c = read()) != / || prevc != *) {\n    if (c == \r) {\n    lineno++;\n    c = read();\n    if (c == \n) {\n    c = read();\n    }\n    } else {\n    if (c == \n) {\n    lineno++;\n    c = read();\n    }\n    }\n    if (c < 0) {\n    endpos = readpos;\n    return ttype = TT_EOF;\n    }\n    prevc = c;\n    }\n    return nextToken();\n    } else if (c == / && slashSlashCommentsP) {\n    while ((c = read()) != \n && c != \r && c >= 0);\n    peekc = c;\n    return nextToken();\n    } else {\n    // Now see if it is still a single line comment\n    if ((ct[/] & CT_COMMENT) != 0) {\n    while ((c = read()) != \n && c != \r && c >= 0);\n    peekc = c;\n    return nextToken();\n    } else {\n    peekc = c;\n    // rlw\n    endpos = readpos - 2;\n    return ttype = /;\n    }\n    }\n    }\n     */\r\n    if (((slashSlashCommentsP) && (c == (slashSlash[0]))) || ((slashStarCommentsP) && (c == (slashStar[0])))) {\r\n        if ((c == (slashStar[0])) && ((slashStar.length) == 1)) {\r\n            // This is the scanner code if the slashStar token\r\n            // is one characters long\r\n            while ((c = read()) != (starSlash[0])) {\r\n                if (c == \r) {\r\n                    (lineno)++;\r\n                    c = read();\r\n                    if (c == \n) {\r\n                        c = read();\r\n                    }\r\n                } else {\r\n                    if (c == \n) {\r\n                        (lineno)++;\r\n                        c = read();\r\n                    }\r\n                }\r\n                if (c < 0) {\r\n                    endpos = readpos;\r\n                    return ttype = StreamPosTokenizer.TT_EOF;\r\n                }\r\n            } \r\n            return nextToken();\r\n        } else\r\n            if ((c == (slashSlash[0])) && ((slashSlash.length) == 1)) {\r\n                // This is the scanner code if the slashSlash token\r\n                // is one characters long\r\n                while ((((c = read()) != \n) && (c != \r)) && (c >= 0));\r\n                peekc = c;\r\n                return nextToken();\r\n            } else {\r\n                // This is the scanner code if the slashStar and the slashSlash\r\n                // tokens are two characters long\r\n                c = read();\r\n                if ((c == (slashStar[1])) && (slashStarCommentsP)) {\r\n                    int prevc = 0;\r\n                    while (((c = read()) != (starSlash[1])) || (prevc != (starSlash[0]))) {\r\n                        if (c == \r) {\r\n                            (lineno)++;\r\n                            c = read();\r\n                            if (c == \n) {\r\n                                c = read();\r\n                            }\r\n                        } else {\r\n                            if (c == \n) {\r\n                                (lineno)++;\r\n                                c = read();\r\n                            }\r\n                        }\r\n                        if (c < 0) {\r\n                            endpos = readpos;\r\n                            return ttype = StreamPosTokenizer.TT_EOF;\r\n                        }\r\n                        prevc = c;\r\n                    } \r\n                    return nextToken();\r\n                } else\r\n                    if ((c == (slashSlash[1])) && (slashSlashCommentsP)) {\r\n                        while ((((c = read()) != \n) && (c != \r)) && (c >= 0));\r\n                        peekc = c;\r\n                        return nextToken();\r\n                    } else {\r\n                        // Now see if it is still a single line comment\r\n                        if (((ct[slashSlash[0]]) & (StreamPosTokenizer.CT_COMMENT)) != 0) {\r\n                            while ((((c = read()) != \n) && (c != \r)) && (c >= 0));\r\n                            peekc = c;\r\n                            return nextToken();\r\n                        } else {\r\n                            peekc = c;\r\n                            // rlw\r\n                            endpos = (readpos) - 2;\r\n                            return ttype = slashSlash[0];\r\n                        }\r\n                    }\r\n\r\n            }\r\n\r\n    }\r\n    if ((ctype & (StreamPosTokenizer.CT_COMMENT)) != 0) {\r\n        while ((((c = read()) != \n) && (c != \r)) && (c >= 0));\r\n        peekc = c;\r\n        return nextToken();\r\n    }\r\n    // rlw\r\n    endpos = (readpos) - 1;\r\n    return ttype = c;\r\n}'),(4423,'ordinaryChar(int)','org.jhotdraw.io.StreamPosTokenizer.ordinaryChar(int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specifies that the character argument is \"ordinary\"\r\n * in this tokenizer. It removes any special significance the\r\n * character has as a comment character, word component, string\r\n * delimiter, white space, or number character. When such a character\r\n * is encountered by the parser, the parser treates it as a\r\n * single-character token and sets <code>ttype</code> field to the\r\n * character value.\r\n *\r\n * @param ch\r\n * 		the character.\r\n * @see java.io.StreamTokenizer#ttype\r\n */\r\npublic void ordinaryChar(int ch) {\r\n    if ((ch >= 0) && (ch < (ctype.length)))\r\n        ctype[ch] = 0;\r\n\r\n}'),(4424,'ordinaryChars(int,int)','org.jhotdraw.io.StreamPosTokenizer.ordinaryChars(int,int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specifies that all characters <i>c</i> in the range\r\n * <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\r\n * are \"ordinary\" in this tokenizer. See the\r\n * <code>ordinaryChar</code> method for more information on a\r\n * character being ordinary.\r\n *\r\n * @param low\r\n * 		the low end of the range.\r\n * @param hi\r\n * 		the high end of the range.\r\n * @see java.io.StreamTokenizer#ordinaryChar(int)\r\n */\r\npublic void ordinaryChars(int low, int hi) {\r\n    if (low < 0)\r\n        low = 0;\r\n\r\n    if (hi >= (ctype.length))\r\n        hi = (ctype.length) - 1;\r\n\r\n    while (low <= hi)\r\n        ctype[(low++)] = 0;\r\n\r\n}'),(4425,'parseExponents()','org.jhotdraw.io.StreamPosTokenizer.parseExponents()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Enables number parsing of exponents.\r\n * Exponents appear after the last digit of number with capital letter E\r\n * or small letter e.\r\n */\r\npublic void parseExponents() {\r\n    parseNumbers();\r\n    isParseExponents = true;\r\n}'),(4426,'parseHexNumbers()','org.jhotdraw.io.StreamPosTokenizer.parseHexNumbers()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Enables number parsing for decimal numbers and for hexadecimal numbers\r\n */\r\npublic void parseHexNumbers() {\r\n    parseNumbers();\r\n    isParseHexNumbers = true;\r\n}'),(4427,'parseNumbers()','org.jhotdraw.io.StreamPosTokenizer.parseNumbers()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specifies that numbers should be parsed by this tokenizer. The\r\n * syntax table of this tokenizer is modified so that each of the twelve\r\n * characters:\r\n * <blockquote><pre>\r\n *      0 1 2 3 4 5 6 7 8 9 . -\r\n * </pre></blockquote>\r\n * <p>\r\n * has the \"numeric\" attribute.\r\n * <p>\r\n * When the parser encounters a word token that has the format of a\r\n * double precision floating-point number, it treats the token as a\r\n * number rather than a word, by setting the the <code>ttype</code>\r\n * field to the value <code>TT_NUMBER</code> and putting the numeric\r\n * value of the token into the <code>nval</code> field.\r\n *\r\n * @see java.io.StreamTokenizer#nval\r\n * @see java.io.StreamTokenizer#TT_NUMBER\r\n * @see java.io.StreamTokenizer#ttype\r\n */\r\npublic void parseNumbers() {\r\n    for (int i = 0; i <= 9; i++)\r\n        ctype[i] |= StreamPosTokenizer.CT_DIGIT;\r\n\r\n    ctype[.] |= StreamPosTokenizer.CT_DIGIT;\r\n    ctype[-] |= StreamPosTokenizer.CT_DIGIT;\r\n    // ctype[+] |= CT_DIGIT; // rlw\r\n}'),(4428,'parsePlusAsNumber()','org.jhotdraw.io.StreamPosTokenizer.parsePlusAsNumber()','448','org.jhotdraw.io.StreamPosTokenizer','public void parsePlusAsNumber() {\r\n    ctype[+] |= StreamPosTokenizer.CT_DIGIT;\r\n}'),(4429,'pushBack()','org.jhotdraw.io.StreamPosTokenizer.pushBack()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Causes the next call to the <code>nextToken</code> method of this\r\n * tokenizer to return the current value in the <code>ttype</code>\r\n * field, and not to modify the value in the <code>nval</code> or\r\n * <code>sval</code> field.\r\n *\r\n * @see java.io.StreamTokenizer#nextToken()\r\n * @see java.io.StreamTokenizer#nval\r\n * @see java.io.StreamTokenizer#sval\r\n * @see java.io.StreamTokenizer#ttype\r\n */\r\npublic void pushBack() {\r\n    /* No-op if nextToken() not called */\r\n    if ((ttype) != (StreamPosTokenizer.TT_NOTHING))\r\n        pushedBack = true;\r\n\r\n}'),(4430,'pushCharBack(int)','org.jhotdraw.io.StreamPosTokenizer.pushCharBack(int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Unreads a character back into the input stream of the tokenizer.\r\n */\r\npublic void pushCharBack(int ch) throws IOException {\r\n    if (pushedBack) {\r\n        throw new IllegalStateException(\"cant push back char when a token has been pushed back\");\r\n    }\r\n    if ((peekc) == (StreamPosTokenizer.NEED_CHAR)) {\r\n        unread(ch);\r\n    } else {\r\n        unread(peekc);\r\n        peekc = StreamPosTokenizer.NEED_CHAR;\r\n        unread(ch);\r\n    }\r\n}'),(4431,'quoteChar(int)','org.jhotdraw.io.StreamPosTokenizer.quoteChar(int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specifies that matching pairs of this character delimit string\r\n * constants in this tokenizer.\r\n * <p>\r\n * When the <code>nextToken</code> method encounters a string\r\n * constant, the <code>ttype</code> field is set to the string\r\n * delimiter and the <code>sval</code> field is set to the body of\r\n * the string.\r\n * <p>\r\n * If a string quote character is encountered, then a string is\r\n * recognized, consisting of all characters after (but not including)\r\n * the string quote character, up to (but not including) the next\r\n * occurrence of that same string quote character, or a line\r\n * terminator, or end of file. The usual escape sequences such as\r\n * <code>\"&#92;n\"</code> and <code>\"&#92;t\"</code> are recognized and\r\n * converted to single characters as the string is parsed.\r\n *\r\n * @param ch\r\n * 		the character.\r\n * @see java.io.StreamTokenizer#nextToken()\r\n * @see java.io.StreamTokenizer#sval\r\n * @see java.io.StreamTokenizer#ttype\r\n */\r\npublic void quoteChar(int ch) {\r\n    if ((ch >= 0) && (ch < (ctype.length)))\r\n        ctype[ch] = StreamPosTokenizer.CT_QUOTE;\r\n\r\n}'),(4432,'read()','org.jhotdraw.io.StreamPosTokenizer.read()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Read the next character\r\n */\r\nprivate int read() throws IOException {\r\n    // rlw\r\n    int data;\r\n    if ((unread.size()) > 0) {\r\n        data = ((Integer) (unread.lastElement())).intValue();\r\n        unread.removeElementAt(((unread.size()) - 1));\r\n    } else {\r\n        data = reader.read();\r\n    }\r\n    if (data != (-1)) {\r\n        (readpos)++;\r\n    }\r\n    return data;\r\n}'),(4433,'resetSyntax()','org.jhotdraw.io.StreamPosTokenizer.resetSyntax()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Resets this tokenizers syntax table so that all characters are\r\n * \"ordinary.\" See the <code>ordinaryChar</code> method\r\n * for more information on a character being ordinary.\r\n *\r\n * @see java.io.StreamTokenizer#ordinaryChar(int)\r\n */\r\npublic void resetSyntax() {\r\n    for (int i = ctype.length; (--i) >= 0;)\r\n        ctype[i] = 0;\r\n\r\n}'),(4434,'setReader(java.io.Reader)','org.jhotdraw.io.StreamPosTokenizer.setReader(java.io.Reader)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Sets the reader for the tokenizer.\r\n *\r\n * @param r\r\n * 		\r\n */\r\npublic void setReader(Reader r) {\r\n    this.reader = r;\r\n    readpos = 0;\r\n    unread.clear();\r\n    peekc = StreamPosTokenizer.NEED_CHAR;\r\n    pushedBack = false;\r\n    forceLower = false;\r\n    lineno = 0;\r\n    startpos = endpos = -1;\r\n    ttype = StreamPosTokenizer.TT_NOTHING;\r\n}'),(4435,'setSlashSlashToken(java.lang.String)','org.jhotdraw.io.StreamPosTokenizer.setSlashSlashToken(java.lang.String)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Sets the slash slash token.\r\n * Due to limitations by this implementation, the character length must be\r\n * either 1 or 2.\r\n */\r\npublic void setSlashSlashToken(String slashSlash) {\r\n    if (((slashSlash.length()) < 1) || ((slashSlash.length()) > 2)) {\r\n        throw new IllegalArgumentException(((\"SlashSlash token must be of length 1 or 2: \" + slashSlash) + \"\"));\r\n    }\r\n    this.slashSlash = slashSlash.toCharArray();\r\n    commentChar(this.slashSlash[0]);\r\n}'),(4436,'setSlashStarTokens(java.lang.String,java.lang.String)','org.jhotdraw.io.StreamPosTokenizer.setSlashStarTokens(java.lang.String,java.lang.String)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Sets the slash star and star slash tokens.\r\n * Due to limitations by this implementation, both tokens must have the\r\n * same number of characters and the character length must be either 1\r\n * or 2.\r\n */\r\npublic void setSlashStarTokens(String slashStar, String starSlash) {\r\n    if ((slashStar.length()) != (starSlash.length())) {\r\n        throw new IllegalArgumentException(((((\"SlashStar and StarSlash tokens must be of same length: \" + slashStar) + \" \") + starSlash) + \"\"));\r\n    }\r\n    if (((slashStar.length()) < 1) || ((slashStar.length()) > 2)) {\r\n        throw new IllegalArgumentException(((((\"SlashStar and StarSlash tokens must be of length 1 or 2: \" + slashStar) + \" \") + starSlash) + \"\"));\r\n    }\r\n    this.slashStar = slashStar.toCharArray();\r\n    this.starSlash = starSlash.toCharArray();\r\n    commentChar(this.slashStar[0]);\r\n}'),(4437,'setStartPosition(int)','org.jhotdraw.io.StreamPosTokenizer.setStartPosition(int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Set the start position of the current token.\r\n */\r\npublic void setStartPosition(int p) {\r\n    startpos = p;\r\n}'),(4438,'slashSlashComments(boolean)','org.jhotdraw.io.StreamPosTokenizer.slashSlashComments(boolean)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Determines whether or not the tokenizer recognizes C++-style comments.\r\n * If the flag argument is <code>true</code>, this stream tokenizer\r\n * recognizes C++-style comments. Any occurrence of two consecutive\r\n * slash characters (<code>/</code>) is treated as the beginning of\r\n * a comment that extends to the end of the line.\r\n * <p>\r\n * If the flag argument is <code>false</code>, then C++-style\r\n * comments are not treated specially.\r\n *\r\n * @param flag\r\n * 		<code>true</code> indicates to recognize and ignore\r\n * 		C++-style comments.\r\n */\r\npublic void slashSlashComments(boolean flag) {\r\n    slashSlashCommentsP = flag;\r\n}'),(4439,'slashStarComments(boolean)','org.jhotdraw.io.StreamPosTokenizer.slashStarComments(boolean)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Determines whether or not the tokenizer recognizes C-style comments.\r\n * If the flag argument is <code>true</code>, this stream tokenizer\r\n * recognizes C-style comments. All text between successive\r\n * occurrences of <code>/*</code> and <code>*&#47;</code> are discarded.\r\n * <p>\r\n * If the flag argument is <code>false</code>, then C-style comments\r\n * are not treated specially.\r\n *\r\n * @param flag\r\n * 		<code>true</code> indicates to recognize and ignore\r\n * 		C-style comments.\r\n */\r\npublic void slashStarComments(boolean flag) {\r\n    slashStarCommentsP = flag;\r\n}'),(4440,'toString()','org.jhotdraw.io.StreamPosTokenizer.toString()','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Returns the string representation of the current stream token.\r\n *\r\n * @return a string representation of the token specified by the\r\n<code>ttype</code>, <code>nval</code>, and <code>sval</code>\r\nfields.\r\n * @see java.io.StreamTokenizer#nval\r\n * @see java.io.StreamTokenizer#sval\r\n * @see java.io.StreamTokenizer#ttype\r\n */\r\npublic String toString() {\r\n    String ret;\r\n    switch (ttype) {\r\n        case StreamPosTokenizer.TT_EOF :\r\n            ret = \"EOF\";\r\n            break;\r\n        case StreamPosTokenizer.TT_EOL :\r\n            ret = \"EOL\";\r\n            break;\r\n        case StreamPosTokenizer.TT_WORD :\r\n            ret = sval;\r\n            break;\r\n        case StreamPosTokenizer.TT_NUMBER :\r\n            ret = \"n=\" + (nval);\r\n            break;\r\n        case StreamPosTokenizer.TT_NOTHING :\r\n            ret = \"NOTHING\";\r\n            break;\r\n        default :\r\n            {\r\n                char[] s = new char[3];\r\n                s[0] = s[2] = ;\r\n                s[1] = ((char) (ttype));\r\n                ret = new String(s);\r\n                break;\r\n            }\r\n    }\r\n    return ((\"Token[\" + ret) + \"], line \") + (lineno);\r\n}'),(4441,'unread(int)','org.jhotdraw.io.StreamPosTokenizer.unread(int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Unread\r\n */\r\nprivate void unread(int c) {\r\n    unread.addElement(new Integer(c));\r\n    (readpos)--;\r\n}'),(4442,'whitespaceChars(int,int)','org.jhotdraw.io.StreamPosTokenizer.whitespaceChars(int,int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specifies that all characters <i>c</i> in the range\r\n * <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\r\n * are white space characters. White space characters serve only to\r\n * separate tokens in the input stream.\r\n *\r\n * @param low\r\n * 		the low end of the range.\r\n * @param hi\r\n * 		the high end of the range.\r\n */\r\npublic void whitespaceChars(int low, int hi) {\r\n    if (low < 0)\r\n        low = 0;\r\n\r\n    if (hi >= (ctype.length))\r\n        hi = (ctype.length) - 1;\r\n\r\n    while (low <= hi)\r\n        ctype[(low++)] = StreamPosTokenizer.CT_WHITESPACE;\r\n\r\n}'),(4443,'wordChars(int,int)','org.jhotdraw.io.StreamPosTokenizer.wordChars(int,int)','448','org.jhotdraw.io.StreamPosTokenizer','/**\r\n * Specifies that all characters <i>c</i> in the range\r\n * <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\r\n * are word constituents. A word token consists of a word constituent\r\n * followed by zero or more word constituents or number constituents.\r\n *\r\n * @param low\r\n * 		the low end of the range.\r\n * @param hi\r\n * 		the high end of the range.\r\n */\r\npublic void wordChars(int low, int hi) {\r\n    if (low < 0)\r\n        low = 0;\r\n\r\n    if (hi >= (ctype.length))\r\n        hi = (ctype.length) - 1;\r\n\r\n    while (low <= hi)\r\n        ctype[(low++)] |= StreamPosTokenizer.CT_ALPHA;\r\n\r\n}'),(4444,'-init-(java.lang.String,int)','org.jhotdraw.samples.color.JMixer.-init-(java.lang.String,int)','450','org.jhotdraw.samples.color.JMixer','public Preset(String name, int index) {\r\n    this.name = name;\r\n    this.index = index;\r\n}'),(4445,'-init-()','org.jhotdraw.samples.color.JMixer.-init-()','450','org.jhotdraw.samples.color.JMixer','/**\r\n * Creates new form.\r\n */\r\npublic JMixer() {\r\n    initComponents();\r\n    DefaultComboBoxModel presets = new DefaultComboBoxModel();\r\n    presets.addElement(new JMixer.Preset(\"Powerful\", 4));\r\n    presets.addElement(new JMixer.Preset(\"Rich\", 1));\r\n    presets.addElement(new JMixer.Preset(\"Romantic\", 7));\r\n    presets.addElement(new JMixer.Preset(\"Vital\", 12));\r\n    presets.addElement(new JMixer.Preset(\"Earthy\", 10));\r\n    presets.addElement(new JMixer.Preset(\"Friendly\", 20));\r\n    presets.addElement(new JMixer.Preset(\"Soft\", 22));\r\n    presets.addElement(new JMixer.Preset(\"Welcoming\", 28));\r\n    presets.addElement(new JMixer.Preset(\"Moving\", 36));\r\n    presets.addElement(new JMixer.Preset(\"Elegant\", 39));\r\n    presets.addElement(new JMixer.Preset(\"Fresh\", 52));\r\n    presets.addElement(new JMixer.Preset(\"Traditional\", 49));\r\n    presets.addElement(new JMixer.Preset(\"Refreshing\", 60));\r\n    presets.addElement(new JMixer.Preset(\"Tropical\", 62));\r\n    presets.addElement(new JMixer.Preset(\"Classic\", 68));\r\n    presets.addElement(new JMixer.Preset(\"Dependable\", 65));\r\n    presets.addElement(new JMixer.Preset(\"Calm\", 70));\r\n    presets.addElement(new JMixer.Preset(\"Regal\", 76));\r\n    presets.addElement(new JMixer.Preset(\"Magical\", 84));\r\n    presets.addElement(new JMixer.Preset(\"Energetic\", 92));\r\n    presets.addElement(new JMixer.Preset(\"Subdued\", 94));\r\n    presetCombo.setModel(presets);\r\n    Font smallFont = new Font(\"Lucida Grande\", Font.PLAIN, 11);\r\n    for (Component c : mixerPanel.getComponents()) {\r\n        c.setFont(smallFont);\r\n    }\r\n    // Create a list, overriding the getToolTipText() method\r\n    swatchesList = new JList() {\r\n        // This method is called as the cursor moves within the list.\r\n        @Override\r\n        public String getToolTipText(MouseEvent evt) {\r\n            // Get item index\r\n            int index = locationToIndex(evt.getPoint());\r\n            // Get item\r\n            Object item = getModel().getElementAt(index);\r\n            JComponent c = ((JComponent) (getCellRenderer().getListCellRendererComponent(this, item, index, false, false)));\r\n            // Return the tool tip text\r\n            return c.getToolTipText();\r\n        }\r\n    };\r\n    swatchesList.setLayoutOrientation(JList.VERTICAL_WRAP);\r\n    swatchesList.setVisibleRowCount(5);\r\n    scrollPane.setViewportView(swatchesList);\r\n    harmonicWheel.setColorSystem(new HSLRGBColorSystem());\r\n    ColorSliderModel m = harmonicWheel.getModel();\r\n    scrollPane.setPreferredSize(new Dimension(100, 100));\r\n    swatchesList.setModel(((ListModel) (harmonicWheel.getHarmonicColorModel())));\r\n    swatchesList.setCellRenderer(new ColorListCellRenderer());\r\n    harmonicWheel.getHarmonicColorModel().addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n        }\r\n    });\r\n    sliderModel = new DefaultColorSliderModel(harmonicWheel.getHarmonicColorModel().getColorSystem());\r\n    sliderModel.configureSlider(1, saturationSlider);\r\n    harmonicWheel.getHarmonicColorModel().addListDataListener(new ListDataListener() {\r\n        public void intervalAdded(ListDataEvent e) {\r\n        }\r\n\r\n        public void intervalRemoved(ListDataEvent e) {\r\n        }\r\n\r\n        public void contentsChanged(ListDataEvent e) {\r\n            (adjusting)++;\r\n            HarmonicColorModel hcm = harmonicWheel.getHarmonicColorModel();\r\n            CompositeColor cc = hcm.get(e.getIndex0());\r\n            if (cc != null) {\r\n                sliderModel.setCompositeColor(cc);\r\n            }\r\n            (adjusting)--;\r\n        }\r\n    });\r\n    harmonicWheel.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == (JHarmonicColorWheel.SELECTED_INDEX_PROPERTY)) {\r\n                (adjusting)++;\r\n                int index = harmonicWheel.getSelectedIndex();\r\n                HarmonicColorModel hcm = harmonicWheel.getHarmonicColorModel();\r\n                if (index != (-1)) {\r\n                    sliderModel.setCompositeColor(hcm.get(index));\r\n                }\r\n                (adjusting)--;\r\n            }\r\n        }\r\n    });\r\n    sliderModel.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            if (((adjusting)++) == 0) {\r\n                HarmonicColorModel hcm = harmonicWheel.getHarmonicColorModel();\r\n                if (!(hcm.isAdjusting())) {\r\n                    int index = harmonicWheel.getSelectedIndex();\r\n                    if (index != (-1)) {\r\n                        CompositeColor cc = sliderModel.getCompositeColor();\r\n                        CompositeColor oldValue = hcm.get(index);\r\n                        CompositeColor newValue = new CompositeColor(oldValue.getSystem(), oldValue.getComponent(0), cc.getComponent(1), oldValue.getComponent(2));\r\n                        hcm.set(index, newValue);\r\n                    }\r\n                }\r\n            }\r\n            (adjusting)--;\r\n        }\r\n    });\r\n    harmonicWheel.setSelectedIndex(0);\r\n    harmonicWheel.getHarmonicColorModel().setSize(25);\r\n    // updateRules();\r\n    HarmonicColorModel h = harmonicWheel.getHarmonicColorModel();\r\n    ColorSystem sys = h.getColorSystem();\r\n    h.set(0, new CompositeColor(sys, new Color(0, 19, 148)));\r\n    h.set(1, new CompositeColor(sys, new Color(218, 37, 26)));\r\n    h.set(2, new CompositeColor(sys, new Color(70, 148, 27)));\r\n    h.set(3, new CompositeColor(sys, new Color(174, 46, 248)));\r\n    h.set(4, new CompositeColor(sys, new Color(255, 252, 76)));\r\n    h.set(5, new CompositeColor(sys, new Color(234, 155, 65)));\r\n    h.set(6, new CompositeColor(sys, new Color(51, 51, 51)));\r\n    h.set(7, new CompositeColor(sys, new Color(153, 153, 153)));\r\n}'),(4446,'initComponents()','org.jhotdraw.samples.color.JMixer.initComponents()','450','org.jhotdraw.samples.color.JMixer','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    hueGroup = new ButtonGroup();\r\n    sysGroup = new ButtonGroup();\r\n    scrollPane = new JScrollPane();\r\n    disclosureButton = new JToggleButton();\r\n    sysRGBToggle = new JToggleButton();\r\n    sysRYBToggle = new JToggleButton();\r\n    presetCombo = new JComboBox();\r\n    mixerPanel = new JPanel();\r\n    harmonicWheel = new JHarmonicColorWheel();\r\n    customHueRadio = new JRadioButton();\r\n    customHueLabel = new JLabel();\r\n    customHueField = new JLifeFormattedTextField();\r\n    customHueLabel2 = new JLabel();\r\n    analogousRadio = new JRadioButton();\r\n    analogousLabel1 = new JLabel();\r\n    analogousField = new JLifeFormattedTextField();\r\n    analogousLabel2 = new JLabel();\r\n    primaryRadio = new JRadioButton();\r\n    primaryLabel1 = new JLabel();\r\n    primaryField = new JLifeFormattedTextField();\r\n    primaryLabel2 = new JLabel();\r\n    clashRadio = new JRadioButton();\r\n    clashLabel1 = new JLabel();\r\n    clashField = new JLifeFormattedTextField();\r\n    clashLabel2 = new JLabel();\r\n    triadRadio = new JRadioButton();\r\n    triadLabel1 = new JLabel();\r\n    triadField = new JLifeFormattedTextField();\r\n    triadLabel2 = new JLabel();\r\n    splitComplementaryRadio = new JRadioButton();\r\n    splitComplementaryLabel1 = new JLabel();\r\n    splitField = new JLifeFormattedTextField();\r\n    splitComplementaryLabel2 = new JLabel();\r\n    complementaryRadio = new JRadioButton();\r\n    complementaryLabel1 = new JLabel();\r\n    complementaryField = new JLifeFormattedTextField();\r\n    complementaryLabel2 = new JLabel();\r\n    achromaticCheck = new JCheckBox();\r\n    achromaticLabel1 = new JLabel();\r\n    achromaticField = new JLifeFormattedTextField();\r\n    achromaticLabel2 = new JLabel();\r\n    monochromaticCheck = new JCheckBox();\r\n    monochromaticLabel1 = new JLabel();\r\n    monochromaticField = new JLifeFormattedTextField();\r\n    monochromaticLabel2 = new JLabel();\r\n    saturationSlider = new JSlider();\r\n    springPanel = new JPanel();\r\n    setLayout(new GridBagLayout());\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 1.0;\r\n    gridBagConstraints.weighty = 0.5;\r\n    add(scrollPane, gridBagConstraints);\r\n    disclosureButton.setSelected(true);\r\n    disclosureButton.setText(\"Show Mixer\");\r\n    disclosureButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            mixerDisclosurePerformed(evt);\r\n        }\r\n    });\r\n    add(disclosureButton, new GridBagConstraints());\r\n    sysGroup.add(sysRGBToggle);\r\n    sysRGBToggle.setSelected(true);\r\n    sysRGBToggle.setText(\"RGB\");\r\n    sysRGBToggle.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            systemChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridy = 1;\r\n    add(sysRGBToggle, gridBagConstraints);\r\n    sysGroup.add(sysRYBToggle);\r\n    sysRYBToggle.setText(\"RYB\");\r\n    sysRYBToggle.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            systemChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridy = 1;\r\n    add(sysRYBToggle, gridBagConstraints);\r\n    presetCombo.setEditable(true);\r\n    presetCombo.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            presetPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.anchor = GridBagConstraints.EAST;\r\n    add(presetCombo, gridBagConstraints);\r\n    mixerPanel.setLayout(new GridBagLayout());\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 0;\r\n    gridBagConstraints.gridheight = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 1.0;\r\n    gridBagConstraints.weighty = 1.0;\r\n    mixerPanel.add(harmonicWheel, gridBagConstraints);\r\n    hueGroup.add(customHueRadio);\r\n    customHueRadio.setText(\"Custom\");\r\n    customHueRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(customHueRadio, gridBagConstraints);\r\n    customHueLabel.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(customHueLabel, gridBagConstraints);\r\n    customHueField.setColumns(3);\r\n    customHueField.setHorizontalAlignment(JTextField.RIGHT);\r\n    customHueField.setText(\"30\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(customHueField, gridBagConstraints);\r\n    customHueLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    customHueLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(customHueLabel2, gridBagConstraints);\r\n    hueGroup.add(analogousRadio);\r\n    analogousRadio.setSelected(true);\r\n    analogousRadio.setText(\"Analogous\");\r\n    analogousRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(analogousRadio, gridBagConstraints);\r\n    analogousLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(analogousLabel1, gridBagConstraints);\r\n    analogousField.setColumns(3);\r\n    analogousField.setEditable(false);\r\n    analogousField.setHorizontalAlignment(JTextField.RIGHT);\r\n    analogousField.setText(\"30\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(analogousField, gridBagConstraints);\r\n    analogousLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    analogousLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(analogousLabel2, gridBagConstraints);\r\n    hueGroup.add(primaryRadio);\r\n    primaryRadio.setText(\"Primary\");\r\n    primaryRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(primaryRadio, gridBagConstraints);\r\n    primaryLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(primaryLabel1, gridBagConstraints);\r\n    primaryField.setColumns(3);\r\n    primaryField.setEditable(false);\r\n    primaryField.setHorizontalAlignment(JTextField.RIGHT);\r\n    primaryField.setText(\"120\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(primaryField, gridBagConstraints);\r\n    primaryLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    primaryLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(primaryLabel2, gridBagConstraints);\r\n    hueGroup.add(clashRadio);\r\n    clashRadio.setText(\"Clash\");\r\n    clashRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(clashRadio, gridBagConstraints);\r\n    clashLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(clashLabel1, gridBagConstraints);\r\n    clashField.setColumns(3);\r\n    clashField.setEditable(false);\r\n    clashField.setHorizontalAlignment(JTextField.RIGHT);\r\n    clashField.setText(\"90\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(clashField, gridBagConstraints);\r\n    clashLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    clashLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(clashLabel2, gridBagConstraints);\r\n    hueGroup.add(triadRadio);\r\n    triadRadio.setText(\"Triad\");\r\n    triadRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(triadRadio, gridBagConstraints);\r\n    triadLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(triadLabel1, gridBagConstraints);\r\n    triadField.setColumns(3);\r\n    triadField.setEditable(false);\r\n    triadField.setHorizontalAlignment(JTextField.RIGHT);\r\n    triadField.setText(\"120\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(triadField, gridBagConstraints);\r\n    triadLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    triadLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(triadLabel2, gridBagConstraints);\r\n    hueGroup.add(splitComplementaryRadio);\r\n    splitComplementaryRadio.setText(\"Split Complementary\");\r\n    splitComplementaryRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(splitComplementaryRadio, gridBagConstraints);\r\n    splitComplementaryLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(splitComplementaryLabel1, gridBagConstraints);\r\n    splitField.setColumns(3);\r\n    splitField.setEditable(false);\r\n    splitField.setHorizontalAlignment(JTextField.RIGHT);\r\n    splitField.setText(\"150\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(splitField, gridBagConstraints);\r\n    splitComplementaryLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    splitComplementaryLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(splitComplementaryLabel2, gridBagConstraints);\r\n    hueGroup.add(complementaryRadio);\r\n    complementaryRadio.setText(\"Complementary\");\r\n    complementaryRadio.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(complementaryRadio, gridBagConstraints);\r\n    complementaryLabel1.setText(\"+\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(complementaryLabel1, gridBagConstraints);\r\n    complementaryField.setColumns(3);\r\n    complementaryField.setEditable(false);\r\n    complementaryField.setHorizontalAlignment(JTextField.RIGHT);\r\n    complementaryField.setText(\"180\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(complementaryField, gridBagConstraints);\r\n    complementaryLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    complementaryLabel2.setText(\"°\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(complementaryLabel2, gridBagConstraints);\r\n    achromaticCheck.setText(\"Achromatic\");\r\n    achromaticCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(achromaticCheck, gridBagConstraints);\r\n    achromaticLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(achromaticLabel1, gridBagConstraints);\r\n    achromaticField.setColumns(3);\r\n    achromaticField.setHorizontalAlignment(JTextField.RIGHT);\r\n    achromaticField.setText(\"10\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(achromaticField, gridBagConstraints);\r\n    achromaticLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    achromaticLabel2.setText(\"%\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(achromaticLabel2, gridBagConstraints);\r\n    monochromaticCheck.setSelected(true);\r\n    monochromaticCheck.setText(\"Monochromatic\");\r\n    monochromaticCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ruleChangePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(monochromaticCheck, gridBagConstraints);\r\n    monochromaticLabel1.setText(\"±\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(monochromaticLabel1, gridBagConstraints);\r\n    monochromaticField.setColumns(3);\r\n    monochromaticField.setHorizontalAlignment(JTextField.RIGHT);\r\n    monochromaticField.setText(\"10\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(monochromaticField, gridBagConstraints);\r\n    monochromaticLabel2.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    monochromaticLabel2.setText(\"%\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 5;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n    mixerPanel.add(monochromaticLabel2, gridBagConstraints);\r\n    saturationSlider.setOrientation(JSlider.VERTICAL);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 1;\r\n    gridBagConstraints.gridy = 0;\r\n    gridBagConstraints.gridheight = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.fill = GridBagConstraints.VERTICAL;\r\n    mixerPanel.add(saturationSlider, gridBagConstraints);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.weighty = 1.0;\r\n    mixerPanel.add(springPanel, gridBagConstraints);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 1.0;\r\n    gridBagConstraints.weighty = 0.5;\r\n    add(mixerPanel, gridBagConstraints);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4447,'main(java.lang.String[])','org.jhotdraw.samples.color.JMixer.main(java.lang.String[])','450','org.jhotdraw.samples.color.JMixer','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"Mixer\");\r\n            f.add(new JMixer());\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.pack();\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4448,'mixerDisclosurePerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.color.JMixer.mixerDisclosurePerformed(java.awt.event.ActionEvent)','450','org.jhotdraw.samples.color.JMixer','private void mixerDisclosurePerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_mixerDisclosurePerformed\r\n    mixerPanel.setVisible(disclosureButton.isSelected());\r\n    mixerPanel.getParent().validate();\r\n}// GEN-LAST:event_mixerDisclosurePerformed\r\n'),(4449,'presetPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.color.JMixer.presetPerformed(java.awt.event.ActionEvent)','450','org.jhotdraw.samples.color.JMixer','private void presetPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_presetPerformed\r\n    Object obj = presetCombo.getSelectedItem();\r\n    if (obj instanceof JMixer.Preset) {\r\n        JMixer.Preset preset = ((JMixer.Preset) (obj));\r\n        HarmonicColorModel m = harmonicWheel.getHarmonicColorModel();\r\n        m.set(m.getBase(), preset.getCompositeColor());\r\n    }\r\n}// GEN-LAST:event_presetPerformed\r\n'),(4450,'ruleChangePerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.color.JMixer.ruleChangePerformed(java.awt.event.ActionEvent)','450','org.jhotdraw.samples.color.JMixer','private void ruleChangePerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_ruleChangePerformed\r\n    updateRules();\r\n}// GEN-LAST:event_ruleChangePerformed\r\n'),(4451,'systemChangePerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.color.JMixer.systemChangePerformed(java.awt.event.ActionEvent)','450','org.jhotdraw.samples.color.JMixer','private void systemChangePerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_systemChangePerformed\r\n    HarmonicColorModel m = harmonicWheel.getHarmonicColorModel();\r\n    ColorSystem sys;\r\n    if (sysRGBToggle.isSelected()) {\r\n        sys = new HSLRGBColorSystem();\r\n    } else {\r\n        sys = new HSLRYBColorSystem();\r\n    }\r\n    m.setColorSystem(sys);\r\n    sliderModel.setColorSystem(sys);\r\n    sliderModel.configureSlider(1, saturationSlider);\r\n    if ((harmonicWheel.getSelectedIndex()) != (-1)) {\r\n        sliderModel.setCompositeColor(m.get(harmonicWheel.getSelectedIndex()));\r\n    }\r\n}// GEN-LAST:event_systemChangePerformed\r\n'),(4452,'updateRules()','org.jhotdraw.samples.color.JMixer.updateRules()','450','org.jhotdraw.samples.color.JMixer','private void updateRules() {\r\n    HarmonicColorModel m = harmonicWheel.getHarmonicColorModel();\r\n    m.removeAllRules();\r\n    for (int i = 1, n = m.getSize(); i < n; i++) {\r\n        m.set(i, null);\r\n    }\r\n    if (customHueRadio.isSelected()) {\r\n    } else\r\n        if (analogousRadio.isSelected()) {\r\n            m.addRule(new SimpleHarmonicRule(0, (30.0F / 360.0F), 0, 5));\r\n            m.addRule(new SimpleHarmonicRule(0, ((-30.0F) / 360.0F), 0, 10));\r\n        } else\r\n            if (primaryRadio.isSelected()) {\r\n                m.addRule(new SimpleHarmonicRule(0, (120.0F / 360.0F), 0, 5));\r\n                m.addRule(new SimpleHarmonicRule(0, ((-120.0F) / 360.0F), 0, 10));\r\n            } else\r\n                if (clashRadio.isSelected()) {\r\n                    m.addRule(new SimpleHarmonicRule(0, (90.0F / 360.0F), 0, 5));\r\n                    m.addRule(new SimpleHarmonicRule(0, ((-90.0F) / 360.0F), 0, 10));\r\n                } else\r\n                    if (triadRadio.isSelected()) {\r\n                        m.addRule(new SimpleHarmonicRule(0, (120.0F / 360.0F), 0, 5));\r\n                        m.addRule(new SimpleHarmonicRule(0, ((-120.0F) / 360.0F), 0, 10));\r\n                    } else\r\n                        if (splitComplementaryRadio.isSelected()) {\r\n                            m.addRule(new SimpleHarmonicRule(0, (150.0F / 360.0F), 0, 5));\r\n                            m.addRule(new SimpleHarmonicRule(0, ((-150.0F) / 360.0F), 0, 10));\r\n                        } else\r\n                            if (complementaryRadio.isSelected()) {\r\n                                m.addRule(new SimpleHarmonicRule(0, (180.0F / 360.0F), 0, 5));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /* if (achromaticCheck.isSelected()) {\n    m.addRule(new SimpleHarmonicRule(1, -1f / 12f, 0, 3, 4));\n    m.addRule(new SimpleHarmonicRule(1, -1f / 12f, 5, 8, 9));\n    m.addRule(new SimpleHarmonicRule(1, -1f / 12f, 10, 13, 14));\n    }\n     */\r\n    if (monochromaticCheck.isSelected()) {\r\n        /* m.addRule(new SimpleHarmonicRule(2, 1f/12f, 0, 1, 2));\n        m.addRule(new SimpleHarmonicRule(2, 1f/12f, 5, 6, 7));\n        m.addRule(new SimpleHarmonicRule(2, 1f/12f, 10, 11, 12));\n         */\r\n        m.addRule(new SimpleHarmonicRule(2, (1.0F / 12.0F), 0, 1, 2));\r\n        m.addRule(new SimpleHarmonicRule(2, (1.0F / 12.0F), 5, 6, 7));\r\n        m.addRule(new SimpleHarmonicRule(2, (1.0F / 12.0F), 10, 11, 12));\r\n        m.addRule(new SimpleHarmonicRule(2, ((-1.0F) / 12.0F), 0, 3, 4));\r\n        m.addRule(new SimpleHarmonicRule(2, ((-1.0F) / 12.0F), 5, 8, 9));\r\n        m.addRule(new SimpleHarmonicRule(2, ((-1.0F) / 12.0F), 10, 13, 14));\r\n    }\r\n    m.applyRules();\r\n}'),(4453,'-init-(java.lang.String,int)','org.jhotdraw.samples.color.JMixer$Preset.-init-(java.lang.String,int)','449','org.jhotdraw.samples.color.JMixer$Preset','public Preset(String name, int index) {\r\n    this.name = name;\r\n    this.index = index;\r\n}'),(4454,'getCompositeColor()','org.jhotdraw.samples.color.JMixer$Preset.getCompositeColor()','449','org.jhotdraw.samples.color.JMixer$Preset','public CompositeColor getCompositeColor() {\r\n    return new CompositeColor(sliderModel.getColorSystem(), (((index) / 8) / 12.0F), 1.0F, ((((index) % 8) + 2) / 12.0F));\r\n}'),(4455,'toString()','org.jhotdraw.samples.color.JMixer$Preset.toString()','449','org.jhotdraw.samples.color.JMixer$Preset','public String toString() {\r\n    return name;\r\n}'),(4456,'-init-()','org.jhotdraw.samples.color.WheelsAndSlidersMain.-init-()','452','org.jhotdraw.samples.color.WheelsAndSlidersMain','Handler() {\r\n}'),(4457,'createColorWheelChooser(org.jhotdraw.color.ColorSystem)','org.jhotdraw.samples.color.WheelsAndSlidersMain.createColorWheelChooser(org.jhotdraw.color.ColorSystem)','452','org.jhotdraw.samples.color.WheelsAndSlidersMain','private JPanel createColorWheelChooser(ColorSystem sys) {\r\n    return createColorWheelChooser(sys, 0, 1, 2);\r\n}'),(4458,'createColorWheelChooser(org.jhotdraw.color.ColorSystem,int,int,int)','org.jhotdraw.samples.color.WheelsAndSlidersMain.createColorWheelChooser(org.jhotdraw.color.ColorSystem,int,int,int)','452','org.jhotdraw.samples.color.WheelsAndSlidersMain','private JPanel createColorWheelChooser(ColorSystem sys, int angularIndex, int radialIndex, int verticalIndex) {\r\n    JPanel p = new JPanel(new BorderLayout());\r\n    DefaultColorSliderModel m = new DefaultColorSliderModel(sys);\r\n    models.add(m);\r\n    m.addChangeListener(handler);\r\n    JColorWheel w = new JColorWheel();\r\n    w.setAngularComponentIndex(angularIndex);\r\n    w.setRadialComponentIndex(radialIndex);\r\n    w.setVerticalComponentIndex(verticalIndex);\r\n    w.setModel(m);\r\n    JSlider s = new JSlider(JSlider.VERTICAL);\r\n    m.configureSlider(verticalIndex, s);\r\n    p.add(w, BorderLayout.CENTER);\r\n    p.add(s, BorderLayout.EAST);\r\n    return p;\r\n}'),(4459,'createSliderChooser(org.jhotdraw.color.ColorSystem)','org.jhotdraw.samples.color.WheelsAndSlidersMain.createSliderChooser(org.jhotdraw.color.ColorSystem)','452','org.jhotdraw.samples.color.WheelsAndSlidersMain','private JPanel createSliderChooser(ColorSystem sys) {\r\n    JPanel p = new JPanel(new GridLayout(0, 1));\r\n    DefaultColorSliderModel m = new DefaultColorSliderModel(sys);\r\n    models.add(m);\r\n    m.addChangeListener(handler);\r\n    for (int i = 0; i < (m.getComponentCount()); i++) {\r\n        JSlider s = new JSlider(JSlider.HORIZONTAL);\r\n        m.configureSlider(i, s);\r\n        p.add(s);\r\n    }\r\n    return p;\r\n}'),(4460,'initComponents()','org.jhotdraw.samples.color.WheelsAndSlidersMain.initComponents()','452','org.jhotdraw.samples.color.WheelsAndSlidersMain','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    chooserPanel = new JPanel();\r\n    previewLabel = new JLabel();\r\n    setLayout(new BorderLayout());\r\n    chooserPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n    chooserPanel.setLayout(new GridLayout(2, 0, 10, 10));\r\n    add(chooserPanel, BorderLayout.CENTER);\r\n    previewLabel.setText(\"Color\");\r\n    add(previewLabel, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4461,'main(java.lang.String[])','org.jhotdraw.samples.color.WheelsAndSlidersMain.main(java.lang.String[])','452','org.jhotdraw.samples.color.WheelsAndSlidersMain','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"Wheel\");\r\n            f.add(new WheelsAndSlidersMain());\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.pack();\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4462,'-init-()','org.jhotdraw.samples.color.WheelsAndSlidersMain$Handler.-init-()','451','org.jhotdraw.samples.color.WheelsAndSlidersMain$Handler','Handler() {\r\n}'),(4463,'stateChanged(javax.swing.event.ChangeEvent)','org.jhotdraw.samples.color.WheelsAndSlidersMain$Handler.stateChanged(javax.swing.event.ChangeEvent)','451','org.jhotdraw.samples.color.WheelsAndSlidersMain$Handler','public void stateChanged(ChangeEvent e) {\r\n    if (((adjusting)++) == 0) {\r\n        ColorSliderModel m = ((ColorSliderModel) (e.getSource()));\r\n        color = m.getColor();\r\n        previewLabel.setBackground(color);\r\n        for (ColorSliderModel c : models) {\r\n            if (c != m) {\r\n                c.setColor(color);\r\n            }\r\n        }\r\n    }\r\n    (adjusting)--;\r\n}'),(4464,'-init-()','org.jhotdraw.samples.draw.DrawApplet.-init-()','453','org.jhotdraw.samples.draw.DrawApplet','DrawApplet() {\r\n}'),(4465,'getAppletInfo()','org.jhotdraw.samples.draw.DrawApplet.getAppletInfo()','453','org.jhotdraw.samples.draw.DrawApplet','public String getAppletInfo() {\r\n    return (((((DrawApplet.NAME) + \"\nVersion \") + (getVersion())) + \"\n\nCopyright 1996-2009 (c) by the original authors of JHotDraw and all its contributors\") + \"\nThis software is licensed under LGPL or\") + \"\nCreative Commons 3.0 BY\";\r\n}'),(4466,'getData()','org.jhotdraw.samples.draw.DrawApplet.getData()','453','org.jhotdraw.samples.draw.DrawApplet','public String getData() {\r\n    CharArrayWriter out = new CharArrayWriter();\r\n    try {\r\n        NanoXMLDOMOutput domo = new NanoXMLDOMOutput(new DrawFigureFactory());\r\n        domo.writeObject(getDrawing());\r\n        domo.save(out);\r\n    } catch (IOException e) {\r\n        TextFigure tf = new TextFigure();\r\n        tf.setText(e.getMessage());\r\n        tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n        getDrawing().add(tf);\r\n        e.printStackTrace();\r\n    } finally {\r\n        if (out != null)\r\n            out.close();\r\n\r\n    }\r\n    return out.toString();\r\n}'),(4467,'getDrawing()','org.jhotdraw.samples.draw.DrawApplet.getDrawing()','453','org.jhotdraw.samples.draw.DrawApplet','private Drawing getDrawing() {\r\n    return drawingPanel.getDrawing();\r\n}'),(4468,'getParameter(java.lang.String)','org.jhotdraw.samples.draw.DrawApplet.getParameter(java.lang.String)','453','org.jhotdraw.samples.draw.DrawApplet','/**\r\n * We override getParameter() to make it work even if we have no Applet\r\n * context.\r\n */\r\npublic String getParameter(String name) {\r\n    try {\r\n        return super.getParameter(name);\r\n    } catch (NullPointerException e) {\r\n        return null;\r\n    }\r\n}'),(4469,'getParameterInfo()','org.jhotdraw.samples.draw.DrawApplet.getParameterInfo()','453','org.jhotdraw.samples.draw.DrawApplet','public String[][] getParameterInfo() {\r\n    return new String[][]{ new String[]{ \"data\", \"String\", \"the data to be displayed by this applet.\" }, new String[]{ \"datafile\", \"URL\", \"an URL to a file containing the data to be displayed by this applet.\" } };\r\n}'),(4470,'getVersion()','org.jhotdraw.samples.draw.DrawApplet.getVersion()','453','org.jhotdraw.samples.draw.DrawApplet','protected String getVersion() {\r\n    return DrawApplet.class.getPackage().getImplementationVersion();\r\n}'),(4471,'init()','org.jhotdraw.samples.draw.DrawApplet.init()','453','org.jhotdraw.samples.draw.DrawApplet','/**\r\n * Initializes the applet DrawApplet\r\n */\r\npublic void init() {\r\n    // Set look and feel\r\n    // -----------------\r\n    try {\r\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n    } catch (Throwable e) {\r\n        // Do nothing.\r\n        // If we cant set the desired look and feel, UIManager does\r\n        // automaticaly the right thing for us.\r\n    }\r\n    // Display copyright info while we are loading the data\r\n    // ----------------------------------------------------\r\n    Container c = getContentPane();\r\n    c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));\r\n    String[] labels = getAppletInfo().split(\"\n\");// Strings.split(getAppletInfo(), \n);\r\n\r\n    for (int i = 0; i < (labels.length); i++) {\r\n        c.add(new JLabel(((labels[i].length()) == 0 ? \" \" : labels[i])));\r\n    }\r\n    // We load the data using a worker thread\r\n    // --------------------------------------\r\n    new Worker() {\r\n        public Object construct() {\r\n            Object result;\r\n            try {\r\n                if ((getParameter(\"data\")) != null) {\r\n                    NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), new StringReader(getParameter(\"data\")));\r\n                    result = domi.readObject(0);\r\n                } else\r\n                    if ((getParameter(\"datafile\")) != null) {\r\n                        InputStream in = null;\r\n                        try {\r\n                            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n                            in = url.openConnection().getInputStream();\r\n                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), in);\r\n                            result = domi.readObject(0);\r\n                        } finally {\r\n                            if (in != null)\r\n                                in.close();\r\n\r\n                        }\r\n                    } else {\r\n                        result = null;\r\n                    }\r\n\r\n            } catch (Throwable t) {\r\n                result = t;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            if (value instanceof Throwable) {\r\n                ((Throwable) (value)).printStackTrace();\r\n            }\r\n            Container c = getContentPane();\r\n            c.setLayout(new BorderLayout());\r\n            c.removeAll();\r\n            c.add((drawingPanel = new DrawingPanel()));\r\n            Object result = getValue();\r\n            initComponents();\r\n            if (result != null) {\r\n                if (result instanceof Drawing) {\r\n                    Drawing drawing = ((Drawing) (result));\r\n                    setDrawing(drawing);\r\n                } else\r\n                    if (result instanceof Throwable) {\r\n                        getDrawing().add(new TextFigure(result.toString()));\r\n                        ((Throwable) (result)).printStackTrace();\r\n                    }\r\n\r\n            }\r\n            initDrawing(getDrawing());\r\n            c.validate();\r\n        }\r\n    }.start();\r\n}'),(4472,'initComponents()','org.jhotdraw.samples.draw.DrawApplet.initComponents()','453','org.jhotdraw.samples.draw.DrawApplet','/**\r\n * This method is called from within the init() method to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    toolButtonGroup = new ButtonGroup();\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4473,'initDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.draw.DrawApplet.initDrawing(org.jhotdraw.draw.Drawing)','453','org.jhotdraw.samples.draw.DrawApplet','/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initDrawing(Drawing d) {\r\n    d.setInputFormats(((List<InputFormat>) (Collections.EMPTY_LIST)));\r\n    d.setOutputFormats(((List<OutputFormat>) (Collections.EMPTY_LIST)));\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new DrawFigureFactory());\r\n    d.addInputFormat(ioFormat);\r\n    d.addInputFormat(new ImageInputFormat(new ImageFigure()));\r\n    d.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    d.addOutputFormat(ioFormat);\r\n    d.addOutputFormat(new ImageOutputFormat());\r\n}'),(4474,'main(java.lang.String[])','org.jhotdraw.samples.draw.DrawApplet.main(java.lang.String[])','453','org.jhotdraw.samples.draw.DrawApplet','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"JHotDraw Draw Applet\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            DrawApplet a = new DrawApplet();\r\n            f.getContentPane().add(a);\r\n            a.init();\r\n            f.setSize(500, 400);\r\n            f.setVisible(true);\r\n            a.start();\r\n        }\r\n    });\r\n}'),(4475,'setData(java.lang.String)','org.jhotdraw.samples.draw.DrawApplet.setData(java.lang.String)','453','org.jhotdraw.samples.draw.DrawApplet','public void setData(String text) {\r\n    if ((text != null) && ((text.length()) > 0)) {\r\n        StringReader in = new StringReader(text);\r\n        try {\r\n            NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), in);\r\n            setDrawing(((Drawing) (domi.readObject(0))));\r\n        } catch (Throwable e) {\r\n            getDrawing().removeAllChildren();\r\n            TextFigure tf = new TextFigure();\r\n            tf.setText(e.getMessage());\r\n            tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            getDrawing().add(tf);\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (in != null)\r\n                in.close();\r\n\r\n        }\r\n    }\r\n}'),(4476,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.draw.DrawApplet.setDrawing(org.jhotdraw.draw.Drawing)','453','org.jhotdraw.samples.draw.DrawApplet','private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(4477,'-init-()','org.jhotdraw.samples.draw.DrawApplicationModel.-init-()','454','org.jhotdraw.samples.draw.DrawApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawApplicationModel() {\r\n}'),(4478,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.draw.DrawApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','454','org.jhotdraw.samples.draw.DrawApplicationModel','private void addCreationButtonsTo(JToolBar tb, DrawingEditor editor) {\r\n    addDefaultCreationButtonsTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}'),(4479,'addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)','org.jhotdraw.samples.draw.DrawApplicationModel.addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)','454','org.jhotdraw.samples.draw.DrawApplicationModel','public void addDefaultCreationButtonsTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, drawingActions, selectionActions);\r\n    tb.addSeparator();\r\n    AbstractAttributedFigure af;\r\n    CreationTool ct;\r\n    ConnectionTool cnt;\r\n    ConnectionFigure lc;\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RoundRectangleFigure()), \"edit.createRoundRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new EllipseFigure()), \"edit.createEllipse\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new DiamondFigure()), \"edit.createDiamond\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TriangleFigure()), \"edit.createTriangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new LineFigure()), \"edit.createLine\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (ct = new CreationTool(new LineFigure())), \"edit.createArrow\", labels);\r\n    af = ((AbstractAttributedFigure) (ct.getPrototype()));\r\n    AttributeKeys.END_DECORATION.basicSet(af, new ArrowTip(0.35, 12, 11.3));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure()), \"edit.createLineConnection\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (cnt = new ConnectionTool(new LineConnectionFigure())), \"edit.createElbowConnection\", labels);\r\n    lc = cnt.getPrototype();\r\n    lc.setLiner(new ElbowLiner());\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure()), \"edit.createScribble\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure(true)), \"edit.createPolygon\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new TextFigure()), \"edit.createText\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new ImageTool(new ImageFigure()), \"edit.createImage\", labels);\r\n}'),(4480,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.draw.DrawApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','454','org.jhotdraw.samples.draw.DrawApplicationModel','/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    DrawView p = ((DrawView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(4481,'getSharedEditor()','org.jhotdraw.samples.draw.DrawApplicationModel.getSharedEditor()','454','org.jhotdraw.samples.draw.DrawApplicationModel','public DefaultDrawingEditor getSharedEditor() {\r\n    if ((sharedEditor) == null) {\r\n        sharedEditor = new DefaultDrawingEditor();\r\n    }\r\n    return sharedEditor;\r\n}'),(4482,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.draw.DrawApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','454','org.jhotdraw.samples.draw.DrawApplicationModel','public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((DrawView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(4483,'-init-()','org.jhotdraw.samples.draw.DrawFigureFactory.-init-()','455','org.jhotdraw.samples.draw.DrawFigureFactory','/**\r\n * Creates a new instance.\r\n */\r\npublic DrawFigureFactory() {\r\n    for (Object[] o : DrawFigureFactory.classTagArray) {\r\n        addStorableClass(((String) (o[1])), ((Class) (o[0])));\r\n    }\r\n    for (Object[] o : DrawFigureFactory.enumTagArray) {\r\n        addEnumClass(((String) (o[1])), ((Class) (o[0])));\r\n    }\r\n}'),(4484,'-init-()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.-init-()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','DrawLiveConnectApplet() {\r\n}'),(4485,'getAppletInfo()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.getAppletInfo()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','public String getAppletInfo() {\r\n    return (((((DrawLiveConnectApplet.NAME) + \"\nVersion \") + (DrawLiveConnectApplet.VERSION)) + \"\n\nCopyright 1996-2008 (c) by the authors of JHotDraw\") + \"\nThis software is licensed under LGPL or\") + \"\nCreative Commons 3.0 BY\";\r\n}'),(4486,'getData()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.getData()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','public String getData() {\r\n    CharArrayWriter out = new CharArrayWriter();\r\n    try {\r\n        NanoXMLDOMOutput domo = new NanoXMLDOMOutput(new DrawFigureFactory());\r\n        domo.writeObject(getDrawing());\r\n        domo.save(out);\r\n    } catch (IOException e) {\r\n        TextFigure tf = new TextFigure();\r\n        tf.setText(e.getMessage());\r\n        tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n        getDrawing().add(tf);\r\n        e.printStackTrace();\r\n    } finally {\r\n        if (out != null)\r\n            out.close();\r\n\r\n    }\r\n    return out.toString();\r\n}'),(4487,'getDrawing()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.getDrawing()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','private Drawing getDrawing() {\r\n    return drawingPanel.getDrawing();\r\n}'),(4488,'getParameterInfo()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.getParameterInfo()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','public String[][] getParameterInfo() {\r\n    return new String[][]{ new String[]{ \"data\", \"String\", \"the data to be displayed by this applet.\" }, new String[]{ \"datafile\", \"URL\", \"an URL to a file containing the data to be displayed by this applet.\" }, new String[]{ \"dataread\", \"function()\", \"the name of a JavaScript function which can be used to read the data.\" }, new String[]{ \"datawrite\", \"function()\", \"the name of a JavaScript function which can be used to write the data.\" } };\r\n}'),(4489,'init()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.init()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','/**\r\n * Initializes the applet DrawApplet\r\n */\r\npublic void init() {\r\n    // Set look and feel\r\n    // -----------------\r\n    try {\r\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n    } catch (Throwable e) {\r\n        // Do nothing.\r\n        // If we cant set the desired look and feel, UIManager does\r\n        // automaticaly the right thing for us.\r\n    }\r\n    // Display copyright info while we are loading the data\r\n    // ----------------------------------------------------\r\n    Container c = getContentPane();\r\n    c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));\r\n    String[] lines = getAppletInfo().split(\"\n\");// Strings.split(getAppletInfo(), \n);\r\n\r\n    for (int i = 0; i < (lines.length); i++) {\r\n        c.add(new JLabel(lines[i]));\r\n    }\r\n    // We load the data using a worker thread\r\n    // --------------------------------------\r\n    new Worker() {\r\n        public Object construct() {\r\n            Object result;\r\n            try {\r\n                if (((getParameter(\"data\")) != null) && ((getParameter(\"data\").length()) > 0)) {\r\n                    NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), new StringReader(getParameter(\"data\")));\r\n                    result = domi.readObject(0);\r\n                } else\r\n                    if ((getParameter(\"datafile\")) != null) {\r\n                        InputStream in = null;\r\n                        try {\r\n                            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n                            in = url.openConnection().getInputStream();\r\n                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), in);\r\n                            result = domi.readObject(0);\r\n                        } finally {\r\n                            if (in != null)\r\n                                in.close();\r\n\r\n                        }\r\n                    } else {\r\n                        result = null;\r\n                    }\r\n\r\n            } catch (Throwable t) {\r\n                result = t;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public void finished(Object result) {\r\n            Container c = getContentPane();\r\n            c.setLayout(new BorderLayout());\r\n            c.removeAll();\r\n            initComponents();\r\n            if (result != null) {\r\n                if (result instanceof Drawing) {\r\n                    setDrawing(((Drawing) (result)));\r\n                } else\r\n                    if (result instanceof Throwable) {\r\n                        getDrawing().add(new TextFigure(result.toString()));\r\n                        ((Throwable) (result)).printStackTrace();\r\n                    }\r\n\r\n            }\r\n            boolean isLiveConnect;\r\n            try {\r\n                Class.forName(\"netscape.javascript.JSObject\");\r\n                isLiveConnect = true;\r\n            } catch (Throwable t) {\r\n                isLiveConnect = false;\r\n            }\r\n            loadButton.setEnabled((isLiveConnect && ((getParameter(\"dataread\")) != null)));\r\n            saveButton.setEnabled((isLiveConnect && ((getParameter(\"datawrite\")) != null)));\r\n            if (isLiveConnect) {\r\n                String methodName = getParameter(\"dataread\");\r\n                if ((methodName.indexOf(()) > 0) {\r\n                    methodName = methodName.substring(0, ((methodName.indexOf(()) - 1));\r\n                }\r\n                JSObject win = JSObject.getWindow(DrawLiveConnectApplet.this);\r\n                Object data = win.call(methodName, new Object[0]);\r\n                if (data instanceof String) {\r\n                    setData(((String) (data)));\r\n                }\r\n            }\r\n            c.validate();\r\n        }\r\n    }.start();\r\n}'),(4490,'initComponents()','org.jhotdraw.samples.draw.DrawLiveConnectApplet.initComponents()','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','/**\r\n * This method is called from within the init() method to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\nprivate void initComponents() {\r\n    // GEN-BEGIN:initComponents\r\n    toolButtonGroup = new ButtonGroup();\r\n    drawingPanel = new DrawingPanel();\r\n    jToolBar1 = new JToolBar();\r\n    loadButton = new JButton();\r\n    saveButton = new JButton();\r\n    DrawLiveConnectApplet.FormListener formListener = new DrawLiveConnectApplet.FormListener();\r\n    getContentPane().add(drawingPanel, BorderLayout.CENTER);\r\n    jToolBar1.setFloatable(false);\r\n    loadButton.setText(\"Laden\");\r\n    loadButton.addActionListener(formListener);\r\n    jToolBar1.add(loadButton);\r\n    saveButton.setText(\"Speichern\");\r\n    saveButton.addActionListener(formListener);\r\n    jToolBar1.add(saveButton);\r\n    getContentPane().add(jToolBar1, BorderLayout.SOUTH);\r\n}'),(4491,'load(java.awt.event.ActionEvent)','org.jhotdraw.samples.draw.DrawLiveConnectApplet.load(java.awt.event.ActionEvent)','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','private void load(ActionEvent evt) {\r\n    // GEN-FIRST:event_load\r\n    try {\r\n        String methodName = getParameter(\"dataread\");\r\n        if ((methodName.indexOf(()) > 0) {\r\n            methodName = methodName.substring(0, ((methodName.indexOf(()) - 1));\r\n        }\r\n        JSObject win = JSObject.getWindow(this);\r\n        Object result = win.call(methodName, new Object[0]);\r\n        if (result instanceof String) {\r\n            setData(((String) (result)));\r\n        }\r\n    } catch (Throwable t) {\r\n        TextFigure tf = new TextFigure((\"Fehler: \" + t));\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(10, 20);\r\n        tf.transform(tx);\r\n        getDrawing().add(tf);\r\n    }\r\n}// GEN-LAST:event_load\r\n'),(4492,'save(java.awt.event.ActionEvent)','org.jhotdraw.samples.draw.DrawLiveConnectApplet.save(java.awt.event.ActionEvent)','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','private void save(ActionEvent evt) {\r\n    // GEN-FIRST:event_save\r\n    try {\r\n        String methodName = getParameter(\"datawrite\");\r\n        if ((methodName.indexOf(()) > 0) {\r\n            methodName = methodName.substring(0, ((methodName.indexOf(()) - 1));\r\n        }\r\n        JSObject win = JSObject.getWindow(this);\r\n        Object result = win.call(methodName, new Object[]{ getData() });\r\n    } catch (Throwable t) {\r\n        TextFigure tf = new TextFigure((\"Fehler: \" + t));\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(10, 20);\r\n        tf.transform(tx);\r\n        getDrawing().add(tf);\r\n    }\r\n}// GEN-LAST:event_save\r\n'),(4493,'setData(java.lang.String)','org.jhotdraw.samples.draw.DrawLiveConnectApplet.setData(java.lang.String)','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','public void setData(String text) {\r\n    if ((text != null) && ((text.length()) > 0)) {\r\n        StringReader in = new StringReader(text);\r\n        try {\r\n            NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), in);\r\n            setDrawing(((Drawing) (domi.readObject(0))));\r\n        } catch (Throwable e) {\r\n            getDrawing().removeAllChildren();\r\n            TextFigure tf = new TextFigure();\r\n            tf.setText(e.getMessage());\r\n            tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            getDrawing().add(tf);\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (in != null)\r\n                in.close();\r\n\r\n        }\r\n    }\r\n}'),(4494,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.draw.DrawLiveConnectApplet.setDrawing(org.jhotdraw.draw.Drawing)','457','org.jhotdraw.samples.draw.DrawLiveConnectApplet','private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(4495,'-init-()','org.jhotdraw.samples.draw.DrawLiveConnectApplet$FormListener.-init-()','456','org.jhotdraw.samples.draw.DrawLiveConnectApplet$FormListener','FormListener() {\r\n}'),(4496,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.draw.DrawLiveConnectApplet$FormListener.actionPerformed(java.awt.event.ActionEvent)','456','org.jhotdraw.samples.draw.DrawLiveConnectApplet$FormListener','public void actionPerformed(ActionEvent evt) {\r\n    if ((evt.getSource()) == (loadButton)) {\r\n        this.load(evt);\r\n    } else\r\n        if ((evt.getSource()) == (saveButton)) {\r\n            this.save(evt);\r\n        }\r\n\r\n}'),(4497,'-init-()','org.jhotdraw.samples.draw.DrawView.-init-()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Creates a new view.\r\n */\r\npublic DrawView() {\r\n}'),(4498,'canSaveTo(java.io.File)','org.jhotdraw.samples.draw.DrawView.canSaveTo(java.io.File)','458','org.jhotdraw.samples.draw.DrawView','@Override\r\npublic boolean canSaveTo(File file) {\r\n    return file.getName().endsWith(\".xml\");\r\n}'),(4499,'clear()','org.jhotdraw.samples.draw.DrawView.clear()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Clears the view.\r\n */\r\npublic void clear() {\r\n    final Drawing newDrawing = createDrawing();\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(newDrawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InvocationTargetException ex) {\r\n        ex.printStackTrace();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(4500,'createDrawing()','org.jhotdraw.samples.draw.DrawView.createDrawing()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Creates a new Drawing for this view.\r\n */\r\nprotected Drawing createDrawing() {\r\n    Drawing drawing = new QuadTreeDrawing();\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new DrawFigureFactory());\r\n    drawing.addInputFormat(ioFormat);\r\n    ImageFigure prototype = new ImageFigure();\r\n    drawing.addInputFormat(new ImageInputFormat(prototype));\r\n    drawing.addInputFormat(new ImageInputFormat(prototype, \"JPG\", \"Joint Photographics Experts Group (JPEG)\", \"jpg\", BufferedImage.TYPE_INT_RGB));\r\n    drawing.addInputFormat(new ImageInputFormat(prototype, \"GIF\", \"Graphics Interchange Format (GIF)\", \"gif\", BufferedImage.TYPE_INT_ARGB));\r\n    drawing.addInputFormat(new ImageInputFormat(prototype));\r\n    drawing.addInputFormat(new PictImageInputFormat(prototype));\r\n    drawing.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    TextAreaFigure taf = new TextAreaFigure();\r\n    taf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(60, 40));\r\n    drawing.addInputFormat(new TextInputFormat(taf));\r\n    drawing.addOutputFormat(ioFormat);\r\n    drawing.addOutputFormat(new ImageOutputFormat());\r\n    return drawing;\r\n}'),(4501,'createOpenChooser()','org.jhotdraw.samples.draw.DrawView.createOpenChooser()','458','org.jhotdraw.samples.draw.DrawView','@Override\r\nprotected JFileChooser createOpenChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    c.addChoosableFileFilter(new ExtensionFileFilter(\"Drawing .xml\", \"xml\"));\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(4502,'createPageable()','org.jhotdraw.samples.draw.DrawView.createPageable()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Creates a Pageable object for printing the view.\r\n */\r\npublic Pageable createPageable() {\r\n    return new DrawingPageable(view.getDrawing());\r\n}'),(4503,'createSaveChooser()','org.jhotdraw.samples.draw.DrawView.createSaveChooser()','458','org.jhotdraw.samples.draw.DrawView','@Override\r\nprotected JFileChooser createSaveChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    c.addChoosableFileFilter(new ExtensionFileFilter(\"Drawing .xml\", \"xml\"));\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(4504,'getEditor()','org.jhotdraw.samples.draw.DrawView.getEditor()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Gets the drawing editor of the view.\r\n */\r\npublic DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(4505,'init()','org.jhotdraw.samples.draw.DrawView.init()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Initializes the view.\r\n */\r\npublic void init() {\r\n    super.init();\r\n    initComponents();\r\n    JPanel zoomButtonPanel = new JPanel(new BorderLayout());\r\n    scrollPane.setLayout(new PlacardScrollPaneLayout());\r\n    scrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));\r\n    setEditor(new DefaultDrawingEditor());\r\n    undo = new UndoRedoManager();\r\n    view.setDrawing(createDrawing());\r\n    view.getDrawing().addUndoableEditListener(undo);\r\n    initActions();\r\n    undo.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            setHasUnsavedChanges(undo.hasSignificantEdits());\r\n        }\r\n    });\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPanel placardPanel = new JPanel(new BorderLayout());\r\n    AbstractButton pButton;\r\n    pButton = ButtonFactory.createZoomButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    placardPanel.add(pButton, BorderLayout.WEST);\r\n    pButton = ButtonFactory.createToggleGridButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    labels.configureToolBarButton(pButton, \"view.toggleGrid.placard\");\r\n    placardPanel.add(pButton, BorderLayout.EAST);\r\n    scrollPane.add(placardPanel, JScrollPane.LOWER_LEFT_CORNER);\r\n}'),(4506,'initActions()','org.jhotdraw.samples.draw.DrawView.initActions()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Initializes view specific actions.\r\n */\r\nprivate void initActions() {\r\n    putAction(UndoAction.ID, undo.getUndoAction());\r\n    putAction(RedoAction.ID, undo.getRedoAction());\r\n}'),(4507,'initComponents()','org.jhotdraw.samples.draw.DrawView.initComponents()','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4508,'read(java.io.File)','org.jhotdraw.samples.draw.DrawView.read(java.io.File)','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Reads the view from the specified file.\r\n */\r\npublic void read(File f) throws IOException {\r\n    try {\r\n        JFileChooser fc = getOpenChooser();\r\n        final Drawing drawing = createDrawing();\r\n        boolean success = false;\r\n        for (InputFormat sfi : drawing.getInputFormats()) {\r\n            try {\r\n                sfi.read(f, drawing, true);\r\n                success = true;\r\n                break;\r\n            } catch (Exception e) {\r\n                // try with the next input format\r\n            }\r\n        }\r\n        if (!success) {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n            throw new IOException(labels.getFormatted(\"file.open.unsupportedFileFormat.message\", f.getName()));\r\n        }\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(drawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError();\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(4509,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.draw.DrawView.setEditor(org.jhotdraw.draw.DrawingEditor)','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Sets a drawing editor for the view.\r\n */\r\npublic void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.add(view);\r\n    }\r\n}'),(4510,'setHasUnsavedChanges(boolean)','org.jhotdraw.samples.draw.DrawView.setHasUnsavedChanges(boolean)','458','org.jhotdraw.samples.draw.DrawView','protected void setHasUnsavedChanges(boolean newValue) {\r\n    super.setHasUnsavedChanges(newValue);\r\n    undo.setHasSignificantEdits(newValue);\r\n}'),(4511,'write(java.io.File)','org.jhotdraw.samples.draw.DrawView.write(java.io.File)','458','org.jhotdraw.samples.draw.DrawView','/**\r\n * Writes the view to the specified file.\r\n */\r\npublic void write(File f) throws IOException {\r\n    Drawing drawing = view.getDrawing();\r\n    OutputFormat outputFormat = drawing.getOutputFormats().get(0);\r\n    outputFormat.write(f, drawing);\r\n}'),(4512,'-init-()','org.jhotdraw.samples.draw.DrawingPanel.-init-()','459','org.jhotdraw.samples.draw.DrawingPanel','/**\r\n * Creates new instance.\r\n */\r\npublic DrawingPanel() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    initComponents();\r\n    undoManager = new UndoRedoManager();\r\n    editor = new DefaultDrawingEditor();\r\n    editor.add(view);\r\n    addCreationButtonsTo(creationToolbar, editor);\r\n    ButtonFactory.addAttributesButtonsTo(attributesToolbar, editor);\r\n    JPopupButton pb = new JPopupButton();\r\n    pb.setItemFont(UIManager.getFont(\"MenuItem.font\"));\r\n    labels.configureToolBarButton(pb, \"actions\");\r\n    pb.add(new DuplicateAction());\r\n    pb.addSeparator();\r\n    pb.add(new GroupAction(editor));\r\n    pb.add(new UngroupAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new BringToFrontAction(editor));\r\n    pb.add(new SendToBackAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new CutAction());\r\n    pb.add(new CopyAction());\r\n    pb.add(new PasteAction());\r\n    pb.add(new SelectAllAction());\r\n    pb.add(new SelectSameAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(undoManager.getUndoAction());\r\n    pb.add(undoManager.getRedoAction());\r\n    // FIXME - We need a toggle grid action!\r\n    // pb.addSeparator();\r\n    // pb.add(new ToggleGridAction(editor));\r\n    JMenu m = new JMenu(labels.getString(\"view.zoomFactor.text\"));\r\n    JRadioButtonMenuItem rbmi;\r\n    ButtonGroup group = new ButtonGroup();\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null))));\r\n    rbmi.setSelected(true);\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null))));\r\n    group.add(rbmi);\r\n    pb.add(m);\r\n    pb.setFocusable(false);\r\n    creationToolbar.addSeparator();\r\n    creationToolbar.add(pb);\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    view.setDrawing(drawing);\r\n    drawing.addUndoableEditListener(undoManager);\r\n}'),(4513,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.draw.DrawingPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','459','org.jhotdraw.samples.draw.DrawingPanel','private void addCreationButtonsTo(JToolBar tb, DrawingEditor editor) {\r\n    addDefaultCreationButtonsTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}'),(4514,'addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)','org.jhotdraw.samples.draw.DrawingPanel.addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)','459','org.jhotdraw.samples.draw.DrawingPanel','public void addDefaultCreationButtonsTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, drawingActions, selectionActions);\r\n    tb.addSeparator();\r\n    AbstractAttributedFigure af;\r\n    CreationTool ct;\r\n    ConnectionTool cnt;\r\n    ConnectionFigure lc;\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RoundRectangleFigure()), \"edit.createRoundRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new EllipseFigure()), \"edit.createEllipse\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new DiamondFigure()), \"edit.createDiamond\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TriangleFigure()), \"edit.createTriangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new LineFigure()), \"edit.createLine\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (ct = new CreationTool(new LineFigure())), \"edit.createArrow\", labels);\r\n    af = ((AbstractAttributedFigure) (ct.getPrototype()));\r\n    AttributeKeys.END_DECORATION.basicSet(af, new ArrowTip(0.35, 12, 11.3));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure()), \"edit.createLineConnection\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (cnt = new ConnectionTool(new LineConnectionFigure())), \"edit.createElbowConnection\", labels);\r\n    lc = cnt.getPrototype();\r\n    lc.setLiner(new ElbowLiner());\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure()), \"edit.createScribble\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure(true)), \"edit.createPolygon\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new TextFigure()), \"edit.createText\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", labels);\r\n}'),(4515,'getDrawing()','org.jhotdraw.samples.draw.DrawingPanel.getDrawing()','459','org.jhotdraw.samples.draw.DrawingPanel','public Drawing getDrawing() {\r\n    return view.getDrawing();\r\n}'),(4516,'getEditor()','org.jhotdraw.samples.draw.DrawingPanel.getEditor()','459','org.jhotdraw.samples.draw.DrawingPanel','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(4517,'getView()','org.jhotdraw.samples.draw.DrawingPanel.getView()','459','org.jhotdraw.samples.draw.DrawingPanel','public DrawingView getView() {\r\n    return view;\r\n}'),(4518,'initComponents()','org.jhotdraw.samples.draw.DrawingPanel.initComponents()','459','org.jhotdraw.samples.draw.DrawingPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    toolButtonGroup = new ButtonGroup();\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    jPanel1 = new JPanel();\r\n    creationToolbar = new JToolBar();\r\n    attributesToolbar = new JToolBar();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    jPanel1.setLayout(new GridBagLayout());\r\n    creationToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 0;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(creationToolbar, gridBagConstraints);\r\n    attributesToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 1;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(attributesToolbar, gridBagConstraints);\r\n    add(jPanel1, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4519,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.draw.DrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)','459','org.jhotdraw.samples.draw.DrawingPanel','public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(4520,'-init-()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.-init-()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','DrawingPanelBeanInfo() {\r\n}'),(4521,'getBdescriptor()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getBdescriptor()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((DrawingPanelBeanInfo.beanDescriptor) == null)\r\n        DrawingPanelBeanInfo.beanDescriptor = new BeanDescriptor(DrawingPanelBeanInfo.class);\r\n\r\n    DrawingPanelBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    DrawingPanelBeanInfo.beanDescriptor.setDisplayName(\"DrawingPanel\");\r\n    return DrawingPanelBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(4522,'getBeanDescriptor()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getBeanDescriptor()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return DrawingPanelBeanInfo.getBdescriptor();\r\n}'),(4523,'getDefaultEventIndex()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getDefaultEventIndex()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return DrawingPanelBeanInfo.defaultEventIndex;\r\n}'),(4524,'getDefaultPropertyIndex()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getDefaultPropertyIndex()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return DrawingPanelBeanInfo.defaultPropertyIndex;\r\n}'),(4525,'getEdescriptor()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getEdescriptor()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return DrawingPanelBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(4526,'getEventSetDescriptors()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getEventSetDescriptors()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return DrawingPanelBeanInfo.getEdescriptor();\r\n}'),(4527,'getIcon(int)','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getIcon(int)','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((DrawingPanelBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((DrawingPanelBeanInfo.iconColor16) == null)\r\n                    DrawingPanelBeanInfo.iconColor16 = loadImage(DrawingPanelBeanInfo.iconNameC16);\r\n\r\n                return DrawingPanelBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((DrawingPanelBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((DrawingPanelBeanInfo.iconColor32) == null)\r\n                    DrawingPanelBeanInfo.iconColor32 = loadImage(DrawingPanelBeanInfo.iconNameC32);\r\n\r\n                return DrawingPanelBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((DrawingPanelBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((DrawingPanelBeanInfo.iconMono16) == null)\r\n                    DrawingPanelBeanInfo.iconMono16 = loadImage(DrawingPanelBeanInfo.iconNameM16);\r\n\r\n                return DrawingPanelBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((DrawingPanelBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((DrawingPanelBeanInfo.iconMono32) == null)\r\n                    DrawingPanelBeanInfo.iconMono32 = loadImage(DrawingPanelBeanInfo.iconNameM32);\r\n\r\n                return DrawingPanelBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(4528,'getMdescriptor()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getMdescriptor()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return DrawingPanelBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(4529,'getMethodDescriptors()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getMethodDescriptors()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return DrawingPanelBeanInfo.getMdescriptor();\r\n}'),(4530,'getPdescriptor()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getPdescriptor()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return DrawingPanelBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(4531,'getPropertyDescriptors()','org.jhotdraw.samples.draw.DrawingPanelBeanInfo.getPropertyDescriptors()','460','org.jhotdraw.samples.draw.DrawingPanelBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return DrawingPanelBeanInfo.getPdescriptor();\r\n}'),(4532,'-init-()','org.jhotdraw.samples.draw.Main.-init-()','461','org.jhotdraw.samples.draw.Main','Main() {\r\n}'),(4533,'main(java.lang.String[])','org.jhotdraw.samples.draw.Main.main(java.lang.String[])','461','org.jhotdraw.samples.draw.Main','/**\r\n * Creates a new instance.\r\n */\r\npublic static void main(String[] args) {\r\n    Application app;\r\n    String os = System.getProperty(\"os.name\").toLowerCase();\r\n    if (os.startsWith(\"mac\")) {\r\n        app = new DefaultOSXApplication();\r\n    } else\r\n        if (os.startsWith(\"win\")) {\r\n            // app = new DefaultMDIApplication();\r\n            app = new DefaultSDIApplication();\r\n        } else {\r\n            app = new DefaultSDIApplication();\r\n        }\r\n\r\n    DrawApplicationModel model = new DrawApplicationModel();\r\n    model.setName(\"JHotDraw Draw\");\r\n    model.setVersion(Main.class.getPackage().getImplementationVersion());\r\n    model.setCopyright((\"Copyright 2006-2009 (c) by the authors of JHotDraw\n\" + \"This software is licensed under LGPL or Creative Commons 3.0 BY\"));\r\n    model.setViewClassName(\"org.jhotdraw.samples.draw.DrawView\");\r\n    app.setModel(model);\r\n    app.launch(args);\r\n}'),(4534,'-init-()','org.jhotdraw.samples.font.FontChooserMain.-init-()','462','org.jhotdraw.samples.font.FontChooserMain','/**\r\n * Creates new form FontChooserMain\r\n */\r\npublic FontChooserMain() {\r\n    initComponents();\r\n    add(new JFontChooser());\r\n}'),(4535,'initComponents()','org.jhotdraw.samples.font.FontChooserMain.initComponents()','462','org.jhotdraw.samples.font.FontChooserMain','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initComponents() {\r\n    setLayout(new BorderLayout());\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4536,'main(java.lang.String[])','org.jhotdraw.samples.font.FontChooserMain.main(java.lang.String[])','462','org.jhotdraw.samples.font.FontChooserMain','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            try {\r\n                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n            } catch (Throwable t) {\r\n            }\r\n            JFrame f = new JFrame(\"FontChooser\");\r\n            f.add(new FontChooserMain());\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.pack();\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4537,'-init-()','org.jhotdraw.samples.mini.BezierDemo.-init-()','466','org.jhotdraw.samples.mini.BezierDemo','Example() {\r\n}'),(4538,'checkboxPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.mini.BezierDemo.checkboxPerformed(java.awt.event.ActionEvent)','466','org.jhotdraw.samples.mini.BezierDemo','private void checkboxPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_checkboxPerformed\r\n    canvas.repaint();\r\n}// GEN-LAST:event_checkboxPerformed\r\n'),(4539,'dumpButtonActionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.mini.BezierDemo.dumpButtonActionPerformed(java.awt.event.ActionEvent)','466','org.jhotdraw.samples.mini.BezierDemo','private void dumpButtonActionPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_dumpButtonActionPerformed\r\n    if ((dumpDialog) == null) {\r\n        dumpDialog = new JDialog();\r\n        dumpDialog.setTitle(\"Dump\");\r\n        dumpArea = new JTextArea();\r\n        dumpDialog.add(new JScrollPane(dumpArea));\r\n        dumpDialog.setSize(400, 400);\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(\"        Point2D.Double[] d = { //  Digitized points \n\");\r\n    for (int i = 0; i < (examples.size()); i++) {\r\n        for (BezierPath.Node node : examples.get(i).digitized) {\r\n            buf.append(\"            new Point2D.Double(\");\r\n            buf.append(node.x[0]);\r\n            buf.append(\",\");\r\n            buf.append(node.y[0]);\r\n            buf.append(\"),\n\");\r\n        }\r\n    }\r\n    buf.append(\"        };\n\");\r\n    dumpArea.setText(buf.toString());\r\n    dumpDialog.setVisible(true);\r\n}// GEN-LAST:event_dumpButtonActionPerformed\r\n'),(4540,'eraseButtonActionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.mini.BezierDemo.eraseButtonActionPerformed(java.awt.event.ActionEvent)','466','org.jhotdraw.samples.mini.BezierDemo','private void eraseButtonActionPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_eraseButtonActionPerformed\r\n    examples.clear();\r\n    canvas.repaint();\r\n}// GEN-LAST:event_eraseButtonActionPerformed\r\n'),(4541,'getError()','org.jhotdraw.samples.mini.BezierDemo.getError()','466','org.jhotdraw.samples.mini.BezierDemo','private double getError() {\r\n    double error = 2.0 / (getZoomFactor());\r\n    return error;\r\n}'),(4542,'getSquaredError()','org.jhotdraw.samples.mini.BezierDemo.getSquaredError()','466','org.jhotdraw.samples.mini.BezierDemo','private double getSquaredError() {\r\n    double error = getError();\r\n    return error * error;\r\n}'),(4543,'getZoomFactor()','org.jhotdraw.samples.mini.BezierDemo.getZoomFactor()','466','org.jhotdraw.samples.mini.BezierDemo','private double getZoomFactor() {\r\n    return (zoomSlider.getValue()) / 100.0;\r\n}'),(4544,'initComponents()','org.jhotdraw.samples.mini.BezierDemo.initComponents()','466','org.jhotdraw.samples.mini.BezierDemo','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    jPanel1 = new JPanel();\r\n    toleranceLabel = new JLabel();\r\n    zoomSlider = new JSlider();\r\n    showDigitizedCheck = new JCheckBox();\r\n    showPreprocessedCheck = new JCheckBox();\r\n    showPolylineCheck = new JCheckBox();\r\n    showBezierCheck = new JCheckBox();\r\n    showControlsCheck = new JCheckBox();\r\n    eraseButton = new JButton();\r\n    dumpButton = new JButton();\r\n    setLayout(new BorderLayout());\r\n    jPanel1.setBorder(BorderFactory.createEmptyBorder(12, 20, 20, 20));\r\n    jPanel1.setLayout(new GridBagLayout());\r\n    toleranceLabel.setText(\"Zoom:\");\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(toleranceLabel, gridBagConstraints);\r\n    zoomSlider.setMaximum(800);\r\n    zoomSlider.setMinimum(100);\r\n    zoomSlider.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent evt) {\r\n            zoomChanged(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 1;\r\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.weightx = 1.0;\r\n    jPanel1.add(zoomSlider, gridBagConstraints);\r\n    showDigitizedCheck.setText(\"Show Source Points\");\r\n    showDigitizedCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            checkboxPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridwidth = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(showDigitizedCheck, gridBagConstraints);\r\n    showPreprocessedCheck.setText(\"Show Preprocessed Points\");\r\n    showPreprocessedCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            checkboxPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridwidth = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(showPreprocessedCheck, gridBagConstraints);\r\n    showPolylineCheck.setSelected(true);\r\n    showPolylineCheck.setText(\"Show Polyline\");\r\n    showPolylineCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            checkboxPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    gridBagConstraints.insets = new Insets(0, 20, 0, 0);\r\n    jPanel1.add(showPolylineCheck, gridBagConstraints);\r\n    showBezierCheck.setSelected(true);\r\n    showBezierCheck.setText(\"Show Bezier Path\");\r\n    showBezierCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            checkboxPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    gridBagConstraints.insets = new Insets(0, 20, 0, 0);\r\n    jPanel1.add(showBezierCheck, gridBagConstraints);\r\n    showControlsCheck.setText(\"Show Bezier Controls\");\r\n    showControlsCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            checkboxPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridwidth = 2;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(showControlsCheck, gridBagConstraints);\r\n    eraseButton.setText(\"Erase\");\r\n    eraseButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            eraseButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 2;\r\n    gridBagConstraints.gridy = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.EAST;\r\n    gridBagConstraints.weightx = 1.0;\r\n    gridBagConstraints.insets = new Insets(6, 0, 0, 0);\r\n    jPanel1.add(eraseButton, gridBagConstraints);\r\n    dumpButton.setText(\"Dump\");\r\n    dumpButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            dumpButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 3;\r\n    gridBagConstraints.gridy = 4;\r\n    gridBagConstraints.anchor = GridBagConstraints.EAST;\r\n    gridBagConstraints.insets = new Insets(6, 0, 0, 0);\r\n    jPanel1.add(dumpButton, gridBagConstraints);\r\n    add(jPanel1, BorderLayout.NORTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4545,'main(java.lang.String[])','org.jhotdraw.samples.mini.BezierDemo.main(java.lang.String[])','466','org.jhotdraw.samples.mini.BezierDemo','public static void main(String[] arg) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"Bezier Demo\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.add(new BezierDemo());\r\n            f.setPreferredSize(new Dimension(400, 300));\r\n            f.pack();\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4546,'zoomChanged(javax.swing.event.ChangeEvent)','org.jhotdraw.samples.mini.BezierDemo.zoomChanged(javax.swing.event.ChangeEvent)','466','org.jhotdraw.samples.mini.BezierDemo','private void zoomChanged(ChangeEvent evt) {\r\n    // GEN-FIRST:event_zoomChanged\r\n    canvas.repaint();\r\n}// GEN-LAST:event_zoomChanged\r\n'),(4547,'-init-()','org.jhotdraw.samples.mini.BezierDemo$Canvas.-init-()','463','org.jhotdraw.samples.mini.BezierDemo$Canvas','Canvas() {\r\n}'),(4548,'paintComponent(java.awt.Graphics)','org.jhotdraw.samples.mini.BezierDemo$Canvas.paintComponent(java.awt.Graphics)','463','org.jhotdraw.samples.mini.BezierDemo$Canvas','@Override\r\npublic void paintComponent(Graphics gr) {\r\n    long start = System.currentTimeMillis();\r\n    super.paintComponent(gr);\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    // Update examples\r\n    for (BezierDemo.Example ex : examples) {\r\n        if ((ex.bezier) == null) {\r\n            ex.bezier = Bezier.fitBezierPath(ex.digitized, ex.error);\r\n        }\r\n        if ((ex.segments) == null) {\r\n            ArrayList<Point2D.Double> digitizedPoints = new ArrayList<Point2D.Double>();\r\n            for (BezierPath.Node node : ex.digitized) {\r\n                digitizedPoints.add(new Point2D.Double(node.x[0], node.y[0]));\r\n            }\r\n            // Split into segments at corners\r\n            ex.segments = new ArrayList<ArrayList<Point2D.Double>>();\r\n            ex.segments = Bezier.splitAtCorners(digitizedPoints, ((77 / 180.0) * (Math.PI)), ((getError()) * 2));\r\n            // Clean up the data in the segments\r\n            for (int i = 0, n = ex.segments.size(); i < n; i++) {\r\n                ArrayList<Point2D.Double> seg = ex.segments.get(i);\r\n                seg = Bezier.removeClosePoints(seg, getError());\r\n                seg = Bezier.reduceNoise(seg, 0.8);\r\n                ex.segments.set(i, seg);\r\n            }\r\n        }\r\n    }\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    AffineTransform identityTransform = g.getTransform();\r\n    AffineTransform tx = g.getTransform();\r\n    double zoomFactor = getZoomFactor();\r\n    tx.scale(zoomFactor, zoomFactor);\r\n    g.setTransform(tx);\r\n    if (showPolylineCheck.isSelected()) {\r\n        g.setColor(Color.black);\r\n        for (BezierDemo.Example ex : examples) {\r\n            g.draw(ex.digitized);\r\n        }\r\n    }\r\n    if (showBezierCheck.isSelected()) {\r\n        g.setColor(Color.blue);\r\n        for (BezierDemo.Example ex : examples) {\r\n            g.draw(ex.bezier);\r\n        }\r\n    }\r\n    g.setTransform(identityTransform);\r\n    if (showDigitizedCheck.isSelected()) {\r\n        for (BezierDemo.Example ex : examples) {\r\n            g.setColor(Color.white);\r\n            for (BezierPath.Node node : ex.digitized) {\r\n                g.fillRect(((int) (((node.x[0]) * zoomFactor) - 2)), ((int) (((node.y[0]) * zoomFactor) - 2)), 5, 5);\r\n            }\r\n        }\r\n        for (BezierDemo.Example ex : examples) {\r\n            g.setColor(Color.black);\r\n            for (BezierPath.Node node : ex.digitized) {\r\n                g.fillRect(((int) (((node.x[0]) * zoomFactor) - 1)), ((int) (((node.y[0]) * zoomFactor) - 1)), 3, 3);\r\n            }\r\n        }\r\n    }\r\n    if (showPreprocessedCheck.isSelected()) {\r\n        for (BezierDemo.Example ex : examples) {\r\n            g.setColor(Color.WHITE);\r\n            for (ArrayList<Point2D.Double> seg : ex.segments) {\r\n                for (int i = 0, n = seg.size(); i < n; i++) {\r\n                    Point2D.Double node = seg.get(i);\r\n                    g.fillRect(((int) (((node.x) * zoomFactor) - 2)), ((int) (((node.y) * zoomFactor) - 2)), 5, 5);\r\n                }\r\n            }\r\n            for (ArrayList<Point2D.Double> seg : ex.segments) {\r\n                for (int i = 0, n = seg.size(); i < n; i++) {\r\n                    Point2D.Double node = seg.get(i);\r\n                    g.setColor(((i == 0) || (i == (n - 1)) ? Color.RED : Color.CYAN));\r\n                    g.fillRect(((int) (((node.x) * zoomFactor) - 1)), ((int) (((node.y) * zoomFactor) - 1)), 3, 3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (showControlsCheck.isSelected()) {\r\n        for (BezierDemo.Example ex : examples) {\r\n            for (BezierPath.Node node : ex.bezier) {\r\n                if ((node.mask) == (BezierPath.C0_MASK)) {\r\n                } else\r\n                    if (((node.mask) == (BezierPath.C1C2_MASK)) && (node.keepColinear)) {\r\n                        g.setColor(Color.WHITE);\r\n                        g.fillRect(((int) (((node.x[1]) * zoomFactor) - 2)), ((int) (((node.y[1]) * zoomFactor) - 2)), 5, 5);\r\n                        g.fillRect(((int) (((node.x[2]) * zoomFactor) - 2)), ((int) (((node.y[2]) * zoomFactor) - 2)), 5, 5);\r\n                        g.setColor(Color.CYAN);\r\n                        g.fillRect(((int) (((node.x[1]) * zoomFactor) - 1)), ((int) (((node.y[1]) * zoomFactor) - 1)), 3, 3);\r\n                        g.draw(new Line2D.Double(((node.x[1]) * zoomFactor), ((node.y[1]) * zoomFactor), ((node.x[0]) * zoomFactor), ((node.y[0]) * zoomFactor)));\r\n                        g.fillRect(((int) (((node.x[2]) * zoomFactor) - 1)), ((int) (((node.y[2]) * zoomFactor) - 1)), 3, 3);\r\n                        g.draw(new Line2D.Double(((node.x[2]) * zoomFactor), ((node.y[2]) * zoomFactor), ((node.x[0]) * zoomFactor), ((node.y[0]) * zoomFactor)));\r\n                    } else {\r\n                        if (((node.mask) & (BezierPath.C1_MASK)) == (BezierPath.C1_MASK)) {\r\n                            g.setColor(Color.WHITE);\r\n                            g.fillRect(((int) (((node.x[1]) * zoomFactor) - 2)), ((int) (((node.y[1]) * zoomFactor) - 2)), 5, 5);\r\n                            g.setColor(Color.MAGENTA);\r\n                            g.fillRect(((int) (((node.x[1]) * zoomFactor) - 1)), ((int) (((node.y[1]) * zoomFactor) - 1)), 3, 3);\r\n                            g.draw(new Line2D.Double(((node.x[1]) * zoomFactor), ((node.y[1]) * zoomFactor), ((node.x[0]) * zoomFactor), ((node.y[0]) * zoomFactor)));\r\n                        }\r\n                        if (((node.mask) & (BezierPath.C2_MASK)) == (BezierPath.C2_MASK)) {\r\n                            g.setColor(Color.WHITE);\r\n                            g.fillRect(((int) (((node.x[2]) * zoomFactor) - 2)), ((int) (((node.y[2]) * zoomFactor) - 2)), 5, 5);\r\n                            g.setColor(Color.MAGENTA);\r\n                            g.fillRect(((int) (((node.x[2]) * zoomFactor) - 1)), ((int) (((node.y[2]) * zoomFactor) - 1)), 3, 3);\r\n                            g.draw(new Line2D.Double(((node.x[2]) * zoomFactor), ((node.y[2]) * zoomFactor), ((node.x[0]) * zoomFactor), ((node.y[0]) * zoomFactor)));\r\n                        }\r\n                    }\r\n\r\n            }\r\n            for (BezierPath.Node node : ex.bezier) {\r\n                g.setColor(Color.WHITE);\r\n                g.fillRect(((int) (((node.x[0]) * zoomFactor) - 2)), ((int) (((node.y[0]) * zoomFactor) - 2)), 5, 5);\r\n            }\r\n            for (BezierPath.Node node : ex.bezier) {\r\n                g.setColor(((node.keepColinear) && ((node.mask) != (BezierPath.C0_MASK)) ? Color.BLUE : Color.RED));\r\n                g.fillRect(((int) (((node.x[0]) * zoomFactor) - 1)), ((int) (((node.y[0]) * zoomFactor) - 1)), 3, 3);\r\n            }\r\n        }\r\n    }\r\n    long end = System.currentTimeMillis();\r\n    g.setColor(Color.BLACK);\r\n    g.drawString(((end - start) + \" ms\"), 5, g.getFontMetrics().getHeight());\r\n}'),(4549,'-init-()','org.jhotdraw.samples.mini.BezierDemo$Example.-init-()','464','org.jhotdraw.samples.mini.BezierDemo$Example','Example() {\r\n}'),(4550,'invalidate()','org.jhotdraw.samples.mini.BezierDemo$Example.invalidate()','464','org.jhotdraw.samples.mini.BezierDemo$Example','public void invalidate() {\r\n    bezier = null;\r\n    segments = null;\r\n}'),(4551,'-init-()','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.-init-()','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','MouseHandler() {\r\n}'),(4552,'mouseClicked(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mouseClicked(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mouseClicked(MouseEvent e) {\r\n}'),(4553,'mouseDragged(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mouseDragged(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mouseDragged(MouseEvent e) {\r\n    double zoomFactor = getZoomFactor();\r\n    example.digitized.lineTo(((e.getX()) / zoomFactor), ((e.getY()) / zoomFactor));\r\n    example.invalidate();\r\n    canvas.repaint();\r\n}'),(4554,'mouseEntered(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mouseEntered(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mouseEntered(MouseEvent e) {\r\n}'),(4555,'mouseExited(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mouseExited(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mouseExited(MouseEvent e) {\r\n}'),(4556,'mouseMoved(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mouseMoved(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mouseMoved(MouseEvent e) {\r\n}'),(4557,'mousePressed(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mousePressed(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mousePressed(MouseEvent e) {\r\n    example = new BezierDemo.Example();\r\n    examples.add(example);\r\n    example.error = getError();\r\n    double zoomFactor = getZoomFactor();\r\n    example.digitized.moveTo(((e.getX()) / zoomFactor), ((e.getY()) / zoomFactor));\r\n    canvas.repaint();\r\n}'),(4558,'mouseReleased(java.awt.event.MouseEvent)','org.jhotdraw.samples.mini.BezierDemo$MouseHandler.mouseReleased(java.awt.event.MouseEvent)','465','org.jhotdraw.samples.mini.BezierDemo$MouseHandler','public void mouseReleased(MouseEvent e) {\r\n}'),(4559,'-init-()','org.jhotdraw.samples.mini.ConnectingFiguresSample.-init-()','467','org.jhotdraw.samples.mini.ConnectingFiguresSample','ConnectingFiguresSample() {\r\n}'),(4560,'main(java.lang.String[])','org.jhotdraw.samples.mini.ConnectingFiguresSample.main(java.lang.String[])','467','org.jhotdraw.samples.mini.ConnectingFiguresSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // Create the two text areas\r\n            TextAreaFigure ta = new TextAreaFigure();\r\n            ta.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            TextAreaFigure tb = new TextAreaFigure();\r\n            tb.setBounds(new Point2D.Double(210, 110), new Point2D.Double(300, 200));\r\n            // Create an elbow connection\r\n            ConnectionFigure cf = new LineConnectionFigure();\r\n            cf.setLiner(new ElbowLiner());\r\n            // Connect the figures\r\n            cf.setStartConnector(ta.findConnector(Geom.center(ta.getBounds()), cf));\r\n            cf.setEndConnector(tb.findConnector(Geom.center(tb.getBounds()), cf));\r\n            // Add all figures to a drawing\r\n            Drawing drawing = new DefaultDrawing();\r\n            drawing.add(ta);\r\n            drawing.add(tb);\r\n            drawing.add(cf);\r\n            // Show the drawing\r\n            JFrame f = new JFrame(\"My Drawing\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            DrawingView view = new DefaultDrawingView();\r\n            view.setDrawing(drawing);\r\n            f.getContentPane().add(view.getComponent());\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4561,'-init-()','org.jhotdraw.samples.mini.CreationToolSample.-init-()','468','org.jhotdraw.samples.mini.CreationToolSample','CreationToolSample() {\r\n}'),(4562,'main(java.lang.String[])','org.jhotdraw.samples.mini.CreationToolSample.main(java.lang.String[])','468','org.jhotdraw.samples.mini.CreationToolSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n            // Create a drawing view with a default drawing, and\r\n            // input/output formats for basic clipboard support.\r\n            DrawingView view = new DefaultDrawingView();\r\n            DefaultDrawing drawing = new DefaultDrawing();\r\n            drawing.addInputFormat(new SerializationInputOutputFormat());\r\n            drawing.addOutputFormat(new SerializationInputOutputFormat());\r\n            view.setDrawing(drawing);\r\n            // Create a common drawing editor for the views\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.add(view);\r\n            // Create a tool bar\r\n            JToolBar tb = new JToolBar();\r\n            // Add a selection tool to the toolbar.\r\n            ButtonFactory.addSelectionToolTo(tb, editor);\r\n            // Add a creation tool for green rectangles to the toolbar.\r\n            HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n            AttributeKeys.FILL_COLOR.put(a, Color.GREEN);\r\n            ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure(), a), \"edit.createRectangle\", labels);\r\n            tb.setOrientation(JToolBar.VERTICAL);\r\n            // Put all together into a JFrame\r\n            JFrame f = new JFrame(\"Editor with Creation Tool\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            // Set up the content pane\r\n            // Place the toolbar on the left\r\n            f.getContentPane().add(tb, BorderLayout.WEST);\r\n            // Place the drawing view inside a scroll pane in the center\r\n            JScrollPane sp = new JScrollPane(view.getComponent());\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            f.getContentPane().add(sp, BorderLayout.CENTER);\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4563,'-init-()','org.jhotdraw.samples.mini.DefaultDOMStorableSample.-init-()','470','org.jhotdraw.samples.mini.DefaultDOMStorableSample','DefaultDOMStorableSample() {\r\n}'),(4564,'-init-(java.lang.String)','org.jhotdraw.samples.mini.DefaultDOMStorableSample.-init-(java.lang.String)','470','org.jhotdraw.samples.mini.DefaultDOMStorableSample','public MyObject(String name) {\r\n    this.name = name;\r\n}'),(4565,'main(java.lang.String[])','org.jhotdraw.samples.mini.DefaultDOMStorableSample.main(java.lang.String[])','470','org.jhotdraw.samples.mini.DefaultDOMStorableSample','public static void main(String[] args) {\r\n    try {\r\n        // Set up the DefaultDOMFactory\r\n        DefaultDOMFactory factory = new DefaultDOMFactory();\r\n        factory.addStorableClass(\"MyElementName\", DefaultDOMStorableSample.MyObject.class);\r\n        // Create a DOMStorable object\r\n        DefaultDOMStorableSample.MyObject obj = new DefaultDOMStorableSample.MyObject(\"Hello World\");\r\n        System.out.println((\"The name of the original object is:\" + (obj.getName())));\r\n        // Write the object into a DOM, and then serialize the DOM into a String\r\n        NanoXMLDOMOutput out = new NanoXMLDOMOutput(factory);\r\n        out.writeObject(obj);\r\n        StringWriter writer = new StringWriter();\r\n        out.save(writer);\r\n        String serializedString = writer.toString();\r\n        System.out.println((\"\nThe serialized representation of the object is:\n\" + serializedString));\r\n        // Deserialize a DOM from a String, and then read the object from the DOM\r\n        StringReader reader = new StringReader(serializedString);\r\n        NanoXMLDOMInput in = new NanoXMLDOMInput(factory, reader);\r\n        DefaultDOMStorableSample.MyObject obj2 = ((DefaultDOMStorableSample.MyObject) (in.readObject()));\r\n        System.out.println((\"\nThe name of the restored object is:\" + (obj2.getName())));\r\n    } catch (IOException ex) {\r\n        Logger.getLogger(DefaultDOMStorableSample.class.getName()).log(Level.SEVERE, null, ex);\r\n    }\r\n}'),(4566,'-init-()','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.-init-()','469','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject','/**\r\n * DOM Storable objects must have a non-argument constructor.\r\n */\r\npublic MyObject() {\r\n}'),(4567,'-init-(java.lang.String)','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.-init-(java.lang.String)','469','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject','public MyObject(String name) {\r\n    this.name = name;\r\n}'),(4568,'getName()','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.getName()','469','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject','public String getName() {\r\n    return name;\r\n}'),(4569,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.read(org.jhotdraw.xml.DOMInput)','469','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject','public void read(DOMInput in) throws IOException {\r\n    name = in.getAttribute(\"name\", null);\r\n}'),(4570,'setName(java.lang.String)','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.setName(java.lang.String)','469','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject','public void setName(String name) {\r\n    this.name = name;\r\n}'),(4571,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.write(org.jhotdraw.xml.DOMOutput)','469','org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject','public void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"name\", name);\r\n}'),(4572,'-init-()','org.jhotdraw.samples.mini.DnDMultiEditorSample.-init-()','471','org.jhotdraw.samples.mini.DnDMultiEditorSample','DnDMultiEditorSample() {\r\n}'),(4573,'createDrawing()','org.jhotdraw.samples.mini.DnDMultiEditorSample.createDrawing()','471','org.jhotdraw.samples.mini.DnDMultiEditorSample','/**\r\n * Creates a drawing with input and output formats, so that drawing figures\r\n * can be copied and pasted between drawing views.\r\n *\r\n * @return a drawing\r\n */\r\nprivate static Drawing createDrawing() {\r\n    // Create a default drawing with\r\n    // input/output formats for basic clipboard support.\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    drawing.addInputFormat(new SerializationInputOutputFormat());\r\n    drawing.addOutputFormat(new SerializationInputOutputFormat());\r\n    drawing.addOutputFormat(new ImageOutputFormat());\r\n    return drawing;\r\n}'),(4574,'main(java.lang.String[])','org.jhotdraw.samples.mini.DnDMultiEditorSample.main(java.lang.String[])','471','org.jhotdraw.samples.mini.DnDMultiEditorSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n            // Create four drawing views, each one with its own drawing\r\n            DrawingView view1 = new DefaultDrawingView();\r\n            DrawingView view2 = new DefaultDrawingView();\r\n            DrawingView view3 = new DefaultDrawingView();\r\n            DrawingView view4 = new DefaultDrawingView();\r\n            view1.setDrawing(DnDMultiEditorSample.createDrawing());\r\n            view2.setDrawing(DnDMultiEditorSample.createDrawing());\r\n            view3.setDrawing(DnDMultiEditorSample.createDrawing());\r\n            view4.setDrawing(DnDMultiEditorSample.createDrawing());\r\n            view1.getComponent().setTransferHandler(new DnDDrawingViewTransferHandler());\r\n            view2.getComponent().setTransferHandler(new DnDDrawingViewTransferHandler());\r\n            view3.getComponent().setTransferHandler(new DnDDrawingViewTransferHandler());\r\n            view4.getComponent().setTransferHandler(new DnDDrawingViewTransferHandler());\r\n            // Create a common drawing editor for the views\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.add(view1);\r\n            editor.add(view2);\r\n            editor.add(view3);\r\n            editor.add(view4);\r\n            // Create a tool bar with selection tool and a\r\n            // creation tool for rectangle figures.\r\n            JToolBar tb = new JToolBar();\r\n            SelectionTool selectionTool = new SelectionTool();\r\n            selectionTool.setDragTracker(new DnDTracker());\r\n            ButtonFactory.addSelectionToolTo(tb, editor, selectionTool);\r\n            ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n            tb.setOrientation(JToolBar.VERTICAL);\r\n            // Put all together into a JFrame\r\n            JFrame f = new JFrame(\"Multi-Editor\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            // Set up the content pane\r\n            // Place the toolbar on the left\r\n            // Place each drawing view into a scroll pane of its own\r\n            // and put them into a larger scroll pane.\r\n            JPanel innerPane = new JPanel();\r\n            innerPane.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));\r\n            JScrollPane sp;\r\n            innerPane.add((sp = new JScrollPane(view1.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            innerPane.add((sp = new JScrollPane(view2.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            innerPane.add((sp = new JScrollPane(view3.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            innerPane.add((sp = new JScrollPane(view4.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            f.getContentPane().add(new JScrollPane(innerPane));\r\n            f.getContentPane().add(tb, BorderLayout.WEST);\r\n            f.show();\r\n        }\r\n    });\r\n}'),(4575,'-init-()','org.jhotdraw.samples.mini.EditorSample.-init-()','472','org.jhotdraw.samples.mini.EditorSample','EditorSample() {\r\n}'),(4576,'main(java.lang.String[])','org.jhotdraw.samples.mini.EditorSample.main(java.lang.String[])','472','org.jhotdraw.samples.mini.EditorSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // Create a simple drawing consisting of three\r\n            // text areas and an elbow connection.\r\n            TextAreaFigure ta = new TextAreaFigure();\r\n            ta.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            TextAreaFigure tb = new TextAreaFigure();\r\n            tb.setBounds(new Point2D.Double(220, 120), new Point2D.Double(310, 210));\r\n            TextAreaFigure tc = new TextAreaFigure();\r\n            tc.setBounds(new Point2D.Double(220, 10), new Point2D.Double(310, 100));\r\n            ConnectionFigure cf = new LineConnectionFigure();\r\n            cf.setLiner(new ElbowLiner());\r\n            cf.setStartConnector(ta.findConnector(Geom.center(ta.getBounds()), cf));\r\n            cf.setEndConnector(tb.findConnector(Geom.center(tb.getBounds()), cf));\r\n            Drawing drawing = new DefaultDrawing();\r\n            drawing.add(ta);\r\n            drawing.add(tb);\r\n            drawing.add(tc);\r\n            drawing.add(cf);\r\n            // Create a frame with a drawing view and a drawing editor\r\n            JFrame f = new JFrame(\"My Drawing\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            DrawingView view = new DefaultDrawingView();\r\n            view.setDrawing(drawing);\r\n            f.getContentPane().add(view.getComponent());\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.add(view);\r\n            editor.setTool(new DelegationSelectionTool());\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4577,'-init-()','org.jhotdraw.samples.mini.FileIconsSample.-init-()','473','org.jhotdraw.samples.mini.FileIconsSample','FileIconsSample() {\r\n}'),(4578,'main(java.lang.String[])','org.jhotdraw.samples.mini.FileIconsSample.main(java.lang.String[])','473','org.jhotdraw.samples.mini.FileIconsSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // Let the user choose a directory\r\n            JFileChooser fc = new JFileChooser();\r\n            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\r\n            fc.setDialogTitle(\"Choose a directory\");\r\n            if ((fc.showOpenDialog(null)) != (JFileChooser.APPROVE_OPTION)) {\r\n                System.exit(0);\r\n            }\r\n            // Create a drawing\r\n            Drawing drawing = new DefaultDrawing();\r\n            // Add a figure for each file to the drawing\r\n            File dir = fc.getSelectedFile();\r\n            File[] files = dir.listFiles();\r\n            FileSystemView fsv = FileSystemView.getFileSystemView();\r\n            int maxColumn = Math.max(((int) (Math.sqrt(files.length))), 1);\r\n            double tx = 0;\r\n            double ty = 0;\r\n            double rowHeight = 0;\r\n            int i = 0;\r\n            for (File f : files) {\r\n                // Create an image figure for the file icon\r\n                Icon icon = fsv.getSystemIcon(f);\r\n                BufferedImage bimg = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D g = bimg.createGraphics();\r\n                icon.paintIcon(null, g, 0, 0);\r\n                g.dispose();\r\n                ImageFigure imf = new ImageFigure();\r\n                imf.setBufferedImage(bimg);\r\n                AttributeKeys.STROKE_COLOR.set(imf, null);\r\n                imf.setBounds(new Point2D.Double(0, 0), new Point2D.Double(icon.getIconWidth(), icon.getIconHeight()));\r\n                // Creata TextAreaFigure for the file name\r\n                // We limit its width to 100 Pixels\r\n                TextAreaFigure tef = new TextAreaFigure(f.getName());\r\n                Dimension2DDouble dim = tef.getPreferredTextSize(100);\r\n                Insets2D.Double insets = tef.getInsets();\r\n                tef.setBounds(new Point2D.Double(0, 0), new Point2D.Double((((Math.max(100, dim.width)) + (insets.left)) + (insets.right)), (((dim.height) + (insets.top)) + (insets.bottom))));\r\n                AttributeKeys.STROKE_COLOR.set(tef, null);\r\n                AttributeKeys.FILL_COLOR.set(tef, null);\r\n                AttributeKeys.TEXT_ALIGNMENT.set(tef, AttributeKeys.Alignment.CENTER);\r\n                // Alternatively, you could just create a TextFigure\r\n                /* TextFigure tef = new TextFigure(f.getName()); */\r\n                // Create a GraphicalCompositeFigure with vertical layout\r\n                // and add the icon and the text figure to it\r\n                GraphicalCompositeFigure gcf = new GraphicalCompositeFigure();\r\n                gcf.setLayouter(new VerticalLayouter());\r\n                AttributeKeys.COMPOSITE_ALIGNMENT.set(gcf, AttributeKeys.Alignment.CENTER);\r\n                gcf.add(imf);\r\n                gcf.add(tef);\r\n                gcf.layout();\r\n                // Lay out the graphical composite figures on the drawing\r\n                if (((i++) % maxColumn) == 0) {\r\n                    ty += rowHeight + 20;\r\n                    tx = 0;\r\n                    rowHeight = 0;\r\n                }\r\n                Rectangle2D.Double b = gcf.getBounds();\r\n                rowHeight = Math.max(rowHeight, b.height);\r\n                AffineTransform at = new AffineTransform();\r\n                at.translate(tx, ty);\r\n                gcf.transform(at);\r\n                tx += (b.width) + 20;\r\n                drawing.add(gcf);\r\n            }\r\n            // Show the drawing\r\n            JFrame f = new JFrame((\"Contents of directory \" + (dir.getName())));\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            DrawingView view = new DefaultDrawingView();\r\n            view.setDrawing(drawing);\r\n            f.getContentPane().add(view.getComponent());\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.setTool(new DelegationSelectionTool());\r\n            editor.add(view);\r\n            editor.setActiveView(view);\r\n            f.show();\r\n        }\r\n    });\r\n}'),(4579,'-init-()','org.jhotdraw.samples.mini.LabeledLineConnectionFigureSample.-init-()','474','org.jhotdraw.samples.mini.LabeledLineConnectionFigureSample','/**\r\n * Creates a new instance.\r\n */\r\npublic LabeledLineConnectionFigureSample() {\r\n}'),(4580,'main(java.lang.String[])','org.jhotdraw.samples.mini.LabeledLineConnectionFigureSample.main(java.lang.String[])','474','org.jhotdraw.samples.mini.LabeledLineConnectionFigureSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // Create the two rectangle figures\r\n            RectangleFigure ta = new RectangleFigure();\r\n            ta.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            RectangleFigure tb = new RectangleFigure();\r\n            tb.setBounds(new Point2D.Double(210, 110), new Point2D.Double(300, 200));\r\n            // Create a labeled line connection\r\n            LabeledLineConnectionFigure cf = new LabeledLineConnectionFigure();\r\n            cf.setLiner(new ElbowLiner());\r\n            cf.setLayouter(new LocatorLayouter());\r\n            // Create labels and add them to both ends of the labeled line connection\r\n            TextFigure startLabel = new TextFigure();\r\n            LocatorLayouter.LAYOUT_LOCATOR.basicSet(startLabel, new BezierLabelLocator(0, ((-(Math.PI)) / 4), 8));\r\n            startLabel.setEditable(false);\r\n            startLabel.setText(\"start\");\r\n            cf.add(startLabel);\r\n            TextFigure endLabel = new TextFigure();\r\n            LocatorLayouter.LAYOUT_LOCATOR.basicSet(endLabel, new BezierLabelLocator(1, ((Math.PI) + ((Math.PI) / 4)), 8));\r\n            endLabel.setEditable(false);\r\n            endLabel.setText(\"end\");\r\n            cf.add(endLabel);\r\n            // Connect the figures\r\n            cf.setStartConnector(ta.findConnector(Geom.center(ta.getBounds()), cf));\r\n            cf.setEndConnector(tb.findConnector(Geom.center(tb.getBounds()), cf));\r\n            // Add all figures to a drawing\r\n            Drawing drawing = new DefaultDrawing();\r\n            drawing.add(ta);\r\n            drawing.add(tb);\r\n            drawing.add(cf);\r\n            // Show the drawing\r\n            JFrame f = new JFrame(\"My Drawing\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            DrawingView view = new DefaultDrawingView();\r\n            view.setDrawing(drawing);\r\n            f.getContentPane().add(view.getComponent());\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4581,'-init-()','org.jhotdraw.samples.mini.LayouterSample.-init-()','475','org.jhotdraw.samples.mini.LayouterSample','LayouterSample() {\r\n}'),(4582,'main(java.lang.String[])','org.jhotdraw.samples.mini.LayouterSample.main(java.lang.String[])','475','org.jhotdraw.samples.mini.LayouterSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // Create a graphical composite figure.\r\n            GraphicalCompositeFigure composite = new GraphicalCompositeFigure();\r\n            // Add child figures to the composite figure\r\n            composite.add(new TextFigure(\"Above the line\"));\r\n            composite.add(new LineFigure());\r\n            composite.add(new TextFigure(\"Below the line\"));\r\n            // Set a layouter and perform the layout\r\n            composite.setLayouter(new VerticalLayouter());\r\n            composite.layout();\r\n            // Add the composite figure to a drawing\r\n            Drawing drawing = new DefaultDrawing();\r\n            drawing.add(composite);\r\n            // Create a frame with a drawing view and a drawing editor\r\n            JFrame f = new JFrame(\"My Drawing\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            DrawingView view = new DefaultDrawingView();\r\n            view.setDrawing(drawing);\r\n            f.getContentPane().add(view.getComponent());\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.add(view);\r\n            editor.setTool(new DelegationSelectionTool());\r\n            f.setVisible(true);\r\n        }\r\n    });\r\n}'),(4583,'-init-()','org.jhotdraw.samples.mini.MultiEditorSample.-init-()','476','org.jhotdraw.samples.mini.MultiEditorSample','MultiEditorSample() {\r\n}'),(4584,'createDrawing()','org.jhotdraw.samples.mini.MultiEditorSample.createDrawing()','476','org.jhotdraw.samples.mini.MultiEditorSample','/**\r\n * Creates a drawing with input and output formats, so that drawing figures\r\n * can be copied and pasted between drawing views.\r\n *\r\n * @return a drawing\r\n */\r\nprivate static Drawing createDrawing() {\r\n    // Create a default drawing with\r\n    // input/output formats for basic clipboard support.\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    drawing.addInputFormat(new SerializationInputOutputFormat());\r\n    drawing.addOutputFormat(new SerializationInputOutputFormat());\r\n    return drawing;\r\n}'),(4585,'main(java.lang.String[])','org.jhotdraw.samples.mini.MultiEditorSample.main(java.lang.String[])','476','org.jhotdraw.samples.mini.MultiEditorSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n            // Create four drawing views, each one with its own drawing\r\n            DrawingView view1 = new DefaultDrawingView();\r\n            view1.setDrawing(MultiEditorSample.createDrawing());\r\n            DrawingView view2 = new DefaultDrawingView();\r\n            view2.setDrawing(MultiEditorSample.createDrawing());\r\n            DrawingView view3 = new DefaultDrawingView();\r\n            view3.setDrawing(MultiEditorSample.createDrawing());\r\n            DrawingView view4 = new DefaultDrawingView();\r\n            view4.setDrawing(MultiEditorSample.createDrawing());\r\n            // Create a common drawing editor for the views\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.add(view1);\r\n            editor.add(view2);\r\n            editor.add(view3);\r\n            editor.add(view4);\r\n            // Create a tool bar with selection tool and a\r\n            // creation tool for rectangle figures.\r\n            JToolBar tb = new JToolBar();\r\n            ButtonFactory.addSelectionToolTo(tb, editor);\r\n            ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n            tb.setOrientation(JToolBar.VERTICAL);\r\n            // Put all together into a JFrame\r\n            JFrame f = new JFrame(\"Multi-Editor\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            // Set up the content pane\r\n            // Place the toolbar on the left\r\n            // Place each drawing view into a scroll pane of its own\r\n            // and put them into a larger scroll pane.\r\n            JPanel innerPane = new JPanel();\r\n            innerPane.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));\r\n            JScrollPane sp;\r\n            innerPane.add((sp = new JScrollPane(view1.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            innerPane.add((sp = new JScrollPane(view2.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            innerPane.add((sp = new JScrollPane(view3.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            innerPane.add((sp = new JScrollPane(view4.getComponent())));\r\n            sp.setPreferredSize(new Dimension(200, 200));\r\n            f.getContentPane().add(new JScrollPane(innerPane));\r\n            f.getContentPane().add(tb, BorderLayout.WEST);\r\n            f.show();\r\n        }\r\n    });\r\n}'),(4586,'-init-()','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample.-init-()','478','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample','QuickAndDirtyDOMStorableSample() {\r\n}'),(4587,'-init-(java.lang.String)','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample.-init-(java.lang.String)','478','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample','public MyObject(String name) {\r\n    this.name = name;\r\n}'),(4588,'main(java.lang.String[])','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample.main(java.lang.String[])','478','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample','public static void main(String[] args) {\r\n    try {\r\n        // Create a DOMStorable object\r\n        QuickAndDirtyDOMStorableSample.MyObject obj = new QuickAndDirtyDOMStorableSample.MyObject(\"Hello World\");\r\n        System.out.println((\"The name of the original object is:\" + (obj.getName())));\r\n        // Write the object into a DOM, and then serialize the DOM into a String\r\n        NanoXMLDOMOutput out = new NanoXMLDOMOutput(new QuickAndDirtyDOMFactory());\r\n        out.writeObject(obj);\r\n        StringWriter writer = new StringWriter();\r\n        out.save(writer);\r\n        String serializedString = writer.toString();\r\n        System.out.println((\"\nThe serialized representation of the object is:\n\" + serializedString));\r\n        // Deserialize a DOM from a String, and then read the object from the DOM\r\n        StringReader reader = new StringReader(serializedString);\r\n        NanoXMLDOMInput in = new NanoXMLDOMInput(new QuickAndDirtyDOMFactory(), reader);\r\n        QuickAndDirtyDOMStorableSample.MyObject obj2 = ((QuickAndDirtyDOMStorableSample.MyObject) (in.readObject()));\r\n        System.out.println((\"\nThe name of the restored object is:\" + (obj2.getName())));\r\n    } catch (IOException ex) {\r\n        Logger.getLogger(QuickAndDirtyDOMStorableSample.class.getName()).log(Level.SEVERE, null, ex);\r\n    }\r\n}'),(4589,'-init-()','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.-init-()','477','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject','/**\r\n * DOM Storable objects must have a non-argument constructor.\r\n */\r\npublic MyObject() {\r\n}'),(4590,'-init-(java.lang.String)','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.-init-(java.lang.String)','477','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject','public MyObject(String name) {\r\n    this.name = name;\r\n}'),(4591,'getName()','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.getName()','477','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject','public String getName() {\r\n    return name;\r\n}'),(4592,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.read(org.jhotdraw.xml.DOMInput)','477','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject','public void read(DOMInput in) throws IOException {\r\n    name = in.getAttribute(\"name\", null);\r\n}'),(4593,'setName(java.lang.String)','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.setName(java.lang.String)','477','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject','public void setName(String name) {\r\n    this.name = name;\r\n}'),(4594,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.write(org.jhotdraw.xml.DOMOutput)','477','org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject','public void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"name\", name);\r\n}'),(4595,'-init-()','org.jhotdraw.samples.mini.SelectionToolSample.-init-()','479','org.jhotdraw.samples.mini.SelectionToolSample','/**\r\n * Creates a new instance of SelectionToolSample\r\n */\r\npublic SelectionToolSample() {\r\n    LineFigure lf = new LineFigure();\r\n    lf.setBounds(new Point2D.Double(40, 40), new Point2D.Double(200, 40));\r\n    // Add all figures to a drawing\r\n    Drawing drawing = new DefaultDrawing();\r\n    drawing.add(lf);\r\n    // Show the drawing\r\n    JFrame f = new JFrame(\"UltraMini\");\r\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    f.setSize(600, 300);\r\n    DrawingView view = new DefaultDrawingView();\r\n    view.setDrawing(drawing);\r\n    f.getContentPane().add(view.getComponent());\r\n    // set up the drawing editor\r\n    DrawingEditor editor = new DefaultDrawingEditor();\r\n    editor.add(view);\r\n    // Activate the following line to see the SelectionTool in full\r\n    // action.\r\n    editor.setTool(new SelectionTool());\r\n    // Activate the following line to only see the SelectAreaTracker in\r\n    // action.\r\n    // editor.setTool(new SelectAreaTracker());\r\n    // Activate the following line to only see the DragTracker in\r\n    // action.\r\n    // editor.setTool(new DragTracker(lf));\r\n    // Activate the following lines to only see the HandleTracker in\r\n    // action.\r\n    // view.selectAll();\r\n    // editor.setTool(new HandleTracker(view.findHandle(view.drawingToView(lf.getStartPoint()))));\r\n    f.show();\r\n}'),(4596,'main(java.lang.String[])','org.jhotdraw.samples.mini.SelectionToolSample.main(java.lang.String[])','479','org.jhotdraw.samples.mini.SelectionToolSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            new SelectionToolSample();\r\n        }\r\n    });\r\n}'),(4597,'-init-()','org.jhotdraw.samples.mini.SmartConnectionFigureSample.-init-()','481','org.jhotdraw.samples.mini.SmartConnectionFigureSample','SmartConnectionFigureSample() {\r\n}'),(4598,'main(java.lang.String[])','org.jhotdraw.samples.mini.SmartConnectionFigureSample.main(java.lang.String[])','481','org.jhotdraw.samples.mini.SmartConnectionFigureSample','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // Create a simple drawing consisting of three\r\n            // text areas and an elbow connection.\r\n            TextAreaFigure ta = new TextAreaFigure();\r\n            ta.setBounds(new Point2D.Double(10, 30), new Point2D.Double(100, 100));\r\n            TextAreaFigure tb = new TextAreaFigure();\r\n            tb.setBounds(new Point2D.Double(220, 130), new Point2D.Double(310, 210));\r\n            TextAreaFigure tc = new TextAreaFigure();\r\n            tc.setBounds(new Point2D.Double(220, 30), new Point2D.Double(310, 100));\r\n            ConnectionFigure cf = new SmartConnectionFigureSample.SmartConnectionFigure();\r\n            cf.setLiner(new ElbowLiner());\r\n            cf.setStartConnector(ta.findConnector(Geom.center(ta.getBounds()), cf));\r\n            cf.setEndConnector(tb.findConnector(Geom.center(tb.getBounds()), cf));\r\n            Drawing drawing = new DefaultDrawing();\r\n            drawing.add(ta);\r\n            drawing.add(tb);\r\n            drawing.add(tc);\r\n            drawing.add(cf);\r\n            // Show the drawing\r\n            JFrame f = new JFrame(\"Smart ConnectionFigure Sample\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            f.setSize(400, 300);\r\n            // Set up the drawing view\r\n            DrawingView view = new DefaultDrawingView();\r\n            view.setDrawing(drawing);\r\n            f.getContentPane().add(view.getComponent());\r\n            // Set up the drawing editor\r\n            DrawingEditor editor = new DefaultDrawingEditor();\r\n            editor.add(view);\r\n            editor.setTool(new DelegationSelectionTool());\r\n            f.show();\r\n        }\r\n    });\r\n}'),(4599,'-init-()','org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.-init-()','480','org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure','public SmartConnectionFigure() {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(4600,'handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','480','org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure','@Override\r\npublic void handleConnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, ((start.getOwner()) == (end.getOwner()) ? AttributeKeys.StrokeType.DOUBLE : AttributeKeys.StrokeType.BASIC));\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(4601,'handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','480','org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure','@Override\r\npublic void handleDisconnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, AttributeKeys.StrokeType.BASIC);\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(4602,'-init-()','org.jhotdraw.samples.mini.StraightLineFigure.-init-()','482','org.jhotdraw.samples.mini.StraightLineFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic StraightLineFigure() {\r\n    line = new Line2D.Double();\r\n}'),(4603,'clone()','org.jhotdraw.samples.mini.StraightLineFigure.clone()','482','org.jhotdraw.samples.mini.StraightLineFigure','public StraightLineFigure clone() {\r\n    StraightLineFigure that = ((StraightLineFigure) (super.clone()));\r\n    that.line = ((Line2D.Double) (this.line.clone()));\r\n    return that;\r\n}'),(4604,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.mini.StraightLineFigure.contains(java.awt.geom.Point2D$Double)','482','org.jhotdraw.samples.mini.StraightLineFigure','public boolean contains(Point2D.Double p) {\r\n    return Geom.lineContainsPoint(line.x1, line.y1, line.x2, line.y2, p.x, p.y, AttributeKeys.getStrokeTotalWidth(this));\r\n}'),(4605,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.mini.StraightLineFigure.drawFill(java.awt.Graphics2D)','482','org.jhotdraw.samples.mini.StraightLineFigure','protected void drawFill(Graphics2D g) {\r\n}'),(4606,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.mini.StraightLineFigure.drawStroke(java.awt.Graphics2D)','482','org.jhotdraw.samples.mini.StraightLineFigure','protected void drawStroke(Graphics2D g) {\r\n    g.draw(line);\r\n}'),(4607,'getBounds()','org.jhotdraw.samples.mini.StraightLineFigure.getBounds()','482','org.jhotdraw.samples.mini.StraightLineFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (line.getBounds2D()));\r\n}'),(4608,'getTransformRestoreData()','org.jhotdraw.samples.mini.StraightLineFigure.getTransformRestoreData()','482','org.jhotdraw.samples.mini.StraightLineFigure','public Object getTransformRestoreData() {\r\n    return line.clone();\r\n}'),(4609,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.mini.StraightLineFigure.restoreTransformTo(java.lang.Object)','482','org.jhotdraw.samples.mini.StraightLineFigure','public void restoreTransformTo(Object restoreData) {\r\n    line = ((Line2D.Double) (((Line2D.Double) (restoreData)).clone()));\r\n}'),(4610,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.mini.StraightLineFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','482','org.jhotdraw.samples.mini.StraightLineFigure','public void setBounds(Point2D.Double start, Point2D.Double end) {\r\n    line.setLine(start, end);\r\n}'),(4611,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.mini.StraightLineFigure.transform(java.awt.geom.AffineTransform)','482','org.jhotdraw.samples.mini.StraightLineFigure','public void transform(AffineTransform ty) {\r\n    Point2D.Double p1 = ((Point2D.Double) (line.getP1()));\r\n    Point2D.Double p2 = ((Point2D.Double) (line.getP2()));\r\n    line.setLine(ty.transform(p1, p1), ty.transform(p2, p2));\r\n}'),(4612,'-init-()','org.jhotdraw.samples.net.Main.-init-()','483','org.jhotdraw.samples.net.Main','Main() {\r\n}'),(4613,'main(java.lang.String[])','org.jhotdraw.samples.net.Main.main(java.lang.String[])','483','org.jhotdraw.samples.net.Main','/**\r\n * Creates a new instance.\r\n */\r\npublic static void main(String[] args) {\r\n    Application app;\r\n    String os = System.getProperty(\"os.name\").toLowerCase();\r\n    if (os.startsWith(\"mac\")) {\r\n        app = new DefaultOSXApplication();\r\n    } else\r\n        if (os.startsWith(\"win\")) {\r\n            // app = new DefaultMDIApplication();\r\n            app = new DefaultSDIApplication();\r\n        } else {\r\n            app = new DefaultSDIApplication();\r\n        }\r\n\r\n    DefaultApplicationModel model = new NetApplicationModel();\r\n    model.setName(\"JHotDraw Net\");\r\n    model.setVersion(Main.class.getPackage().getImplementationVersion());\r\n    model.setCopyright((\"Copyright 2006-2009 (c) by the authors of JHotDraw\n\" + \"This software is licensed under LGPL or Creative Commons 3.0 BY\"));\r\n    model.setViewClassName(\"org.jhotdraw.samples.net.NetView\");\r\n    app.setModel(model);\r\n    app.launch(args);\r\n}'),(4614,'-init-()','org.jhotdraw.samples.net.NetApplet.-init-()','484','org.jhotdraw.samples.net.NetApplet','NetApplet() {\r\n}'),(4615,'getAppletInfo()','org.jhotdraw.samples.net.NetApplet.getAppletInfo()','484','org.jhotdraw.samples.net.NetApplet','public String getAppletInfo() {\r\n    return (((((NetApplet.NAME) + \"\nVersion \") + (getVersion())) + \"\n\nCopyright 1996-2009 (c) by the original authors of JHotDraw and all its contributors\") + \"\nThis software is licensed under LGPL or\") + \"\nCreative Commons 3.0 BY\";\r\n}'),(4616,'getData()','org.jhotdraw.samples.net.NetApplet.getData()','484','org.jhotdraw.samples.net.NetApplet','public String getData() {\r\n    CharArrayWriter out = new CharArrayWriter();\r\n    try {\r\n        NanoXMLDOMOutput domo = new NanoXMLDOMOutput(new NetFactory());\r\n        domo.openElement(\"Net\");\r\n        domo.writeObject(getDrawing());\r\n        domo.closeElement();\r\n        domo.save(out);\r\n    } catch (IOException e) {\r\n        TextFigure tf = new TextFigure();\r\n        tf.setText(e.getMessage());\r\n        tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n        getDrawing().add(tf);\r\n        e.printStackTrace();\r\n    } finally {\r\n        if (out != null)\r\n            out.close();\r\n\r\n    }\r\n    return out.toString();\r\n}'),(4617,'getDrawing()','org.jhotdraw.samples.net.NetApplet.getDrawing()','484','org.jhotdraw.samples.net.NetApplet','private Drawing getDrawing() {\r\n    return drawingPanel.getDrawing();\r\n}'),(4618,'getParameter(java.lang.String)','org.jhotdraw.samples.net.NetApplet.getParameter(java.lang.String)','484','org.jhotdraw.samples.net.NetApplet','/**\r\n * We override getParameter() to make it work even if we have no Applet\r\n * context.\r\n */\r\npublic String getParameter(String name) {\r\n    try {\r\n        return super.getParameter(name);\r\n    } catch (NullPointerException e) {\r\n        return null;\r\n    }\r\n}'),(4619,'getParameterInfo()','org.jhotdraw.samples.net.NetApplet.getParameterInfo()','484','org.jhotdraw.samples.net.NetApplet','public String[][] getParameterInfo() {\r\n    return new String[][]{ new String[]{ \"data\", \"String\", \"the data to be displayed by this applet.\" }, new String[]{ \"datafile\", \"URL\", \"an URL to a file containing the data to be displayed by this applet.\" } };\r\n}'),(4620,'getVersion()','org.jhotdraw.samples.net.NetApplet.getVersion()','484','org.jhotdraw.samples.net.NetApplet','protected String getVersion() {\r\n    return NetApplet.class.getPackage().getImplementationVersion();\r\n}'),(4621,'init()','org.jhotdraw.samples.net.NetApplet.init()','484','org.jhotdraw.samples.net.NetApplet','/**\r\n * Initializes the applet NetApplet\r\n */\r\npublic void init() {\r\n    // Set look and feel\r\n    // -----------------\r\n    try {\r\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n    } catch (Throwable e) {\r\n        // Do nothing.\r\n        // If we cant set the desired look and feel, UIManager does\r\n        // automaticaly the right thing for us.\r\n    }\r\n    // Display copyright info while we are loading the data\r\n    // ----------------------------------------------------\r\n    Container c = getContentPane();\r\n    c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));\r\n    String[] labels = getAppletInfo().split(\"\n\");// Strings.split(getAppletInfo(), \n);\r\n\r\n    for (int i = 0; i < (labels.length); i++) {\r\n        c.add(new JLabel(((labels[i].length()) == 0 ? \" \" : labels[i])));\r\n    }\r\n    // We load the data using a worker thread\r\n    // --------------------------------------\r\n    new Worker() {\r\n        public Object construct() {\r\n            Object result;\r\n            try {\r\n                System.out.println((\"getParameter.datafile:\" + (getParameter(\"datafile\"))));\r\n                if ((getParameter(\"data\")) != null) {\r\n                    NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), new StringReader(getParameter(\"data\")));\r\n                    result = domi.readObject(0);\r\n                } else\r\n                    if ((getParameter(\"datafile\")) != null) {\r\n                        InputStream in = null;\r\n                        try {\r\n                            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n                            in = url.openConnection().getInputStream();\r\n                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), in);\r\n                            result = domi.readObject(0);\r\n                        } finally {\r\n                            if (in != null)\r\n                                in.close();\r\n\r\n                        }\r\n                    } else {\r\n                        result = null;\r\n                    }\r\n\r\n            } catch (Throwable t) {\r\n                result = t;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public void finished(Object result) {\r\n            if (result instanceof Throwable) {\r\n                ((Throwable) (result)).printStackTrace();\r\n            }\r\n            Container c = getContentPane();\r\n            c.setLayout(new BorderLayout());\r\n            c.removeAll();\r\n            c.add((drawingPanel = new NetPanel()));\r\n            initComponents();\r\n            if (result != null) {\r\n                if (result instanceof Drawing) {\r\n                    Drawing drawing = ((Drawing) (result));\r\n                    setDrawing(drawing);\r\n                } else\r\n                    if (result instanceof Throwable) {\r\n                        getDrawing().add(new TextFigure(result.toString()));\r\n                        ((Throwable) (result)).printStackTrace();\r\n                    }\r\n\r\n            }\r\n            initDrawing(getDrawing());\r\n            c.validate();\r\n        }\r\n    }.start();\r\n}'),(4622,'initComponents()','org.jhotdraw.samples.net.NetApplet.initComponents()','484','org.jhotdraw.samples.net.NetApplet','/**\r\n * This method is called from within the init() method to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    toolButtonGroup = new ButtonGroup();\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4623,'initDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.net.NetApplet.initDrawing(org.jhotdraw.draw.Drawing)','484','org.jhotdraw.samples.net.NetApplet','/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initDrawing(Drawing d) {\r\n    d.setInputFormats(((List<InputFormat>) (Collections.EMPTY_LIST)));\r\n    d.setOutputFormats(((List<OutputFormat>) (Collections.EMPTY_LIST)));\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new NetFactory());\r\n    d.addInputFormat(ioFormat);\r\n    d.addInputFormat(new ImageInputFormat(new ImageFigure()));\r\n    d.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    d.addOutputFormat(ioFormat);\r\n    d.addOutputFormat(new ImageOutputFormat());\r\n}'),(4624,'main(java.lang.String[])','org.jhotdraw.samples.net.NetApplet.main(java.lang.String[])','484','org.jhotdraw.samples.net.NetApplet','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"JHotDraw Net Applet\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            NetApplet a = new NetApplet();\r\n            f.getContentPane().add(a);\r\n            a.init();\r\n            f.setSize(500, 400);\r\n            f.setVisible(true);\r\n            a.start();\r\n        }\r\n    });\r\n}'),(4625,'setData(java.lang.String)','org.jhotdraw.samples.net.NetApplet.setData(java.lang.String)','484','org.jhotdraw.samples.net.NetApplet','public void setData(String text) {\r\n    if ((text != null) && ((text.length()) > 0)) {\r\n        StringReader in = new StringReader(text);\r\n        try {\r\n            NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), in);\r\n            domi.openElement(\"Net\");\r\n            setDrawing(((Drawing) (domi.readObject(0))));\r\n        } catch (Throwable e) {\r\n            getDrawing().removeAllChildren();\r\n            TextFigure tf = new TextFigure();\r\n            tf.setText(e.getMessage());\r\n            tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            getDrawing().add(tf);\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (in != null)\r\n                in.close();\r\n\r\n        }\r\n    }\r\n}'),(4626,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.net.NetApplet.setDrawing(org.jhotdraw.draw.Drawing)','484','org.jhotdraw.samples.net.NetApplet','private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(4627,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.net.NetApplicationModel.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','486','org.jhotdraw.samples.net.NetApplicationModel','public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(4628,'-init-()','org.jhotdraw.samples.net.NetApplicationModel.-init-()','486','org.jhotdraw.samples.net.NetApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic NetApplicationModel() {\r\n}'),(4629,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.net.NetApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','486','org.jhotdraw.samples.net.NetApplicationModel','private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new NodeFigure(), attributes), \"edit.createNode\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure(), attributes), \"edit.createLink\", labels);\r\n}'),(4630,'createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.net.NetApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','486','org.jhotdraw.samples.net.NetApplicationModel','public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    NetView p = ((NetView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"view.toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"view.toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(4631,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.net.NetApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','486','org.jhotdraw.samples.net.NetApplicationModel','/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    NetView p = ((NetView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getDrawingEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(4632,'getSharedEditor()','org.jhotdraw.samples.net.NetApplicationModel.getSharedEditor()','486','org.jhotdraw.samples.net.NetApplicationModel','public DefaultDrawingEditor getSharedEditor() {\r\n    if ((sharedEditor) == null) {\r\n        sharedEditor = new DefaultDrawingEditor();\r\n    }\r\n    return sharedEditor;\r\n}'),(4633,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.samples.net.NetApplicationModel.initApplication(org.jhotdraw.app.Application)','486','org.jhotdraw.samples.net.NetApplicationModel','public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"view.toggleGrid\", (aa = new ToggleViewPropertyAction(a, NetView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n}'),(4634,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.net.NetApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','486','org.jhotdraw.samples.net.NetApplicationModel','public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((NetView) (p)).setDrawingEditor(getSharedEditor());\r\n    }\r\n}'),(4635,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','485','org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener','public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(4636,'itemStateChanged(java.awt.event.ItemEvent)','org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener.itemStateChanged(java.awt.event.ItemEvent)','485','org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener','public void itemStateChanged(ItemEvent evt) {\r\n    if ((evt.getStateChange()) == (ItemEvent.SELECTED)) {\r\n        editor.setTool(tool);\r\n    }\r\n}'),(4637,'-init-()','org.jhotdraw.samples.net.NetFactory.-init-()','487','org.jhotdraw.samples.net.NetFactory','/**\r\n * Creates a new instance.\r\n */\r\npublic NetFactory() {\r\n    for (Object[] o : NetFactory.classTagArray) {\r\n        addStorableClass(((String) (o[1])), ((Class) (o[0])));\r\n    }\r\n    for (Object[] o : NetFactory.enumTagArray) {\r\n        addEnumClass(((String) (o[1])), ((Class) (o[0])));\r\n    }\r\n}'),(4638,'-init-()','org.jhotdraw.samples.net.NetPanel.-init-()','488','org.jhotdraw.samples.net.NetPanel','/**\r\n * Creates new instance.\r\n */\r\npublic NetPanel() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    initComponents();\r\n    undoManager = new UndoRedoManager();\r\n    editor = new DefaultDrawingEditor();\r\n    editor.add(view);\r\n    addCreationButtonsTo(creationToolbar, editor);\r\n    ButtonFactory.addAttributesButtonsTo(attributesToolbar, editor);\r\n    JPopupButton pb = new JPopupButton();\r\n    pb.setItemFont(UIManager.getFont(\"MenuItem.font\"));\r\n    labels.configureToolBarButton(pb, \"actions\");\r\n    pb.add(new DuplicateAction());\r\n    pb.addSeparator();\r\n    pb.add(new GroupAction(editor));\r\n    pb.add(new UngroupAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new BringToFrontAction(editor));\r\n    pb.add(new SendToBackAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new CutAction());\r\n    pb.add(new CopyAction());\r\n    pb.add(new PasteAction());\r\n    pb.add(new SelectAllAction());\r\n    pb.add(new SelectSameAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(undoManager.getUndoAction());\r\n    pb.add(undoManager.getRedoAction());\r\n    // FIXME - We need a toggle grid action\r\n    // pb.addSeparator();\r\n    // pb.add(new ToggleGridAction(editor));\r\n    JMenu m = new JMenu(labels.getString(\"view.zoomFactor.text\"));\r\n    JRadioButtonMenuItem rbmi;\r\n    ButtonGroup group = new ButtonGroup();\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null))));\r\n    rbmi.setSelected(true);\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null))));\r\n    group.add(rbmi);\r\n    pb.add(m);\r\n    pb.setFocusable(false);\r\n    creationToolbar.addSeparator();\r\n    creationToolbar.add(pb);\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    view.setDrawing(drawing);\r\n    drawing.addUndoableEditListener(undoManager);\r\n}'),(4639,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.net.NetPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','488','org.jhotdraw.samples.net.NetPanel','private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new NodeFigure(), attributes), \"edit.createNode\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure(), attributes), \"edit.createLink\", labels);\r\n}'),(4640,'getDrawing()','org.jhotdraw.samples.net.NetPanel.getDrawing()','488','org.jhotdraw.samples.net.NetPanel','public Drawing getDrawing() {\r\n    return view.getDrawing();\r\n}'),(4641,'getEditor()','org.jhotdraw.samples.net.NetPanel.getEditor()','488','org.jhotdraw.samples.net.NetPanel','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(4642,'getView()','org.jhotdraw.samples.net.NetPanel.getView()','488','org.jhotdraw.samples.net.NetPanel','public DrawingView getView() {\r\n    return view;\r\n}'),(4643,'initComponents()','org.jhotdraw.samples.net.NetPanel.initComponents()','488','org.jhotdraw.samples.net.NetPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    toolButtonGroup = new ButtonGroup();\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    jPanel1 = new JPanel();\r\n    creationToolbar = new JToolBar();\r\n    attributesToolbar = new JToolBar();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    jPanel1.setLayout(new GridBagLayout());\r\n    creationToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 0;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(creationToolbar, gridBagConstraints);\r\n    attributesToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 1;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(attributesToolbar, gridBagConstraints);\r\n    add(jPanel1, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4644,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.net.NetPanel.setDrawing(org.jhotdraw.draw.Drawing)','488','org.jhotdraw.samples.net.NetPanel','public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(4645,'-init-()','org.jhotdraw.samples.net.NetView.-init-()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Creates a new view.\r\n */\r\npublic NetView() {\r\n}'),(4646,'canSaveTo(java.io.File)','org.jhotdraw.samples.net.NetView.canSaveTo(java.io.File)','489','org.jhotdraw.samples.net.NetView','@Override\r\npublic boolean canSaveTo(File file) {\r\n    return file.getName().endsWith(\".xml\");\r\n}'),(4647,'clear()','org.jhotdraw.samples.net.NetView.clear()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Clears the view.\r\n */\r\npublic void clear() {\r\n    final Drawing newDrawing = createDrawing();\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(newDrawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InvocationTargetException ex) {\r\n        ex.printStackTrace();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(4648,'createDrawing()','org.jhotdraw.samples.net.NetView.createDrawing()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Creates a new Drawing for this view.\r\n */\r\nprotected Drawing createDrawing() {\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new NetFactory());\r\n    drawing.addInputFormat(ioFormat);\r\n    drawing.addInputFormat(new TextInputFormat(new NodeFigure()));\r\n    drawing.addOutputFormat(ioFormat);\r\n    drawing.addOutputFormat(new ImageOutputFormat());\r\n    return drawing;\r\n}'),(4649,'createOpenChooser()','org.jhotdraw.samples.net.NetView.createOpenChooser()','489','org.jhotdraw.samples.net.NetView','@Override\r\nprotected JFileChooser createOpenChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    c.addChoosableFileFilter(new ExtensionFileFilter(\"Net Diagram\", \"xml\"));\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(4650,'createPageable()','org.jhotdraw.samples.net.NetView.createPageable()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Creates a Pageable object for printing the view.\r\n */\r\npublic Pageable createPageable() {\r\n    return new DrawingPageable(view.getDrawing());\r\n}'),(4651,'createSaveChooser()','org.jhotdraw.samples.net.NetView.createSaveChooser()','489','org.jhotdraw.samples.net.NetView','@Override\r\nprotected JFileChooser createSaveChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    c.addChoosableFileFilter(new ExtensionFileFilter(\"Net Diagram\", \"xml\"));\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(4652,'getDrawingEditor()','org.jhotdraw.samples.net.NetView.getDrawingEditor()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Gets the drawing editor of the view.\r\n */\r\npublic DrawingEditor getDrawingEditor() {\r\n    return editor;\r\n}'),(4653,'getEditor()','org.jhotdraw.samples.net.NetView.getEditor()','489','org.jhotdraw.samples.net.NetView','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(4654,'getScaleFactor()','org.jhotdraw.samples.net.NetView.getScaleFactor()','489','org.jhotdraw.samples.net.NetView','public double getScaleFactor() {\r\n    return view.getScaleFactor();\r\n}'),(4655,'init()','org.jhotdraw.samples.net.NetView.init()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Initializes the view.\r\n */\r\npublic void init() {\r\n    super.init();\r\n    initComponents();\r\n    JPanel zoomButtonPanel = new JPanel(new BorderLayout());\r\n    scrollPane.setLayout(new PlacardScrollPaneLayout());\r\n    scrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));\r\n    setEditor(new DefaultDrawingEditor());\r\n    undo = new UndoRedoManager();\r\n    view.setDrawing(createDrawing());\r\n    view.getDrawing().addUndoableEditListener(undo);\r\n    initActions();\r\n    undo.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            setHasUnsavedChanges(undo.hasSignificantEdits());\r\n        }\r\n    });\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPanel placardPanel = new JPanel(new BorderLayout());\r\n    AbstractButton pButton;\r\n    pButton = ButtonFactory.createZoomButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    placardPanel.add(pButton, BorderLayout.WEST);\r\n    toggleGridButton = pButton = ButtonFactory.createToggleGridButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    labels.configureToolBarButton(pButton, \"view.toggleGrid.placard\");\r\n    placardPanel.add(pButton, BorderLayout.EAST);\r\n    scrollPane.add(placardPanel, JScrollPane.LOWER_LEFT_CORNER);\r\n    toggleGridButton.setSelected(preferences.getBoolean(\"view.gridVisible\", false));\r\n    view.setScaleFactor(preferences.getDouble(\"view.scaleFactor\", 1.0));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name.equals(\"scaleFactor\")) {\r\n                preferences.putDouble(\"view.scaleFactor\", ((Double) (evt.getNewValue())));\r\n                firePropertyChange(\"scaleFactor\", evt.getOldValue(), evt.getNewValue());\r\n            }\r\n        }\r\n    });\r\n}'),(4656,'initActions()','org.jhotdraw.samples.net.NetView.initActions()','489','org.jhotdraw.samples.net.NetView','/**\r\n * Initializes view specific actions.\r\n */\r\nprivate void initActions() {\r\n    putAction(UndoAction.ID, undo.getUndoAction());\r\n    putAction(RedoAction.ID, undo.getRedoAction());\r\n}'),(4657,'initComponents()','org.jhotdraw.samples.net.NetView.initComponents()','489','org.jhotdraw.samples.net.NetView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4658,'isGridVisible()','org.jhotdraw.samples.net.NetView.isGridVisible()','489','org.jhotdraw.samples.net.NetView','public boolean isGridVisible() {\r\n    return view.isConstrainerVisible();\r\n}'),(4659,'read(java.io.File)','org.jhotdraw.samples.net.NetView.read(java.io.File)','489','org.jhotdraw.samples.net.NetView','/**\r\n * Reads the view from the specified file.\r\n */\r\npublic void read(File f) throws IOException {\r\n    try {\r\n        final Drawing drawing = createDrawing();\r\n        InputFormat inputFormat = drawing.getInputFormats().get(0);\r\n        inputFormat.read(f, drawing, true);\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(drawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(4660,'setDrawingEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.net.NetView.setDrawingEditor(org.jhotdraw.draw.DrawingEditor)','489','org.jhotdraw.samples.net.NetView','/**\r\n * Sets a drawing editor for the view.\r\n */\r\npublic void setDrawingEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.add(view);\r\n    }\r\n}'),(4661,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.net.NetView.setEditor(org.jhotdraw.draw.DrawingEditor)','489','org.jhotdraw.samples.net.NetView','public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}'),(4662,'setGridVisible(boolean)','org.jhotdraw.samples.net.NetView.setGridVisible(boolean)','489','org.jhotdraw.samples.net.NetView','public void setGridVisible(boolean newValue) {\r\n    boolean oldValue = isGridVisible();\r\n    view.setConstrainerVisible(newValue);\r\n    firePropertyChange(NetView.GRID_VISIBLE_PROPERTY, oldValue, newValue);\r\n}'),(4663,'setHasUnsavedChanges(boolean)','org.jhotdraw.samples.net.NetView.setHasUnsavedChanges(boolean)','489','org.jhotdraw.samples.net.NetView','protected void setHasUnsavedChanges(boolean newValue) {\r\n    super.setHasUnsavedChanges(newValue);\r\n    undo.setHasSignificantEdits(newValue);\r\n}'),(4664,'setScaleFactor(double)','org.jhotdraw.samples.net.NetView.setScaleFactor(double)','489','org.jhotdraw.samples.net.NetView','public void setScaleFactor(double newValue) {\r\n    view.setScaleFactor(newValue);\r\n}'),(4665,'write(java.io.File)','org.jhotdraw.samples.net.NetView.write(java.io.File)','489','org.jhotdraw.samples.net.NetView','/**\r\n * Writes the view to the specified file.\r\n */\r\npublic void write(File f) throws IOException {\r\n    Drawing drawing = view.getDrawing();\r\n    OutputFormat outputFormat = drawing.getOutputFormats().get(0);\r\n    outputFormat.write(f, drawing);\r\n}'),(4666,'-init-()','org.jhotdraw.samples.net.figures.NodeFigure.-init-()','490','org.jhotdraw.samples.net.figures.NodeFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic NodeFigure() {\r\n    RectangleFigure rf = new RectangleFigure();\r\n    setDecorator(rf);\r\n    createConnectors();\r\n    AttributeKeys.DECORATOR_INSETS.basicSet(this, new Insets2D.Double(6, 10, 6, 10));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    setText(labels.getString(\"nodeDefaultName\"));\r\n    setAttributeEnabled(AttributeKeys.DECORATOR_INSETS, false);\r\n}'),(4667,'clone()','org.jhotdraw.samples.net.figures.NodeFigure.clone()','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic NodeFigure clone() {\r\n    NodeFigure that = ((NodeFigure) (super.clone()));\r\n    that.createConnectors();\r\n    return that;\r\n}'),(4668,'createConnectors()','org.jhotdraw.samples.net.figures.NodeFigure.createConnectors()','490','org.jhotdraw.samples.net.figures.NodeFigure','private void createConnectors() {\r\n    connectors = new LinkedList<Connector>();\r\n    connectors.add(new LocatorConnector(this, RelativeLocator.north()));\r\n    connectors.add(new LocatorConnector(this, RelativeLocator.east()));\r\n    connectors.add(new LocatorConnector(this, RelativeLocator.west()));\r\n    connectors.add(new LocatorConnector(this, RelativeLocator.south()));\r\n}'),(4669,'createHandles(int)','org.jhotdraw.samples.net.figures.NodeFigure.createHandles(int)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    List<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            handles.add(new BoundsOutlineHandle(getDecorator(), false, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new MoveHandle(this, RelativeLocator.northWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.northEast()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southEast()));\r\n            for (Connector c : connectors) {\r\n                handles.add(new ConnectorHandle(c, new LineConnectionFigure()));\r\n            }\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(4670,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.net.figures.NodeFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    if (c instanceof LocatorConnector) {\r\n        LocatorConnector lc = ((LocatorConnector) (c));\r\n        for (Connector cc : connectors) {\r\n            LocatorConnector lcc = ((LocatorConnector) (cc));\r\n            if (lcc.getLocator().equals(lc.getLocator())) {\r\n                return lcc;\r\n            }\r\n        }\r\n    }\r\n    return connectors.getFirst();\r\n}'),(4671,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.net.figures.NodeFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure figure) {\r\n    // return closest connector\r\n    double min = Double.MAX_VALUE;\r\n    Connector closest = null;\r\n    for (Connector c : connectors) {\r\n        Point2D.Double p2 = Geom.center(c.getBounds());\r\n        double d = Geom.length2(p.x, p.y, p2.x, p2.y);\r\n        if (d < min) {\r\n            min = d;\r\n            closest = c;\r\n        }\r\n    }\r\n    return closest;\r\n}'),(4672,'getConnectors(org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.net.figures.NodeFigure.getConnectors(org.jhotdraw.draw.ConnectionFigure)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic Collection<Connector> getConnectors(ConnectionFigure prototype) {\r\n    return ((List<Connector>) (Collections.unmodifiableList(connectors)));\r\n}'),(4673,'getFigureDrawingArea()','org.jhotdraw.samples.net.figures.NodeFigure.getFigureDrawingArea()','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic Rectangle2D.Double getFigureDrawingArea() {\r\n    Rectangle2D.Double b = super.getFigureDrawingArea();\r\n    // Grow for connectors\r\n    Geom.grow(b, 10.0, 10.0);\r\n    return b;\r\n}'),(4674,'getLayer()','org.jhotdraw.samples.net.figures.NodeFigure.getLayer()','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic int getLayer() {\r\n    return -1;// stay below ConnectionFigures\r\n\r\n}'),(4675,'readDecorator(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.net.figures.NodeFigure.readDecorator(org.jhotdraw.xml.DOMInput)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\nprotected void readDecorator(DOMInput in) throws IOException {\r\n    // do nothing\r\n}'),(4676,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.net.figures.NodeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    if ((getDecorator()) != null) {\r\n        key.basicSet(getDecorator(), newValue);\r\n    }\r\n}'),(4677,'writeDecorator(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.net.figures.NodeFigure.writeDecorator(org.jhotdraw.xml.DOMOutput)','490','org.jhotdraw.samples.net.figures.NodeFigure','@Override\r\nprotected void writeDecorator(DOMOutput out) throws IOException {\r\n    // do nothing\r\n}'),(4678,'clone()','org.jhotdraw.samples.odg.Gradient.clone()','491','org.jhotdraw.samples.odg.Gradient','public Object clone();'),(4679,'getPaint(org.jhotdraw.draw.Figure,double)','org.jhotdraw.samples.odg.Gradient.getPaint(org.jhotdraw.draw.Figure,double)','491','org.jhotdraw.samples.odg.Gradient','public Paint getPaint(Figure f, double opacity);'),(4680,'isRelativeToFigureBounds()','org.jhotdraw.samples.odg.Gradient.isRelativeToFigureBounds()','491','org.jhotdraw.samples.odg.Gradient','public boolean isRelativeToFigureBounds();'),(4681,'makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.Gradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','491','org.jhotdraw.samples.odg.Gradient','public void makeRelativeToFigureBounds(Figure f);'),(4682,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.odg.Gradient.transform(java.awt.geom.AffineTransform)','491','org.jhotdraw.samples.odg.Gradient','public void transform(AffineTransform tx);'),(4683,'-init-()','org.jhotdraw.samples.odg.Main.-init-()','492','org.jhotdraw.samples.odg.Main','/**\r\n * Creates a new instance.\r\n */\r\npublic Main() {\r\n}'),(4684,'main(java.lang.String[])','org.jhotdraw.samples.odg.Main.main(java.lang.String[])','492','org.jhotdraw.samples.odg.Main','/**\r\n *\r\n *\r\n * @param args\r\n * 		the command line arguments\r\n */\r\npublic static void main(String[] args) {\r\n    Application app = new DefaultOSXApplication();\r\n    ApplicationModel appModel = new ODGApplicationModel();\r\n    app.setModel(appModel);\r\n    app.launch(args);\r\n    // TODO code application logic here\r\n}'),(4685,'-init-()','org.jhotdraw.samples.odg.ODGApplicationModel.-init-()','493','org.jhotdraw.samples.odg.ODGApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGApplicationModel() {\r\n    setViewClass(ODGView.class);\r\n}'),(4686,'addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGApplicationModel.addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','493','org.jhotdraw.samples.odg.ODGApplicationModel','/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\nprivate void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JButton b;\r\n    b = bar.add(new PickAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    b = bar.add(new ApplyAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    bar.addSeparator();\r\n    addColorButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    addStrokeButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addFontButtonsTo(bar, editor);\r\n}'),(4687,'addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGApplicationModel.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','493','org.jhotdraw.samples.odg.ODGApplicationModel','private void addColorButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    HashMap<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    ODGAttributeKeys.STROKE_GRADIENT.set(defaultAttributes, ((Gradient) (null)));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.STROKE_COLOR, ButtonFactory.WEBSAVE_COLORS, ButtonFactory.WEBSAVE_COLORS_COLUMN_COUNT, \"attribute.strokeColor\", labels, defaultAttributes));\r\n    defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    ODGAttributeKeys.FILL_GRADIENT.set(defaultAttributes, ((Gradient) (null)));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.FILL_COLOR, ButtonFactory.WEBSAVE_COLORS, ButtonFactory.WEBSAVE_COLORS_COLUMN_COUNT, \"attribute.fillColor\", labels, defaultAttributes));\r\n}'),(4688,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','493','org.jhotdraw.samples.odg.ODGApplicationModel','private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, ODGApplicationModel.createDrawingActions(editor), ODGApplicationModel.createSelectionActions(editor));\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new ODGRectFigure(), attributes), \"edit.createRectangle\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new ODGPathFigure(), attributes), \"edit.createLine\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n}'),(4689,'addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGApplicationModel.addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','493','org.jhotdraw.samples.odg.ODGApplicationModel','private void addStrokeButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createStrokeWidthButton(editor));\r\n    bar.add(ButtonFactory.createStrokeDashesButton(editor));\r\n    bar.add(ButtonFactory.createStrokeCapButton(editor));\r\n    bar.add(ButtonFactory.createStrokeJoinButton(editor));\r\n}'),(4690,'createDrawingActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGApplicationModel.createDrawingActions(org.jhotdraw.draw.DrawingEditor)','493','org.jhotdraw.samples.odg.ODGApplicationModel','public static Collection<Action> createDrawingActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(4691,'createSelectionActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGApplicationModel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)','493','org.jhotdraw.samples.odg.ODGApplicationModel','public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new ODGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new ODGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(4692,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.odg.ODGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','493','org.jhotdraw.samples.odg.ODGApplicationModel','/**\r\n * Creates toolbars for the application.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ODGView p = ((ODGView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(4693,'getSharedEditor()','org.jhotdraw.samples.odg.ODGApplicationModel.getSharedEditor()','493','org.jhotdraw.samples.odg.ODGApplicationModel','public DefaultDrawingEditor getSharedEditor() {\r\n    if ((sharedEditor) == null) {\r\n        sharedEditor = new DefaultDrawingEditor();\r\n    }\r\n    return sharedEditor;\r\n}'),(4694,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.samples.odg.ODGApplicationModel.initApplication(org.jhotdraw.app.Application)','493','org.jhotdraw.samples.odg.ODGApplicationModel','public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"view.toggleGrid\", (aa = new ToggleViewPropertyAction(a, ODGView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : ODGApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n    putAction(\"togglePropertiesPanel\", new TogglePropertiesPanelAction(a));\r\n}'),(4695,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.odg.ODGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','493','org.jhotdraw.samples.odg.ODGApplicationModel','public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((ODGView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(4696,'-init-()','org.jhotdraw.samples.odg.ODGAttributeKeys.-init-()','494','org.jhotdraw.samples.odg.ODGAttributeKeys','/**\r\n * Prevent instance creation\r\n */\r\nprivate ODGAttributeKeys() {\r\n}'),(4697,'getFillPaint(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.ODGAttributeKeys.getFillPaint(org.jhotdraw.draw.Figure)','494','org.jhotdraw.samples.odg.ODGAttributeKeys','/**\r\n * Gets the fill paint for the specified figure based on the attributes\r\n * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getFillPaint(Figure f) {\r\n    double opacity = ODGAttributeKeys.FILL_OPACITY.get(f);\r\n    if ((ODGAttributeKeys.FILL_GRADIENT.get(f)) != null) {\r\n        return ODGAttributeKeys.FILL_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.FILL_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(4698,'getStroke(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.ODGAttributeKeys.getStroke(org.jhotdraw.draw.Figure)','494','org.jhotdraw.samples.odg.ODGAttributeKeys','public static Stroke getStroke(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    if (strokeWidth == 0) {\r\n        strokeWidth = 1;\r\n    }\r\n    return new BasicStroke(((float) (strokeWidth)));\r\n}'),(4699,'getStrokePaint(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.ODGAttributeKeys.getStrokePaint(org.jhotdraw.draw.Figure)','494','org.jhotdraw.samples.odg.ODGAttributeKeys','/**\r\n * Gets the stroke paint for the specified figure based on the attributes\r\n * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getStrokePaint(Figure f) {\r\n    double opacity = ODGAttributeKeys.STROKE_OPACITY.get(f);\r\n    if ((ODGAttributeKeys.STROKE_GRADIENT.get(f)) != null) {\r\n        return ODGAttributeKeys.STROKE_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.STROKE_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(4700,'setDefaults(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.ODGAttributeKeys.setDefaults(org.jhotdraw.draw.Figure)','494','org.jhotdraw.samples.odg.ODGAttributeKeys','/**\r\n * Sets ODG default values.\r\n */\r\npublic static void setDefaults(Figure f) {\r\n    // Fill properties\r\n    AttributeKeys.FILL_COLOR.basicSet(f, Color.black);\r\n    AttributeKeys.WINDING_RULE.basicSet(f, AttributeKeys.WindingRule.NON_ZERO);\r\n    // Stroke properties\r\n    AttributeKeys.STROKE_COLOR.basicSet(f, null);\r\n    AttributeKeys.STROKE_WIDTH.basicSet(f, 1.0);\r\n    AttributeKeys.STROKE_CAP.basicSet(f, BasicStroke.CAP_BUTT);\r\n    AttributeKeys.STROKE_JOIN.basicSet(f, BasicStroke.JOIN_MITER);\r\n    AttributeKeys.STROKE_MITER_LIMIT.basicSet(f, 4.0);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.basicSet(f, false);\r\n    AttributeKeys.STROKE_DASHES.basicSet(f, null);\r\n    AttributeKeys.STROKE_DASH_PHASE.basicSet(f, 0.0);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.basicSet(f, false);\r\n}'),(4701,'-init-()','org.jhotdraw.samples.odg.ODGConstants.-init-()','497','org.jhotdraw.samples.odg.ODGConstants','StrokeStyle() {\r\n}'),(4702,'-init-()','org.jhotdraw.samples.odg.ODGConstants$FillStyle.-init-()','495','org.jhotdraw.samples.odg.ODGConstants$FillStyle','FillStyle() {\r\n}'),(4703,'-init-()','org.jhotdraw.samples.odg.ODGConstants$StrokeStyle.-init-()','496','org.jhotdraw.samples.odg.ODGConstants$StrokeStyle','StrokeStyle() {\r\n}'),(4704,'-init-()','org.jhotdraw.samples.odg.ODGDrawing.-init-()','498','org.jhotdraw.samples.odg.ODGDrawing','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGDrawing() {\r\n}'),(4705,'getDescription()','org.jhotdraw.samples.odg.ODGDrawing.getDescription()','498','org.jhotdraw.samples.odg.ODGDrawing','public String getDescription() {\r\n    return description;\r\n}'),(4706,'getTitle()','org.jhotdraw.samples.odg.ODGDrawing.getTitle()','498','org.jhotdraw.samples.odg.ODGDrawing','public String getTitle() {\r\n    return title;\r\n}'),(4707,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.odg.ODGDrawing.read(org.jhotdraw.xml.DOMInput)','498','org.jhotdraw.samples.odg.ODGDrawing','public void read(DOMInput in) throws IOException {\r\n    for (int i = 0, n = in.getElementCount(); i < n; i++) {\r\n        in.openElement(i);\r\n        String name = in.getTagName();\r\n        if (name.equals(\"title\")) {\r\n            title = in.getText();\r\n            in.closeElement();\r\n        } else\r\n            if (name.equals(\"desc\")) {\r\n                description = in.getText();\r\n                in.closeElement();\r\n            } else\r\n                if (name.equals(\"defs\")) {\r\n                    // We ignore \"defs\" elements for now.\r\n                    in.closeElement();\r\n                } else\r\n                    if (name.equals(\"use\")) {\r\n                        // We ignore \"use\" elements for now.\r\n                        in.closeElement();\r\n                    } else\r\n                        if (name.equals(\"script\")) {\r\n                            // We ignore \"script\" elements for now.\r\n                            in.closeElement();\r\n                        } else\r\n                            if (name.equals(\"style\")) {\r\n                                // We ignore \"style\" elements for now.\r\n                                in.closeElement();\r\n                            } else\r\n                                if (name.equals(\"radialGradient\")) {\r\n                                    // We ignore \"radialGradient\" elements for now.\r\n                                    in.closeElement();\r\n                                } else {\r\n                                    in.closeElement();\r\n                                    Object f = ((Object) (in.readObject(i)));\r\n                                    if (f instanceof ODGDrawing) {\r\n                                        SVGGroupFigure g = new SVGGroupFigure();\r\n                                        g.willChange();\r\n                                        for (Figure child : ((ODGDrawing) (f)).getChildren()) {\r\n                                            g.basicAdd(child);\r\n                                        }\r\n                                        g.changed();\r\n                                        if (!(g.isEmpty())) {\r\n                                            add(g);\r\n                                        }\r\n                                    } else\r\n                                        if (f instanceof SVGFigure) {\r\n                                            if (!(((SVGFigure) (f)).isEmpty())) {\r\n                                                add(((Figure) (f)));\r\n                                            }\r\n                                        } else {\r\n                                            throw new IOException((\"Unexpected child \" + f));\r\n                                        }\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    readAttributes(in);\r\n}'),(4708,'readAttributes(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.odg.ODGDrawing.readAttributes(org.jhotdraw.xml.DOMInput)','498','org.jhotdraw.samples.odg.ODGDrawing','protected void readAttributes(DOMInput in) throws IOException {\r\n    // SVGUtil.readAttributes(this, in);\r\n}'),(4709,'setDescription(java.lang.String)','org.jhotdraw.samples.odg.ODGDrawing.setDescription(java.lang.String)','498','org.jhotdraw.samples.odg.ODGDrawing','public void setDescription(String newValue) {\r\n    String oldValue = description;\r\n    description = newValue;\r\n    firePropertyChange(\"description\", oldValue, newValue);\r\n}'),(4710,'setTitle(java.lang.String)','org.jhotdraw.samples.odg.ODGDrawing.setTitle(java.lang.String)','498','org.jhotdraw.samples.odg.ODGDrawing','public void setTitle(String newValue) {\r\n    String oldValue = title;\r\n    title = newValue;\r\n    firePropertyChange(\"title\", oldValue, newValue);\r\n}'),(4711,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.odg.ODGDrawing.write(org.jhotdraw.xml.DOMOutput)','498','org.jhotdraw.samples.odg.ODGDrawing','@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n    out.addAttribute(\"version\", \"1.2\");\r\n    out.addAttribute(\"baseProfile\", \"tiny\");\r\n    for (Figure f : getChildren()) {\r\n        out.writeObject(f);\r\n    }\r\n}'),(4712,'-init-()','org.jhotdraw.samples.odg.ODGDrawingPanel.-init-()','499','org.jhotdraw.samples.odg.ODGDrawingPanel','/**\r\n * Creates new instance.\r\n */\r\npublic ODGDrawingPanel() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    initComponents();\r\n    undoManager = new UndoRedoManager();\r\n    editor = new DefaultDrawingEditor();\r\n    editor.add(view);\r\n    addCreationButtonsTo(creationToolbar, editor);\r\n    ButtonFactory.addAttributesButtonsTo(attributesToolbar, editor);\r\n    JPopupButton pb = new JPopupButton();\r\n    pb.setItemFont(UIManager.getFont(\"MenuItem.font\"));\r\n    labels.configureToolBarButton(pb, \"actions\");\r\n    pb.add(new DuplicateAction());\r\n    pb.addSeparator();\r\n    pb.add(new GroupAction(editor));\r\n    pb.add(new UngroupAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new BringToFrontAction(editor));\r\n    pb.add(new SendToBackAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new CutAction());\r\n    pb.add(new CopyAction());\r\n    pb.add(new PasteAction());\r\n    pb.add(new SelectAllAction());\r\n    pb.add(new SelectSameAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(undoManager.getUndoAction());\r\n    pb.add(undoManager.getRedoAction());\r\n    // FIXME - We need a toggle grid action\r\n    // pb.addSeparator();\r\n    // pb.add(new ToggleGridAction(editor));\r\n    JMenu m = new JMenu(labels.getString(\"view.zoomFactor.text\"));\r\n    JRadioButtonMenuItem rbmi;\r\n    ButtonGroup group = new ButtonGroup();\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null))));\r\n    rbmi.setSelected(true);\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null))));\r\n    group.add(rbmi);\r\n    pb.add(m);\r\n    pb.setFocusable(false);\r\n    creationToolbar.addSeparator();\r\n    creationToolbar.add(pb);\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    view.setDrawing(drawing);\r\n    drawing.addUndoableEditListener(undoManager);\r\n}'),(4713,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGDrawingPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','499','org.jhotdraw.samples.odg.ODGDrawingPanel','private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, ButtonFactory.createDrawingActions(editor), ODGDrawingPanel.createSelectionActions(editor));\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGRectFigure(), attributes), \"edit.createRectangle\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGEllipseFigure(), attributes), \"edit.createEllipse\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new PathTool(new SVGPathFigure(), new SVGBezierFigure(true), attributes), \"edit.createPolygon\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGPathFigure(), attributes), \"edit.createLine\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new PathTool(new SVGPathFigure(), new SVGBezierFigure(false), attributes), \"edit.createScribble\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGTextFigure(), attributes), \"edit.createText\", drawLabels);\r\n    TextAreaCreationTool tat = new TextAreaCreationTool(new SVGTextAreaFigure(), attributes);\r\n    tat.setRubberbandColor(Color.BLACK);\r\n    ButtonFactory.addToolTo(tb, editor, tat, \"edit.createTextArea\", drawLabels);\r\n}'),(4714,'createSelectionActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGDrawingPanel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)','499','org.jhotdraw.samples.odg.ODGDrawingPanel','public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(4715,'getDrawing()','org.jhotdraw.samples.odg.ODGDrawingPanel.getDrawing()','499','org.jhotdraw.samples.odg.ODGDrawingPanel','public Drawing getDrawing() {\r\n    return view.getDrawing();\r\n}'),(4716,'getEditor()','org.jhotdraw.samples.odg.ODGDrawingPanel.getEditor()','499','org.jhotdraw.samples.odg.ODGDrawingPanel','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(4717,'getView()','org.jhotdraw.samples.odg.ODGDrawingPanel.getView()','499','org.jhotdraw.samples.odg.ODGDrawingPanel','public DrawingView getView() {\r\n    return view;\r\n}'),(4718,'initComponents()','org.jhotdraw.samples.odg.ODGDrawingPanel.initComponents()','499','org.jhotdraw.samples.odg.ODGDrawingPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    toolButtonGroup = new ButtonGroup();\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    jPanel1 = new JPanel();\r\n    creationToolbar = new JToolBar();\r\n    attributesToolbar = new JToolBar();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    jPanel1.setLayout(new GridBagLayout());\r\n    creationToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 0;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(creationToolbar, gridBagConstraints);\r\n    attributesToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 1;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(attributesToolbar, gridBagConstraints);\r\n    add(jPanel1, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4719,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.odg.ODGDrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)','499','org.jhotdraw.samples.odg.ODGDrawingPanel','public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(4720,'-init-()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.-init-()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','ODGDrawingPanelBeanInfo() {\r\n}'),(4721,'getBdescriptor()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getBdescriptor()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((ODGDrawingPanelBeanInfo.beanDescriptor) == null)\r\n        ODGDrawingPanelBeanInfo.beanDescriptor = new BeanDescriptor(ODGDrawingPanelBeanInfo.class);\r\n\r\n    ODGDrawingPanelBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    ODGDrawingPanelBeanInfo.beanDescriptor.setDisplayName(\"DrawingPanel\");\r\n    return ODGDrawingPanelBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(4722,'getBeanDescriptor()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getBeanDescriptor()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return ODGDrawingPanelBeanInfo.getBdescriptor();\r\n}'),(4723,'getDefaultEventIndex()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getDefaultEventIndex()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return ODGDrawingPanelBeanInfo.defaultEventIndex;\r\n}'),(4724,'getDefaultPropertyIndex()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getDefaultPropertyIndex()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return ODGDrawingPanelBeanInfo.defaultPropertyIndex;\r\n}'),(4725,'getEdescriptor()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getEdescriptor()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return ODGDrawingPanelBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(4726,'getEventSetDescriptors()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getEventSetDescriptors()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return ODGDrawingPanelBeanInfo.getEdescriptor();\r\n}'),(4727,'getIcon(int)','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getIcon(int)','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((ODGDrawingPanelBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGDrawingPanelBeanInfo.iconColor16) == null)\r\n                    ODGDrawingPanelBeanInfo.iconColor16 = loadImage(ODGDrawingPanelBeanInfo.iconNameC16);\r\n\r\n                return ODGDrawingPanelBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((ODGDrawingPanelBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGDrawingPanelBeanInfo.iconColor32) == null)\r\n                    ODGDrawingPanelBeanInfo.iconColor32 = loadImage(ODGDrawingPanelBeanInfo.iconNameC32);\r\n\r\n                return ODGDrawingPanelBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((ODGDrawingPanelBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGDrawingPanelBeanInfo.iconMono16) == null)\r\n                    ODGDrawingPanelBeanInfo.iconMono16 = loadImage(ODGDrawingPanelBeanInfo.iconNameM16);\r\n\r\n                return ODGDrawingPanelBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((ODGDrawingPanelBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGDrawingPanelBeanInfo.iconMono32) == null)\r\n                    ODGDrawingPanelBeanInfo.iconMono32 = loadImage(ODGDrawingPanelBeanInfo.iconNameM32);\r\n\r\n                return ODGDrawingPanelBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(4728,'getMdescriptor()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getMdescriptor()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return ODGDrawingPanelBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(4729,'getMethodDescriptors()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getMethodDescriptors()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return ODGDrawingPanelBeanInfo.getMdescriptor();\r\n}'),(4730,'getPdescriptor()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getPdescriptor()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return ODGDrawingPanelBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(4731,'getPropertyDescriptors()','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo.getPropertyDescriptors()','500','org.jhotdraw.samples.odg.ODGDrawingPanelBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return ODGDrawingPanelBeanInfo.getPdescriptor();\r\n}'),(4732,'-init-()','org.jhotdraw.samples.odg.ODGPropertiesPanel.-init-()','501','org.jhotdraw.samples.odg.ODGPropertiesPanel','/**\r\n * Creates new instance.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic ODGPropertiesPanel() {\r\n    initComponents();\r\n    opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n    opacityPopupButton.add(opacitySlider);\r\n    opacityPopupButton.putClientProperty(\"JButton.buttonType\", \"toolbar\");\r\n    add(opacityPopupButton);\r\n    opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1.0, 100.0));\r\n    opacityFieldHandler = new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.OPACITY, opacityField, editor);\r\n    opacitySliderHandler = new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.OPACITY, opacitySlider, editor);\r\n    linkFieldHandler = new FigureAttributeEditorHandler<String>(SVGAttributeKeys.LINK, linkField, editor);\r\n    // set fonts\r\n    Font font = getFont().deriveFont(11.0F);\r\n    for (Component c : getComponents()) {\r\n        c.setFont(font);\r\n    }\r\n    opacitySlider.setFont(font);\r\n}'),(4733,'initComponents()','org.jhotdraw.samples.odg.ODGPropertiesPanel.initComponents()','501','org.jhotdraw.samples.odg.ODGPropertiesPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    linkLabel = new JLabel();\r\n    linkField = new JAttributeTextField();\r\n    opacityLabel = new JLabel();\r\n    opacityField = new JAttributeTextField();\r\n    opacityPopupButton = new JPopupButton();\r\n    setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n    setLayout(new GridBagLayout());\r\n    linkLabel.setLabelFor(linkField);\r\n    linkLabel.setText(labels.getString(\"link\"));// NOI18N\r\n\r\n    add(linkLabel, new GridBagConstraints());\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.weightx = 1.0;\r\n    add(linkField, gridBagConstraints);\r\n    opacityLabel.setIcon(new ImageIcon(getClass().getResource(\"/org/jhotdraw/draw/action/images/attributeOpacity.png\")));// NOI18N\r\n\r\n    opacityLabel.setToolTipText(labels.getString(\"opacity\"));// NOI18N\r\n\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.insets = new Insets(0, 10, 0, 0);\r\n    add(opacityLabel, gridBagConstraints);\r\n    opacityField.setColumns(3);\r\n    add(opacityField, new GridBagConstraints());\r\n    opacityPopupButton.setIcon(new ImageIcon(getClass().getResource(\"/org/jhotdraw/draw/action/images/popupIcon.png\")));// NOI18N\r\n\r\n    add(opacityPopupButton, new GridBagConstraints());\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4734,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGPropertiesPanel.setEditor(org.jhotdraw.draw.DrawingEditor)','501','org.jhotdraw.samples.odg.ODGPropertiesPanel','public void setEditor(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    linkFieldHandler.setDrawingEditor(editor);\r\n    opacitySliderHandler.setDrawingEditor(editor);\r\n    opacityFieldHandler.setDrawingEditor(editor);\r\n}'),(4735,'setView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.odg.ODGPropertiesPanel.setView(org.jhotdraw.draw.DrawingView)','501','org.jhotdraw.samples.odg.ODGPropertiesPanel','public void setView(DrawingView view) {\r\n    opacityFieldHandler.setView(view);\r\n    opacitySliderHandler.setView(view);\r\n    linkFieldHandler.setView(view);\r\n}'),(4736,'-init-()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.-init-()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','ODGPropertiesPanelBeanInfo() {\r\n}'),(4737,'getBdescriptor()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getBdescriptor()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((ODGPropertiesPanelBeanInfo.beanDescriptor) == null)\r\n        ODGPropertiesPanelBeanInfo.beanDescriptor = new BeanDescriptor(ODGPropertiesPanelBeanInfo.class);\r\n\r\n    ODGPropertiesPanelBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    ODGPropertiesPanelBeanInfo.beanDescriptor.setDisplayName(\"ODGPropertiesPanel\");\r\n    return ODGPropertiesPanelBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(4738,'getBeanDescriptor()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getBeanDescriptor()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return ODGPropertiesPanelBeanInfo.getBdescriptor();\r\n}'),(4739,'getDefaultEventIndex()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getDefaultEventIndex()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return ODGPropertiesPanelBeanInfo.defaultEventIndex;\r\n}'),(4740,'getDefaultPropertyIndex()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getDefaultPropertyIndex()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return ODGPropertiesPanelBeanInfo.defaultPropertyIndex;\r\n}'),(4741,'getEdescriptor()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getEdescriptor()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return ODGPropertiesPanelBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(4742,'getEventSetDescriptors()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getEventSetDescriptors()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return ODGPropertiesPanelBeanInfo.getEdescriptor();\r\n}'),(4743,'getIcon(int)','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getIcon(int)','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((ODGPropertiesPanelBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGPropertiesPanelBeanInfo.iconColor16) == null)\r\n                    ODGPropertiesPanelBeanInfo.iconColor16 = loadImage(ODGPropertiesPanelBeanInfo.iconNameC16);\r\n\r\n                return ODGPropertiesPanelBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((ODGPropertiesPanelBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGPropertiesPanelBeanInfo.iconColor32) == null)\r\n                    ODGPropertiesPanelBeanInfo.iconColor32 = loadImage(ODGPropertiesPanelBeanInfo.iconNameC32);\r\n\r\n                return ODGPropertiesPanelBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((ODGPropertiesPanelBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGPropertiesPanelBeanInfo.iconMono16) == null)\r\n                    ODGPropertiesPanelBeanInfo.iconMono16 = loadImage(ODGPropertiesPanelBeanInfo.iconNameM16);\r\n\r\n                return ODGPropertiesPanelBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((ODGPropertiesPanelBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((ODGPropertiesPanelBeanInfo.iconMono32) == null)\r\n                    ODGPropertiesPanelBeanInfo.iconMono32 = loadImage(ODGPropertiesPanelBeanInfo.iconNameM32);\r\n\r\n                return ODGPropertiesPanelBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(4744,'getMdescriptor()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getMdescriptor()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return ODGPropertiesPanelBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(4745,'getMethodDescriptors()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getMethodDescriptors()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return ODGPropertiesPanelBeanInfo.getMdescriptor();\r\n}'),(4746,'getPdescriptor()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getPdescriptor()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return ODGPropertiesPanelBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(4747,'getPropertyDescriptors()','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo.getPropertyDescriptors()','502','org.jhotdraw.samples.odg.ODGPropertiesPanelBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return ODGPropertiesPanelBeanInfo.getPdescriptor();\r\n}'),(4748,'-init-()','org.jhotdraw.samples.odg.ODGView.-init-()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Creates a new view.\r\n */\r\npublic ODGView() {\r\n}'),(4749,'canSaveTo(java.io.File)','org.jhotdraw.samples.odg.ODGView.canSaveTo(java.io.File)','503','org.jhotdraw.samples.odg.ODGView','@Override\r\npublic boolean canSaveTo(File file) {\r\n    return file.getName().endsWith(\".odg\");\r\n}'),(4750,'clear()','org.jhotdraw.samples.odg.ODGView.clear()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Clears the view.\r\n */\r\npublic void clear() {\r\n    final Drawing newDrawing = createDrawing();\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(newDrawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InvocationTargetException ex) {\r\n        ex.printStackTrace();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(4751,'createDrawing()','org.jhotdraw.samples.odg.ODGView.createDrawing()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Creates a new Drawing for this view.\r\n */\r\nprotected Drawing createDrawing() {\r\n    Drawing drawing = new ODGDrawing();\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    inputFormats.add(new ODGInputFormat());\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure()));\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure(), \"JPG\", \"Joint Photographics Experts Group (JPEG)\", \"jpg\", BufferedImage.TYPE_INT_RGB));\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure(), \"GIF\", \"Graphics Interchange Format (GIF)\", \"gif\", BufferedImage.TYPE_INT_ARGB));\r\n    inputFormats.add(new TextInputFormat(new SVGTextFigure()));\r\n    drawing.setInputFormats(inputFormats);\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    outputFormats.add(new SVGOutputFormat());\r\n    outputFormats.add(new SVGZOutputFormat());\r\n    outputFormats.add(new ImageOutputFormat());\r\n    outputFormats.add(new ImageOutputFormat(\"JPG\", \"Joint Photographics Experts Group (JPEG)\", \"jpg\", BufferedImage.TYPE_INT_RGB));\r\n    outputFormats.add(new ImageOutputFormat(\"BMP\", \"Windows Bitmap (BMP)\", \"bmp\", BufferedImage.TYPE_BYTE_INDEXED));\r\n    outputFormats.add(new ImageMapOutputFormat());\r\n    drawing.setOutputFormats(outputFormats);\r\n    return drawing;\r\n}'),(4752,'createExportChooser()','org.jhotdraw.samples.odg.ODGView.createExportChooser()','503','org.jhotdraw.samples.odg.ODGView','protected JFileChooser createExportChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    fileFilterOutputFormatMap = new HashMap<FileFilter, OutputFormat>();\r\n    // c.addChoosableFileFilter(new ExtensionFileFilter(\"SVG Drawing\",\"svg\"));\r\n    FileFilter currentFilter = null;\r\n    for (OutputFormat format : view.getDrawing().getOutputFormats()) {\r\n        FileFilter ff = format.getFileFilter();\r\n        fileFilterOutputFormatMap.put(ff, format);\r\n        c.addChoosableFileFilter(ff);\r\n        if (ff.getDescription().equals(preferences.get(\"viewExportFormat\", \"\"))) {\r\n            currentFilter = ff;\r\n        }\r\n    }\r\n    if (currentFilter != null) {\r\n        c.setFileFilter(currentFilter);\r\n    }\r\n    c.setSelectedFile(new File(preferences.get(\"viewExportFile\", System.getProperty(\"user.home\"))));\r\n    return c;\r\n}'),(4753,'createOpenChooser()','org.jhotdraw.samples.odg.ODGView.createOpenChooser()','503','org.jhotdraw.samples.odg.ODGView','@Override\r\nprotected JFileChooser createOpenChooser() {\r\n    final JFileChooser c = new JFileChooser();\r\n    fileFilterInputFormatMap = new HashMap<FileFilter, InputFormat>();\r\n    FileFilter firstFF = null;\r\n    for (InputFormat format : view.getDrawing().getInputFormats()) {\r\n        FileFilter ff = format.getFileFilter();\r\n        if (firstFF == null) {\r\n            firstFF = ff;\r\n        }\r\n        fileFilterInputFormatMap.put(ff, format);\r\n        c.addChoosableFileFilter(ff);\r\n    }\r\n    c.setFileFilter(firstFF);\r\n    c.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(\"fileFilterChanged\")) {\r\n                InputFormat inputFormat = fileFilterInputFormatMap.get(evt.getNewValue());\r\n                c.setAccessory((inputFormat == null ? null : inputFormat.getInputFormatAccessory()));\r\n            }\r\n        }\r\n    });\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(4754,'createPageable()','org.jhotdraw.samples.odg.ODGView.createPageable()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Creates a Pageable object for printing the view.\r\n */\r\npublic Pageable createPageable() {\r\n    return new DrawingPageable(view.getDrawing());\r\n}'),(4755,'createSaveChooser()','org.jhotdraw.samples.odg.ODGView.createSaveChooser()','503','org.jhotdraw.samples.odg.ODGView','@Override\r\nprotected JFileChooser createSaveChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    fileFilterOutputFormatMap = new HashMap<FileFilter, OutputFormat>();\r\n    // c.addChoosableFileFilter(new ExtensionFileFilter(\"SVG Drawing\",\"svg\"));\r\n    for (OutputFormat format : view.getDrawing().getOutputFormats()) {\r\n        FileFilter ff = format.getFileFilter();\r\n        fileFilterOutputFormatMap.put(ff, format);\r\n        c.addChoosableFileFilter(ff);\r\n        break;// only add the first file filter\r\n\r\n    }\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(4756,'export(java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','org.jhotdraw.samples.odg.ODGView.export(java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','503','org.jhotdraw.samples.odg.ODGView','public void export(File f, FileFilter filter, Component accessory) throws IOException {\r\n    OutputFormat format = fileFilterOutputFormatMap.get(filter);\r\n    if (!(f.getName().endsWith((\".\" + (format.getFileExtension()))))) {\r\n        f = new File((((f.getPath()) + \".\") + (format.getFileExtension())));\r\n    }\r\n    format.write(f, view.getDrawing());\r\n    preferences.put(\"viewExportFile\", f.getPath());\r\n    preferences.put(\"viewExportFormat\", filter.getDescription());\r\n}'),(4757,'getDrawing()','org.jhotdraw.samples.odg.ODGView.getDrawing()','503','org.jhotdraw.samples.odg.ODGView','public Drawing getDrawing() {\r\n    return view.getDrawing();\r\n}'),(4758,'getEditor()','org.jhotdraw.samples.odg.ODGView.getEditor()','503','org.jhotdraw.samples.odg.ODGView','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(4759,'getExportChooser()','org.jhotdraw.samples.odg.ODGView.getExportChooser()','503','org.jhotdraw.samples.odg.ODGView','public JFileChooser getExportChooser() {\r\n    if ((exportChooser) == null) {\r\n        exportChooser = createExportChooser();\r\n    }\r\n    return exportChooser;\r\n}'),(4760,'getScaleFactor()','org.jhotdraw.samples.odg.ODGView.getScaleFactor()','503','org.jhotdraw.samples.odg.ODGView','public double getScaleFactor() {\r\n    return view.getScaleFactor();\r\n}'),(4761,'init()','org.jhotdraw.samples.odg.ODGView.init()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Initializes the view.\r\n */\r\npublic void init() {\r\n    super.init();\r\n    initComponents();\r\n    JPanel zoomButtonPanel = new JPanel(new BorderLayout());\r\n    scrollPane.setLayout(new PlacardScrollPaneLayout());\r\n    scrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));\r\n    setEditor(new DefaultDrawingEditor());\r\n    undo = new UndoRedoManager();\r\n    view.setDrawing(createDrawing());\r\n    view.getDrawing().addUndoableEditListener(undo);\r\n    initActions();\r\n    undo.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            setHasUnsavedChanges(undo.hasSignificantEdits());\r\n        }\r\n    });\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPanel placardPanel = new JPanel(new BorderLayout());\r\n    AbstractButton pButton;\r\n    pButton = ButtonFactory.createZoomButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    placardPanel.add(pButton, BorderLayout.WEST);\r\n    pButton = ButtonFactory.createToggleGridButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    labels.configureToolBarButton(pButton, \"view.toggleGrid.placard\");\r\n    placardPanel.add(pButton, BorderLayout.EAST);\r\n    scrollPane.add(placardPanel, JScrollPane.LOWER_LEFT_CORNER);\r\n    propertiesPanel.setVisible(preferences.getBoolean(\"propertiesPanelVisible\", false));\r\n    propertiesPanel.setView(view);\r\n}'),(4762,'initActions()','org.jhotdraw.samples.odg.ODGView.initActions()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Initializes view specific actions.\r\n */\r\nprivate void initActions() {\r\n    putAction(UndoAction.ID, undo.getUndoAction());\r\n    putAction(RedoAction.ID, undo.getRedoAction());\r\n}'),(4763,'initComponents()','org.jhotdraw.samples.odg.ODGView.initComponents()','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    propertiesPanel = new ODGPropertiesPanel();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    add(propertiesPanel, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(4764,'isGridVisible()','org.jhotdraw.samples.odg.ODGView.isGridVisible()','503','org.jhotdraw.samples.odg.ODGView','public boolean isGridVisible() {\r\n    return view.isConstrainerVisible();\r\n}'),(4765,'isPropertiesPanelVisible()','org.jhotdraw.samples.odg.ODGView.isPropertiesPanelVisible()','503','org.jhotdraw.samples.odg.ODGView','public boolean isPropertiesPanelVisible() {\r\n    return propertiesPanel.isVisible();\r\n}'),(4766,'read(java.io.File)','org.jhotdraw.samples.odg.ODGView.read(java.io.File)','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Reads the view from the specified file.\r\n */\r\npublic void read(File f) throws IOException {\r\n    try {\r\n        JFileChooser fc = getOpenChooser();\r\n        final Drawing drawing = createDrawing();\r\n        InputFormat sf = fileFilterInputFormatMap.get(fc.getFileFilter());\r\n        if (sf == null) {\r\n            sf = drawing.getInputFormats().get(0);\r\n        }\r\n        sf.read(f, drawing, true);\r\n        System.out.println((((\"ODCView read(\" + f) + \") drawing.childCount=\") + (drawing.getChildCount())));\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(drawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError();\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(4767,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.ODGView.setEditor(org.jhotdraw.draw.DrawingEditor)','503','org.jhotdraw.samples.odg.ODGView','public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    propertiesPanel.setEditor(editor);\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}'),(4768,'setEnabled(boolean)','org.jhotdraw.samples.odg.ODGView.setEnabled(boolean)','503','org.jhotdraw.samples.odg.ODGView','public void setEnabled(boolean newValue) {\r\n    view.setEnabled(newValue);\r\n    super.setEnabled(newValue);\r\n}'),(4769,'setGridVisible(boolean)','org.jhotdraw.samples.odg.ODGView.setGridVisible(boolean)','503','org.jhotdraw.samples.odg.ODGView','public void setGridVisible(boolean newValue) {\r\n    boolean oldValue = isGridVisible();\r\n    view.setConstrainerVisible(newValue);\r\n    firePropertyChange(ODGView.GRID_VISIBLE_PROPERTY, oldValue, newValue);\r\n}'),(4770,'setHasUnsavedChanges(boolean)','org.jhotdraw.samples.odg.ODGView.setHasUnsavedChanges(boolean)','503','org.jhotdraw.samples.odg.ODGView','protected void setHasUnsavedChanges(boolean newValue) {\r\n    super.setHasUnsavedChanges(newValue);\r\n    undo.setHasSignificantEdits(newValue);\r\n}'),(4771,'setPropertiesPanelVisible(boolean)','org.jhotdraw.samples.odg.ODGView.setPropertiesPanelVisible(boolean)','503','org.jhotdraw.samples.odg.ODGView','public void setPropertiesPanelVisible(boolean newValue) {\r\n    boolean oldValue = propertiesPanel.isVisible();\r\n    propertiesPanel.setVisible(newValue);\r\n    firePropertyChange(\"propertiesPanelVisible\", oldValue, newValue);\r\n    preferences.putBoolean(\"propertiesPanelVisible\", newValue);\r\n    validate();\r\n}'),(4772,'setScaleFactor(double)','org.jhotdraw.samples.odg.ODGView.setScaleFactor(double)','503','org.jhotdraw.samples.odg.ODGView','public void setScaleFactor(double newValue) {\r\n    double oldValue = getScaleFactor();\r\n    view.setScaleFactor(newValue);\r\n    firePropertyChange(\"scaleFactor\", oldValue, newValue);\r\n}'),(4773,'write(java.io.File)','org.jhotdraw.samples.odg.ODGView.write(java.io.File)','503','org.jhotdraw.samples.odg.ODGView','/**\r\n * Writes the view to the specified file.\r\n */\r\npublic void write(File f) throws IOException {\r\n    OutputStream out = null;\r\n    try {\r\n        out = new BufferedOutputStream(new FileOutputStream(f));\r\n        new SVGOutputFormat().write(f, view.getDrawing());\r\n    } finally {\r\n        if (out != null)\r\n            out.close();\r\n\r\n    }\r\n}'),(4774,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)','org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)','504','org.jhotdraw.samples.odg.PathTool','/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}'),(4775,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)','org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)','504','org.jhotdraw.samples.odg.PathTool','/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}'),(4776,'createPath()','org.jhotdraw.samples.odg.PathTool.createPath()','504','org.jhotdraw.samples.odg.PathTool','@SuppressWarnings(\"unchecked\")\r\nprotected SVGPathFigure createPath() {\r\n    SVGPathFigure f = ((SVGPathFigure) (pathPrototype.clone()));\r\n    getEditor().applyDefaultAttributesTo(f);\r\n    if ((attributes) != null) {\r\n        for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n            entry.getKey().basicSet(f, entry.getValue());\r\n        }\r\n    }\r\n    return f;\r\n}'),(4777,'finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.odg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)','504','org.jhotdraw.samples.odg.PathTool','@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG)\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    creationView.addToSelection(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n}'),(4778,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor)','505','org.jhotdraw.samples.odg.action.CombineAction','/**\r\n * Creates a new instance.\r\n */\r\npublic CombineAction(DrawingEditor editor) {\r\n    super(editor, new ODGPathFigure());\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}'),(4779,'canGroup()','org.jhotdraw.samples.odg.action.CombineAction.canGroup()','505','org.jhotdraw.samples.odg.action.CombineAction','@Override\r\nprotected boolean canGroup() {\r\n    boolean canCombine = (getView().getSelectionCount()) > 1;\r\n    if (canCombine) {\r\n        for (Figure f : getView().getSelectedFigures()) {\r\n            if (!(f instanceof ODGPathFigure)) {\r\n                canCombine = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return canCombine;\r\n}'),(4780,'groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)','org.jhotdraw.samples.odg.action.CombineAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)','505','org.jhotdraw.samples.odg.action.CombineAction','@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        // XXX - We must fire an UndoableEdito for the flattenTransform!\r\n        path.flattenTransform();\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(4781,'ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)','org.jhotdraw.samples.odg.action.CombineAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)','505','org.jhotdraw.samples.odg.action.CombineAction','@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}'),(4782,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.odg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor)','506','org.jhotdraw.samples.odg.action.SplitAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SplitAction(DrawingEditor editor) {\r\n    super(editor, new ODGPathFigure());\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(4783,'canUngroup()','org.jhotdraw.samples.odg.action.SplitAction.canUngroup()','506','org.jhotdraw.samples.odg.action.SplitAction','protected boolean canUngroup() {\r\n    if (super.canUngroup()) {\r\n        return (((CompositeFigure) (getView().getSelectedFigures().iterator().next())).getChildCount()) > 1;\r\n    }\r\n    return false;\r\n}'),(4784,'groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)','org.jhotdraw.samples.odg.action.SplitAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)','506','org.jhotdraw.samples.odg.action.SplitAction','@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(4785,'ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)','org.jhotdraw.samples.odg.action.SplitAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)','506','org.jhotdraw.samples.odg.action.SplitAction','@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}'),(4786,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction.-init-(org.jhotdraw.app.Application)','507','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction','/**\r\n * Creates a new instance.\r\n */\r\npublic TogglePropertiesPanelAction(Application app) {\r\n    super(app);\r\n    setPropertyName(\"propertiesPanelVisible\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    putValue(AbstractAction.NAME, labels.getString(\"propertiesPanel\"));\r\n}'),(4787,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction.actionPerformed(java.awt.event.ActionEvent)','507','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction','public void actionPerformed(ActionEvent e) {\r\n    getActiveView().setPropertiesPanelVisible((!(getActiveView().isPropertiesPanelVisible())));\r\n}'),(4788,'getActiveView()','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction.getActiveView()','507','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction','public ODGView getActiveView() {\r\n    return ((ODGView) (super.getActiveView()));\r\n}'),(4789,'updateView()','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction.updateView()','507','org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction','/**\r\n * This method is invoked, when the property changed and when\r\n * the view changed.\r\n */\r\nprotected void updateView() {\r\n    putValue(Actions.SELECTED_KEY, (((getActiveView()) != null) && (!(getActiveView().isPropertiesPanelVisible()))));\r\n}'),(4790,'-init-()','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.-init-()','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGAttributedFigure() {\r\n}'),(4791,'-init-(java.lang.String)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.-init-(java.lang.String)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','1( $anonymous0) {\r\n}'),(4792,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.draw(java.awt.Graphics2D)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','public void draw(Graphics2D g) {\r\n    double opacity = ODGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        if (opacity != 1.0) {\r\n            Rectangle2D.Double drawingArea = getDrawingArea();\r\n            Rectangle2D clipBounds = g.getClipBounds();\r\n            if (clipBounds != null) {\r\n                Rectangle2D.intersect(drawingArea, clipBounds, drawingArea);\r\n            }\r\n            if (!(drawingArea.isEmpty())) {\r\n                BufferedImage buf = new BufferedImage(((int) ((2 + (drawingArea.width)) * (g.getTransform().getScaleX()))), ((int) ((2 + (drawingArea.height)) * (g.getTransform().getScaleY()))), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D gr = buf.createGraphics();\r\n                gr.scale(g.getTransform().getScaleX(), g.getTransform().getScaleY());\r\n                gr.translate(((int) (-(drawingArea.x))), ((int) (-(drawingArea.y))));\r\n                gr.setRenderingHints(g.getRenderingHints());\r\n                drawFigure(gr);\r\n                gr.dispose();\r\n                Composite savedComposite = g.getComposite();\r\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n                g.drawImage(buf, ((int) (drawingArea.x)), ((int) (drawingArea.y)), (2 + ((int) (drawingArea.width))), (2 + ((int) (drawingArea.height))), null);\r\n                g.setComposite(savedComposite);\r\n            }\r\n        } else {\r\n            drawFigure(g);\r\n        }\r\n    }\r\n}'),(4793,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.drawFigure(java.awt.Graphics2D)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','/**\r\n * This method is invoked before the rendered image of the figure is\r\n * composited.\r\n */\r\npublic void drawFigure(Graphics2D g) {\r\n    AffineTransform savedTransform = null;\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        savedTransform = g.getTransform();\r\n        g.transform(AttributeKeys.TRANSFORM.get(this));\r\n    }\r\n    if ((ODGAttributeKeys.FILL_STYLE.get(this)) != (ODGConstants.FillStyle.NONE)) {\r\n        Paint paint = ODGAttributeKeys.getFillPaint(this);\r\n        if (paint != null) {\r\n            g.setPaint(paint);\r\n            drawFill(g);\r\n        }\r\n    }\r\n    if ((ODGAttributeKeys.STROKE_STYLE.get(this)) != (ODGConstants.StrokeStyle.NONE)) {\r\n        Paint paint = ODGAttributeKeys.getStrokePaint(this);\r\n        if (paint != null) {\r\n            g.setPaint(paint);\r\n            g.setStroke(ODGAttributeKeys.getStroke(this));\r\n            drawStroke(g);\r\n        }\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        g.setTransform(savedTransform);\r\n    }\r\n}'),(4794,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.getActions(java.awt.geom.Point2D$Double)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','@Override\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    LinkedList<Action> actions = new LinkedList<Action>();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n        actions.add(new AbstractAction(labels.getString(\"edit.removeTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n                ODGAttributedFigure.this.willChange();\r\n                fireUndoableEditHappened(AttributeKeys.TRANSFORM.setUndoable(ODGAttributedFigure.this, null));\r\n                ODGAttributedFigure.this.changed();\r\n            }\r\n        });\r\n    }\r\n    return actions;\r\n}'),(4795,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.read(org.jhotdraw.xml.DOMInput)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}'),(4796,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.TRANSFORM)) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(4797,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.odg.figures.ODGAttributedFigure.write(org.jhotdraw.xml.DOMOutput)','508','org.jhotdraw.samples.odg.figures.ODGAttributedFigure','@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}'),(4798,'-init-()','org.jhotdraw.samples.odg.figures.ODGBezierFigure.-init-()','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGBezierFigure() {\r\n    this(false);\r\n}'),(4799,'-init-(boolean)','org.jhotdraw.samples.odg.figures.ODGBezierFigure.-init-(boolean)','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','public ODGBezierFigure(boolean isClosed) {\r\n    super(isClosed);\r\n    AttributeKeys.FILL_OPEN_PATH.basicSet(this, true);\r\n}'),(4800,'createHandles(org.jhotdraw.samples.odg.figures.ODGPathFigure,int)','org.jhotdraw.samples.odg.figures.ODGBezierFigure.createHandles(org.jhotdraw.samples.odg.figures.ODGPathFigure,int)','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','public Collection<Handle> createHandles(ODGPathFigure pathFigure, int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i, pathFigure));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(4801,'flattenTransform()','org.jhotdraw.samples.odg.figures.ODGBezierFigure.flattenTransform()','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','/**\r\n * Transforms all coords of the figure by the current TRANSFORM attribute\r\n * and then sets the TRANSFORM attribute to null.\r\n */\r\npublic void flattenTransform() {\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        path.transform(AttributeKeys.TRANSFORM.get(this));\r\n        AttributeKeys.TRANSFORM.basicSet(this, null);\r\n    }\r\n    invalidate();\r\n}'),(4802,'getDrawingArea()','org.jhotdraw.samples.odg.figures.ODGBezierFigure.getDrawingArea()','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','public Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            cachedDrawingArea = path.getBounds2D();\r\n        } else {\r\n            BezierPath p2 = ((BezierPath) (path.clone()));\r\n            p2.transform(AttributeKeys.TRANSFORM.get(this));\r\n            cachedDrawingArea = p2.getBounds2D();\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(4803,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.odg.figures.ODGBezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    /* && view.getHandleDetailLevel() == 0 */\r\n    if ((evt.getClickCount()) == 2) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(4804,'invalidate()','org.jhotdraw.samples.odg.figures.ODGBezierFigure.invalidate()','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','public void invalidate() {\r\n    super.invalidate();\r\n    cachedDrawingArea = null;\r\n}'),(4805,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.odg.figures.ODGBezierFigure.transform(java.awt.geom.AffineTransform)','509','org.jhotdraw.samples.odg.figures.ODGBezierFigure','public void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSetClone(this, tx);\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        super.transform(tx);\r\n    }\r\n}'),(4806,'-init-()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.-init-()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGEllipseFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(4807,'-init-(double,double,double,double)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.-init-(double,double,double,double)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public ODGEllipseFigure(double x, double y, double width, double height) {\r\n    ellipse = new Ellipse2D.Double(x, y, width, height);\r\n    ODGAttributeKeys.setDefaults(this);\r\n}'),(4808,'canConnect()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.canConnect()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// ODG does not support connecting\r\n\r\n}'),(4809,'clone()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.clone()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic ODGEllipseFigure clone() {\r\n    ODGEllipseFigure that = ((ODGEllipseFigure) (super.clone()));\r\n    that.ellipse = ((Ellipse2D.Double) (this.ellipse.clone()));\r\n    that.cachedTransformedShape = null;\r\n    return that;\r\n}'),(4810,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.contains(java.awt.geom.Point2D$Double)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    // XXX - This does not take the stroke width into account!\r\n    return getTransformedShape().contains(p);\r\n}'),(4811,'createHandles(int)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.createHandles(int)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','// ATTRIBUTES\r\n// EDITING\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(4812,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.drawFill(java.awt.Graphics2D)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    g.fill(ellipse);\r\n    // g.fill(getTransformedShape());\r\n}'),(4813,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.drawStroke(java.awt.Graphics2D)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','protected void drawStroke(Graphics2D g) {\r\n    g.draw(ellipse);\r\n    /* if (TRANSFORM.get(this) == null) {\n    g.draw(ellipse);\n    } else {\n    AffineTransform savedTransform = g.getTransform();\n    g.transform(TRANSFORM.get(this));\n    g.draw(ellipse);\n    g.setTransform(savedTransform);\n    }\n     */\r\n}'),(4814,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(4815,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(4816,'getBounds()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getBounds()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (ellipse.getBounds2D()));\r\n}'),(4817,'getDrawingArea()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getDrawingArea()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D rx = getTransformedShape().getBounds2D();\r\n    Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n    if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n        double g = (ODGAttributeKeys.getPerpendicularHitGrowth(this)) * 2;\r\n        Geom.grow(r, g, g);\r\n    } else {\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        width *= Math.max(AttributeKeys.TRANSFORM.get(this).getScaleX(), AttributeKeys.TRANSFORM.get(this).getScaleY());\r\n        Geom.grow(r, width, width);\r\n    }\r\n    return r;\r\n}'),(4818,'getHeight()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getHeight()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public double getHeight() {\r\n    return ellipse.getHeight();\r\n}'),(4819,'getTransformRestoreData()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getTransformRestoreData()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public Object getTransformRestoreData() {\r\n    return new Object[]{ ellipse.clone(), AttributeKeys.TRANSFORM.getClone(this), ODGAttributeKeys.FILL_GRADIENT.getClone(this), ODGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(4820,'getTransformedShape()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getTransformedShape()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','private Shape getTransformedShape() {\r\n    if ((cachedTransformedShape) == null) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            cachedTransformedShape = ellipse;\r\n        } else {\r\n            cachedTransformedShape = AttributeKeys.TRANSFORM.get(this).createTransformedShape(ellipse);\r\n        }\r\n    }\r\n    return cachedTransformedShape;\r\n}'),(4821,'getWidth()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getWidth()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public double getWidth() {\r\n    return ellipse.getWidth();\r\n}'),(4822,'getX()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getX()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','// SHAPE AND BOUNDS\r\npublic double getX() {\r\n    return ellipse.x;\r\n}'),(4823,'getY()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.getY()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public double getY() {\r\n    return ellipse.y;\r\n}'),(4824,'invalidate()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.invalidate()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    cachedTransformedShape = null;\r\n}'),(4825,'isEmpty()','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.isEmpty()','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','// EVENT HANDLING\r\npublic boolean isEmpty() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return ((b.width) <= 0) || ((b.height) <= 0);\r\n}'),(4826,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.restoreTransformTo(java.lang.Object)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public void restoreTransformTo(Object geometry) {\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    ellipse = ((Ellipse2D.Double) (((Ellipse2D.Double) (restoreData[0])).clone()));\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    ODGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    ODGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n    invalidate();\r\n}'),(4827,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    ellipse.x = Math.min(anchor.x, lead.x);\r\n    ellipse.y = Math.min(anchor.y, lead.y);\r\n    ellipse.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    ellipse.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(4828,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.odg.figures.ODGEllipseFigure.transform(java.awt.geom.AffineTransform)','510','org.jhotdraw.samples.odg.figures.ODGEllipseFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		the transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSetClone(this, tx);\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        Point2D.Double anchor = getStartPoint();\r\n        Point2D.Double lead = getEndPoint();\r\n        setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n        if (((ODGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(ODGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = ODGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            ODGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((ODGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(ODGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = ODGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            ODGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n    invalidate();\r\n}'),(4829,'isEmpty()','org.jhotdraw.samples.odg.figures.ODGFigure.isEmpty()','511','org.jhotdraw.samples.odg.figures.ODGFigure','/**\r\n * Returns true, if this figure is empty for one of the following\r\n * reasons:\r\n * <ul>\r\n * <li>A group has no children</li>\r\n * <li>A path has less than two points</li>\r\n * <li>An ellipse or a rectangle has a width or a height of 0</li>\r\n * <li>A text has no characters</li>\r\n * </ul>\r\n */\r\npublic boolean isEmpty();'),(4830,'-init-()','org.jhotdraw.samples.odg.figures.ODGGroupFigure.-init-()','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGGroupFigure() {\r\n    ODGAttributeKeys.setDefaults(this);\r\n}'),(4831,'clone()','org.jhotdraw.samples.odg.figures.ODGGroupFigure.clone()','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','public ODGGroupFigure clone() {\r\n    ODGGroupFigure that = ((ODGGroupFigure) (super.clone()));\r\n    that.attributes = new HashMap<AttributeKey, Object>(this.attributes);\r\n    return that;\r\n}'),(4832,'createHandles(int)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.createHandles(int)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic LinkedList<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    if (detailLevel == 0) {\r\n        TransformHandleKit.addTransformHandles(this, handles);\r\n    }\r\n    return handles;\r\n}'),(4833,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.draw(java.awt.Graphics2D)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic void draw(Graphics2D g) {\r\n    double opacity = ODGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        if (opacity != 1.0) {\r\n            Rectangle2D.Double drawingArea = getDrawingArea();\r\n            Rectangle2D clipBounds = g.getClipBounds();\r\n            if (clipBounds != null) {\r\n                Rectangle2D.intersect(drawingArea, clipBounds, drawingArea);\r\n            }\r\n            if (!(drawingArea.isEmpty())) {\r\n                BufferedImage buf = new BufferedImage(((int) ((2 + (drawingArea.width)) * (g.getTransform().getScaleX()))), ((int) ((2 + (drawingArea.height)) * (g.getTransform().getScaleY()))), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D gr = buf.createGraphics();\r\n                gr.scale(g.getTransform().getScaleX(), g.getTransform().getScaleY());\r\n                gr.translate(((int) (-(drawingArea.x))), ((int) (-(drawingArea.y))));\r\n                gr.setRenderingHints(g.getRenderingHints());\r\n                super.draw(gr);\r\n                gr.dispose();\r\n                Composite savedComposite = g.getComposite();\r\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n                g.drawImage(buf, ((int) (drawingArea.x)), ((int) (drawingArea.y)), (2 + ((int) (drawingArea.width))), (2 + ((int) (drawingArea.height))), null);\r\n                g.setComposite(savedComposite);\r\n            }\r\n        } else {\r\n            super.draw(g);\r\n        }\r\n    }\r\n}'),(4834,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.getAttribute(org.jhotdraw.draw.AttributeKey)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return key.get(attributes);\r\n}'),(4835,'getAttributes()','org.jhotdraw.samples.odg.figures.ODGGroupFigure.getAttributes()','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic Map<AttributeKey, Object> getAttributes() {\r\n    return new HashMap<AttributeKey, Object>(attributes);\r\n}'),(4836,'getBounds()','org.jhotdraw.samples.odg.figures.ODGGroupFigure.getBounds()','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','public Rectangle2D.Double getBounds() {\r\n    if ((cachedBounds) == null) {\r\n        if ((getChildCount()) == 0) {\r\n            cachedBounds = new Rectangle2D.Double();\r\n        } else {\r\n            for (Figure f : children) {\r\n                Rectangle2D.Double bounds = f.getBounds();\r\n                if ((AttributeKeys.TRANSFORM.get(f)) != null) {\r\n                    bounds.setRect(AttributeKeys.TRANSFORM.get(f).createTransformedShape(bounds).getBounds2D());\r\n                }\r\n                if (((cachedBounds) == null) || (cachedBounds.isEmpty())) {\r\n                    cachedBounds = bounds;\r\n                } else {\r\n                    cachedBounds.add(bounds);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedBounds.clone()));\r\n}'),(4837,'isEmpty()','org.jhotdraw.samples.odg.figures.ODGGroupFigure.isEmpty()','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','public boolean isEmpty() {\r\n    return (getChildCount()) == 0;\r\n}'),(4838,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.read(org.jhotdraw.xml.DOMInput)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}'),(4839,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    if (key == (ODGAttributeKeys.OPACITY)) {\r\n        attributes.put(key, value);\r\n    } else {\r\n        super.setAttribute(key, value);\r\n    }\r\n    invalidate();\r\n}'),(4840,'setAttributes(java.util.Map)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.setAttributes(java.util.Map)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@SuppressWarnings(\"unchecked\")\r\npublic void setAttributes(Map<AttributeKey, Object> map) {\r\n    for (Map.Entry<AttributeKey, Object> entry : map.entrySet()) {\r\n        setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n}'),(4841,'toString()','org.jhotdraw.samples.odg.figures.ODGGroupFigure.toString()','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','public String toString() {\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(getClass().getName().substring(((getClass().getName().lastIndexOf(.)) + 1)));\r\n    buf.append(@);\r\n    buf.append(hashCode());\r\n    if ((getChildCount()) > 0) {\r\n        buf.append(();\r\n        for (Iterator<Figure> i = getChildren().iterator(); i.hasNext();) {\r\n            Figure child = i.next();\r\n            buf.append(child);\r\n            if (i.hasNext()) {\r\n                buf.append(,);\r\n            }\r\n        }\r\n        buf.append());\r\n    }\r\n    return buf.toString();\r\n}'),(4842,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.odg.figures.ODGGroupFigure.write(org.jhotdraw.xml.DOMOutput)','512','org.jhotdraw.samples.odg.figures.ODGGroupFigure','@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}'),(4843,'-init-()','org.jhotdraw.samples.odg.figures.ODGPathFigure.-init-()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGPathFigure() {\r\n    add(new ODGBezierFigure());\r\n    ODGAttributeKeys.setDefaults(this);\r\n}'),(4844,'-init-(java.lang.String)','org.jhotdraw.samples.odg.figures.ODGPathFigure.-init-(java.lang.String)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','1( $anonymous0) {\r\n}'),(4845,'add(int,org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.figures.ODGPathFigure.add(int,org.jhotdraw.draw.Figure)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic void add(final int index, final Figure figure) {\r\n    super.add(index, ((ODGBezierFigure) (figure)));\r\n}'),(4846,'canConnect()','org.jhotdraw.samples.odg.figures.ODGPathFigure.canConnect()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// ODG does not support connecting\r\n\r\n}'),(4847,'clone()','org.jhotdraw.samples.odg.figures.ODGPathFigure.clone()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public ODGPathFigure clone() {\r\n    ODGPathFigure that = ((ODGPathFigure) (super.clone()));\r\n    return that;\r\n}'),(4848,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGPathFigure.contains(java.awt.geom.Point2D$Double)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public boolean contains(Point2D.Double p) {\r\n    getPath();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    /* return cachedPath.contains(p2); */\r\n    boolean isClosed = AttributeKeys.CLOSED.get(getChild(0));\r\n    double tolerance = Math.max(2.0F, ((AttributeKeys.getStrokeTotalWidth(this)) / 2.0));\r\n    if (isClosed) {\r\n        if (getPath().contains(p)) {\r\n            return true;\r\n        }\r\n        double grow = (AttributeKeys.getPerpendicularHitGrowth(this)) * 2.0;\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        if (gs.createStrokedShape(getPath()).contains(p)) {\r\n            return true;\r\n        } else {\r\n            if (isClosed) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (!isClosed) {\r\n        if (Shapes.outlineContains(getPath(), p, tolerance)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(4849,'createHandles(int)','org.jhotdraw.samples.odg.figures.ODGPathFigure.createHandles(int)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            handles.add(new ODGPathOutlineHandle(this));\r\n            for (Figure child : getChildren()) {\r\n                handles.addAll(((ODGBezierFigure) (child)).createHandles(this, detailLevel));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(4850,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGPathFigure.draw(java.awt.Graphics2D)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void draw(Graphics2D g) {\r\n    double opacity = ODGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        if (opacity != 1.0) {\r\n            Rectangle2D.Double drawingArea = getDrawingArea();\r\n            Rectangle2D clipBounds = g.getClipBounds();\r\n            if (clipBounds != null) {\r\n                Rectangle2D.intersect(drawingArea, clipBounds, drawingArea);\r\n            }\r\n            if (!(drawingArea.isEmpty())) {\r\n                BufferedImage buf = new BufferedImage(Math.max(1, ((int) ((2 + (drawingArea.width)) * (g.getTransform().getScaleX())))), Math.max(1, ((int) ((2 + (drawingArea.height)) * (g.getTransform().getScaleY())))), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D gr = buf.createGraphics();\r\n                gr.scale(g.getTransform().getScaleX(), g.getTransform().getScaleY());\r\n                gr.translate(((int) (-(drawingArea.x))), ((int) (-(drawingArea.y))));\r\n                gr.setRenderingHints(g.getRenderingHints());\r\n                drawFigure(gr);\r\n                gr.dispose();\r\n                Composite savedComposite = g.getComposite();\r\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n                g.drawImage(buf, ((int) (drawingArea.x)), ((int) (drawingArea.y)), (2 + ((int) (drawingArea.width))), (2 + ((int) (drawingArea.height))), null);\r\n                g.setComposite(savedComposite);\r\n            }\r\n        } else {\r\n            drawFigure(g);\r\n        }\r\n    }\r\n}'),(4851,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGPathFigure.drawFigure(java.awt.Graphics2D)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void drawFigure(Graphics2D g) {\r\n    AffineTransform savedTransform = null;\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        savedTransform = g.getTransform();\r\n        g.transform(AttributeKeys.TRANSFORM.get(this));\r\n    }\r\n    if ((ODGAttributeKeys.FILL_STYLE.get(this)) != (ODGConstants.FillStyle.NONE)) {\r\n        Paint paint = ODGAttributeKeys.getFillPaint(this);\r\n        if (paint != null) {\r\n            g.setPaint(paint);\r\n            drawFill(g);\r\n        }\r\n    }\r\n    if ((ODGAttributeKeys.STROKE_STYLE.get(this)) != (ODGConstants.StrokeStyle.NONE)) {\r\n        Paint paint = ODGAttributeKeys.getStrokePaint(this);\r\n        if (paint != null) {\r\n            g.setPaint(paint);\r\n            g.setStroke(ODGAttributeKeys.getStroke(this));\r\n            drawStroke(g);\r\n        }\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        g.setTransform(savedTransform);\r\n    }\r\n}'),(4852,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGPathFigure.drawFill(java.awt.Graphics2D)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void drawFill(Graphics2D g) {\r\n    boolean isClosed = AttributeKeys.CLOSED.get(getChild(0));\r\n    if (isClosed) {\r\n        g.fill(getPath());\r\n    }\r\n}'),(4853,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGPathFigure.drawStroke(java.awt.Graphics2D)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void drawStroke(Graphics2D g) {\r\n    g.draw(getPath());\r\n}'),(4854,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.odg.figures.ODGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(4855,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.odg.figures.ODGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(4856,'flattenTransform()','org.jhotdraw.samples.odg.figures.ODGPathFigure.flattenTransform()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void flattenTransform() {\r\n    willChange();\r\n    AffineTransform tx = AttributeKeys.TRANSFORM.get(this);\r\n    if (tx != null) {\r\n        for (Figure child : getChildren()) {\r\n            ((ODGBezierFigure) (child)).transform(tx);\r\n            ((ODGBezierFigure) (child)).flattenTransform();\r\n        }\r\n    }\r\n    AttributeKeys.TRANSFORM.basicSet(this, null);\r\n    changed();\r\n}'),(4857,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGPathFigure.getActions(java.awt.geom.Point2D$Double)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    LinkedList<Action> actions = new LinkedList<Action>();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        actions.add(new AbstractAction(labels.getString(\"edit.removeTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n                ODGPathFigure.this.willChange();\r\n                fireUndoableEditHappened(AttributeKeys.TRANSFORM.setUndoable(ODGPathFigure.this, null));\r\n                ODGPathFigure.this.changed();\r\n            }\r\n        });\r\n        actions.add(new AbstractAction(labels.getString(\"edit.flattenTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                // CompositeEdit edit = new CompositeEdit(labels.getString(\"flattenTransform\"));\r\n                // TransformEdit edit = new TransformEdit(ODGPathFigure.this, )\r\n                final Object restoreData = getTransformRestoreData();\r\n                UndoableEdit edit = new AbstractUndoableEdit() {\r\n                    public String getPresentationName() {\r\n                        return labels.getString(\"flattenTransform\");\r\n                    }\r\n\r\n                    public void undo() throws CannotUndoException {\r\n                        super.undo();\r\n                        willChange();\r\n                        restoreTransformTo(restoreData);\r\n                        changed();\r\n                    }\r\n\r\n                    public void redo() throws CannotRedoException {\r\n                        super.redo();\r\n                        willChange();\r\n                        restoreTransformTo(restoreData);\r\n                        flattenTransform();\r\n                        changed();\r\n                    }\r\n                };\r\n                willChange();\r\n                flattenTransform();\r\n                changed();\r\n                fireUndoableEditHappened(edit);\r\n            }\r\n        });\r\n    }\r\n    actions.add(new AbstractAction(labels.getString(\"closePath\")) {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            for (Figure child : getChildren()) {\r\n                ODGPathFigure.this.willChange();\r\n                getDrawing().fireUndoableEditHappened(AttributeKeys.CLOSED.setUndoable(child, true));\r\n                ODGPathFigure.this.changed();\r\n            }\r\n        }\r\n    });\r\n    actions.add(new AbstractAction(labels.getString(\"openPath\")) {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            for (Figure child : getChildren()) {\r\n                ODGPathFigure.this.willChange();\r\n                getDrawing().fireUndoableEditHappened(AttributeKeys.CLOSED.setUndoable(child, false));\r\n                ODGPathFigure.this.changed();\r\n            }\r\n        }\r\n    });\r\n    actions.add(new AbstractAction(labels.getString(\"windingRule.evenOdd\")) {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ODGPathFigure.this.willChange();\r\n            getDrawing().fireUndoableEditHappened(AttributeKeys.WINDING_RULE.setUndoable(ODGPathFigure.this, AttributeKeys.WindingRule.EVEN_ODD));\r\n            ODGPathFigure.this.changed();\r\n        }\r\n    });\r\n    actions.add(new AbstractAction(labels.getString(\"windingRule.nonZero\")) {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            AttributeKeys.WINDING_RULE.set(ODGPathFigure.this, AttributeKeys.WindingRule.NON_ZERO);\r\n            getDrawing().fireUndoableEditHappened(AttributeKeys.WINDING_RULE.setUndoable(ODGPathFigure.this, AttributeKeys.WindingRule.EVEN_ODD));\r\n        }\r\n    });\r\n    return actions;\r\n}'),(4858,'getChild(int)','org.jhotdraw.samples.odg.figures.ODGPathFigure.getChild(int)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic ODGBezierFigure getChild(int index) {\r\n    return ((ODGBezierFigure) (super.getChild(index)));\r\n}'),(4859,'getDrawingArea()','org.jhotdraw.samples.odg.figures.ODGPathFigure.getDrawingArea()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n            width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n        } else\r\n            if ((AttributeKeys.STROKE_CAP.get(this)) != (BasicStroke.CAP_BUTT)) {\r\n                width += strokeTotalWidth * 2;\r\n            }\r\n\r\n        GeneralPath gp = ((GeneralPath) (getPath()));\r\n        Rectangle2D strokeRect = new Rectangle2D.Double(0, 0, width, width);\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            gp = ((GeneralPath) (gp.clone()));\r\n            gp.transform(AttributeKeys.TRANSFORM.get(this));\r\n            strokeRect = AttributeKeys.TRANSFORM.get(this).createTransformedShape(strokeRect).getBounds2D();\r\n        }\r\n        Rectangle2D rx = gp.getBounds2D();\r\n        Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n        Geom.grow(r, strokeRect.getWidth(), strokeRect.getHeight());\r\n        cachedDrawingArea = r;\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(4860,'getPath()','org.jhotdraw.samples.odg.figures.ODGPathFigure.getPath()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','protected GeneralPath getPath() {\r\n    if ((cachedPath) == null) {\r\n        cachedPath = new GeneralPath();\r\n        cachedPath.setWindingRule(((AttributeKeys.WINDING_RULE.get(this)) == (AttributeKeys.WindingRule.EVEN_ODD) ? GeneralPath.WIND_EVEN_ODD : GeneralPath.WIND_NON_ZERO));\r\n        for (Figure child : getChildren()) {\r\n            ODGBezierFigure b = ((ODGBezierFigure) (child));\r\n            cachedPath.append(b.getBezierPath(), false);\r\n        }\r\n    }\r\n    return cachedPath;\r\n}'),(4861,'getTransformRestoreData()','org.jhotdraw.samples.odg.figures.ODGPathFigure.getTransformRestoreData()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic Object getTransformRestoreData() {\r\n    ArrayList<BezierPath> paths = new ArrayList<BezierPath>(getChildCount());\r\n    for (int i = 0, n = getChildCount(); i < n; i++) {\r\n        paths.add(getChild(i).getBezierPath());\r\n    }\r\n    return new Object[]{ paths, AttributeKeys.TRANSFORM.getClone(this), ODGAttributeKeys.FILL_GRADIENT.getClone(this), ODGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(4862,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.odg.figures.ODGPathFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        for (Figure child : getChildren()) {\r\n            ODGBezierFigure bf = ((ODGBezierFigure) (child));\r\n            int index = bf.getBezierPath().findSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n            if (index != (-1)) {\r\n                bf.handleMouseClick(p, evt, view);\r\n                evt.consume();\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}'),(4863,'invalidate()','org.jhotdraw.samples.odg.figures.ODGPathFigure.invalidate()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void invalidate() {\r\n    super.invalidate();\r\n    cachedPath = null;\r\n    cachedDrawingArea = null;\r\n}'),(4864,'isEmpty()','org.jhotdraw.samples.odg.figures.ODGPathFigure.isEmpty()','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public boolean isEmpty() {\r\n    for (Figure child : getChildren()) {\r\n        ODGBezierFigure b = ((ODGBezierFigure) (child));\r\n        if ((b.getNodeCount()) > 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}'),(4865,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.odg.figures.ODGPathFigure.read(org.jhotdraw.xml.DOMInput)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}'),(4866,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGPathFigure.restoreTransformTo(java.lang.Object)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void restoreTransformTo(Object geometry) {\r\n    invalidate();\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    ArrayList<BezierPath> paths = ((ArrayList<BezierPath>) (restoreData[0]));\r\n    for (int i = 0, n = getChildCount(); i < n; i++) {\r\n        getChild(i).setBezierPath(paths.get(i));\r\n    }\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    ODGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    ODGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n}'),(4867,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGPathFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}'),(4868,'setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGPathFigure.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\nprotected <T> void setAttributeOnChildren(AttributeKey<T> key, T newValue) {\r\n    // empty!\r\n}'),(4869,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGPathFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    if (((getChildCount()) == 1) && ((((ODGBezierFigure) (getChild(0))).getNodeCount()) <= 2)) {\r\n        ODGBezierFigure b = ((ODGBezierFigure) (getChild(0)));\r\n        b.setBounds(anchor, lead);\r\n        invalidate();\r\n    } else {\r\n        super.setBounds(anchor, lead);\r\n    }\r\n}'),(4870,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.odg.figures.ODGPathFigure.transform(java.awt.geom.AffineTransform)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','public void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSetClone(this, tx);\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        for (Figure f : getChildren()) {\r\n            f.transform(tx);\r\n        }\r\n        if (((ODGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(ODGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = ODGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            ODGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((ODGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(ODGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = ODGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            ODGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n    invalidate();\r\n}'),(4871,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.odg.figures.ODGPathFigure.write(org.jhotdraw.xml.DOMOutput)','513','org.jhotdraw.samples.odg.figures.ODGPathFigure','@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}'),(4872,'-init-(org.jhotdraw.samples.odg.figures.ODGPathFigure)','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.-init-(org.jhotdraw.samples.odg.figures.ODGPathFigure)','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGPathOutlineHandle(ODGPathFigure owner) {\r\n    super(owner);\r\n}'),(4873,'basicGetBounds()','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.basicGetBounds()','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','protected Rectangle basicGetBounds() {\r\n    return view.drawingToView(getOwner().getDrawingArea());\r\n}'),(4874,'contains(java.awt.Point)','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.contains(java.awt.Point)','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(4875,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.draw(java.awt.Graphics2D)','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','@Override\r\npublic void draw(Graphics2D g) {\r\n    Shape bounds = getOwner().getPath();\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n    }\r\n    bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n    g.setColor(ODGPathOutlineHandle.HANDLE_FILL_COLOR);\r\n    g.draw(bounds);\r\n}'),(4876,'getOwner()','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.getOwner()','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','public ODGPathFigure getOwner() {\r\n    return ((ODGPathFigure) (super.getOwner()));\r\n}'),(4877,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.trackEnd(java.awt.Point,java.awt.Point,int)','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(4878,'trackStart(java.awt.Point,int)','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.trackStart(java.awt.Point,int)','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(4879,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.trackStep(java.awt.Point,java.awt.Point,int)','514','org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(4880,'-init-()','org.jhotdraw.samples.odg.figures.ODGRectFigure.-init-()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGRectFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(4881,'-init-(double,double,double,double)','org.jhotdraw.samples.odg.figures.ODGRectFigure.-init-(double,double,double,double)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public ODGRectFigure(double x, double y, double width, double height) {\r\n    this(x, y, width, height, 0, 0);\r\n}'),(4882,'-init-(double,double,double,double,double,double)','org.jhotdraw.samples.odg.figures.ODGRectFigure.-init-(double,double,double,double,double,double)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public ODGRectFigure(double x, double y, double width, double height, double rx, double ry) {\r\n    roundrect = new RoundRectangle2D.Double(x, y, width, height, rx, ry);\r\n    ODGAttributeKeys.setDefaults(this);\r\n}'),(4883,'canConnect()','org.jhotdraw.samples.odg.figures.ODGRectFigure.canConnect()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// ODG does not support connecting\r\n\r\n}'),(4884,'clone()','org.jhotdraw.samples.odg.figures.ODGRectFigure.clone()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic ODGRectFigure clone() {\r\n    ODGRectFigure that = ((ODGRectFigure) (super.clone()));\r\n    that.roundrect = ((RoundRectangle2D.Double) (this.roundrect.clone()));\r\n    that.cachedTransformedShape = null;\r\n    that.cachedHitShape = null;\r\n    return that;\r\n}'),(4885,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGRectFigure.contains(java.awt.geom.Point2D$Double)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    return getHitShape().contains(p);\r\n}'),(4886,'createHandles(int)','org.jhotdraw.samples.odg.figures.ODGRectFigure.createHandles(int)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','// EDITING\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            handles.add(new ODGRectRadiusHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(4887,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGRectFigure.drawFill(java.awt.Graphics2D)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    if (((getArcHeight()) == 0.0) && ((getArcWidth()) == 0.0)) {\r\n        g.fill(roundrect.getBounds2D());\r\n    } else {\r\n        g.fill(roundrect);\r\n    }\r\n}'),(4888,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGRectFigure.drawStroke(java.awt.Graphics2D)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','protected void drawStroke(Graphics2D g) {\r\n    if (((getArcHeight()) == 0.0) && ((getArcWidth()) == 0.0)) {\r\n        g.draw(roundrect.getBounds2D());\r\n    } else {\r\n        g.draw(roundrect);\r\n    }\r\n}'),(4889,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.odg.figures.ODGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(4890,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.odg.figures.ODGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(4891,'getArc()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getArc()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public Dimension2DDouble getArc() {\r\n    return new Dimension2DDouble(((roundrect.arcwidth) / 2.0), ((roundrect.archeight) / 2.0));\r\n}'),(4892,'getArcHeight()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getArcHeight()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public double getArcHeight() {\r\n    return (roundrect.archeight) / 2.0;\r\n}'),(4893,'getArcWidth()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getArcWidth()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public double getArcWidth() {\r\n    return (roundrect.arcwidth) / 2.0;\r\n}'),(4894,'getBounds()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getBounds()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (roundrect.getBounds2D()));\r\n}'),(4895,'getDrawingArea()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getDrawingArea()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D rx = getTransformedShape().getBounds2D();\r\n    Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n    if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n        double g = (ODGAttributeKeys.getPerpendicularHitGrowth(this)) * 2;\r\n        Geom.grow(r, g, g);\r\n    } else {\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n            width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n        }\r\n        if ((AttributeKeys.STROKE_CAP.get(this)) != (BasicStroke.CAP_BUTT)) {\r\n            width += strokeTotalWidth * 2;\r\n        }\r\n        width++;\r\n        Geom.grow(r, width, width);\r\n    }\r\n    return r;\r\n}'),(4896,'getHeight()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getHeight()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public double getHeight() {\r\n    return roundrect.height;\r\n}'),(4897,'getHitShape()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getHitShape()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','private Shape getHitShape() {\r\n    if ((cachedHitShape) == null) {\r\n        cachedHitShape = new GrowStroke((((float) (ODGAttributeKeys.getStrokeTotalWidth(this))) / 2.0F), ((float) (ODGAttributeKeys.getStrokeTotalMiterLimit(this)))).createStrokedShape(getTransformedShape());\r\n    }\r\n    return cachedHitShape;\r\n}'),(4898,'getTransformRestoreData()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getTransformRestoreData()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public Object getTransformRestoreData() {\r\n    return new Object[]{ roundrect.clone(), AttributeKeys.TRANSFORM.getClone(this), ODGAttributeKeys.FILL_GRADIENT.getClone(this), ODGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(4899,'getTransformedShape()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getTransformedShape()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','private Shape getTransformedShape() {\r\n    if ((cachedTransformedShape) == null) {\r\n        if (((getArcHeight()) == 0) || ((getArcWidth()) == 0)) {\r\n            cachedTransformedShape = roundrect.getBounds2D();\r\n        } else {\r\n            cachedTransformedShape = ((Shape) (roundrect.clone()));\r\n        }\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            cachedTransformedShape = AttributeKeys.TRANSFORM.get(this).createTransformedShape(cachedTransformedShape);\r\n        }\r\n    }\r\n    return cachedTransformedShape;\r\n}'),(4900,'getWidth()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getWidth()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public double getWidth() {\r\n    return roundrect.width;\r\n}'),(4901,'getX()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getX()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','// SHAPE AND BOUNDS\r\npublic double getX() {\r\n    return roundrect.x;\r\n}'),(4902,'getY()','org.jhotdraw.samples.odg.figures.ODGRectFigure.getY()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public double getY() {\r\n    return roundrect.y;\r\n}'),(4903,'invalidate()','org.jhotdraw.samples.odg.figures.ODGRectFigure.invalidate()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    invalidateTransformedShape();\r\n}'),(4904,'invalidateTransformedShape()','org.jhotdraw.samples.odg.figures.ODGRectFigure.invalidateTransformedShape()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','private void invalidateTransformedShape() {\r\n    cachedTransformedShape = null;\r\n    cachedHitShape = null;\r\n}'),(4905,'isEmpty()','org.jhotdraw.samples.odg.figures.ODGRectFigure.isEmpty()','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public boolean isEmpty() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return ((b.width) <= 0) || ((b.height) <= 0);\r\n}'),(4906,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.odg.figures.ODGRectFigure.restoreTransformTo(java.lang.Object)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public void restoreTransformTo(Object geometry) {\r\n    invalidateTransformedShape();\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    roundrect = ((RoundRectangle2D.Double) (((RoundRectangle2D.Double) (restoreData[0])).clone()));\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    ODGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    ODGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n}'),(4907,'setArc(double,double)','org.jhotdraw.samples.odg.figures.ODGRectFigure.setArc(double,double)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','// ATTRIBUTES\r\npublic void setArc(double w, double h) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, (w * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, (h * 2.0)));\r\n}'),(4908,'setArc(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.samples.odg.figures.ODGRectFigure.setArc(org.jhotdraw.geom.Dimension2DDouble)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public void setArc(Dimension2DDouble arc) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, ((arc.width) * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, ((arc.height) * 2.0)));\r\n}'),(4909,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.odg.figures.ODGRectFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    invalidateTransformedShape();\r\n    roundrect.x = Math.min(anchor.x, lead.x);\r\n    roundrect.y = Math.min(anchor.y, lead.y);\r\n    roundrect.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    roundrect.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(4910,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.odg.figures.ODGRectFigure.transform(java.awt.geom.AffineTransform)','515','org.jhotdraw.samples.odg.figures.ODGRectFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		The transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    invalidateTransformedShape();\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || // (tx.getType() & (AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_MASK_SCALE)) != tx.getType()) {\r\n    (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSet(this, ((AffineTransform) (tx.clone())));\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        Point2D.Double anchor = getStartPoint();\r\n        Point2D.Double lead = getEndPoint();\r\n        setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n        if (((ODGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(ODGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = ODGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            ODGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((ODGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(ODGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = ODGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            ODGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n}'),(4911,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.-init-(org.jhotdraw.draw.Figure)','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGRectRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}'),(4912,'-init-()','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.-init-()','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','1() {\r\n}'),(4913,'basicGetBounds()','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.basicGetBounds()','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(locate());\r\n    r.grow((((getHandlesize()) / 2) + 1), (((getHandlesize()) / 2) + 1));\r\n    return r;\r\n}'),(4914,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.draw(java.awt.Graphics2D)','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','/**\r\n * Draws this handle.\r\n */\r\npublic void draw(Graphics2D g) {\r\n    drawDiamond(g, Color.yellow, Color.black);\r\n}'),(4915,'getToolTipText(java.awt.Point)','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.getToolTipText(java.awt.Point)','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','public String getToolTipText(Point p) {\r\n    return // \r\n    ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"handle.roundRectangleRadius.toolTipText\");\r\n}'),(4916,'locate()','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.locate()','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','private Point locate() {\r\n    ODGRectFigure owner = ((ODGRectFigure) (getOwner()));\r\n    Rectangle2D.Double r = owner.getBounds();\r\n    Point2D.Double p = new Point2D.Double(((r.x) + (owner.getArcWidth())), ((r.y) + (owner.getArcHeight())));\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        AttributeKeys.TRANSFORM.get(owner).transform(p, p);\r\n    }\r\n    return view.drawingToView(p);\r\n}'),(4917,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.trackEnd(java.awt.Point,java.awt.Point,int)','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    final ODGRectFigure odgRect = ((ODGRectFigure) (getOwner()));\r\n    final Dimension2DDouble oldValue = originalArc2D;\r\n    final Dimension2DDouble newValue = odgRect.getArc();\r\n    view.getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        public String getPresentationName() {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n            return labels.getString(\"arc\");\r\n        }\r\n\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            odgRect.willChange();\r\n            odgRect.setArc(oldValue);\r\n            odgRect.changed();\r\n        }\r\n\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            odgRect.willChange();\r\n            odgRect.setArc(newValue);\r\n            odgRect.changed();\r\n        }\r\n    });\r\n}'),(4918,'trackStart(java.awt.Point,int)','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.trackStart(java.awt.Point,int)','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    ODGRectFigure odgRect = ((ODGRectFigure) (getOwner()));\r\n    originalArc2D = odgRect.getArc();\r\n}'),(4919,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.trackStep(java.awt.Point,java.awt.Point,int)','516','org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    int dx = (lead.x) - (anchor.x);\r\n    int dy = (lead.y) - (anchor.y);\r\n    ODGRectFigure odgRect = ((ODGRectFigure) (getOwner()));\r\n    odgRect.willChange();\r\n    Point2D.Double p = view.viewToDrawing(lead);\r\n    if ((AttributeKeys.TRANSFORM.get(odgRect)) != null) {\r\n        try {\r\n            AttributeKeys.TRANSFORM.get(odgRect).inverseTransform(p, p);\r\n        } catch (NoninvertibleTransformException ex) {\r\n            if (ODGRectRadiusHandle.DEBUG)\r\n                ex.printStackTrace();\r\n\r\n        }\r\n    }\r\n    Rectangle2D.Double r = odgRect.getBounds();\r\n    odgRect.setArc(((p.x) - (r.x)), ((p.y) - (r.y)));\r\n    odgRect.changed();\r\n}'),(4920,'-init-()','org.jhotdraw.samples.odg.geom.EnhancedPath.-init-()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','EnhancedPath() {\r\n}'),(4921,'-init-(int)','org.jhotdraw.samples.odg.geom.EnhancedPath.-init-(int)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','SegType(int len) {\r\n    this.len = len;\r\n}'),(4922,'-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$SegType,java.lang.Object[])','org.jhotdraw.samples.odg.geom.EnhancedPath.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$SegType,java.lang.Object[])','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Creates a segment.\r\n */\r\npublic Segment(EnhancedPath.SegType type, Object... coordOrModifier) {\r\n    this.type = type;\r\n    for (int i = 0; i < (coordOrModifier.length); i++) {\r\n        if ((coordOrModifier[i]) instanceof Double) {\r\n            coords[i] = ((Double) (coordOrModifier[i]));\r\n        } else {\r\n            modifiers[i] = ((String) (coordOrModifier[i]));\r\n        }\r\n    }\r\n}'),(4923,'-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)','org.jhotdraw.samples.odg.geom.EnhancedPath.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public Segment(EnhancedPath.Segment that) {\r\n    setTo(that);\r\n}'),(4924,'arcTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.arcTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * (x1, y1) and (x2, y2) is defining the bounding\r\n * box of a ellipse. A line is then drawn from the\r\n * current point to the start angle of the arc that is\r\n * specified by the radial vector of point (x3, y3)\r\n * and then counter clockwise to the end-angle\r\n * that is specified by point (x4, y4).\r\n */\r\npublic void arcTo(Object x1, Object y1, Object x2, Object y2, Object x3, Object y3, Object x4, Object y4) {\r\n    if ((size()) == 0) {\r\n        throw new IllegalPathStateException(\"arcTo only allowed when not empty\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.ARCTO, x1, y1, x2, y2, x3, y3, x4, y4));\r\n}'),(4925,'clockwiseArcTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.clockwiseArcTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public void clockwiseArcTo(Object x1, Object y1, Object x2, Object y2, Object x3, Object y3, Object x4, Object y4) {\r\n    if ((size()) == 0) {\r\n        throw new IllegalPathStateException(\"clockwiseArcTo only allowed when not empty\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.CLOCKWISE_ARCTO, x1, y1, x2, y2, x3, y3, x4, y4));\r\n}'),(4926,'close()','org.jhotdraw.samples.odg.geom.EnhancedPath.close()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Closes the current path segment.\r\n * This is only allowed, when the current path segment is open.\r\n */\r\npublic void close() {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"close is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.CLOSE));\r\n}'),(4927,'contains(double,double)','org.jhotdraw.samples.odg.geom.EnhancedPath.contains(double,double)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public boolean contains(double x, double y) {\r\n    validatePath();\r\n    return generalPath.contains(x, y);\r\n}'),(4928,'contains(double,double,double,double)','org.jhotdraw.samples.odg.geom.EnhancedPath.contains(double,double,double,double)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public boolean contains(double x, double y, double w, double h) {\r\n    validatePath();\r\n    return generalPath.contains(x, y, w, h);\r\n}'),(4929,'contains(java.awt.geom.Point2D)','org.jhotdraw.samples.odg.geom.EnhancedPath.contains(java.awt.geom.Point2D)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public boolean contains(Point2D p) {\r\n    validatePath();\r\n    return generalPath.contains(p);\r\n}'),(4930,'contains(java.awt.geom.Rectangle2D)','org.jhotdraw.samples.odg.geom.EnhancedPath.contains(java.awt.geom.Rectangle2D)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public boolean contains(Rectangle2D r) {\r\n    validatePath();\r\n    return generalPath.contains(r);\r\n}'),(4931,'curveTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.curveTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Adds a cubic curve to the current path segment.\r\n * This is only allowed, when the current path segment is open.\r\n */\r\npublic void curveTo(Object x1, Object y1, Object x2, Object y2, Object x3, Object y3) {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"curveTo is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.CURVETO, x1, y1, x2, y2, x3, y3));\r\n}'),(4932,'ellipseTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.ellipseTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Draws a segment of an ellipse. The ellipse is specified by the\r\n * center(x, y), the size(w, h) and the start-angle t0 and end-angle t1.\r\n */\r\npublic void ellipseTo(Object x, Object y, Object w, Object h, Object t0, Object t1) {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"ellipseTo is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.ELLIPSETO, x, y, w, h, t0, t1));\r\n}'),(4933,'getBounds()','org.jhotdraw.samples.odg.geom.EnhancedPath.getBounds()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public Rectangle getBounds() {\r\n    return getBounds2D().getBounds();\r\n}'),(4934,'getBounds2D()','org.jhotdraw.samples.odg.geom.EnhancedPath.getBounds2D()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public Rectangle2D getBounds2D() {\r\n    if ((bounds) == null) {\r\n    }\r\n    return ((Rectangle2D.Double) (bounds.clone()));\r\n}'),(4935,'getPathIterator(java.awt.geom.AffineTransform)','org.jhotdraw.samples.odg.geom.EnhancedPath.getPathIterator(java.awt.geom.AffineTransform)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public PathIterator getPathIterator(AffineTransform at) {\r\n    validatePath();\r\n    return generalPath.getPathIterator(at);\r\n}'),(4936,'getPathIterator(java.awt.geom.AffineTransform,double)','org.jhotdraw.samples.odg.geom.EnhancedPath.getPathIterator(java.awt.geom.AffineTransform,double)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public PathIterator getPathIterator(AffineTransform at, double flatness) {\r\n    validatePath();\r\n    return generalPath.getPathIterator(at, flatness);\r\n}'),(4937,'getWindingRule()','org.jhotdraw.samples.odg.geom.EnhancedPath.getWindingRule()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Gets winding rule for filling the bezier path.\r\n *\r\n * @return GeneralPath.WIND_EVEN_ODD or GeneralPath.WIND_NON_ZERO.\r\n */\r\npublic int getWindingRule() {\r\n    return windingRule;\r\n}'),(4938,'intersects(double,double,double,double)','org.jhotdraw.samples.odg.geom.EnhancedPath.intersects(double,double,double,double)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public boolean intersects(double x, double y, double w, double h) {\r\n    validatePath();\r\n    return generalPath.intersects(x, y, w, h);\r\n}'),(4939,'intersects(java.awt.geom.Rectangle2D)','org.jhotdraw.samples.odg.geom.EnhancedPath.intersects(java.awt.geom.Rectangle2D)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public boolean intersects(Rectangle2D r) {\r\n    validatePath();\r\n    return generalPath.intersects(r);\r\n}'),(4940,'invalidatePath()','org.jhotdraw.samples.odg.geom.EnhancedPath.invalidatePath()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * This must be called after the EnhancedPath has been changed.\r\n */\r\npublic void invalidatePath() {\r\n    generalPath = null;\r\n    bounds = null;\r\n}'),(4941,'lineTo(java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.lineTo(java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Adds a line to the current path segment.\r\n * This is only allowed, when the current path segment is open.\r\n */\r\npublic void lineTo(Object x1, Object y1) {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"lineTo is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.LINETO, x1, y1));\r\n}'),(4942,'moveTo(java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.moveTo(java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Opens a new path segment at the specified position.\r\n */\r\npublic void moveTo(Object xm1, Object ym1) {\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.MOVETO, xm1, ym1));\r\n}'),(4943,'quadTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.quadTo(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Adds a quadratic curve to the current path segment.\r\n * This is only allowed, when the current path segment is open.\r\n */\r\npublic void quadTo(Object x1, Object y1, Object x2, Object y2) {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"quadTo is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.QUADTO, x1, y1, x2, y2));\r\n}'),(4944,'quadrantXTo(java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.quadrantXTo(java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public void quadrantXTo(Object x, Object y) {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"quadrantXTo is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.QUADRANT_XTO, x, y));\r\n}'),(4945,'quadrantYTo(java.lang.Object,java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath.quadrantYTo(java.lang.Object,java.lang.Object)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','public void quadrantYTo(Object x, Object y) {\r\n    if (((size()) == 0) || ((get(((size()) - 1)).type) == (EnhancedPath.SegType.CLOSE))) {\r\n        throw new IllegalPathStateException(\"quadrantYTo is only allowed when a path segment is open\");\r\n    }\r\n    add(new EnhancedPath.Segment(EnhancedPath.SegType.QUADRANT_YTO, x, y));\r\n}'),(4946,'setWindingRule(int)','org.jhotdraw.samples.odg.geom.EnhancedPath.setWindingRule(int)','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Sets winding rule for filling the bezier path.\r\n *\r\n * @param newValue\r\n * 		Must be GeneralPath.WIND_EVEN_ODD or GeneralPath.WIND_NON_ZERO.\r\n */\r\npublic void setWindingRule(int newValue) {\r\n    if (newValue != (windingRule)) {\r\n        invalidatePath();\r\n        int oldValue = windingRule;\r\n        this.windingRule = newValue;\r\n    }\r\n}'),(4947,'toGeneralPath()','org.jhotdraw.samples.odg.geom.EnhancedPath.toGeneralPath()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Converts the EnhancedPath into a GeneralPath.\r\n */\r\npublic GeneralPath toGeneralPath() {\r\n    GeneralPath gp = new GeneralPath();\r\n    // XXX implement me\r\n    return gp;\r\n}'),(4948,'validatePath()','org.jhotdraw.samples.odg.geom.EnhancedPath.validatePath()','519','org.jhotdraw.samples.odg.geom.EnhancedPath','/**\r\n * Recomputes the EnhancedPath, if it is invalid.\r\n */\r\npublic void validatePath() {\r\n    if ((generalPath) == null) {\r\n        generalPath = toGeneralPath();\r\n    }\r\n}'),(4949,'-init-(int)','org.jhotdraw.samples.odg.geom.EnhancedPath$SegType.-init-(int)','517','org.jhotdraw.samples.odg.geom.EnhancedPath$SegType','SegType(int len) {\r\n    this.len = len;\r\n}'),(4950,'getLen()','org.jhotdraw.samples.odg.geom.EnhancedPath$SegType.getLen()','517','org.jhotdraw.samples.odg.geom.EnhancedPath$SegType','int getLen() {\r\n    return len;\r\n}'),(4951,'-init-()','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-()','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','public Segment() {\r\n    type = EnhancedPath.SegType.LINETO;\r\n}'),(4952,'-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$SegType,java.lang.Object[])','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$SegType,java.lang.Object[])','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','/**\r\n * Creates a segment.\r\n */\r\npublic Segment(EnhancedPath.SegType type, Object... coordOrModifier) {\r\n    this.type = type;\r\n    for (int i = 0; i < (coordOrModifier.length); i++) {\r\n        if ((coordOrModifier[i]) instanceof Double) {\r\n            coords[i] = ((Double) (coordOrModifier[i]));\r\n        } else {\r\n            modifiers[i] = ((String) (coordOrModifier[i]));\r\n        }\r\n    }\r\n}'),(4953,'-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','public Segment(EnhancedPath.Segment that) {\r\n    setTo(that);\r\n}'),(4954,'clone()','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.clone()','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','public Object clone() {\r\n    try {\r\n        EnhancedPath.Segment that = ((EnhancedPath.Segment) (super.clone()));\r\n        that.coords = this.coords.clone();\r\n        that.modifiers = this.modifiers.clone();\r\n        return that;\r\n    } catch (CloneNotSupportedException e) {\r\n        InternalError error = new InternalError();\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(4955,'equals(java.lang.Object)','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.equals(java.lang.Object)','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','public boolean equals(Object o) {\r\n    if (o instanceof EnhancedPath.Segment) {\r\n        EnhancedPath.Segment that = ((EnhancedPath.Segment) (o));\r\n        return (((that.type) == (this.type)) && (Arrays.equals(that.coords, this.coords))) && (Arrays.equals(that.modifiers, this.modifiers));\r\n    }\r\n    return false;\r\n}'),(4956,'hashCode()','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.hashCode()','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','public int hashCode() {\r\n    return (((type.hashCode()) << 24) | ((Arrays.hashCode(coords)) & 268369920)) | ((Arrays.hashCode(modifiers)) & 65535);\r\n}'),(4957,'setTo(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.setTo(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)','518','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment','public void setTo(EnhancedPath.Segment that) {\r\n    this.type = that.type;\r\n    System.arraycopy(that.coords, 0, this.coords, 0, that.type.getLen());\r\n    System.arraycopy(that.modifiers, 0, this.modifiers, 0, that.type.getLen());\r\n}'),(4958,'-init-()','org.jhotdraw.samples.odg.io.ODGFigureFactory.-init-()','520','org.jhotdraw.samples.odg.io.ODGFigureFactory','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGFigureFactory() {\r\n}'),(4959,'-init-()','org.jhotdraw.samples.odg.io.ODGInputFormat.-init-()','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a new instance.\r\n */\r\npublic ODGInputFormat() {\r\n}'),(4960,'createEnhancedGeometryEllipseFigure(java.awt.geom.Rectangle2D$Double,java.util.Map)','org.jhotdraw.samples.odg.io.ODGInputFormat.createEnhancedGeometryEllipseFigure(java.awt.geom.Rectangle2D$Double,java.util.Map)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a Ellipse figure.\r\n */\r\nprivate ODGFigure createEnhancedGeometryEllipseFigure(Rectangle2D.Double bounds, Map<AttributeKey, Object> a) throws IOException {\r\n    ODGEllipseFigure figure = new ODGEllipseFigure();\r\n    figure.setBounds(bounds);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(4961,'createEnhancedGeometryRectangleFigure(java.awt.geom.Rectangle2D$Double,java.util.Map)','org.jhotdraw.samples.odg.io.ODGInputFormat.createEnhancedGeometryRectangleFigure(java.awt.geom.Rectangle2D$Double,java.util.Map)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a Rect figure.\r\n */\r\nprivate ODGFigure createEnhancedGeometryRectangleFigure(Rectangle2D.Double bounds, Map<AttributeKey, Object> a) throws IOException {\r\n    ODGRectFigure figure = new ODGRectFigure();\r\n    figure.setBounds(bounds);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(4962,'createGroupFigure()','org.jhotdraw.samples.odg.io.ODGInputFormat.createGroupFigure()','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a ODGGroupFigure.\r\n */\r\nprivate CompositeFigure createGroupFigure() throws IOException {\r\n    ODGGroupFigure figure = new ODGGroupFigure();\r\n    return figure;\r\n}'),(4963,'createLineFigure(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.util.Map)','org.jhotdraw.samples.odg.io.ODGInputFormat.createLineFigure(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.util.Map)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a Line figure.\r\n */\r\nprivate ODGFigure createLineFigure(Point2D.Double p1, Point2D.Double p2, Map<AttributeKey, Object> a) throws IOException {\r\n    ODGPathFigure figure = new ODGPathFigure();\r\n    figure.setBounds(p1, p2);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(4964,'createPathFigure(org.jhotdraw.geom.BezierPath[],java.util.Map)','org.jhotdraw.samples.odg.io.ODGInputFormat.createPathFigure(org.jhotdraw.geom.BezierPath[],java.util.Map)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a Path figure.\r\n */\r\nprivate ODGFigure createPathFigure(BezierPath[] paths, Map<AttributeKey, Object> a) throws IOException {\r\n    ODGPathFigure figure = new ODGPathFigure();\r\n    figure.removeAllChildren();\r\n    for (BezierPath p : paths) {\r\n        ODGBezierFigure bezier = new ODGBezierFigure();\r\n        bezier.setBezierPath(p);\r\n        figure.add(bezier);\r\n    }\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(4965,'createPolygonFigure(java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.odg.io.ODGInputFormat.createPolygonFigure(java.awt.geom.Point2D$Double[],java.util.Map)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a Polygon figure.\r\n */\r\nprivate ODGFigure createPolygonFigure(Point2D.Double[] points, Map<AttributeKey, Object> a) throws IOException {\r\n    ODGPathFigure figure = new ODGPathFigure();\r\n    ODGBezierFigure bezier = new ODGBezierFigure();\r\n    for (Point2D.Double p : points) {\r\n        bezier.addNode(new BezierPath.Node(p.x, p.y));\r\n    }\r\n    bezier.setClosed(true);\r\n    figure.removeAllChildren();\r\n    figure.add(bezier);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(4966,'createPolylineFigure(java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.odg.io.ODGInputFormat.createPolylineFigure(java.awt.geom.Point2D$Double[],java.util.Map)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Creates a Polyline figure.\r\n */\r\nprivate ODGFigure createPolylineFigure(Point2D.Double[] points, Map<AttributeKey, Object> a) throws IOException {\r\n    ODGPathFigure figure = new ODGPathFigure();\r\n    ODGBezierFigure bezier = new ODGBezierFigure();\r\n    for (Point2D.Double p : points) {\r\n        bezier.addNode(new BezierPath.Node(p.x, p.y));\r\n    }\r\n    figure.removeAllChildren();\r\n    figure.add(bezier);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(4967,'getFileFilter()','org.jhotdraw.samples.odg.io.ODGInputFormat.getFileFilter()','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(\"Open Document Drawing (ODG)\", \"odg\");\r\n}'),(4968,'getInputFormatAccessory()','org.jhotdraw.samples.odg.io.ODGInputFormat.getInputFormatAccessory()','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(4969,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.samples.odg.io.ODGInputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return (flavor.getPrimaryType().equals(\"application\")) && (flavor.getSubType().equals(\"vnd.oasis.opendocument.graphics\"));\r\n}'),(4970,'nextEnhancedCoordinate(org.jhotdraw.io.StreamPosTokenizer,java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.nextEnhancedCoordinate(org.jhotdraw.io.StreamPosTokenizer,java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Retrieves an enhanced coordinate from the specified tokenizer.\r\n * An enhanced coordinate can be a double, or a ? followed by a\r\n * formula name, or a $ followed by an index to a modifier.\r\n */\r\nprivate Object nextEnhancedCoordinate(StreamPosTokenizer tt, String str) throws IOException {\r\n    switch (tt.nextToken()) {\r\n        case ? :\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append(?);\r\n                int ch = tt.nextChar();\r\n                for (; (((ch >= a) && (ch <= z)) || ((ch >= A) && (ch <= Z))) || ((ch >= 0) && (ch <= 9)); ch = tt.nextChar()) {\r\n                    buf.append(((char) (ch)));\r\n                }\r\n                tt.pushCharBack(ch);\r\n                return buf.toString();\r\n            }\r\n        case $ :\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append($);\r\n                int ch = tt.nextChar();\r\n                for (; (ch >= 0) && (ch <= 9); ch = tt.nextChar()) {\r\n                    buf.append(((char) (ch)));\r\n                }\r\n                tt.pushCharBack(ch);\r\n                return buf.toString();\r\n            }\r\n        case StreamPosTokenizer.TT_NUMBER :\r\n            return tt.nval;\r\n        default :\r\n            throw new IOException((((\"coordinate missing at position\" + (tt.getStartPosition())) + \" in \") + str));\r\n    }\r\n}'),(4971,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = ((InputStream) (t.getTransferData(new DataFlavor(\"application/vnd.oasis.opendocument.graphics\", \"Image SVG\"))));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(4972,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(4973,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(4974,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    // Read the file into a byte array.\r\n    byte[] tmp = readAllBytes(in);\r\n    // Input stream of the content.xml file\r\n    InputStream contentIn = null;\r\n    // Input stream of the styles.xml file\r\n    InputStream stylesIn = null;\r\n    // Try to read \"tmp\" as a ZIP-File.\r\n    boolean isZipped = true;\r\n    try {\r\n        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(tmp));\r\n        for (ZipEntry entry; null != (entry = zin.getNextEntry());) {\r\n            if (entry.getName().equals(\"content.xml\")) {\r\n                contentIn = new ByteArrayInputStream(readAllBytes(zin));\r\n            } else\r\n                if (entry.getName().equals(\"styles.xml\")) {\r\n                    stylesIn = new ByteArrayInputStream(readAllBytes(zin));\r\n                }\r\n\r\n        }\r\n    } catch (ZipException e) {\r\n        isZipped = false;\r\n    }\r\n    if (contentIn == null) {\r\n        contentIn = new ByteArrayInputStream(tmp);\r\n    }\r\n    if (stylesIn == null) {\r\n        stylesIn = new ByteArrayInputStream(tmp);\r\n    }\r\n    styles = new ODGStylesReader();\r\n    styles.read(stylesIn);\r\n    readFiguresFromDocumentContent(contentIn, drawing, replace);\r\n}'),(4975,'readAllBytes(java.io.InputStream)','org.jhotdraw.samples.odg.io.ODGInputFormat.readAllBytes(java.io.InputStream)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Reads all bytes from the InputStreams until EOF is reached.\r\n */\r\nprivate byte[] readAllBytes(InputStream in) throws IOException {\r\n    ByteArrayOutputStream tmp = new ByteArrayOutputStream();\r\n    byte[] buf = new byte[512];\r\n    for (int len; (-1) != (len = in.read(buf));) {\r\n        tmp.write(buf, 0, len);\r\n    }\r\n    tmp.close();\r\n    return tmp.toByteArray();\r\n}'),(4976,'readCaptionElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readCaptionElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readCaptionElement(IXMLElement elem) throws IOException {\r\n    System.out.println(((\"ODGInputFormat.readCaptureElement(\" + elem) + \"):null - not implemented\"));\r\n    return null;\r\n}'),(4977,'readCircleElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readCircleElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readCircleElement(IXMLElement elem) throws IOException {\r\n    return null;\r\n}'),(4978,'readCommonDrawingShapeAttributes(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGInputFormat.readCommonDrawingShapeAttributes(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private void readCommonDrawingShapeAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    // The attribute draw:name assigns a name to the drawing shape.\r\n    ODGAttributeKeys.NAME.set(a, elem.getAttribute(\"name\", ODGConstants.DRAWING_NAMESPACE, null));\r\n    // The draw:transform attribute specifies a list of transformations that\r\n    // can be applied to a drawing shape.\r\n    AttributeKeys.TRANSFORM.set(a, ODGInputFormat.toTransform(elem.getAttribute(\"transform\", ODGConstants.DRAWING_NAMESPACE, null)));\r\n}'),(4979,'readCustomShapeElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readCustomShapeElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * A <draw:custom-shape> represents a shape that is capable of rendering\r\n * complex figures. It is offering font work and extrusion functiona-\r\n * lity. A custom shape may have a geometry that influences its shape.\r\n * This geometry may be visualized in office application user\r\n * interfaces, for instance by displaying interaction handles, that\r\n * provide a simple way to modify the geometry.\r\n */\r\nprivate ODGFigure readCustomShapeElement(IXMLElement elem) throws IOException {\r\n    String styleName = elem.getAttribute(\"style-name\", ODGConstants.DRAWING_NAMESPACE, null);\r\n    Map<AttributeKey, Object> a = styles.getAttributes(styleName, \"graphic\");\r\n    Rectangle2D.Double figureBounds = new Rectangle2D.Double(toLength(elem.getAttribute(\"x\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"y\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"width\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"height\", ODGConstants.SVG_NAMESPACE, \"0\"), 1));\r\n    ODGFigure figure = null;\r\n    for (IXMLElement child : elem.getChildrenNamed(\"enhanced-geometry\", ODGConstants.DRAWING_NAMESPACE)) {\r\n        figure = readEnhancedGeometryElement(child, a, figureBounds);\r\n    }\r\n    return figure;\r\n}'),(4980,'readDrawingElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readDrawingElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Reads an ODG \"office:drawing\" element.\r\n */\r\nprivate void readDrawingElement(IXMLElement elem) throws IOException {\r\n    /* 2.3.2Drawing Documents\n    The content of drawing document consists of a sequence of draw pages.\n    <define name=\"office-body-content\" combine=\"choice\">\n    <element name=\"office:drawing\">\n    <ref name=\"office-drawing-attlist\"/>\n    <ref name=\"office-drawing-content-prelude\"/>\n    <ref name=\"office-drawing-content-main\"/>\n    <ref name=\"office-drawing-content-epilogue\"/>\n    </element>\n    </define>\n    <define name=\"office-drawing-attlist\">\n    <empty/>\n    </define>\n\n    Drawing Document Content Model\n    The drawing document prelude may contain text declarations only. To allow office applications to\n    implement functionality that usually is available in spreadsheets for drawing documents, it may\n    also contain elements that implement enhanced table features. See also section 2.3.4.\n    <define name=\"office-drawing-content-prelude\">\n    <ref name=\"text-decls\"/>\n    <ref name=\"table-decls\"/>\n    </define>\n\n    The main document content contains a sequence of draw pages.\n    <define name=\"office-drawing-content-main\">\n    <zeroOrMore>\n    <ref name=\"draw-page\"/>\n    </zeroOrMore>\n    </define>\n\n    There are no drawing documents specific epilogue elements, but the epilogue may contain\n    elements that implement enhanced table features. See also section 2.3.4.\n    <define name=\"office-drawing-content-epilogue\">\n    <ref name=\"table-functions\"/>\n    </define>\n     */\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            if (((child.getNamespace()) == null) || (child.getNamespace().equals(ODGConstants.DRAWING_NAMESPACE))) {\r\n                String name = child.getName();\r\n                if (name.equals(\"page\")) {\r\n                    readPageElement(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(4981,'readElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Reads an ODG element.\r\n */\r\nprivate ODGFigure readElement(IXMLElement elem) throws IOException {\r\n    /* Drawing Shapes\n    This section describes drawing shapes that might occur within all kind of applications.\n    <define name=\"shape\">\n    <choice>\n    <ref name=\"draw-rect\"/>\n    <ref name=\"draw-line\"/>\n    <ref name=\"draw-polyline\"/>\n    <ref name=\"draw-polygon\"/>\n    <ref name=\"draw-regular-polygon\"/>\n    <ref name=\"draw-path\"/>\n    <ref name=\"draw-circle\"/>\n    <ref name=\"draw-ellipse\"/>\n    <ref name=\"draw-g\"/>\n    <ref name=\"draw-page-thumbnail\"/>\n    <ref name=\"draw-frame\"/>\n    <ref name=\"draw-measure\"/>\n    <ref name=\"draw-caption\"/>\n    <ref name=\"draw-connector\"/>\n    <ref name=\"draw-control\"/>\n    <ref name=\"dr3d-scene\"/>\n    <ref name=\"draw-custom-shape\"/>\n    </choice>\n    </define>\n     */\r\n    ODGFigure f = null;\r\n    if (((elem.getNamespace()) == null) || (elem.getNamespace().equals(ODGConstants.DRAWING_NAMESPACE))) {\r\n        String name = elem.getName();\r\n        if (name.equals(\"caption\")) {\r\n            f = readCaptionElement(elem);\r\n        } else\r\n            if (name.equals(\"circle\")) {\r\n                f = readCircleElement(elem);\r\n            } else\r\n                if (name.equals(\"connector\")) {\r\n                    f = readCircleElement(elem);\r\n                } else\r\n                    if (name.equals(\"custom-shape\")) {\r\n                        f = readCustomShapeElement(elem);\r\n                    } else\r\n                        if (name.equals(\"ellipse\")) {\r\n                            f = readEllipseElement(elem);\r\n                        } else\r\n                            if (name.equals(\"frame\")) {\r\n                                f = readFrameElement(elem);\r\n                            } else\r\n                                if (name.equals(\"g\")) {\r\n                                    f = readGElement(elem);\r\n                                } else\r\n                                    if (name.equals(\"line\")) {\r\n                                        f = readLineElement(elem);\r\n                                    } else\r\n                                        if (name.equals(\"measure\")) {\r\n                                            f = readMeasureElement(elem);\r\n                                        } else\r\n                                            if (name.equals(\"path\")) {\r\n                                                f = readPathElement(elem);\r\n                                            } else\r\n                                                if (name.equals(\"polygon\")) {\r\n                                                    f = readPolygonElement(elem);\r\n                                                } else\r\n                                                    if (name.equals(\"polyline\")) {\r\n                                                        f = readPolylineElement(elem);\r\n                                                    } else\r\n                                                        if (name.equals(\"rect\")) {\r\n                                                            f = readRectElement(elem);\r\n                                                        } else\r\n                                                            if (name.equals(\"regularPolygon\")) {\r\n                                                                f = readRegularPolygonElement(elem);\r\n                                                            } else {\r\n                                                                if (ODGInputFormat.DEBUG)\r\n                                                                    System.out.println(((\"ODGInputFormat.readElement(\" + elem) + \") not implemented.\"));\r\n\r\n                                                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    if (f != null) {\r\n        if (f.isEmpty()) {\r\n            if (ODGInputFormat.DEBUG)\r\n                System.out.println((\"ODGInputFormat.readElement():null - discarded empty figure \" + f));\r\n\r\n            return null;\r\n        }\r\n        if (ODGInputFormat.DEBUG)\r\n            System.out.println(((\"ODGInputFormat.readElement():\" + f) + \".\"));\r\n\r\n    }\r\n    return f;\r\n}'),(4982,'readEllipseElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readEllipseElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readEllipseElement(IXMLElement elem) throws IOException {\r\n    return null;\r\n}'),(4983,'readEnhancedGeometryElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.Map,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.samples.odg.io.ODGInputFormat.readEnhancedGeometryElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.Map,java.awt.geom.Rectangle2D$Double)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readEnhancedGeometryElement(IXMLElement elem, Map<AttributeKey, Object> a, Rectangle2D.Double figureBounds) throws IOException {\r\n    /* The <draw:enhanced-geometry> element contains the geometry for a\n    <draw:custom-shape> element if its draw:engine attribute has been\n    omitted.\n     */\r\n    /* The draw:type attribute contains the name of a shape type. This name\n    can be used to offer specialized user interfaces for certain classes\n    of shapes, like for arrows, smileys, etc.\n    The shape type is rendering engine dependent and does not influence\n    the geometry of the shape.\n    If the value of the draw:type attribute is non-primitive, then no\n    shape type is available.\n     */\r\n    String type = elem.getAttribute(\"type\", ODGConstants.DRAWING_NAMESPACE, \"non-primitive\");\r\n    EnhancedPath path;\r\n    if (elem.hasAttribute(\"enhanced-path\", ODGConstants.DRAWING_NAMESPACE)) {\r\n        path = toEnhancedPath(elem.getAttribute(\"enhanced-path\", ODGConstants.DRAWING_NAMESPACE, null));\r\n    } else {\r\n        path = null;\r\n    }\r\n    /* The svg:viewBox attribute establishes a user coordinate system inside\n    the physical coordinate system of the shape specified by the position\n    and size attributes. This user coordinate system is used by the\n    <draw:enhanced-path> element.\n    The syntax for using this attribute is the same as the [SVG] syntax.\n    The value of the attribute are four numbers separated by white\n    spaces, which define the left, top, right, and bottom dimensions\n    of the user coordinate system.\n     */\r\n    String[] viewBoxValues = ODGInputFormat.toWSOrCommaSeparatedArray(elem.getAttribute(\"viewBox\", ODGConstants.DRAWING_NAMESPACE, \"0 0 100 100\"));\r\n    Rectangle2D.Double viewBox = new Rectangle2D.Double(toNumber(viewBoxValues[0]), toNumber(viewBoxValues[1]), toNumber(viewBoxValues[2]), toNumber(viewBoxValues[3]));\r\n    AffineTransform viewTx = new AffineTransform();\r\n    if (!(viewBox.isEmpty())) {\r\n        viewTx.scale(((figureBounds.width) / (viewBox.width)), ((figureBounds.height) / (viewBox.height)));\r\n        viewTx.translate(((figureBounds.x) - (viewBox.x)), ((figureBounds.y) - (viewBox.y)));\r\n    }\r\n    /* The draw:mirror-vertical and draw:mirror-horizontal attributes\n    specify if the geometry of the shape is to be mirrored.\n     */\r\n    boolean mirrorVertical = elem.getAttribute(\"mirror-vertical\", ODGConstants.DRAWING_NAMESPACE, \"false\").equals(\"true\");\r\n    boolean mirrorHorizontal = elem.getAttribute(\"mirror-horizontal\", ODGConstants.DRAWING_NAMESPACE, \"false\").equals(\"true\");\r\n    // FIXME - Implement Text Rotate Angle\r\n    // FIXME - Implement Extrusion Allowed\r\n    // FIXME - Implement Text Path Allowed\r\n    // FIXME - Implement Concentric Gradient Allowed\r\n    ODGFigure figure;\r\n    if (type.equals(\"rectangle\")) {\r\n        figure = createEnhancedGeometryRectangleFigure(figureBounds, a);\r\n    } else\r\n        if (type.equals(\"ellipse\")) {\r\n            figure = createEnhancedGeometryEllipseFigure(figureBounds, a);\r\n        } else {\r\n            System.out.println((\"ODGInputFormat.readEnhancedGeometryElement not implemented for \" + elem));\r\n            figure = null;\r\n        }\r\n\r\n    return figure;\r\n}'),(4984,'readFiguresFromDocumentContent(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.odg.io.ODGInputFormat.readFiguresFromDocumentContent(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Reads figures from the content.xml file of an ODG open document drawing\r\n * document.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic void readFiguresFromDocumentContent(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    this.figures = new LinkedList<Figure>();\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    if ((styles) == null) {\r\n        styles = new ODGStylesReader();\r\n    }\r\n    styles.read(document);\r\n    // Search for the first office:drawing element in the XML document\r\n    // in preorder sequence\r\n    IXMLElement drawingElem = document;\r\n    Stack<Iterator> stack = new Stack<Iterator>();\r\n    LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();\r\n    ll.add(document);\r\n    stack.push(ll.iterator());\r\n    while ((!(stack.empty())) && (stack.peek().hasNext())) {\r\n        Iterator<IXMLElement> iter = stack.peek();\r\n        IXMLElement node = iter.next();\r\n        Iterator<IXMLElement> children = node.getChildren().iterator();\r\n        if (!(iter.hasNext())) {\r\n            stack.pop();\r\n        }\r\n        if (children.hasNext()) {\r\n            stack.push(children);\r\n        }\r\n        if ((((node.getName()) != null) && (node.getName().equals(\"drawing\"))) && (((node.getNamespace()) == null) || (node.getNamespace().equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n            drawingElem = node;\r\n            break;\r\n        }\r\n    } \r\n    if ((((drawingElem.getName()) == null) || (!(drawingElem.getName().equals(\"drawing\")))) || (((drawingElem.getNamespace()) != null) && (!(drawingElem.getNamespace().equals(ODGConstants.OFFICE_NAMESPACE))))) {\r\n        throw new IOException((\"office:drawing element expected: \" + (drawingElem.getName())));\r\n    }\r\n    readDrawingElement(drawingElem);\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n}'),(4985,'readFrameElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readFrameElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Reads a &lt;draw:frame&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * A frame is a rectangular container where that contains enhanced content\r\n * like text boxes, images or objects. Frames are very similar to regular\r\n * drawing shapes, but support some features that are not available for\r\n * regular drawing shapes, like contours, image maps and hyperlinks. In\r\n * particular, a frame allows to have multiple renditions of an object. That\r\n * is, a frame may for instance contain an object as well as an image. In\r\n * this case, the application may choose the content that it supports best.\r\n * If the application supports the object type contained in the frame, it\r\n * probably will render the object. If it does not support the object, it\r\n * will render the image.\r\n * <p>\r\n * In general, an application must not render more than one of the content\r\n * elements contained in a frame. The order of content elements dictates\r\n * the document authors preference for rendering, with the first child\r\n * being the most preferred. This means that applications should render the\r\n * first child element that it supports. A frame must contain at least one\r\n * content element. The inclusion of multiple content elements is optional.\r\n * Application may preserve the content elements they dont render, but\r\n * dont have to.\r\n * <p>\r\n * Within text documents, frames are also used to position content outside\r\n * the default text flow of a document.\r\n * <p>\r\n * Frames can contain:\r\n * • Text boxes\r\n * • Objects represented either in the OpenDocument format or in a object\r\n *      specific binary format\r\n * • Images\r\n * • Applets\r\n * • Plug-ins\r\n * • Floating frames\r\n * <p>\r\n * Like the formatting properties of drawing shapes, frame formatting\r\n * properties are stored in styles belonging to the graphic family. The way\r\n * a frame is contained in a document also is the same as for drawing shapes.\r\n *\r\n * @param elem\r\n * 		A &lt;frame&gt; element.\r\n */\r\nprivate ODGFigure readFrameElement(IXMLElement elem) throws IOException {\r\n    if (ODGInputFormat.DEBUG)\r\n        System.out.println(((\"ODGInputFormat.readFrameElement(\" + elem) + \") not implemented.\"));\r\n\r\n    return null;\r\n}'),(4986,'readGElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readGElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readGElement(IXMLElement elem) throws IOException {\r\n    CompositeFigure g = createGroupFigure();\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            Figure childFigure = readElement(child);\r\n            if (childFigure != null) {\r\n                g.basicAdd(childFigure);\r\n            }\r\n        }\r\n    }\r\n    /* readTransformAttribute(elem, a);\n    if (TRANSFORM.get(a) != null) {\n    g.transform(TRANSFORM.get(a));\n    }\n     */\r\n    return ((ODGFigure) (g));\r\n}'),(4987,'readLineElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readLineElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * The &lt;draw:line&gt; element represents a line.\r\n * <p>\r\n * The attributes that may be associated with the &lt;draw:line&gt; element\r\n * are:\r\n * • Style, Layer, Z-Index, ID, Caption ID and Transformation – see section\r\n * 9.2.15.\r\n * • Text anchor, table background, draw end position– see section 9.2.16.\r\n * • Start point\r\n * • End point\r\n * <p>\r\n * The elements that may be contained in the &lt;draw:line&gt; element are:\r\n * • Title (short accessible name) – see section 9.2.20.\r\n * • Long description (in support of accessibility) – see section 9.2.20.\r\n * • Event listeners – see section 9.2.21.\r\n * • Glue points – see section 9.2.19.\r\n * • Text – see section 9.2.17.\r\n */\r\nprivate ODGFigure readLineElement(IXMLElement elem) throws IOException {\r\n    Point2D.Double p1 = new Point2D.Double(toLength(elem.getAttribute(\"x1\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"y1\", ODGConstants.SVG_NAMESPACE, \"0\"), 1));\r\n    Point2D.Double p2 = new Point2D.Double(toLength(elem.getAttribute(\"x2\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"y2\", ODGConstants.SVG_NAMESPACE, \"0\"), 1));\r\n    String styleName = elem.getAttribute(\"style-name\", ODGConstants.DRAWING_NAMESPACE, null);\r\n    Map<AttributeKey, Object> a = styles.getAttributes(styleName, \"graphic\");\r\n    ODGFigure f = createLineFigure(p1, p2, a);\r\n    return f;\r\n}'),(4988,'readMeasureElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readMeasureElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readMeasureElement(IXMLElement elem) throws IOException {\r\n    System.out.println(((\"ODGInputFormat.readMeasureElement(\" + elem) + \"):null - not implemented\"));\r\n    return null;\r\n}'),(4989,'readPageElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readPageElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Reads an ODG \"draw:page\" element.\r\n */\r\nprivate void readPageElement(IXMLElement elem) throws IOException {\r\n    /* 9.1.4Drawing Pages\n\n    The element <draw:page> is a container for content in a drawing or presentation document.\n    Drawing pages are used for the following:\n    • Forms (see section 11.1)\n    • Drawings (see section 9.2)\n    • Frames (see section 9.3)\n    • Presentation Animations (see section 9.7)\n    • Presentation Notes (see section 9.1.5)\n\n    A master page must be assigned to each drawing page.\n\n    <define name=\"draw-page\">\n    <element name=\"draw:page\">\n    <ref name=\"common-presentation-header-footer-attlist\"/>\n    <ref name=\"draw-page-attlist\"/>\n    <optional>\n    <ref name=\"office-forms\"/>\n    </optional>\n    <zeroOrMore>\n    <ref name=\"shape\"/>\n    </zeroOrMore>\n    <optional>\n    <choice>\n    <ref name=\"presentation-animations\"/>\n    <ref name=\"animation-element\"/>\n    </choice>\n    </optional>\n    <optional>\n    <ref name=\"presentation-notes\"/>\n    </optional>\n    </element>\n    </define>\n\n    The attributes that may be associated with the <draw:page> element are:\n    • Page name\n    • Page style\n    • Master page\n    • Presentation page layout\n    • Header declaration\n    • Footer declaration\n    • Date and time declaration\n    • ID\n\n    The elements that my be included in the <draw:page> element are:\n    • Forms\n    • Shapes\n    • Animations\n    • Presentation notes\n     */\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            ODGFigure figure = readElement(child);\r\n            if (figure != null) {\r\n                figures.add(figure);\r\n            }\r\n        }\r\n    }\r\n}'),(4990,'readPathElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readPathElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readPathElement(IXMLElement elem) throws IOException {\r\n    AffineTransform viewBoxTransform = readViewBoxTransform(elem);\r\n    BezierPath[] paths = toPath(elem.getAttribute(\"d\", ODGConstants.SVG_NAMESPACE, null));\r\n    for (BezierPath p : paths) {\r\n        p.transform(viewBoxTransform);\r\n    }\r\n    String styleName = elem.getAttribute(\"style-name\", ODGConstants.DRAWING_NAMESPACE, null);\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    a.putAll(styles.getAttributes(styleName, \"graphic\"));\r\n    readCommonDrawingShapeAttributes(elem, a);\r\n    ODGFigure f = createPathFigure(paths, a);\r\n    return f;\r\n}'),(4991,'readPolygonElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readPolygonElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * The &lt;draw:polygon&gt; element represents a polygon. A polygon is a\r\n * closed set of straight lines.\r\n * Some implementations may ignore the size attribute, and instead determine\r\n * the size of a shape exclusively from the shape data (i.e., polygon vertices).\r\n * <p>\r\n * The attributes that may be associated with the &lt;draw:polygon&gt; element\r\n * are:\r\n * • Position, Size, View box, Style, Layer, Z-Index, ID, Caption ID and\r\n * Transformation – see section 9.2.15\r\n * • Text anchor, table background, draw end position – see section 9.2.16\r\n * • Points – see section 9.2.3\r\n * The elements that may be contained in the &lt;draw:polygon&gt; element are:\r\n * • Title (short accessible name) – see section 9.2.20.\r\n * • Long description (in support of accessibility) – see section 9.2.20.\r\n * • Event listeners – see section 9.2.21.\r\n * • Glue points – see section 9.2.19.\r\n * • Text – see section 9.2.17.\r\n */\r\nprivate ODGFigure readPolygonElement(IXMLElement elem) throws IOException {\r\n    AffineTransform viewBoxTransform = readViewBoxTransform(elem);\r\n    String[] coords = ODGInputFormat.toWSOrCommaSeparatedArray(elem.getAttribute(\"points\", ODGConstants.DRAWING_NAMESPACE, null));\r\n    Point2D.Double[] points = new Point2D.Double[(coords.length) / 2];\r\n    for (int i = 0; i < (coords.length); i += 2) {\r\n        Point2D.Double p = new Point2D.Double(toNumber(coords[i]), toNumber(coords[(i + 1)]));\r\n        points[(i / 2)] = ((Point2D.Double) (viewBoxTransform.transform(p, p)));\r\n    }\r\n    String styleName = elem.getAttribute(\"style-name\", ODGConstants.DRAWING_NAMESPACE, null);\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    a.putAll(styles.getAttributes(styleName, \"graphic\"));\r\n    readCommonDrawingShapeAttributes(elem, a);\r\n    ODGFigure f = createPolygonFigure(points, a);\r\n    return f;\r\n}'),(4992,'readPolylineElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readPolylineElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * The &lt;draw:polyline&gt; element represents a polyline drawing shape.\r\n * Some implementations may ignore the size attribute, and instead determine the size of a shape\r\n * exclusively from the shape data (i.e., polygon vertices).\r\n * <p>\r\n * The attributes that may be associated with the &lt;draw:polyline&gt;\r\n * element are:\r\n * • Position, Size, View box, Style, Layer, Z-Index, ID, Caption ID and Transformation – see\r\n * section 9.2.15\r\n * • Text anchor, table background, draw end position – see section 9.2.16\r\n * • Points\r\n * The elements that may be contained in the &lt;draw:polyline&gt; element are:\r\n * • Title (short accessible name) – see section 9.2.20.\r\n * • Long description (in support of accessibility) – see section 9.2.20.\r\n * • Event listeners – see section 9.2.21.\r\n * • Glue points – see section 9.2.19.\r\n * • Text – see section 9.2.17.\r\n */\r\nprivate ODGFigure readPolylineElement(IXMLElement elem) throws IOException {\r\n    AffineTransform viewBoxTransform = readViewBoxTransform(elem);\r\n    String[] coords = ODGInputFormat.toWSOrCommaSeparatedArray(elem.getAttribute(\"points\", ODGConstants.DRAWING_NAMESPACE, null));\r\n    Point2D.Double[] points = new Point2D.Double[(coords.length) / 2];\r\n    for (int i = 0; i < (coords.length); i += 2) {\r\n        Point2D.Double p = new Point2D.Double(toNumber(coords[i]), toNumber(coords[(i + 1)]));\r\n        points[(i / 2)] = ((Point2D.Double) (viewBoxTransform.transform(p, p)));\r\n    }\r\n    String styleName = elem.getAttribute(\"style-name\", ODGConstants.DRAWING_NAMESPACE, null);\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    a.putAll(styles.getAttributes(styleName, \"graphic\"));\r\n    readCommonDrawingShapeAttributes(elem, a);\r\n    ODGFigure f = createPolylineFigure(points, a);\r\n    return f;\r\n}'),(4993,'readRectElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readRectElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readRectElement(IXMLElement elem) throws IOException {\r\n    System.out.println(((\"ODGInputFormat.readRectElement(\" + elem) + \"):null - not implemented\"));\r\n    return null;\r\n}'),(4994,'readRegularPolygonElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readRegularPolygonElement(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private ODGFigure readRegularPolygonElement(IXMLElement elem) throws IOException {\r\n    System.out.println(((\"ODGInputFormat.readRegularPolygonElement(\" + elem) + \"):null - not implemented\"));\r\n    return null;\r\n}'),(4995,'readViewBoxTransform(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGInputFormat.readViewBoxTransform(org.jhotdraw.samples.odg.io.IXMLElement)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private AffineTransform readViewBoxTransform(IXMLElement elem) throws IOException {\r\n    AffineTransform tx = new AffineTransform();\r\n    Rectangle2D.Double figureBounds = new Rectangle2D.Double(toLength(elem.getAttribute(\"x\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"y\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"width\", ODGConstants.SVG_NAMESPACE, \"0\"), 1), toLength(elem.getAttribute(\"height\", ODGConstants.SVG_NAMESPACE, \"0\"), 1));\r\n    tx.translate(figureBounds.x, figureBounds.y);\r\n    // The svg:viewBox attribute establishes a user coordinate system inside the physical coordinate\r\n    // system of the shape specified by the position and size attributes. This user coordinate system is\r\n    // used by the svg:points attribute and the <draw:path> element.\r\n    // The syntax for using this attribute is the same as the [SVG] syntax. The value of the attribute are\r\n    // four numbers separated by white spaces, which define the left, top, right, and bottom dimensions\r\n    // of the user coordinate system.\r\n    // Some implementations may ignore the view box attribute. The implied coordinate system then has\r\n    // its origin at the left, top corner of the shape, without any scaling relative to the shape.\r\n    String[] viewBoxValues = ODGInputFormat.toWSOrCommaSeparatedArray(elem.getAttribute(\"viewBox\", ODGConstants.SVG_NAMESPACE, null));\r\n    if ((viewBoxValues.length) == 4) {\r\n        Rectangle2D.Double viewBox = new Rectangle2D.Double(toNumber(viewBoxValues[0]), toNumber(viewBoxValues[1]), toNumber(viewBoxValues[2]), toNumber(viewBoxValues[3]));\r\n        if ((!(viewBox.isEmpty())) && (!(figureBounds.isEmpty()))) {\r\n            tx.scale(((figureBounds.width) / (viewBox.width)), ((figureBounds.height) / (viewBox.height)));\r\n            tx.translate((-(viewBox.x)), (-(viewBox.y)));\r\n        }\r\n    }\r\n    return tx;\r\n}'),(4996,'toEnhancedPath(java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.toEnhancedPath(java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Returns a value as a EnhancedPath array.\r\n *\r\n * The draw:enhanced-path attribute specifies a path similar to the svg:d attribute of the\r\n * <svg:path> element. Instructions such as moveto, lineto, arcto and other instructions\r\n * together with its parameter are describing the geometry of a shape which can be filled and or\r\n * stroked. Relative commands are not supported.\r\n * The syntax of draw:enhanced-path attribute is as follows:\r\n * • Instructions are expressed as one character (e.g., a moveto is expressed as an M).\r\n * • A prefix notation is being used, that means that each command is followed by its parameter.\r\n * • Superfluous white space and separators such as commas can be eliminated. (e.g., “M 10 10\r\n * L 20 20 L 30 20” can also be written: “M10 10L20 20L30 20”\r\n * • If the command is repeated multiple times, only the first command is required. (e.g., “M 10 10\r\n * L 20 20 L 30 20” can also be expressed as followed “M 10 10 L 20 20 30 20”\r\n * • Floats can be used, therefore the only allowable decimal point is a dot (“.”)\r\n * The above mentioned rules are the same as specified for the <svg:path> element.\r\n * A parameter can also have one of the following enhancements:\r\n * • A “?” is used to mark the beginning of a formula name. The result of the elements\r\n * draw:formula attribute is used as parameter value in this case.\r\n * • If “$” is preceding a integer value, the value is indexing a draw:modifiers attribute. The\r\n * corresponding modifier value is used as parameter value then.\r\n */\r\nprivate EnhancedPath toEnhancedPath(String str) throws IOException {\r\n    if (ODGInputFormat.DEBUG)\r\n        System.out.println((\"ODGInputFormat toEnhancedPath \" + str));\r\n\r\n    EnhancedPath path = null;\r\n    Object x;\r\n    Object y;\r\n    Object x1;\r\n    Object y1;\r\n    Object x2;\r\n    Object y2;\r\n    Object x3;\r\n    Object y3;\r\n    StreamPosTokenizer tt = new StreamPosTokenizer(new StringReader(str));\r\n    tt.resetSyntax();\r\n    tt.parseNumbers();\r\n    tt.parseExponents();\r\n    tt.parsePlusAsNumber();\r\n    tt.whitespaceChars(0,  );\r\n    tt.whitespaceChars(,, ,);\r\n    char nextCommand = M;\r\n    char command = M;\r\n    Commands : while ((tt.nextToken()) != (StreamPosTokenizer.TT_EOF)) {\r\n        if ((tt.ttype) > 0) {\r\n            command = ((char) (tt.ttype));\r\n        } else {\r\n            command = nextCommand;\r\n            tt.pushBack();\r\n        }\r\n        nextCommand = command;\r\n        switch (command) {\r\n            case M :\r\n                // moveto (x y)+\r\n                // Start a new sub-path at the given (x,y)\r\n                // coordinate. If a moveto is followed by multiple\r\n                // pairs of coordinates, they are treated as lineto.\r\n                if (path == null) {\r\n                    path = new EnhancedPath();\r\n                }\r\n                // path.setFilled(isFilled);\r\n                // path.setStroked(isStroked);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.moveTo(x, y);\r\n                nextCommand = L;\r\n                break;\r\n            case L :\r\n                // lineto (x y)+\r\n                // Draws a line from the current point to (x, y). If\r\n                // multiple coordinate pairs are following, they\r\n                // are all interpreted as lineto.\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.lineTo(x, y);\r\n                break;\r\n            case C :\r\n                // curveto (x1 y1 x2 y2 x y)+\r\n                // Draws a cubic Bézier curve from the current\r\n                // point to (x,y) using (x1,y1) as the control point\r\n                // at the beginning of the curve and (x2,y2) as\r\n                // the control point at the end of the curve.\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.curveTo(x1, y1, x2, y2, x, y);\r\n                break;\r\n            case Z :\r\n                // closepath\r\n                // Close the current sub-path by drawing a\r\n                // straight line from the current point to current\r\n                // sub-paths initial point.\r\n                path.close();\r\n                break;\r\n            case N :\r\n                // endpath\r\n                // Ends the current set of sub-paths. The sub-\r\n                // paths will be filled by using the “even-odd”\r\n                // filling rule. Other following subpaths will be\r\n                // filled independently.\r\n                break;\r\n            case F :\r\n                // nofill\r\n                // Specifies that the current set of sub-paths\r\n                // wont be filled.\r\n                break;\r\n            case S :\r\n                // nostroke\r\n                // Specifies that the current set of sub-paths\r\n                // wont be stroked.\r\n                break;\r\n            case T :\r\n                // angle-ellipseto (x y w h t0 t1) +\r\n                // Draws a segment of an ellipse. The ellipse is specified\r\n                // by the center(x, y), the size(w, h) and the start-angle\r\n                // t0 and end-angle t1.\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                path.ellipseTo(x, y, x1, y1, x2, y2);\r\n                break;\r\n            case U :\r\n                // angle-ellipse (x y w h t0 t1) +\r\n                // The same as the “T” command, except that a implied moveto\r\n                // to the starting point is done.\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                path.moveTo(x1, y1);\r\n                path.ellipseTo(x, y, x1, y1, x2, y2);\r\n                break;\r\n            case A :\r\n                // arcto (x1 y1 x2 y2 x3 y3 x y) +\r\n                // (x1, y1) and (x2, y2) is defining the bounding\r\n                // box of a ellipse. A line is then drawn from the\r\n                // current point to the start angle of the arc that is\r\n                // specified by the radial vector of point (x3, y3)\r\n                // and then counter clockwise to the end-angle\r\n                // that is specified by point (x4, y4).\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                x3 = nextEnhancedCoordinate(tt, str);\r\n                y3 = nextEnhancedCoordinate(tt, str);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.arcTo(x1, y1, x2, y2, x3, y3, x, y);\r\n                break;\r\n            case B :\r\n                // arc (x1 y1 x2 y2 x3 y3 x y) +\r\n                // The same as the “A” command, except that a\r\n                // implied moveto to the starting point is done.\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                x3 = nextEnhancedCoordinate(tt, str);\r\n                y3 = nextEnhancedCoordinate(tt, str);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.moveTo(x1, y1);\r\n                path.arcTo(x1, y1, x2, y2, x3, y3, x, y);\r\n                break;\r\n            case W :\r\n                // clockwisearcto (x1 y1 x2 y2 x3 y3 x y) +\r\n                // The same as the “A” command except, that the arc is drawn\r\n                // clockwise.\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                x3 = nextEnhancedCoordinate(tt, str);\r\n                y3 = nextEnhancedCoordinate(tt, str);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.clockwiseArcTo(x1, y1, x2, y2, x3, y3, x, y);\r\n                break;\r\n            case V :\r\n                // clockwisearc (x1 y1 x2 y2 x3 y3 x y)+\r\n                // The same as the “A” command, except that a implied moveto\r\n                // to the starting point is done and the arc is drawn\r\n                // clockwise.\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x2 = nextEnhancedCoordinate(tt, str);\r\n                y2 = nextEnhancedCoordinate(tt, str);\r\n                x3 = nextEnhancedCoordinate(tt, str);\r\n                y3 = nextEnhancedCoordinate(tt, str);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.moveTo(x1, y1);\r\n                path.clockwiseArcTo(x1, y1, x2, y2, x3, y3, x, y);\r\n                break;\r\n            case X :\r\n                // elliptical-quadrantx (x y) +\r\n                // Draws a quarter ellipse, whose initial segment is\r\n                // tangential to the x-axis, is drawn from the\r\n                // current point to (x, y).\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.quadrantXTo(x, y);\r\n                break;\r\n            case Y :\r\n                // elliptical-quadranty (x y) +\r\n                // Draws a quarter ellipse, whose initial segment is\r\n                // tangential to the y-axis, is drawn from the\r\n                // current point to(x, y).\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.quadrantYTo(x, y);\r\n                break;\r\n            case Q :\r\n                // quadratic-curveto(x1 y1 x y)+\r\n                // Draws a quadratic Bézier curve from the current point\r\n                // to(x, y) using(x1, y1) as the control point. (x, y)\r\n                // becomes the new current point at the end of the command.\r\n                x1 = nextEnhancedCoordinate(tt, str);\r\n                y1 = nextEnhancedCoordinate(tt, str);\r\n                x = nextEnhancedCoordinate(tt, str);\r\n                y = nextEnhancedCoordinate(tt, str);\r\n                path.quadTo(x1, y1, x, y);\r\n                break;\r\n            default :\r\n                if (ODGInputFormat.DEBUG)\r\n                    System.out.println((((\"ODGInputFormat.toEnhancedPath aborting after illegal path command: \" + command) + \" found in path \") + str));\r\n\r\n                break Commands;\r\n                // throw new IOException(\"Illegal command: \"+command);\r\n        }\r\n    } \r\n    return path;\r\n}'),(4997,'toLength(java.lang.String,double)','org.jhotdraw.samples.odg.io.ODGInputFormat.toLength(java.lang.String,double)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Returns a value as a length.\r\n * http://www.w3.org/TR/SVGMobile12/types.html#DataTypeLength\r\n */\r\nprivate double toLength(String str, double percentFactor) throws IOException {\r\n    double scaleFactor = 1.0;\r\n    if ((str == null) || ((str.length()) == 0)) {\r\n        return 0.0;\r\n    }\r\n    if (str.endsWith(\"%\")) {\r\n        str = str.substring(0, ((str.length()) - 1));\r\n        scaleFactor = percentFactor;\r\n    } else\r\n        if (str.endsWith(\"px\")) {\r\n            str = str.substring(0, ((str.length()) - 2));\r\n        } else\r\n            if (str.endsWith(\"pt\")) {\r\n                str = str.substring(0, ((str.length()) - 2));\r\n                scaleFactor = 1.25;\r\n            } else\r\n                if (str.endsWith(\"pc\")) {\r\n                    str = str.substring(0, ((str.length()) - 2));\r\n                    scaleFactor = 15;\r\n                } else\r\n                    if (str.endsWith(\"mm\")) {\r\n                        str = str.substring(0, ((str.length()) - 2));\r\n                        scaleFactor = 3.543307;\r\n                    } else\r\n                        if (str.endsWith(\"cm\")) {\r\n                            str = str.substring(0, ((str.length()) - 2));\r\n                            scaleFactor = 35.43307;\r\n                        } else\r\n                            if (str.endsWith(\"in\")) {\r\n                                str = str.substring(0, ((str.length()) - 2));\r\n                                scaleFactor = 90;\r\n                            } else {\r\n                                scaleFactor = 1.0;\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (Double.parseDouble(str)) * scaleFactor;\r\n}'),(4998,'toNumber(java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.toNumber(java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Returns a value as a number.\r\n * http://www.w3.org/TR/SVGMobile12/types.html#DataTypeNumber\r\n */\r\nprivate double toNumber(String str) throws IOException {\r\n    return toLength(str, 100);\r\n}'),(4999,'toPath(java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.toPath(java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Returns a value as a BezierPath array.\r\n * as specified in http://www.w3.org/TR/SVGMobile12/shapes.html#PointsBNF\r\n *\r\n * Also supports elliptical arc commands a and A as specified in\r\n * http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\r\n */\r\nprivate BezierPath[] toPath(String str) throws IOException {\r\n    LinkedList<BezierPath> paths = new LinkedList<BezierPath>();\r\n    BezierPath path = null;\r\n    Point2D.Double p = new Point2D.Double();\r\n    Point2D.Double c1 = new Point2D.Double();\r\n    Point2D.Double c2 = new Point2D.Double();\r\n    StreamPosTokenizer tt = new StreamPosTokenizer(new StringReader(str));\r\n    tt.resetSyntax();\r\n    tt.parseNumbers();\r\n    tt.parseExponents();\r\n    tt.parsePlusAsNumber();\r\n    tt.whitespaceChars(0,  );\r\n    tt.whitespaceChars(,, ,);\r\n    char nextCommand = M;\r\n    char command = M;\r\n    Commands : while ((tt.nextToken()) != (StreamPosTokenizer.TT_EOF)) {\r\n        if ((tt.ttype) > 0) {\r\n            command = ((char) (tt.ttype));\r\n        } else {\r\n            command = nextCommand;\r\n            tt.pushBack();\r\n        }\r\n        BezierPath.Node node;\r\n        switch (command) {\r\n            case M :\r\n                // absolute-moveto x y\r\n                if (path != null) {\r\n                    paths.add(path);\r\n                }\r\n                path = new BezierPath();\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for M at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for M at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.moveTo(p.x, p.y);\r\n                nextCommand = L;\r\n                break;\r\n            case m :\r\n                // relative-moveto dx dy\r\n                if (path != null) {\r\n                    paths.add(path);\r\n                }\r\n                path = new BezierPath();\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for m at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for m at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.moveTo(p.x, p.y);\r\n                nextCommand = l;\r\n                break;\r\n            case Z :\r\n            case z :\r\n                // close path\r\n                p.x = path.get(0).x[0];\r\n                p.y = path.get(0).y[0];\r\n                // If the last point and the first point are the same, we\r\n                // can merge them\r\n                if ((path.size()) > 1) {\r\n                    BezierPath.Node first = path.get(0);\r\n                    BezierPath.Node last = path.get(((path.size()) - 1));\r\n                    if (((first.x[0]) == (last.x[0])) && ((first.y[0]) == (last.y[0]))) {\r\n                        if (((last.mask) & (BezierPath.C1_MASK)) != 0) {\r\n                            first.mask |= BezierPath.C1_MASK;\r\n                            first.x[1] = last.x[1];\r\n                            first.y[1] = last.y[1];\r\n                        }\r\n                        path.remove(((path.size()) - 1));\r\n                    }\r\n                }\r\n                path.setClosed(true);\r\n                break;\r\n            case L :\r\n                // absolute-lineto x y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for L at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for L at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = L;\r\n                break;\r\n            case l :\r\n                // relative-lineto dx dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for l at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for l at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = l;\r\n                break;\r\n            case H :\r\n                // absolute-horizontal-lineto x\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for H at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = H;\r\n                break;\r\n            case h :\r\n                // relative-horizontal-lineto dx\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for h at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = h;\r\n                break;\r\n            case V :\r\n                // absolute-vertical-lineto y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for V at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = V;\r\n                break;\r\n            case v :\r\n                // relative-vertical-lineto dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for v at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = v;\r\n                break;\r\n            case C :\r\n                // absolute-curveto x1 y1 x2 y2 x y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x1 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y1 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x2 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y2 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = C;\r\n                break;\r\n            case c :\r\n                // relative-curveto dx1 dy1 dx2 dy2 dx dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx1 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy1 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx2 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy2 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = c;\r\n                break;\r\n            case S :\r\n                // absolute-shorthand-curveto x2 y2 x y\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x2 coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y2 coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = S;\r\n                break;\r\n            case s :\r\n                // relative-shorthand-curveto dx2 dy2 dx dy\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx2 coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy2 coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = s;\r\n                break;\r\n            case Q :\r\n                // absolute-quadto x1 y1 x y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x1 coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y1 coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = Q;\r\n                break;\r\n            case q :\r\n                // relative-quadto dx1 dy1 dx dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx1 coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy1 coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = q;\r\n                break;\r\n            case T :\r\n                // absolute-shorthand-quadto x y\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for T at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for T at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = T;\r\n                break;\r\n            case t :\r\n                // relative-shorthand-quadto dx dy\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for t at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for t at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = s;\r\n                break;\r\n            case A :\r\n                {\r\n                    // absolute-elliptical-arc rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"rx coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    // If rX or rY have negative signs, these are dropped;\r\n                    // the absolute value is used instead.\r\n                    double rx = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"ry coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double ry = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x-axis-rotation missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double xAxisRotation = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"large-arc-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean largeArcFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"sweep-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean sweepFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.x = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"y coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.y = tt.nval;\r\n                    path.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p.x, p.y);\r\n                    nextCommand = A;\r\n                    break;\r\n                }\r\n            case a :\r\n                {\r\n                    // absolute-elliptical-arc rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"rx coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    // If rX or rY have negative signs, these are dropped;\r\n                    // the absolute value is used instead.\r\n                    double rx = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"ry coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double ry = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x-axis-rotation missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double xAxisRotation = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"large-arc-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean largeArcFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"sweep-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean sweepFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.x += tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"y coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.y += tt.nval;\r\n                    path.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p.x, p.y);\r\n                    nextCommand = a;\r\n                    break;\r\n                }\r\n            default :\r\n                if (ODGInputFormat.DEBUG)\r\n                    System.out.println((((\"SVGInputFormat.toPath aborting after illegal path command: \" + command) + \" found in path \") + str));\r\n\r\n                break Commands;\r\n                // throw new IOException(\"Illegal command: \"+command);\r\n        }\r\n    } \r\n    if (path != null) {\r\n        paths.add(path);\r\n    }\r\n    return paths.toArray(new BezierPath[paths.size()]);\r\n}'),(5000,'toTransform(java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.toTransform(java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Converts an ODG draw:transform attribute value into an AffineTransform.\r\n * <p>\r\n * The draw:transform attribute specifies a list of transformations that can be applied to a\r\n * drawing shape.\r\n * The value of this attribute is a list of transform definitions, which are applied to the drawing shape\r\n * in the order in which they are listed. The transform definitions in the list must be separated by a\r\n * white space and/or a comma. The types of transform definitions available include:\r\n * • matrix(<a> <b> <c> <d> <e> <f>), which specifies a transformation in the form of a\r\n * transformation matrix of six values. matrix(a,b,c,d,e,f) is the equivalent of applying the\r\n * transformation matrix [a b c d e f].\r\n * • translate(<tx> [<ty>]), which specifies a translation by tx and ty.\r\n * • scale(<sx> [<sy>]), which specifies a scale operation by sx and sy. If <sy> is not\r\n * provided, it is assumed to be equal to <sx>.\r\n * • rotate(<rotate-angle>), which specifies a rotation by <rotate-angle> about the\r\n * origin of the shapes coordinate system.\r\n * • skewX(<skew-angle>), which specifies a skew transformation along the X axis.\r\n * • skewY(<skew-angle>), which specifies a skew transformation along the Y axis.\r\n */\r\npublic static AffineTransform toTransform(String str) throws IOException {\r\n    AffineTransform t = new AffineTransform();\r\n    AffineTransform t2 = new AffineTransform();\r\n    if (str != null) {\r\n        StreamPosTokenizer tt = new StreamPosTokenizer(new StringReader(str));\r\n        tt.resetSyntax();\r\n        tt.wordChars(a, z);\r\n        tt.wordChars(A, Z);\r\n        tt.wordChars((128 + 32), 255);\r\n        tt.whitespaceChars(0,  );\r\n        tt.whitespaceChars(,, ,);\r\n        tt.parseNumbers();\r\n        tt.parseExponents();\r\n        while ((tt.nextToken()) != (StreamPosTokenizer.TT_EOF)) {\r\n            if ((tt.ttype) != (StreamPosTokenizer.TT_WORD)) {\r\n                throw new IOException((\"Illegal transform \" + str));\r\n            }\r\n            String type = tt.sval;\r\n            if ((tt.nextToken()) != () {\r\n                throw new IOException((\"( not found in transform \" + str));\r\n            }\r\n            if (type.equals(\"matrix\")) {\r\n                double[] m = new double[6];\r\n                for (int i = 0; i < 6; i++) {\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((((((\"Matrix value \" + i) + \" not found in transform \") + str) + \" token:\") + (tt.ttype)) + \" \") + (tt.sval)));\r\n                    }\r\n                    m[i] = tt.nval;\r\n                }\r\n                t.preConcatenate(new AffineTransform(m));\r\n            } else\r\n                if (type.equals(\"translate\")) {\r\n                    double tx;\r\n                    double ty;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((\"X-translation value not found in transform \" + str));\r\n                    }\r\n                    tx = tt.nval;\r\n                    if ((tt.nextToken()) == (StreamPosTokenizer.TT_WORD)) {\r\n                        tx *= ODGInputFormat.toUnitFactor(tt.sval);\r\n                    } else {\r\n                        tt.pushBack();\r\n                    }\r\n                    if ((tt.nextToken()) == (StreamPosTokenizer.TT_NUMBER)) {\r\n                        ty = tt.nval;\r\n                        if ((tt.nextToken()) == (StreamPosTokenizer.TT_WORD)) {\r\n                            ty *= ODGInputFormat.toUnitFactor(tt.sval);\r\n                        } else {\r\n                            tt.pushBack();\r\n                        }\r\n                    } else {\r\n                        tt.pushBack();\r\n                        ty = 0;\r\n                    }\r\n                    t2.setToIdentity();\r\n                    t2.translate(tx, ty);\r\n                    t.preConcatenate(t2);\r\n                } else\r\n                    if (type.equals(\"scale\")) {\r\n                        double sx;\r\n                        double sy;\r\n                        if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                            throw new IOException((\"X-scale value not found in transform \" + str));\r\n                        }\r\n                        sx = tt.nval;\r\n                        if ((tt.nextToken()) == (StreamPosTokenizer.TT_NUMBER)) {\r\n                            sy = tt.nval;\r\n                        } else {\r\n                            tt.pushBack();\r\n                            sy = sx;\r\n                        }\r\n                        t2.setToIdentity();\r\n                        t2.scale(sx, sy);\r\n                        t.preConcatenate(t2);\r\n                    } else\r\n                        if (type.equals(\"rotate\")) {\r\n                            double angle;\r\n                            double cx;\r\n                            double cy;\r\n                            if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                throw new IOException((\"Angle value not found in transform \" + str));\r\n                            }\r\n                            angle = tt.nval;\r\n                            t2.setToIdentity();\r\n                            t2.rotate((-angle));\r\n                            t.preConcatenate(t2);\r\n                        } else\r\n                            if (type.equals(\"skewX\")) {\r\n                                double angle;\r\n                                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                    throw new IOException((\"Skew angle not found in transform \" + str));\r\n                                }\r\n                                angle = tt.nval;\r\n                                t.preConcatenate(new AffineTransform(1, 0, Math.tan(((angle * (Math.PI)) / 180)), 1, 0, 0));\r\n                            } else\r\n                                if (type.equals(\"skewY\")) {\r\n                                    double angle;\r\n                                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                        throw new IOException((\"Skew angle not found in transform \" + str));\r\n                                    }\r\n                                    angle = tt.nval;\r\n                                    t.preConcatenate(new AffineTransform(1, Math.tan(((angle * (Math.PI)) / 180)), 0, 1, 0, 0));\r\n                                } else {\r\n                                    throw new IOException((((\"Unknown transform \" + type) + \" in \") + str));\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n            if ((tt.nextToken()) != )) {\r\n                throw new IOException((\") not found in transform \" + str));\r\n            }\r\n        } \r\n    }\r\n    return t;\r\n}'),(5001,'toUnitFactor(java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.toUnitFactor(java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','private static double toUnitFactor(String str) throws IOException {\r\n    double scaleFactor;\r\n    if (str.equals(\"px\")) {\r\n        scaleFactor = 1.0;\r\n    } else\r\n        if (str.endsWith(\"pt\")) {\r\n            scaleFactor = 1.25;\r\n        } else\r\n            if (str.endsWith(\"pc\")) {\r\n                scaleFactor = 15;\r\n            } else\r\n                if (str.endsWith(\"mm\")) {\r\n                    scaleFactor = 3.543307;\r\n                } else\r\n                    if (str.endsWith(\"cm\")) {\r\n                        scaleFactor = 35.43307;\r\n                    } else\r\n                        if (str.endsWith(\"in\")) {\r\n                            scaleFactor = 90;\r\n                        } else {\r\n                            scaleFactor = 1.0;\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    return scaleFactor;\r\n}'),(5002,'toWSOrCommaSeparatedArray(java.lang.String)','org.jhotdraw.samples.odg.io.ODGInputFormat.toWSOrCommaSeparatedArray(java.lang.String)','521','org.jhotdraw.samples.odg.io.ODGInputFormat','/**\r\n * Returns a value as a String array.\r\n * The values are separated by whitespace or by commas with optional white\r\n * space.\r\n */\r\npublic static String[] toWSOrCommaSeparatedArray(String str) throws IOException {\r\n    String[] result = str.split(\"(\\s*,\\s*|\\s+)\");\r\n    if (((result.length) == 1) && (result[0].equals(\"\"))) {\r\n        return new String[0];\r\n    } else {\r\n        return result;\r\n    }\r\n}'),(5003,'-init-()','org.jhotdraw.samples.odg.io.ODGStylesReader.-init-()','523','org.jhotdraw.samples.odg.io.ODGStylesReader','Style() {\r\n}'),(5004,'getAttributes(java.lang.String,java.lang.String)','org.jhotdraw.samples.odg.io.ODGStylesReader.getAttributes(java.lang.String,java.lang.String)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','public Map<AttributeKey, Object> getAttributes(String styleName, String familyName) {\r\n    // String key = familyName+\"-\"+styleName;\r\n    String key = styleName;\r\n    ODGStylesReader.Style style;\r\n    if (commonStyles.containsKey(key)) {\r\n        style = commonStyles.get(key);\r\n    } else\r\n        if (automaticStyles.containsKey(key)) {\r\n            style = automaticStyles.get(key);\r\n        } else\r\n            if (masterStyles.containsKey(key)) {\r\n                style = masterStyles.get(key);\r\n            } else {\r\n                style = new ODGStylesReader.Style();\r\n            }\r\n\r\n\r\n    if ((style.parentName) == null) {\r\n        return style;\r\n    } else {\r\n        HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n        Map<AttributeKey, Object> parentAttributes = getAttributes(style.parentName, familyName);\r\n        a.putAll(parentAttributes);\r\n        a.putAll(style);\r\n        return a;\r\n    }\r\n}'),(5005,'read(java.io.File)','org.jhotdraw.samples.odg.io.ODGStylesReader.read(java.io.File)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;document-styles&gt; element from the specified\r\n * XML file.\r\n *\r\n * @param file\r\n * 		A XML file with a &lt;document&gt; root element\r\n * 		or with a &lt;document-styles&gt; root element.\r\n */\r\npublic void read(File file) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(5006,'read(java.io.InputStream)','org.jhotdraw.samples.odg.io.ODGStylesReader.read(java.io.InputStream)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;document-styles&gt; element from the specified\r\n * input stream.\r\n *\r\n * @param in\r\n * 		A input stream with a &lt;document&gt; root element\r\n * 		or with a &lt;document-styles&gt; root element.\r\n */\r\npublic void read(InputStream in) throws IOException {\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    IXMLElement document;\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    read(document);\r\n}'),(5007,'read(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGStylesReader.read(org.jhotdraw.samples.odg.io.IXMLElement)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;document-styles&gt; element from the specified\r\n * XML element.\r\n *\r\n * @param root\r\n * 		A &lt;document&gt; element or a\r\n * 		&lt;document-styles&gt; element.\r\n */\r\npublic void read(IXMLElement root) throws IOException {\r\n    String name = root.getName();\r\n    String ns = root.getNamespace();\r\n    if ((name.equals(\"document-content\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n        readDocumentContentElement(root);\r\n    } else\r\n        if ((name.equals(\"document-styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n            readDocumentStylesElement(root);\r\n        } else {\r\n            if (ODGStylesReader.DEBUG)\r\n                System.out.println((\"ODGStylesReader unsupported root element \" + root));\r\n\r\n        }\r\n\r\n}'),(5008,'readAutomaticStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGStylesReader.readAutomaticStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;automatic-styles&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The automatic-styles element contains automatic styles.\r\n *\r\n * @param elem\r\n * 		A &lt;automatic-styles&gt; element.\r\n */\r\nprivate void readAutomaticStylesElement(IXMLElement elem) throws IOException {\r\n    readStylesChildren(elem, automaticStyles);\r\n}'),(5009,'readDefaultStyleElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readDefaultStyleElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;default-style&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * A default style specifies default formatting properties for a certain\r\n * style family. These defaults are used if a formatting property is neither\r\n * specified by an automatic nor a common style. Default styles exist for\r\n * all style families that are represented by the &lt;style:style&gt;\r\n * element specified in section 14.1.\r\n * Default styles are represented by the &lt;style:default-style&gt;\r\n * element. The only attribute supported by this element is style:family.\r\n * Its meaning equals the one of the same attribute for the\r\n * &lt;style:style&gt; element, and the same properties child elements are\r\n * supported depending on the style family.\r\n *\r\n * @param elem\r\n * 		A &lt;default-style&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readDefaultStyleElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    String styleName = elem.getAttribute(\"family\", ODGConstants.STYLE_NAMESPACE, null);\r\n    String family = elem.getAttribute(\"family\", ODGConstants.STYLE_NAMESPACE, null);\r\n    String parentStyleName = elem.getAttribute(\"parent-style-name\", ODGConstants.STYLE_NAMESPACE, null);\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader <default-style family=\" + styleName) + \" ...>...</>\"));\r\n\r\n    if (styleName != null) {\r\n        ODGStylesReader.Style a = styles.get(styleName);\r\n        if (a == null) {\r\n            a = new ODGStylesReader.Style();\r\n            a.name = styleName;\r\n            a.family = family;\r\n            a.parentName = parentStyleName;\r\n            styles.put(styleName, a);\r\n        }\r\n        for (IXMLElement child : elem.getChildren()) {\r\n            String ns = child.getNamespace();\r\n            String name = child.getName();\r\n            if ((name.equals(\"drawing-page-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                readDrawingPagePropertiesElement(child, a);\r\n            } else\r\n                if ((name.equals(\"graphic-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                    readGraphicPropertiesElement(child, a);\r\n                } else\r\n                    if ((name.equals(\"paragraph-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                        readParagraphPropertiesElement(child, a);\r\n                    } else\r\n                        if ((name.equals(\"text-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                            readTextPropertiesElement(child, a);\r\n                        } else {\r\n                            if (ODGStylesReader.DEBUG)\r\n                                System.out.println((((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> child \") + child));\r\n\r\n                        }\r\n\r\n\r\n\r\n        }\r\n    }\r\n}'),(5010,'readDocumentContentElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGStylesReader.readDocumentContentElement(org.jhotdraw.samples.odg.io.IXMLElement)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;document-content&gt; element from the specified\r\n * XML element.\r\n *\r\n * @param elem\r\n * 		A &lt;document-content&gt; element.\r\n */\r\nprivate void readDocumentContentElement(IXMLElement elem) throws IOException {\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader <\" + (elem.getName())) + \" ...>\"));\r\n\r\n    for (IXMLElement child : elem.getChildren()) {\r\n        String ns = child.getNamespace();\r\n        String name = child.getName();\r\n        if ((name.equals(\"automatic-styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n            readAutomaticStylesElement(child);\r\n        } else\r\n            if ((name.equals(\"master-styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n                readStylesElement(child);\r\n            } else\r\n                if ((name.equals(\"styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n                    readStylesElement(child);\r\n                }\r\n\r\n\r\n    }\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader </\" + (elem.getName())) + \">\"));\r\n\r\n}'),(5011,'readDocumentStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGStylesReader.readDocumentStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;document-styles&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The document-styles element contains all named styles of\r\n * a document, along with the automatic styles needed for the named\r\n * styles.\r\n *\r\n * @param elem\r\n * 		A &lt;document-styles&gt; element.\r\n */\r\nprivate void readDocumentStylesElement(IXMLElement elem) throws IOException {\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader <\" + (elem.getName())) + \" ...>\"));\r\n\r\n    for (IXMLElement child : elem.getChildren()) {\r\n        String ns = child.getNamespace();\r\n        String name = child.getName();\r\n        if ((name.equals(\"styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n            readStylesElement(child);\r\n        } else\r\n            if ((name.equals(\"automatic-styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n                readAutomaticStylesElement(child);\r\n            } else\r\n                if ((name.equals(\"master-styles\")) && ((ns == null) || (ns.equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n                    readMasterStylesElement(child);\r\n                } else {\r\n                    if (ODGStylesReader.DEBUG)\r\n                        System.out.println((((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> child \") + child));\r\n\r\n                }\r\n\r\n\r\n    }\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader </\" + (elem.getName())) + \">\"));\r\n\r\n}'),(5012,'readDrawingPagePropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readDrawingPagePropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;style:drawing-page-properties&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n *\r\n * @param elem\r\n * 		A &lt;style:drawing-page-properties&gt; element.\r\n */\r\nprivate void readDrawingPagePropertiesElement(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> element.\"));\r\n\r\n}'),(5013,'readGraphicPropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readGraphicPropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;style:graphic-properties&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n *\r\n * @param elem\r\n * 		A &lt;style:graphic-properties&gt; element.\r\n */\r\nprivate void readGraphicPropertiesElement(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    // The attribute draw:stroke specifies the style of the stroke on the current object. The value\r\n    // none means that no stroke is drawn, and the value solid means that a solid stroke is drawn. If\r\n    // the value is dash, the stroke referenced by the draw:stroke-dash property is drawn.\r\n    if (elem.hasAttribute(\"stroke\", ODGConstants.DRAWING_NAMESPACE)) {\r\n        ODGAttributeKeys.STROKE_STYLE.set(a, ((ODGConstants.StrokeStyle) (elem.getAttribute(\"stroke\", ODGConstants.DRAWING_NAMESPACE, ODGConstants.STROKE_STYLES, null))));\r\n    }\r\n    // The attribute svg:stroke-width specifies the width of the stroke on\r\n    // the current object.\r\n    if (elem.hasAttribute(\"stroke-width\", ODGConstants.SVG_NAMESPACE)) {\r\n        AttributeKeys.STROKE_WIDTH.set(a, toLength(elem.getAttribute(\"stroke-width\", ODGConstants.SVG_NAMESPACE, null)));\r\n    }\r\n    // The attribute svg:stroke-color specifies the color of the stroke on\r\n    // the current object.\r\n    if (elem.hasAttribute(\"stroke-color\", ODGConstants.SVG_NAMESPACE)) {\r\n        AttributeKeys.STROKE_COLOR.set(a, toColor(elem.getAttribute(\"stroke-color\", ODGConstants.SVG_NAMESPACE, null)));\r\n    }\r\n    // FIXME read draw:marker-start-width, draw:marker-start-center, draw:marker-end-width,\r\n    // draw:marker-end-centre\r\n    // The attribute draw:fill specifies the fill style for a graphic\r\n    // object. Graphic objects that are not closed, such as a path without a\r\n    // closepath at the end, will not be filled. The fill operation does not\r\n    // automatically close all open subpaths by connecting the last point of\r\n    // the subpath with the first point of the subpath before painting the\r\n    // fill. The attribute has the following values:\r\n    // • none:     the drawing object is not filled.\r\n    // • solid:    the drawing object is filled with color specified by the\r\n    // draw:fill-color attribute.\r\n    // • bitmap:   the drawing object is filled with the bitmap specified\r\n    // by the draw:fill-image-name attribute.\r\n    // • gradient: the drawing object is filled with the gradient specified\r\n    // by the draw:fill-gradient-name attribute.\r\n    // • hatch:    the drawing object is filled with the hatch specified by\r\n    // the draw:fill-hatch-name attribute.\r\n    if (elem.hasAttribute(\"fill\", ODGConstants.DRAWING_NAMESPACE)) {\r\n        ODGAttributeKeys.FILL_STYLE.set(a, ((ODGConstants.FillStyle) (elem.getAttribute(\"fill\", ODGConstants.DRAWING_NAMESPACE, ODGConstants.FILL_STYLES, null))));\r\n    }\r\n    // The attribute draw:fill-color specifies the color of the fill for a\r\n    // graphic object. It is used only if the draw:fill attribute has the\r\n    // value solid.\r\n    if (elem.hasAttribute(\"fill-color\", ODGConstants.DRAWING_NAMESPACE)) {\r\n        AttributeKeys.FILL_COLOR.set(a, toColor(elem.getAttribute(\"fill-color\", ODGConstants.DRAWING_NAMESPACE, null)));\r\n    }\r\n    // FIXME read fo:padding-top, fo:padding-bottom, fo:padding-left,\r\n    // fo:padding-right\r\n    // FIXME read draw:shadow, draw:shadow-offset-x, draw:shadow-offset-y,\r\n    // draw:shadow-color\r\n    for (IXMLElement child : elem.getChildren()) {\r\n        String ns = child.getNamespace();\r\n        String name = child.getName();\r\n        // if (DEBUG) System.out.println(\"ODGStylesReader unsupported <\"+elem.getName()+\"> child <\"+child.getName()+\" ...>...</>\");\r\n    }\r\n}'),(5014,'readLayerSetElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readLayerSetElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;draw:layer-set&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n *\r\n * @param elem\r\n * 		A &lt;layer-set&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readLayerSetElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> element.\"));\r\n\r\n}'),(5015,'readListStyleElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readListStyleElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;text:list-style&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n *\r\n * @param elem\r\n * 		A &lt;list-style&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readListStyleElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> element.\"));\r\n\r\n}'),(5016,'readMarkerElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readMarkerElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;draw:marker&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The element &lt;draw:marker&gt; represents a marker, which is used\r\n * to draw polygons at the start and end points of strokes. Markers\r\n * are not available as automatic styles.\r\n *\r\n * @param elem\r\n * 		A &lt;master-styles&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readMarkerElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    // if (DEBUG) System.out.println(\"ODGStylesReader unsupported <\"+elem.getName()+\"> element.\");\r\n}'),(5017,'readMasterPageElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readMasterPageElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;style:master-page&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n *\r\n * @param elem\r\n * 		A &lt;page-layout&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readMasterPageElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> element.\"));\r\n\r\n}'),(5018,'readMasterStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGStylesReader.readMasterStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;master-styles&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The master-styles element contains master styles.\r\n *\r\n * @param elem\r\n * 		A &lt;master-styles&gt; element.\r\n */\r\nprivate void readMasterStylesElement(IXMLElement elem) throws IOException {\r\n    readStylesChildren(elem, masterStyles);\r\n}'),(5019,'readPageLayoutElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readPageLayoutElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;style:page-layout&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The &lt;style:page-layout&gt; element specifies the physical properties\r\n * of a page. This element contains a &lt;style:page-layout-properties&gt;\r\n * element which specifies the formatting properties of the page and two\r\n * optional elements that specify the properties of headers and footers.\r\n *\r\n * @param elem\r\n * 		A &lt;page-layout&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readPageLayoutElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    // if (DEBUG) System.out.println(\"ODGStylesReader unsupported <\"+elem.getName()+\"> element.\");\r\n}'),(5020,'readParagraphPropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readParagraphPropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;style:paragraph-properties&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The properties described in this section can be contained within\r\n * paragraph styles (see section 14.8.2), but also within other styles, like\r\n * cell styles (see section 14.12.4) They are contained in a\r\n * &lt;style:paragraph-properties&gt; element.\r\n *\r\n * @param elem\r\n * 		A &lt;paragraph-properties&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readParagraphPropertiesElement(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    // if (DEBUG) System.out.println(\"ODGStylesReader unsupported <\"+elem.getName()+\"> element.\");\r\n}'),(5021,'readStyleElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readStyleElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;styles&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The &lt;style:style&gt; element can represent paragraph, text, and\r\n * graphic styles.\r\n *\r\n * @param elem\r\n * 		A &lt;style&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readStyleElement(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    // The style:name attribute identifies the name of the style. This attribute, combined with the\r\n    // style:family attribute, uniquely identifies a style. The <office:styles>,\r\n    // <office:automatic-styles> and <office:master-styles> elements each must not\r\n    // contain two styles with the same family and the same name.\r\n    // For automatic styles, a name is generated during document export. If the document is exported\r\n    // several times, it cannot be assumed that the same name is generated each time.\r\n    // In an XML document, the name of each style is a unique name that may be independent of the\r\n    // language selected for an office applications user interface. Usually these names are the ones used\r\n    // for the English version of the user interface.\r\n    String styleName = elem.getAttribute(\"name\", ODGConstants.STYLE_NAMESPACE, null);\r\n    String family = elem.getAttribute(\"family\", ODGConstants.STYLE_NAMESPACE, null);\r\n    String parentStyleName = elem.getAttribute(\"parent-style-name\", ODGConstants.STYLE_NAMESPACE, null);\r\n    if (ODGStylesReader.DEBUG)\r\n        System.out.println(((\"ODGStylesReader <style name=\" + styleName) + \" ...>...</>\"));\r\n\r\n    if (styleName != null) {\r\n        ODGStylesReader.Style a = styles.get(styleName);\r\n        if (a == null) {\r\n            a = new ODGStylesReader.Style();\r\n            a.name = styleName;\r\n            a.family = family;\r\n            a.parentName = parentStyleName;\r\n            styles.put(styleName, a);\r\n        }\r\n        for (IXMLElement child : elem.getChildren()) {\r\n            String ns = child.getNamespace();\r\n            String name = child.getName();\r\n            if ((name.equals(\"drawing-page-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                readDrawingPagePropertiesElement(child, a);\r\n            } else\r\n                if ((name.equals(\"graphic-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                    readGraphicPropertiesElement(child, a);\r\n                } else\r\n                    if ((name.equals(\"paragraph-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                        readParagraphPropertiesElement(child, a);\r\n                    } else\r\n                        if ((name.equals(\"text-properties\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                            readTextPropertiesElement(child, a);\r\n                        } else {\r\n                            if (ODGStylesReader.DEBUG)\r\n                                System.out.println((((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> child \") + child));\r\n\r\n                        }\r\n\r\n\r\n\r\n        }\r\n    }\r\n}'),(5022,'readStylesChildren(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readStylesChildren(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads the children of a styles element.\r\n *\r\n * @param elem\r\n * 		A &lt;styles&gt;, &lt;automatic-styles&gt;,\r\n * 		&lt;document-styles&gt; or a &lt;master-styles&gt; element.\r\n * @param styles\r\n * 		Styles to be filled in by this method.\r\n */\r\nprivate void readStylesChildren(IXMLElement elem, HashMap<String, ODGStylesReader.Style> styles) throws IOException {\r\n    for (IXMLElement child : elem.getChildren()) {\r\n        String ns = child.getNamespace();\r\n        String name = child.getName();\r\n        if ((name.equals(\"default-style\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n            readDefaultStyleElement(child, styles);\r\n        } else\r\n            if ((name.equals(\"layer-set\")) && ((ns == null) || (ns.equals(ODGConstants.DRAWING_NAMESPACE)))) {\r\n                readLayerSetElement(child, styles);\r\n            } else\r\n                if ((name.equals(\"list-style\")) && ((ns == null) || (ns.equals(ODGConstants.TEXT_NAMESPACE)))) {\r\n                    readListStyleElement(child, styles);\r\n                } else\r\n                    if ((name.equals(\"marker\")) && ((ns == null) || (ns.equals(ODGConstants.DRAWING_NAMESPACE)))) {\r\n                        readMarkerElement(child, styles);\r\n                    } else\r\n                        if ((name.equals(\"master-page\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                            readMasterPageElement(child, styles);\r\n                        } else\r\n                            if ((name.equals(\"page-layout\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                                readPageLayoutElement(child, styles);\r\n                                // } else if (name.equals(\"paragraph-properties\") && (ns == null || ns.equals(STYLE_NAMESPACE))) {\r\n                                // readParagraphPropertiesElement(child, styles);\r\n                            } else\r\n                                if ((name.equals(\"style\")) && ((ns == null) || (ns.equals(ODGConstants.STYLE_NAMESPACE)))) {\r\n                                    readStyleElement(child, styles);\r\n                                    // } else if (name.equals(\"text-properties\") && (ns == null || ns.equals(STYLE_NAMESPACE))) {\r\n                                    // readTextPropertiesElement(child, styles);\r\n                                } else {\r\n                                    if (ODGStylesReader.DEBUG)\r\n                                        System.out.println((((\"ODGStylesReader unsupported <\" + (elem.getName())) + \"> child: \") + child));\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}'),(5023,'readStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','org.jhotdraw.samples.odg.io.ODGStylesReader.readStylesElement(org.jhotdraw.samples.odg.io.IXMLElement)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;styles&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The styles element contains common styles.\r\n *\r\n * @param elem\r\n * 		A &lt;styles&gt; element.\r\n */\r\nprivate void readStylesElement(IXMLElement elem) throws IOException {\r\n    readStylesChildren(elem, commonStyles);\r\n}'),(5024,'readTextPropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.odg.io.ODGStylesReader.readTextPropertiesElement(org.jhotdraw.samples.odg.io.IXMLElement,java.util.HashMap)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a &lt;style:text-properties&gt; element from the specified\r\n * XML element.\r\n * <p>\r\n * The properties described in this section can be contained within text\r\n * styles (see section 14.8.1), but also within other styles, like paragraph\r\n * styles (see section 14.8.2) or cell styles (see section 14.12.4) They are\r\n * contained in a &lt;style:text-properties&gt; element.\r\n *\r\n * @param elem\r\n * 		A &lt;paragraph-properties&gt; element.\r\n * @param a\r\n * 		Style attributes to be filled in by this method.\r\n */\r\nprivate void readTextPropertiesElement(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    // if (DEBUG) System.out.println(\"ODGStylesReader unsupported <\"+elem.getName()+\"> element.\");\r\n}'),(5025,'reset()','org.jhotdraw.samples.odg.io.ODGStylesReader.reset()','523','org.jhotdraw.samples.odg.io.ODGStylesReader','private void reset() {\r\n    commonStyles = new HashMap<String, ODGStylesReader.Style>();\r\n    automaticStyles = new HashMap<String, ODGStylesReader.Style>();\r\n    masterStyles = new HashMap<String, ODGStylesReader.Style>();\r\n}'),(5026,'toColor(java.lang.String)','org.jhotdraw.samples.odg.io.ODGStylesReader.toColor(java.lang.String)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Reads a color style attribute.\r\n * &lt;define name=\"color\"&gt;\r\n * &lt;data type=\"string\"&gt;\r\n * &lt;param name=\"pattern\"&gt;#[0-9a-fA-F]{6}&lt;/param&gt;\r\n * &lt;/data&gt;\r\n * &lt;/define&gt;\r\n */\r\nprivate Color toColor(String value) throws IOException {\r\n    String str = value;\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    if ((str.startsWith(\"#\")) && ((str.length()) == 7)) {\r\n        return new Color(Integer.decode(str));\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(5027,'toLength(java.lang.String)','org.jhotdraw.samples.odg.io.ODGStylesReader.toLength(java.lang.String)','523','org.jhotdraw.samples.odg.io.ODGStylesReader','/**\r\n * Returns a value as a length.\r\n *\r\n * &lt;define name=\"length\"&gt;\r\n * &lt;data type=\"string\"&gt;\r\n * &lt;param name=\"pattern\"&gt;-?([0-9]+(.[0-9]*)?|.[0-9]+)((cm)|(mm)|(in)|\r\n * (pt)|(pc)|(px))&lt;/param&gt;\r\n */\r\nprivate double toLength(String str) throws IOException {\r\n    double scaleFactor = 1.0;\r\n    if ((str == null) || ((str.length()) == 0)) {\r\n        return 0.0;\r\n    }\r\n    if (str.endsWith(\"cm\")) {\r\n        str = str.substring(0, ((str.length()) - 2));\r\n        scaleFactor = 35.43307;\r\n    } else\r\n        if (str.endsWith(\"mm\")) {\r\n            str = str.substring(0, ((str.length()) - 2));\r\n            scaleFactor = 3.543307;\r\n        } else\r\n            if (str.endsWith(\"in\")) {\r\n                str = str.substring(0, ((str.length()) - 2));\r\n                scaleFactor = 90;\r\n            } else\r\n                if (str.endsWith(\"pt\")) {\r\n                    str = str.substring(0, ((str.length()) - 2));\r\n                    scaleFactor = 1.25;\r\n                } else\r\n                    if (str.endsWith(\"pc\")) {\r\n                        str = str.substring(0, ((str.length()) - 2));\r\n                        scaleFactor = 15;\r\n                    } else\r\n                        if (str.endsWith(\"px\")) {\r\n                            str = str.substring(0, ((str.length()) - 2));\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    return (Double.parseDouble(str)) * scaleFactor;\r\n}'),(5028,'-init-()','org.jhotdraw.samples.odg.io.ODGStylesReader$Style.-init-()','522','org.jhotdraw.samples.odg.io.ODGStylesReader$Style','Style() {\r\n}'),(5029,'-init-()','org.jhotdraw.samples.pert.Main.-init-()','524','org.jhotdraw.samples.pert.Main','Main() {\r\n}'),(5030,'main(java.lang.String[])','org.jhotdraw.samples.pert.Main.main(java.lang.String[])','524','org.jhotdraw.samples.pert.Main','/**\r\n * Creates a new instance.\r\n */\r\npublic static void main(String[] args) {\r\n    Application app;\r\n    String os = System.getProperty(\"os.name\").toLowerCase();\r\n    if (os.startsWith(\"mac\")) {\r\n        app = new DefaultOSXApplication();\r\n    } else\r\n        if (os.startsWith(\"win\")) {\r\n            // app = new DefaultMDIApplication();\r\n            app = new DefaultSDIApplication();\r\n        } else {\r\n            app = new DefaultSDIApplication();\r\n        }\r\n\r\n    DefaultApplicationModel model = new PertApplicationModel();\r\n    model.setName(\"JHotDraw Pert\");\r\n    model.setVersion(Main.class.getPackage().getImplementationVersion());\r\n    model.setCopyright((\"Copyright 2006-2009 (c) by the authors of JHotDraw\n\" + \"This software is licensed under LGPL or Creative Commons 3.0 BY\"));\r\n    model.setViewClassName(\"org.jhotdraw.samples.pert.PertView\");\r\n    app.setModel(model);\r\n    app.launch(args);\r\n}'),(5031,'-init-()','org.jhotdraw.samples.pert.PertApplet.-init-()','525','org.jhotdraw.samples.pert.PertApplet','PertApplet() {\r\n}'),(5032,'getAppletInfo()','org.jhotdraw.samples.pert.PertApplet.getAppletInfo()','525','org.jhotdraw.samples.pert.PertApplet','public String getAppletInfo() {\r\n    return (((((PertApplet.NAME) + \"\nVersion \") + (getVersion())) + \"\n\nCopyright 1996-2009 (c) by the original authors of JHotDraw and all its contributors\") + \"\nThis software is licensed under LGPL or\") + \"\nCreative Commons 3.0 BY\";\r\n}'),(5033,'getData()','org.jhotdraw.samples.pert.PertApplet.getData()','525','org.jhotdraw.samples.pert.PertApplet','public String getData() {\r\n    CharArrayWriter out = new CharArrayWriter();\r\n    try {\r\n        NanoXMLDOMOutput domo = new NanoXMLDOMOutput(new PertFactory());\r\n        domo.writeObject(getDrawing());\r\n        domo.save(out);\r\n    } catch (IOException e) {\r\n        TextFigure tf = new TextFigure();\r\n        tf.setText(e.getMessage());\r\n        tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n        getDrawing().add(tf);\r\n        e.printStackTrace();\r\n    } finally {\r\n        if (out != null)\r\n            out.close();\r\n\r\n    }\r\n    return out.toString();\r\n}'),(5034,'getDrawing()','org.jhotdraw.samples.pert.PertApplet.getDrawing()','525','org.jhotdraw.samples.pert.PertApplet','private Drawing getDrawing() {\r\n    return drawingPanel.getDrawing();\r\n}'),(5035,'getParameter(java.lang.String)','org.jhotdraw.samples.pert.PertApplet.getParameter(java.lang.String)','525','org.jhotdraw.samples.pert.PertApplet','/**\r\n * We override getParameter() to make it work even if we have no Applet\r\n * context.\r\n */\r\npublic String getParameter(String name) {\r\n    try {\r\n        return super.getParameter(name);\r\n    } catch (NullPointerException e) {\r\n        return null;\r\n    }\r\n}'),(5036,'getParameterInfo()','org.jhotdraw.samples.pert.PertApplet.getParameterInfo()','525','org.jhotdraw.samples.pert.PertApplet','public String[][] getParameterInfo() {\r\n    return new String[][]{ new String[]{ \"data\", \"String\", \"the data to be displayed by this applet.\" }, new String[]{ \"datafile\", \"URL\", \"an URL to a file containing the data to be displayed by this applet.\" } };\r\n}'),(5037,'getVersion()','org.jhotdraw.samples.pert.PertApplet.getVersion()','525','org.jhotdraw.samples.pert.PertApplet','protected String getVersion() {\r\n    return PertApplet.class.getPackage().getImplementationVersion();\r\n}'),(5038,'init()','org.jhotdraw.samples.pert.PertApplet.init()','525','org.jhotdraw.samples.pert.PertApplet','/**\r\n * Initializes the applet PertApplet\r\n */\r\npublic void init() {\r\n    // Set look and feel\r\n    // -----------------\r\n    try {\r\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n    } catch (Throwable e) {\r\n        // Do nothing.\r\n        // If we cant set the desired look and feel, UIManager does\r\n        // automaticaly the right thing for us.\r\n    }\r\n    // Display copyright info while we are loading the data\r\n    // ----------------------------------------------------\r\n    Container c = getContentPane();\r\n    c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));\r\n    String[] labels = getAppletInfo().split(\"\n\");// Strings.split(getAppletInfo(), \n);\r\n\r\n    for (int i = 0; i < (labels.length); i++) {\r\n        c.add(new JLabel(((labels[i].length()) == 0 ? \" \" : labels[i])));\r\n    }\r\n    // We load the data using a worker thread\r\n    // --------------------------------------\r\n    new Worker() {\r\n        public Object construct() {\r\n            Object result;\r\n            try {\r\n                System.out.println((\"getParameter.datafile:\" + (getParameter(\"datafile\"))));\r\n                if ((getParameter(\"data\")) != null) {\r\n                    NanoXMLDOMInput domi = new NanoXMLDOMInput(new PertFactory(), new StringReader(getParameter(\"data\")));\r\n                    result = domi.readObject(0);\r\n                } else\r\n                    if ((getParameter(\"datafile\")) != null) {\r\n                        InputStream in = null;\r\n                        try {\r\n                            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n                            in = url.openConnection().getInputStream();\r\n                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new PertFactory(), in);\r\n                            result = domi.readObject(0);\r\n                        } finally {\r\n                            if (in != null)\r\n                                in.close();\r\n\r\n                        }\r\n                    } else {\r\n                        result = null;\r\n                    }\r\n\r\n            } catch (Throwable t) {\r\n                result = t;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public void finished(Object result) {\r\n            if (result instanceof Throwable) {\r\n                ((Throwable) (result)).printStackTrace();\r\n            }\r\n            Container c = getContentPane();\r\n            c.setLayout(new BorderLayout());\r\n            c.removeAll();\r\n            c.add((drawingPanel = new PertPanel()));\r\n            initComponents();\r\n            if (result != null) {\r\n                if (result instanceof Drawing) {\r\n                    setDrawing(((Drawing) (result)));\r\n                } else\r\n                    if (result instanceof Throwable) {\r\n                        getDrawing().add(new TextFigure(result.toString()));\r\n                        ((Throwable) (result)).printStackTrace();\r\n                    }\r\n\r\n            }\r\n            initDrawing(getDrawing());\r\n            c.validate();\r\n        }\r\n    }.start();\r\n}'),(5039,'initComponents()','org.jhotdraw.samples.pert.PertApplet.initComponents()','525','org.jhotdraw.samples.pert.PertApplet','/**\r\n * This method is called from within the init() method to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    toolButtonGroup = new ButtonGroup();\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5040,'initDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.pert.PertApplet.initDrawing(org.jhotdraw.draw.Drawing)','525','org.jhotdraw.samples.pert.PertApplet','/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\nprivate void initDrawing(Drawing d) {\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new PertFactory());\r\n    inputFormats.add(ioFormat);\r\n    outputFormats.add(ioFormat);\r\n    outputFormats.add(new ImageOutputFormat());\r\n    d.setInputFormats(inputFormats);\r\n    d.setOutputFormats(outputFormats);\r\n}'),(5041,'main(java.lang.String[])','org.jhotdraw.samples.pert.PertApplet.main(java.lang.String[])','525','org.jhotdraw.samples.pert.PertApplet','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"JHotDraw Pert Applet\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            PertApplet a = new PertApplet();\r\n            f.getContentPane().add(a);\r\n            a.init();\r\n            f.setSize(500, 400);\r\n            f.setVisible(true);\r\n            a.start();\r\n        }\r\n    });\r\n}'),(5042,'setData(java.lang.String)','org.jhotdraw.samples.pert.PertApplet.setData(java.lang.String)','525','org.jhotdraw.samples.pert.PertApplet','public void setData(String text) {\r\n    if ((text != null) && ((text.length()) > 0)) {\r\n        StringReader in = new StringReader(text);\r\n        try {\r\n            NanoXMLDOMInput domi = new NanoXMLDOMInput(new PertFactory(), in);\r\n            setDrawing(((Drawing) (domi.readObject(0))));\r\n        } catch (Throwable e) {\r\n            getDrawing().removeAllChildren();\r\n            TextFigure tf = new TextFigure();\r\n            tf.setText(e.getMessage());\r\n            tf.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));\r\n            getDrawing().add(tf);\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (in != null)\r\n                in.close();\r\n\r\n        }\r\n    }\r\n}'),(5043,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.pert.PertApplet.setDrawing(org.jhotdraw.draw.Drawing)','525','org.jhotdraw.samples.pert.PertApplet','private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(5044,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.pert.PertApplicationModel.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','527','org.jhotdraw.samples.pert.PertApplicationModel','public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(5045,'-init-()','org.jhotdraw.samples.pert.PertApplicationModel.-init-()','527','org.jhotdraw.samples.pert.PertApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic PertApplicationModel() {\r\n}'),(5046,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.pert.PertApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','527','org.jhotdraw.samples.pert.PertApplicationModel','private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TaskFigure(), attributes), \"edit.createTask\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new DependencyFigure(), attributes), \"edit.createDependency\", labels);\r\n    tb.addSeparator();\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", drawLabels);\r\n}'),(5047,'createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.pert.PertApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','527','org.jhotdraw.samples.pert.PertApplicationModel','public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    PertView p = ((PertView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(5048,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.pert.PertApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','527','org.jhotdraw.samples.pert.PertApplicationModel','/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    PertView p = ((PertView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(5049,'getSharedEditor()','org.jhotdraw.samples.pert.PertApplicationModel.getSharedEditor()','527','org.jhotdraw.samples.pert.PertApplicationModel','public DefaultDrawingEditor getSharedEditor() {\r\n    if ((sharedEditor) == null) {\r\n        sharedEditor = new DefaultDrawingEditor();\r\n    }\r\n    return sharedEditor;\r\n}'),(5050,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.samples.pert.PertApplicationModel.initApplication(org.jhotdraw.app.Application)','527','org.jhotdraw.samples.pert.PertApplicationModel','public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"toggleGrid\", (aa = new ToggleViewPropertyAction(a, PertView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n}'),(5051,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.pert.PertApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','527','org.jhotdraw.samples.pert.PertApplicationModel','public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((PertView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(5052,'-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)','526','org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener','public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(5053,'itemStateChanged(java.awt.event.ItemEvent)','org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener.itemStateChanged(java.awt.event.ItemEvent)','526','org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener','public void itemStateChanged(ItemEvent evt) {\r\n    if ((evt.getStateChange()) == (ItemEvent.SELECTED)) {\r\n        editor.setTool(tool);\r\n    }\r\n}'),(5054,'-init-()','org.jhotdraw.samples.pert.PertFactory.-init-()','528','org.jhotdraw.samples.pert.PertFactory','/**\r\n * Creates a new instance.\r\n */\r\npublic PertFactory() {\r\n    for (Object[] o : PertFactory.classTagArray) {\r\n        addStorableClass(((String) (o[1])), ((Class) (o[0])));\r\n    }\r\n}'),(5055,'-init-()','org.jhotdraw.samples.pert.PertPanel.-init-()','529','org.jhotdraw.samples.pert.PertPanel','/**\r\n * Creates new instance.\r\n */\r\npublic PertPanel() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    initComponents();\r\n    undoManager = new UndoRedoManager();\r\n    editor = new DefaultDrawingEditor();\r\n    editor.add(view);\r\n    addCreationButtonsTo(creationToolbar, editor);\r\n    ButtonFactory.addAttributesButtonsTo(attributesToolbar, editor);\r\n    JPopupButton pb = new JPopupButton();\r\n    pb.setItemFont(UIManager.getFont(\"MenuItem.font\"));\r\n    labels.configureToolBarButton(pb, \"actions\");\r\n    pb.add(new DuplicateAction());\r\n    pb.addSeparator();\r\n    pb.add(new GroupAction(editor));\r\n    pb.add(new UngroupAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new BringToFrontAction(editor));\r\n    pb.add(new SendToBackAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(new CutAction());\r\n    pb.add(new CopyAction());\r\n    pb.add(new PasteAction());\r\n    pb.add(new SelectAllAction());\r\n    pb.add(new SelectSameAction(editor));\r\n    pb.addSeparator();\r\n    pb.add(undoManager.getUndoAction());\r\n    pb.add(undoManager.getRedoAction());\r\n    // FIXME - We need a toggle grid action\r\n    // pb.addSeparator();\r\n    // pb.add(new ToggleGridAction(editor));\r\n    JMenu m = new JMenu(labels.getString(\"view.zoomFactor.text\"));\r\n    JRadioButtonMenuItem rbmi;\r\n    ButtonGroup group = new ButtonGroup();\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null))));\r\n    rbmi.setSelected(true);\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null))));\r\n    group.add(rbmi);\r\n    m.add((rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null))));\r\n    group.add(rbmi);\r\n    pb.add(m);\r\n    pb.setFocusable(false);\r\n    creationToolbar.addSeparator();\r\n    creationToolbar.add(pb);\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    view.setDrawing(drawing);\r\n    drawing.addUndoableEditListener(undoManager);\r\n}'),(5056,'addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.pert.PertPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)','529','org.jhotdraw.samples.pert.PertPanel','private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TaskFigure(), attributes), \"edit.createTask\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new DependencyFigure(), attributes), \"edit.createDependency\", labels);\r\n    tb.addSeparator();\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", drawLabels);\r\n}'),(5057,'getDrawing()','org.jhotdraw.samples.pert.PertPanel.getDrawing()','529','org.jhotdraw.samples.pert.PertPanel','public Drawing getDrawing() {\r\n    return view.getDrawing();\r\n}'),(5058,'getEditor()','org.jhotdraw.samples.pert.PertPanel.getEditor()','529','org.jhotdraw.samples.pert.PertPanel','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(5059,'getView()','org.jhotdraw.samples.pert.PertPanel.getView()','529','org.jhotdraw.samples.pert.PertPanel','public DrawingView getView() {\r\n    return view;\r\n}'),(5060,'initComponents()','org.jhotdraw.samples.pert.PertPanel.initComponents()','529','org.jhotdraw.samples.pert.PertPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    toolButtonGroup = new ButtonGroup();\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    jPanel1 = new JPanel();\r\n    creationToolbar = new JToolBar();\r\n    attributesToolbar = new JToolBar();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    jPanel1.setLayout(new GridBagLayout());\r\n    creationToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 0;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(creationToolbar, gridBagConstraints);\r\n    attributesToolbar.setFloatable(false);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.gridy = 1;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    jPanel1.add(attributesToolbar, gridBagConstraints);\r\n    add(jPanel1, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5061,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.pert.PertPanel.setDrawing(org.jhotdraw.draw.Drawing)','529','org.jhotdraw.samples.pert.PertPanel','public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(5062,'-init-()','org.jhotdraw.samples.pert.PertView.-init-()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Creates a new view.\r\n */\r\npublic PertView() {\r\n}'),(5063,'canSaveTo(java.io.File)','org.jhotdraw.samples.pert.PertView.canSaveTo(java.io.File)','530','org.jhotdraw.samples.pert.PertView','@Override\r\npublic boolean canSaveTo(File file) {\r\n    return file.getName().endsWith(\".xml\");\r\n}'),(5064,'clear()','org.jhotdraw.samples.pert.PertView.clear()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Clears the view.\r\n */\r\npublic void clear() {\r\n    final Drawing newDrawing = createDrawing();\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(newDrawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InvocationTargetException ex) {\r\n        ex.printStackTrace();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(5065,'createDrawing()','org.jhotdraw.samples.pert.PertView.createDrawing()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Creates a new Drawing for this view.\r\n */\r\nprotected Drawing createDrawing() {\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new PertFactory());\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    inputFormats.add(ioFormat);\r\n    drawing.setInputFormats(inputFormats);\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    outputFormats.add(ioFormat);\r\n    outputFormats.add(new ImageOutputFormat());\r\n    drawing.setOutputFormats(outputFormats);\r\n    return drawing;\r\n}'),(5066,'createOpenChooser()','org.jhotdraw.samples.pert.PertView.createOpenChooser()','530','org.jhotdraw.samples.pert.PertView','@Override\r\nprotected JFileChooser createOpenChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    c.addChoosableFileFilter(new ExtensionFileFilter(\"Pert Diagram\", \"xml\"));\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(5067,'createPageable()','org.jhotdraw.samples.pert.PertView.createPageable()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Creates a Pageable object for printing this view.\r\n */\r\npublic Pageable createPageable() {\r\n    return new DrawingPageable(view.getDrawing());\r\n}'),(5068,'createSaveChooser()','org.jhotdraw.samples.pert.PertView.createSaveChooser()','530','org.jhotdraw.samples.pert.PertView','@Override\r\nprotected JFileChooser createSaveChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    c.addChoosableFileFilter(new ExtensionFileFilter(\"Pert Diagram\", \"xml\"));\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(5069,'getEditor()','org.jhotdraw.samples.pert.PertView.getEditor()','530','org.jhotdraw.samples.pert.PertView','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(5070,'getScaleFactor()','org.jhotdraw.samples.pert.PertView.getScaleFactor()','530','org.jhotdraw.samples.pert.PertView','public double getScaleFactor() {\r\n    return view.getScaleFactor();\r\n}'),(5071,'init()','org.jhotdraw.samples.pert.PertView.init()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Initializes the view.\r\n */\r\npublic void init() {\r\n    super.init();\r\n    initComponents();\r\n    JPanel zoomButtonPanel = new JPanel(new BorderLayout());\r\n    scrollPane.setLayout(new PlacardScrollPaneLayout());\r\n    scrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));\r\n    setEditor(new DefaultDrawingEditor());\r\n    undo = new UndoRedoManager();\r\n    view.setDrawing(createDrawing());\r\n    view.getDrawing().addUndoableEditListener(undo);\r\n    initActions();\r\n    undo.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            setHasUnsavedChanges(undo.hasSignificantEdits());\r\n        }\r\n    });\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPanel placardPanel = new JPanel(new BorderLayout());\r\n    AbstractButton pButton;\r\n    pButton = ButtonFactory.createZoomButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    placardPanel.add(pButton, BorderLayout.WEST);\r\n    pButton = ButtonFactory.createToggleGridButton(view);\r\n    pButton.putClientProperty(\"Quaqua.Button.style\", \"placard\");\r\n    pButton.putClientProperty(\"Quaqua.Component.visualMargin\", new Insets(0, 0, 0, 0));\r\n    pButton.setFont(UIManager.getFont(\"SmallSystemFont\"));\r\n    labels.configureToolBarButton(pButton, \"view.toggleGrid.placard\");\r\n    placardPanel.add(pButton, BorderLayout.EAST);\r\n    scrollPane.add(placardPanel, JScrollPane.LOWER_LEFT_CORNER);\r\n    setGridVisible(preferences.getBoolean(\"view.gridVisible\", false));\r\n    setScaleFactor(preferences.getDouble(\"view.scaleFactor\", 1.0));\r\n}'),(5072,'initActions()','org.jhotdraw.samples.pert.PertView.initActions()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Initializes view specific actions.\r\n */\r\nprivate void initActions() {\r\n    putAction(UndoAction.ID, undo.getUndoAction());\r\n    putAction(RedoAction.ID, undo.getRedoAction());\r\n}'),(5073,'initComponents()','org.jhotdraw.samples.pert.PertView.initComponents()','530','org.jhotdraw.samples.pert.PertView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5074,'isGridVisible()','org.jhotdraw.samples.pert.PertView.isGridVisible()','530','org.jhotdraw.samples.pert.PertView','public boolean isGridVisible() {\r\n    return view.isConstrainerVisible();\r\n}'),(5075,'read(java.io.File)','org.jhotdraw.samples.pert.PertView.read(java.io.File)','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Reads the view from the specified file.\r\n */\r\npublic void read(File f) throws IOException {\r\n    try {\r\n        final Drawing drawing = createDrawing();\r\n        InputFormat inputFormat = drawing.getInputFormats().get(0);\r\n        inputFormat.read(f, drawing, true);\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                view.getDrawing().removeUndoableEditListener(undo);\r\n                view.setDrawing(drawing);\r\n                view.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(5076,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.pert.PertView.setEditor(org.jhotdraw.draw.DrawingEditor)','530','org.jhotdraw.samples.pert.PertView','public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}'),(5077,'setGridVisible(boolean)','org.jhotdraw.samples.pert.PertView.setGridVisible(boolean)','530','org.jhotdraw.samples.pert.PertView','public void setGridVisible(boolean newValue) {\r\n    boolean oldValue = isGridVisible();\r\n    view.setConstrainerVisible(newValue);\r\n    firePropertyChange(PertView.GRID_VISIBLE_PROPERTY, oldValue, newValue);\r\n    preferences.putBoolean(\"view.gridVisible\", newValue);\r\n}'),(5078,'setHasUnsavedChanges(boolean)','org.jhotdraw.samples.pert.PertView.setHasUnsavedChanges(boolean)','530','org.jhotdraw.samples.pert.PertView','protected void setHasUnsavedChanges(boolean newValue) {\r\n    super.setHasUnsavedChanges(newValue);\r\n    undo.setHasSignificantEdits(newValue);\r\n}'),(5079,'setScaleFactor(double)','org.jhotdraw.samples.pert.PertView.setScaleFactor(double)','530','org.jhotdraw.samples.pert.PertView','public void setScaleFactor(double newValue) {\r\n    double oldValue = getScaleFactor();\r\n    view.setScaleFactor(newValue);\r\n    firePropertyChange(\"scaleFactor\", oldValue, newValue);\r\n    preferences.putDouble(\"view.scaleFactor\", newValue);\r\n}'),(5080,'write(java.io.File)','org.jhotdraw.samples.pert.PertView.write(java.io.File)','530','org.jhotdraw.samples.pert.PertView','/**\r\n * Writes the view to the specified file.\r\n */\r\npublic void write(File f) throws IOException {\r\n    Drawing drawing = view.getDrawing();\r\n    OutputFormat outputFormat = drawing.getOutputFormats().get(0);\r\n    outputFormat.write(f, drawing);\r\n}'),(5081,'-init-()','org.jhotdraw.samples.pert.figures.DependencyFigure.-init-()','531','org.jhotdraw.samples.pert.figures.DependencyFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic DependencyFigure() {\r\n    AttributeKeys.STROKE_COLOR.basicSet(this, new Color(153));\r\n    AttributeKeys.STROKE_WIDTH.basicSet(this, 1.0);\r\n    AttributeKeys.END_DECORATION.basicSet(this, new ArrowTip());\r\n    setAttributeEnabled(AttributeKeys.END_DECORATION, false);\r\n    setAttributeEnabled(AttributeKeys.START_DECORATION, false);\r\n    setAttributeEnabled(AttributeKeys.STROKE_DASHES, false);\r\n    setAttributeEnabled(AttributeKeys.FONT_ITALIC, false);\r\n    setAttributeEnabled(AttributeKeys.FONT_UNDERLINE, false);\r\n}'),(5082,'canConnect(org.jhotdraw.draw.Connector)','org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector)','531','org.jhotdraw.samples.pert.figures.DependencyFigure','@Override\r\npublic boolean canConnect(Connector start) {\r\n    return (start.getOwner()) instanceof TaskFigure;\r\n}'),(5083,'canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','531','org.jhotdraw.samples.pert.figures.DependencyFigure','/**\r\n * Checks if two figures can be connected. Implement this method\r\n * to constrain the allowed connections between figures.\r\n */\r\n@Override\r\npublic boolean canConnect(Connector start, Connector end) {\r\n    if (((start.getOwner()) instanceof TaskFigure) && ((end.getOwner()) instanceof TaskFigure)) {\r\n        TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n        TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n        // Disallow multiple connections to same dependent\r\n        if (ef.getPredecessors().contains(sf)) {\r\n            return false;\r\n        }\r\n        // Disallow cyclic connections\r\n        return !(sf.isDependentOf(ef));\r\n    }\r\n    return false;\r\n}'),(5084,'clone()','org.jhotdraw.samples.pert.figures.DependencyFigure.clone()','531','org.jhotdraw.samples.pert.figures.DependencyFigure','public DependencyFigure clone() {\r\n    DependencyFigure that = ((DependencyFigure) (super.clone()));\r\n    return that;\r\n}'),(5085,'getLayer()','org.jhotdraw.samples.pert.figures.DependencyFigure.getLayer()','531','org.jhotdraw.samples.pert.figures.DependencyFigure','public int getLayer() {\r\n    return 1;\r\n}'),(5086,'handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.samples.pert.figures.DependencyFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','531','org.jhotdraw.samples.pert.figures.DependencyFigure','/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleConnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.addDependency(this);\r\n    ef.addDependency(this);\r\n}'),(5087,'handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','org.jhotdraw.samples.pert.figures.DependencyFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)','531','org.jhotdraw.samples.pert.figures.DependencyFigure','/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.removeDependency(this);\r\n    ef.removeDependency(this);\r\n}'),(5088,'removeNotify(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.pert.figures.DependencyFigure.removeNotify(org.jhotdraw.draw.Drawing)','531','org.jhotdraw.samples.pert.figures.DependencyFigure','@Override\r\npublic void removeNotify(Drawing d) {\r\n    if ((getStartFigure()) != null) {\r\n        ((TaskFigure) (getStartFigure())).removeDependency(this);\r\n    }\r\n    if ((getEndFigure()) != null) {\r\n        ((TaskFigure) (getEndFigure())).removeDependency(this);\r\n    }\r\n    super.removeNotify(d);\r\n}'),(5089,'-init-()','org.jhotdraw.samples.pert.figures.SeparatorLineFigure.-init-()','532','org.jhotdraw.samples.pert.figures.SeparatorLineFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SeparatorLineFigure() {\r\n}'),(5090,'getPreferredSize()','org.jhotdraw.samples.pert.figures.SeparatorLineFigure.getPreferredSize()','532','org.jhotdraw.samples.pert.figures.SeparatorLineFigure','public Dimension2DDouble getPreferredSize() {\r\n    double width = Math.ceil(AttributeKeys.STROKE_WIDTH.get(this));\r\n    return new Dimension2DDouble(width, width);\r\n}'),(5091,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.pert.figures.SeparatorLineFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','532','org.jhotdraw.samples.pert.figures.SeparatorLineFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    setPoint(0, 0, anchor);\r\n    setPoint(((getNodeCount()) - 1), 0, new Point2D.Double(lead.x, anchor.y));\r\n}'),(5092,'-init-(org.jhotdraw.samples.pert.figures.TaskFigure)','org.jhotdraw.samples.pert.figures.TaskFigure.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)','535','org.jhotdraw.samples.pert.figures.TaskFigure','public NameAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}'),(5093,'-init-()','org.jhotdraw.samples.pert.figures.TaskFigure.-init-()','535','org.jhotdraw.samples.pert.figures.TaskFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic TaskFigure() {\r\n    super(new RectangleFigure());\r\n    setLayouter(new VerticalLayouter());\r\n    RectangleFigure nameCompartmentPF = new RectangleFigure();\r\n    AttributeKeys.STROKE_COLOR.basicSet(nameCompartmentPF, null);\r\n    nameCompartmentPF.setAttributeEnabled(AttributeKeys.STROKE_COLOR, false);\r\n    AttributeKeys.FILL_COLOR.basicSet(nameCompartmentPF, null);\r\n    nameCompartmentPF.setAttributeEnabled(AttributeKeys.FILL_COLOR, false);\r\n    ListFigure nameCompartment = new ListFigure(nameCompartmentPF);\r\n    ListFigure attributeCompartment = new ListFigure();\r\n    SeparatorLineFigure separator1 = new SeparatorLineFigure();\r\n    applyAttributes(getPresentationFigure());\r\n    add(nameCompartment);\r\n    add(separator1);\r\n    add(attributeCompartment);\r\n    Insets2D.Double insets = new Insets2D.Double(4, 8, 4, 8);\r\n    CompositeFigure.LAYOUT_INSETS.basicSet(nameCompartment, insets);\r\n    CompositeFigure.LAYOUT_INSETS.basicSet(attributeCompartment, insets);\r\n    TextFigure nameFigure;\r\n    nameCompartment.add((nameFigure = new TextFigure()));\r\n    AttributeKeys.FONT_BOLD.basicSet(nameFigure, true);\r\n    nameFigure.setAttributeEnabled(AttributeKeys.FONT_BOLD, false);\r\n    TextFigure durationFigure;\r\n    attributeCompartment.add((durationFigure = new TextFigure()));\r\n    AttributeKeys.FONT_BOLD.basicSet(durationFigure, true);\r\n    durationFigure.setText(\"0\");\r\n    durationFigure.setAttributeEnabled(AttributeKeys.FONT_BOLD, false);\r\n    TextFigure startTimeFigure;\r\n    attributeCompartment.add((startTimeFigure = new TextFigure()));\r\n    startTimeFigure.setEditable(false);\r\n    startTimeFigure.setText(\"0\");\r\n    startTimeFigure.setAttributeEnabled(AttributeKeys.FONT_BOLD, false);\r\n    applyAttributes(this);\r\n    setAttributeEnabled(AttributeKeys.STROKE_DASHES, false);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    setName(labels.getString(\"pert.task.defaultName\"));\r\n    setDuration(0);\r\n    dependencies = new HashSet<DependencyFigure>();\r\n    nameFigure.addFigureListener(new TaskFigure.NameAdapter(this));\r\n    durationFigure.addFigureListener(new TaskFigure.DurationAdapter(this));\r\n}'),(5094,'addDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)','org.jhotdraw.samples.pert.figures.TaskFigure.addDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)','535','org.jhotdraw.samples.pert.figures.TaskFigure','public void addDependency(DependencyFigure f) {\r\n    dependencies.add(f);\r\n    updateStartTime();\r\n}'),(5095,'applyAttributes(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.pert.figures.TaskFigure.applyAttributes(org.jhotdraw.draw.Figure)','535','org.jhotdraw.samples.pert.figures.TaskFigure','@SuppressWarnings(\"unchecked\")\r\nprivate void applyAttributes(Figure f) {\r\n    Map<AttributeKey, Object> attr = ((AbstractAttributedFigure) (getPresentationFigure())).getAttributes();\r\n    for (Map.Entry<AttributeKey, Object> entry : attr.entrySet()) {\r\n        entry.getKey().basicSet(f, entry.getValue());\r\n    }\r\n}'),(5096,'clone()','org.jhotdraw.samples.pert.figures.TaskFigure.clone()','535','org.jhotdraw.samples.pert.figures.TaskFigure','@Override\r\npublic TaskFigure clone() {\r\n    TaskFigure that = ((TaskFigure) (super.clone()));\r\n    that.dependencies = new HashSet<DependencyFigure>();\r\n    that.getNameFigure().addFigureListener(new TaskFigure.NameAdapter(that));\r\n    that.getDurationFigure().addFigureListener(new TaskFigure.DurationAdapter(that));\r\n    that.updateStartTime();\r\n    return that;\r\n}'),(5097,'createHandles(int)','org.jhotdraw.samples.pert.figures.TaskFigure.createHandles(int)','535','org.jhotdraw.samples.pert.figures.TaskFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    List<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            handles.add(new BoundsOutlineHandle(getPresentationFigure(), false, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new MoveHandle(this, RelativeLocator.northWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.northEast()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southEast()));\r\n            handles.add(new ConnectorHandle(new LocatorConnector(this, RelativeLocator.east()), new DependencyFigure()));\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5098,'getDependencies()','org.jhotdraw.samples.pert.figures.TaskFigure.getDependencies()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public Set<DependencyFigure> getDependencies() {\r\n    return Collections.unmodifiableSet(dependencies);\r\n}'),(5099,'getDuration()','org.jhotdraw.samples.pert.figures.TaskFigure.getDuration()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public int getDuration() {\r\n    try {\r\n        return Integer.valueOf(getDurationFigure().getText());\r\n    } catch (NumberFormatException e) {\r\n        return 0;\r\n    }\r\n}'),(5100,'getDurationFigure()','org.jhotdraw.samples.pert.figures.TaskFigure.getDurationFigure()','535','org.jhotdraw.samples.pert.figures.TaskFigure','private TextFigure getDurationFigure() {\r\n    return ((TextFigure) (((ListFigure) (getChild(2))).getChild(0)));\r\n}'),(5101,'getLayer()','org.jhotdraw.samples.pert.figures.TaskFigure.getLayer()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public int getLayer() {\r\n    return 0;\r\n}'),(5102,'getName()','org.jhotdraw.samples.pert.figures.TaskFigure.getName()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public String getName() {\r\n    return getNameFigure().getText();\r\n}'),(5103,'getNameFigure()','org.jhotdraw.samples.pert.figures.TaskFigure.getNameFigure()','535','org.jhotdraw.samples.pert.figures.TaskFigure','private TextFigure getNameFigure() {\r\n    return ((TextFigure) (((ListFigure) (getChild(0))).getChild(0)));\r\n}'),(5104,'getPredecessors()','org.jhotdraw.samples.pert.figures.TaskFigure.getPredecessors()','535','org.jhotdraw.samples.pert.figures.TaskFigure','/**\r\n * Returns predecessor PertTasks which are directly connected via a\r\n * PertDependency to this TaskFigure.\r\n */\r\npublic List<TaskFigure> getPredecessors() {\r\n    LinkedList<TaskFigure> list = new LinkedList<TaskFigure>();\r\n    for (DependencyFigure c : getDependencies()) {\r\n        if ((c.getEndFigure()) == (this)) {\r\n            list.add(((TaskFigure) (c.getStartFigure())));\r\n        }\r\n    }\r\n    return list;\r\n}'),(5105,'getStartTime()','org.jhotdraw.samples.pert.figures.TaskFigure.getStartTime()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public int getStartTime() {\r\n    try {\r\n        return Integer.valueOf(getStartTimeFigure().getText());\r\n    } catch (NumberFormatException e) {\r\n        return 0;\r\n    }\r\n}'),(5106,'getStartTimeFigure()','org.jhotdraw.samples.pert.figures.TaskFigure.getStartTimeFigure()','535','org.jhotdraw.samples.pert.figures.TaskFigure','private TextFigure getStartTimeFigure() {\r\n    return ((TextFigure) (((ListFigure) (getChild(2))).getChild(1)));\r\n}'),(5107,'getSuccessors()','org.jhotdraw.samples.pert.figures.TaskFigure.getSuccessors()','535','org.jhotdraw.samples.pert.figures.TaskFigure','/**\r\n * Returns dependent PertTasks which are directly connected via a\r\n * PertDependency to this TaskFigure.\r\n */\r\npublic List<TaskFigure> getSuccessors() {\r\n    LinkedList<TaskFigure> list = new LinkedList<TaskFigure>();\r\n    for (DependencyFigure c : getDependencies()) {\r\n        if ((c.getStartFigure()) == (this)) {\r\n            list.add(((TaskFigure) (c.getEndFigure())));\r\n        }\r\n    }\r\n    return list;\r\n}'),(5108,'isDependentOf(org.jhotdraw.samples.pert.figures.TaskFigure)','org.jhotdraw.samples.pert.figures.TaskFigure.isDependentOf(org.jhotdraw.samples.pert.figures.TaskFigure)','535','org.jhotdraw.samples.pert.figures.TaskFigure','/**\r\n * Returns true, if the current task is a direct or\r\n * indirect dependent of the specified task.\r\n * If the dependency is cyclic, then this method returns true\r\n * if <code>this</code> is passed as a parameter and for every other\r\n * task in the cycle.\r\n */\r\npublic boolean isDependentOf(TaskFigure t) {\r\n    if ((this) == t) {\r\n        return true;\r\n    }\r\n    for (TaskFigure pre : getPredecessors()) {\r\n        if (pre.isDependentOf(t)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(5109,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.pert.figures.TaskFigure.read(org.jhotdraw.xml.DOMInput)','535','org.jhotdraw.samples.pert.figures.TaskFigure','@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    double x = in.getAttribute(\"x\", 0.0);\r\n    double y = in.getAttribute(\"y\", 0.0);\r\n    double w = in.getAttribute(\"w\", 0.0);\r\n    double h = in.getAttribute(\"h\", 0.0);\r\n    setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    readAttributes(in);\r\n    in.openElement(\"model\");\r\n    in.openElement(\"name\");\r\n    setName(((String) (in.readObject())));\r\n    in.closeElement();\r\n    in.openElement(\"duration\");\r\n    setDuration(((Integer) (in.readObject())));\r\n    in.closeElement();\r\n    in.closeElement();\r\n}'),(5110,'removeDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)','org.jhotdraw.samples.pert.figures.TaskFigure.removeDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)','535','org.jhotdraw.samples.pert.figures.TaskFigure','public void removeDependency(DependencyFigure f) {\r\n    dependencies.remove(f);\r\n    updateStartTime();\r\n}'),(5111,'setDuration(int)','org.jhotdraw.samples.pert.figures.TaskFigure.setDuration(int)','535','org.jhotdraw.samples.pert.figures.TaskFigure','public void setDuration(int newValue) {\r\n    int oldValue = getDuration();\r\n    getDurationFigure().setText(Integer.toString(newValue));\r\n    if (oldValue != newValue) {\r\n        for (TaskFigure succ : getSuccessors()) {\r\n            succ.updateStartTime();\r\n        }\r\n    }\r\n}'),(5112,'setName(java.lang.String)','org.jhotdraw.samples.pert.figures.TaskFigure.setName(java.lang.String)','535','org.jhotdraw.samples.pert.figures.TaskFigure','public void setName(String newValue) {\r\n    getNameFigure().setText(newValue);\r\n}'),(5113,'toString()','org.jhotdraw.samples.pert.figures.TaskFigure.toString()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public String toString() {\r\n    return ((((((\"TaskFigure#\" + (hashCode())) + \" \") + (getName())) + \" \") + (getDuration())) + \" \") + (getStartTime());\r\n}'),(5114,'updateStartTime()','org.jhotdraw.samples.pert.figures.TaskFigure.updateStartTime()','535','org.jhotdraw.samples.pert.figures.TaskFigure','public void updateStartTime() {\r\n    willChange();\r\n    int oldValue = getStartTime();\r\n    int newValue = 0;\r\n    for (TaskFigure pre : getPredecessors()) {\r\n        newValue = Math.max(newValue, ((pre.getStartTime()) + (pre.getDuration())));\r\n    }\r\n    getStartTimeFigure().setText(Integer.toString(newValue));\r\n    if (newValue != oldValue) {\r\n        for (TaskFigure succ : getSuccessors()) {\r\n            // The if-statement here guards against\r\n            // cyclic task dependencies.\r\n            if (!(this.isDependentOf(succ))) {\r\n                succ.updateStartTime();\r\n            }\r\n        }\r\n    }\r\n    changed();\r\n}'),(5115,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.pert.figures.TaskFigure.write(org.jhotdraw.xml.DOMOutput)','535','org.jhotdraw.samples.pert.figures.TaskFigure','public void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double r = getBounds();\r\n    out.addAttribute(\"x\", r.x);\r\n    out.addAttribute(\"y\", r.y);\r\n    writeAttributes(out);\r\n    out.openElement(\"model\");\r\n    out.openElement(\"name\");\r\n    out.writeObject(getName());\r\n    out.closeElement();\r\n    out.openElement(\"duration\");\r\n    out.writeObject(getDuration());\r\n    out.closeElement();\r\n    out.closeElement();\r\n}'),(5116,'-init-(org.jhotdraw.samples.pert.figures.TaskFigure)','org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)','533','org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter','public DurationAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}'),(5117,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)','533','org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter','@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    // We could fire a property change event here, in case\r\n    // some other object would like to observe us.\r\n    // target.firePropertyChange(\"duration\", e.getOldValue(), e.getNewValue());\r\n    for (TaskFigure succ : target.getSuccessors()) {\r\n        succ.updateStartTime();\r\n    }\r\n}'),(5118,'-init-(org.jhotdraw.samples.pert.figures.TaskFigure)','org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)','534','org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter','public NameAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}'),(5119,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)','534','org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter','@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    // We could fire a property change event here, in case\r\n    // some other object would like to observe us.\r\n    // target.firePropertyChange(\"name\", e.getOldValue(), e.getNewValue());\r\n}'),(5120,'clone()','org.jhotdraw.samples.svg.Gradient.clone()','536','org.jhotdraw.samples.svg.Gradient','public Object clone();'),(5121,'getPaint(org.jhotdraw.draw.Figure,double)','org.jhotdraw.samples.svg.Gradient.getPaint(org.jhotdraw.draw.Figure,double)','536','org.jhotdraw.samples.svg.Gradient','public Paint getPaint(Figure f, double opacity);'),(5122,'isRelativeToFigureBounds()','org.jhotdraw.samples.svg.Gradient.isRelativeToFigureBounds()','536','org.jhotdraw.samples.svg.Gradient','public boolean isRelativeToFigureBounds();'),(5123,'makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.Gradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','536','org.jhotdraw.samples.svg.Gradient','public void makeRelativeToFigureBounds(Figure f);'),(5124,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.Gradient.transform(java.awt.geom.AffineTransform)','536','org.jhotdraw.samples.svg.Gradient','public void transform(AffineTransform tx);'),(5125,'-init-()','org.jhotdraw.samples.svg.LinearGradient.-init-()','537','org.jhotdraw.samples.svg.LinearGradient','/**\r\n * Creates a new instance.\r\n */\r\npublic LinearGradient() {\r\n}'),(5126,'-init-(double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.LinearGradient.-init-(double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','537','org.jhotdraw.samples.svg.LinearGradient','public LinearGradient(double x1, double y1, double x2, double y2, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform tx) {\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n    this.x2 = x2;\r\n    this.y2 = y2;\r\n    this.stopOffsets = stopOffsets;\r\n    this.stopColors = stopColors;\r\n    this.stopOpacities = stopOpacities;\r\n    this.isRelativeToFigureBounds = isRelativeToFigureBounds;\r\n    this.transform = tx;\r\n}'),(5127,'clone()','org.jhotdraw.samples.svg.LinearGradient.clone()','537','org.jhotdraw.samples.svg.LinearGradient','public Object clone() {\r\n    try {\r\n        LinearGradient that = ((LinearGradient) (super.clone()));\r\n        that.stopOffsets = this.stopOffsets.clone();\r\n        that.stopColors = this.stopColors.clone();\r\n        that.stopOpacities = this.stopOpacities.clone();\r\n        that.transform = ((AffineTransform) (this.transform.clone()));\r\n        return that;\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(5128,'equals(java.lang.Object)','org.jhotdraw.samples.svg.LinearGradient.equals(java.lang.Object)','537','org.jhotdraw.samples.svg.LinearGradient','public boolean equals(Object o) {\r\n    if (o instanceof LinearGradient) {\r\n        return equals(((LinearGradient) (o)));\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(5129,'equals(org.jhotdraw.samples.svg.LinearGradient)','org.jhotdraw.samples.svg.LinearGradient.equals(org.jhotdraw.samples.svg.LinearGradient)','537','org.jhotdraw.samples.svg.LinearGradient','public boolean equals(LinearGradient that) {\r\n    return (((((((((x1) == (that.x1)) && ((y1) == (that.y1))) && ((x2) == (that.x2))) && ((y2) == (that.y2))) && ((isRelativeToFigureBounds) == (that.isRelativeToFigureBounds))) && (Arrays.equals(stopOffsets, that.stopOffsets))) && (Arrays.equals(stopOpacities, that.stopOpacities))) && (Arrays.equals(stopColors, that.stopColors))) && (transform.equals(that.transform));\r\n}'),(5130,'getPaint(org.jhotdraw.draw.Figure,double)','org.jhotdraw.samples.svg.LinearGradient.getPaint(org.jhotdraw.draw.Figure,double)','537','org.jhotdraw.samples.svg.LinearGradient','public Paint getPaint(Figure f, double opacity) {\r\n    // No stops, like fill = none\r\n    if ((stopColors.length) == 0) {\r\n        return new Color(0, true);\r\n    }\r\n    // Compute colors and fractions for the paint\r\n    Color[] colors = new Color[stopColors.length];\r\n    float[] fractions = new float[stopColors.length];\r\n    float previousFraction = 0;\r\n    for (int i = 0; i < (stopColors.length); i++) {\r\n        // Each fraction must be larger or equal the previous fraction.\r\n        fractions[i] = Math.min(1.0F, Math.max(previousFraction, ((float) (stopOffsets[i]))));\r\n        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);\r\n        previousFraction = fractions[i];\r\n    }\r\n    // Compute the dimensions and transforms for the paint\r\n    Point2D.Double p1;\r\n    Point2D.Double p2;\r\n    p1 = new Point2D.Double(x1, y1);\r\n    p2 = new Point2D.Double(x2, y2);\r\n    AffineTransform t = transform;\r\n    if (isRelativeToFigureBounds) {\r\n        t = ((AffineTransform) (t.clone()));\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        t.translate(bounds.x, bounds.y);\r\n        t.scale(bounds.width, bounds.height);\r\n    }\r\n    // Construct a solid color, if only one stop color is given, or if\r\n    // transform is not invertible\r\n    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {\r\n        return colors[0];\r\n    }\r\n    // Construct a gradient\r\n    LinearGradientPaint gp;\r\n    gp = new <org.apache.batik.ext.awt.LinearGradientPaint, org.apache.batik.ext.awt.LinearGradientPaint>LinearGradientPaint(p1, p2, fractions, colors, t);\r\n    return gp;\r\n}'),(5131,'getStopColors()','org.jhotdraw.samples.svg.LinearGradient.getStopColors()','537','org.jhotdraw.samples.svg.LinearGradient','public Color[] getStopColors() {\r\n    return stopColors.clone();\r\n}'),(5132,'getStopOffsets()','org.jhotdraw.samples.svg.LinearGradient.getStopOffsets()','537','org.jhotdraw.samples.svg.LinearGradient','public double[] getStopOffsets() {\r\n    return stopOffsets.clone();\r\n}'),(5133,'getStopOpacities()','org.jhotdraw.samples.svg.LinearGradient.getStopOpacities()','537','org.jhotdraw.samples.svg.LinearGradient','public double[] getStopOpacities() {\r\n    return stopOpacities.clone();\r\n}'),(5134,'getTransform()','org.jhotdraw.samples.svg.LinearGradient.getTransform()','537','org.jhotdraw.samples.svg.LinearGradient','public AffineTransform getTransform() {\r\n    return transform;\r\n}'),(5135,'getX1()','org.jhotdraw.samples.svg.LinearGradient.getX1()','537','org.jhotdraw.samples.svg.LinearGradient','public double getX1() {\r\n    return x1;\r\n}'),(5136,'getX2()','org.jhotdraw.samples.svg.LinearGradient.getX2()','537','org.jhotdraw.samples.svg.LinearGradient','public double getX2() {\r\n    return x2;\r\n}'),(5137,'getY1()','org.jhotdraw.samples.svg.LinearGradient.getY1()','537','org.jhotdraw.samples.svg.LinearGradient','public double getY1() {\r\n    return y1;\r\n}'),(5138,'getY2()','org.jhotdraw.samples.svg.LinearGradient.getY2()','537','org.jhotdraw.samples.svg.LinearGradient','public double getY2() {\r\n    return y2;\r\n}'),(5139,'hashCode()','org.jhotdraw.samples.svg.LinearGradient.hashCode()','537','org.jhotdraw.samples.svg.LinearGradient','public int hashCode() {\r\n    long bits = Double.doubleToLongBits(x1);\r\n    bits += (Double.doubleToLongBits(y1)) * 31;\r\n    bits += (Double.doubleToLongBits(x2)) * 35;\r\n    bits += (Double.doubleToLongBits(y2)) * 39;\r\n    bits += (stopColors[0].hashCode()) * 43;\r\n    bits += (stopColors[((stopColors.length) - 1)].hashCode()) * 47;\r\n    return ((int) (bits)) ^ ((int) (bits >> 32));\r\n}'),(5140,'isRelativeToFigureBounds()','org.jhotdraw.samples.svg.LinearGradient.isRelativeToFigureBounds()','537','org.jhotdraw.samples.svg.LinearGradient','public boolean isRelativeToFigureBounds() {\r\n    return isRelativeToFigureBounds;\r\n}'),(5141,'makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.LinearGradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','537','org.jhotdraw.samples.svg.LinearGradient','public void makeRelativeToFigureBounds(Figure f) {\r\n    if (!(isRelativeToFigureBounds)) {\r\n        isRelativeToFigureBounds = true;\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        x1 = ((x1) - (bounds.x)) / (bounds.width);\r\n        y1 = ((y1) - (bounds.y)) / (bounds.height);\r\n        x2 = ((x2) - (bounds.x)) / (bounds.width);\r\n        y2 = ((y2) - (bounds.y)) / (bounds.height);\r\n    }\r\n}'),(5142,'setGradientVector(double,double,double,double)','org.jhotdraw.samples.svg.LinearGradient.setGradientVector(double,double,double,double)','537','org.jhotdraw.samples.svg.LinearGradient','public void setGradientVector(double x1, double y1, double x2, double y2) {\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n    this.x2 = x2;\r\n    this.y2 = y2;\r\n}'),(5143,'setRelativeToFigureBounds(boolean)','org.jhotdraw.samples.svg.LinearGradient.setRelativeToFigureBounds(boolean)','537','org.jhotdraw.samples.svg.LinearGradient','public void setRelativeToFigureBounds(boolean b) {\r\n    isRelativeToFigureBounds = b;\r\n}'),(5144,'setStops(double[],java.awt.Color[],double[])','org.jhotdraw.samples.svg.LinearGradient.setStops(double[],java.awt.Color[],double[])','537','org.jhotdraw.samples.svg.LinearGradient','public void setStops(double[] offsets, Color[] colors, double[] stopOpacities) {\r\n    this.stopOffsets = offsets;\r\n    this.stopColors = colors;\r\n    this.stopOpacities = stopOpacities;\r\n}'),(5145,'setTransform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.LinearGradient.setTransform(java.awt.geom.AffineTransform)','537','org.jhotdraw.samples.svg.LinearGradient','public void setTransform(AffineTransform tx) {\r\n    transform = tx;\r\n}'),(5146,'toString()','org.jhotdraw.samples.svg.LinearGradient.toString()','537','org.jhotdraw.samples.svg.LinearGradient','@Override\r\npublic String toString() {\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(\"LinearGradient@\");\r\n    buf.append(hashCode());\r\n    buf.append(();\r\n    for (int i = 0; i < (stopOffsets.length); i++) {\r\n        if (i != 0)\r\n            buf.append(,);\r\n\r\n        buf.append(stopOffsets[i]);\r\n        buf.append(=);\r\n        buf.append(stopOpacities[i]);\r\n        buf.append( );\r\n        buf.append(Integer.toHexString(stopColors[i].getRGB()));\r\n    }\r\n    buf.append());\r\n    return buf.toString();\r\n}'),(5147,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.LinearGradient.transform(java.awt.geom.AffineTransform)','537','org.jhotdraw.samples.svg.LinearGradient','public void transform(AffineTransform tx) {\r\n    if ((transform) == null) {\r\n        transform = ((AffineTransform) (tx.clone()));\r\n    } else {\r\n        transform.preConcatenate(tx);\r\n    }\r\n}'),(5148,'-init-()','org.jhotdraw.samples.svg.Main.-init-()','538','org.jhotdraw.samples.svg.Main','Main() {\r\n}'),(5149,'main(java.lang.String[])','org.jhotdraw.samples.svg.Main.main(java.lang.String[])','538','org.jhotdraw.samples.svg.Main','/**\r\n * Creates a new instance.\r\n */\r\npublic static void main(String[] args) {\r\n    // Debug resource bundle\r\n    ResourceBundleUtil.setVerbose(true);\r\n    Application app;\r\n    String os = System.getProperty(\"os.name\").toLowerCase();\r\n    if (os.startsWith(\"mac\")) {\r\n        app = new DefaultOSXApplication();\r\n    } else\r\n        if (os.startsWith(\"win\")) {\r\n            // app = new DefaultMDIApplication();\r\n            app = new DefaultSDIApplication();\r\n        } else {\r\n            app = new DefaultSDIApplication();\r\n        }\r\n\r\n    SVGApplicationModel model = new SVGApplicationModel();\r\n    model.setName(\"JHotDraw SVG\");\r\n    model.setVersion(Main.class.getPackage().getImplementationVersion());\r\n    model.setCopyright((\"Copyright 2006-2009 (c) by the authors of JHotDraw\n\" + \"This software is licensed under LGPL or Creative Commons 3.0 BY\"));\r\n    model.setViewClassName(\"org.jhotdraw.samples.svg.SVGView\");\r\n    app.setModel(model);\r\n    app.launch(args);\r\n}'),(5150,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)','org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)','539','org.jhotdraw.samples.svg.PathTool','/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}'),(5151,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)','org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)','539','org.jhotdraw.samples.svg.PathTool','/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}'),(5152,'createPath()','org.jhotdraw.samples.svg.PathTool.createPath()','539','org.jhotdraw.samples.svg.PathTool','@SuppressWarnings(\"unchecked\")\r\nprotected SVGPathFigure createPath() {\r\n    SVGPathFigure f = ((SVGPathFigure) (pathPrototype.clone()));\r\n    getEditor().applyDefaultAttributesTo(f);\r\n    if ((attributes) != null) {\r\n        for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n            entry.getKey().basicSet(f, entry.getValue());\r\n        }\r\n    }\r\n    return f;\r\n}'),(5153,'finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.svg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)','539','org.jhotdraw.samples.svg.PathTool','@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG) {\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n    }\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n    creationView.addToSelection(createdPath);\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(5154,'-init-()','org.jhotdraw.samples.svg.RadialGradient.-init-()','540','org.jhotdraw.samples.svg.RadialGradient','/**\r\n * Creates a new instance.\r\n */\r\npublic RadialGradient() {\r\n}'),(5155,'-init-(double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.RadialGradient.-init-(double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','540','org.jhotdraw.samples.svg.RadialGradient','public RadialGradient(double cx, double cy, double fx, double fy, double r, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform tx) {\r\n    this.cx = cx;\r\n    this.cy = cy;\r\n    this.fx = fx;\r\n    this.fy = fy;\r\n    this.r = r;\r\n    this.stopOffsets = stopOffsets;\r\n    this.stopColors = stopColors;\r\n    this.stopOpacities = stopOpacities;\r\n    this.isRelativeToFigureBounds = isRelativeToFigureBounds;\r\n    this.transform = tx;\r\n}'),(5156,'clone()','org.jhotdraw.samples.svg.RadialGradient.clone()','540','org.jhotdraw.samples.svg.RadialGradient','public Object clone() {\r\n    try {\r\n        RadialGradient that = ((RadialGradient) (super.clone()));\r\n        that.stopOffsets = this.stopOffsets.clone();\r\n        that.stopColors = this.stopColors.clone();\r\n        that.stopOpacities = this.stopOpacities.clone();\r\n        that.transform = ((AffineTransform) (this.transform.clone()));\r\n        return that;\r\n    } catch (CloneNotSupportedException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(5157,'equals(java.lang.Object)','org.jhotdraw.samples.svg.RadialGradient.equals(java.lang.Object)','540','org.jhotdraw.samples.svg.RadialGradient','public boolean equals(Object o) {\r\n    if (o instanceof RadialGradient) {\r\n        return equals(((RadialGradient) (o)));\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(5158,'equals(org.jhotdraw.samples.svg.RadialGradient)','org.jhotdraw.samples.svg.RadialGradient.equals(org.jhotdraw.samples.svg.RadialGradient)','540','org.jhotdraw.samples.svg.RadialGradient','public boolean equals(RadialGradient that) {\r\n    return ((((((((((cx) == (that.cx)) && ((cy) == (that.cy))) && ((fx) == (that.fx))) && ((fy) == (that.fy))) && ((r) == (that.r))) && ((isRelativeToFigureBounds) == (that.isRelativeToFigureBounds))) && (Arrays.equals(stopOffsets, that.stopOffsets))) && (Arrays.equals(stopOpacities, that.stopOpacities))) && (Arrays.equals(stopColors, that.stopColors))) && (transform.equals(that.transform));\r\n}'),(5159,'getCX()','org.jhotdraw.samples.svg.RadialGradient.getCX()','540','org.jhotdraw.samples.svg.RadialGradient','public double getCX() {\r\n    return cx;\r\n}'),(5160,'getCY()','org.jhotdraw.samples.svg.RadialGradient.getCY()','540','org.jhotdraw.samples.svg.RadialGradient','public double getCY() {\r\n    return cy;\r\n}'),(5161,'getFX()','org.jhotdraw.samples.svg.RadialGradient.getFX()','540','org.jhotdraw.samples.svg.RadialGradient','public double getFX() {\r\n    return fx;\r\n}'),(5162,'getFY()','org.jhotdraw.samples.svg.RadialGradient.getFY()','540','org.jhotdraw.samples.svg.RadialGradient','public double getFY() {\r\n    return fy;\r\n}'),(5163,'getPaint(org.jhotdraw.draw.Figure,double)','org.jhotdraw.samples.svg.RadialGradient.getPaint(org.jhotdraw.draw.Figure,double)','540','org.jhotdraw.samples.svg.RadialGradient','public Paint getPaint(Figure f, double opacity) {\r\n    if (((stopColors.length) == 0) || ((r) <= 0)) {\r\n        return new Color(-1600086016, true);\r\n    }\r\n    // Compute colors and fractions for the paint\r\n    Color[] colors = new Color[stopColors.length];\r\n    float[] fractions = new float[stopColors.length];\r\n    for (int i = 0; i < (stopColors.length); i++) {\r\n        fractions[i] = ((float) (stopOffsets[i]));\r\n        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);\r\n    }\r\n    // Compute the dimensions and transforms for the paint\r\n    Point2D.Double cp;\r\n    Point2D.Double fp;\r\n    double rr;\r\n    cp = new Point2D.Double(cx, cy);\r\n    fp = new Point2D.Double(fx, fy);\r\n    rr = r;\r\n    AffineTransform t = transform;\r\n    if (isRelativeToFigureBounds) {\r\n        if (!(t.isIdentity()))\r\n            System.out.println((((\"RadialGradient \" + (hashCode())) + \" t=\") + t));\r\n\r\n        t = new AffineTransform();\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        t.translate(bounds.x, bounds.y);\r\n        t.scale(bounds.width, bounds.height);\r\n    }\r\n    // Construct a solid color, if only one stop color is given, or if\r\n    // transform is not invertible\r\n    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {\r\n        return colors[0];\r\n    }\r\n    // Construct the paint\r\n    RadialGradientPaint gp;\r\n    gp = new <org.apache.batik.ext.awt.RadialGradientPaint, org.apache.batik.ext.awt.RadialGradientPaint>RadialGradientPaint(cp, ((float) (rr)), fp, fractions, colors, t);\r\n    return gp;\r\n}'),(5164,'getR()','org.jhotdraw.samples.svg.RadialGradient.getR()','540','org.jhotdraw.samples.svg.RadialGradient','public double getR() {\r\n    return r;\r\n}'),(5165,'getStopColors()','org.jhotdraw.samples.svg.RadialGradient.getStopColors()','540','org.jhotdraw.samples.svg.RadialGradient','public Color[] getStopColors() {\r\n    return stopColors.clone();\r\n}'),(5166,'getStopOffsets()','org.jhotdraw.samples.svg.RadialGradient.getStopOffsets()','540','org.jhotdraw.samples.svg.RadialGradient','public double[] getStopOffsets() {\r\n    return stopOffsets.clone();\r\n}'),(5167,'getStopOpacities()','org.jhotdraw.samples.svg.RadialGradient.getStopOpacities()','540','org.jhotdraw.samples.svg.RadialGradient','public double[] getStopOpacities() {\r\n    return stopOpacities.clone();\r\n}'),(5168,'getTransform()','org.jhotdraw.samples.svg.RadialGradient.getTransform()','540','org.jhotdraw.samples.svg.RadialGradient','public AffineTransform getTransform() {\r\n    return transform;\r\n}'),(5169,'hashCode()','org.jhotdraw.samples.svg.RadialGradient.hashCode()','540','org.jhotdraw.samples.svg.RadialGradient','public int hashCode() {\r\n    long bits = Double.doubleToLongBits(cx);\r\n    bits += (Double.doubleToLongBits(cy)) * 37;\r\n    bits += (stopColors[0].hashCode()) * 43;\r\n    bits += (stopColors[((stopColors.length) - 1)].hashCode()) * 47;\r\n    return ((int) (bits)) ^ ((int) (bits >> 32));\r\n}'),(5170,'isRelativeToFigureBounds()','org.jhotdraw.samples.svg.RadialGradient.isRelativeToFigureBounds()','540','org.jhotdraw.samples.svg.RadialGradient','public boolean isRelativeToFigureBounds() {\r\n    return isRelativeToFigureBounds;\r\n}'),(5171,'makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.RadialGradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)','540','org.jhotdraw.samples.svg.RadialGradient','public void makeRelativeToFigureBounds(Figure f) {\r\n    if (!(isRelativeToFigureBounds)) {\r\n        isRelativeToFigureBounds = true;\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        cx = ((cx) - (bounds.x)) / (bounds.width);\r\n        cy = ((cy) - (bounds.y)) / (bounds.height);\r\n        r = (r) / (Math.sqrt(((((bounds.width) * (bounds.width)) / 2.0) + (((bounds.height) * (bounds.height)) / 2.0))));\r\n    }\r\n}'),(5172,'setGradientCircle(double,double,double)','org.jhotdraw.samples.svg.RadialGradient.setGradientCircle(double,double,double)','540','org.jhotdraw.samples.svg.RadialGradient','public void setGradientCircle(double cx, double cy, double r) {\r\n    this.cx = cx;\r\n    this.cy = cy;\r\n    this.r = r;\r\n}'),(5173,'setRelativeToFigureBounds(boolean)','org.jhotdraw.samples.svg.RadialGradient.setRelativeToFigureBounds(boolean)','540','org.jhotdraw.samples.svg.RadialGradient','public void setRelativeToFigureBounds(boolean b) {\r\n    isRelativeToFigureBounds = b;\r\n}'),(5174,'setStops(double[],java.awt.Color[],double[])','org.jhotdraw.samples.svg.RadialGradient.setStops(double[],java.awt.Color[],double[])','540','org.jhotdraw.samples.svg.RadialGradient','public void setStops(double[] offsets, Color[] colors, double[] stopOpacities) {\r\n    this.stopOffsets = offsets;\r\n    this.stopColors = colors;\r\n    this.stopOpacities = stopOpacities;\r\n}'),(5175,'setTransform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.RadialGradient.setTransform(java.awt.geom.AffineTransform)','540','org.jhotdraw.samples.svg.RadialGradient','public void setTransform(AffineTransform tx) {\r\n    transform = tx;\r\n}'),(5176,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.RadialGradient.transform(java.awt.geom.AffineTransform)','540','org.jhotdraw.samples.svg.RadialGradient','public void transform(AffineTransform tx) {\r\n    if ((transform) == null) {\r\n        transform = ((AffineTransform) (tx.clone()));\r\n    } else {\r\n        transform.preConcatenate(tx);\r\n    }\r\n}'),(5177,'-init-()','org.jhotdraw.samples.svg.SVGApplet.-init-()','541','org.jhotdraw.samples.svg.SVGApplet','public SVGApplet() {\r\n    setBackground(Color.WHITE);\r\n    start = System.currentTimeMillis();\r\n    setName(\"JHotDraw SVG Applet\");\r\n    ((JComponent) (getContentPane())).setBorder(new MatteBorder(new Insets(1, 1, 1, 1), new Color(10855845)));\r\n    // ResourceBundleUtil.setVerbose(true);\r\n}'),(5178,'close()','org.jhotdraw.samples.svg.SVGApplet.close()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Closes the applet. This method can be implemented by invoking\r\n * <code>getAppletContext().showDocument(...)</code>.\r\n */\r\nprotected void close() {\r\n    AppletContext appletContext;\r\n    try {\r\n        appletContext = getAppletContext();\r\n    } catch (Throwable e) {\r\n        appletContext = null;\r\n    }\r\n    if (appletContext == null) {\r\n        System.exit(0);\r\n    } else {\r\n        try {\r\n            appletContext.showDocument(new URL(getDocumentBase(), getParameter(\"PageURL\")));\r\n        } catch (MalformedURLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n}'),(5179,'createDrawing()','org.jhotdraw.samples.svg.SVGApplet.createDrawing()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Creates the drawing.\r\n */\r\n/**\r\n * Creates the drawing.\r\n */\r\nprotected Drawing createDrawing() {\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    inputFormats.add(new SVGZInputFormat());\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure()));\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    outputFormats.add(new SVGOutputFormat());\r\n    outputFormats.add(new SVGZOutputFormat());\r\n    outputFormats.add(new ImageOutputFormat());\r\n    outputFormats.add(new ImageOutputFormat(\"JPG\", \"Joint Photographics Experts Group (JPEG)\", \"jpg\", BufferedImage.TYPE_INT_RGB));\r\n    outputFormats.add(new ImageOutputFormat(\"BMP\", \"Windows Bitmap (BMP)\", \"bmp\", BufferedImage.TYPE_BYTE_INDEXED));\r\n    drawing.setInputFormats(inputFormats);\r\n    drawing.setOutputFormats(outputFormats);\r\n    return drawing;\r\n}'),(5180,'createDrawingComponent()','org.jhotdraw.samples.svg.SVGApplet.createDrawingComponent()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Creates the drawing component.\r\n */\r\nprotected SVGDrawingPanel createDrawingComponent() {\r\n    return new SVGDrawingPanel();\r\n}'),(5181,'getAppletInfo()','org.jhotdraw.samples.svg.SVGApplet.getAppletInfo()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Returns information about the applet.\r\n */\r\n@Override\r\npublic String getAppletInfo() {\r\n    return (((((getName()) + \"\nVersion \") + (getVersion())) + \"\n\nCopyright 1996-2009 (c) by the original authors of JHotDraw and all its contributors\") + \"\nThis software is licensed under LGPL or\") + \"\nCreative Commons 2.5 BY\";\r\n}'),(5182,'getDrawing()','org.jhotdraw.samples.svg.SVGApplet.getDrawing()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Gets the drawing from the drawing panel.\r\n */\r\nprivate Drawing getDrawing() {\r\n    return drawingComponent.getDrawing();\r\n}'),(5183,'getDrawingComponent()','org.jhotdraw.samples.svg.SVGApplet.getDrawingComponent()','541','org.jhotdraw.samples.svg.SVGApplet','protected SVGDrawingPanel getDrawingComponent() {\r\n    return drawingComponent;\r\n}'),(5184,'getParameter(java.lang.String)','org.jhotdraw.samples.svg.SVGApplet.getParameter(java.lang.String)','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Same as <code>Applet.getParameter()</code> but doesnt throw a\r\n * NullPointerException when used without an Applet context.\r\n */\r\n@Override\r\npublic String getParameter(String name) {\r\n    try {\r\n        return super.getParameter(name);\r\n    } catch (NullPointerException e) {\r\n        return null;\r\n    }\r\n}'),(5185,'getParameter(java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.SVGApplet.getParameter(java.lang.String,java.lang.String)','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Same as <code>Applet.getParameter()</code> but doesnt throw a\r\n * NullPointerException when used without an Applet context.\r\n */\r\npublic String getParameter(String name, String defaultValue) {\r\n    try {\r\n        String value = super.getParameter(name);\r\n        return value == null ? defaultValue : value;\r\n    } catch (NullPointerException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(5186,'getParameterInfo()','org.jhotdraw.samples.svg.SVGApplet.getParameterInfo()','541','org.jhotdraw.samples.svg.SVGApplet','@Override\r\npublic String[][] getParameterInfo() {\r\n    return new String[][]{ new String[]{ \"data\", \"String\", \"the data to be displayed by this applet.\" }, new String[]{ \"datafile\", \"URL\", \"an URL to a file containing the data to be displayed by this applet.\" } };\r\n}'),(5187,'getVersion()','org.jhotdraw.samples.svg.SVGApplet.getVersion()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Gets the version of the applet.\r\n */\r\npublic String getVersion() {\r\n    if ((version) == null) {\r\n        BufferedReader r = null;\r\n        try {\r\n            InputStream resource = SVGApplet.class.getResourceAsStream(\"version.txt\");\r\n            r = new BufferedReader(new InputStreamReader(resource, \"UTF-8\"));\r\n            version = r.readLine();\r\n        } catch (IOException e) {\r\n            version = \"unknown\";\r\n        } catch (NullPointerException e) {\r\n            version = \"unknown\";\r\n        } finally {\r\n            if (r != null) {\r\n                try {\r\n                    r.close();\r\n                } catch (IOException e) {\r\n                    // suppress\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return version;\r\n}'),(5188,'htmlencode(java.lang.String)','org.jhotdraw.samples.svg.SVGApplet.htmlencode(java.lang.String)','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Escapes all <, > and & characters in a string.\r\n *\r\n * @param str\r\n * 		A String.\r\n * @return HTMlEncoded String.\r\n */\r\nprivate static String htmlencode(String str) {\r\n    if (str == null) {\r\n        return \"\";\r\n    } else {\r\n        StringBuilder buf = new StringBuilder();\r\n        for (char ch : str.toCharArray()) {\r\n            switch (ch) {\r\n                case < :\r\n                    buf.append(\"&lt;\");\r\n                    break;\r\n                case > :\r\n                    buf.append(\"&gt;\");\r\n                    break;\r\n                case & :\r\n                    buf.append(\"&amp;\");\r\n                    break;\r\n                default :\r\n                    buf.append(ch);\r\n                    break;\r\n            }\r\n        }\r\n        return buf.toString();\r\n    }\r\n}'),(5189,'init()','org.jhotdraw.samples.svg.SVGApplet.init()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Displays a progress indicator and then invokes <code>loadDrawing</code>\r\n * on a worker thread. Displays the drawing panel when finished successfully.\r\n * Displays an error message when finished unsuccessfully.\r\n *\r\n * @see #loadDrawing\r\n */\r\n@Override\r\npublic final void init() {\r\n    // set the language of the applet\r\n    if ((getParameter(\"Locale\")) != null) {\r\n        Locale.setDefault(new Locale(getParameter(\"Locale\")));\r\n    }\r\n    final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    // Set look and feel\r\n    // -----------------\r\n    try {\r\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n    } catch (Throwable e) {\r\n        // Do nothing.\r\n        // If we cant set the desired look and feel, UIManager does\r\n        // automaticaly the right thing for us.\r\n    }\r\n    // Display a progress indicator while we are loading the drawing\r\n    // ----------------------------------------------------------\r\n    Container c = getContentPane();\r\n    final ProgressIndicator progress = new ProgressIndicator(getName(), labels.getString(\"progressInitializing\"));\r\n    c.add(progress);\r\n    progress.revalidate();\r\n    // Load the drawing using a worker thread\r\n    // --------------------------------------\r\n    new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                Thread t = new Thread() {\r\n                    @Override\r\n                    public void run() {\r\n                        drawingComponent = createDrawingComponent();\r\n                    }\r\n                };\r\n                t.start();\r\n                progress.setNote(labels.getString(\"progressLoading\"));\r\n                Object drawing = loadDrawing(progress);\r\n                progress.setNote(labels.getString(\"progressOpeningEditor\"));\r\n                progress.setIndeterminate(true);\r\n                t.join();\r\n                return drawing;\r\n            } catch (Throwable t) {\r\n                return t;\r\n            }\r\n        }\r\n\r\n        public void finished(Object result) {\r\n            Container c = getContentPane();\r\n            c.setLayout(new BorderLayout());\r\n            c.removeAll();\r\n            if (result instanceof Throwable) {\r\n                Throwable error = ((Throwable) (result));\r\n                error.printStackTrace();\r\n                String message = ((error.getMessage()) == null) ? error.toString() : error.getMessage();\r\n                MessagePanel mp = new MessagePanel(UIManager.getIcon(\"OptionPane.errorIcon\"), labels.getFormatted(\"messageLoadFailed\", SVGApplet.htmlencode(getParameter(\"DrawingURL\")), SVGApplet.htmlencode(message)));\r\n                c.add(mp);\r\n                mp.addActionListener(new ActionListener() {\r\n                    public void actionPerformed(ActionEvent evt) {\r\n                        if (evt.getActionCommand().equals(\"close\")) {\r\n                            close();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                c.add(drawingComponent.getComponent());\r\n                initComponents();\r\n                if (result != null) {\r\n                    if (result instanceof Drawing) {\r\n                        setDrawing(((Drawing) (result)));\r\n                    } else\r\n                        if (result instanceof Throwable) {\r\n                            setDrawing(createDrawing());\r\n                            getDrawing().add(new SVGTextFigure(result.toString()));\r\n                            ((Throwable) (result)).printStackTrace();\r\n                        }\r\n\r\n                }\r\n            }\r\n            c.validate();\r\n            long end = System.currentTimeMillis();\r\n            System.out.println((\"AbstractDrawingApplet startup latency:\" + (end - (start))));\r\n        }\r\n    }.start();\r\n}'),(5190,'initComponents()','org.jhotdraw.samples.svg.SVGApplet.initComponents()','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * This method is called from within the init() method to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5191,'loadDrawing(org.jhotdraw.samples.svg.gui.ProgressIndicator)','org.jhotdraw.samples.svg.SVGApplet.loadDrawing(org.jhotdraw.samples.svg.gui.ProgressIndicator)','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Loads the drawing.\r\n * By convention this method is invoked on a worker thread.\r\n *\r\n * @param progress\r\n * 		A ProgressIndicator to inform the user about the progress\r\n * 		of the operation.\r\n * @return The Drawing that was loaded.\r\n */\r\nprotected Drawing loadDrawing(ProgressIndicator progress) throws IOException {\r\n    Drawing drawing = createDrawing();\r\n    InputStream in = null;\r\n    try {\r\n        if ((getParameter(\"datafile\")) != null) {\r\n            ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n            URLConnection uc = url.openConnection();\r\n            // Disable caching. This ensures that we always request the\r\n            // newest version of the drawing from the server.\r\n            // (Note: The server still needs to set the proper HTTP caching\r\n            // properties to prevent proxies from caching the drawing).\r\n            if (uc instanceof HttpURLConnection) {\r\n                ((HttpURLConnection) (uc)).setUseCaches(false);\r\n            }\r\n            // Read the data into a buffer\r\n            int contentLength = uc.getContentLength();\r\n            in = uc.getInputStream();\r\n            if (contentLength != (-1)) {\r\n                in = new BoundedRangeInputStream(in);\r\n                ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                progress.setIndeterminate(false);\r\n            }\r\n            BufferedInputStream bin = new BufferedInputStream(in);\r\n            bin.mark(512);\r\n            // Read the data using all supported input formats\r\n            // until we succeed\r\n            final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n            IOException formatException = null;\r\n            for (InputFormat format : drawing.getInputFormats()) {\r\n                try {\r\n                    bin.reset();\r\n                } catch (IOException e) {\r\n                    uc = url.openConnection();\r\n                    in = uc.getInputStream();\r\n                    in = new BoundedRangeInputStream(in);\r\n                    ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                    progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                    bin = new BufferedInputStream(in);\r\n                    bin.mark(512);\r\n                }\r\n                try {\r\n                    bin.reset();\r\n                    format.read(bin, drawing, true);\r\n                    formatException = null;\r\n                    break;\r\n                } catch (IOException e) {\r\n                    formatException = e;\r\n                }\r\n            }\r\n            if (formatException != null) {\r\n                throw formatException;\r\n            }\r\n        }\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    return drawing;\r\n}'),(5192,'main(java.lang.String[])','org.jhotdraw.samples.svg.SVGApplet.main(java.lang.String[])','541','org.jhotdraw.samples.svg.SVGApplet','public static void main(String[] args) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            JFrame f = new JFrame(\"JHotDraw SVG Sample Applet\");\r\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            SVGApplet a = new SVGApplet();\r\n            f.getContentPane().add(a);\r\n            a.init();\r\n            f.setSize(500, 300);\r\n            f.setVisible(true);\r\n            a.start();\r\n        }\r\n    });\r\n}'),(5193,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.SVGApplet.setDrawing(org.jhotdraw.draw.Drawing)','541','org.jhotdraw.samples.svg.SVGApplet','/**\r\n * Sets the drawing on the drawing panel.\r\n */\r\nprivate void setDrawing(Drawing d) {\r\n    drawingComponent.setDrawing(d);\r\n}'),(5194,'-init-()','org.jhotdraw.samples.svg.SVGApplicationModel.-init-()','542','org.jhotdraw.samples.svg.SVGApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGApplicationModel() {\r\n}'),(5195,'createDrawingActions(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.SVGApplicationModel.createDrawingActions(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)','542','org.jhotdraw.samples.svg.SVGApplicationModel','public Collection<Action> createDrawingActions(Application app, DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new ClearSelectionAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(5196,'createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.svg.SVGApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)','542','org.jhotdraw.samples.svg.SVGApplicationModel','@Override\r\nprotected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JMenu m = super.createEditMenu(a, p);\r\n    JMenuItem mi;\r\n    mi = m.add(getAction(ClearSelectionAction.ID));\r\n    mi.setIcon(null);\r\n    if (p != null) {\r\n        mi = m.add(p.getAction(SelectSameAction.ID));\r\n    } else {\r\n        mi = new JMenuItem();\r\n        drawLabels.configureMenu(mi, SelectSameAction.ID);\r\n        mi.setEnabled(false);\r\n        m.add(mi);\r\n    }\r\n    mi.setIcon(null);\r\n    return m;\r\n}'),(5197,'createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.svg.SVGApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','542','org.jhotdraw.samples.svg.SVGApplicationModel','@Override\r\npublic List<JMenu> createMenus(Application a, View pr) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    mb.add(createEditMenu(a, pr));\r\n    mb.add(createViewMenu(a, pr));\r\n    return mb;\r\n}'),(5198,'createSelectionActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.SVGApplicationModel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)','542','org.jhotdraw.samples.svg.SVGApplicationModel','public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(5199,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.svg.SVGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','542','org.jhotdraw.samples.svg.SVGApplicationModel','/**\r\n * Overriden to create no toolbars.\r\n *\r\n * @param app\r\n * 		\r\n * @param p\r\n * 		\r\n * @return An empty list.\r\n */\r\n@Override\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    return list;\r\n}'),(5200,'createViewMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.svg.SVGApplicationModel.createViewMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)','542','org.jhotdraw.samples.svg.SVGApplicationModel','protected JMenu createViewMenu(Application a, View p) {\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    Action action;\r\n    ResourceBundleUtil appLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil svgLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    m = new JMenu();\r\n    appLabels.configureMenu(m, \"view\");\r\n    m.add(getAction(ViewSourceAction.ID));\r\n    return m;\r\n}'),(5201,'getSharedEditor()','org.jhotdraw.samples.svg.SVGApplicationModel.getSharedEditor()','542','org.jhotdraw.samples.svg.SVGApplicationModel','public DefaultDrawingEditor getSharedEditor() {\r\n    if ((sharedEditor) == null) {\r\n        sharedEditor = new DefaultDrawingEditor();\r\n    }\r\n    return sharedEditor;\r\n}'),(5202,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.samples.svg.SVGApplicationModel.initApplication(org.jhotdraw.app.Application)','542','org.jhotdraw.samples.svg.SVGApplicationModel','@Override\r\npublic void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    AbstractAction aa;\r\n    gridConstrainer = new GridConstrainer(12, 12);\r\n    putAction(ClearSelectionAction.ID, new ClearSelectionAction());\r\n    putAction(ViewSourceAction.ID, new ViewSourceAction(a));\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n}'),(5203,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.svg.SVGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','542','org.jhotdraw.samples.svg.SVGApplicationModel','@Override\r\npublic void initView(Application a, View p) {\r\n    SVGView v = ((SVGView) (p));\r\n    if (a.isSharingToolsAmongViews()) {\r\n        v.setEditor(getSharedEditor());\r\n    }\r\n    p.putAction(SelectSameAction.ID, new SelectSameAction(v.getEditor()));\r\n}'),(5204,'-init-()','org.jhotdraw.samples.svg.SVGAttributeKeys.-init-()','545','org.jhotdraw.samples.svg.SVGAttributeKeys','SVGAttributeKeys() {\r\n}'),(5205,'getFillPaint(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.SVGAttributeKeys.getFillPaint(org.jhotdraw.draw.Figure)','545','org.jhotdraw.samples.svg.SVGAttributeKeys','/**\r\n * Gets the fill paint for the specified figure based on the attributes\r\n * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getFillPaint(Figure f) {\r\n    double opacity = SVGAttributeKeys.FILL_OPACITY.get(f);\r\n    if ((SVGAttributeKeys.FILL_GRADIENT.get(f)) != null) {\r\n        return SVGAttributeKeys.FILL_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.FILL_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(5206,'getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.SVGAttributeKeys.getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)','545','org.jhotdraw.samples.svg.SVGAttributeKeys','/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularHitGrowth(Figure f) {\r\n    double grow;\r\n    if (((AttributeKeys.STROKE_COLOR.get(f)) == null) && ((SVGAttributeKeys.STROKE_GRADIENT.get(f)) == null)) {\r\n        grow = AttributeKeys.getPerpendicularFillGrowth(f);\r\n    } else {\r\n        double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n        grow = (AttributeKeys.getPerpendicularDrawGrowth(f)) + (strokeWidth / 2.0);\r\n    }\r\n    return grow;\r\n}'),(5207,'getStrokePaint(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.SVGAttributeKeys.getStrokePaint(org.jhotdraw.draw.Figure)','545','org.jhotdraw.samples.svg.SVGAttributeKeys','/**\r\n * Gets the stroke paint for the specified figure based on the attributes\r\n * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getStrokePaint(Figure f) {\r\n    double opacity = SVGAttributeKeys.STROKE_OPACITY.get(f);\r\n    if ((SVGAttributeKeys.STROKE_GRADIENT.get(f)) != null) {\r\n        return SVGAttributeKeys.STROKE_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.STROKE_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(5208,'setDefaults(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.SVGAttributeKeys.setDefaults(org.jhotdraw.draw.Figure)','545','org.jhotdraw.samples.svg.SVGAttributeKeys','/**\r\n * Sets SVG default values.\r\n */\r\npublic static void setDefaults(Figure f) {\r\n    // Fill properties\r\n    // http://www.w3.org/TR/SVGMobile12/painting.html#FillProperties\r\n    AttributeKeys.FILL_COLOR.basicSet(f, Color.black);\r\n    AttributeKeys.WINDING_RULE.basicSet(f, AttributeKeys.WindingRule.NON_ZERO);\r\n    // Stroke properties\r\n    // http://www.w3.org/TR/SVGMobile12/painting.html#StrokeProperties\r\n    AttributeKeys.STROKE_COLOR.basicSet(f, null);\r\n    AttributeKeys.STROKE_WIDTH.basicSet(f, 1.0);\r\n    AttributeKeys.STROKE_CAP.basicSet(f, BasicStroke.CAP_BUTT);\r\n    AttributeKeys.STROKE_JOIN.basicSet(f, BasicStroke.JOIN_MITER);\r\n    AttributeKeys.STROKE_MITER_LIMIT.basicSet(f, 4.0);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.basicSet(f, false);\r\n    AttributeKeys.STROKE_DASHES.basicSet(f, null);\r\n    AttributeKeys.STROKE_DASH_PHASE.basicSet(f, 0.0);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.basicSet(f, false);\r\n}'),(5209,'-init-()','org.jhotdraw.samples.svg.SVGAttributeKeys$TextAlign.-init-()','543','org.jhotdraw.samples.svg.SVGAttributeKeys$TextAlign','TextAlign() {\r\n}'),(5210,'-init-()','org.jhotdraw.samples.svg.SVGAttributeKeys$TextAnchor.-init-()','544','org.jhotdraw.samples.svg.SVGAttributeKeys$TextAnchor','TextAnchor() {\r\n}'),(5211,'-init-()','org.jhotdraw.samples.svg.SVGConstants.-init-()','546','org.jhotdraw.samples.svg.SVGConstants','/**\r\n * Prevents instance creation.\r\n */\r\nprivate SVGConstants() {\r\n}'),(5212,'-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure)','org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure)','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype) {\r\n    super(imagePrototype);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}'),(5213,'-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure,java.util.Map)','org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure,java.util.Map)','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(imagePrototype, attributes);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}'),(5214,'-init-()','org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-()','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','1() {\r\n}'),(5215,'activate(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.SVGCreateFromFileTool.activate(org.jhotdraw.draw.DrawingEditor)','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    if ((workerThread) != null) {\r\n        try {\r\n            workerThread.join();\r\n        } catch (InterruptedException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    final File file;\r\n    if (useFileDialog) {\r\n        getFileDialog().setVisible(true);\r\n        if ((getFileDialog().getFile()) != null) {\r\n            file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());\r\n        } else {\r\n            file = null;\r\n        }\r\n    } else {\r\n        if ((getFileChooser().showOpenDialog(getView().getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            file = getFileChooser().getSelectedFile();\r\n        } else {\r\n            file = null;\r\n        }\r\n    }\r\n    if (file != null) {\r\n        Worker worker;\r\n        if ((file.getName().toLowerCase().endsWith(\".svg\")) || (file.getName().toLowerCase().endsWith(\".svgz\"))) {\r\n            prototype = ((Figure) (groupPrototype.clone()));\r\n            worker = new Worker() {\r\n                public Object construct() {\r\n                    Drawing drawing = new DefaultDrawing();\r\n                    try {\r\n                        InputFormat in = (file.getName().toLowerCase().endsWith(\".svg\")) ? new SVGInputFormat() : new SVGZInputFormat();\r\n                        in.read(file, drawing);\r\n                    } catch (Throwable t) {\r\n                        return t;\r\n                    }\r\n                    return drawing;\r\n                }\r\n\r\n                public void finished(Object value) {\r\n                    if (value instanceof Throwable) {\r\n                        Throwable t = ((Throwable) (value));\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        getDrawing().remove(createdFigure);\r\n                        fireToolDone();\r\n                    } else {\r\n                        Drawing drawing = ((Drawing) (value));\r\n                        CompositeFigure parent;\r\n                        if ((createdFigure) == null) {\r\n                            parent = ((CompositeFigure) (prototype));\r\n                            for (Figure f : drawing.getChildren()) {\r\n                                parent.basicAdd(f);\r\n                            }\r\n                        } else {\r\n                            parent = ((CompositeFigure) (createdFigure));\r\n                            parent.willChange();\r\n                            for (Figure f : drawing.getChildren()) {\r\n                                parent.add(f);\r\n                            }\r\n                            parent.changed();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            prototype = imagePrototype;\r\n            final ImageHolderFigure loaderFigure = ((ImageHolderFigure) (prototype.clone()));\r\n            worker = new Worker() {\r\n                public Object construct() {\r\n                    try {\r\n                        ((ImageHolderFigure) (loaderFigure)).loadImage(file);\r\n                    } catch (Throwable t) {\r\n                        return t;\r\n                    }\r\n                    return null;\r\n                }\r\n\r\n                public void finished(Object value) {\r\n                    if (value instanceof Throwable) {\r\n                        Throwable t = ((Throwable) (value));\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        getDrawing().remove(createdFigure);\r\n                        fireToolDone();\r\n                    } else {\r\n                        try {\r\n                            if ((createdFigure) == null) {\r\n                                ((ImageHolderFigure) (prototype)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                            } else {\r\n                                ((ImageHolderFigure) (createdFigure)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                            }\r\n                        } catch (IOException ex) {\r\n                            JOptionPane.showMessageDialog(getView().getComponent(), ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        workerThread = new Thread(worker);\r\n        workerThread.start();\r\n    } else {\r\n        // getDrawing().remove(createdFigure);\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}'),(5216,'createFigure()','org.jhotdraw.samples.svg.SVGCreateFromFileTool.createFigure()','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','protected Figure createFigure() {\r\n    if ((prototype) instanceof CompositeFigure) {\r\n        // we must not apply default attributs to the composite figure,\r\n        // because this would change the look of the figures that we\r\n        // read from the SVG file.\r\n        return ((Figure) (prototype.clone()));\r\n    } else {\r\n        return super.createFigure();\r\n    }\r\n}'),(5217,'getFileChooser()','org.jhotdraw.samples.svg.SVGCreateFromFileTool.getFileChooser()','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','private JFileChooser getFileChooser() {\r\n    if ((fileChooser) == null) {\r\n        fileChooser = new JFileChooser();\r\n    }\r\n    return fileChooser;\r\n}'),(5218,'getFileDialog()','org.jhotdraw.samples.svg.SVGCreateFromFileTool.getFileDialog()','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','private FileDialog getFileDialog() {\r\n    if ((fileDialog) == null) {\r\n        fileDialog = new FileDialog(new Frame());\r\n    }\r\n    return fileDialog;\r\n}'),(5219,'isUseFileDialog()','org.jhotdraw.samples.svg.SVGCreateFromFileTool.isUseFileDialog()','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','public boolean isUseFileDialog() {\r\n    return useFileDialog;\r\n}'),(5220,'setUseFileDialog(boolean)','org.jhotdraw.samples.svg.SVGCreateFromFileTool.setUseFileDialog(boolean)','547','org.jhotdraw.samples.svg.SVGCreateFromFileTool','public void setUseFileDialog(boolean newValue) {\r\n    useFileDialog = newValue;\r\n    if (useFileDialog) {\r\n        fileChooser = null;\r\n    } else {\r\n        fileDialog = null;\r\n    }\r\n}'),(5221,'-init-(javax.swing.JToolBar,java.lang.String)','org.jhotdraw.samples.svg.SVGDrawingPanel.-init-(javax.swing.JToolBar,java.lang.String)','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public ItemChangeHandler(JToolBar toolbar, String prefkey) {\r\n    this.toolbar = toolbar;\r\n    this.prefkey = prefkey;\r\n}'),(5222,'-init-()','org.jhotdraw.samples.svg.SVGDrawingPanel.-init-()','549','org.jhotdraw.samples.svg.SVGDrawingPanel','/**\r\n * Creates new instance.\r\n */\r\npublic SVGDrawingPanel() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    try {\r\n        prefs = Preferences.userNodeForPackage(getClass());\r\n    } catch (SecurityException e) {\r\n        // prefs is null, because we are not permitted to read preferences\r\n    }\r\n    initComponents();\r\n    toolsPane.setLayout(new ToolBarLayout());\r\n    toolsPane.setBackground(new Color(15790320));\r\n    toolsPane.setOpaque(true);\r\n    viewToolBar.setView(view);\r\n    undoManager = new UndoRedoManager();\r\n    setEditor(new DefaultDrawingEditor());\r\n    editor.setHandleAttribute(HandleAttributeKeys.HANDLE_SIZE, new Integer(7));\r\n    DefaultDrawing drawing = new DefaultDrawing();\r\n    view.setDrawing(drawing);\r\n    drawing.addUndoableEditListener(undoManager);\r\n    /* FIXME - Implement the code for handling constraints!\n    toggleGridAction = actionToolBar.getToggleGridAction();\n    if (prefs != null && prefs.getBoolean(\"gridVisible\", false)) {\n    view.setConstrainer(view.getOnConstrainer());\n    }\n    view.addPropertyChangeListener(new PropertyChangeListener() {\n    public void propertyChange(PropertyChangeEvent evt) {\n    if (evt.getPropertyName().equals(\"constrainer\") && prefs) {\n    prefs.putBoolean(\"gridVisible\", evt.getNewValue() == toggleGridAction.getOnConstrainer());\n    }\n    }\n    });\n     */\r\n    // Sort the toolbars according to the user preferences\r\n    ArrayList<JToolBar> sortme = new ArrayList<JToolBar>();\r\n    for (Component c : toolsPane.getComponents()) {\r\n        if (c instanceof JToolBar) {\r\n            sortme.add(((JToolBar) (c)));\r\n        }\r\n    }\r\n    Collections.sort(sortme, new Comparator<JToolBar>() {\r\n        public int compare(JToolBar tb1, JToolBar tb2) {\r\n            int i1 = prefs.getInt((\"toolBarIndex.\" + (tb1.getName())), 0);\r\n            int i2 = prefs.getInt((\"toolBarIndex.\" + (tb2.getName())), 0);\r\n            return i1 - i2;\r\n        }\r\n    });\r\n    toolsPane.removeAll();\r\n    for (JToolBar tb : sortme) {\r\n        toolsPane.add(tb);\r\n    }\r\n    toolsPane.addContainerListener(new ContainerListener() {\r\n        public void componentAdded(ContainerEvent e) {\r\n            int i = 0;\r\n            for (Component c : toolsPane.getComponents()) {\r\n                if (c instanceof JToolBar) {\r\n                    JToolBar tb = ((JToolBar) (c));\r\n                    prefs.putInt((\"toolBarIndex.\" + (tb.getName())), i);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        public void componentRemoved(ContainerEvent e) {\r\n        }\r\n    });\r\n}'),(5223,'getComponent()','org.jhotdraw.samples.svg.SVGDrawingPanel.getComponent()','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public JComponent getComponent() {\r\n    return this;\r\n}'),(5224,'getDrawing()','org.jhotdraw.samples.svg.SVGDrawingPanel.getDrawing()','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public Drawing getDrawing() {\r\n    return view.getDrawing();\r\n}'),(5225,'getEditor()','org.jhotdraw.samples.svg.SVGDrawingPanel.getEditor()','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(5226,'getView()','org.jhotdraw.samples.svg.SVGDrawingPanel.getView()','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public DrawingView getView() {\r\n    return view;\r\n}'),(5227,'initComponents()','org.jhotdraw.samples.svg.SVGDrawingPanel.initComponents()','549','org.jhotdraw.samples.svg.SVGDrawingPanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    toolButtonGroup = new ButtonGroup();\r\n    scrollPane = new JScrollPane();\r\n    view = new DefaultDrawingView();\r\n    toolsPanel = new JPanel();\r\n    toolsScrollPane = new JScrollPane();\r\n    toolsPane = new JPanel();\r\n    creationToolBar = new ToolsToolBar();\r\n    actionToolBar = new ActionsToolBar();\r\n    fillToolBar = new FillToolBar();\r\n    strokeToolBar = new StrokeToolBar();\r\n    fontToolBar = new FontToolBar();\r\n    arrangeToolBar = new ArrangeToolBar();\r\n    alignToolBar = new AlignToolBar();\r\n    figureToolBar = new FigureToolBar();\r\n    linkToolBar = new LinkToolBar();\r\n    canvasToolBar = new CanvasToolBar();\r\n    viewToolBar = new ViewToolBar();\r\n    setBackground(new Color(255, 255, 255));\r\n    setLayout(new BorderLayout());\r\n    scrollPane.setBorder(null);\r\n    scrollPane.setViewportView(view);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    toolsPanel.setBackground(new Color(255, 255, 255));\r\n    toolsPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n    toolsPanel.setOpaque(true);\r\n    toolsPanel.setLayout(new GridBagLayout());\r\n    toolsScrollPane.setBorder(PaletteLookAndFeel.getInstance().getBorder(\"Ribbon.border\"));\r\n    toolsScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    toolsScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);\r\n    toolsScrollPane.setMinimumSize(new Dimension(0, 0));\r\n    toolsPane.setForeground(new Color(153, 153, 153));\r\n    toolsPane.add(creationToolBar);\r\n    toolsPane.add(actionToolBar);\r\n    toolsPane.add(fillToolBar);\r\n    strokeToolBar.setMargin(new Insets(0, 10, 0, 0));\r\n    toolsPane.add(strokeToolBar);\r\n    toolsPane.add(fontToolBar);\r\n    toolsPane.add(arrangeToolBar);\r\n    toolsPane.add(alignToolBar);\r\n    toolsPane.add(figureToolBar);\r\n    toolsPane.add(linkToolBar);\r\n    toolsPane.add(canvasToolBar);\r\n    toolsPane.add(viewToolBar);\r\n    toolsScrollPane.setViewportView(toolsPane);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.weightx = 1.0;\r\n    gridBagConstraints.weighty = 1.0;\r\n    toolsPanel.add(toolsScrollPane, gridBagConstraints);\r\n    add(toolsPanel, BorderLayout.SOUTH);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5228,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.SVGDrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(5229,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.SVGDrawingPanel.setEditor(org.jhotdraw.draw.DrawingEditor)','549','org.jhotdraw.samples.svg.SVGDrawingPanel','public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n    creationToolBar.setEditor(editor);\r\n    fillToolBar.setEditor(editor);\r\n    strokeToolBar.setEditor(editor);\r\n    actionToolBar.setUndoManager(undoManager);\r\n    actionToolBar.setEditor(editor);\r\n    alignToolBar.setEditor(editor);\r\n    arrangeToolBar.setEditor(editor);\r\n    fontToolBar.setEditor(editor);\r\n    figureToolBar.setEditor(editor);\r\n    linkToolBar.setEditor(editor);\r\n    DrawingView temp = editor.getActiveView();\r\n    editor.setActiveView(view);\r\n    canvasToolBar.setEditor(editor);\r\n    viewToolBar.setEditor(editor);\r\n    editor.setActiveView(temp);\r\n}'),(5230,'-init-(javax.swing.JToolBar,java.lang.String)','org.jhotdraw.samples.svg.SVGDrawingPanel$ItemChangeHandler.-init-(javax.swing.JToolBar,java.lang.String)','548','org.jhotdraw.samples.svg.SVGDrawingPanel$ItemChangeHandler','public ItemChangeHandler(JToolBar toolbar, String prefkey) {\r\n    this.toolbar = toolbar;\r\n    this.prefkey = prefkey;\r\n}'),(5231,'itemStateChanged(java.awt.event.ItemEvent)','org.jhotdraw.samples.svg.SVGDrawingPanel$ItemChangeHandler.itemStateChanged(java.awt.event.ItemEvent)','548','org.jhotdraw.samples.svg.SVGDrawingPanel$ItemChangeHandler','public void itemStateChanged(ItemEvent e) {\r\n    boolean b = (e.getStateChange()) == (ItemEvent.SELECTED);\r\n    toolbar.setVisible(b);\r\n    prefs.putBoolean(prefkey, b);\r\n    validate();\r\n}'),(5232,'-init-()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.-init-()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','SVGDrawingPanelBeanInfo() {\r\n}'),(5233,'getBdescriptor()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getBdescriptor()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((SVGDrawingPanelBeanInfo.beanDescriptor) == null)\r\n        SVGDrawingPanelBeanInfo.beanDescriptor = new BeanDescriptor(SVGDrawingPanelBeanInfo.class);\r\n\r\n    SVGDrawingPanelBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    SVGDrawingPanelBeanInfo.beanDescriptor.setDisplayName(\"SVGDrawingPanel\");\r\n    return SVGDrawingPanelBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5234,'getBeanDescriptor()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getBeanDescriptor()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return SVGDrawingPanelBeanInfo.getBdescriptor();\r\n}'),(5235,'getDefaultEventIndex()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getDefaultEventIndex()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return SVGDrawingPanelBeanInfo.defaultEventIndex;\r\n}'),(5236,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getDefaultPropertyIndex()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return SVGDrawingPanelBeanInfo.defaultPropertyIndex;\r\n}'),(5237,'getEdescriptor()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getEdescriptor()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return SVGDrawingPanelBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5238,'getEventSetDescriptors()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getEventSetDescriptors()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return SVGDrawingPanelBeanInfo.getEdescriptor();\r\n}'),(5239,'getIcon(int)','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getIcon(int)','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((SVGDrawingPanelBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGDrawingPanelBeanInfo.iconColor16) == null)\r\n                    SVGDrawingPanelBeanInfo.iconColor16 = loadImage(SVGDrawingPanelBeanInfo.iconNameC16);\r\n\r\n                return SVGDrawingPanelBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((SVGDrawingPanelBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGDrawingPanelBeanInfo.iconColor32) == null)\r\n                    SVGDrawingPanelBeanInfo.iconColor32 = loadImage(SVGDrawingPanelBeanInfo.iconNameC32);\r\n\r\n                return SVGDrawingPanelBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((SVGDrawingPanelBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGDrawingPanelBeanInfo.iconMono16) == null)\r\n                    SVGDrawingPanelBeanInfo.iconMono16 = loadImage(SVGDrawingPanelBeanInfo.iconNameM16);\r\n\r\n                return SVGDrawingPanelBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((SVGDrawingPanelBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGDrawingPanelBeanInfo.iconMono32) == null)\r\n                    SVGDrawingPanelBeanInfo.iconMono32 = loadImage(SVGDrawingPanelBeanInfo.iconNameM32);\r\n\r\n                return SVGDrawingPanelBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5240,'getMdescriptor()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getMdescriptor()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return SVGDrawingPanelBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5241,'getMethodDescriptors()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getMethodDescriptors()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return SVGDrawingPanelBeanInfo.getMdescriptor();\r\n}'),(5242,'getPdescriptor()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getPdescriptor()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return SVGDrawingPanelBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5243,'getPropertyDescriptors()','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo.getPropertyDescriptors()','550','org.jhotdraw.samples.svg.SVGDrawingPanelBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return SVGDrawingPanelBeanInfo.getPdescriptor();\r\n}'),(5244,'-init-()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.-init-()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','SVGPropertiesPanelBeanInfo() {\r\n}'),(5245,'getBdescriptor()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getBdescriptor()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((SVGPropertiesPanelBeanInfo.beanDescriptor) == null)\r\n        SVGPropertiesPanelBeanInfo.beanDescriptor = new BeanDescriptor(SVGPropertiesPanelBeanInfo.class);\r\n\r\n    SVGPropertiesPanelBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    SVGPropertiesPanelBeanInfo.beanDescriptor.setDisplayName(\"SVGPropertiesPanel\");\r\n    return SVGPropertiesPanelBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n');
INSERT INTO `methods` VALUES (5246,'getBeanDescriptor()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getBeanDescriptor()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return SVGPropertiesPanelBeanInfo.getBdescriptor();\r\n}'),(5247,'getDefaultEventIndex()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getDefaultEventIndex()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return SVGPropertiesPanelBeanInfo.defaultEventIndex;\r\n}'),(5248,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getDefaultPropertyIndex()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return SVGPropertiesPanelBeanInfo.defaultPropertyIndex;\r\n}'),(5249,'getEdescriptor()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getEdescriptor()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return SVGPropertiesPanelBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5250,'getEventSetDescriptors()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getEventSetDescriptors()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return SVGPropertiesPanelBeanInfo.getEdescriptor();\r\n}'),(5251,'getIcon(int)','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getIcon(int)','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((SVGPropertiesPanelBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGPropertiesPanelBeanInfo.iconColor16) == null)\r\n                    SVGPropertiesPanelBeanInfo.iconColor16 = loadImage(SVGPropertiesPanelBeanInfo.iconNameC16);\r\n\r\n                return SVGPropertiesPanelBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((SVGPropertiesPanelBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGPropertiesPanelBeanInfo.iconColor32) == null)\r\n                    SVGPropertiesPanelBeanInfo.iconColor32 = loadImage(SVGPropertiesPanelBeanInfo.iconNameC32);\r\n\r\n                return SVGPropertiesPanelBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((SVGPropertiesPanelBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGPropertiesPanelBeanInfo.iconMono16) == null)\r\n                    SVGPropertiesPanelBeanInfo.iconMono16 = loadImage(SVGPropertiesPanelBeanInfo.iconNameM16);\r\n\r\n                return SVGPropertiesPanelBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((SVGPropertiesPanelBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((SVGPropertiesPanelBeanInfo.iconMono32) == null)\r\n                    SVGPropertiesPanelBeanInfo.iconMono32 = loadImage(SVGPropertiesPanelBeanInfo.iconNameM32);\r\n\r\n                return SVGPropertiesPanelBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5252,'getMdescriptor()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getMdescriptor()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return SVGPropertiesPanelBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5253,'getMethodDescriptors()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getMethodDescriptors()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return SVGPropertiesPanelBeanInfo.getMdescriptor();\r\n}'),(5254,'getPdescriptor()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getPdescriptor()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return SVGPropertiesPanelBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5255,'getPropertyDescriptors()','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo.getPropertyDescriptors()','551','org.jhotdraw.samples.svg.SVGPropertiesPanelBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return SVGPropertiesPanelBeanInfo.getPdescriptor();\r\n}'),(5256,'-init-()','org.jhotdraw.samples.svg.SVGView.-init-()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Creates a new View.\r\n */\r\npublic SVGView() {\r\n}'),(5257,'canSaveTo(java.io.File)','org.jhotdraw.samples.svg.SVGView.canSaveTo(java.io.File)','552','org.jhotdraw.samples.svg.SVGView','@Override\r\npublic boolean canSaveTo(File file) {\r\n    return (file.getName().endsWith(\".svg\")) || (file.getName().endsWith(\".svgz\"));\r\n}'),(5258,'clear()','org.jhotdraw.samples.svg.SVGView.clear()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Clears the view.\r\n */\r\npublic void clear() {\r\n    final Drawing newDrawing = createDrawing();\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                svgPanel.getDrawing().removeUndoableEditListener(undo);\r\n                svgPanel.setDrawing(newDrawing);\r\n                svgPanel.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InvocationTargetException ex) {\r\n        ex.printStackTrace();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(5259,'createDrawing()','org.jhotdraw.samples.svg.SVGView.createDrawing()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Creates a new Drawing for this View.\r\n */\r\nprotected Drawing createDrawing() {\r\n    Drawing drawing = new QuadTreeDrawing();\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    inputFormats.add(new SVGZInputFormat());\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure()));\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure(), \"JPG\", \"Joint Photographics Experts Group (JPEG)\", \"jpg\", BufferedImage.TYPE_INT_RGB));\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure(), \"GIF\", \"Graphics Interchange Format (GIF)\", \"gif\", BufferedImage.TYPE_INT_ARGB));\r\n    inputFormats.add(new ImageInputFormat(new SVGImageFigure(), \"PNG\", \"Portable Network Graphics (PNG)\", \"png\", BufferedImage.TYPE_INT_ARGB));\r\n    inputFormats.add(new PictImageInputFormat(new SVGImageFigure()));\r\n    inputFormats.add(new TextInputFormat(new SVGTextFigure()));\r\n    drawing.setInputFormats(inputFormats);\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    outputFormats.add(new SVGOutputFormat());\r\n    outputFormats.add(new SVGZOutputFormat());\r\n    outputFormats.add(new ImageOutputFormat());\r\n    outputFormats.add(new ImageOutputFormat(\"JPG\", \"Joint Photographics Experts Group (JPEG)\", \"jpg\", BufferedImage.TYPE_INT_RGB));\r\n    outputFormats.add(new ImageOutputFormat(\"BMP\", \"Windows Bitmap (BMP)\", \"bmp\", BufferedImage.TYPE_BYTE_INDEXED));\r\n    outputFormats.add(new ImageMapOutputFormat());\r\n    drawing.setOutputFormats(outputFormats);\r\n    return drawing;\r\n}'),(5260,'createExportChooser()','org.jhotdraw.samples.svg.SVGView.createExportChooser()','552','org.jhotdraw.samples.svg.SVGView','protected JFileChooser createExportChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    fileFilterOutputFormatMap = new HashMap<FileFilter, OutputFormat>();\r\n    // c.addChoosableFileFilter(new ExtensionFileFilter(\"SVG Drawing\",\"svg\"));\r\n    FileFilter currentFilter = null;\r\n    for (OutputFormat format : svgPanel.getDrawing().getOutputFormats()) {\r\n        FileFilter ff = format.getFileFilter();\r\n        fileFilterOutputFormatMap.put(ff, format);\r\n        c.addChoosableFileFilter(ff);\r\n        if (ff.getDescription().equals(preferences.get(\"viewExportFormat\", \"\"))) {\r\n            currentFilter = ff;\r\n        }\r\n    }\r\n    if (currentFilter != null) {\r\n        c.setFileFilter(currentFilter);\r\n    }\r\n    c.setSelectedFile(new File(preferences.get(\"viewExportFile\", System.getProperty(\"user.home\"))));\r\n    return c;\r\n}'),(5261,'createOpenChooser()','org.jhotdraw.samples.svg.SVGView.createOpenChooser()','552','org.jhotdraw.samples.svg.SVGView','@Override\r\nprotected JFileChooser createOpenChooser() {\r\n    final JFileChooser c = new JFileChooser();\r\n    fileFilterInputFormatMap = new HashMap<FileFilter, InputFormat>();\r\n    FileFilter firstFF = null;\r\n    for (InputFormat format : svgPanel.getDrawing().getInputFormats()) {\r\n        FileFilter ff = format.getFileFilter();\r\n        if (firstFF == null) {\r\n            firstFF = ff;\r\n        }\r\n        fileFilterInputFormatMap.put(ff, format);\r\n        c.addChoosableFileFilter(ff);\r\n    }\r\n    c.setFileFilter(firstFF);\r\n    c.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(\"fileFilterChanged\")) {\r\n                InputFormat inputFormat = fileFilterInputFormatMap.get(evt.getNewValue());\r\n                c.setAccessory((inputFormat == null ? null : inputFormat.getInputFormatAccessory()));\r\n            }\r\n        }\r\n    });\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(5262,'createPageable()','org.jhotdraw.samples.svg.SVGView.createPageable()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Creates a Pageable object for printing the View.\r\n */\r\npublic Pageable createPageable() {\r\n    return new DrawingPageable(svgPanel.getDrawing());\r\n}'),(5263,'createSaveChooser()','org.jhotdraw.samples.svg.SVGView.createSaveChooser()','552','org.jhotdraw.samples.svg.SVGView','@Override\r\nprotected JFileChooser createSaveChooser() {\r\n    JFileChooser c = new JFileChooser();\r\n    fileFilterOutputFormatMap = new HashMap<FileFilter, OutputFormat>();\r\n    // c.addChoosableFileFilter(new ExtensionFileFilter(\"SVG Drawing\",\"svg\"));\r\n    for (OutputFormat format : svgPanel.getDrawing().getOutputFormats()) {\r\n        FileFilter ff = format.getFileFilter();\r\n        fileFilterOutputFormatMap.put(ff, format);\r\n        c.addChoosableFileFilter(ff);\r\n        break;// only add the first file filter\r\n\r\n    }\r\n    if ((preferences) != null) {\r\n        c.setSelectedFile(new File(preferences.get(\"projectFile\", System.getProperty(\"user.home\"))));\r\n    }\r\n    return c;\r\n}'),(5264,'export(java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','org.jhotdraw.samples.svg.SVGView.export(java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)','552','org.jhotdraw.samples.svg.SVGView','public void export(File f, FileFilter filter, Component accessory) throws IOException {\r\n    OutputFormat format = fileFilterOutputFormatMap.get(filter);\r\n    if (!(f.getName().endsWith((\".\" + (format.getFileExtension()))))) {\r\n        f = new File((((f.getPath()) + \".\") + (format.getFileExtension())));\r\n    }\r\n    format.write(f, svgPanel.getDrawing());\r\n    preferences.put(\"viewExportFile\", f.getPath());\r\n    preferences.put(\"viewExportFormat\", filter.getDescription());\r\n}'),(5265,'getDrawing()','org.jhotdraw.samples.svg.SVGView.getDrawing()','552','org.jhotdraw.samples.svg.SVGView','public Drawing getDrawing() {\r\n    return svgPanel.getDrawing();\r\n}'),(5266,'getEditor()','org.jhotdraw.samples.svg.SVGView.getEditor()','552','org.jhotdraw.samples.svg.SVGView','public DrawingEditor getEditor() {\r\n    return svgPanel.getEditor();\r\n}'),(5267,'getExportChooser()','org.jhotdraw.samples.svg.SVGView.getExportChooser()','552','org.jhotdraw.samples.svg.SVGView','public JFileChooser getExportChooser() {\r\n    if ((exportChooser) == null) {\r\n        exportChooser = createExportChooser();\r\n    }\r\n    return exportChooser;\r\n}'),(5268,'init()','org.jhotdraw.samples.svg.SVGView.init()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Initializes the View.\r\n */\r\n@Override\r\npublic void init() {\r\n    super.init();\r\n    initComponents();\r\n    JPanel zoomButtonPanel = new JPanel(new BorderLayout());\r\n    undo = new UndoRedoManager();\r\n    svgPanel.setDrawing(createDrawing());\r\n    svgPanel.getDrawing().addUndoableEditListener(undo);\r\n    initActions();\r\n    undo.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            setHasUnsavedChanges(undo.hasSignificantEdits());\r\n        }\r\n    });\r\n}'),(5269,'initActions()','org.jhotdraw.samples.svg.SVGView.initActions()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Initializes view specific actions.\r\n */\r\nprivate void initActions() {\r\n    putAction(UndoAction.ID, undo.getUndoAction());\r\n    putAction(RedoAction.ID, undo.getRedoAction());\r\n}'),(5270,'initComponents()','org.jhotdraw.samples.svg.SVGView.initComponents()','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    svgPanel = new SVGDrawingPanel();\r\n    setLayout(new BorderLayout());\r\n    add(svgPanel, BorderLayout.CENTER);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5271,'read(java.io.File)','org.jhotdraw.samples.svg.SVGView.read(java.io.File)','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Reads the view from the specified file.\r\n */\r\npublic void read(File f) throws IOException {\r\n    try {\r\n        JFileChooser fc = getOpenChooser();\r\n        final Drawing drawing = createDrawing();\r\n        // We start with the selected file format in the file chooser,\r\n        // and then try out all formats we can import.\r\n        // We need to try out all formats, because the user may have\r\n        // chosen to load a file without having used the file chooser.\r\n        InputFormat selectedFormat = fileFilterInputFormatMap.get(fc.getFileFilter());\r\n        boolean success = false;\r\n        if (selectedFormat != null) {\r\n            try {\r\n                selectedFormat.read(f, drawing, true);\r\n                success = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                // try with the next input format\r\n            }\r\n        }\r\n        if (!success) {\r\n            for (InputFormat sfi : drawing.getInputFormats()) {\r\n                if (sfi != selectedFormat) {\r\n                    try {\r\n                        sfi.read(f, drawing, true);\r\n                        success = true;\r\n                        break;\r\n                    } catch (Exception e) {\r\n                        // try with the next input format\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!success) {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n            throw new IOException(labels.getFormatted(\"file.open.unsupportedFileFormat.message\", f.getName()));\r\n        }\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                svgPanel.getDrawing().removeUndoableEditListener(undo);\r\n                svgPanel.setDrawing(drawing);\r\n                svgPanel.getDrawing().addUndoableEditListener(undo);\r\n                undo.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        InternalError error = new InternalError();\r\n        e.initCause(e);\r\n        throw error;\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError();\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(5272,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.SVGView.setEditor(org.jhotdraw.draw.DrawingEditor)','552','org.jhotdraw.samples.svg.SVGView','public void setEditor(DrawingEditor newValue) {\r\n    svgPanel.setEditor(newValue);\r\n}'),(5273,'setEnabled(boolean)','org.jhotdraw.samples.svg.SVGView.setEnabled(boolean)','552','org.jhotdraw.samples.svg.SVGView','public void setEnabled(boolean newValue) {\r\n    svgPanel.setEnabled(newValue);\r\n    super.setEnabled(newValue);\r\n}'),(5274,'setHasUnsavedChanges(boolean)','org.jhotdraw.samples.svg.SVGView.setHasUnsavedChanges(boolean)','552','org.jhotdraw.samples.svg.SVGView','protected void setHasUnsavedChanges(boolean newValue) {\r\n    super.setHasUnsavedChanges(newValue);\r\n    undo.setHasSignificantEdits(newValue);\r\n}'),(5275,'write(java.io.File)','org.jhotdraw.samples.svg.SVGView.write(java.io.File)','552','org.jhotdraw.samples.svg.SVGView','/**\r\n * Writes the view to the specified file.\r\n */\r\npublic void write(File f) throws IOException {\r\n    OutputStream out = null;\r\n    try {\r\n        out = new BufferedOutputStream(new FileOutputStream(f));\r\n        new SVGOutputFormat().write(f, svgPanel.getDrawing());\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(5276,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor)','553','org.jhotdraw.samples.svg.action.CombineAction','/**\r\n * Creates a new instance.\r\n */\r\npublic CombineAction(DrawingEditor editor) {\r\n    this(editor, new SVGPathFigure(true), true);\r\n}'),(5277,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)','553','org.jhotdraw.samples.svg.action.CombineAction','public CombineAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    this(editor, prototype, true);\r\n}'),(5278,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)','org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)','553','org.jhotdraw.samples.svg.action.CombineAction','public CombineAction(DrawingEditor editor, SVGPathFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isCombineAction = isGroupingAction;\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}'),(5279,'-init-()','org.jhotdraw.samples.svg.action.CombineAction.-init-()','553','org.jhotdraw.samples.svg.action.CombineAction','1() {\r\n}'),(5280,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.svg.action.CombineAction.actionPerformed(java.awt.event.ActionEvent)','553','org.jhotdraw.samples.svg.action.CombineAction','public void actionPerformed(ActionEvent e) {\r\n    if (isCombineAction) {\r\n        combineActionPerformed(e);\r\n    } else {\r\n        splitActionPerformed(e);\r\n    }\r\n}'),(5281,'canGroup()','org.jhotdraw.samples.svg.action.CombineAction.canGroup()','553','org.jhotdraw.samples.svg.action.CombineAction','protected boolean canGroup() {\r\n    boolean canCombine = (getView().getSelectionCount()) > 1;\r\n    if (canCombine) {\r\n        for (Figure f : getView().getSelectedFigures()) {\r\n            if (!(f instanceof SVGPathFigure)) {\r\n                canCombine = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return canCombine;\r\n}'),(5282,'canUngroup()','org.jhotdraw.samples.svg.action.CombineAction.canUngroup()','553','org.jhotdraw.samples.svg.action.CombineAction','protected boolean canUngroup() {\r\n    return (((((getView()) != null) && ((getView().getSelectionCount()) == 1)) && ((prototype) != null)) && (getView().getSelectedFigures().iterator().next().getClass().equals(prototype.getClass()))) && ((((CompositeFigure) (getView().getSelectedFigures().iterator().next())).getChildCount()) > 1);\r\n}'),(5283,'combineActionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.svg.action.CombineAction.combineActionPerformed(java.awt.event.ActionEvent)','553','org.jhotdraw.samples.svg.action.CombineAction','public void combineActionPerformed(ActionEvent e) {\r\n    final DrawingView view = getView();\r\n    Drawing drawing = view.getDrawing();\r\n    if (canGroup()) {\r\n        final List<Figure> ungroupedPaths = drawing.sort(view.getSelectedFigures());\r\n        final int[] ungroupedPathsIndices = new int[ungroupedPaths.size()];\r\n        final int[] ungroupedPathsChildCounts = new int[ungroupedPaths.size()];\r\n        int i = 0;\r\n        for (Figure f : ungroupedPaths) {\r\n            ungroupedPathsIndices[i] = drawing.indexOf(f);\r\n            ungroupedPathsChildCounts[i] = ((CompositeFigure) (f)).getChildCount();\r\n            // System.out.print(\"CombineAction indices[\" + i + \"] = \" + ungroupedPathsIndices[i]);\r\n            // System.out.println(\" childCount[\" + i + \"] = \" + ungroupedPathsChildCounts[i]);\r\n            i++;\r\n        }\r\n        final CompositeFigure group = ((CompositeFigure) (prototype.clone()));\r\n        combinePaths(view, group, ungroupedPaths, ungroupedPathsIndices[0]);\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                return labels.getTextProperty(\"edit.combinePaths\");\r\n            }\r\n\r\n            @Override\r\n            public void redo() throws CannotRedoException {\r\n                super.redo();\r\n                combinePaths(view, group, ungroupedPaths, ungroupedPathsIndices[0]);\r\n            }\r\n\r\n            @Override\r\n            public void undo() throws CannotUndoException {\r\n                super.undo();\r\n                splitPath(view, group, ungroupedPaths, ungroupedPathsIndices, ungroupedPathsChildCounts);\r\n            }\r\n\r\n            @Override\r\n            public boolean addEdit(UndoableEdit anEdit) {\r\n                return super.addEdit(anEdit);\r\n            }\r\n        };\r\n        fireUndoableEditHappened(edit);\r\n    }\r\n}'),(5284,'combinePaths(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection,int)','org.jhotdraw.samples.svg.action.CombineAction.combinePaths(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection,int)','553','org.jhotdraw.samples.svg.action.CombineAction','@SuppressWarnings(\"unchecked\")\r\npublic void combinePaths(DrawingView view, CompositeFigure group, Collection<Figure> figures, int groupIndex) {\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(groupIndex, group);\r\n    group.willChange();\r\n    group.basicRemoveAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : figures) {\r\n        SVGPathFigure path = ((SVGPathFigure) (f));\r\n        List<Figure> children = new LinkedList<Figure>(path.getChildren());\r\n        path.basicRemoveAllChildren();\r\n        for (Figure child : children) {\r\n            SVGBezierFigure bez = ((SVGBezierFigure) (child));\r\n            bez.flattenTransform();\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(5285,'splitActionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.svg.action.CombineAction.splitActionPerformed(java.awt.event.ActionEvent)','553','org.jhotdraw.samples.svg.action.CombineAction','@SuppressWarnings(\"unchecked\")\r\npublic void splitActionPerformed(ActionEvent e) {\r\n    final DrawingView view = getView();\r\n    Drawing drawing = view.getDrawing();\r\n    if (canUngroup()) {\r\n        final CompositeFigure group = ((CompositeFigure) (view.getSelectedFigures().iterator().next()));\r\n        final LinkedList<Figure> ungroupedPaths = new LinkedList<Figure>();\r\n        final int[] ungroupedPathsIndices = new int[group.getChildCount()];\r\n        final int[] ungroupedPathsChildCounts = new int[group.getChildCount()];\r\n        int i = 0;\r\n        int index = drawing.indexOf(group);\r\n        for (Figure f : group.getChildren()) {\r\n            SVGPathFigure path = new SVGPathFigure(true);\r\n            for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n                path.setAttribute(entry.getKey(), entry.getValue());\r\n            }\r\n            ungroupedPaths.add(path);\r\n            ungroupedPathsIndices[i] = index + i;\r\n            ungroupedPathsChildCounts[i] = 1;\r\n            i++;\r\n        }\r\n        splitPath(view, group, ungroupedPaths, ungroupedPathsIndices, ungroupedPathsChildCounts);\r\n        UndoableEdit edit = new AbstractUndoableEdit() {\r\n            @Override\r\n            public String getPresentationName() {\r\n                return labels.getTextProperty(\"edit.splitPath\");\r\n            }\r\n\r\n            @Override\r\n            public void redo() throws CannotRedoException {\r\n                super.redo();\r\n                splitPath(view, group, ungroupedPaths, ungroupedPathsIndices, ungroupedPathsChildCounts);\r\n            }\r\n\r\n            @Override\r\n            public void undo() throws CannotUndoException {\r\n                super.undo();\r\n                combinePaths(view, group, ungroupedPaths, ungroupedPathsIndices[0]);\r\n            }\r\n        };\r\n        fireUndoableEditHappened(edit);\r\n    }\r\n}'),(5286,'splitPath(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.List,int[],int[])','org.jhotdraw.samples.svg.action.CombineAction.splitPath(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.List,int[],int[])','553','org.jhotdraw.samples.svg.action.CombineAction','public void splitPath(DrawingView view, CompositeFigure group, List<Figure> ungroupedPaths, int[] ungroupedPathsIndices, int[] ungroupedPathsChildCounts) {\r\n    view.clearSelection();\r\n    Iterator<Figure> groupedFigures = new LinkedList<Figure>(group.getChildren()).iterator();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().remove(group);\r\n    for (int i = 0; i < (ungroupedPaths.size()); i++) {\r\n        CompositeFigure path = ((CompositeFigure) (ungroupedPaths.get(i)));\r\n        view.getDrawing().add(ungroupedPathsIndices[i], path);\r\n        path.willChange();\r\n        for (int j = 0; j < (ungroupedPathsChildCounts[i]); j++) {\r\n            path.basicAdd(groupedFigures.next());\r\n        }\r\n        path.changed();\r\n    }\r\n    view.addToSelection(ungroupedPaths);\r\n}'),(5287,'updateEnabledState()','org.jhotdraw.samples.svg.action.CombineAction.updateEnabledState()','553','org.jhotdraw.samples.svg.action.CombineAction','@Override\r\nprotected void updateEnabledState() {\r\n    if ((getView()) != null) {\r\n        setEnabled((isCombineAction ? canGroup() : canUngroup()));\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}'),(5288,'-init-(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor)','554','org.jhotdraw.samples.svg.action.SplitAction','/**\r\n * Creates a new instance.\r\n */\r\npublic SplitAction(DrawingEditor editor) {\r\n    super(editor, new SVGPathFigure(), false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(5289,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)','554','org.jhotdraw.samples.svg.action.SplitAction','public SplitAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(5290,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.svg.action.ViewSourceAction.-init-(org.jhotdraw.app.Application)','555','org.jhotdraw.samples.svg.action.ViewSourceAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ViewSourceAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    labels.configureAction(this, ViewSourceAction.ID);\r\n}'),(5291,'-init-()','org.jhotdraw.samples.svg.action.ViewSourceAction.-init-()','555','org.jhotdraw.samples.svg.action.ViewSourceAction','1() {\r\n}'),(5292,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.svg.action.ViewSourceAction.actionPerformed(java.awt.event.ActionEvent)','555','org.jhotdraw.samples.svg.action.ViewSourceAction','public void actionPerformed(ActionEvent e) {\r\n    final SVGView p = ((SVGView) (getActiveView()));\r\n    SVGOutputFormat format = new SVGOutputFormat();\r\n    format.setPrettyPrint(true);\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    try {\r\n        format.write(buf, p.getDrawing());\r\n        String source = buf.toString(\"UTF-8\");\r\n        final JDialog dialog;\r\n        if ((p.getClientProperty(ViewSourceAction.DIALOG_CLIENT_PROPERTY)) == null) {\r\n            dialog = new JDialog(((Frame) (SwingUtilities.getWindowAncestor(p.getComponent()))));\r\n            p.putClientProperty(ViewSourceAction.DIALOG_CLIENT_PROPERTY, dialog);\r\n            dialog.setTitle(p.getTitle());\r\n            dialog.setResizable(true);\r\n            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n            JTextArea ta = new JTextArea(source);\r\n            ta.setWrapStyleWord(true);\r\n            ta.setLineWrap(true);\r\n            JScrollPane sp = new JScrollPane(ta);\r\n            // sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n            dialog.getContentPane().add(sp);\r\n            dialog.setSize(400, 400);\r\n            dialog.setLocationByPlatform(true);\r\n        } else {\r\n            dialog = ((JDialog) (p.getClientProperty(ViewSourceAction.DIALOG_CLIENT_PROPERTY)));\r\n            JTextArea ta = ((JTextArea) (((JScrollPane) (dialog.getContentPane().getComponent(0))).getViewport().getView()));\r\n            ta.setText(source);\r\n        }\r\n        Preferences prefs = Preferences.userNodeForPackage(getClass());\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"viewSource\", dialog);\r\n        dialog.addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosed(WindowEvent evt) {\r\n                getApplication().removeWindow(dialog);\r\n                p.putClientProperty(ViewSourceAction.DIALOG_CLIENT_PROPERTY, null);\r\n            }\r\n        });\r\n        getApplication().addWindow(dialog, getActiveView());\r\n        dialog.setVisible(true);\r\n    } catch (IOException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(5293,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','/**\r\n * Creates a bounds outline handle for resizing a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner) {\r\n    this(owner, false, false);\r\n}'),(5294,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean,boolean)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean,boolean)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, boolean isTransformHandle, boolean isHoverHandle) {\r\n    super(owner);\r\n    if (isTransformHandle) {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;\r\n    } else {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;\r\n    }\r\n}'),(5295,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(5296,'basicGetBounds()','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.basicGetBounds()','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','@Override\r\nprotected Rectangle basicGetBounds() {\r\n    Shape bounds = getOwner().getBounds();\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n    }\r\n    bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n    Rectangle r = bounds.getBounds();\r\n    r.grow(2, 2);\r\n    return r;\r\n}'),(5297,'contains(java.awt.Point)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.contains(java.awt.Point)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(5298,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.draw(java.awt.Graphics2D)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','@Override\r\npublic void draw(Graphics2D g) {\r\n    if ((outline) == null) {\r\n        Shape bounds = getOwner().getPath();\r\n        if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n            bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n        }\r\n        bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n        outline = ConvexHull.getConvexHullPath2D(bounds);\r\n    }\r\n    Stroke stroke1;\r\n    Color strokeColor1;\r\n    Stroke stroke2;\r\n    Color strokeColor2;\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        stroke1 = ((Stroke) (getEditor().getHandleAttribute(stroke1Enabled)));\r\n        strokeColor1 = ((Color) (getEditor().getHandleAttribute(strokeColor1Enabled)));\r\n        stroke2 = ((Stroke) (getEditor().getHandleAttribute(stroke2Enabled)));\r\n        strokeColor2 = ((Color) (getEditor().getHandleAttribute(strokeColor2Enabled)));\r\n    } else {\r\n        stroke1 = ((Stroke) (getEditor().getHandleAttribute(stroke1Disabled)));\r\n        strokeColor1 = ((Color) (getEditor().getHandleAttribute(strokeColor1Disabled)));\r\n        stroke2 = ((Stroke) (getEditor().getHandleAttribute(stroke2Disabled)));\r\n        strokeColor2 = ((Color) (getEditor().getHandleAttribute(strokeColor2Disabled)));\r\n    }\r\n    if ((stroke1 != null) && (strokeColor1 != null)) {\r\n        g.setStroke(stroke1);\r\n        g.setColor(strokeColor1);\r\n        g.draw(outline);\r\n    }\r\n    if ((stroke2 != null) && (strokeColor2 != null)) {\r\n        g.setStroke(stroke2);\r\n        g.setColor(strokeColor2);\r\n        g.draw(outline);\r\n    }\r\n}'),(5299,'getOwner()','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.getOwner()','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','public SVGPathFigure getOwner() {\r\n    return ((SVGPathFigure) (super.getOwner()));\r\n}'),(5300,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.trackEnd(java.awt.Point,java.awt.Point,int)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(5301,'trackStart(java.awt.Point,int)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.trackStart(java.awt.Point,int)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(5302,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.trackStep(java.awt.Point,java.awt.Point,int)','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(5303,'updateBounds()','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.updateBounds()','556','org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle','protected void updateBounds() {\r\n    outline = null;\r\n    super.updateBounds();\r\n}'),(5304,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.figures.LinkHandle.-init-(org.jhotdraw.draw.Figure)','557','org.jhotdraw.samples.svg.figures.LinkHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic LinkHandle(Figure owner) {\r\n    super(owner);\r\n}'),(5305,'basicGetBounds()','org.jhotdraw.samples.svg.figures.LinkHandle.basicGetBounds()','557','org.jhotdraw.samples.svg.figures.LinkHandle','@Override\r\nprotected Rectangle basicGetBounds() {\r\n    Rectangle2D.Double b = getOwner().getBounds();\r\n    Point2D.Double p = new Point2D.Double(((b.x) + (b.width)), ((b.y) + (b.height)));\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        AttributeKeys.TRANSFORM.get(getOwner()).transform(p, p);\r\n    }\r\n    Rectangle r = new Rectangle(view.drawingToView(p));\r\n    int h = getHandlesize();\r\n    r.x -= h * 4;\r\n    r.y -= h;\r\n    r.width = h * 2;\r\n    r.height = h;\r\n    return r;\r\n}'),(5306,'contains(java.awt.Point)','org.jhotdraw.samples.svg.figures.LinkHandle.contains(java.awt.Point)','557','org.jhotdraw.samples.svg.figures.LinkHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(5307,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.LinkHandle.draw(java.awt.Graphics2D)','557','org.jhotdraw.samples.svg.figures.LinkHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (((SVGAttributeKeys.LINK.get(getOwner())) != null) && ((SVGAttributeKeys.LINK.get(getOwner()).trim().length()) > 0)) {\r\n        g.setColor(((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR))));\r\n        Rectangle r = basicGetBounds();\r\n        g.drawLine((((r.x) + ((r.width) / 2)) - 1), r.y, r.x, r.y);\r\n        g.drawLine(r.x, r.y, r.x, (((r.y) + (r.height)) - 1));\r\n        g.drawLine(r.x, (((r.y) + (r.height)) - 1), (((r.x) + ((r.width) / 2)) - 1), (((r.y) + (r.height)) - 1));\r\n        g.drawLine(((r.x) + ((r.width) / 3)), ((r.y) + ((r.height) / 2)), (((r.x) + (r.width)) - 1), ((r.y) + ((r.height) / 2)));\r\n        g.drawLine((((r.x) + (r.width)) - 1), ((r.y) + ((r.height) / 2)), ((int) (((r.x) + ((r.width) * 0.75)) - 1)), ((int) ((r.y) + ((r.height) * 0.25))));\r\n        g.drawLine((((r.x) + (r.width)) - 1), ((r.y) + ((r.height) / 2)), ((int) (((r.x) + ((r.width) * 0.75)) - 1)), ((int) ((r.y) + ((r.height) * 0.75))));\r\n    }\r\n}'),(5308,'getToolTipText(java.awt.Point)','org.jhotdraw.samples.svg.figures.LinkHandle.getToolTipText(java.awt.Point)','557','org.jhotdraw.samples.svg.figures.LinkHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    return (SVGAttributeKeys.LINK.get(getOwner())) != null ? // \r\n    ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\").getString(\"handle.link.toolTipText\") : null;\r\n}'),(5309,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.LinkHandle.trackEnd(java.awt.Point,java.awt.Point,int)','557','org.jhotdraw.samples.svg.figures.LinkHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(5310,'trackStart(java.awt.Point,int)','org.jhotdraw.samples.svg.figures.LinkHandle.trackStart(java.awt.Point,int)','557','org.jhotdraw.samples.svg.figures.LinkHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(5311,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.LinkHandle.trackStep(java.awt.Point,java.awt.Point,int)','557','org.jhotdraw.samples.svg.figures.LinkHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(5312,'-init-()','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.-init-()','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGAttributedFigure() {\r\n}'),(5313,'-init-(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.-init-(java.lang.String)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','1( $anonymous0) {\r\n}'),(5314,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.draw(java.awt.Graphics2D)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','public void draw(Graphics2D g) {\r\n    double opacity = SVGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        if (opacity != 1.0) {\r\n            Rectangle2D.Double drawingArea = getDrawingArea();\r\n            Rectangle2D clipBounds = g.getClipBounds();\r\n            if (clipBounds != null) {\r\n                Rectangle2D.intersect(drawingArea, clipBounds, drawingArea);\r\n            }\r\n            if (!(drawingArea.isEmpty())) {\r\n                BufferedImage buf = new BufferedImage(Math.max(1, ((int) ((2 + (drawingArea.width)) * (g.getTransform().getScaleX())))), Math.max(1, ((int) ((2 + (drawingArea.height)) * (g.getTransform().getScaleY())))), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D gr = buf.createGraphics();\r\n                gr.scale(g.getTransform().getScaleX(), g.getTransform().getScaleY());\r\n                gr.translate(((int) (-(drawingArea.x))), ((int) (-(drawingArea.y))));\r\n                gr.setRenderingHints(g.getRenderingHints());\r\n                drawFigure(gr);\r\n                gr.dispose();\r\n                Composite savedComposite = g.getComposite();\r\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n                g.drawImage(buf, ((int) (drawingArea.x)), ((int) (drawingArea.y)), (2 + ((int) (drawingArea.width))), (2 + ((int) (drawingArea.height))), null);\r\n                g.setComposite(savedComposite);\r\n            }\r\n        } else {\r\n            drawFigure(g);\r\n        }\r\n    }\r\n}'),(5315,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.drawFigure(java.awt.Graphics2D)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','/**\r\n * This method is invoked before the rendered image of the figure is\r\n * composited.\r\n */\r\npublic void drawFigure(Graphics2D g) {\r\n    AffineTransform savedTransform = null;\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        savedTransform = g.getTransform();\r\n        g.transform(AttributeKeys.TRANSFORM.get(this));\r\n    }\r\n    Paint paint = SVGAttributeKeys.getFillPaint(this);\r\n    if (paint != null) {\r\n        g.setPaint(paint);\r\n        drawFill(g);\r\n    }\r\n    paint = SVGAttributeKeys.getStrokePaint(this);\r\n    if ((paint != null) && ((AttributeKeys.STROKE_WIDTH.get(this)) > 0)) {\r\n        g.setPaint(paint);\r\n        g.setStroke(SVGAttributeKeys.getStroke(this));\r\n        drawStroke(g);\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        g.setTransform(savedTransform);\r\n    }\r\n}'),(5316,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.getActions(java.awt.geom.Point2D$Double)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','@Override\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    LinkedList<Action> actions = new LinkedList<Action>();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n        actions.add(new AbstractAction(labels.getString(\"edit.removeTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                SVGAttributedFigure.this.willChange();\r\n                fireUndoableEditHappened(AttributeKeys.TRANSFORM.setUndoable(SVGAttributedFigure.this, null));\r\n                SVGAttributedFigure.this.changed();\r\n            }\r\n        });\r\n    }\r\n    return actions;\r\n}'),(5317,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.read(org.jhotdraw.xml.DOMInput)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}'),(5318,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.TRANSFORM)) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(5319,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.svg.figures.SVGAttributedFigure.write(org.jhotdraw.xml.DOMOutput)','558','org.jhotdraw.samples.svg.figures.SVGAttributedFigure','@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}'),(5320,'-init-()','org.jhotdraw.samples.svg.figures.SVGBezierFigure.-init-()','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGBezierFigure() {\r\n    this(false);\r\n}'),(5321,'-init-(boolean)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.-init-(boolean)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','public SVGBezierFigure(boolean isClosed) {\r\n    super(isClosed);\r\n    AttributeKeys.FILL_OPEN_PATH.basicSet(this, true);\r\n}'),(5322,'createHandles(org.jhotdraw.samples.svg.figures.SVGPathFigure,int)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.createHandles(org.jhotdraw.samples.svg.figures.SVGPathFigure,int)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','public Collection<Handle> createHandles(SVGPathFigure pathFigure, int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i, pathFigure));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5323,'findSegment(java.awt.geom.Point2D$Double,double)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.findSegment(java.awt.geom.Point2D$Double,double)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','/**\r\n * Gets the segment of the polyline that is hit by\r\n * the given Point2D.Double.\r\n *\r\n * @return the index of the segment or -1 if no segment was hit.\r\n */\r\n@Override\r\npublic int findSegment(Point2D.Double find, double tolerance) {\r\n    // Apply inverse of transform to point\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            find = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(find, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            System.err.println(\"Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.\");\r\n        }\r\n    }\r\n    return getBezierPath().findSegment(find, tolerance);\r\n}'),(5324,'flattenTransform()','org.jhotdraw.samples.svg.figures.SVGBezierFigure.flattenTransform()','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','/**\r\n * Transforms all coords of the figure by the current TRANSFORM attribute\r\n * and then sets the TRANSFORM attribute to null.\r\n */\r\npublic void flattenTransform() {\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        path.transform(AttributeKeys.TRANSFORM.get(this));\r\n        AttributeKeys.TRANSFORM.basicSet(this, null);\r\n    }\r\n    invalidate();\r\n}'),(5325,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGBezierFigure.getDrawingArea()','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','public Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            cachedDrawingArea = path.getBounds2D();\r\n        } else {\r\n            BezierPath p2 = ((BezierPath) (path.clone()));\r\n            p2.transform(AttributeKeys.TRANSFORM.get(this));\r\n            cachedDrawingArea = p2.getBounds2D();\r\n        }\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n            width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n        } else\r\n            if ((AttributeKeys.STROKE_CAP.get(this)) != (BasicStroke.CAP_BUTT)) {\r\n                width += strokeTotalWidth * 2;\r\n            }\r\n\r\n        Geom.grow(cachedDrawingArea, width, width);\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(5326,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    /* && view.getHandleDetailLevel() == 0 */\r\n    if ((evt.getClickCount()) == 2) {\r\n        willChange();\r\n        // Apply inverse of transform to point\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            try {\r\n                p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n            } catch (NoninvertibleTransformException ex) {\r\n                System.err.println(\"Warning: SVGBezierFigure.handleMouseClick. Figure has noninvertible Transform.\");\r\n            }\r\n        }\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.splitSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(5327,'invalidate()','org.jhotdraw.samples.svg.figures.SVGBezierFigure.invalidate()','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','public void invalidate() {\r\n    super.invalidate();\r\n    cachedDrawingArea = null;\r\n}'),(5328,'joinSegments(java.awt.geom.Point2D$Double,double)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.joinSegments(java.awt.geom.Point2D$Double,double)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','/**\r\n * Joins two segments into one if the given Point2D.Double hits a node\r\n * of the polyline.\r\n *\r\n * @return true if the two segments were joined.\r\n * @param join\r\n * 		a Point at a node on the bezier path\r\n * @param tolerance\r\n * 		a tolerance, tolerance should take into account\r\n * 		the line width, plus 2 divided by the zoom factor.\r\n */\r\n@Override\r\npublic boolean joinSegments(Point2D.Double join, double tolerance) {\r\n    // Apply inverse of transform to point\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            join = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(join, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            System.err.println(\"Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.\");\r\n        }\r\n    }\r\n    int i = getBezierPath().findSegment(join, tolerance);\r\n    if ((i != (-1)) && (i > 1)) {\r\n        removeNode(i);\r\n        return true;\r\n    }\r\n    return false;\r\n}'),(5329,'splitSegment(java.awt.geom.Point2D$Double,double)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.splitSegment(java.awt.geom.Point2D$Double,double)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','/**\r\n * Splits the segment at the given Point2D.Double if a segment was hit.\r\n *\r\n * @return the index of the segment or -1 if no segment was hit.\r\n * @param split\r\n * 		a Point on (or near) a segment of the bezier path\r\n * @param tolerance\r\n * 		a tolerance, tolerance should take into account\r\n * 		the line width, plus 2 divided by the zoom factor.\r\n */\r\n@Override\r\npublic int splitSegment(Point2D.Double split, double tolerance) {\r\n    // Apply inverse of transform to point\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            split = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(split, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            System.err.println(\"Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.\");\r\n        }\r\n    }\r\n    int i = getBezierPath().findSegment(split, tolerance);\r\n    if (i != (-1)) {\r\n        addNode((i + 1), new BezierPath.Node(split));\r\n    }\r\n    return i + 1;\r\n}'),(5330,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGBezierFigure.transform(java.awt.geom.AffineTransform)','559','org.jhotdraw.samples.svg.figures.SVGBezierFigure','public void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSetClone(this, tx);\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        super.transform(tx);\r\n    }\r\n}'),(5331,'-init-()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.-init-()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGEllipseFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(5332,'-init-(double,double,double,double)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.-init-(double,double,double,double)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public SVGEllipseFigure(double x, double y, double width, double height) {\r\n    ellipse = new Ellipse2D.Double(x, y, width, height);\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5333,'canConnect()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.canConnect()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// SVG does not support connecting\r\n\r\n}'),(5334,'clone()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.clone()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic SVGEllipseFigure clone() {\r\n    SVGEllipseFigure that = ((SVGEllipseFigure) (super.clone()));\r\n    that.ellipse = ((Ellipse2D.Double) (this.ellipse.clone()));\r\n    that.cachedTransformedShape = null;\r\n    return that;\r\n}'),(5335,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.contains(java.awt.geom.Point2D$Double)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    return getHitShape().contains(p);\r\n}'),(5336,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.createHandles(int)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','// ATTRIBUTES\r\n// EDITING\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5337,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.drawFill(java.awt.Graphics2D)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    if (((ellipse.width) > 0) && ((ellipse.height) > 0)) {\r\n        g.fill(ellipse);\r\n    }\r\n}'),(5338,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.drawStroke(java.awt.Graphics2D)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','protected void drawStroke(Graphics2D g) {\r\n    if (((ellipse.width) > 0) && ((ellipse.height) > 0)) {\r\n        g.draw(ellipse);\r\n    }\r\n}'),(5339,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5340,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5341,'getBounds()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getBounds()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (ellipse.getBounds2D()));\r\n}'),(5342,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getDrawingArea()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D rx = getTransformedShape().getBounds2D();\r\n    Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n    if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n        double g = ((SVGAttributeKeys.getPerpendicularHitGrowth(this)) * 2.0) + 1;\r\n        Geom.grow(r, g, g);\r\n    } else {\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        width *= (Math.max(AttributeKeys.TRANSFORM.get(this).getScaleX(), AttributeKeys.TRANSFORM.get(this).getScaleY())) + 1;\r\n        Geom.grow(r, width, width);\r\n    }\r\n    return r;\r\n}'),(5343,'getHeight()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getHeight()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public double getHeight() {\r\n    return ellipse.getHeight();\r\n}'),(5344,'getHitShape()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getHitShape()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','private Shape getHitShape() {\r\n    if ((cachedHitShape) == null) {\r\n        if (((AttributeKeys.FILL_COLOR.get(this)) != null) || ((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null)) {\r\n            cachedHitShape = new GrowStroke((((float) (SVGAttributeKeys.getStrokeTotalWidth(this))) / 2.0F), ((float) (SVGAttributeKeys.getStrokeTotalMiterLimit(this)))).createStrokedShape(getTransformedShape());\r\n        } else {\r\n            cachedHitShape = SVGAttributeKeys.getHitStroke(this).createStrokedShape(getTransformedShape());\r\n        }\r\n    }\r\n    return cachedHitShape;\r\n}'),(5345,'getTransformRestoreData()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getTransformRestoreData()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public Object getTransformRestoreData() {\r\n    return new Object[]{ ellipse.clone(), AttributeKeys.TRANSFORM.getClone(this), SVGAttributeKeys.FILL_GRADIENT.getClone(this), SVGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(5346,'getTransformedShape()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getTransformedShape()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','private Shape getTransformedShape() {\r\n    if ((cachedTransformedShape) == null) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            cachedTransformedShape = ellipse;\r\n        } else {\r\n            cachedTransformedShape = AttributeKeys.TRANSFORM.get(this).createTransformedShape(ellipse);\r\n        }\r\n    }\r\n    return cachedTransformedShape;\r\n}'),(5347,'getWidth()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getWidth()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public double getWidth() {\r\n    return ellipse.getWidth();\r\n}'),(5348,'getX()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getX()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','// SHAPE AND BOUNDS\r\npublic double getX() {\r\n    return ellipse.x;\r\n}'),(5349,'getY()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.getY()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public double getY() {\r\n    return ellipse.y;\r\n}'),(5350,'invalidate()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.invalidate()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    cachedTransformedShape = null;\r\n    cachedHitShape = null;\r\n}'),(5351,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.isEmpty()','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','// EVENT HANDLING\r\npublic boolean isEmpty() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return ((b.width) <= 0) || ((b.height) <= 0);\r\n}'),(5352,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.restoreTransformTo(java.lang.Object)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','public void restoreTransformTo(Object geometry) {\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    ellipse = ((Ellipse2D.Double) (((Ellipse2D.Double) (restoreData[0])).clone()));\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    SVGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    SVGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n    invalidate();\r\n}'),(5353,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','@Override\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    ellipse.x = Math.min(anchor.x, lead.x);\r\n    ellipse.y = Math.min(anchor.y, lead.y);\r\n    ellipse.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    ellipse.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n    invalidate();\r\n}'),(5354,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGEllipseFigure.transform(java.awt.geom.AffineTransform)','560','org.jhotdraw.samples.svg.figures.SVGEllipseFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		the transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSetClone(this, tx);\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        Point2D.Double anchor = getStartPoint();\r\n        Point2D.Double lead = getEndPoint();\r\n        setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n        if (((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((SVGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n    invalidate();\r\n}'),(5355,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGFigure.isEmpty()','561','org.jhotdraw.samples.svg.figures.SVGFigure','/**\r\n * Returns true, if this figure is empty for one of the following\r\n * reasons:\r\n * <ul>\r\n * <li>A group has no children</li>\r\n * <li>A path has less than two points</li>\r\n * <li>An ellipse or a rectangle has a width or a height of 0</li>\r\n * <li>A text has no characters</li>\r\n * </ul>\r\n */\r\npublic boolean isEmpty();'),(5356,'-init-()','org.jhotdraw.samples.svg.figures.SVGGroupFigure.-init-()','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGGroupFigure() {\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5357,'clone()','org.jhotdraw.samples.svg.figures.SVGGroupFigure.clone()','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','public SVGGroupFigure clone() {\r\n    SVGGroupFigure that = ((SVGGroupFigure) (super.clone()));\r\n    that.attributes = new HashMap<AttributeKey, Object>(this.attributes);\r\n    return that;\r\n}'),(5358,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.createHandles(int)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic LinkedList<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            TransformHandleKit.addGroupHoverHandles(this, handles);\r\n            break;\r\n        case 0 :\r\n            TransformHandleKit.addGroupTransformHandles(this, handles);\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5359,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.draw(java.awt.Graphics2D)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic void draw(Graphics2D g) {\r\n    double opacity = SVGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        if (opacity != 1.0) {\r\n            Rectangle2D.Double drawingArea = getDrawingArea();\r\n            Rectangle2D clipBounds = g.getClipBounds();\r\n            if (clipBounds != null) {\r\n                Rectangle2D.intersect(drawingArea, clipBounds, drawingArea);\r\n            }\r\n            if (!(drawingArea.isEmpty())) {\r\n                BufferedImage buf = new BufferedImage(Math.max(1, ((int) ((2 + (drawingArea.width)) * (g.getTransform().getScaleX())))), Math.max(1, ((int) ((2 + (drawingArea.height)) * (g.getTransform().getScaleY())))), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D gr = buf.createGraphics();\r\n                gr.scale(g.getTransform().getScaleX(), g.getTransform().getScaleY());\r\n                gr.translate(((int) (-(drawingArea.x))), ((int) (-(drawingArea.y))));\r\n                gr.setRenderingHints(g.getRenderingHints());\r\n                super.draw(gr);\r\n                gr.dispose();\r\n                Composite savedComposite = g.getComposite();\r\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n                g.drawImage(buf, ((int) (drawingArea.x)), ((int) (drawingArea.y)), (2 + ((int) (drawingArea.width))), (2 + ((int) (drawingArea.height))), null);\r\n                g.setComposite(savedComposite);\r\n            }\r\n        } else {\r\n            super.draw(g);\r\n        }\r\n    }\r\n}'),(5360,'getAttribute(org.jhotdraw.draw.AttributeKey)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.getAttribute(org.jhotdraw.draw.AttributeKey)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return key.get(attributes);\r\n}'),(5361,'getAttributes()','org.jhotdraw.samples.svg.figures.SVGGroupFigure.getAttributes()','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic Map<AttributeKey, Object> getAttributes() {\r\n    return new HashMap<AttributeKey, Object>(attributes);\r\n}'),(5362,'getBounds()','org.jhotdraw.samples.svg.figures.SVGGroupFigure.getBounds()','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','public Rectangle2D.Double getBounds() {\r\n    if ((cachedBounds) == null) {\r\n        if ((getChildCount()) == 0) {\r\n            cachedBounds = new Rectangle2D.Double();\r\n        } else {\r\n            for (Figure f : children) {\r\n                Rectangle2D.Double bounds = f.getBounds();\r\n                if ((AttributeKeys.TRANSFORM.get(f)) != null) {\r\n                    bounds.setRect(AttributeKeys.TRANSFORM.get(f).createTransformedShape(bounds).getBounds2D());\r\n                }\r\n                if (((cachedBounds) == null) || (cachedBounds.isEmpty())) {\r\n                    cachedBounds = bounds;\r\n                } else {\r\n                    cachedBounds.add(bounds);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedBounds.clone()));\r\n}'),(5363,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGGroupFigure.isEmpty()','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','public boolean isEmpty() {\r\n    return (getChildCount()) == 0;\r\n}'),(5364,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.read(org.jhotdraw.xml.DOMInput)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}'),(5365,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    if (key == (SVGAttributeKeys.OPACITY)) {\r\n        attributes.put(key, value);\r\n    } else\r\n        if ((key == (SVGAttributeKeys.LINK)) || (key == (SVGAttributeKeys.LINK_TARGET))) {\r\n            attributes.put(key, value);\r\n        } else {\r\n            super.setAttribute(key, value);\r\n        }\r\n\r\n    invalidate();\r\n}'),(5366,'setAttributes(java.util.Map)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.setAttributes(java.util.Map)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@SuppressWarnings(\"unchecked\")\r\npublic void setAttributes(Map<AttributeKey, Object> map) {\r\n    for (Map.Entry<AttributeKey, Object> entry : map.entrySet()) {\r\n        setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n}'),(5367,'toString()','org.jhotdraw.samples.svg.figures.SVGGroupFigure.toString()','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','public String toString() {\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(getClass().getName().substring(((getClass().getName().lastIndexOf(.)) + 1)));\r\n    buf.append(@);\r\n    buf.append(hashCode());\r\n    if ((getChildCount()) > 0) {\r\n        buf.append(();\r\n        for (Iterator<Figure> i = getChildren().iterator(); i.hasNext();) {\r\n            Figure child = i.next();\r\n            buf.append(child);\r\n            if (i.hasNext()) {\r\n                buf.append(,);\r\n            }\r\n        }\r\n        buf.append());\r\n    }\r\n    return buf.toString();\r\n}'),(5368,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.svg.figures.SVGGroupFigure.write(org.jhotdraw.xml.DOMOutput)','562','org.jhotdraw.samples.svg.figures.SVGGroupFigure','@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}'),(5369,'-init-()','org.jhotdraw.samples.svg.figures.SVGImageFigure.-init-()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGImageFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(5370,'-init-(double,double,double,double)','org.jhotdraw.samples.svg.figures.SVGImageFigure.-init-(double,double,double,double)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public SVGImageFigure(double x, double y, double width, double height) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5371,'-init-(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGImageFigure.-init-(java.lang.String)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','1( $anonymous0) {\r\n}'),(5372,'canConnect()','org.jhotdraw.samples.svg.figures.SVGImageFigure.canConnect()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','// CONNECTING\r\n@Override\r\npublic boolean canConnect() {\r\n    return false;// SVG does not support connecting\r\n\r\n}'),(5373,'clone()','org.jhotdraw.samples.svg.figures.SVGImageFigure.clone()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','// COMPOSITE FIGURES\r\n// CLONING\r\n@Override\r\npublic SVGImageFigure clone() {\r\n    SVGImageFigure that = ((SVGImageFigure) (super.clone()));\r\n    that.rectangle = ((Rectangle2D.Double) (this.rectangle.clone()));\r\n    that.cachedTransformedShape = null;\r\n    that.cachedHitShape = null;\r\n    return that;\r\n}'),(5374,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGImageFigure.contains(java.awt.geom.Point2D$Double)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    return getHitShape().contains(p);\r\n}'),(5375,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGImageFigure.createHandles(int)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','// EDITING\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5376,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGImageFigure.draw(java.awt.Graphics2D)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','// DRAWING\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    // super.draw(g);\r\n    double opacity = SVGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        Composite savedComposite = g.getComposite();\r\n        if (opacity != 1.0) {\r\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n        }\r\n        BufferedImage image = getBufferedImage();\r\n        if (image != null) {\r\n            if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n                // FIXME - We should cache the transformed image.\r\n                // Drawing a transformed image appears to be very slow.\r\n                Graphics2D gx = ((Graphics2D) (g.create()));\r\n                // Use same rendering hints like parent graphics\r\n                gx.setRenderingHints(g.getRenderingHints());\r\n                gx.transform(AttributeKeys.TRANSFORM.get(this));\r\n                gx.drawImage(image, ((int) (rectangle.x)), ((int) (rectangle.y)), ((int) (rectangle.width)), ((int) (rectangle.height)), null);\r\n                gx.dispose();\r\n            } else {\r\n                g.drawImage(image, ((int) (rectangle.x)), ((int) (rectangle.y)), ((int) (rectangle.width)), ((int) (rectangle.height)), null);\r\n            }\r\n        } else {\r\n            Shape shape = getTransformedShape();\r\n            g.setColor(Color.red);\r\n            g.setStroke(new BasicStroke());\r\n            g.draw(shape);\r\n        }\r\n        if (opacity != 1.0) {\r\n            g.setComposite(savedComposite);\r\n        }\r\n    }\r\n}'),(5377,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGImageFigure.drawFill(java.awt.Graphics2D)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','protected void drawFill(Graphics2D g) {\r\n}'),(5378,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGImageFigure.drawStroke(java.awt.Graphics2D)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','protected void drawStroke(Graphics2D g) {\r\n}'),(5379,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.svg.figures.SVGImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5380,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.svg.figures.SVGImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5381,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGImageFigure.getActions(java.awt.geom.Point2D$Double)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','@Override\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    LinkedList<Action> actions = new LinkedList<Action>();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        actions.add(new AbstractAction(labels.getString(\"edit.removeTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                willChange();\r\n                fireUndoableEditHappened(AttributeKeys.TRANSFORM.setUndoable(SVGImageFigure.this, null));\r\n                changed();\r\n            }\r\n        });\r\n    }\r\n    return actions;\r\n}'),(5382,'getBounds()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getBounds()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (rectangle.clone()));\r\n}'),(5383,'getBufferedImage()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getBufferedImage()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Gets the buffered image. If necessary, this method creates the buffered\r\n * image from the image data.\r\n */\r\npublic BufferedImage getBufferedImage() {\r\n    if (((bufferedImage) == null) && ((imageData) != null)) {\r\n        // System.out.println(\"recreateing bufferedImage\");\r\n        try {\r\n            bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));\r\n        } catch (Throwable e) {\r\n            e.printStackTrace();\r\n            // If we cant create a buffered image from the image data,\r\n            // there is no use to keep the image data and try again, so\r\n            // we drop the image data.\r\n            imageData = null;\r\n        }\r\n    }\r\n    return bufferedImage;\r\n}'),(5384,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getDrawingArea()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D rx = getTransformedShape().getBounds2D();\r\n    Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n    return r;\r\n}'),(5385,'getHeight()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getHeight()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public double getHeight() {\r\n    return rectangle.height;\r\n}'),(5386,'getHitShape()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getHitShape()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','private Shape getHitShape() {\r\n    if ((cachedHitShape) == null) {\r\n        cachedHitShape = new GrowStroke((((float) (SVGAttributeKeys.getStrokeTotalWidth(this))) / 2.0F), ((float) (SVGAttributeKeys.getStrokeTotalMiterLimit(this)))).createStrokedShape(getTransformedShape());\r\n    }\r\n    return cachedHitShape;\r\n}'),(5387,'getImageData()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getImageData()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Gets the image data. If necessary, this method creates the image\r\n * data from the buffered image.\r\n */\r\npublic byte[] getImageData() {\r\n    if (((bufferedImage) != null) && ((imageData) == null)) {\r\n        try {\r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            ImageIO.write(bufferedImage, \"PNG\", bout);\r\n            bout.close();\r\n            imageData = bout.toByteArray();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            // If we cant create image data from the buffered image,\r\n            // there is no use to keep the buffered image and try again, so\r\n            // we drop the buffered image.\r\n            bufferedImage = null;\r\n        }\r\n    }\r\n    return imageData;\r\n}'),(5388,'getTransformRestoreData()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getTransformRestoreData()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public Object getTransformRestoreData() {\r\n    return new Object[]{ rectangle.clone(), AttributeKeys.TRANSFORM.get(this) };\r\n}'),(5389,'getTransformedShape()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getTransformedShape()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','private Shape getTransformedShape() {\r\n    if ((cachedTransformedShape) == null) {\r\n        cachedTransformedShape = ((Shape) (rectangle.clone()));\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            cachedTransformedShape = AttributeKeys.TRANSFORM.get(this).createTransformedShape(cachedTransformedShape);\r\n        }\r\n    }\r\n    return cachedTransformedShape;\r\n}'),(5390,'getWidth()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getWidth()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public double getWidth() {\r\n    return rectangle.width;\r\n}'),(5391,'getX()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getX()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','// SHAPE AND BOUNDS\r\npublic double getX() {\r\n    return rectangle.x;\r\n}'),(5392,'getY()','org.jhotdraw.samples.svg.figures.SVGImageFigure.getY()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public double getY() {\r\n    return rectangle.y;\r\n}'),(5393,'invalidate()','org.jhotdraw.samples.svg.figures.SVGImageFigure.invalidate()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    invalidateTransformedShape();\r\n}'),(5394,'invalidateTransformedShape()','org.jhotdraw.samples.svg.figures.SVGImageFigure.invalidateTransformedShape()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','private void invalidateTransformedShape() {\r\n    cachedTransformedShape = null;\r\n    cachedHitShape = null;\r\n}'),(5395,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGImageFigure.isEmpty()','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public boolean isEmpty() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return (((b.width) <= 0) || ((b.height) <= 0)) || (((imageData) == null) && ((bufferedImage) == null));\r\n}'),(5396,'loadImage(java.io.File)','org.jhotdraw.samples.svg.figures.SVGImageFigure.loadImage(java.io.File)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public void loadImage(File file) throws IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = new FileInputStream(file);\r\n        loadImage(in);\r\n    } catch (Throwable t) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        IOException e = new IOException(labels.getFormatted(\"file.failedToLoadImage.message\", file.getName()));\r\n        e.initCause(t);\r\n        throw e;\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(5397,'loadImage(java.io.InputStream)','org.jhotdraw.samples.svg.figures.SVGImageFigure.loadImage(java.io.InputStream)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public void loadImage(InputStream in) throws IOException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    byte[] buf = new byte[512];\r\n    int bytesRead;\r\n    while ((bytesRead = in.read(buf)) > 0) {\r\n        baos.write(buf, 0, bytesRead);\r\n    } \r\n    BufferedImage img;\r\n    try {\r\n        img = ImageIO.read(new ByteArrayInputStream(baos.toByteArray()));\r\n    } catch (Throwable t) {\r\n        img = null;\r\n    }\r\n    if (img == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        throw new IOException(labels.getFormatted(\"file.failedToLoadImage.message\", in.toString()));\r\n    }\r\n    imageData = baos.toByteArray();\r\n    bufferedImage = img;\r\n}'),(5398,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGImageFigure.restoreTransformTo(java.lang.Object)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','// ATTRIBUTES\r\npublic void restoreTransformTo(Object geometry) {\r\n    invalidateTransformedShape();\r\n    Object[] o = ((Object[]) (geometry));\r\n    rectangle = ((Rectangle2D.Double) (((Rectangle2D.Double) (o[0])).clone()));\r\n    if ((o[1]) == null) {\r\n        AttributeKeys.TRANSFORM.basicSet(this, null);\r\n    } else {\r\n        AttributeKeys.TRANSFORM.basicSet(this, ((AffineTransform) (((AffineTransform) (o[1])).clone())));\r\n    }\r\n}'),(5399,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGImageFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    invalidateTransformedShape();\r\n    rectangle.x = Math.min(anchor.x, lead.x);\r\n    rectangle.y = Math.min(anchor.y, lead.y);\r\n    rectangle.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    rectangle.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n}'),(5400,'setBufferedImage(java.awt.image.BufferedImage)','org.jhotdraw.samples.svg.figures.SVGImageFigure.setBufferedImage(java.awt.image.BufferedImage)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Sets the buffered image.\r\n * This clears the image data.\r\n */\r\npublic void setBufferedImage(BufferedImage image) {\r\n    willChange();\r\n    this.imageData = null;\r\n    this.bufferedImage = image;\r\n    changed();\r\n}'),(5401,'setImage(byte[],java.awt.image.BufferedImage)','org.jhotdraw.samples.svg.figures.SVGImageFigure.setImage(byte[],java.awt.image.BufferedImage)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Sets the image.\r\n *\r\n * @param imageData\r\n * 		The image data. If this is null, a buffered image must\r\n * 		be provided.\r\n * @param bufferedImage\r\n * 		An image constructed from the imageData. If this\r\n * 		is null, imageData must be provided.\r\n */\r\npublic void setImage(byte[] imageData, BufferedImage bufferedImage) {\r\n    willChange();\r\n    this.imageData = imageData;\r\n    this.bufferedImage = bufferedImage;\r\n    changed();\r\n}'),(5402,'setImageData(byte[])','org.jhotdraw.samples.svg.figures.SVGImageFigure.setImageData(byte[])','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Sets the image data.\r\n * This clears the buffered image.\r\n */\r\npublic void setImageData(byte[] imageData) {\r\n    willChange();\r\n    this.imageData = imageData;\r\n    this.bufferedImage = null;\r\n    changed();\r\n}'),(5403,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGImageFigure.transform(java.awt.geom.AffineTransform)','563','org.jhotdraw.samples.svg.figures.SVGImageFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		The transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    invalidateTransformedShape();\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & ((AffineTransform.TYPE_TRANSLATION) | (AffineTransform.TYPE_MASK_SCALE))) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSet(this, ((AffineTransform) (tx.clone())));\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        Point2D.Double anchor = getStartPoint();\r\n        Point2D.Double lead = getEndPoint();\r\n        setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n    }\r\n}'),(5404,'-init-()','org.jhotdraw.samples.svg.figures.SVGPathFigure.-init-()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathFigure() {\r\n    add(new SVGBezierFigure());\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5405,'-init-(boolean)','org.jhotdraw.samples.svg.figures.SVGPathFigure.-init-(boolean)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public SVGPathFigure(boolean isEmpty) {\r\n    if (!isEmpty) {\r\n        add(new SVGBezierFigure());\r\n    }\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5406,'-init-(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGPathFigure.-init-(java.lang.String)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','1( $anonymous0) {\r\n}'),(5407,'add(int,org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.figures.SVGPathFigure.add(int,org.jhotdraw.draw.Figure)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic void add(final int index, final Figure figure) {\r\n    super.add(index, ((SVGBezierFigure) (figure)));\r\n}'),(5408,'canConnect()','org.jhotdraw.samples.svg.figures.SVGPathFigure.canConnect()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// SVG does not support connecting\r\n\r\n}'),(5409,'clone()','org.jhotdraw.samples.svg.figures.SVGPathFigure.clone()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public SVGPathFigure clone() {\r\n    SVGPathFigure that = ((SVGPathFigure) (super.clone()));\r\n    return that;\r\n}'),(5410,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGPathFigure.contains(java.awt.geom.Point2D$Double)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public boolean contains(Point2D.Double p) {\r\n    getPath();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    boolean isClosed = AttributeKeys.CLOSED.get(getChild(0));\r\n    if ((isClosed && ((AttributeKeys.FILL_COLOR.get(this)) == null)) && ((SVGAttributeKeys.FILL_GRADIENT.get(this)) == null)) {\r\n        return getHitShape().contains(p);\r\n    }\r\n    /* return cachedPath.contains(p2); */\r\n    double tolerance = Math.max(2.0F, ((AttributeKeys.getStrokeTotalWidth(this)) / 2.0));\r\n    if ((isClosed || ((AttributeKeys.FILL_COLOR.get(this)) != null)) || ((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null)) {\r\n        if (getPath().contains(p)) {\r\n            return true;\r\n        }\r\n        /**\r\n         * 2d\r\n         */\r\n        double grow = AttributeKeys.getPerpendicularHitGrowth(this);\r\n        GrowStroke gs = new GrowStroke(((float) (grow)), ((float) ((AttributeKeys.getStrokeTotalWidth(this)) * (AttributeKeys.STROKE_MITER_LIMIT.get(this)))));\r\n        if (gs.createStrokedShape(getPath()).contains(p)) {\r\n            return true;\r\n        } else {\r\n            if (isClosed) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (!isClosed) {\r\n        if (Shapes.outlineContains(getPath(), p, tolerance)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(5411,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGPathFigure.createHandles(int)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new SVGPathOutlineHandle(this, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new SVGPathOutlineHandle(this));\r\n            for (Figure child : getChildren()) {\r\n                handles.addAll(((SVGBezierFigure) (child)).createHandles(this, detailLevel));\r\n            }\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5412,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGPathFigure.draw(java.awt.Graphics2D)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void draw(Graphics2D g) {\r\n    double opacity = SVGAttributeKeys.OPACITY.get(this);\r\n    opacity = Math.min(Math.max(0.0, opacity), 1.0);\r\n    if (opacity != 0.0) {\r\n        if (opacity != 1.0) {\r\n            Rectangle2D.Double drawingArea = getDrawingArea();\r\n            Rectangle2D clipBounds = g.getClipBounds();\r\n            if (clipBounds != null) {\r\n                Rectangle2D.intersect(drawingArea, clipBounds, drawingArea);\r\n            }\r\n            if (!(drawingArea.isEmpty())) {\r\n                BufferedImage buf = new BufferedImage(Math.max(1, ((int) ((2 + (drawingArea.width)) * (g.getTransform().getScaleX())))), Math.max(1, ((int) ((2 + (drawingArea.height)) * (g.getTransform().getScaleY())))), BufferedImage.TYPE_INT_ARGB);\r\n                Graphics2D gr = buf.createGraphics();\r\n                gr.scale(g.getTransform().getScaleX(), g.getTransform().getScaleY());\r\n                gr.translate(((int) (-(drawingArea.x))), ((int) (-(drawingArea.y))));\r\n                gr.setRenderingHints(g.getRenderingHints());\r\n                drawFigure(gr);\r\n                gr.dispose();\r\n                Composite savedComposite = g.getComposite();\r\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ((float) (opacity))));\r\n                g.drawImage(buf, ((int) (drawingArea.x)), ((int) (drawingArea.y)), (2 + ((int) (drawingArea.width))), (2 + ((int) (drawingArea.height))), null);\r\n                g.setComposite(savedComposite);\r\n            }\r\n        } else {\r\n            drawFigure(g);\r\n        }\r\n    }\r\n}'),(5413,'drawChildren(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGPathFigure.drawChildren(java.awt.Graphics2D)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','protected void drawChildren(Graphics2D g) {\r\n    // empty\r\n}'),(5414,'drawFigure(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGPathFigure.drawFigure(java.awt.Graphics2D)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void drawFigure(Graphics2D g) {\r\n    AffineTransform savedTransform = null;\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        savedTransform = g.getTransform();\r\n        g.transform(AttributeKeys.TRANSFORM.get(this));\r\n    }\r\n    Paint paint = SVGAttributeKeys.getFillPaint(this);\r\n    if (paint != null) {\r\n        g.setPaint(paint);\r\n        drawFill(g);\r\n    }\r\n    paint = SVGAttributeKeys.getStrokePaint(this);\r\n    if (paint != null) {\r\n        g.setPaint(paint);\r\n        g.setStroke(SVGAttributeKeys.getStroke(this));\r\n        drawStroke(g);\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        g.setTransform(savedTransform);\r\n    }\r\n}'),(5415,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGPathFigure.drawFill(java.awt.Graphics2D)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void drawFill(Graphics2D g) {\r\n    g.fill(getPath());\r\n}'),(5416,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGPathFigure.drawStroke(java.awt.Graphics2D)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void drawStroke(Graphics2D g) {\r\n    g.draw(getPath());\r\n}'),(5417,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.svg.figures.SVGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5418,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.svg.figures.SVGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5419,'flattenTransform()','org.jhotdraw.samples.svg.figures.SVGPathFigure.flattenTransform()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void flattenTransform() {\r\n    willChange();\r\n    AffineTransform tx = AttributeKeys.TRANSFORM.get(this);\r\n    if (tx != null) {\r\n        for (Figure child : getChildren()) {\r\n            // ((SVGBezierFigure) child).transform(tx);\r\n            ((SVGBezierFigure) (child)).flattenTransform();\r\n        }\r\n    }\r\n    if ((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null) {\r\n        SVGAttributeKeys.FILL_GRADIENT.get(this).transform(tx);\r\n    }\r\n    if ((SVGAttributeKeys.STROKE_GRADIENT.get(this)) != null) {\r\n        SVGAttributeKeys.STROKE_GRADIENT.get(this).transform(tx);\r\n    }\r\n    AttributeKeys.TRANSFORM.basicSet(this, null);\r\n    changed();\r\n}'),(5420,'getActions(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGPathFigure.getActions(java.awt.geom.Point2D$Double)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic Collection<Action> getActions(Point2D.Double p) {\r\n    final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    LinkedList<Action> actions = new LinkedList<Action>();\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        actions.add(new AbstractAction(labels.getString(\"edit.removeTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                SVGPathFigure.this.willChange();\r\n                fireUndoableEditHappened(AttributeKeys.TRANSFORM.setUndoable(SVGPathFigure.this, null));\r\n                SVGPathFigure.this.changed();\r\n            }\r\n        });\r\n        actions.add(new AbstractAction(labels.getString(\"edit.flattenTransform.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                // CompositeEdit edit = new CompositeEdit(labels.getString(\"flattenTransform\"));\r\n                // TransformEdit edit = new TransformEdit(SVGPathFigure.this, )\r\n                final Object restoreData = getTransformRestoreData();\r\n                UndoableEdit edit = new AbstractUndoableEdit() {\r\n                    @Override\r\n                    public String getPresentationName() {\r\n                        return labels.getString(\"edit.flattenTransform.text\");\r\n                    }\r\n\r\n                    @Override\r\n                    public void undo() throws CannotUndoException {\r\n                        super.undo();\r\n                        willChange();\r\n                        restoreTransformTo(restoreData);\r\n                        changed();\r\n                    }\r\n\r\n                    @Override\r\n                    public void redo() throws CannotRedoException {\r\n                        super.redo();\r\n                        willChange();\r\n                        restoreTransformTo(restoreData);\r\n                        flattenTransform();\r\n                        changed();\r\n                    }\r\n                };\r\n                willChange();\r\n                flattenTransform();\r\n                changed();\r\n                fireUndoableEditHappened(edit);\r\n            }\r\n        });\r\n    }\r\n    if (AttributeKeys.CLOSED.get(getChild(((getChildCount()) - 1)))) {\r\n        actions.add(new AbstractAction(labels.getString(\"attribute.openPath.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                SVGPathFigure.this.willChange();\r\n                for (Figure child : getChildren()) {\r\n                    getDrawing().fireUndoableEditHappened(AttributeKeys.CLOSED.setUndoable(child, false));\r\n                }\r\n                SVGPathFigure.this.changed();\r\n            }\r\n        });\r\n    } else {\r\n        actions.add(new AbstractAction(labels.getString(\"attribute.closePath.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                SVGPathFigure.this.willChange();\r\n                for (Figure child : getChildren()) {\r\n                    getDrawing().fireUndoableEditHappened(AttributeKeys.CLOSED.setUndoable(child, true));\r\n                }\r\n                SVGPathFigure.this.changed();\r\n            }\r\n        });\r\n    }\r\n    if ((AttributeKeys.WINDING_RULE.get(this)) != (AttributeKeys.WindingRule.EVEN_ODD)) {\r\n        actions.add(new AbstractAction(labels.getString(\"attribute.windingRule.evenOdd.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                SVGPathFigure.this.willChange();\r\n                getDrawing().fireUndoableEditHappened(AttributeKeys.WINDING_RULE.setUndoable(SVGPathFigure.this, AttributeKeys.WindingRule.EVEN_ODD));\r\n                SVGPathFigure.this.changed();\r\n            }\r\n        });\r\n    } else {\r\n        actions.add(new AbstractAction(labels.getString(\"attribute.windingRule.nonZero.text\")) {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                AttributeKeys.WINDING_RULE.set(SVGPathFigure.this, AttributeKeys.WindingRule.NON_ZERO);\r\n                getDrawing().fireUndoableEditHappened(AttributeKeys.WINDING_RULE.setUndoable(SVGPathFigure.this, AttributeKeys.WindingRule.NON_ZERO));\r\n            }\r\n        });\r\n    }\r\n    return actions;\r\n}'),(5421,'getChild(int)','org.jhotdraw.samples.svg.figures.SVGPathFigure.getChild(int)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic SVGBezierFigure getChild(int index) {\r\n    return ((SVGBezierFigure) (super.getChild(index)));\r\n}'),(5422,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGPathFigure.getDrawingArea()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','// int count;\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n            width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n        } else\r\n            if ((AttributeKeys.STROKE_CAP.get(this)) != (BasicStroke.CAP_BUTT)) {\r\n                width += strokeTotalWidth * 2;\r\n            }\r\n\r\n        GeneralPath gp = ((GeneralPath) (getPath()));\r\n        Rectangle2D strokeRect = new Rectangle2D.Double(0, 0, width, width);\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            gp = ((GeneralPath) (gp.clone()));\r\n            gp.transform(AttributeKeys.TRANSFORM.get(this));\r\n            strokeRect = AttributeKeys.TRANSFORM.get(this).createTransformedShape(strokeRect).getBounds2D();\r\n        }\r\n        Rectangle2D rx = gp.getBounds2D();\r\n        Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n        Geom.grow(r, strokeRect.getWidth(), strokeRect.getHeight());\r\n        cachedDrawingArea = r;\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(5423,'getHitShape()','org.jhotdraw.samples.svg.figures.SVGPathFigure.getHitShape()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','protected Shape getHitShape() {\r\n    if ((cachedHitShape) == null) {\r\n        cachedHitShape = getPath();\r\n        if (((AttributeKeys.FILL_COLOR.get(this)) == null) && ((SVGAttributeKeys.FILL_GRADIENT.get(this)) == null)) {\r\n            cachedHitShape = SVGAttributeKeys.getHitStroke(this).createStrokedShape(cachedHitShape);\r\n        }\r\n    }\r\n    return cachedHitShape;\r\n}'),(5424,'getPath()','org.jhotdraw.samples.svg.figures.SVGPathFigure.getPath()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','protected GeneralPath getPath() {\r\n    if ((cachedPath) == null) {\r\n        cachedPath = new GeneralPath();\r\n        cachedPath.setWindingRule(((AttributeKeys.WINDING_RULE.get(this)) == (AttributeKeys.WindingRule.EVEN_ODD) ? GeneralPath.WIND_EVEN_ODD : GeneralPath.WIND_NON_ZERO));\r\n        for (Figure child : getChildren()) {\r\n            SVGBezierFigure b = ((SVGBezierFigure) (child));\r\n            cachedPath.append(b.getBezierPath(), false);\r\n        }\r\n    }\r\n    return cachedPath;\r\n}'),(5425,'getTransformRestoreData()','org.jhotdraw.samples.svg.figures.SVGPathFigure.getTransformRestoreData()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic Object getTransformRestoreData() {\r\n    ArrayList<Object> paths = new ArrayList<Object>(getChildCount());\r\n    for (int i = 0, n = getChildCount(); i < n; i++) {\r\n        paths.add(getChild(i).getTransformRestoreData());\r\n    }\r\n    return new Object[]{ paths, AttributeKeys.TRANSFORM.getClone(this), SVGAttributeKeys.FILL_GRADIENT.getClone(this), SVGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(5426,'handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.svg.figures.SVGPathFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        for (Figure child : getChildren()) {\r\n            SVGBezierFigure bf = ((SVGBezierFigure) (child));\r\n            int index = bf.findSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n            if (index != (-1)) {\r\n                bf.handleMouseClick(p, evt, view);\r\n                evt.consume();\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}'),(5427,'invalidate()','org.jhotdraw.samples.svg.figures.SVGPathFigure.invalidate()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\nprotected void invalidate() {\r\n    super.invalidate();\r\n    cachedPath = null;\r\n    cachedDrawingArea = null;\r\n    cachedHitShape = null;\r\n}'),(5428,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGPathFigure.isEmpty()','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public boolean isEmpty() {\r\n    for (Figure child : getChildren()) {\r\n        SVGBezierFigure b = ((SVGBezierFigure) (child));\r\n        if ((b.getNodeCount()) > 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}'),(5429,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.samples.svg.figures.SVGPathFigure.read(org.jhotdraw.xml.DOMInput)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}'),(5430,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGPathFigure.restoreTransformTo(java.lang.Object)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void restoreTransformTo(Object geometry) {\r\n    invalidate();\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    ArrayList<Object> paths = ((ArrayList<Object>) (restoreData[0]));\r\n    for (int i = 0, n = getChildCount(); i < n; i++) {\r\n        getChild(i).restoreTransformTo(paths.get(i));\r\n    }\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    SVGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    SVGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n}'),(5431,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGPathFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}'),(5432,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGPathFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    if (((getChildCount()) == 1) && ((((SVGBezierFigure) (getChild(0))).getNodeCount()) <= 2)) {\r\n        SVGBezierFigure b = ((SVGBezierFigure) (getChild(0)));\r\n        b.setBounds(anchor, lead);\r\n        invalidate();\r\n    } else {\r\n        super.setBounds(anchor, lead);\r\n    }\r\n}'),(5433,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGPathFigure.transform(java.awt.geom.AffineTransform)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','public void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSetClone(this, tx);\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        for (Figure f : getChildren()) {\r\n            f.transform(tx);\r\n        }\r\n        if (((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((SVGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n    invalidate();\r\n}'),(5434,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.samples.svg.figures.SVGPathFigure.write(org.jhotdraw.xml.DOMOutput)','564','org.jhotdraw.samples.svg.figures.SVGPathFigure','@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}'),(5435,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathOutlineHandle(SVGPathFigure owner) {\r\n    this(owner, false);\r\n}'),(5436,'-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathOutlineHandle(SVGPathFigure owner, boolean isHoverHandle) {\r\n    super(owner);\r\n    this.isHoverHandle = isHoverHandle;\r\n}'),(5437,'basicGetBounds()','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.basicGetBounds()','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','protected Rectangle basicGetBounds() {\r\n    return view.drawingToView(getOwner().getDrawingArea());\r\n}'),(5438,'contains(java.awt.Point)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.contains(java.awt.Point)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','@Override\r\npublic boolean contains(Point p) {\r\n    return false;\r\n}'),(5439,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.draw(java.awt.Graphics2D)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','@Override\r\npublic void draw(Graphics2D g) {\r\n    Shape bounds = getOwner().getPath();\r\n    if ((AttributeKeys.TRANSFORM.get(getOwner())) != null) {\r\n        bounds = AttributeKeys.TRANSFORM.get(getOwner()).createTransformedShape(bounds);\r\n    }\r\n    bounds = view.getDrawingToViewTransform().createTransformedShape(bounds);\r\n    Stroke stroke1;\r\n    Color strokeColor1;\r\n    Stroke stroke2;\r\n    Color strokeColor2;\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        if (isHoverHandle) {\r\n            stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_1_HOVER)));\r\n            strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_1_HOVER)));\r\n            stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_2_HOVER)));\r\n            strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_2_HOVER)));\r\n        } else {\r\n            stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_1)));\r\n            strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_1)));\r\n            stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_2)));\r\n            strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_2)));\r\n        }\r\n    } else {\r\n        stroke1 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_1_DISABLED)));\r\n        strokeColor1 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_1_DISABLED)));\r\n        stroke2 = ((Stroke) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_STROKE_2_DISABLED)));\r\n        strokeColor2 = ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_PATH_COLOR_2_DISABLED)));\r\n    }\r\n    if ((stroke1 != null) && (strokeColor1 != null)) {\r\n        g.setStroke(stroke1);\r\n        g.setColor(strokeColor1);\r\n        g.draw(bounds);\r\n    }\r\n    if ((stroke2 != null) && (strokeColor2 != null)) {\r\n        g.setStroke(stroke2);\r\n        g.setColor(strokeColor2);\r\n        g.draw(bounds);\r\n    }\r\n}'),(5440,'getOwner()','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.getOwner()','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','public SVGPathFigure getOwner() {\r\n    return ((SVGPathFigure) (super.getOwner()));\r\n}'),(5441,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.trackEnd(java.awt.Point,java.awt.Point,int)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n}'),(5442,'trackStart(java.awt.Point,int)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.trackStart(java.awt.Point,int)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n}'),(5443,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.trackStep(java.awt.Point,java.awt.Point,int)','565','org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n}'),(5444,'-init-()','org.jhotdraw.samples.svg.figures.SVGRectFigure.-init-()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGRectFigure() {\r\n    this(0, 0, 0, 0);\r\n}'),(5445,'-init-(double,double,double,double)','org.jhotdraw.samples.svg.figures.SVGRectFigure.-init-(double,double,double,double)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public SVGRectFigure(double x, double y, double width, double height) {\r\n    this(x, y, width, height, 0, 0);\r\n}'),(5446,'-init-(double,double,double,double,double,double)','org.jhotdraw.samples.svg.figures.SVGRectFigure.-init-(double,double,double,double,double,double)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public SVGRectFigure(double x, double y, double width, double height, double rx, double ry) {\r\n    roundrect = new RoundRectangle2D.Double(x, y, width, height, rx, ry);\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5447,'canConnect()','org.jhotdraw.samples.svg.figures.SVGRectFigure.canConnect()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// SVG does not support connecting\r\n\r\n}'),(5448,'clone()','org.jhotdraw.samples.svg.figures.SVGRectFigure.clone()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','// COMPOSITE FIGURES\r\n// CLONING\r\npublic SVGRectFigure clone() {\r\n    SVGRectFigure that = ((SVGRectFigure) (super.clone()));\r\n    that.roundrect = ((RoundRectangle2D.Double) (this.roundrect.clone()));\r\n    that.cachedTransformedShape = null;\r\n    that.cachedHitShape = null;\r\n    return that;\r\n}'),(5449,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGRectFigure.contains(java.awt.geom.Point2D$Double)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    return getHitShape().contains(p);\r\n}'),(5450,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGRectFigure.createHandles(int)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','// EDITING\r\n@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            handles.add(new SVGRectRadiusHandle(this));\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5451,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGRectFigure.drawFill(java.awt.Graphics2D)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','// DRAWING\r\nprotected void drawFill(Graphics2D g) {\r\n    if (((getArcHeight()) == 0.0) && ((getArcWidth()) == 0.0)) {\r\n        g.fill(roundrect.getBounds2D());\r\n    } else {\r\n        g.fill(roundrect);\r\n    }\r\n}'),(5452,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGRectFigure.drawStroke(java.awt.Graphics2D)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','protected void drawStroke(Graphics2D g) {\r\n    if (((roundrect.archeight) == 0) && ((roundrect.arcwidth) == 0)) {\r\n        g.draw(roundrect.getBounds2D());\r\n    } else {\r\n        // We have to generate the path for the round rectangle manually,\r\n        // because the path of a Java RoundRectangle is drawn counter clockwise\r\n        // whereas an SVG rect needs to be drawn clockwise.\r\n        GeneralPath p = new GeneralPath();\r\n        double aw = (roundrect.arcwidth) / 2.0;\r\n        double ah = (roundrect.archeight) / 2.0;\r\n        p.moveTo(((float) ((roundrect.x) + aw)), ((float) (roundrect.y)));\r\n        p.lineTo(((float) (((roundrect.x) + (roundrect.width)) - aw)), ((float) (roundrect.y)));\r\n        // \r\n        // \r\n        p.curveTo(((float) (((roundrect.x) + (roundrect.width)) - (aw * (SVGRectFigure.acv)))), ((float) (roundrect.y)), ((float) ((roundrect.x) + (roundrect.width))), ((float) ((roundrect.y) + (ah * (SVGRectFigure.acv)))), ((float) ((roundrect.x) + (roundrect.width))), ((float) ((roundrect.y) + ah)));\r\n        p.lineTo(((float) ((roundrect.x) + (roundrect.width))), ((float) (((roundrect.y) + (roundrect.height)) - ah)));\r\n        // \r\n        // \r\n        p.curveTo(((float) ((roundrect.x) + (roundrect.width))), ((float) (((roundrect.y) + (roundrect.height)) - (ah * (SVGRectFigure.acv)))), ((float) (((roundrect.x) + (roundrect.width)) - (aw * (SVGRectFigure.acv)))), ((float) ((roundrect.y) + (roundrect.height))), ((float) (((roundrect.x) + (roundrect.width)) - aw)), ((float) ((roundrect.y) + (roundrect.height))));\r\n        p.lineTo(((float) ((roundrect.x) + aw)), ((float) ((roundrect.y) + (roundrect.height))));\r\n        // \r\n        // \r\n        p.curveTo(((float) ((roundrect.x) + (aw * (SVGRectFigure.acv)))), ((float) ((roundrect.y) + (roundrect.height))), ((float) (roundrect.x)), ((float) (((roundrect.y) + (roundrect.height)) - (ah * (SVGRectFigure.acv)))), ((float) (roundrect.x)), ((float) (((roundrect.y) + (roundrect.height)) - ah)));\r\n        p.lineTo(((float) (roundrect.x)), ((float) ((roundrect.y) + ah)));\r\n        // \r\n        // \r\n        p.curveTo(((float) (roundrect.x)), ((float) ((roundrect.y) + (ah * (SVGRectFigure.acv)))), ((float) ((roundrect.x) + (aw * (SVGRectFigure.acv)))), ((float) (roundrect.y)), ((float) ((roundrect.x) + aw)), ((float) (roundrect.y)));\r\n        p.closePath();\r\n        g.draw(p);\r\n    }\r\n}'),(5453,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.svg.figures.SVGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5454,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.svg.figures.SVGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5455,'getArc()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getArc()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public Dimension2DDouble getArc() {\r\n    return new Dimension2DDouble(((roundrect.arcwidth) / 2.0), ((roundrect.archeight) / 2.0));\r\n}'),(5456,'getArcHeight()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getArcHeight()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public double getArcHeight() {\r\n    return (roundrect.archeight) / 2.0;\r\n}'),(5457,'getArcWidth()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getArcWidth()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public double getArcWidth() {\r\n    return (roundrect.arcwidth) / 2.0;\r\n}'),(5458,'getBounds()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getBounds()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (roundrect.getBounds2D()));\r\n}'),(5459,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getDrawingArea()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    Rectangle2D rx = getTransformedShape().getBounds2D();\r\n    Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n    if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n        double g = ((SVGAttributeKeys.getPerpendicularHitGrowth(this)) * 2.0) + 1.0;\r\n        Geom.grow(r, g, g);\r\n    } else {\r\n        double strokeTotalWidth = AttributeKeys.getStrokeTotalWidth(this);\r\n        double width = strokeTotalWidth / 2.0;\r\n        if ((AttributeKeys.STROKE_JOIN.get(this)) == (BasicStroke.JOIN_MITER)) {\r\n            width *= AttributeKeys.STROKE_MITER_LIMIT.get(this);\r\n        }\r\n        if ((AttributeKeys.STROKE_CAP.get(this)) != (BasicStroke.CAP_BUTT)) {\r\n            width += strokeTotalWidth * 2;\r\n        }\r\n        width++;\r\n        Geom.grow(r, width, width);\r\n    }\r\n    return r;\r\n}'),(5460,'getHeight()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getHeight()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public double getHeight() {\r\n    return roundrect.height;\r\n}'),(5461,'getHitShape()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getHitShape()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','private Shape getHitShape() {\r\n    if ((cachedHitShape) == null) {\r\n        if (((AttributeKeys.FILL_COLOR.get(this)) != null) || ((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null)) {\r\n            cachedHitShape = new GrowStroke((((float) (SVGAttributeKeys.getStrokeTotalWidth(this))) / 2.0F), ((float) (SVGAttributeKeys.getStrokeTotalMiterLimit(this)))).createStrokedShape(getTransformedShape());\r\n        } else {\r\n            cachedHitShape = SVGAttributeKeys.getHitStroke(this).createStrokedShape(getTransformedShape());\r\n        }\r\n    }\r\n    return cachedHitShape;\r\n}'),(5462,'getTransformRestoreData()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getTransformRestoreData()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public Object getTransformRestoreData() {\r\n    return new Object[]{ roundrect.clone(), AttributeKeys.TRANSFORM.getClone(this), SVGAttributeKeys.FILL_GRADIENT.getClone(this), SVGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(5463,'getTransformedShape()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getTransformedShape()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','private Shape getTransformedShape() {\r\n    if ((cachedTransformedShape) == null) {\r\n        if (((getArcHeight()) == 0) || ((getArcWidth()) == 0)) {\r\n            cachedTransformedShape = roundrect.getBounds2D();\r\n        } else {\r\n            cachedTransformedShape = ((Shape) (roundrect.clone()));\r\n        }\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            cachedTransformedShape = AttributeKeys.TRANSFORM.get(this).createTransformedShape(cachedTransformedShape);\r\n        }\r\n    }\r\n    return cachedTransformedShape;\r\n}'),(5464,'getWidth()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getWidth()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public double getWidth() {\r\n    return roundrect.width;\r\n}'),(5465,'getX()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getX()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','// SHAPE AND BOUNDS\r\npublic double getX() {\r\n    return roundrect.x;\r\n}'),(5466,'getY()','org.jhotdraw.samples.svg.figures.SVGRectFigure.getY()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public double getY() {\r\n    return roundrect.y;\r\n}'),(5467,'invalidate()','org.jhotdraw.samples.svg.figures.SVGRectFigure.invalidate()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    invalidateTransformedShape();\r\n}'),(5468,'invalidateTransformedShape()','org.jhotdraw.samples.svg.figures.SVGRectFigure.invalidateTransformedShape()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','private void invalidateTransformedShape() {\r\n    cachedTransformedShape = null;\r\n    cachedHitShape = null;\r\n}'),(5469,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGRectFigure.isEmpty()','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public boolean isEmpty() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return ((b.width) <= 0) || ((b.height) <= 0);\r\n}'),(5470,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGRectFigure.restoreTransformTo(java.lang.Object)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public void restoreTransformTo(Object geometry) {\r\n    invalidateTransformedShape();\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    roundrect = ((RoundRectangle2D.Double) (((RoundRectangle2D.Double) (restoreData[0])).clone()));\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    SVGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    SVGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n}'),(5471,'setArc(double,double)','org.jhotdraw.samples.svg.figures.SVGRectFigure.setArc(double,double)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','// ATTRIBUTES\r\npublic void setArc(double w, double h) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, (w * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, (h * 2.0)));\r\n}'),(5472,'setArc(org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.samples.svg.figures.SVGRectFigure.setArc(org.jhotdraw.geom.Dimension2DDouble)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','public void setArc(Dimension2DDouble arc) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, ((arc.width) * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, ((arc.height) * 2.0)));\r\n}'),(5473,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGRectFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','@Override\r\npublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    invalidateTransformedShape();\r\n    roundrect.x = Math.min(anchor.x, lead.x);\r\n    roundrect.y = Math.min(anchor.y, lead.y);\r\n    roundrect.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    roundrect.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n    invalidate();\r\n}'),(5474,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGRectFigure.transform(java.awt.geom.AffineTransform)','566','org.jhotdraw.samples.svg.figures.SVGRectFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		The transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    invalidateTransformedShape();\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || // (tx.getType() & (AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_MASK_SCALE)) != tx.getType()) {\r\n    (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSet(this, ((AffineTransform) (tx.clone())));\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        Point2D.Double anchor = getStartPoint();\r\n        Point2D.Double lead = getEndPoint();\r\n        setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n        if (((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((SVGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n}'),(5475,'-init-(org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.-init-(org.jhotdraw.draw.Figure)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGRectRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}'),(5476,'basicGetBounds()','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.basicGetBounds()','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','protected Rectangle basicGetBounds() {\r\n    Rectangle r = new Rectangle(locate());\r\n    r.grow((((getHandlesize()) / 2) + 1), (((getHandlesize()) / 2) + 1));\r\n    return r;\r\n}'),(5477,'draw(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.draw(java.awt.Graphics2D)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','/**\r\n * Draws this handle.\r\n */\r\n@Override\r\npublic void draw(Graphics2D g) {\r\n    if (getEditor().getTool().supportsHandleInteraction()) {\r\n        drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR))));\r\n    } else {\r\n        drawDiamond(g, ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED))), ((Color) (getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED))));\r\n    }\r\n}'),(5478,'getToolTipText(java.awt.Point)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.getToolTipText(java.awt.Point)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','@Override\r\npublic String getToolTipText(Point p) {\r\n    return // \r\n    ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\").getString(\"handle.roundRectangleRadius.toolTipText\");\r\n}'),(5479,'keyPressed(java.awt.event.KeyEvent)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.keyPressed(java.awt.event.KeyEvent)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','@Override\r\npublic void keyPressed(KeyEvent evt) {\r\n    SVGRectFigure owner = ((SVGRectFigure) (getOwner()));\r\n    Dimension2DDouble oldArc = new Dimension2DDouble(owner.getArcWidth(), owner.getArcHeight());\r\n    Dimension2DDouble newArc = new Dimension2DDouble(owner.getArcWidth(), owner.getArcHeight());\r\n    switch (evt.getKeyCode()) {\r\n        case KeyEvent.VK_UP :\r\n            if ((newArc.height) > 0) {\r\n                newArc.height = Math.max(0, ((newArc.height) - 1));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_DOWN :\r\n            newArc.height += 1;\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_LEFT :\r\n            if ((newArc.width) > 0) {\r\n                newArc.width = Math.max(0, ((newArc.width) - 1));\r\n            }\r\n            evt.consume();\r\n            break;\r\n        case KeyEvent.VK_RIGHT :\r\n            newArc.width += 1;\r\n            evt.consume();\r\n            break;\r\n    }\r\n    if (!(newArc.equals(oldArc))) {\r\n        owner.willChange();\r\n        owner.setArc(newArc.width, newArc.height);\r\n        owner.changed();\r\n        fireUndoableEditHappened(new SVGRectRadiusUndoableEdit(owner, oldArc, newArc));\r\n    }\r\n}'),(5480,'locate()','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.locate()','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','private Point locate() {\r\n    SVGRectFigure owner = ((SVGRectFigure) (getOwner()));\r\n    Rectangle2D.Double r = owner.getBounds();\r\n    Point2D.Double p = new Point2D.Double(((r.x) + (owner.getArcWidth())), ((r.y) + (owner.getArcHeight())));\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        AttributeKeys.TRANSFORM.get(owner).transform(p, p);\r\n    }\r\n    return view.drawingToView(p);\r\n}'),(5481,'trackEnd(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.trackEnd(java.awt.Point,java.awt.Point,int)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','public void trackEnd(Point anchor, Point lead, int modifiersEx) {\r\n    final SVGRectFigure svgRect = ((SVGRectFigure) (getOwner()));\r\n    final Dimension2DDouble oldValue = originalArc2D;\r\n    final Dimension2DDouble newValue = svgRect.getArc();\r\n    fireUndoableEditHappened(new SVGRectRadiusUndoableEdit(svgRect, oldValue, newValue));\r\n}'),(5482,'trackStart(java.awt.Point,int)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.trackStart(java.awt.Point,int)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','public void trackStart(Point anchor, int modifiersEx) {\r\n    SVGRectFigure svgRect = ((SVGRectFigure) (getOwner()));\r\n    originalArc2D = svgRect.getArc();\r\n}'),(5483,'trackStep(java.awt.Point,java.awt.Point,int)','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.trackStep(java.awt.Point,java.awt.Point,int)','567','org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle','public void trackStep(Point anchor, Point lead, int modifiersEx) {\r\n    int dx = (lead.x) - (anchor.x);\r\n    int dy = (lead.y) - (anchor.y);\r\n    SVGRectFigure svgRect = ((SVGRectFigure) (getOwner()));\r\n    svgRect.willChange();\r\n    Point2D.Double p = view.viewToDrawing(lead);\r\n    if ((AttributeKeys.TRANSFORM.get(svgRect)) != null) {\r\n        try {\r\n            AttributeKeys.TRANSFORM.get(svgRect).inverseTransform(p, p);\r\n        } catch (NoninvertibleTransformException ex) {\r\n            if (SVGRectRadiusHandle.DEBUG)\r\n                ex.printStackTrace();\r\n\r\n        }\r\n    }\r\n    Rectangle2D.Double r = svgRect.getBounds();\r\n    svgRect.setArc(((p.x) - (r.x)), ((p.y) - (r.y)));\r\n    svgRect.changed();\r\n}'),(5484,'-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)','568','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit','public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}'),(5485,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.addEdit(javax.swing.undo.UndoableEdit)','568','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit','public boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof SVGRectRadiusUndoableEdit) {\r\n        SVGRectRadiusUndoableEdit that = ((SVGRectRadiusUndoableEdit) (anEdit));\r\n        if ((that.owner) == (this.owner)) {\r\n            this.newArc = that.newArc;\r\n            that.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(5486,'getPresentationName()','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.getPresentationName()','568','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit','@Override\r\npublic String getPresentationName() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\", Locale.getDefault());\r\n    return labels.getString(\"attribute.roundRectRadius\");\r\n}'),(5487,'redo()','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.redo()','568','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit','@Override\r\npublic void redo() throws CannotRedoException {\r\n    owner.willChange();\r\n    owner.setArc(newArc.width, newArc.height);\r\n    owner.changed();\r\n    super.redo();\r\n}'),(5488,'replaceEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.replaceEdit(javax.swing.undo.UndoableEdit)','568','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit','public boolean replaceEdit(UndoableEdit anEdit) {\r\n    if (anEdit instanceof SVGRectRadiusUndoableEdit) {\r\n        SVGRectRadiusUndoableEdit that = ((SVGRectRadiusUndoableEdit) (anEdit));\r\n        if ((that.owner) == (this.owner)) {\r\n            that.oldArc = this.oldArc;\r\n            this.die();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(5489,'undo()','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.undo()','568','org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit','@Override\r\npublic void undo() throws CannotUndoException {\r\n    owner.willChange();\r\n    owner.setArc(oldArc.width, oldArc.height);\r\n    owner.changed();\r\n    super.undo();\r\n}'),(5490,'-init-()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.-init-()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGTextAreaFigure() {\r\n    this(\"Text\");\r\n}'),(5491,'-init-(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.-init-(java.lang.String)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public SVGTextAreaFigure(String text) {\r\n    setText(text);\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5492,'appendParagraph(java.awt.geom.GeneralPath,java.text.AttributedCharacterIterator,float,float,float,float,float[],int)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.appendParagraph(java.awt.geom.GeneralPath,java.text.AttributedCharacterIterator,float,float,float,float,float[],int)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Appends a paragraph of text at the specified y location and returns\r\n * the bounds of the paragraph.\r\n *\r\n * @param shape\r\n * 		Shape to which to add the glyphs of the paragraph. This\r\n * 		parameter is null, if we only want to measure the size of the paragraph.\r\n * @param styledText\r\n * 		the text of the paragraph.\r\n * @param verticalPos\r\n * 		the top bound of the paragraph\r\n * @param maxVerticalPos\r\n * 		the bottom bound of the paragraph\r\n * @param leftMargin\r\n * 		the left bound of the paragraph\r\n * @param rightMargin\r\n * 		the right bound of the paragraph\r\n * @param tabStops\r\n * 		an array with tab stops\r\n * @param tabCounts\r\n * 		the number of entries in tabStops which contain actual\r\n * 		values\r\n * @return Returns the actual bounds of the paragraph.\r\n */\r\nprivate Rectangle2D.Double appendParagraph(GeneralPath shape, AttributedCharacterIterator styledText, float verticalPos, float maxVerticalPos, float leftMargin, float rightMargin, float[] tabStops, int tabCount) {\r\n    // assume styledText is an AttributedCharacterIterator, and the number\r\n    // of tabs in styledText is tabCount\r\n    Rectangle2D.Double paragraphBounds = new Rectangle2D.Double(leftMargin, verticalPos, 0, 0);\r\n    int[] tabLocations = new int[tabCount + 1];\r\n    int i = 0;\r\n    for (char c = styledText.first(); c != (styledText.DONE); c = styledText.next()) {\r\n        if (c == 	) {\r\n            tabLocations[(i++)] = styledText.getIndex();\r\n        }\r\n    }\r\n    tabLocations[tabCount] = (styledText.getEndIndex()) - 1;\r\n    // Now tabLocations has an entry for every tabs offset in\r\n    // the text.  For convenience, the last entry is tabLocations\r\n    // is the offset of the last character in the text.\r\n    LineBreakMeasurer measurer = new LineBreakMeasurer(styledText, getFontRenderContext());\r\n    int currentTab = 0;\r\n    while ((measurer.getPosition()) < (styledText.getEndIndex())) {\r\n        // Lay out and draw each line.  All segments on a line\r\n        // must be computed before any drawing can occur, since\r\n        // we must know the largest ascent on the line.\r\n        // TextLayouts are computed and stored in a List;\r\n        // their horizontal positions are stored in a parallel\r\n        // List.\r\n        // lineContainsText is true after first segment is drawn\r\n        boolean lineContainsText = false;\r\n        boolean lineComplete = false;\r\n        float maxAscent = 0;\r\n        float maxDescent = 0;\r\n        float horizontalPos = leftMargin;\r\n        LinkedList<TextLayout> layouts = new LinkedList<TextLayout>();\r\n        LinkedList<Float> penPositions = new LinkedList<Float>();\r\n        while (!lineComplete) {\r\n            float wrappingWidth = rightMargin - horizontalPos;\r\n            TextLayout layout = null;\r\n            layout = measurer.nextLayout(wrappingWidth, ((tabLocations[currentTab]) + 1), lineContainsText);\r\n            // layout can be null if lineContainsText is true\r\n            if (layout != null) {\r\n                layouts.add(layout);\r\n                penPositions.add(horizontalPos);\r\n                horizontalPos += layout.getAdvance();\r\n                maxAscent = Math.max(maxAscent, layout.getAscent());\r\n                maxDescent = Math.max(maxDescent, ((layout.getDescent()) + (layout.getLeading())));\r\n            } else {\r\n                lineComplete = true;\r\n            }\r\n            lineContainsText = true;\r\n            if ((measurer.getPosition()) == ((tabLocations[currentTab]) + 1)) {\r\n                currentTab++;\r\n            }\r\n            if ((measurer.getPosition()) == (styledText.getEndIndex())) {\r\n                lineComplete = true;\r\n            } else\r\n                if (((tabStops.length) == 0) || (horizontalPos >= (tabStops[((tabStops.length) - 1)]))) {\r\n                    lineComplete = true;\r\n                }\r\n\r\n            if (!lineComplete) {\r\n                // move to next tab stop\r\n                int j;\r\n                for (j = 0; horizontalPos >= (tabStops[j]); j++) {\r\n                }\r\n                horizontalPos = tabStops[j];\r\n            }\r\n        } \r\n        verticalPos += maxAscent;\r\n        if (verticalPos > maxVerticalPos) {\r\n            break;\r\n        }\r\n        Iterator<TextLayout> layoutEnum = layouts.iterator();\r\n        Iterator<Float> positionEnum = penPositions.iterator();\r\n        // now iterate through layouts and draw them\r\n        while (layoutEnum.hasNext()) {\r\n            TextLayout nextLayout = layoutEnum.next();\r\n            float nextPosition = positionEnum.next();\r\n            AffineTransform tx = new AffineTransform();\r\n            tx.translate(nextPosition, verticalPos);\r\n            if (shape != null) {\r\n                Shape outline = nextLayout.getOutline(tx);\r\n                shape.append(outline, false);\r\n            }\r\n            Rectangle2D layoutBounds = nextLayout.getBounds();\r\n            paragraphBounds.add(new Rectangle2D.Double(((layoutBounds.getX()) + nextPosition), ((layoutBounds.getY()) + verticalPos), layoutBounds.getWidth(), layoutBounds.getHeight()));\r\n        } \r\n        verticalPos += maxDescent;\r\n    } \r\n    return paragraphBounds;\r\n}'),(5493,'canConnect()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.canConnect()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','// CONNECTING\r\npublic boolean canConnect() {\r\n    return false;// SVG does not support connecting\r\n\r\n}'),(5494,'clone()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.clone()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public SVGTextAreaFigure clone() {\r\n    SVGTextAreaFigure that = ((SVGTextAreaFigure) (super.clone()));\r\n    that.bounds = ((Rectangle2D.Double) (this.bounds.clone()));\r\n    return that;\r\n}'),(5495,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.contains(java.awt.geom.Point2D$Double)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    Rectangle2D r = getTextShape().getBounds2D();\r\n    return r.isEmpty() ? getBounds().contains(p) : r.contains(p);\r\n}'),(5496,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.createHandles(int)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','@Override\r\npublic Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            ResizeHandleKit.addResizeHandles(this, handles);\r\n            handles.add(new FontSizeHandle(this));\r\n            handles.add(new TextOverflowHandle(this));\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5497,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.drawFill(java.awt.Graphics2D)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','protected void drawFill(Graphics2D g) {\r\n    g.fill(getTextShape());\r\n    g.draw(new Rectangle2D.Double(getBounds().x, getBounds().y, getPreferredTextSize(changingDepth).width, getPreferredTextSize(changingDepth).height));\r\n}'),(5498,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.drawStroke(java.awt.Graphics2D)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','protected void drawStroke(Graphics2D g) {\r\n    g.draw(getTextShape());\r\n}'),(5499,'drawText(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.drawText(java.awt.Graphics2D)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','// DRAWING\r\n@Override\r\nprotected void drawText(Graphics2D g) {\r\n}'),(5500,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5501,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5502,'getBaseline()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getBaseline()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public double getBaseline() {\r\n    return (getFont().getLineMetrics(getText(), getFontRenderContext()).getAscent()) + (getInsets().top);\r\n}'),(5503,'getBounds()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getBounds()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','// SHAPE AND BOUNDS\r\npublic Rectangle2D.Double getBounds() {\r\n    return ((Rectangle2D.Double) (bounds.clone()));\r\n}'),(5504,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getDrawingArea()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        Rectangle2D rx = getBounds();\r\n        Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n        double g = SVGAttributeKeys.getPerpendicularHitGrowth(this);\r\n        Geom.grow(r, g, g);\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            cachedDrawingArea = r;\r\n        } else {\r\n            cachedDrawingArea = new Rectangle2D.Double();\r\n            cachedDrawingArea.setRect(AttributeKeys.TRANSFORM.get(this).createTransformedShape(r).getBounds2D());\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(5505,'getFillColor()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getFillColor()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public Color getFillColor() {\r\n    return AttributeKeys.FILL_COLOR.get(this).equals(Color.white) ? Color.black : Color.WHITE;\r\n    // return FILL_COLOR.get(this);\r\n}'),(5506,'getFont()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getFont()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public Font getFont() {\r\n    return SVGAttributeKeys.getFont(this);\r\n}'),(5507,'getFontSize()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getFontSize()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public float getFontSize() {\r\n    Point2D.Double p = new Point2D.Double(0, AttributeKeys.FONT_SIZE.get(this));\r\n    AffineTransform tx = AttributeKeys.TRANSFORM.get(this);\r\n    if (tx != null) {\r\n        tx.transform(p, p);\r\n        Point2D.Double p0 = new Point2D.Double(0, 0);\r\n        tx.transform(p0, p0);\r\n        p.y -= p0.y;\r\n        /* try {\n        tx.inverseTransform(p, p);\n        } catch (NoninvertibleTransformException ex) {\n        ex.printStackTrace();\n        }\n         */\r\n    }\r\n    return ((float) (Math.abs(p.y)));\r\n}'),(5508,'getInsets()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getInsets()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Returns the insets used to draw text.\r\n */\r\npublic Insets2D.Double getInsets() {\r\n    double sw = ((AttributeKeys.STROKE_COLOR.get(this)) == null) ? 0 : Math.ceil(((AttributeKeys.STROKE_WIDTH.get(this)) / 2));\r\n    Insets2D.Double insets = new Insets2D.Double(0, 0, 0, 0);\r\n    return new Insets2D.Double(((insets.top) + sw), ((insets.left) + sw), ((insets.bottom) + sw), ((insets.right) + sw));\r\n}'),(5509,'getLabelFor()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getLabelFor()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public TextHolderFigure getLabelFor() {\r\n    return this;\r\n}'),(5510,'getPreferredTextSize(double)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getPreferredTextSize(double)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Returns the preferred text size of the TextAreaFigure.\r\n * <p>\r\n * If you want to use this method to determine the bounds of the TextAreaFigure,\r\n * you need to add the insets of the TextAreaFigure to the size.\r\n *\r\n * @param maxWidth\r\n * 		the maximal width to use. Specify Double.MAX_VALUE\r\n * 		if you want the width to be unlimited.\r\n * @return width and height needed to lay out the text.\r\n */\r\npublic Dimension2DDouble getPreferredTextSize(double maxWidth) {\r\n    Rectangle2D.Double textRect = new Rectangle2D.Double();\r\n    if ((getText()) != null) {\r\n        Font font = getFont();\r\n        boolean isUnderlined = AttributeKeys.FONT_UNDERLINE.get(this);\r\n        float leftMargin = 0;\r\n        float rightMargin = ((float) (maxWidth)) - 1;\r\n        float verticalPos = 0;\r\n        float maxVerticalPos = Float.MAX_VALUE;\r\n        if (leftMargin < rightMargin) {\r\n            float tabWidth = ((float) ((getTabSize()) * (font.getStringBounds(\"m\", getFontRenderContext()).getWidth())));\r\n            float[] tabStops = new float[((int) ((textRect.width) / tabWidth))];\r\n            for (int i = 0; i < (tabStops.length); i++) {\r\n                tabStops[i] = ((float) ((textRect.x) + ((int) (tabWidth * (i + 1)))));\r\n            }\r\n            if ((getText()) != null) {\r\n                String[] paragraphs = getText().split(\"\n\");// Strings.split(getText(), \n);\r\n\r\n                for (int i = 0; i < (paragraphs.length); i++) {\r\n                    if ((paragraphs[i].length()) == 0) {\r\n                        paragraphs[i] = \" \";\r\n                    }\r\n                    AttributedString as = new AttributedString(paragraphs[i]);\r\n                    as.addAttribute(TextAttribute.FONT, font);\r\n                    if (isUnderlined) {\r\n                        as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);\r\n                    }\r\n                    int tabCount = (paragraphs[i].split(\"	\").length) - 1;\r\n                    Rectangle2D.Double paragraphBounds = appendParagraph(null, as.getIterator(), verticalPos, maxVerticalPos, leftMargin, rightMargin, tabStops, tabCount);\r\n                    verticalPos = ((float) ((paragraphBounds.y) + (paragraphBounds.height)));\r\n                    textRect.add(paragraphBounds);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Dimension2DDouble(((Math.abs(textRect.x)) + (textRect.width)), ((Math.abs(textRect.y)) + (textRect.height)));\r\n}'),(5511,'getTabSize()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getTabSize()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public int getTabSize() {\r\n    return 8;\r\n}'),(5512,'getText()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getText()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','// ATTRIBUTES\r\npublic String getText() {\r\n    return ((String) (getAttribute(AttributeKeys.TEXT)));\r\n}'),(5513,'getTextColor()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getTextColor()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public Color getTextColor() {\r\n    return AttributeKeys.FILL_COLOR.get(this);\r\n    // return TEXT_COLOR.get(this);\r\n}'),(5514,'getTextColumns()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getTextColumns()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public int getTextColumns() {\r\n    return (getText()) == null ? 4 : Math.max(getText().length(), 4);\r\n}'),(5515,'getTextShape()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getTextShape()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','private Shape getTextShape() {\r\n    if ((cachedTextShape) == null) {\r\n        GeneralPath shape;\r\n        cachedTextShape = shape = new GeneralPath();\r\n        if (((getText()) != null) || (isEditable())) {\r\n            Font font = getFont();\r\n            boolean isUnderlined = AttributeKeys.FONT_UNDERLINE.get(this);\r\n            Insets2D.Double insets = getInsets();\r\n            Rectangle2D.Double textRect = new Rectangle2D.Double(((bounds.x) + (insets.left)), ((bounds.y) + (insets.top)), (((bounds.width) - (insets.left)) - (insets.right)), (((bounds.height) - (insets.top)) - (insets.bottom)));\r\n            float leftMargin = ((float) (textRect.x));\r\n            float rightMargin = ((float) (Math.max((leftMargin + 1), ((textRect.x) + (textRect.width)))));\r\n            float verticalPos = ((float) (textRect.y));\r\n            float maxVerticalPos = ((float) ((textRect.y) + (textRect.height)));\r\n            if (leftMargin < rightMargin) {\r\n                float tabWidth = ((float) ((getTabSize()) * (font.getStringBounds(\"m\", getFontRenderContext()).getWidth())));\r\n                float[] tabStops = new float[((int) ((textRect.width) / tabWidth))];\r\n                for (int i = 0; i < (tabStops.length); i++) {\r\n                    tabStops[i] = ((float) ((textRect.x) + ((int) (tabWidth * (i + 1)))));\r\n                }\r\n                if ((getText()) != null) {\r\n                    String[] paragraphs = getText().split(\"\n\");// Strings.split(getText(), \n);\r\n\r\n                    for (int i = 0; i < (paragraphs.length); i++) {\r\n                        if ((paragraphs[i].length()) == 0) {\r\n                            paragraphs[i] = \" \";\r\n                        }\r\n                        AttributedString as = new AttributedString(paragraphs[i]);\r\n                        as.addAttribute(TextAttribute.FONT, font);\r\n                        if (isUnderlined) {\r\n                            as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);\r\n                        }\r\n                        int tabCount = (paragraphs[i].split(\"	\").length) - 1;\r\n                        Rectangle2D.Double paragraphBounds = appendParagraph(shape, as.getIterator(), verticalPos, maxVerticalPos, leftMargin, rightMargin, tabStops, tabCount);\r\n                        verticalPos = ((float) ((paragraphBounds.y) + (paragraphBounds.height)));\r\n                        if (verticalPos > ((textRect.y) + (textRect.height))) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return cachedTextShape;\r\n}'),(5516,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getTool(java.awt.geom.Point2D$Double)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Returns a specialized tool for the given coordinate.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\npublic Tool getTool(Point2D.Double p) {\r\n    if ((isEditable()) && (contains(p))) {\r\n        TextAreaEditingTool tool = new TextAreaEditingTool(this);\r\n        return tool;\r\n    }\r\n    return null;\r\n}'),(5517,'getTransformRestoreData()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.getTransformRestoreData()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public Object getTransformRestoreData() {\r\n    return new Object[]{ bounds.clone(), AttributeKeys.TRANSFORM.getClone(this), SVGAttributeKeys.FILL_GRADIENT.getClone(this), SVGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(5518,'invalidate()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.invalidate()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    cachedDrawingArea = null;\r\n    cachedTextShape = null;\r\n    isTextOverflow = null;\r\n}'),(5519,'isEditable()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.isEditable()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','// EDITING\r\npublic boolean isEditable() {\r\n    return editable;\r\n}'),(5520,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.isEmpty()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\n/**\r\n * Gets the text shown by the text figure.\r\n */\r\npublic boolean isEmpty() {\r\n    return ((getText()) == null) || ((getText().length()) == 0);\r\n}'),(5521,'isTextOverflow()','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.isTextOverflow()','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public boolean isTextOverflow() {\r\n    if ((isTextOverflow) == null) {\r\n        Insets2D.Double insets = getInsets();\r\n        isTextOverflow = (getPreferredTextSize((((getBounds().width) - (insets.left)) - (insets.right))).height) > (((getBounds().height) - (insets.top)) - (insets.bottom));\r\n    }\r\n    return isTextOverflow;\r\n}'),(5522,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.restoreTransformTo(java.lang.Object)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public void restoreTransformTo(Object geometry) {\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    bounds = ((Rectangle2D.Double) (((Rectangle2D.Double) (restoreData[0])).clone()));\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[1])));\r\n    SVGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    SVGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n    invalidate();\r\n}'),(5523,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if ((((((((key.equals(SVGAttributeKeys.TRANSFORM)) || (key.equals(SVGAttributeKeys.FONT_FACE))) || (key.equals(SVGAttributeKeys.FONT_BOLD))) || (key.equals(SVGAttributeKeys.FONT_ITALIC))) || (key.equals(SVGAttributeKeys.FONT_SIZE))) || (key.equals(SVGAttributeKeys.STROKE_WIDTH))) || (key.equals(SVGAttributeKeys.STROKE_COLOR))) || (key.equals(SVGAttributeKeys.STROKE_GRADIENT))) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(5524,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    bounds.x = Math.min(anchor.x, lead.x);\r\n    bounds.y = Math.min(anchor.y, lead.y);\r\n    bounds.width = Math.max(0.1, Math.abs(((lead.x) - (anchor.x))));\r\n    bounds.height = Math.max(0.1, Math.abs(((lead.y) - (anchor.y))));\r\n    invalidate();\r\n}'),(5525,'setEditable(boolean)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setEditable(boolean)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public void setEditable(boolean b) {\r\n    this.editable = b;\r\n}'),(5526,'setFontSize(float)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setFontSize(float)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','public void setFontSize(float size) {\r\n    Point2D.Double p = new Point2D.Double(0, size);\r\n    AffineTransform tx = AttributeKeys.TRANSFORM.get(this);\r\n    if (tx != null) {\r\n        try {\r\n            tx.inverseTransform(p, p);\r\n            Point2D.Double p0 = new Point2D.Double(0, 0);\r\n            tx.inverseTransform(p0, p0);\r\n            p.y -= p0.y;\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    AttributeKeys.FONT_SIZE.set(this, Math.abs(p.y));\r\n}'),(5527,'setText(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setText(java.lang.String)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Sets the text shown by the text figure.\r\n */\r\npublic void setText(String newText) {\r\n    AttributeKeys.TEXT.set(this, newText);\r\n}'),(5528,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.transform(java.awt.geom.AffineTransform)','569','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		the transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || (((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)) != (tx.getType()))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSet(this, ((AffineTransform) (tx.clone())));\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        Point2D.Double anchor = getStartPoint();\r\n        Point2D.Double lead = getEndPoint();\r\n        setBounds(((Point2D.Double) (tx.transform(anchor, anchor))), ((Point2D.Double) (tx.transform(lead, lead))));\r\n        if (((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((SVGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n    invalidate();\r\n}'),(5529,'-init-()','org.jhotdraw.samples.svg.figures.SVGTextFigure.-init-()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGTextFigure() {\r\n    this(\"Text\");\r\n}'),(5530,'-init-(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGTextFigure.-init-(java.lang.String)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public SVGTextFigure(String text) {\r\n    setText(text);\r\n    SVGAttributeKeys.setDefaults(this);\r\n}'),(5531,'canConnect()','org.jhotdraw.samples.svg.figures.SVGTextFigure.canConnect()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','// CONNECTING\r\n@Override\r\npublic boolean canConnect() {\r\n    return false;// SVG does not support connecting\r\n\r\n}'),(5532,'clone()','org.jhotdraw.samples.svg.figures.SVGTextFigure.clone()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public SVGTextFigure clone() {\r\n    SVGTextFigure that = ((SVGTextFigure) (super.clone()));\r\n    that.coordinates = new Point2D.Double[this.coordinates.length];\r\n    for (int i = 0; i < (this.coordinates.length); i++) {\r\n        that.coordinates[i] = ((Point2D.Double) (this.coordinates[i].clone()));\r\n    }\r\n    that.rotates = ((double[]) (this.rotates.clone()));\r\n    that.cachedBounds = null;\r\n    that.cachedDrawingArea = null;\r\n    that.cachedTextShape = null;\r\n    return that;\r\n}'),(5533,'contains(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGTextFigure.contains(java.awt.geom.Point2D$Double)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','/**\r\n * Checks if a Point2D.Double is inside the figure.\r\n */\r\npublic boolean contains(Point2D.Double p) {\r\n    if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n        try {\r\n            p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    return getTextShape().getBounds2D().contains(p);\r\n}'),(5534,'createHandles(int)','org.jhotdraw.samples.svg.figures.SVGTextFigure.createHandles(int)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Collection<Handle> createHandles(int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case -1 :\r\n            // Mouse hover handles\r\n            handles.add(new BoundsOutlineHandle(this, false, true));\r\n            break;\r\n        case 0 :\r\n            handles.add(new BoundsOutlineHandle(this));\r\n            handles.add(new MoveHandle(this, RelativeLocator.northWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.northEast()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southWest()));\r\n            handles.add(new MoveHandle(this, RelativeLocator.southEast()));\r\n            handles.add(new FontSizeHandle(this));\r\n            handles.add(new LinkHandle(this));\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(5535,'drawFill(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGTextFigure.drawFill(java.awt.Graphics2D)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','protected void drawFill(Graphics2D g) {\r\n    g.fill(getTextShape());\r\n}'),(5536,'drawStroke(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGTextFigure.drawStroke(java.awt.Graphics2D)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','protected void drawStroke(Graphics2D g) {\r\n    g.draw(getTextShape());\r\n}'),(5537,'drawText(java.awt.Graphics2D)','org.jhotdraw.samples.svg.figures.SVGTextFigure.drawText(java.awt.Graphics2D)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','// DRAWING\r\nprotected void drawText(Graphics2D g) {\r\n}'),(5538,'findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','org.jhotdraw.samples.svg.figures.SVGTextFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5539,'findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','org.jhotdraw.samples.svg.figures.SVGTextFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(5540,'getBaseline()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getBaseline()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public double getBaseline() {\r\n    return (coordinates[0].y) - (getBounds().y);\r\n}'),(5541,'getBounds()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getBounds()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Rectangle2D.Double getBounds() {\r\n    if ((cachedBounds) == null) {\r\n        cachedBounds = new Rectangle2D.Double();\r\n        cachedBounds.setRect(getTextShape().getBounds2D());\r\n    }\r\n    return ((Rectangle2D.Double) (cachedBounds.clone()));\r\n}'),(5542,'getCoordinates()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getCoordinates()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Point2D.Double[] getCoordinates() {\r\n    Point2D.Double[] c = new Point2D.Double[coordinates.length];\r\n    for (int i = 0; i < (c.length); i++) {\r\n        c[i] = ((Point2D.Double) (coordinates[i].clone()));\r\n    }\r\n    return c;\r\n}'),(5543,'getDrawingArea()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getDrawingArea()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','@Override\r\npublic Rectangle2D.Double getDrawingArea() {\r\n    if ((cachedDrawingArea) == null) {\r\n        Rectangle2D rx = getBounds();\r\n        Rectangle2D.Double r = (rx instanceof Rectangle2D.Double) ? ((Rectangle2D.Double) (rx)) : new Rectangle2D.Double(rx.getX(), rx.getY(), rx.getWidth(), rx.getHeight());\r\n        double g = SVGAttributeKeys.getPerpendicularHitGrowth(this);\r\n        Geom.grow(r, g, g);\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            cachedDrawingArea = r;\r\n        } else {\r\n            cachedDrawingArea = new Rectangle2D.Double();\r\n            cachedDrawingArea.setRect(AttributeKeys.TRANSFORM.get(this).createTransformedShape(r).getBounds2D());\r\n        }\r\n    }\r\n    return ((Rectangle2D.Double) (cachedDrawingArea.clone()));\r\n}'),(5544,'getFillColor()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getFillColor()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Color getFillColor() {\r\n    return ((AttributeKeys.FILL_COLOR.get(this)) == null) || (AttributeKeys.FILL_COLOR.get(this).equals(Color.white)) ? Color.black : Color.WHITE;\r\n    // return FILL_COLOR.get(this);\r\n}'),(5545,'getFont()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getFont()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Font getFont() {\r\n    return SVGAttributeKeys.getFont(this);\r\n}'),(5546,'getFontSize()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getFontSize()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public float getFontSize() {\r\n    // return FONT_SIZE.get(this).floatValue();\r\n    Point2D.Double p = new Point2D.Double(0, AttributeKeys.FONT_SIZE.get(this));\r\n    AffineTransform tx = AttributeKeys.TRANSFORM.get(this);\r\n    if (tx != null) {\r\n        tx.transform(p, p);\r\n        Point2D.Double p0 = new Point2D.Double(0, 0);\r\n        tx.transform(p0, p0);\r\n        p.y -= p0.y;\r\n        /* try {\n        tx.inverseTransform(p, p);\n        } catch (NoninvertibleTransformException ex) {\n        ex.printStackTrace();\n        }\n         */\r\n    }\r\n    return ((float) (Math.abs(p.y)));\r\n}'),(5547,'getInsets()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getInsets()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Insets2D.Double getInsets() {\r\n    return new Insets2D.Double();\r\n}'),(5548,'getLabelFor()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getLabelFor()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public TextHolderFigure getLabelFor() {\r\n    return this;\r\n}'),(5549,'getPreferredSize()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getPreferredSize()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Dimension2DDouble getPreferredSize() {\r\n    Rectangle2D.Double b = getBounds();\r\n    return new Dimension2DDouble(b.width, b.height);\r\n}'),(5550,'getRotates()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getRotates()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public double[] getRotates() {\r\n    return ((double[]) (rotates.clone()));\r\n}'),(5551,'getTabSize()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getTabSize()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','/**\r\n * Gets the number of characters used to expand tabs.\r\n */\r\npublic int getTabSize() {\r\n    return 8;\r\n}'),(5552,'getText()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getText()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','// ATTRIBUTES\r\n/**\r\n * Gets the text shown by the text figure.\r\n */\r\npublic String getText() {\r\n    return ((String) (getAttribute(AttributeKeys.TEXT)));\r\n}'),(5553,'getTextColor()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getTextColor()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Color getTextColor() {\r\n    return AttributeKeys.FILL_COLOR.get(this);\r\n    // return TEXT_COLOR.get(this);\r\n}'),(5554,'getTextColumns()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getTextColumns()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public int getTextColumns() {\r\n    // return (getText() == null) ? 4 : Math.min(getText().length(), 4);\r\n    return 4;\r\n}'),(5555,'getTextShape()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getTextShape()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','private Shape getTextShape() {\r\n    if ((cachedTextShape) == null) {\r\n        String text = getText();\r\n        if ((text == null) || ((text.length()) == 0)) {\r\n            text = \" \";\r\n        }\r\n        FontRenderContext frc = getFontRenderContext();\r\n        HashMap<TextAttribute, Object> textAttributes = new HashMap<TextAttribute, Object>();\r\n        textAttributes.put(TextAttribute.FONT, getFont());\r\n        if (AttributeKeys.FONT_UNDERLINE.get(this)) {\r\n            textAttributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);\r\n        }\r\n        TextLayout textLayout = new TextLayout(text, textAttributes, frc);\r\n        AffineTransform tx = new AffineTransform();\r\n        tx.translate(coordinates[0].x, coordinates[0].y);\r\n        switch (SVGAttributeKeys.TEXT_ANCHOR.get(this)) {\r\n            case END :\r\n                tx.translate((-(textLayout.getAdvance())), 0);\r\n                break;\r\n            case MIDDLE :\r\n                tx.translate(((-(textLayout.getAdvance())) / 2.0), 0);\r\n                break;\r\n            case START :\r\n                break;\r\n        }\r\n        tx.rotate(rotates[0]);\r\n        /* if (TRANSFORM.get(this) != null) {\n        tx.preConcatenate(TRANSFORM.get(this));\n        }\n         */\r\n        cachedTextShape = tx.createTransformedShape(textLayout.getOutline(tx));\r\n        cachedTextShape = textLayout.getOutline(tx);\r\n    }\r\n    return cachedTextShape;\r\n}'),(5556,'getTool(java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGTextFigure.getTool(java.awt.geom.Point2D$Double)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','/**\r\n * Returns a specialized tool for the given coordinate.\r\n * <p>Returns null, if no specialized tool is available.\r\n */\r\n@Override\r\npublic Tool getTool(Point2D.Double p) {\r\n    if ((isEditable()) && (contains(p))) {\r\n        TextEditingTool tool = new TextEditingTool(this);\r\n        return tool;\r\n    }\r\n    return null;\r\n}'),(5557,'getTransformRestoreData()','org.jhotdraw.samples.svg.figures.SVGTextFigure.getTransformRestoreData()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public Object getTransformRestoreData() {\r\n    Point2D.Double[] restoredCoordinates = ((Point2D.Double[]) (this.coordinates.clone()));\r\n    for (int i = 0; i < (this.coordinates.length); i++) {\r\n        restoredCoordinates[i] = ((Point2D.Double) (this.coordinates[i].clone()));\r\n    }\r\n    return new Object[]{ AttributeKeys.TRANSFORM.getClone(this), restoredCoordinates, SVGAttributeKeys.FILL_GRADIENT.getClone(this), SVGAttributeKeys.STROKE_GRADIENT.getClone(this) };\r\n}'),(5558,'invalidate()','org.jhotdraw.samples.svg.figures.SVGTextFigure.invalidate()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','// EDITING\r\n// CONNECTING\r\n@Override\r\npublic void invalidate() {\r\n    super.invalidate();\r\n    cachedTextShape = null;\r\n    cachedBounds = null;\r\n    cachedDrawingArea = null;\r\n}'),(5559,'isEditable()','org.jhotdraw.samples.svg.figures.SVGTextFigure.isEditable()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public boolean isEditable() {\r\n    return editable;\r\n}'),(5560,'isEmpty()','org.jhotdraw.samples.svg.figures.SVGTextFigure.isEmpty()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public boolean isEmpty() {\r\n    return ((getText()) == null) || ((getText().length()) == 0);\r\n}'),(5561,'isTextOverflow()','org.jhotdraw.samples.svg.figures.SVGTextFigure.isTextOverflow()','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public boolean isTextOverflow() {\r\n    return false;\r\n}'),(5562,'restoreTransformTo(java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGTextFigure.restoreTransformTo(java.lang.Object)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public void restoreTransformTo(Object geometry) {\r\n    Object[] restoreData = ((Object[]) (geometry));\r\n    AttributeKeys.TRANSFORM.basicSetClone(this, ((AffineTransform) (restoreData[0])));\r\n    Point2D.Double[] restoredCoordinates = ((Point2D.Double[]) (restoreData[1]));\r\n    for (int i = 0; i < (this.coordinates.length); i++) {\r\n        coordinates[i] = ((Point2D.Double) (restoredCoordinates[i].clone()));\r\n    }\r\n    SVGAttributeKeys.FILL_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[2])));\r\n    SVGAttributeKeys.STROKE_GRADIENT.basicSetClone(this, ((Gradient) (restoreData[3])));\r\n    invalidate();\r\n}'),(5563,'setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','org.jhotdraw.samples.svg.figures.SVGTextFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((((key.equals(SVGAttributeKeys.TRANSFORM)) || (key.equals(SVGAttributeKeys.FONT_FACE))) || (key.equals(SVGAttributeKeys.FONT_BOLD))) || (key.equals(SVGAttributeKeys.FONT_ITALIC))) || (key.equals(SVGAttributeKeys.FONT_SIZE))) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(5564,'setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','org.jhotdraw.samples.svg.figures.SVGTextFigure.setBounds(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public void setBounds(Point2D.Double anchor, Point2D.Double lead) {\r\n    coordinates = new Point2D.Double[]{ new Point2D.Double(anchor.x, anchor.y) };\r\n    rotates = new double[]{ 0.0 };\r\n}'),(5565,'setCoordinates(java.awt.geom.Point2D$Double[])','org.jhotdraw.samples.svg.figures.SVGTextFigure.setCoordinates(java.awt.geom.Point2D$Double[])','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','// SHAPE AND BOUNDS\r\npublic void setCoordinates(Point2D.Double[] coordinates) {\r\n    this.coordinates = coordinates;\r\n    invalidate();\r\n}'),(5566,'setEditable(boolean)','org.jhotdraw.samples.svg.figures.SVGTextFigure.setEditable(boolean)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public void setEditable(boolean b) {\r\n    this.editable = b;\r\n}'),(5567,'setFontSize(float)','org.jhotdraw.samples.svg.figures.SVGTextFigure.setFontSize(float)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public void setFontSize(float size) {\r\n    // FONT_SIZE.basicSet(this, new Double(size));\r\n    Point2D.Double p = new Point2D.Double(0, size);\r\n    AffineTransform tx = AttributeKeys.TRANSFORM.get(this);\r\n    if (tx != null) {\r\n        try {\r\n            tx.inverseTransform(p, p);\r\n            Point2D.Double p0 = new Point2D.Double(0, 0);\r\n            tx.inverseTransform(p0, p0);\r\n            p.y -= p0.y;\r\n        } catch (NoninvertibleTransformException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    AttributeKeys.FONT_SIZE.set(this, Math.abs(p.y));\r\n}'),(5568,'setRotates(double[])','org.jhotdraw.samples.svg.figures.SVGTextFigure.setRotates(double[])','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','public void setRotates(double[] rotates) {\r\n    this.rotates = rotates;\r\n    invalidate();\r\n}'),(5569,'setText(java.lang.String)','org.jhotdraw.samples.svg.figures.SVGTextFigure.setText(java.lang.String)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','/**\r\n * Sets the text shown by the text figure.\r\n */\r\npublic void setText(String newText) {\r\n    AttributeKeys.TEXT.set(this, newText);\r\n}'),(5570,'transform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.figures.SVGTextFigure.transform(java.awt.geom.AffineTransform)','570','org.jhotdraw.samples.svg.figures.SVGTextFigure','/**\r\n * Transforms the figure.\r\n *\r\n * @param tx\r\n * 		the transformation.\r\n */\r\npublic void transform(AffineTransform tx) {\r\n    if (((AttributeKeys.TRANSFORM.get(this)) != null) || ((tx.getType()) != ((tx.getType()) & (AffineTransform.TYPE_TRANSLATION)))) {\r\n        if ((AttributeKeys.TRANSFORM.get(this)) == null) {\r\n            AttributeKeys.TRANSFORM.basicSet(this, ((AffineTransform) (tx.clone())));\r\n        } else {\r\n            AffineTransform t = AttributeKeys.TRANSFORM.getClone(this);\r\n            t.preConcatenate(tx);\r\n            AttributeKeys.TRANSFORM.basicSet(this, t);\r\n        }\r\n    } else {\r\n        for (int i = 0; i < (coordinates.length); i++) {\r\n            tx.transform(coordinates[i], coordinates[i]);\r\n        }\r\n        if (((SVGAttributeKeys.FILL_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.FILL_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.FILL_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.FILL_GRADIENT.basicSet(this, g);\r\n        }\r\n        if (((SVGAttributeKeys.STROKE_GRADIENT.get(this)) != null) && (!(SVGAttributeKeys.STROKE_GRADIENT.get(this).isRelativeToFigureBounds()))) {\r\n            Gradient g = SVGAttributeKeys.STROKE_GRADIENT.getClone(this);\r\n            g.transform(tx);\r\n            SVGAttributeKeys.STROKE_GRADIENT.basicSet(this, g);\r\n        }\r\n    }\r\n    invalidate();\r\n}'),(5571,'-init-()','org.jhotdraw.samples.svg.gui.AbstractToolBar.-init-()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','/**\r\n * Creates new form.\r\n */\r\npublic AbstractToolBar() {\r\n    initComponents();\r\n    try {\r\n        prefs = Preferences.userNodeForPackage(getClass());\r\n    } catch (SecurityException e) {\r\n        // prefs is null, because we are not permitted to read preferences\r\n    }\r\n}'),(5572,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.AbstractToolBar.createDisclosedComponent(int)','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','/* abstract */\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    return null;\r\n}'),(5573,'getDefaultDisclosureState()','org.jhotdraw.samples.svg.gui.AbstractToolBar.getDefaultDisclosureState()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','protected int getDefaultDisclosureState() {\r\n    return 0;\r\n}'),(5574,'getDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.AbstractToolBar.getDisclosedComponent(int)','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','@Override\r\nprotected final JComponent getDisclosedComponent(int state) {\r\n    if ((panels) == null) {\r\n        panels = new JPanel[getDisclosureStateCount()];\r\n        for (int i = 0; i < (panels.length); i++) {\r\n            panels[i] = new AbstractToolBar.ProxyPanel();\r\n        }\r\n    }\r\n    return panels[state];\r\n}'),(5575,'getEditor()','org.jhotdraw.samples.svg.gui.AbstractToolBar.getEditor()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','public DrawingEditor getEditor() {\r\n    return editor;\r\n}'),(5576,'getEventHandler()','org.jhotdraw.samples.svg.gui.AbstractToolBar.getEventHandler()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','protected PropertyChangeListener getEventHandler() {\r\n    if ((eventHandler) == null) {\r\n        eventHandler = new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name == (JDisclosureToolBar.DISCLOSURE_STATE_PROPERTY)) {\r\n                    try {\r\n                        prefs.putInt(((getID()) + \".disclosureState\"), ((Integer) (evt.getNewValue())));\r\n                    } catch (IllegalStateException e) {\r\n                        // This happens, due to a bug in Apples implementation\r\n                        // of the Preferences class.\r\n                        System.err.println(\"Warning AbstractToolBar caught IllegalStateException of Preferences class\");\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    return eventHandler;\r\n}'),(5577,'getID()','org.jhotdraw.samples.svg.gui.AbstractToolBar.getID()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','/**\r\n * This should be an abstract method, but the NetBeans GUI builder\r\n * doesnt support abstract beans.\r\n *\r\n * @return The ID used to retrieve labels and store user preferences.\r\n */\r\nprotected String getID() {\r\n    return \"\";\r\n}'),(5578,'init()','org.jhotdraw.samples.svg.gui.AbstractToolBar.init()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','/**\r\n * This should be an abstract method, but the NetBeans GUI builder\r\n * doesnt support abstract beans.\r\n */\r\nprotected void init() {\r\n}'),(5579,'initComponents()','org.jhotdraw.samples.svg.gui.AbstractToolBar.initComponents()','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5580,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.AbstractToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','572','org.jhotdraw.samples.svg.gui.AbstractToolBar','public void setEditor(DrawingEditor editor) {\r\n    if ((this.editor) != null) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.editor = editor;\r\n    if (editor != null) {\r\n        init();\r\n        setDisclosureState(Math.max(0, Math.min(getDisclosureStateCount(), prefs.getInt(((getID()) + \".disclosureState\"), getDefaultDisclosureState()))));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}'),(5581,'-init-()','org.jhotdraw.samples.svg.gui.AbstractToolBar$ProxyPanel.-init-()','571','org.jhotdraw.samples.svg.gui.AbstractToolBar$ProxyPanel','public ProxyPanel() {\r\n    setOpaque(false);\r\n    setBackground(Color.GREEN);\r\n    // The paint method is only called, if the proxy panel is at least\r\n    // one pixel wide and high.\r\n    setLayout(new FlowLayout(FlowLayout.LEFT, 1, 1));\r\n}'),(5582,'paint(java.awt.Graphics)','org.jhotdraw.samples.svg.gui.AbstractToolBar$ProxyPanel.paint(java.awt.Graphics)','571','org.jhotdraw.samples.svg.gui.AbstractToolBar$ProxyPanel','@Override\r\npublic void paint(Graphics g) {\r\n    super.paint(g);\r\n    final int state = getDisclosureState();\r\n    if ((runner) == null) {\r\n        runner = new Runnable() {\r\n            public void run() {\r\n                try {\r\n                    // long start = System.currentTimeMillis();\r\n                    panels[state] = createDisclosedComponent(state);\r\n                } catch (Throwable t) {\r\n                    t.printStackTrace();\r\n                    panels[state] = null;\r\n                }\r\n                // long end = System.currentTimeMillis();\r\n                // System.out.println(AbstractToolBar.this.getClass()+\" state:\"+state+\" elapsed:\"+(end-start));\r\n                JComponent parent = ((JComponent) (getParent()));\r\n                if (parent != null) {\r\n                    GridBagLayout layout = ((GridBagLayout) (parent.getLayout()));\r\n                    GridBagConstraints gbc = layout.getConstraints(AbstractToolBar.ProxyPanel.this);\r\n                    parent.remove(AbstractToolBar.ProxyPanel.this);\r\n                    if ((getDisclosureState()) == state) {\r\n                        if ((panels[state]) != null) {\r\n                            parent.add(panels[state], gbc);\r\n                        } else {\r\n                            JPanel empty = new JPanel(new BorderLayout());\r\n                            empty.setOpaque(false);\r\n                            parent.add(empty, gbc);\r\n                        }\r\n                    }\r\n                    parent.revalidate();\r\n                    ((JComponent) (parent.getRootPane().getContentPane())).revalidate();\r\n                }\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n}'),(5583,'-init-()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.-init-()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','AbstractToolBarBeanInfo() {\r\n}'),(5584,'getBdescriptor()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getBdescriptor()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((AbstractToolBarBeanInfo.beanDescriptor) == null)\r\n        AbstractToolBarBeanInfo.beanDescriptor = new BeanDescriptor(AbstractToolBarBeanInfo.class);\r\n\r\n    AbstractToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    AbstractToolBarBeanInfo.beanDescriptor.setDisplayName(\"AbstractToolBar\");\r\n    return AbstractToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5585,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getBeanDescriptor()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return AbstractToolBarBeanInfo.getBdescriptor();\r\n}'),(5586,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getDefaultEventIndex()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return AbstractToolBarBeanInfo.defaultEventIndex;\r\n}'),(5587,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getDefaultPropertyIndex()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return AbstractToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5588,'getEdescriptor()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getEdescriptor()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return AbstractToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5589,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getEventSetDescriptors()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return AbstractToolBarBeanInfo.getEdescriptor();\r\n}'),(5590,'getIcon(int)','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getIcon(int)','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((AbstractToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((AbstractToolBarBeanInfo.iconColor16) == null)\r\n                    AbstractToolBarBeanInfo.iconColor16 = loadImage(AbstractToolBarBeanInfo.iconNameC16);\r\n\r\n                return AbstractToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((AbstractToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((AbstractToolBarBeanInfo.iconColor32) == null)\r\n                    AbstractToolBarBeanInfo.iconColor32 = loadImage(AbstractToolBarBeanInfo.iconNameC32);\r\n\r\n                return AbstractToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((AbstractToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((AbstractToolBarBeanInfo.iconMono16) == null)\r\n                    AbstractToolBarBeanInfo.iconMono16 = loadImage(AbstractToolBarBeanInfo.iconNameM16);\r\n\r\n                return AbstractToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((AbstractToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((AbstractToolBarBeanInfo.iconMono32) == null)\r\n                    AbstractToolBarBeanInfo.iconMono32 = loadImage(AbstractToolBarBeanInfo.iconNameM32);\r\n\r\n                return AbstractToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5591,'getMdescriptor()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getMdescriptor()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return AbstractToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5592,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getMethodDescriptors()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return AbstractToolBarBeanInfo.getMdescriptor();\r\n}'),(5593,'getPdescriptor()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getPdescriptor()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return AbstractToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5594,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo.getPropertyDescriptors()','573','org.jhotdraw.samples.svg.gui.AbstractToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return AbstractToolBarBeanInfo.getPdescriptor();\r\n}'),(5595,'-init-()','org.jhotdraw.samples.svg.gui.ActionsToolBar.-init-()','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic ActionsToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n}'),(5596,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.ActionsToolBar.createDisclosedComponent(int)','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                Preferences prefs = Preferences.userNodeForPackage(getClass());\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                btn = new JButton(undoManager.getUndoAction());\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.setText(null);\r\n                labels.configureToolBarButton(btn, \"edit.undo\");\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                gbc.gridx = 0;\r\n                p.add(btn, gbc);\r\n                btn = new JButton(undoManager.getRedoAction());\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.setText(null);\r\n                labels.configureToolBarButton(btn, \"edit.redo\");\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createPickAttributesButton(editor);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                labels.configureToolBarButton(btn, \"attributesPick\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createApplyAttributesButton(editor);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                labels.configureToolBarButton(btn, \"attributesApply\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                JPopupButton pb = new JPopupButton();\r\n                pb.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(pb))));\r\n                pb.setItemFont(UIManager.getFont(\"MenuItem.font\"));\r\n                labels.configureToolBarButton(pb, \"actions\");\r\n                pb.add(new DuplicateAction());\r\n                pb.addSeparator();\r\n                pb.add(new GroupAction(editor, new SVGGroupFigure()));\r\n                pb.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n                pb.addSeparator();\r\n                pb.add(new CutAction());\r\n                pb.add(new CopyAction());\r\n                pb.add(new PasteAction());\r\n                pb.add(new SelectAllAction());\r\n                pb.add(new SelectSameAction(editor));\r\n                pb.add(new ClearSelectionAction());\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(pb, gbc);\r\n                break;\r\n            }\r\n    }\r\n    return p;\r\n}'),(5597,'getDefaultDisclosureState()','org.jhotdraw.samples.svg.gui.ActionsToolBar.getDefaultDisclosureState()','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','protected int getDefaultDisclosureState() {\r\n    return 1;\r\n}'),(5598,'getID()','org.jhotdraw.samples.svg.gui.ActionsToolBar.getID()','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','@Override\r\nprotected String getID() {\r\n    return \"actions\";\r\n}'),(5599,'getToggleGridAction()','org.jhotdraw.samples.svg.gui.ActionsToolBar.getToggleGridAction()','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','public ToggleGridAction getToggleGridAction() {\r\n    return toggleGridAction;\r\n}'),(5600,'initComponents()','org.jhotdraw.samples.svg.gui.ActionsToolBar.initComponents()','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5601,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.ActionsToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    if (((this.editor) != null) && ((undoManager) != null)) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.editor = newValue;\r\n    if (((editor) != null) && ((undoManager) != null)) {\r\n        init();\r\n        setDisclosureState(prefs.getInt(((getID()) + \".disclosureState\"), 1));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}'),(5602,'setUndoManager(org.jhotdraw.undo.UndoRedoManager)','org.jhotdraw.samples.svg.gui.ActionsToolBar.setUndoManager(org.jhotdraw.undo.UndoRedoManager)','574','org.jhotdraw.samples.svg.gui.ActionsToolBar','public void setUndoManager(UndoRedoManager newValue) {\r\n    if (((this.editor) != null) && (newValue != null)) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.undoManager = newValue;\r\n    if (((editor) != null) && (newValue != null)) {\r\n        init();\r\n        setDisclosureState(prefs.getInt(((getID()) + \".disclosureState\"), 1));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}'),(5603,'-init-()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.-init-()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','ActionsToolBarBeanInfo() {\r\n}'),(5604,'getBdescriptor()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getBdescriptor()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((ActionsToolBarBeanInfo.beanDescriptor) == null)\r\n        ActionsToolBarBeanInfo.beanDescriptor = new BeanDescriptor(ActionsToolBarBeanInfo.class);\r\n\r\n    ActionsToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    ActionsToolBarBeanInfo.beanDescriptor.setDisplayName(\"ActionToolPane\");\r\n    return ActionsToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5605,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getBeanDescriptor()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return ActionsToolBarBeanInfo.getBdescriptor();\r\n}'),(5606,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getDefaultEventIndex()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return ActionsToolBarBeanInfo.defaultEventIndex;\r\n}'),(5607,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getDefaultPropertyIndex()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return ActionsToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5608,'getEdescriptor()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getEdescriptor()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return ActionsToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5609,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getEventSetDescriptors()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return ActionsToolBarBeanInfo.getEdescriptor();\r\n}'),(5610,'getIcon(int)','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getIcon(int)','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((ActionsToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((ActionsToolBarBeanInfo.iconColor16) == null)\r\n                    ActionsToolBarBeanInfo.iconColor16 = loadImage(ActionsToolBarBeanInfo.iconNameC16);\r\n\r\n                return ActionsToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((ActionsToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((ActionsToolBarBeanInfo.iconColor32) == null)\r\n                    ActionsToolBarBeanInfo.iconColor32 = loadImage(ActionsToolBarBeanInfo.iconNameC32);\r\n\r\n                return ActionsToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((ActionsToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((ActionsToolBarBeanInfo.iconMono16) == null)\r\n                    ActionsToolBarBeanInfo.iconMono16 = loadImage(ActionsToolBarBeanInfo.iconNameM16);\r\n\r\n                return ActionsToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((ActionsToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((ActionsToolBarBeanInfo.iconMono32) == null)\r\n                    ActionsToolBarBeanInfo.iconMono32 = loadImage(ActionsToolBarBeanInfo.iconNameM32);\r\n\r\n                return ActionsToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5611,'getMdescriptor()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getMdescriptor()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return ActionsToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5612,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getMethodDescriptors()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return ActionsToolBarBeanInfo.getMdescriptor();\r\n}'),(5613,'getPdescriptor()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getPdescriptor()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return ActionsToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5614,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo.getPropertyDescriptors()','575','org.jhotdraw.samples.svg.gui.ActionsToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return ActionsToolBarBeanInfo.getPdescriptor();\r\n}'),(5615,'-init-()','org.jhotdraw.samples.svg.gui.AlignToolBar.-init-()','576','org.jhotdraw.samples.svg.gui.AlignToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic AlignToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n}'),(5616,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.AlignToolBar.createDisclosedComponent(int)','576','org.jhotdraw.samples.svg.gui.AlignToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                btn = new JButton(new AlignAction.West(editor, labels));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.setText(null);\r\n                p.add(btn, gbc);\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                btn = new JButton(new AlignAction.East(editor, labels));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                btn.setText(null);\r\n                p.add(btn, gbc);\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                btn = new JButton(new AlignAction.North(editor, labels));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                btn.setText(null);\r\n                p.add(btn, gbc);\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                btn = new JButton(new AlignAction.South(editor, labels));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                btn.setText(null);\r\n                p.add(btn, gbc);\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                btn = new JButton(new AlignAction.Horizontal(editor, labels));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                btn.setText(null);\r\n                p.add(btn, gbc);\r\n                gbc.gridx = 1;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                btn = new JButton(new AlignAction.Vertical(editor, labels));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                btn.setText(null);\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5617,'getID()','org.jhotdraw.samples.svg.gui.AlignToolBar.getID()','576','org.jhotdraw.samples.svg.gui.AlignToolBar','@Override\r\nprotected String getID() {\r\n    return \"align\";\r\n}'),(5618,'initComponents()','org.jhotdraw.samples.svg.gui.AlignToolBar.initComponents()','576','org.jhotdraw.samples.svg.gui.AlignToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5619,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.AlignToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','576','org.jhotdraw.samples.svg.gui.AlignToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n        displayer.setMinSelectionCount(2);\r\n        displayer.setVisibleIfCreationTool(false);\r\n    }\r\n}'),(5620,'-init-()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.-init-()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','AlignToolBarBeanInfo() {\r\n}'),(5621,'getBdescriptor()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getBdescriptor()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((AlignToolBarBeanInfo.beanDescriptor) == null)\r\n        AlignToolBarBeanInfo.beanDescriptor = new BeanDescriptor(AlignToolBarBeanInfo.class);\r\n\r\n    AlignToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    AlignToolBarBeanInfo.beanDescriptor.setDisplayName(\"AlignToolPane\");\r\n    return AlignToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5622,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getBeanDescriptor()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return AlignToolBarBeanInfo.getBdescriptor();\r\n}'),(5623,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getDefaultEventIndex()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return AlignToolBarBeanInfo.defaultEventIndex;\r\n}'),(5624,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getDefaultPropertyIndex()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return AlignToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5625,'getEdescriptor()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getEdescriptor()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return AlignToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5626,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getEventSetDescriptors()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return AlignToolBarBeanInfo.getEdescriptor();\r\n}'),(5627,'getIcon(int)','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getIcon(int)','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((AlignToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((AlignToolBarBeanInfo.iconColor16) == null)\r\n                    AlignToolBarBeanInfo.iconColor16 = loadImage(AlignToolBarBeanInfo.iconNameC16);\r\n\r\n                return AlignToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((AlignToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((AlignToolBarBeanInfo.iconColor32) == null)\r\n                    AlignToolBarBeanInfo.iconColor32 = loadImage(AlignToolBarBeanInfo.iconNameC32);\r\n\r\n                return AlignToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((AlignToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((AlignToolBarBeanInfo.iconMono16) == null)\r\n                    AlignToolBarBeanInfo.iconMono16 = loadImage(AlignToolBarBeanInfo.iconNameM16);\r\n\r\n                return AlignToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((AlignToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((AlignToolBarBeanInfo.iconMono32) == null)\r\n                    AlignToolBarBeanInfo.iconMono32 = loadImage(AlignToolBarBeanInfo.iconNameM32);\r\n\r\n                return AlignToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5628,'getMdescriptor()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getMdescriptor()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return AlignToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5629,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getMethodDescriptors()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return AlignToolBarBeanInfo.getMdescriptor();\r\n}'),(5630,'getPdescriptor()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getPdescriptor()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return AlignToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5631,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo.getPropertyDescriptors()','577','org.jhotdraw.samples.svg.gui.AlignToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return AlignToolBarBeanInfo.getPdescriptor();\r\n}'),(5632,'-init-()','org.jhotdraw.samples.svg.gui.ArrangeToolBar.-init-()','578','org.jhotdraw.samples.svg.gui.ArrangeToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic ArrangeToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n}'),(5633,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.ArrangeToolBar.createDisclosedComponent(int)','578','org.jhotdraw.samples.svg.gui.ArrangeToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                btn = new JButton(new BringToFrontAction(editor));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.setText(null);\r\n                labels.configureToolBarButton(btn, BringToFrontAction.ID);\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.EAST;\r\n                p.add(btn, gbc);\r\n                btn = new JButton(new SendToBackAction(editor));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.setText(null);\r\n                labels.configureToolBarButton(btn, SendToBackAction.ID);\r\n                btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.NORTH;\r\n                gbc.weighty = 1.0F;\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5634,'getID()','org.jhotdraw.samples.svg.gui.ArrangeToolBar.getID()','578','org.jhotdraw.samples.svg.gui.ArrangeToolBar','@Override\r\nprotected String getID() {\r\n    return \"arrange\";\r\n}'),(5635,'initComponents()','org.jhotdraw.samples.svg.gui.ArrangeToolBar.initComponents()','578','org.jhotdraw.samples.svg.gui.ArrangeToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5636,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.ArrangeToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','578','org.jhotdraw.samples.svg.gui.ArrangeToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n        displayer.setVisibleIfCreationTool(false);\r\n    }\r\n}'),(5637,'-init-()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.-init-()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','ArrangeToolBarBeanInfo() {\r\n}'),(5638,'getBdescriptor()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getBdescriptor()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((ArrangeToolBarBeanInfo.beanDescriptor) == null)\r\n        ArrangeToolBarBeanInfo.beanDescriptor = new BeanDescriptor(ArrangeToolBarBeanInfo.class);\r\n\r\n    ArrangeToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    ArrangeToolBarBeanInfo.beanDescriptor.setDisplayName(\"AlignToolPane\");\r\n    return ArrangeToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5639,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getBeanDescriptor()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return ArrangeToolBarBeanInfo.getBdescriptor();\r\n}'),(5640,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getDefaultEventIndex()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return ArrangeToolBarBeanInfo.defaultEventIndex;\r\n}'),(5641,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getDefaultPropertyIndex()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return ArrangeToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5642,'getEdescriptor()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getEdescriptor()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return ArrangeToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5643,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getEventSetDescriptors()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return ArrangeToolBarBeanInfo.getEdescriptor();\r\n}'),(5644,'getIcon(int)','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getIcon(int)','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((ArrangeToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((ArrangeToolBarBeanInfo.iconColor16) == null)\r\n                    ArrangeToolBarBeanInfo.iconColor16 = loadImage(ArrangeToolBarBeanInfo.iconNameC16);\r\n\r\n                return ArrangeToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((ArrangeToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((ArrangeToolBarBeanInfo.iconColor32) == null)\r\n                    ArrangeToolBarBeanInfo.iconColor32 = loadImage(ArrangeToolBarBeanInfo.iconNameC32);\r\n\r\n                return ArrangeToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((ArrangeToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((ArrangeToolBarBeanInfo.iconMono16) == null)\r\n                    ArrangeToolBarBeanInfo.iconMono16 = loadImage(ArrangeToolBarBeanInfo.iconNameM16);\r\n\r\n                return ArrangeToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((ArrangeToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((ArrangeToolBarBeanInfo.iconMono32) == null)\r\n                    ArrangeToolBarBeanInfo.iconMono32 = loadImage(ArrangeToolBarBeanInfo.iconNameM32);\r\n\r\n                return ArrangeToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5645,'getMdescriptor()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getMdescriptor()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return ArrangeToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5646,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getMethodDescriptors()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return ArrangeToolBarBeanInfo.getMdescriptor();\r\n}'),(5647,'getPdescriptor()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getPdescriptor()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return ArrangeToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5648,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo.getPropertyDescriptors()','579','org.jhotdraw.samples.svg.gui.ArrangeToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return ArrangeToolBarBeanInfo.getPdescriptor();\r\n}'),(5649,'-init-()','org.jhotdraw.samples.svg.gui.CanvasToolBar.-init-()','580','org.jhotdraw.samples.svg.gui.CanvasToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic CanvasToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n    setDisclosureStateCount(3);\r\n}'),(5650,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.CanvasToolBar.createDisclosedComponent(int)','580','org.jhotdraw.samples.svg.gui.CanvasToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.removeAll();\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Fill color\r\n                btn = ButtonFactory.createDrawingColorButton(editor, AttributeKeys.CANVAS_FILL_COLOR, ButtonFactory.HSV_COLORS, ButtonFactory.HSV_COLORS_COLUMN_COUNT, \"attribute.canvasFillColor\", labels, null, new Rectangle(3, 3, 10, 10));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                new DrawingComponentRepainter(editor, btn);\r\n                ((JPopupButton) (btn)).setAction(null, null);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                gbc.gridwidth = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(btn, gbc);\r\n                // Opacity slider\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_FILL_OPACITY, opacitySlider, editor);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.canvasFillOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new DrawingOpacityIcon(editor, AttributeKeys.CANVAS_FILL_OPACITY, AttributeKeys.CANVAS_FILL_COLOR, null, getClass().getResource(labels.getString(\"attribute.canvasFillOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                new DrawingComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                p.add(opacityPopupButton, gbc);\r\n                // Width and height fields\r\n                JLabel widthLabel;\r\n                JLabel heightLabel;\r\n                JAttributeTextField<Double> widthField;\r\n                JAttributeTextField<Double> heightField;\r\n                widthLabel = new JLabel();\r\n                heightLabel = new JLabel();\r\n                widthField = new JAttributeTextField<Double>();\r\n                heightField = new JAttributeTextField<Double>();\r\n                widthLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(widthLabel))));\r\n                widthLabel.setLabelFor(widthField);\r\n                widthLabel.setToolTipText(labels.getString(\"attribute.canvasWidth.toolTipText\"));\r\n                widthLabel.setText(labels.getString(\"attribute.canvasWidth.text\"));// NOI18N\r\n\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(widthLabel, gbc);\r\n                widthField.setUI(((TextUI) (PaletteFormattedTextFieldUI.createUI(widthField))));\r\n                widthField.setColumns(3);\r\n                widthField.setToolTipText(labels.getString(\"attribute.canvasWidth.toolTipText\"));\r\n                widthField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(1.0, 4096.0, 1.0, true, false));\r\n                widthField.setHorizontalAlignment(JTextField.LEADING);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_WIDTH, widthField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 1;\r\n                gbc.gridwidth = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(widthField, gbc);\r\n                heightLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(heightLabel))));\r\n                heightLabel.setLabelFor(widthField);\r\n                heightLabel.setToolTipText(labels.getString(\"attribute.canvasHeight.toolTipText\"));\r\n                heightLabel.setText(labels.getString(\"attribute.canvasHeight.text\"));// NOI18N\r\n\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(heightLabel, gbc);\r\n                heightField.setUI(((TextUI) (PaletteFormattedTextFieldUI.createUI(widthField))));\r\n                heightField.setColumns(3);\r\n                heightField.setToolTipText(labels.getString(\"attribute.canvasHeight.toolTipText\"));\r\n                heightField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(1.0, 4096.0, 1.0, true, false));\r\n                heightField.setHorizontalAlignment(JTextField.LEADING);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_HEIGHT, heightField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                gbc.gridwidth = 2;\r\n                p.add(heightField, gbc);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                JPanel p1 = new JPanel(new GridBagLayout());\r\n                JPanel p2 = new JPanel(new GridBagLayout());\r\n                JPanel p3 = new JPanel(new GridBagLayout());\r\n                p1.setOpaque(false);\r\n                p2.setOpaque(false);\r\n                p3.setOpaque(false);\r\n                p.removeAll();\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Fill color field with button\r\n                JAttributeTextField<Color> colorField = new JAttributeTextField<Color>();\r\n                colorField.setColumns(7);\r\n                colorField.setToolTipText(labels.getString(\"attribute.canvasFillColor.toolTipText\"));\r\n                colorField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                colorField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(colorField))));\r\n                colorField.setFormatterFactory(ColorFormatter.createFormatterFactory());\r\n                colorField.setHorizontalAlignment(JTextField.LEFT);\r\n                new DrawingAttributeEditorHandler<Color>(AttributeKeys.CANVAS_FILL_COLOR, colorField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridwidth = 2;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p1.add(colorField, gbc);\r\n                btn = ButtonFactory.createDrawingColorButton(editor, AttributeKeys.CANVAS_FILL_COLOR, ButtonFactory.HSV_COLORS, ButtonFactory.HSV_COLORS_COLUMN_COUNT, \"attribute.canvasFillColor\", labels, null, new Rectangle(3, 3, 10, 10));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                new DrawingComponentRepainter(editor, btn);\r\n                ((JPopupButton) (btn)).setAction(null, null);\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p1.add(btn, gbc);\r\n                // Opacity field with slider\r\n                JAttributeTextField<Double> opacityField = new JAttributeTextField<Double>();\r\n                opacityField.setColumns(3);\r\n                opacityField.setToolTipText(labels.getString(\"attribute.figureOpacity.toolTipText\"));\r\n                opacityField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                opacityField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                opacityField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(opacityField))));\r\n                opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 100.0, 100.0, true, false));\r\n                opacityField.setHorizontalAlignment(JTextField.LEADING);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_FILL_OPACITY, opacityField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p1.add(opacityField, gbc);\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_FILL_OPACITY, opacitySlider, editor);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.canvasFillOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new DrawingOpacityIcon(editor, AttributeKeys.CANVAS_FILL_OPACITY, AttributeKeys.CANVAS_FILL_COLOR, null, getClass().getResource(labels.getString(\"attribute.canvasFillOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                new DrawingComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p1.add(opacityPopupButton, gbc);\r\n                // Width and height fields\r\n                JLabel widthLabel;\r\n                JLabel heightLabel;\r\n                JAttributeTextField<Double> widthField;\r\n                JAttributeTextField<Double> heightField;\r\n                widthLabel = new JLabel();\r\n                heightLabel = new JLabel();\r\n                widthField = new JAttributeTextField<Double>();\r\n                heightField = new JAttributeTextField<Double>();\r\n                widthLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(widthLabel))));\r\n                widthLabel.setLabelFor(widthField);\r\n                widthLabel.setToolTipText(labels.getString(\"attribute.canvasWidth.toolTipText\"));\r\n                widthLabel.setText(labels.getString(\"attribute.canvasWidth.text\"));// NOI18N\r\n\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p3.add(widthLabel, gbc);\r\n                widthField.setUI(((TextUI) (PaletteFormattedTextFieldUI.createUI(widthField))));\r\n                widthField.setColumns(3);\r\n                widthField.setToolTipText(labels.getString(\"attribute.canvasWidth.toolTipText\"));\r\n                widthField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(1.0, 4096.0, 1.0, true, false));\r\n                widthField.setHorizontalAlignment(JTextField.LEADING);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_WIDTH, widthField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 2;\r\n                gbc.gridwidth = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p3.add(widthField, gbc);\r\n                heightLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(heightLabel))));\r\n                heightLabel.setLabelFor(widthField);\r\n                heightLabel.setToolTipText(labels.getString(\"attribute.canvasHeight.toolTipText\"));\r\n                heightLabel.setText(labels.getString(\"attribute.canvasHeight.text\"));// NOI18N\r\n\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 3;\r\n                gbc.gridy = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p3.add(heightLabel, gbc);\r\n                heightField.setUI(((TextUI) (PaletteFormattedTextFieldUI.createUI(widthField))));\r\n                heightField.setColumns(3);\r\n                heightField.setToolTipText(labels.getString(\"attribute.canvasHeight.toolTipText\"));\r\n                heightField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(1.0, 4096.0, 1.0, true, false));\r\n                heightField.setHorizontalAlignment(JTextField.LEADING);\r\n                new DrawingAttributeEditorHandler<Double>(AttributeKeys.CANVAS_HEIGHT, heightField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 4;\r\n                gbc.gridy = 2;\r\n                gbc.gridwidth = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p3.add(heightField, gbc);\r\n                // Add horizontal strips\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(p1, gbc);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(p2, gbc);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(p3, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5651,'getID()','org.jhotdraw.samples.svg.gui.CanvasToolBar.getID()','580','org.jhotdraw.samples.svg.gui.CanvasToolBar','@Override\r\nprotected String getID() {\r\n    return \"canvas\";\r\n}'),(5652,'initComponents()','org.jhotdraw.samples.svg.gui.CanvasToolBar.initComponents()','580','org.jhotdraw.samples.svg.gui.CanvasToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5653,'-init-()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.-init-()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','CanvasToolBarBeanInfo() {\r\n}'),(5654,'getBdescriptor()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getBdescriptor()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((CanvasToolBarBeanInfo.beanDescriptor) == null)\r\n        CanvasToolBarBeanInfo.beanDescriptor = new BeanDescriptor(CanvasToolBarBeanInfo.class);\r\n\r\n    CanvasToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    CanvasToolBarBeanInfo.beanDescriptor.setDisplayName(\"CanvasToolBar\");\r\n    return CanvasToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5655,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getBeanDescriptor()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return CanvasToolBarBeanInfo.getBdescriptor();\r\n}'),(5656,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getDefaultEventIndex()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return CanvasToolBarBeanInfo.defaultEventIndex;\r\n}'),(5657,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getDefaultPropertyIndex()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return CanvasToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5658,'getEdescriptor()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getEdescriptor()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return CanvasToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5659,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getEventSetDescriptors()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return CanvasToolBarBeanInfo.getEdescriptor();\r\n}'),(5660,'getIcon(int)','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getIcon(int)','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((CanvasToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((CanvasToolBarBeanInfo.iconColor16) == null)\r\n                    CanvasToolBarBeanInfo.iconColor16 = loadImage(CanvasToolBarBeanInfo.iconNameC16);\r\n\r\n                return CanvasToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((CanvasToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((CanvasToolBarBeanInfo.iconColor32) == null)\r\n                    CanvasToolBarBeanInfo.iconColor32 = loadImage(CanvasToolBarBeanInfo.iconNameC32);\r\n\r\n                return CanvasToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((CanvasToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((CanvasToolBarBeanInfo.iconMono16) == null)\r\n                    CanvasToolBarBeanInfo.iconMono16 = loadImage(CanvasToolBarBeanInfo.iconNameM16);\r\n\r\n                return CanvasToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((CanvasToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((CanvasToolBarBeanInfo.iconMono32) == null)\r\n                    CanvasToolBarBeanInfo.iconMono32 = loadImage(CanvasToolBarBeanInfo.iconNameM32);\r\n\r\n                return CanvasToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5661,'getMdescriptor()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getMdescriptor()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return CanvasToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5662,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getMethodDescriptors()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return CanvasToolBarBeanInfo.getMdescriptor();\r\n}'),(5663,'getPdescriptor()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getPdescriptor()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return CanvasToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5664,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo.getPropertyDescriptors()','581','org.jhotdraw.samples.svg.gui.CanvasToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return CanvasToolBarBeanInfo.getPdescriptor();\r\n}'),(5665,'addActionListener(java.awt.event.ActionListener)','org.jhotdraw.samples.svg.gui.DrawingComponent.addActionListener(java.awt.event.ActionListener)','582','org.jhotdraw.samples.svg.gui.DrawingComponent','/**\r\n * Adds an ActionListener.\r\n * <p>\r\n * The ActionListener receives an ActionEvent with action command \"save\"\r\n * when the user clicks at the save button on the drawing component.\r\n * <p>\r\n * The ActionListener receives an ActionEvent with action command \"cancel\"\r\n * when the user clicks at the cancel button on the drawing component.\r\n */\r\npublic void addActionListener(ActionListener listener);'),(5666,'getComponent()','org.jhotdraw.samples.svg.gui.DrawingComponent.getComponent()','582','org.jhotdraw.samples.svg.gui.DrawingComponent','/**\r\n * Returns the component of the DrawingComponent.\r\n */\r\npublic JComponent getComponent();'),(5667,'getDrawing()','org.jhotdraw.samples.svg.gui.DrawingComponent.getDrawing()','582','org.jhotdraw.samples.svg.gui.DrawingComponent','/**\r\n * Returns the drawing of the DrawingComponent.\r\n */\r\npublic Drawing getDrawing();'),(5668,'getSummary()','org.jhotdraw.samples.svg.gui.DrawingComponent.getSummary()','582','org.jhotdraw.samples.svg.gui.DrawingComponent','/**\r\n * Returns a summary about the changes made on the drawing.\r\n */\r\npublic String getSummary();'),(5669,'removeActionListener(java.awt.event.ActionListener)','org.jhotdraw.samples.svg.gui.DrawingComponent.removeActionListener(java.awt.event.ActionListener)','582','org.jhotdraw.samples.svg.gui.DrawingComponent','/**\r\n * Removes an ActionListener.\r\n */\r\npublic void removeActionListener(ActionListener listener);'),(5670,'setDrawing(org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.gui.DrawingComponent.setDrawing(org.jhotdraw.draw.Drawing)','582','org.jhotdraw.samples.svg.gui.DrawingComponent','/**\r\n * Sets the drawing of the DrawingComponent.\r\n */\r\npublic void setDrawing(Drawing newValue);'),(5671,'-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','583','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter','public DrawingComponentRepainter(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if (editor != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.addPropertyChangeListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        editor.addPropertyChangeListener(this);\r\n    }\r\n}'),(5672,'attributeChanged(org.jhotdraw.draw.FigureEvent)','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.attributeChanged(org.jhotdraw.draw.FigureEvent)','583','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter','@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    component.repaint();\r\n}'),(5673,'dispose()','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.dispose()','583','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter','public void dispose() {\r\n    if ((editor) != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.removePropertyChangeListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().removeFigureListener(this);\r\n            }\r\n        }\r\n        editor.removePropertyChangeListener(this);\r\n        editor = null;\r\n    }\r\n    component = null;\r\n}'),(5674,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.propertyChange(java.beans.PropertyChangeEvent)','583','org.jhotdraw.samples.svg.gui.DrawingComponentRepainter','public void propertyChange(PropertyChangeEvent evt) {\r\n    String name = evt.getPropertyName();\r\n    if (name == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n        DrawingView view = ((DrawingView) (evt.getOldValue()));\r\n        if (view != null) {\r\n            view.removePropertyChangeListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().removeFigureListener(this);\r\n            }\r\n        }\r\n        view = ((DrawingView) (evt.getNewValue()));\r\n        if (view != null) {\r\n            view.addPropertyChangeListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        component.repaint();\r\n    } else\r\n        if (name == (DrawingView.DRAWING_PROPERTY)) {\r\n            Drawing drawing = ((Drawing) (evt.getOldValue()));\r\n            if (drawing != null) {\r\n                drawing.removeFigureListener(this);\r\n            }\r\n            drawing = ((Drawing) (evt.getNewValue()));\r\n            if (drawing != null) {\r\n                drawing.addFigureListener(this);\r\n            }\r\n            component.repaint();\r\n        } else {\r\n            component.repaint();\r\n        }\r\n\r\n}'),(5675,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)','org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)','584','org.jhotdraw.samples.svg.gui.DrawingOpacityIcon','/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(5676,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)','org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)','584','org.jhotdraw.samples.svg.gui.DrawingOpacityIcon','public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(5677,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','584','org.jhotdraw.samples.svg.gui.DrawingOpacityIcon','@Override\r\npublic void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    super.paintIcon(c, g, x, y);\r\n    Double opacity = 0.0;\r\n    Color fillColor = null;\r\n    Color strokeColor = null;\r\n    if ((editor) != null) {\r\n        DrawingView view = editor.getActiveView();\r\n        if ((view != null) && ((view.getDrawing()) != null)) {\r\n            opacity = opacityKey.get(view.getDrawing());\r\n            fillColor = ((fillColorKey) == null) ? null : fillColorKey.get(view.getDrawing());\r\n            strokeColor = ((strokeColorKey) == null) ? null : strokeColorKey.get(view.getDrawing());\r\n        } else {\r\n            opacity = opacityKey.get(editor.getDefaultAttributes());\r\n            fillColor = ((fillColorKey) == null) ? null : fillColorKey.get(editor.getDefaultAttributes());\r\n            strokeColor = ((strokeColorKey) == null) ? null : strokeColorKey.get(editor.getDefaultAttributes());\r\n        }\r\n    }\r\n    if (((fillColorKey) != null) && ((fillShape) != null)) {\r\n        if (opacity != null) {\r\n            if (fillColor == null) {\r\n                fillColor = Color.BLACK;\r\n            }\r\n            g.setColor(new Color(((((int) (opacity * 255)) << 24) | ((fillColor.getRGB()) & 16777215)), true));\r\n            g.translate(x, y);\r\n            g.fill(fillShape);\r\n            g.translate((-x), (-y));\r\n        }\r\n    }\r\n    if (((strokeColorKey) != null) && ((strokeShape) != null)) {\r\n        if (opacity != null) {\r\n            if (strokeColor == null) {\r\n                strokeColor = Color.BLACK;\r\n            }\r\n            g.setColor(new Color(((((int) (opacity * 255)) << 24) | ((strokeColor.getRGB()) & 16777215)), true));\r\n            g.translate(x, y);\r\n            g.draw(strokeShape);\r\n            g.translate((-x), (-y));\r\n        }\r\n    }\r\n}'),(5678,'-init-()','org.jhotdraw.samples.svg.gui.FigureToolBar.-init-()','585','org.jhotdraw.samples.svg.gui.FigureToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic FigureToolBar() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n    setDisclosureStateCount(3);\r\n}'),(5679,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.FigureToolBar.createDisclosedComponent(int)','585','org.jhotdraw.samples.svg.gui.FigureToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setLayout(new GridBagLayout());\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                // Opacity slider\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.figureOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new SelectionOpacityIcon(editor, SVGAttributeKeys.OPACITY, AttributeKeys.FILL_COLOR, AttributeKeys.STROKE_COLOR, getClass().getResource(labels.getString(\"attribute.figureOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                gbc.weighty = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(opacityPopupButton, gbc);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.OPACITY, opacitySlider, editor);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setLayout(new GridBagLayout());\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                // Opacity field with slider\r\n                JAttributeTextField<Double> opacityField = new JAttributeTextField<Double>();\r\n                opacityField.setColumns(3);\r\n                opacityField.setToolTipText(labels.getString(\"attribute.figureOpacity.toolTipText\"));\r\n                opacityField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                opacityField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                opacityField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(opacityField))));\r\n                opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1.0, 100.0));\r\n                opacityField.setHorizontalAlignment(JTextField.LEADING);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.OPACITY, opacityField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.weightx = 1.0;\r\n                p.add(opacityField, gbc);\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.figureOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new SelectionOpacityIcon(editor, SVGAttributeKeys.OPACITY, AttributeKeys.FILL_COLOR, AttributeKeys.STROKE_COLOR, getClass().getResource(labels.getString(\"attribute.figureOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.weighty = 1;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                p.add(opacityPopupButton, gbc);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.OPACITY, opacitySlider, editor);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5680,'getID()','org.jhotdraw.samples.svg.gui.FigureToolBar.getID()','585','org.jhotdraw.samples.svg.gui.FigureToolBar','@Override\r\nprotected String getID() {\r\n    return \"figure\";\r\n}'),(5681,'initComponents()','org.jhotdraw.samples.svg.gui.FigureToolBar.initComponents()','585','org.jhotdraw.samples.svg.gui.FigureToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5682,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.FigureToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','585','org.jhotdraw.samples.svg.gui.FigureToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(5683,'-init-()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.-init-()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','FigureToolBarBeanInfo() {\r\n}'),(5684,'getBdescriptor()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getBdescriptor()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((FigureToolBarBeanInfo.beanDescriptor) == null)\r\n        FigureToolBarBeanInfo.beanDescriptor = new BeanDescriptor(FigureToolBarBeanInfo.class);\r\n\r\n    FigureToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    FigureToolBarBeanInfo.beanDescriptor.setDisplayName(\"LinkToolPane\");\r\n    return FigureToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5685,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getBeanDescriptor()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\n@Override\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return FigureToolBarBeanInfo.getBdescriptor();\r\n}'),(5686,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getDefaultEventIndex()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\n@Override\r\npublic int getDefaultEventIndex() {\r\n    return FigureToolBarBeanInfo.defaultEventIndex;\r\n}'),(5687,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getDefaultPropertyIndex()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\n@Override\r\npublic int getDefaultPropertyIndex() {\r\n    return FigureToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5688,'getEdescriptor()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getEdescriptor()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return FigureToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5689,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getEventSetDescriptors()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\n@Override\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return FigureToolBarBeanInfo.getEdescriptor();\r\n}'),(5690,'getIcon(int)','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getIcon(int)','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\n@Override\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((FigureToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((FigureToolBarBeanInfo.iconColor16) == null)\r\n                    FigureToolBarBeanInfo.iconColor16 = loadImage(FigureToolBarBeanInfo.iconNameC16);\r\n\r\n                return FigureToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((FigureToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((FigureToolBarBeanInfo.iconColor32) == null)\r\n                    FigureToolBarBeanInfo.iconColor32 = loadImage(FigureToolBarBeanInfo.iconNameC32);\r\n\r\n                return FigureToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((FigureToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((FigureToolBarBeanInfo.iconMono16) == null)\r\n                    FigureToolBarBeanInfo.iconMono16 = loadImage(FigureToolBarBeanInfo.iconNameM16);\r\n\r\n                return FigureToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((FigureToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((FigureToolBarBeanInfo.iconMono32) == null)\r\n                    FigureToolBarBeanInfo.iconMono32 = loadImage(FigureToolBarBeanInfo.iconNameM32);\r\n\r\n                return FigureToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5691,'getMdescriptor()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getMdescriptor()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return FigureToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5692,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getMethodDescriptors()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\n@Override\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return FigureToolBarBeanInfo.getMdescriptor();\r\n}'),(5693,'getPdescriptor()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getPdescriptor()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return FigureToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5694,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo.getPropertyDescriptors()','586','org.jhotdraw.samples.svg.gui.FigureToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\n@Override\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return FigureToolBarBeanInfo.getPdescriptor();\r\n}'),(5695,'-init-()','org.jhotdraw.samples.svg.gui.FillToolBar.-init-()','587','org.jhotdraw.samples.svg.gui.FillToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic FillToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n    setDisclosureStateCount(3);\r\n}'),(5696,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.FillToolBar.createDisclosedComponent(int)','587','org.jhotdraw.samples.svg.gui.FillToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Fill color\r\n                Map<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n                SVGAttributeKeys.FILL_GRADIENT.set(defaultAttributes, null);\r\n                btn = ButtonFactory.createSelectionColorButton(editor, AttributeKeys.FILL_COLOR, ButtonFactory.HSV_COLORS, ButtonFactory.HSV_COLORS_COLUMN_COUNT, \"attribute.fillColor\", labels, defaultAttributes, new Rectangle(3, 3, 10, 10));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                ((JPopupButton) (btn)).setAction(null, null);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridwidth = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(btn, gbc);\r\n                // Opacity slider\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.fillOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new SelectionOpacityIcon(editor, SVGAttributeKeys.FILL_OPACITY, AttributeKeys.FILL_COLOR, null, getClass().getResource(labels.getString(\"attribute.fillOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.weighty = 1.0F;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(opacityPopupButton, gbc);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.FILL_OPACITY, opacitySlider, editor);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                JPanel p1 = new JPanel(new GridBagLayout());\r\n                JPanel p2 = new JPanel(new GridBagLayout());\r\n                JPanel p3 = new JPanel(new GridBagLayout());\r\n                p1.setOpaque(false);\r\n                p2.setOpaque(false);\r\n                p3.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                p.removeAll();\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Fill color field and button\r\n                Map<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n                SVGAttributeKeys.FILL_GRADIENT.set(defaultAttributes, null);\r\n                JAttributeTextField<Color> colorField = new JAttributeTextField<Color>();\r\n                colorField.setColumns(7);\r\n                colorField.setToolTipText(labels.getString(\"attribute.fillColor.toolTipText\"));\r\n                colorField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                colorField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(colorField))));\r\n                colorField.setFormatterFactory(ColorFormatter.createFormatterFactory());\r\n                colorField.setHorizontalAlignment(JTextField.LEFT);\r\n                new FigureAttributeEditorHandler<Color>(AttributeKeys.FILL_COLOR, defaultAttributes, colorField, editor, true);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p1.add(colorField, gbc);\r\n                btn = ButtonFactory.createSelectionColorButton(editor, AttributeKeys.FILL_COLOR, ButtonFactory.HSV_COLORS, ButtonFactory.HSV_COLORS_COLUMN_COUNT, \"attribute.fillColor\", labels, defaultAttributes, new Rectangle(3, 3, 10, 10));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                ((JPopupButton) (btn)).setAction(null, null);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridwidth = 2;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p1.add(btn, gbc);\r\n                // Opacity field with slider\r\n                JAttributeTextField<Double> opacityField = new JAttributeTextField<Double>();\r\n                opacityField.setColumns(3);\r\n                opacityField.setToolTipText(labels.getString(\"attribute.fillOpacity.toolTipText\"));\r\n                opacityField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                opacityField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(opacityField))));\r\n                opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1.0, 100.0));\r\n                opacityField.setHorizontalAlignment(JTextField.LEFT);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.FILL_OPACITY, opacityField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p2.add(opacityField, gbc);\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.fillOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                opacityPopupButton.setIcon(new SelectionOpacityIcon(editor, SVGAttributeKeys.FILL_OPACITY, AttributeKeys.FILL_COLOR, null, getClass().getResource(labels.getString(\"attribute.fillOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.weighty = 1.0F;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p2.add(opacityPopupButton, gbc);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.FILL_OPACITY, opacitySlider, editor);\r\n                // Add horizontal strips\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(p1, gbc);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(p2, gbc);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.weighty = 1.0F;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(p3, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5697,'getDefaultDisclosureState()','org.jhotdraw.samples.svg.gui.FillToolBar.getDefaultDisclosureState()','587','org.jhotdraw.samples.svg.gui.FillToolBar','@Override\r\nprotected int getDefaultDisclosureState() {\r\n    return 1;\r\n}'),(5698,'getID()','org.jhotdraw.samples.svg.gui.FillToolBar.getID()','587','org.jhotdraw.samples.svg.gui.FillToolBar','@Override\r\nprotected String getID() {\r\n    return \"fill\";\r\n}'),(5699,'initComponents()','org.jhotdraw.samples.svg.gui.FillToolBar.initComponents()','587','org.jhotdraw.samples.svg.gui.FillToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5700,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.FillToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','587','org.jhotdraw.samples.svg.gui.FillToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(5701,'-init-()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.-init-()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','FillToolBarBeanInfo() {\r\n}'),(5702,'getBdescriptor()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getBdescriptor()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((FillToolBarBeanInfo.beanDescriptor) == null)\r\n        FillToolBarBeanInfo.beanDescriptor = new BeanDescriptor(FillToolBarBeanInfo.class);\r\n\r\n    FillToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    FillToolBarBeanInfo.beanDescriptor.setDisplayName(\"FillToolBar\");\r\n    return FillToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5703,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getBeanDescriptor()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return FillToolBarBeanInfo.getBdescriptor();\r\n}'),(5704,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getDefaultEventIndex()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return FillToolBarBeanInfo.defaultEventIndex;\r\n}'),(5705,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getDefaultPropertyIndex()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return FillToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5706,'getEdescriptor()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getEdescriptor()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return FillToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5707,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getEventSetDescriptors()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return FillToolBarBeanInfo.getEdescriptor();\r\n}'),(5708,'getIcon(int)','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getIcon(int)','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((FillToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((FillToolBarBeanInfo.iconColor16) == null)\r\n                    FillToolBarBeanInfo.iconColor16 = loadImage(FillToolBarBeanInfo.iconNameC16);\r\n\r\n                return FillToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((FillToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((FillToolBarBeanInfo.iconColor32) == null)\r\n                    FillToolBarBeanInfo.iconColor32 = loadImage(FillToolBarBeanInfo.iconNameC32);\r\n\r\n                return FillToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((FillToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((FillToolBarBeanInfo.iconMono16) == null)\r\n                    FillToolBarBeanInfo.iconMono16 = loadImage(FillToolBarBeanInfo.iconNameM16);\r\n\r\n                return FillToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((FillToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((FillToolBarBeanInfo.iconMono32) == null)\r\n                    FillToolBarBeanInfo.iconMono32 = loadImage(FillToolBarBeanInfo.iconNameM32);\r\n\r\n                return FillToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5709,'getMdescriptor()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getMdescriptor()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return FillToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5710,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getMethodDescriptors()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return FillToolBarBeanInfo.getMdescriptor();\r\n}'),(5711,'getPdescriptor()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getPdescriptor()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return FillToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5712,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo.getPropertyDescriptors()','588','org.jhotdraw.samples.svg.gui.FillToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return FillToolBarBeanInfo.getPdescriptor();\r\n}'),(5713,'-init-()','org.jhotdraw.samples.svg.gui.FontToolBar.-init-()','589','org.jhotdraw.samples.svg.gui.FontToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic FontToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(\"font.toolbar\"));\r\n    JFontChooser.loadAllFonts();\r\n    setDisclosureStateCount(3);\r\n}'),(5714,'-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','org.jhotdraw.samples.svg.gui.FontToolBar.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','589','org.jhotdraw.samples.svg.gui.FontToolBar','1( $anonymous0,  $anonymous1) {\r\n}'),(5715,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.FontToolBar.createDisclosedComponent(int)','589','org.jhotdraw.samples.svg.gui.FontToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                JPanel p1 = new JPanel(new GridBagLayout());\r\n                JPanel p2 = new JPanel(new GridBagLayout());\r\n                JPanel p3 = new JPanel(new GridBagLayout());\r\n                p1.setOpaque(false);\r\n                p2.setOpaque(false);\r\n                p3.setOpaque(false);\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Font face field and popup button\r\n                JAttributeTextField<Font> faceField = new JAttributeTextField<Font>();\r\n                faceField.setColumns(2);\r\n                faceField.setToolTipText(labels.getString(\"attribute.font.toolTipText\"));\r\n                faceField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                faceField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                faceField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(faceField))));\r\n                faceField.setHorizontalAlignment(JTextField.LEADING);\r\n                faceField.setFormatterFactory(FontFormatter.createFormatterFactory());\r\n                new FigureAttributeEditorHandler<Font>(AttributeKeys.FONT_FACE, faceField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridwidth = 2;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                p.add(faceField, gbc);\r\n                btn = ButtonFactory.createFontButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.anchor = GridBagConstraints.WEST;\r\n                p.add(btn, gbc);\r\n                // Font size field with slider\r\n                JAttributeTextField<Double> sizeField = new JAttributeTextField<Double>();\r\n                sizeField.setColumns(1);\r\n                sizeField.setToolTipText(labels.getString(\"attribute.fontSize.toolTipText\"));\r\n                sizeField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                sizeField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                sizeField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(sizeField))));\r\n                sizeField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1000.0, 1.0));\r\n                sizeField.setHorizontalAlignment(JTextField.LEADING);\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.FONT_SIZE, sizeField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridwidth = 2;\r\n                gbc.weightx = 1.0F;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                p2.add(sizeField, gbc);\r\n                JPopupButton sizePopupButton = new JPopupButton();\r\n                JAttributeSlider sizeSlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 12);\r\n                sizePopupButton.add(sizeSlider);\r\n                labels.configureToolBarButton(sizePopupButton, \"attribute.fontSize\");\r\n                sizePopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(sizePopupButton))));\r\n                sizePopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, sizePopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p2.add(sizePopupButton, gbc);\r\n                sizeSlider.setUI(((SliderUI) (PaletteSliderUI.createUI(sizeSlider))));\r\n                sizeSlider.setScaleFactor(1.0);\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.FONT_SIZE, sizeSlider, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.gridwidth = 2;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                p.add(p2, gbc);\r\n                // Font style buttons\r\n                btn = ButtonFactory.createFontStyleBoldButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createFontStyleItalicButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"Palette.Component.segmentPosition\", \"middle\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createFontStyleUnderlineButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"Palette.Component.segmentPosition\", \"last\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.WEST;\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                JPanel p1 = new JPanel(new GridBagLayout());\r\n                JPanel p2 = new JPanel(new GridBagLayout());\r\n                JPanel p3 = new JPanel(new GridBagLayout());\r\n                p1.setOpaque(false);\r\n                p2.setOpaque(false);\r\n                p3.setOpaque(false);\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Font face field and popup button\r\n                JAttributeTextField<Font> faceField = new JAttributeTextField<Font>();\r\n                faceField.setColumns(10);\r\n                faceField.setToolTipText(labels.getString(\"attribute.font.toolTipText\"));\r\n                faceField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                faceField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                faceField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(faceField))));\r\n                faceField.setHorizontalAlignment(JTextField.LEADING);\r\n                faceField.setFormatterFactory(FontFormatter.createFormatterFactory());\r\n                new FigureAttributeEditorHandler<Font>(AttributeKeys.FONT_FACE, faceField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridwidth = 3;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                p.add(faceField, gbc);\r\n                btn = ButtonFactory.createFontButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.anchor = GridBagConstraints.WEST;\r\n                p.add(btn, gbc);\r\n                // Font size field with slider\r\n                JAttributeTextField<Double> sizeField = new JAttributeTextField<Double>();\r\n                sizeField.setColumns(1);\r\n                sizeField.setToolTipText(labels.getString(\"attribute.fontSize.toolTipText\"));\r\n                sizeField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                sizeField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                sizeField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(sizeField))));\r\n                sizeField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1000.0, 1.0));\r\n                sizeField.setHorizontalAlignment(JTextField.LEADING);\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.FONT_SIZE, sizeField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridwidth = 2;\r\n                gbc.weightx = 1.0F;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                p2.add(sizeField, gbc);\r\n                JPopupButton sizePopupButton = new JPopupButton();\r\n                JAttributeSlider sizeSlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 12);\r\n                sizePopupButton.add(sizeSlider);\r\n                labels.configureToolBarButton(sizePopupButton, \"attribute.fontSize\");\r\n                sizePopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(sizePopupButton))));\r\n                sizePopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, sizePopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p2.add(sizePopupButton, gbc);\r\n                sizeSlider.setUI(((SliderUI) (PaletteSliderUI.createUI(sizeSlider))));\r\n                sizeSlider.setScaleFactor(1.0);\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.FONT_SIZE, sizeSlider, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.gridwidth = 2;\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                p.add(p2, gbc);\r\n                // Font style buttons\r\n                btn = ButtonFactory.createFontStyleBoldButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createFontStyleItalicButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"Palette.Component.segmentPosition\", \"middle\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createFontStyleUnderlineButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                btn.putClientProperty(\"Palette.Component.segmentPosition\", \"last\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.WEST;\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5716,'getDefaultDisclosureState()','org.jhotdraw.samples.svg.gui.FontToolBar.getDefaultDisclosureState()','589','org.jhotdraw.samples.svg.gui.FontToolBar','@Override\r\nprotected int getDefaultDisclosureState() {\r\n    return 1;\r\n}'),(5717,'getID()','org.jhotdraw.samples.svg.gui.FontToolBar.getID()','589','org.jhotdraw.samples.svg.gui.FontToolBar','@Override\r\nprotected String getID() {\r\n    return \"font\";\r\n}'),(5718,'initComponents()','org.jhotdraw.samples.svg.gui.FontToolBar.initComponents()','589','org.jhotdraw.samples.svg.gui.FontToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5719,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.FontToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','589','org.jhotdraw.samples.svg.gui.FontToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this) {\r\n            @Override\r\n            public void updateVisibility() {\r\n                boolean newValue = (((editor) != null) && ((editor.getActiveView()) != null)) && (((isVisibleIfCreationTool) && (((editor.getTool()) instanceof TextCreationTool) || ((editor.getTool()) instanceof TextAreaCreationTool))) || (containsTextHolderFigure(editor.getActiveView().getSelectedFigures())));\r\n                component.setVisible(newValue);\r\n                // The following is needed to trick BoxLayout\r\n                if (newValue) {\r\n                    component.setPreferredSize(null);\r\n                } else {\r\n                    component.setPreferredSize(new Dimension(0, 0));\r\n                }\r\n                component.revalidate();\r\n            }\r\n\r\n            private boolean containsTextHolderFigure(Collection<Figure> figures) {\r\n                for (Figure f : figures) {\r\n                    if (f instanceof TextHolderFigure) {\r\n                        return true;\r\n                    } else\r\n                        if (f instanceof CompositeFigure) {\r\n                            if (containsTextHolderFigure(((CompositeFigure) (f)).getChildren())) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n    }\r\n}'),(5720,'-init-()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.-init-()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','FontToolBarBeanInfo() {\r\n}'),(5721,'getBdescriptor()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getBdescriptor()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((FontToolBarBeanInfo.beanDescriptor) == null)\r\n        FontToolBarBeanInfo.beanDescriptor = new BeanDescriptor(StrokeToolBarBeanInfo.class);\r\n\r\n    FontToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    FontToolBarBeanInfo.beanDescriptor.setDisplayName(\"StrokeToolPane\");\r\n    return FontToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5722,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getBeanDescriptor()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return FontToolBarBeanInfo.getBdescriptor();\r\n}'),(5723,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getDefaultEventIndex()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return FontToolBarBeanInfo.defaultEventIndex;\r\n}'),(5724,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getDefaultPropertyIndex()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return FontToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5725,'getEdescriptor()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getEdescriptor()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return FontToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5726,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getEventSetDescriptors()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return FontToolBarBeanInfo.getEdescriptor();\r\n}'),(5727,'getIcon(int)','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getIcon(int)','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((FontToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((FontToolBarBeanInfo.iconColor16) == null)\r\n                    FontToolBarBeanInfo.iconColor16 = loadImage(FontToolBarBeanInfo.iconNameC16);\r\n\r\n                return FontToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((FontToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((FontToolBarBeanInfo.iconColor32) == null)\r\n                    FontToolBarBeanInfo.iconColor32 = loadImage(FontToolBarBeanInfo.iconNameC32);\r\n\r\n                return FontToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((FontToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((FontToolBarBeanInfo.iconMono16) == null)\r\n                    FontToolBarBeanInfo.iconMono16 = loadImage(FontToolBarBeanInfo.iconNameM16);\r\n\r\n                return FontToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((FontToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((FontToolBarBeanInfo.iconMono32) == null)\r\n                    FontToolBarBeanInfo.iconMono32 = loadImage(FontToolBarBeanInfo.iconNameM32);\r\n\r\n                return FontToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5728,'getMdescriptor()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getMdescriptor()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return FontToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5729,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getMethodDescriptors()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return FontToolBarBeanInfo.getMdescriptor();\r\n}'),(5730,'getPdescriptor()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getPdescriptor()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return FontToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5731,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo.getPropertyDescriptors()','590','org.jhotdraw.samples.svg.gui.FontToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return FontToolBarBeanInfo.getPdescriptor();\r\n}'),(5732,'-init-()','org.jhotdraw.samples.svg.gui.LinkToolBar.-init-()','591','org.jhotdraw.samples.svg.gui.LinkToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic LinkToolBar() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n    setDisclosureStateCount(3);\r\n}'),(5733,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.LinkToolBar.createDisclosedComponent(int)','591','org.jhotdraw.samples.svg.gui.LinkToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setLayout(new GridBagLayout());\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                // Link field\r\n                JLabel linkLabel;\r\n                JScrollPane scrollPane;\r\n                JAttributeTextArea<String> linkField;\r\n                linkLabel = new JLabel();\r\n                linkLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(linkLabel))));\r\n                linkLabel.setToolTipText(labels.getString(\"attribute.figureLink.toolTipText\"));\r\n                linkLabel.setText(labels.getString(\"attribute.figureLink.text\"));// NOI18N\r\n\r\n                linkLabel.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                scrollPane = new JScrollPane();\r\n                linkField = new JAttributeTextArea<String>();\r\n                linkLabel.setLabelFor(linkField);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.insets = new Insets((-2), 0, (-2), 0);\r\n                gbc.anchor = GridBagConstraints.SOUTHWEST;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                p.add(linkLabel, gbc);\r\n                scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\r\n                scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r\n                scrollPane.putClientProperty(\"JComponent.sizeVariant\", \"small\");\r\n                scrollPane.setBorder(PaletteLookAndFeel.getInstance().getBorder(\"ScrollPane.border\"));\r\n                linkField.setToolTipText(labels.getString(\"attribute.figureLink.toolTipText\"));\r\n                linkField.setColumns(8);\r\n                linkField.setLineWrap(true);\r\n                linkField.setRows(2);\r\n                linkField.setWrapStyleWord(true);\r\n                linkField.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                linkField.setFormatterFactory(new DefaultFormatterFactory(new DefaultFormatter()));\r\n                new FigureAttributeEditorHandler<String>(SVGAttributeKeys.LINK, linkField, editor, false);\r\n                scrollPane.setViewportView(linkField);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.weightx = 1.0;\r\n                gbc.weighty = 1.0;\r\n                p.add(scrollPane, gbc);\r\n                // Target field\r\n                JLabel targetLabel;\r\n                JAttributeTextField<String> targetField;\r\n                targetLabel = new JLabel();\r\n                targetLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(targetLabel))));\r\n                targetLabel.setToolTipText(labels.getString(\"attribute.figureLinkTarget.toolTipText\"));\r\n                targetLabel.setText(labels.getString(\"attribute.figureLinkTarget.text\"));// NOI18N\r\n\r\n                // targetLabel.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                targetField = new JAttributeTextField<String>();\r\n                targetLabel.setLabelFor(targetField);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(targetLabel, gbc);\r\n                targetField.setToolTipText(labels.getString(\"attribute.figureLinkTarget.toolTipText\"));\r\n                targetField.setColumns(4);\r\n                // targetField.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                targetField.setFormatterFactory(new DefaultFormatterFactory(new DefaultFormatter()));\r\n                targetField.setUI(((TextUI) (PaletteFormattedTextFieldUI.createUI(targetField))));\r\n                new FigureAttributeEditorHandler<String>(SVGAttributeKeys.LINK_TARGET, targetField, editor, false);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(targetField, gbc);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setLayout(new GridBagLayout());\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                // Link field\r\n                JScrollPane scrollPane;\r\n                JAttributeTextArea<String> linkField;\r\n                scrollPane = new JScrollPane();\r\n                linkField = new JAttributeTextArea<String>();\r\n                scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\r\n                scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r\n                scrollPane.putClientProperty(\"JComponent.sizeVariant\", \"small\");\r\n                scrollPane.setBorder(PaletteLookAndFeel.getInstance().getBorder(\"ScrollPane.border\"));\r\n                linkField.setToolTipText(labels.getString(\"attribute.figureLink.toolTipText\"));\r\n                linkField.setColumns(12);\r\n                linkField.setLineWrap(true);\r\n                linkField.setRows(2);\r\n                linkField.setWrapStyleWord(true);\r\n                linkField.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                linkField.setFormatterFactory(new DefaultFormatterFactory(new DefaultFormatter()));\r\n                new FigureAttributeEditorHandler<String>(SVGAttributeKeys.LINK, linkField, editor, false);\r\n                scrollPane.setViewportView(linkField);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.weightx = 1.0;\r\n                gbc.weighty = 1.0;\r\n                p.add(scrollPane, gbc);\r\n                // Target field\r\n                JLabel targetLabel;\r\n                JAttributeTextField<String> targetField;\r\n                targetLabel = new JLabel();\r\n                targetLabel.setUI(((LabelUI) (PaletteLabelUI.createUI(targetLabel))));\r\n                targetLabel.setToolTipText(labels.getString(\"attribute.figureLinkTarget.toolTipText\"));\r\n                targetLabel.setText(labels.getString(\"attribute.figureLinkTarget.text\"));// NOI18N\r\n\r\n                // targetLabel.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                targetField = new JAttributeTextField<String>();\r\n                targetLabel.setLabelFor(targetField);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(targetLabel, gbc);\r\n                targetField.setToolTipText(labels.getString(\"attribute.figureLinkTarget.toolTipText\"));\r\n                targetField.setColumns(7);\r\n                // targetField.setFont(PaletteLookAndFeel.getInstance().getFont(\"SmallSystemFont\"));\r\n                targetField.setFormatterFactory(new DefaultFormatterFactory(new DefaultFormatter()));\r\n                targetField.setUI(((TextUI) (PaletteFormattedTextFieldUI.createUI(targetField))));\r\n                new FigureAttributeEditorHandler<String>(SVGAttributeKeys.LINK_TARGET, targetField, editor, true);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(targetField, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5734,'getID()','org.jhotdraw.samples.svg.gui.LinkToolBar.getID()','591','org.jhotdraw.samples.svg.gui.LinkToolBar','@Override\r\nprotected String getID() {\r\n    return \"link\";\r\n}'),(5735,'initComponents()','org.jhotdraw.samples.svg.gui.LinkToolBar.initComponents()','591','org.jhotdraw.samples.svg.gui.LinkToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5736,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.LinkToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','591','org.jhotdraw.samples.svg.gui.LinkToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(5737,'-init-()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.-init-()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','LinkToolBarBeanInfo() {\r\n}'),(5738,'getBdescriptor()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getBdescriptor()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((LinkToolBarBeanInfo.beanDescriptor) == null)\r\n        LinkToolBarBeanInfo.beanDescriptor = new BeanDescriptor(LinkToolBarBeanInfo.class);\r\n\r\n    LinkToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    LinkToolBarBeanInfo.beanDescriptor.setDisplayName(\"LinkToolPane\");\r\n    return LinkToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5739,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getBeanDescriptor()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\n@Override\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return LinkToolBarBeanInfo.getBdescriptor();\r\n}'),(5740,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getDefaultEventIndex()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\n@Override\r\npublic int getDefaultEventIndex() {\r\n    return LinkToolBarBeanInfo.defaultEventIndex;\r\n}'),(5741,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getDefaultPropertyIndex()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\n@Override\r\npublic int getDefaultPropertyIndex() {\r\n    return LinkToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5742,'getEdescriptor()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getEdescriptor()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return LinkToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5743,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getEventSetDescriptors()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\n@Override\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return LinkToolBarBeanInfo.getEdescriptor();\r\n}'),(5744,'getIcon(int)','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getIcon(int)','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\n@Override\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((LinkToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((LinkToolBarBeanInfo.iconColor16) == null)\r\n                    LinkToolBarBeanInfo.iconColor16 = loadImage(LinkToolBarBeanInfo.iconNameC16);\r\n\r\n                return LinkToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((LinkToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((LinkToolBarBeanInfo.iconColor32) == null)\r\n                    LinkToolBarBeanInfo.iconColor32 = loadImage(LinkToolBarBeanInfo.iconNameC32);\r\n\r\n                return LinkToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((LinkToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((LinkToolBarBeanInfo.iconMono16) == null)\r\n                    LinkToolBarBeanInfo.iconMono16 = loadImage(LinkToolBarBeanInfo.iconNameM16);\r\n\r\n                return LinkToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((LinkToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((LinkToolBarBeanInfo.iconMono32) == null)\r\n                    LinkToolBarBeanInfo.iconMono32 = loadImage(LinkToolBarBeanInfo.iconNameM32);\r\n\r\n                return LinkToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5745,'getMdescriptor()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getMdescriptor()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return LinkToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5746,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getMethodDescriptors()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\n@Override\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return LinkToolBarBeanInfo.getMdescriptor();\r\n}'),(5747,'getPdescriptor()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getPdescriptor()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return LinkToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5748,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo.getPropertyDescriptors()','592','org.jhotdraw.samples.svg.gui.LinkToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\n@Override\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return LinkToolBarBeanInfo.getPdescriptor();\r\n}'),(5749,'-init-()','org.jhotdraw.samples.svg.gui.MessagePanel.-init-()','593','org.jhotdraw.samples.svg.gui.MessagePanel','/**\r\n * Creates new instance.\r\n */\r\npublic MessagePanel() {\r\n    this(null, null);\r\n}'),(5750,'-init-(javax.swing.Icon,java.lang.String)','org.jhotdraw.samples.svg.gui.MessagePanel.-init-(javax.swing.Icon,java.lang.String)','593','org.jhotdraw.samples.svg.gui.MessagePanel','public MessagePanel(Icon icon, String message) {\r\n    labels = ResourceBundleUtil.getBundle(\"org.anywikidraw.any.Labels\");\r\n    initComponents();\r\n    setIcon(icon);\r\n    setMessage(message);\r\n}'),(5751,'addActionListener(java.awt.event.ActionListener)','org.jhotdraw.samples.svg.gui.MessagePanel.addActionListener(java.awt.event.ActionListener)','593','org.jhotdraw.samples.svg.gui.MessagePanel','public void addActionListener(ActionListener listener) {\r\n    if ((listeners) == null) {\r\n        listeners = new EventListenerList();\r\n        listeners.add(ActionListener.class, listener);\r\n    }\r\n}'),(5752,'closePerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.svg.gui.MessagePanel.closePerformed(java.awt.event.ActionEvent)','593','org.jhotdraw.samples.svg.gui.MessagePanel','private void closePerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_closePerformed\r\n    for (ActionListener l : listeners.getListeners(ActionListener.class)) {\r\n        l.actionPerformed(evt);\r\n    }\r\n}// GEN-LAST:event_closePerformed\r\n'),(5753,'initComponents()','org.jhotdraw.samples.svg.gui.MessagePanel.initComponents()','593','org.jhotdraw.samples.svg.gui.MessagePanel','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    iconLabel = new JLabel();\r\n    messageLabel = new JLabel();\r\n    closeButton = new JButton();\r\n    setBackground(new Color(255, 255, 255));\r\n    setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n    setLayout(new GridBagLayout());\r\n    add(iconLabel, new GridBagConstraints());\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\r\n    gridBagConstraints.weightx = 1.0;\r\n    gridBagConstraints.insets = new Insets(0, 10, 0, 0);\r\n    add(messageLabel, gridBagConstraints);\r\n    closeButton.setText(\"null\");\r\n    closeButton.setActionCommand(\"close\");\r\n    closeButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            closePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 1;\r\n    gridBagConstraints.anchor = GridBagConstraints.SOUTHEAST;\r\n    gridBagConstraints.insets = new Insets(10, 10, 0, 0);\r\n    add(closeButton, gridBagConstraints);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5754,'removeActionListener(java.awt.event.ActionListener)','org.jhotdraw.samples.svg.gui.MessagePanel.removeActionListener(java.awt.event.ActionListener)','593','org.jhotdraw.samples.svg.gui.MessagePanel','public void removeActionListener(ActionListener listener) {\r\n    if ((listeners) != null) {\r\n        listeners.remove(ActionListener.class, listener);\r\n        if ((listeners.getListenerCount()) == 0) {\r\n            listeners = null;\r\n        }\r\n    }\r\n}'),(5755,'setIcon(javax.swing.Icon)','org.jhotdraw.samples.svg.gui.MessagePanel.setIcon(javax.swing.Icon)','593','org.jhotdraw.samples.svg.gui.MessagePanel','public void setIcon(Icon icon) {\r\n    iconLabel.setIcon(icon);\r\n}'),(5756,'setMessage(java.lang.String)','org.jhotdraw.samples.svg.gui.MessagePanel.setMessage(java.lang.String)','593','org.jhotdraw.samples.svg.gui.MessagePanel','public void setMessage(String message) {\r\n    messageLabel.setText(message);\r\n}'),(5757,'-init-()','org.jhotdraw.samples.svg.gui.ProgressIndicator.-init-()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Creates new instance.\r\n */\r\npublic ProgressIndicator() {\r\n    this(null, null);\r\n}'),(5758,'-init-(java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.gui.ProgressIndicator.-init-(java.lang.String,java.lang.String)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Creates new instance.\r\n */\r\npublic ProgressIndicator(String message, String note) {\r\n    this(message, note, 0, 100, true);\r\n}'),(5759,'-init-(java.lang.String,java.lang.String,int,int,boolean)','org.jhotdraw.samples.svg.gui.ProgressIndicator.-init-(java.lang.String,java.lang.String,int,int,boolean)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Creates new instance.\r\n */\r\npublic ProgressIndicator(String message, String note, int min, int max, boolean indeterminate) {\r\n    initComponents();\r\n    messageLabel.setFont(messageLabel.getFont().deriveFont(Font.BOLD));\r\n    progressModel = new DefaultBoundedRangeModel(0, 0, min, max);\r\n    progressBar.setModel(progressModel);\r\n    setMessage(message);\r\n    setNote(note);\r\n    setIndeterminate(indeterminate);\r\n}'),(5760,'getMaximum()','org.jhotdraw.samples.svg.gui.ProgressIndicator.getMaximum()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Returns the maximum value -- the higher end of the progress value.\r\n *\r\n * @return an int representing the maximum value\r\n * @see #setMaximum\r\n */\r\npublic int getMaximum() {\r\n    return progressModel.getMaximum();\r\n}'),(5761,'getMessage()','org.jhotdraw.samples.svg.gui.ProgressIndicator.getMessage()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public String getMessage() {\r\n    return messageLabel.getText();\r\n}'),(5762,'getMinimum()','org.jhotdraw.samples.svg.gui.ProgressIndicator.getMinimum()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Returns the minimum value -- the lower end of the progress value.\r\n *\r\n * @return an int representing the minimum value\r\n * @see #setMinimum\r\n */\r\npublic int getMinimum() {\r\n    return progressModel.getMinimum();\r\n}'),(5763,'getNote()','org.jhotdraw.samples.svg.gui.ProgressIndicator.getNote()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public String getNote() {\r\n    return noteLabel.getText();\r\n}'),(5764,'initComponents()','org.jhotdraw.samples.svg.gui.ProgressIndicator.initComponents()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    messageLabel = new JLabel();\r\n    noteLabel = new JLabel();\r\n    progressBar = new JProgressBar();\r\n    setBackground(new Color(255, 255, 255));\r\n    setLayout(new GridBagLayout());\r\n    messageLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    add(messageLabel, gridBagConstraints);\r\n    noteLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n    gridBagConstraints.insets = new Insets(4, 0, 0, 0);\r\n    add(noteLabel, gridBagConstraints);\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.gridx = 0;\r\n    gridBagConstraints.insets = new Insets(4, 0, 0, 0);\r\n    add(progressBar, gridBagConstraints);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5765,'isIndeterminate()','org.jhotdraw.samples.svg.gui.ProgressIndicator.isIndeterminate()','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public boolean isIndeterminate() {\r\n    return progressBar.isIndeterminate();\r\n}'),(5766,'setIndeterminate(boolean)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setIndeterminate(boolean)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public void setIndeterminate(boolean b) {\r\n    progressBar.setIndeterminate(b);\r\n}'),(5767,'setMaximum(int)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setMaximum(int)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Specifies the maximum value.\r\n *\r\n * @param m\r\n * 		an int specifying the maximum value\r\n * @see #getMaximum\r\n */\r\npublic void setMaximum(int m) {\r\n    progressModel.setMaximum(m);\r\n}'),(5768,'setMessage(java.lang.String)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setMessage(java.lang.String)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public void setMessage(String message) {\r\n    messageLabel.setText(message);\r\n}'),(5769,'setMinimum(int)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setMinimum(int)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Specifies the minimum value.\r\n *\r\n * @param m\r\n * 		an int specifying the minimum value\r\n * @see #getMinimum\r\n */\r\npublic void setMinimum(int m) {\r\n    progressModel.setMinimum(m);\r\n}'),(5770,'setNote(java.lang.String)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setNote(java.lang.String)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public void setNote(final String newValue) {\r\n    String oldValue = noteLabel.getText();\r\n    noteLabel.setText(newValue);\r\n    if ((oldValue == null) || ((newValue == null) && (oldValue != newValue))) {\r\n        Runnable r = new Runnable() {\r\n            public void run() {\r\n                noteLabel.setVisible((newValue != null));\r\n                validate();\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(r);\r\n    }\r\n}'),(5771,'setProgress(int)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setProgress(int)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','/**\r\n * Indicate the progress of the operation being monitored.\r\n *\r\n * @param nv\r\n * 		an int specifying the current value, between the\r\n * 		maximum and minimum specified for this component\r\n */\r\npublic void setProgress(int nv) {\r\n    progressModel.setValue(nv);\r\n}'),(5772,'setProgressModel(javax.swing.BoundedRangeModel)','org.jhotdraw.samples.svg.gui.ProgressIndicator.setProgressModel(javax.swing.BoundedRangeModel)','594','org.jhotdraw.samples.svg.gui.ProgressIndicator','public void setProgressModel(BoundedRangeModel m) {\r\n    // BoundedRangeModel oldValue = progressModel;\r\n    progressModel = m;\r\n    progressBar.setModel(m);\r\n}'),(5773,'-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public SelectionComponentDisplayer(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if ((editor.getActiveView()) != null) {\r\n        DrawingView view = editor.getActiveView();\r\n        view.addPropertyChangeListener(this);\r\n        view.addFigureSelectionListener(this);\r\n    }\r\n    editor.addPropertyChangeListener(this);\r\n    updateVisibility();\r\n}'),(5774,'dispose()','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.dispose()','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public void dispose() {\r\n    if ((editor) != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.removePropertyChangeListener(this);\r\n            view.removeFigureSelectionListener(this);\r\n        }\r\n        editor.removePropertyChangeListener(this);\r\n        editor = null;\r\n    }\r\n    component = null;\r\n}'),(5775,'propertyChange(java.beans.PropertyChangeEvent)','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.propertyChange(java.beans.PropertyChangeEvent)','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public void propertyChange(PropertyChangeEvent evt) {\r\n    String name = evt.getPropertyName();\r\n    if (name == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n        DrawingView view = ((DrawingView) (evt.getOldValue()));\r\n        if (view != null) {\r\n            view.removePropertyChangeListener(this);\r\n            view.removeFigureSelectionListener(this);\r\n        }\r\n        view = ((DrawingView) (evt.getNewValue()));\r\n        if (view != null) {\r\n            view.addPropertyChangeListener(this);\r\n            view.addFigureSelectionListener(this);\r\n        }\r\n        updateVisibility();\r\n    } else\r\n        if (name == (DrawingEditor.TOOL_PROPERTY)) {\r\n            updateVisibility();\r\n        }\r\n\r\n}'),(5776,'selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public void selectionChanged(FigureSelectionEvent evt) {\r\n    updateVisibility();\r\n}'),(5777,'setMinSelectionCount(int)','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.setMinSelectionCount(int)','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public void setMinSelectionCount(int newValue) {\r\n    minSelectionCount = newValue;\r\n    updateVisibility();\r\n}'),(5778,'setVisibleIfCreationTool(boolean)','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.setVisibleIfCreationTool(boolean)','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public void setVisibleIfCreationTool(boolean newValue) {\r\n    isVisibleIfCreationTool = newValue;\r\n}'),(5779,'updateVisibility()','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.updateVisibility()','595','org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer','public void updateVisibility() {\r\n    boolean newValue = (((editor) != null) && ((editor.getActiveView()) != null)) && ((((isVisibleIfCreationTool) && ((editor.getTool()) != null)) && (!((editor.getTool()) instanceof SelectionTool))) || ((editor.getActiveView().getSelectionCount()) >= (minSelectionCount)));\r\n    component.setVisible(newValue);\r\n    // The following is needed to trick BoxLayout\r\n    if (newValue) {\r\n        component.setPreferredSize(null);\r\n    } else {\r\n        component.setPreferredSize(new Dimension(0, 0));\r\n    }\r\n    component.revalidate();\r\n}'),(5780,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)','org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)','596','org.jhotdraw.samples.svg.gui.SelectionOpacityIcon','/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(5781,'-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)','org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)','596','org.jhotdraw.samples.svg.gui.SelectionOpacityIcon','public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(5782,'paintIcon(java.awt.Component,java.awt.Graphics,int,int)','org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)','596','org.jhotdraw.samples.svg.gui.SelectionOpacityIcon','@Override\r\npublic void paintIcon(Component c, Graphics gr, int x, int y) {\r\n    Graphics2D g = ((Graphics2D) (gr));\r\n    super.paintIcon(c, g, x, y);\r\n    Double opacity;\r\n    Color fillColor;\r\n    Color strokeColor;\r\n    DrawingView view = editor.getActiveView();\r\n    if ((view != null) && ((view.getSelectedFigures().size()) == 1)) {\r\n        opacity = opacityKey.get(view.getSelectedFigures().iterator().next());\r\n        fillColor = ((fillColorKey) == null) ? null : fillColorKey.get(view.getSelectedFigures().iterator().next());\r\n        strokeColor = ((strokeColorKey) == null) ? null : strokeColorKey.get(view.getSelectedFigures().iterator().next());\r\n    } else {\r\n        opacity = opacityKey.get(editor.getDefaultAttributes());\r\n        fillColor = ((fillColorKey) == null) ? null : fillColorKey.get(editor.getDefaultAttributes());\r\n        strokeColor = ((strokeColorKey) == null) ? null : strokeColorKey.get(editor.getDefaultAttributes());\r\n    }\r\n    if (((fillColorKey) != null) && ((fillShape) != null)) {\r\n        if (opacity != null) {\r\n            if (fillColor == null) {\r\n                fillColor = Color.BLACK;\r\n            }\r\n            g.setColor(new Color(((((int) (opacity * 255)) << 24) | ((fillColor.getRGB()) & 16777215)), true));\r\n            g.translate(x, y);\r\n            g.fill(fillShape);\r\n            g.translate((-x), (-y));\r\n        }\r\n    }\r\n    if (((strokeColorKey) != null) && ((strokeShape) != null)) {\r\n        if (opacity != null) {\r\n            if (strokeColor == null) {\r\n                strokeColor = Color.BLACK;\r\n            }\r\n            g.setColor(new Color(((((int) (opacity * 255)) << 24) | ((strokeColor.getRGB()) & 16777215)), true));\r\n            g.translate(x, y);\r\n            g.draw(strokeShape);\r\n            g.translate((-x), (-y));\r\n        }\r\n    }\r\n}'),(5783,'-init-()','org.jhotdraw.samples.svg.gui.ServerAuthenticationException.-init-()','597','org.jhotdraw.samples.svg.gui.ServerAuthenticationException','/**\r\n * Creates a new instance of <code>ServerAuthenticationException</code> without detail message.\r\n */\r\npublic ServerAuthenticationException() {\r\n}'),(5784,'-init-(java.lang.String)','org.jhotdraw.samples.svg.gui.ServerAuthenticationException.-init-(java.lang.String)','597','org.jhotdraw.samples.svg.gui.ServerAuthenticationException','/**\r\n * Constructs an instance of <code>ServerAuthenticationException</code> with the specified detail message.\r\n *\r\n * @param msg\r\n * 		the detail message.\r\n */\r\npublic ServerAuthenticationException(String msg) {\r\n    super(msg);\r\n}'),(5785,'-init-()','org.jhotdraw.samples.svg.gui.StrokeToolBar.-init-()','598','org.jhotdraw.samples.svg.gui.StrokeToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic StrokeToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(\"stroke.toolbar\"));\r\n    setDisclosureStateCount(3);\r\n}'),(5786,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.StrokeToolBar.createDisclosedComponent(int)','598','org.jhotdraw.samples.svg.gui.StrokeToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Stroke color\r\n                Map<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n                SVGAttributeKeys.STROKE_GRADIENT.set(defaultAttributes, null);\r\n                btn = ButtonFactory.createSelectionColorButton(editor, AttributeKeys.STROKE_COLOR, ButtonFactory.HSV_COLORS, ButtonFactory.HSV_COLORS_COLUMN_COUNT, \"attribute.strokeColor\", labels, defaultAttributes, new Rectangle(3, 3, 10, 10));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                ((JPopupButton) (btn)).setAction(null, null);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(btn, gbc);\r\n                // Opacity slider\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.strokeOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new SelectionOpacityIcon(editor, SVGAttributeKeys.STROKE_OPACITY, null, AttributeKeys.STROKE_COLOR, getClass().getResource(labels.getString(\"attribute.strokeOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(opacityPopupButton, gbc);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.STROKE_OPACITY, opacitySlider, editor);\r\n                // Create stroke width popup slider\r\n                JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n                JAttributeSlider strokeWidthSlider = new JAttributeSlider(JSlider.VERTICAL, 0, 50, 1);\r\n                strokeWidthSlider.setUI(((SliderUI) (PaletteSliderUI.createUI(strokeWidthSlider))));\r\n                strokeWidthPopupButton.add(strokeWidthSlider);\r\n                labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth\");\r\n                strokeWidthPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(strokeWidthPopupButton))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridx = 0;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(strokeWidthPopupButton, gbc);\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.STROKE_WIDTH, strokeWidthSlider, editor);\r\n                // Create stroke dashes buttons\r\n                btn = ButtonFactory.createStrokeJoinButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createStrokeCapButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createStrokeDashesButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Stroke color field and button\r\n                Map<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n                SVGAttributeKeys.STROKE_GRADIENT.set(defaultAttributes, null);\r\n                JAttributeTextField<Color> colorField = new JAttributeTextField<Color>();\r\n                colorField.setColumns(7);\r\n                colorField.setToolTipText(labels.getString(\"attribute.strokeColor.toolTipText\"));\r\n                colorField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                colorField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(colorField))));\r\n                colorField.setFormatterFactory(ColorFormatter.createFormatterFactory());\r\n                colorField.setHorizontalAlignment(JTextField.LEFT);\r\n                new FigureAttributeEditorHandler<Color>(AttributeKeys.STROKE_COLOR, defaultAttributes, colorField, editor, true);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridwidth = 3;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(colorField, gbc);\r\n                btn = ButtonFactory.createSelectionColorButton(editor, AttributeKeys.STROKE_COLOR, ButtonFactory.HSV_COLORS, ButtonFactory.HSV_COLORS_COLUMN_COUNT, \"attribute.strokeColor\", labels, defaultAttributes, new Rectangle(3, 3, 10, 10));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                ((JPopupButton) (btn)).setAction(null, null);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 3;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(btn, gbc);\r\n                // Opacity field with slider\r\n                JAttributeTextField<Double> opacityField = new JAttributeTextField<Double>();\r\n                opacityField.setColumns(3);\r\n                opacityField.setToolTipText(labels.getString(\"attribute.strokeOpacity.toolTipText\"));\r\n                opacityField.setHorizontalAlignment(JAttributeTextField.RIGHT);\r\n                opacityField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                opacityField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(opacityField))));\r\n                opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1.0, 100.0));\r\n                opacityField.setHorizontalAlignment(JTextField.LEFT);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.STROKE_OPACITY, opacityField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(opacityField, gbc);\r\n                JPopupButton opacityPopupButton = new JPopupButton();\r\n                JAttributeSlider opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);\r\n                opacityPopupButton.add(opacitySlider);\r\n                labels.configureToolBarButton(opacityPopupButton, \"attribute.strokeOpacity\");\r\n                opacityPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(opacityPopupButton))));\r\n                opacityPopupButton.setIcon(new SelectionOpacityIcon(editor, SVGAttributeKeys.STROKE_OPACITY, null, AttributeKeys.STROKE_COLOR, getClass().getResource(labels.getString(\"attribute.strokeOpacity.icon\")), new Rectangle(5, 5, 6, 6), new Rectangle(4, 4, 7, 7)));\r\n                opacityPopupButton.setPopupAnchor(SwingConstants.SOUTH_EAST);\r\n                new SelectionComponentRepainter(editor, opacityPopupButton);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.weighty = 1.0F;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(opacityPopupButton, gbc);\r\n                opacitySlider.setUI(((SliderUI) (PaletteSliderUI.createUI(opacitySlider))));\r\n                opacitySlider.setScaleFactor(100.0);\r\n                new FigureAttributeEditorHandler<Double>(SVGAttributeKeys.STROKE_OPACITY, opacitySlider, editor);\r\n                // Create stroke width field with popup slider\r\n                JAttributeTextField<Double> strokeWidthField = new JAttributeTextField<Double>();\r\n                strokeWidthField.setColumns(2);\r\n                strokeWidthField.setToolTipText(labels.getString(\"attribute.strokeWidth.toolTipText\"));\r\n                strokeWidthField.setHorizontalAlignment(JAttributeTextField.LEFT);\r\n                strokeWidthField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                strokeWidthField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(strokeWidthField))));\r\n                strokeWidthField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 100.0, 1.0));\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.STROKE_WIDTH, strokeWidthField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                p.add(strokeWidthField, gbc);\r\n                JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n                JAttributeSlider strokeWidthSlider = new JAttributeSlider(JSlider.VERTICAL, 0, 50, 1);\r\n                strokeWidthSlider.setUI(((SliderUI) (PaletteSliderUI.createUI(strokeWidthSlider))));\r\n                strokeWidthPopupButton.add(strokeWidthSlider);\r\n                labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth\");\r\n                strokeWidthPopupButton.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(strokeWidthPopupButton))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridx = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(strokeWidthPopupButton, gbc);\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.STROKE_WIDTH, strokeWidthSlider, editor);\r\n                btn = ButtonFactory.createStrokeJoinButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridx = 4;\r\n                gbc.gridy = 0;\r\n                gbc.gridwidth = 2;\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.createStrokeCapButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridx = 4;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                // Create dash offset field and dashes button\r\n                JAttributeTextField<Double> dashOffsetField = new JAttributeTextField<Double>();\r\n                dashOffsetField.setColumns(1);\r\n                dashOffsetField.setToolTipText(labels.getString(\"attribute.strokeDashPhase.toolTipText\"));\r\n                dashOffsetField.setHorizontalAlignment(JAttributeTextField.LEFT);\r\n                // dashOffsetField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                dashOffsetField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(dashOffsetField))));\r\n                dashOffsetField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory((-1000.0), 1000.0, 1.0));\r\n                new FigureAttributeEditorHandler<Double>(AttributeKeys.STROKE_DASH_PHASE, dashOffsetField, editor);\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                gbc.fill = GridBagConstraints.BOTH;\r\n                gbc.gridwidth = 2;\r\n                p.add(dashOffsetField, gbc);\r\n                btn = ButtonFactory.createStrokeDashesButton(editor, labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.gridx = 4;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5787,'getDefaultDisclosureState()','org.jhotdraw.samples.svg.gui.StrokeToolBar.getDefaultDisclosureState()','598','org.jhotdraw.samples.svg.gui.StrokeToolBar','@Override\r\nprotected int getDefaultDisclosureState() {\r\n    return 1;\r\n}'),(5788,'getID()','org.jhotdraw.samples.svg.gui.StrokeToolBar.getID()','598','org.jhotdraw.samples.svg.gui.StrokeToolBar','@Override\r\nprotected String getID() {\r\n    return \"stroke\";\r\n}'),(5789,'initComponents()','org.jhotdraw.samples.svg.gui.StrokeToolBar.initComponents()','598','org.jhotdraw.samples.svg.gui.StrokeToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5790,'setEditor(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.StrokeToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)','598','org.jhotdraw.samples.svg.gui.StrokeToolBar','@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(5791,'-init-()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.-init-()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','StrokeToolBarBeanInfo() {\r\n}'),(5792,'getBdescriptor()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getBdescriptor()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((StrokeToolBarBeanInfo.beanDescriptor) == null)\r\n        StrokeToolBarBeanInfo.beanDescriptor = new BeanDescriptor(StrokeToolBarBeanInfo.class);\r\n\r\n    StrokeToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    StrokeToolBarBeanInfo.beanDescriptor.setDisplayName(\"StrokeToolPane\");\r\n    return StrokeToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5793,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getBeanDescriptor()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return StrokeToolBarBeanInfo.getBdescriptor();\r\n}'),(5794,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getDefaultEventIndex()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return StrokeToolBarBeanInfo.defaultEventIndex;\r\n}'),(5795,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getDefaultPropertyIndex()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return StrokeToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5796,'getEdescriptor()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getEdescriptor()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return StrokeToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5797,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getEventSetDescriptors()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return StrokeToolBarBeanInfo.getEdescriptor();\r\n}'),(5798,'getIcon(int)','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getIcon(int)','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((StrokeToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((StrokeToolBarBeanInfo.iconColor16) == null)\r\n                    StrokeToolBarBeanInfo.iconColor16 = loadImage(StrokeToolBarBeanInfo.iconNameC16);\r\n\r\n                return StrokeToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((StrokeToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((StrokeToolBarBeanInfo.iconColor32) == null)\r\n                    StrokeToolBarBeanInfo.iconColor32 = loadImage(StrokeToolBarBeanInfo.iconNameC32);\r\n\r\n                return StrokeToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((StrokeToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((StrokeToolBarBeanInfo.iconMono16) == null)\r\n                    StrokeToolBarBeanInfo.iconMono16 = loadImage(StrokeToolBarBeanInfo.iconNameM16);\r\n\r\n                return StrokeToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((StrokeToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((StrokeToolBarBeanInfo.iconMono32) == null)\r\n                    StrokeToolBarBeanInfo.iconMono32 = loadImage(StrokeToolBarBeanInfo.iconNameM32);\r\n\r\n                return StrokeToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5799,'getMdescriptor()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getMdescriptor()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return StrokeToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5800,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getMethodDescriptors()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return StrokeToolBarBeanInfo.getMdescriptor();\r\n}'),(5801,'getPdescriptor()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getPdescriptor()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return StrokeToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5802,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo.getPropertyDescriptors()','599','org.jhotdraw.samples.svg.gui.StrokeToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return StrokeToolBarBeanInfo.getPdescriptor();\r\n}'),(5803,'-init-()','org.jhotdraw.samples.svg.gui.SummaryToolBar.-init-()','600','org.jhotdraw.samples.svg.gui.SummaryToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic SummaryToolBar() {\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    initComponents();\r\n    GridBagLayout layout = new GridBagLayout();\r\n    setLayout(layout);\r\n    GridBagConstraints gbc;\r\n    gbc = new GridBagConstraints();\r\n    gbc.insets = new Insets(0, 10, 0, 0);\r\n    gbc.weightx = 1.0;\r\n    gbc.fill = GridBagConstraints.HORIZONTAL;\r\n    layout.setConstraints(summaryField, gbc);\r\n}'),(5804,'getSummary()','org.jhotdraw.samples.svg.gui.SummaryToolBar.getSummary()','600','org.jhotdraw.samples.svg.gui.SummaryToolBar','public String getSummary() {\r\n    return summaryField.getText();\r\n}'),(5805,'initComponents()','org.jhotdraw.samples.svg.gui.SummaryToolBar.initComponents()','600','org.jhotdraw.samples.svg.gui.SummaryToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    summaryLabel = new JLabel();\r\n    summaryField = new JTextField();\r\n    setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n    setFloatable(false);\r\n    setOpaque(false);\r\n    summaryLabel.setFont(new Font(\"Dialog\", 0, 11));\r\n    summaryLabel.setText(labels.getString(\"summary\"));// NOI18N\r\n\r\n    add(summaryLabel);\r\n    summaryField.setFont(new Font(\"DialogInput\", 0, 11));\r\n    add(summaryField);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5806,'-init-()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.-init-()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','SummaryToolBarBeanInfo() {\r\n}'),(5807,'getBdescriptor()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getBdescriptor()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((SummaryToolBarBeanInfo.beanDescriptor) == null)\r\n        SummaryToolBarBeanInfo.beanDescriptor = new BeanDescriptor(SummaryToolBarBeanInfo.class);\r\n\r\n    SummaryToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    SummaryToolBarBeanInfo.beanDescriptor.setDisplayName(\"SummaryToolBar\");\r\n    return SummaryToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5808,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getBeanDescriptor()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return SummaryToolBarBeanInfo.getBdescriptor();\r\n}'),(5809,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getDefaultEventIndex()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return SummaryToolBarBeanInfo.defaultEventIndex;\r\n}'),(5810,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getDefaultPropertyIndex()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return SummaryToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5811,'getEdescriptor()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getEdescriptor()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return SummaryToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5812,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getEventSetDescriptors()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return SummaryToolBarBeanInfo.getEdescriptor();\r\n}'),(5813,'getIcon(int)','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getIcon(int)','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((SummaryToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((SummaryToolBarBeanInfo.iconColor16) == null)\r\n                    SummaryToolBarBeanInfo.iconColor16 = loadImage(SummaryToolBarBeanInfo.iconNameC16);\r\n\r\n                return SummaryToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((SummaryToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((SummaryToolBarBeanInfo.iconColor32) == null)\r\n                    SummaryToolBarBeanInfo.iconColor32 = loadImage(SummaryToolBarBeanInfo.iconNameC32);\r\n\r\n                return SummaryToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((SummaryToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((SummaryToolBarBeanInfo.iconMono16) == null)\r\n                    SummaryToolBarBeanInfo.iconMono16 = loadImage(SummaryToolBarBeanInfo.iconNameM16);\r\n\r\n                return SummaryToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((SummaryToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((SummaryToolBarBeanInfo.iconMono32) == null)\r\n                    SummaryToolBarBeanInfo.iconMono32 = loadImage(SummaryToolBarBeanInfo.iconNameM32);\r\n\r\n                return SummaryToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5814,'getMdescriptor()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getMdescriptor()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return SummaryToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5815,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getMethodDescriptors()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return SummaryToolBarBeanInfo.getMdescriptor();\r\n}'),(5816,'getPdescriptor()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getPdescriptor()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return SummaryToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5817,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo.getPropertyDescriptors()','601','org.jhotdraw.samples.svg.gui.SummaryToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return SummaryToolBarBeanInfo.getPdescriptor();\r\n}'),(5818,'-init-()','org.jhotdraw.samples.svg.gui.ToolsToolBar.-init-()','602','org.jhotdraw.samples.svg.gui.ToolsToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic ToolsToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(\"tools.toolbar\"));\r\n}'),(5819,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.ToolsToolBar.createDisclosedComponent(int)','602','org.jhotdraw.samples.svg.gui.ToolsToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                CreationTool creationTool;\r\n                PathTool pathTool;\r\n                TextCreationTool textTool;\r\n                TextAreaCreationTool textAreaTool;\r\n                SVGCreateFromFileTool imageTool;\r\n                HashMap<AttributeKey, Object> attributes;\r\n                btn = ButtonFactory.addSelectionToolTo(this, editor, ButtonFactory.createDrawingActions(editor), ToolsToolBar.createSelectionActions(editor));\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 0;\r\n                p.add(btn, gbc);\r\n                labels.configureToolBarButton(btn, \"selectionTool\");\r\n                attributes = new HashMap<AttributeKey, Object>();\r\n                btn = ButtonFactory.addToolTo(this, editor, (creationTool = new CreationTool(new SVGRectFigure(), attributes)), \"createRectangle\", labels);\r\n                creationTool.setToolDoneAfterCreation(false);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.addToolTo(this, editor, (creationTool = new CreationTool(new SVGEllipseFigure(), attributes)), \"createEllipse\", labels);\r\n                creationTool.setToolDoneAfterCreation(false);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.addToolTo(this, editor, (pathTool = new PathTool(new SVGPathFigure(), new SVGBezierFigure(true), attributes)), \"createPolygon\", labels);\r\n                pathTool.setToolDoneAfterCreation(false);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                attributes = new HashMap<AttributeKey, Object>();\r\n                attributes.put(AttributeKeys.FILL_COLOR, null);\r\n                attributes.put(AttributeKeys.CLOSED, false);\r\n                btn = ButtonFactory.addToolTo(this, editor, (creationTool = new CreationTool(new SVGPathFigure(), attributes)), \"createLine\", labels);\r\n                creationTool.setToolDoneAfterCreation(false);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                btn = ButtonFactory.addToolTo(this, editor, (pathTool = new PathTool(new SVGPathFigure(), new SVGBezierFigure(false), attributes)), \"createScribble\", labels);\r\n                pathTool.setToolDoneAfterCreation(false);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                attributes = new HashMap<AttributeKey, Object>();\r\n                attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n                attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n                btn = ButtonFactory.addToolTo(this, editor, (textTool = new TextCreationTool(new SVGTextFigure(), attributes)), \"createText\", labels);\r\n                textTool.setToolDoneAfterCreation(true);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                textAreaTool = new TextAreaCreationTool(new SVGTextAreaFigure(), attributes);\r\n                textAreaTool.setRubberbandColor(Color.BLACK);\r\n                textAreaTool.setToolDoneAfterCreation(true);\r\n                btn = ButtonFactory.addToolTo(this, editor, textAreaTool, \"createTextArea\", labels);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n                attributes = new HashMap<AttributeKey, Object>();\r\n                attributes.put(AttributeKeys.FILL_COLOR, null);\r\n                attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n                btn = ButtonFactory.addToolTo(this, editor, (imageTool = new SVGCreateFromFileTool(new SVGImageFigure(), new SVGGroupFigure(), attributes)), \"createImage\", labels);\r\n                imageTool.setToolDoneAfterCreation(true);\r\n                imageTool.setUseFileDialog(true);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 2;\r\n                gbc.gridy = 2;\r\n                gbc.insets = new Insets(3, 3, 0, 0);\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5820,'createSelectionActions(org.jhotdraw.draw.DrawingEditor)','org.jhotdraw.samples.svg.gui.ToolsToolBar.createSelectionActions(org.jhotdraw.draw.DrawingEditor)','602','org.jhotdraw.samples.svg.gui.ToolsToolBar','public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(5821,'getDefaultDisclosureState()','org.jhotdraw.samples.svg.gui.ToolsToolBar.getDefaultDisclosureState()','602','org.jhotdraw.samples.svg.gui.ToolsToolBar','protected int getDefaultDisclosureState() {\r\n    return 1;\r\n}'),(5822,'getID()','org.jhotdraw.samples.svg.gui.ToolsToolBar.getID()','602','org.jhotdraw.samples.svg.gui.ToolsToolBar','@Override\r\nprotected String getID() {\r\n    return \"tools\";\r\n}'),(5823,'initComponents()','org.jhotdraw.samples.svg.gui.ToolsToolBar.initComponents()','602','org.jhotdraw.samples.svg.gui.ToolsToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5824,'-init-()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.-init-()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','ToolsToolBarBeanInfo() {\r\n}'),(5825,'getBdescriptor()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getBdescriptor()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((ToolsToolBarBeanInfo.beanDescriptor) == null)\r\n        ToolsToolBarBeanInfo.beanDescriptor = new BeanDescriptor(ToolsToolBarBeanInfo.class);\r\n\r\n    ToolsToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    ToolsToolBarBeanInfo.beanDescriptor.setDisplayName(\"ToolsToolBar\");\r\n    return ToolsToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5826,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getBeanDescriptor()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return ToolsToolBarBeanInfo.getBdescriptor();\r\n}'),(5827,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getDefaultEventIndex()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return ToolsToolBarBeanInfo.defaultEventIndex;\r\n}'),(5828,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getDefaultPropertyIndex()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return ToolsToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5829,'getEdescriptor()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getEdescriptor()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return ToolsToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5830,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getEventSetDescriptors()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return ToolsToolBarBeanInfo.getEdescriptor();\r\n}'),(5831,'getIcon(int)','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getIcon(int)','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((ToolsToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((ToolsToolBarBeanInfo.iconColor16) == null)\r\n                    ToolsToolBarBeanInfo.iconColor16 = loadImage(ToolsToolBarBeanInfo.iconNameC16);\r\n\r\n                return ToolsToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((ToolsToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((ToolsToolBarBeanInfo.iconColor32) == null)\r\n                    ToolsToolBarBeanInfo.iconColor32 = loadImage(ToolsToolBarBeanInfo.iconNameC32);\r\n\r\n                return ToolsToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((ToolsToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((ToolsToolBarBeanInfo.iconMono16) == null)\r\n                    ToolsToolBarBeanInfo.iconMono16 = loadImage(ToolsToolBarBeanInfo.iconNameM16);\r\n\r\n                return ToolsToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((ToolsToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((ToolsToolBarBeanInfo.iconMono32) == null)\r\n                    ToolsToolBarBeanInfo.iconMono32 = loadImage(ToolsToolBarBeanInfo.iconNameM32);\r\n\r\n                return ToolsToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5832,'getMdescriptor()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getMdescriptor()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return ToolsToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5833,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getMethodDescriptors()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return ToolsToolBarBeanInfo.getMdescriptor();\r\n}'),(5834,'getPdescriptor()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getPdescriptor()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return ToolsToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5835,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo.getPropertyDescriptors()','603','org.jhotdraw.samples.svg.gui.ToolsToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return ToolsToolBarBeanInfo.getPdescriptor();\r\n}'),(5836,'-init-()','org.jhotdraw.samples.svg.gui.ViewToolBar.-init-()','604','org.jhotdraw.samples.svg.gui.ViewToolBar','/**\r\n * Creates new instance.\r\n */\r\npublic ViewToolBar() {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    setName(labels.getString(((getID()) + \".toolbar\")));\r\n    setDisclosureStateCount(3);\r\n}'),(5837,'createDisclosedComponent(int)','org.jhotdraw.samples.svg.gui.ViewToolBar.createDisclosedComponent(int)','604','org.jhotdraw.samples.svg.gui.ViewToolBar','@Override\r\nprotected JComponent createDisclosedComponent(int state) {\r\n    JPanel p = null;\r\n    switch (state) {\r\n        case 1 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.removeAll();\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Toggle Grid Button\r\n                AbstractButton toggleGridButton;\r\n                toggleGridButton = btn = ButtonFactory.createToggleGridButton(view);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                labels.configureToolBarButton(btn, \"alignGrid\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.NONE;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                // Zoom button\r\n                btn = ButtonFactory.createZoomButton(view);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                labels.configureToolBarButton(btn, \"view.zoomFactor\");\r\n                btn.setText(\"100 %\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 1;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.weighty = 1;\r\n                gbc.weightx = 1;\r\n                btn.setPreferredSize(new Dimension(btn.getPreferredSize().width, toggleGridButton.getPreferredSize().height));\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n        case 2 :\r\n            {\r\n                p = new JPanel();\r\n                p.setOpaque(false);\r\n                p.removeAll();\r\n                p.setBorder(new EmptyBorder(5, 5, 5, 8));\r\n                ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n                GridBagLayout layout = new GridBagLayout();\r\n                p.setLayout(layout);\r\n                GridBagConstraints gbc;\r\n                AbstractButton btn;\r\n                // Grid size field and toggle grid button\r\n                JLifeFormattedTextField gridSizeField = new JLifeFormattedTextField();\r\n                gridSizeField.setColumns(3);\r\n                gridSizeField.setToolTipText(labels.getString(\"view.gridSize.toolTipText\"));\r\n                gridSizeField.setHorizontalAlignment(JLifeFormattedTextField.RIGHT);\r\n                gridSizeField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                gridSizeField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(gridSizeField))));\r\n                gridSizeField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.0, 1000.0, 1.0, true, false));\r\n                gridSizeField.setHorizontalAlignment(JTextField.LEADING);\r\n                final GridConstrainer constrainer = ((GridConstrainer) (view.getVisibleConstrainer()));\r\n                gridSizeField.addPropertyChangeListener(new PropertyChangeListener() {\r\n                    public void propertyChange(PropertyChangeEvent evt) {\r\n                        if (evt.getPropertyName().equals(\"value\")) {\r\n                            if ((evt.getNewValue()) != null) {\r\n                                constrainer.setWidth(((Double) (evt.getNewValue())));\r\n                                constrainer.setHeight(((Double) (evt.getNewValue())));\r\n                                prefs = Preferences.userNodeForPackage(getClass());\r\n                                prefs.putDouble(\"view.gridSize\", ((Double) (evt.getNewValue())));\r\n                                view.getComponent().repaint();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                gridSizeField.setValue(constrainer.getHeight());\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 0;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(gridSizeField, gbc);\r\n                btn = ButtonFactory.createToggleGridButton(view);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                labels.configureToolBarButton(btn, \"alignGrid\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 0;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.fill = GridBagConstraints.NONE;\r\n                gbc.insets = new Insets(0, 0, 0, 0);\r\n                p.add(btn, gbc);\r\n                // Zoom factor field and zoom button\r\n                final JLifeFormattedTextField scaleFactorField = new JLifeFormattedTextField();\r\n                scaleFactorField.setColumns(3);\r\n                scaleFactorField.setToolTipText(labels.getString(\"view.zoomFactor.toolTipText\"));\r\n                scaleFactorField.setHorizontalAlignment(JLifeFormattedTextField.RIGHT);\r\n                scaleFactorField.putClientProperty(\"Palette.Component.segmentPosition\", \"first\");\r\n                scaleFactorField.setUI(((PaletteFormattedTextFieldUI) (PaletteFormattedTextFieldUI.createUI(scaleFactorField))));\r\n                scaleFactorField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0.01, 50.0, 100.0, true, false));\r\n                scaleFactorField.setHorizontalAlignment(JTextField.LEADING);\r\n                scaleFactorField.setValue(view.getScaleFactor());\r\n                scaleFactorField.addPropertyChangeListener(new PropertyChangeListener() {\r\n                    public void propertyChange(PropertyChangeEvent evt) {\r\n                        if (evt.getPropertyName().equals(\"value\")) {\r\n                            if ((evt.getNewValue()) != null) {\r\n                                view.setScaleFactor(((Double) (evt.getNewValue())));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                view.addPropertyChangeListener(new PropertyChangeListener() {\r\n                    public void propertyChange(PropertyChangeEvent evt) {\r\n                        if ((evt.getPropertyName()) == (DrawingView.SCALE_FACTOR_PROPERTY)) {\r\n                            if ((evt.getNewValue()) != null) {\r\n                                scaleFactorField.setValue(((Double) (evt.getNewValue())));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 0;\r\n                gbc.gridy = 1;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                p.add(scaleFactorField, gbc);\r\n                btn = ButtonFactory.createZoomButton(view);\r\n                btn.setUI(((PaletteButtonUI) (PaletteButtonUI.createUI(btn))));\r\n                labels.configureToolBarButton(btn, \"view.zoomFactor\");\r\n                btn.setText(\"100 %\");\r\n                gbc = new GridBagConstraints();\r\n                gbc.gridx = 1;\r\n                gbc.gridy = 1;\r\n                gbc.gridwidth = GridBagConstraints.REMAINDER;\r\n                gbc.fill = GridBagConstraints.HORIZONTAL;\r\n                gbc.anchor = GridBagConstraints.FIRST_LINE_START;\r\n                gbc.insets = new Insets(3, 0, 0, 0);\r\n                gbc.weighty = 1;\r\n                btn.setPreferredSize(new Dimension(btn.getPreferredSize().width, scaleFactorField.getPreferredSize().height));\r\n                p.add(btn, gbc);\r\n            }\r\n            break;\r\n    }\r\n    return p;\r\n}'),(5838,'getID()','org.jhotdraw.samples.svg.gui.ViewToolBar.getID()','604','org.jhotdraw.samples.svg.gui.ViewToolBar','@Override\r\nprotected String getID() {\r\n    return \"view\";\r\n}'),(5839,'initComponents()','org.jhotdraw.samples.svg.gui.ViewToolBar.initComponents()','604','org.jhotdraw.samples.svg.gui.ViewToolBar','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    setOpaque(false);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(5840,'setView(org.jhotdraw.draw.DrawingView)','org.jhotdraw.samples.svg.gui.ViewToolBar.setView(org.jhotdraw.draw.DrawingView)','604','org.jhotdraw.samples.svg.gui.ViewToolBar','public void setView(DrawingView view) {\r\n    this.view = view;\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    GridConstrainer constrainer = ((GridConstrainer) (view.getVisibleConstrainer()));\r\n    constrainer.setHeight(prefs.getDouble(\"view.gridSize\", 8.0));\r\n    constrainer.setWidth(prefs.getDouble(\"view.gridSize\", 8.0));\r\n}'),(5841,'-init-()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.-init-()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','ViewToolBarBeanInfo() {\r\n}'),(5842,'getBdescriptor()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getBdescriptor()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','private static BeanDescriptor getBdescriptor() {\r\n    // GEN-HEADEREND:BeanDescriptor\r\n    // Here you can add code for customizing the BeanDescriptor.\r\n    if ((ViewToolBarBeanInfo.beanDescriptor) == null)\r\n        ViewToolBarBeanInfo.beanDescriptor = new BeanDescriptor(ViewToolBarBeanInfo.class);\r\n\r\n    ViewToolBarBeanInfo.beanDescriptor.setValue(\"isContainer\", Boolean.FALSE);\r\n    ViewToolBarBeanInfo.beanDescriptor.setDisplayName(\"ViewToolBar\");\r\n    return ViewToolBarBeanInfo.beanDescriptor;\r\n}// GEN-LAST:BeanDescriptor\r\n'),(5843,'getBeanDescriptor()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getBeanDescriptor()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','// GEN-FIRST:Superclass\r\n// Here you can add code for customizing the Superclass BeanInfo.\r\n// GEN-LAST:Superclass\r\n/**\r\n * Gets the beans <code>BeanDescriptor</code>s.\r\n *\r\n * @return BeanDescriptor describing the editable\r\nproperties of this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n */\r\npublic BeanDescriptor getBeanDescriptor() {\r\n    return ViewToolBarBeanInfo.getBdescriptor();\r\n}'),(5844,'getDefaultEventIndex()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getDefaultEventIndex()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','/**\r\n * A bean may have a \"default\" event that is the event that will\r\n * mostly commonly be used by humans when using the bean.\r\n *\r\n * @return Index of default event in the EventSetDescriptor array\r\nreturned by getEventSetDescriptors.\r\n<P>	Returns -1 if there is no default event.\r\n */\r\npublic int getDefaultEventIndex() {\r\n    return ViewToolBarBeanInfo.defaultEventIndex;\r\n}'),(5845,'getDefaultPropertyIndex()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getDefaultPropertyIndex()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','/**\r\n * A bean may have a \"default\" property that is the property that will\r\n * mostly commonly be initially chosen for update by humans who are\r\n * customizing the bean.\r\n *\r\n * @return Index of default property in the PropertyDescriptor array\r\nreturned by getPropertyDescriptors.\r\n<P>	Returns -1 if there is no default property.\r\n */\r\npublic int getDefaultPropertyIndex() {\r\n    return ViewToolBarBeanInfo.defaultPropertyIndex;\r\n}'),(5846,'getEdescriptor()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getEdescriptor()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','private static EventSetDescriptor[] getEdescriptor() {\r\n    // GEN-HEADEREND:Events\r\n    // Here you can add code for customizing the event sets array.\r\n    return ViewToolBarBeanInfo.eventSets;\r\n}// GEN-LAST:Events\r\n'),(5847,'getEventSetDescriptors()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getEventSetDescriptors()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','/**\r\n * Gets the beans <code>EventSetDescriptor</code>s.\r\n *\r\n * @return An array of EventSetDescriptors describing the kinds of\r\nevents fired by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic EventSetDescriptor[] getEventSetDescriptors() {\r\n    return ViewToolBarBeanInfo.getEdescriptor();\r\n}'),(5848,'getIcon(int)','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getIcon(int)','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','/**\r\n * This method returns an image object that can be used to\r\n * represent the bean in toolboxes, toolbars, etc.   Icon images\r\n * will typically be GIFs, but may in future include other formats.\r\n * <p>\r\n * Beans arent required to provide icons and may return null from\r\n * this method.\r\n * <p>\r\n * There are four possible flavors of icons (16x16 color,\r\n * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only\r\n * support a single icon we recommend supporting 16x16 color.\r\n * <p>\r\n * We recommend that icons have a \"transparent\" background\r\n * so they can be rendered onto an existing background.\r\n *\r\n * @param iconKind\r\n * 		The kind of icon requested.  This should be\r\n * 		one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,\r\n * 		ICON_MONO_16x16, or ICON_MONO_32x32.\r\n * @return An image object representing the requested icon.  May\r\nreturn null if no suitable icon is available.\r\n */\r\npublic Image getIcon(int iconKind) {\r\n    switch (iconKind) {\r\n        case BeanInfo.ICON_COLOR_16x16 :\r\n            if ((ViewToolBarBeanInfo.iconNameC16) == null)\r\n                return null;\r\n            else {\r\n                if ((ViewToolBarBeanInfo.iconColor16) == null)\r\n                    ViewToolBarBeanInfo.iconColor16 = loadImage(ViewToolBarBeanInfo.iconNameC16);\r\n\r\n                return ViewToolBarBeanInfo.iconColor16;\r\n            }\r\n        case BeanInfo.ICON_COLOR_32x32 :\r\n            if ((ViewToolBarBeanInfo.iconNameC32) == null)\r\n                return null;\r\n            else {\r\n                if ((ViewToolBarBeanInfo.iconColor32) == null)\r\n                    ViewToolBarBeanInfo.iconColor32 = loadImage(ViewToolBarBeanInfo.iconNameC32);\r\n\r\n                return ViewToolBarBeanInfo.iconColor32;\r\n            }\r\n        case BeanInfo.ICON_MONO_16x16 :\r\n            if ((ViewToolBarBeanInfo.iconNameM16) == null)\r\n                return null;\r\n            else {\r\n                if ((ViewToolBarBeanInfo.iconMono16) == null)\r\n                    ViewToolBarBeanInfo.iconMono16 = loadImage(ViewToolBarBeanInfo.iconNameM16);\r\n\r\n                return ViewToolBarBeanInfo.iconMono16;\r\n            }\r\n        case BeanInfo.ICON_MONO_32x32 :\r\n            if ((ViewToolBarBeanInfo.iconNameM32) == null)\r\n                return null;\r\n            else {\r\n                if ((ViewToolBarBeanInfo.iconMono32) == null)\r\n                    ViewToolBarBeanInfo.iconMono32 = loadImage(ViewToolBarBeanInfo.iconNameM32);\r\n\r\n                return ViewToolBarBeanInfo.iconMono32;\r\n            }\r\n        default :\r\n            return null;\r\n    }\r\n}'),(5849,'getMdescriptor()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getMdescriptor()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','private static MethodDescriptor[] getMdescriptor() {\r\n    // GEN-HEADEREND:Methods\r\n    // Here you can add code for customizing the methods array.\r\n    return ViewToolBarBeanInfo.methods;\r\n}// GEN-LAST:Methods\r\n'),(5850,'getMethodDescriptors()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getMethodDescriptors()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','/**\r\n * Gets the beans <code>MethodDescriptor</code>s.\r\n *\r\n * @return An array of MethodDescriptors describing the methods\r\nimplemented by this bean.  May return null if the information\r\nshould be obtained by automatic analysis.\r\n */\r\npublic MethodDescriptor[] getMethodDescriptors() {\r\n    return ViewToolBarBeanInfo.getMdescriptor();\r\n}'),(5851,'getPdescriptor()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getPdescriptor()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','private static PropertyDescriptor[] getPdescriptor() {\r\n    // GEN-HEADEREND:Properties\r\n    // Here you can add code for customizing the properties array.\r\n    return ViewToolBarBeanInfo.properties;\r\n}// GEN-LAST:Properties\r\n'),(5852,'getPropertyDescriptors()','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo.getPropertyDescriptors()','605','org.jhotdraw.samples.svg.gui.ViewToolBarBeanInfo','/**\r\n * Gets the beans <code>PropertyDescriptor</code>s.\r\n *\r\n * @return An array of PropertyDescriptors describing the editable\r\nproperties supported by this bean.  May return null if the\r\ninformation should be obtained by automatic analysis.\r\n<p>\r\nIf a property is indexed, then its entry in the result array will\r\nbelong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.\r\nA client of getPropertyDescriptors can use \"instanceof\" to check\r\nif a given PropertyDescriptor is an IndexedPropertyDescriptor.\r\n */\r\npublic PropertyDescriptor[] getPropertyDescriptors() {\r\n    return ViewToolBarBeanInfo.getPdescriptor();\r\n}'),(5853,'-init-(java.net.URLConnection)','org.jhotdraw.samples.svg.io.ClientHttpRequest.-init-(java.net.URLConnection)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * Creates a new multipart POST HTTP request on a freshly opened URLConnection\r\n *\r\n * @param connection\r\n * 		an already open URL connection\r\n * @throws IOException\r\n * 		\r\n */\r\npublic ClientHttpRequest(URLConnection connection) throws IOException {\r\n    this._connection = connection;\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.setRequestProperty(\"Content-Type\", (\"multipart/form-data; boundary=\" + (boundary)));\r\n}'),(5854,'-init-(java.net.URL)','org.jhotdraw.samples.svg.io.ClientHttpRequest.-init-(java.net.URL)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * Creates a new multipart POST HTTP request for a specified URL\r\n *\r\n * @param url\r\n * 		the URL to send request to\r\n * @throws IOException\r\n * 		\r\n */\r\npublic ClientHttpRequest(URL url) throws IOException {\r\n    this(url.openConnection());\r\n}'),(5855,'-init-(java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.-init-(java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * Creates a new multipart POST HTTP request for a specified URL string\r\n *\r\n * @param urlString\r\n * 		the string representation of the URL to send request to\r\n * @throws IOException\r\n * 		\r\n */\r\npublic ClientHttpRequest(String urlString) throws IOException {\r\n    this(new URL(urlString));\r\n}'),(5856,'boundary()','org.jhotdraw.samples.svg.io.ClientHttpRequest.boundary()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','private void boundary() throws IOException {\r\n    write(\"--\");\r\n    write(boundary);\r\n}'),(5857,'connect()','org.jhotdraw.samples.svg.io.ClientHttpRequest.connect()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','protected void connect() throws IOException {\r\n    if ((_os) == null)\r\n        _os = _connection.getOutputStream();\r\n\r\n}'),(5858,'doPost()','org.jhotdraw.samples.svg.io.ClientHttpRequest.doPost()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added\r\n *\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n */\r\nprivate InputStream doPost() throws IOException {\r\n    boundary();\r\n    writeln(\"--\");\r\n    _os.close();\r\n    return _connection.getInputStream();\r\n}'),(5859,'newline()','org.jhotdraw.samples.svg.io.ClientHttpRequest.newline()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','protected void newline() throws IOException {\r\n    connect();\r\n    write(\"\r\n\");\r\n}'),(5860,'pipe(java.io.InputStream,java.io.OutputStream)','org.jhotdraw.samples.svg.io.ClientHttpRequest.pipe(java.io.InputStream,java.io.OutputStream)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','private static void pipe(InputStream in, OutputStream out) throws IOException {\r\n    byte[] buf = new byte[500000];\r\n    int nread;\r\n    int total = 0;\r\n    synchronized(in) {\r\n        while ((nread = in.read(buf, 0, buf.length)) >= 0) {\r\n            out.write(buf, 0, nread);\r\n            total += nread;\r\n        } \r\n    }\r\n    out.flush();\r\n    buf = null;\r\n}'),(5861,'post()','org.jhotdraw.samples.svg.io.ClientHttpRequest.post()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added\r\n *\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n */\r\npublic InputStream post() throws IOException {\r\n    postCookies();\r\n    return doPost();\r\n}'),(5862,'post(java.lang.Object[])','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.Object[])','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\r\n *\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n */\r\npublic InputStream post(Object[] parameters) throws IOException {\r\n    postCookies();\r\n    setParameters(parameters);\r\n    return doPost();\r\n}'),(5863,'post(java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to the server, with the specified parameter\r\n *\r\n * @param name\r\n * 		parameter name\r\n * @param value\r\n * 		parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic InputStream post(String name, Object value) throws IOException {\r\n    postCookies();\r\n    setParameter(name, value);\r\n    return doPost();\r\n}'),(5864,'post(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to the server, with the specified parameters\r\n *\r\n * @param name1\r\n * 		first parameter name\r\n * @param value1\r\n * 		first parameter value\r\n * @param name2\r\n * 		second parameter name\r\n * @param value2\r\n * 		second parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\r\n    postCookies();\r\n    setParameter(name1, value1);\r\n    setParameter(name2, value2);\r\n    return doPost();\r\n}'),(5865,'post(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to the server, with the specified parameters\r\n *\r\n * @param name1\r\n * 		first parameter name\r\n * @param value1\r\n * 		first parameter value\r\n * @param name2\r\n * 		second parameter name\r\n * @param value2\r\n * 		second parameter value\r\n * @param name3\r\n * 		third parameter name\r\n * @param value3\r\n * 		third parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\r\n    postCookies();\r\n    setParameter(name1, value1);\r\n    setParameter(name2, value2);\r\n    setParameter(name3, value3);\r\n    return doPost();\r\n}'),(5866,'post(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to the server, with the specified parameters\r\n *\r\n * @param name1\r\n * 		first parameter name\r\n * @param value1\r\n * 		first parameter value\r\n * @param name2\r\n * 		second parameter name\r\n * @param value2\r\n * 		second parameter value\r\n * @param name3\r\n * 		third parameter name\r\n * @param value3\r\n * 		third parameter value\r\n * @param name4\r\n * 		fourth parameter name\r\n * @param value4\r\n * 		fourth parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\r\n    postCookies();\r\n    setParameter(name1, value1);\r\n    setParameter(name2, value2);\r\n    setParameter(name3, value3);\r\n    setParameter(name4, value4);\r\n    return doPost();\r\n}'),(5867,'post(java.lang.String,java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.String,java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\r\n *\r\n * @param raw_cookies\r\n * 		request cookies\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n * @see #setCookies\r\n */\r\npublic InputStream post(String raw_cookies, Map parameters) throws IOException {\r\n    setCookies(raw_cookies);\r\n    postCookies();\r\n    setParameters(parameters);\r\n    return doPost();\r\n}'),(5868,'post(java.lang.String[],java.lang.Object[])','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.lang.String[],java.lang.Object[])','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\r\n *\r\n * @param cookies\r\n * 		request cookies\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n * @see #setCookies\r\n */\r\npublic InputStream post(String[] cookies, Object[] parameters) throws IOException {\r\n    setCookies(cookies);\r\n    postCookies();\r\n    setParameters(parameters);\r\n    return doPost();\r\n}'),(5869,'post(java.net.URL,java.lang.Object[])','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.lang.Object[])','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts a new request to specified URL, with parameters that are passed in the argument\r\n *\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n */\r\npublic static InputStream post(URL url, Object[] parameters) throws IOException {\r\n    return new ClientHttpRequest(url).post(parameters);\r\n}'),(5870,'post(java.net.URL,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request specified URL, with the specified parameter\r\n *\r\n * @param url\r\n * 		post URL\r\n * @param name1\r\n * 		parameter name\r\n * @param value1\r\n * 		parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic static InputStream post(URL url, String name1, Object value1) throws IOException {\r\n    return new ClientHttpRequest(url).post(name1, value1);\r\n}'),(5871,'post(java.net.URL,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to specified URL, with the specified parameters\r\n *\r\n * @param name1\r\n * 		first parameter name\r\n * @param value1\r\n * 		first parameter value\r\n * @param name2\r\n * 		second parameter name\r\n * @param value2\r\n * 		second parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\r\n    return new ClientHttpRequest(url).post(name1, value1, name2, value2);\r\n}'),(5872,'post(java.net.URL,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to specified URL, with the specified parameters\r\n *\r\n * @param name1\r\n * 		first parameter name\r\n * @param value1\r\n * 		first parameter value\r\n * @param name2\r\n * 		second parameter name\r\n * @param value2\r\n * 		second parameter value\r\n * @param name3\r\n * 		third parameter name\r\n * @param value3\r\n * 		third parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\r\n    return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\r\n}'),(5873,'post(java.net.URL,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * post the POST request to specified URL, with the specified parameters\r\n *\r\n * @param name1\r\n * 		first parameter name\r\n * @param value1\r\n * 		first parameter value\r\n * @param name2\r\n * 		second parameter name\r\n * @param value2\r\n * 		second parameter value\r\n * @param name3\r\n * 		third parameter name\r\n * @param value3\r\n * 		third parameter value\r\n * @param name4\r\n * 		fourth parameter name\r\n * @param value4\r\n * 		fourth parameter value\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameter\r\n */\r\npublic static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\r\n    return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\r\n}'),(5874,'post(java.net.URL,java.lang.String[],java.lang.Object[])','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.lang.String[],java.lang.Object[])','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts a new request to specified URL, with cookies and parameters that are passed in the argument\r\n *\r\n * @param url\r\n * 		post URL\r\n * @param cookies\r\n * 		request cookies\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setCookies\r\n * @see #setParameters\r\n */\r\npublic static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\r\n    return new ClientHttpRequest(url).post(cookies, parameters);\r\n}'),(5875,'post(java.net.URL,java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts a new request to specified URL, with parameters that are passed in the argument\r\n *\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n */\r\npublic static InputStream post(URL url, Map parameters) throws IOException {\r\n    return new ClientHttpRequest(url).post(parameters);\r\n}'),(5876,'post(java.net.URL,java.util.Map,java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.net.URL,java.util.Map,java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts a new request to specified URL, with cookies and parameters that are passed in the argument\r\n *\r\n * @param cookies\r\n * 		request cookies\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setCookies\r\n * @see #setParameters\r\n */\r\npublic static InputStream post(URL url, Map<String, String> cookies, Map parameters) throws IOException {\r\n    return new ClientHttpRequest(url).post(cookies, parameters);\r\n}'),(5877,'post(java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\r\n *\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n */\r\npublic InputStream post(Map parameters) throws IOException {\r\n    postCookies();\r\n    setParameters(parameters);\r\n    return doPost();\r\n}'),(5878,'post(java.util.Map,java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.post(java.util.Map,java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\r\n *\r\n * @param cookies\r\n * 		request cookies\r\n * @param parameters\r\n * 		request parameters\r\n * @return input stream with the server response\r\n * @throws IOException\r\n * 		\r\n * @see #setParameters\r\n * @see #setCookies\r\n */\r\npublic InputStream post(Map<String, String> cookies, Map parameters) throws IOException {\r\n    setCookies(cookies);\r\n    postCookies();\r\n    setParameters(parameters);\r\n    return doPost();\r\n}'),(5879,'postCookies()','org.jhotdraw.samples.svg.io.ClientHttpRequest.postCookies()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','private void postCookies() {\r\n    StringBuffer cookieList = new StringBuffer(_rawCookies);\r\n    for (Iterator i = _cookies.entrySet().iterator(); i.hasNext();) {\r\n        Map.Entry entry = ((Map.Entry) (i.next()));\r\n        cookieList.append((((entry.getKey().toString()) + \"=\") + (entry.getValue())));\r\n        if (i.hasNext()) {\r\n            cookieList.append(\"; \");\r\n        }\r\n    }\r\n    if ((cookieList.length()) > 0) {\r\n        _connection.setRequestProperty(\"Cookie\", cookieList.toString());\r\n    }\r\n}'),(5880,'randomString()','org.jhotdraw.samples.svg.io.ClientHttpRequest.randomString()','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','protected static String randomString() {\r\n    return Long.toString(ClientHttpRequest.random.nextLong(), 36);\r\n}'),(5881,'setCookie(java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setCookie(java.lang.String,java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds a cookie to the requst\r\n *\r\n * @param name\r\n * 		cookie name\r\n * @param value\r\n * 		cookie value\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setCookie(String name, String value) throws IOException {\r\n    _cookies.put(name, value);\r\n}'),(5882,'setCookies(java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setCookies(java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds a cookie to the requst\r\n *\r\n * @param rawCookies\r\n * 		A string with raw cookie data.\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setCookies(String rawCookies) throws IOException {\r\n    this._rawCookies = (rawCookies == null) ? \"\" : rawCookies;\r\n    _cookies.clear();\r\n}'),(5883,'setCookies(java.lang.String[])','org.jhotdraw.samples.svg.io.ClientHttpRequest.setCookies(java.lang.String[])','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds cookies to the request\r\n *\r\n * @param cookies\r\n * 		array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setCookies(String[] cookies) throws IOException {\r\n    if (cookies == null)\r\n        return;\r\n\r\n    for (int i = 0; i < ((cookies.length) - 1); i += 2) {\r\n        setCookie(cookies[i], cookies[(i + 1)]);\r\n    }\r\n}'),(5884,'setCookies(java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setCookies(java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds cookies to the request\r\n *\r\n * @param cookies\r\n * 		the cookie \"name-to-value\" map\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setCookies(Map<String, String> cookies) throws IOException {\r\n    if (cookies == null)\r\n        return;\r\n\r\n    this._cookies.putAll(cookies);\r\n}'),(5885,'setParameter(java.lang.String,java.io.File)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setParameter(java.lang.String,java.io.File)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds a file parameter to the request\r\n *\r\n * @param name\r\n * 		parameter name\r\n * @param file\r\n * 		the file to upload\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setParameter(String name, File file) throws IOException {\r\n    setParameter(name, file.getPath(), new FileInputStream(file));\r\n}'),(5886,'setParameter(java.lang.String,java.lang.Object)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setParameter(java.lang.String,java.lang.Object)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\r\n *\r\n * @param name\r\n * 		parameter name\r\n * @param object\r\n * 		parameter value, a File or anything else that can be stringified\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setParameter(String name, Object object) throws IOException {\r\n    if (object instanceof File) {\r\n        setParameter(name, ((File) (object)));\r\n    } else {\r\n        setParameter(name, object.toString());\r\n    }\r\n}'),(5887,'setParameter(java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setParameter(java.lang.String,java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds a string parameter to the request\r\n *\r\n * @param name\r\n * 		parameter name\r\n * @param value\r\n * 		parameter value\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setParameter(String name, String value) throws IOException {\r\n    if (name == null) {\r\n        throw new InvalidParameterException(((((\"setParameter(\" + name) + \",\") + value) + \") name must not be null\"));\r\n    }\r\n    if (value == null) {\r\n        throw new InvalidParameterException(((((\"setParameter(\" + name) + \",\") + value) + \") value must not be null\"));\r\n    }\r\n    boundary();\r\n    writeName(name);\r\n    newline();\r\n    newline();\r\n    writeln(value);\r\n}'),(5888,'setParameter(java.lang.String,java.lang.String,java.io.InputStream)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setParameter(java.lang.String,java.lang.String,java.io.InputStream)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds a file parameter to the request\r\n *\r\n * @param name\r\n * 		parameter name\r\n * @param filename\r\n * 		the name of the file\r\n * @param is\r\n * 		input stream to read the contents of the file from\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setParameter(String name, String filename, InputStream is) throws IOException {\r\n    boundary();\r\n    writeName(name);\r\n    write(\"; filename=\"\");\r\n    write(filename);\r\n    write(\");\r\n    newline();\r\n    write(\"Content-Type: \");\r\n    String type = URLConnection.guessContentTypeFromName(filename);\r\n    if (type == null)\r\n        type = \"application/octet-stream\";\r\n\r\n    writeln(type);\r\n    newline();\r\n    ClientHttpRequest.pipe(is, _os);\r\n    newline();\r\n}'),(5889,'setParameters(java.lang.Object[])','org.jhotdraw.samples.svg.io.ClientHttpRequest.setParameters(java.lang.Object[])','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds parameters to the request\r\n *\r\n * @param parameters\r\n * 		array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setParameters(Object[] parameters) throws IOException {\r\n    if (parameters != null) {\r\n        for (int i = 0; i < ((parameters.length) - 1); i += 2) {\r\n            setParameter(parameters[i].toString(), parameters[(i + 1)]);\r\n        }\r\n    }\r\n}'),(5890,'setParameters(java.util.Map)','org.jhotdraw.samples.svg.io.ClientHttpRequest.setParameters(java.util.Map)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','/**\r\n * adds parameters to the request\r\n *\r\n * @param parameters\r\n * 		\"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void setParameters(Map parameters) throws IOException {\r\n    if (parameters != null) {\r\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext();) {\r\n            Map.Entry entry = ((Map.Entry) (i.next()));\r\n            setParameter(entry.getKey().toString(), entry.getValue());\r\n        }\r\n    }\r\n}'),(5891,'write(char)','org.jhotdraw.samples.svg.io.ClientHttpRequest.write(char)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','protected void write(char c) throws IOException {\r\n    connect();\r\n    _os.write(c);\r\n}'),(5892,'write(java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.write(java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','protected void write(String s) throws IOException {\r\n    connect();\r\n    // BEGIN PATCH W. Randelshofer 2008-05-23 use UTF-8\r\n    _os.write(s.getBytes(\"UTF-8\"));\r\n    // END PATCH W. Randelshofer 2008-05-23 use UTF-8\r\n}'),(5893,'writeName(java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.writeName(java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','private void writeName(String name) throws IOException {\r\n    newline();\r\n    write(\"Content-Disposition: form-data; name=\"\");\r\n    write(name);\r\n    write(\");\r\n}'),(5894,'writeln(java.lang.String)','org.jhotdraw.samples.svg.io.ClientHttpRequest.writeln(java.lang.String)','606','org.jhotdraw.samples.svg.io.ClientHttpRequest','protected void writeln(String s) throws IOException {\r\n    connect();\r\n    write(s);\r\n    newline();\r\n}'),(5895,'-init-()','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.-init-()','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultSVGFigureFactory() {\r\n}'),(5896,'createCircle(double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createCircle(double,double,double,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createCircle(double cx, double cy, double r, Map<AttributeKey, Object> a) {\r\n    return createEllipse(cx, cy, r, r, a);\r\n}'),(5897,'createEllipse(double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createEllipse(double,double,double,double,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createEllipse(double cx, double cy, double rx, double ry, Map<AttributeKey, Object> a) {\r\n    SVGEllipseFigure figure = new SVGEllipseFigure((cx - rx), (cy - ry), (rx * 2.0), (ry * 2.0));\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5898,'createG(java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createG(java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public CompositeFigure createG(Map<AttributeKey, Object> a) {\r\n    SVGGroupFigure figure = new SVGGroupFigure();\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5899,'createImage(double,double,double,double,byte[],java.awt.image.BufferedImage,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createImage(double,double,double,double,byte[],java.awt.image.BufferedImage,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createImage(double x, double y, double w, double h, byte[] imageData, BufferedImage bufferedImage, Map<AttributeKey, Object> a) {\r\n    SVGImageFigure figure = new SVGImageFigure();\r\n    figure.setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    figure.setImage(imageData, bufferedImage);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5900,'createLine(double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createLine(double,double,double,double,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createLine(double x1, double y1, double x2, double y2, Map<AttributeKey, Object> a) {\r\n    SVGPathFigure figure = new SVGPathFigure();\r\n    figure.removeAllChildren();\r\n    SVGBezierFigure bf = new SVGBezierFigure();\r\n    bf.addNode(new BezierPath.Node(x1, y1));\r\n    bf.addNode(new BezierPath.Node(x2, y2));\r\n    figure.add(bf);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5901,'createLinearGradient(double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createLinearGradient(double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Gradient createLinearGradient(double x1, double y1, double x2, double y2, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform tx) {\r\n    return new LinearGradient(x1, y1, x2, y2, stopOffsets, stopColors, stopOpacities, isRelativeToFigureBounds, tx);\r\n}'),(5902,'createPath(org.jhotdraw.geom.BezierPath[],java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createPath(org.jhotdraw.geom.BezierPath[],java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createPath(BezierPath[] beziers, Map<AttributeKey, Object> a) {\r\n    SVGPathFigure figure = new SVGPathFigure();\r\n    figure.removeAllChildren();\r\n    for (int i = 0; i < (beziers.length); i++) {\r\n        SVGBezierFigure bf = new SVGBezierFigure();\r\n        bf.setBezierPath(beziers[i]);\r\n        figure.add(bf);\r\n    }\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5903,'createPolygon(java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createPolygon(java.awt.geom.Point2D$Double[],java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createPolygon(Point2D.Double[] points, Map<AttributeKey, Object> a) {\r\n    SVGPathFigure figure = new SVGPathFigure();\r\n    figure.removeAllChildren();\r\n    SVGBezierFigure bf = new SVGBezierFigure();\r\n    for (int i = 0; i < (points.length); i++) {\r\n        bf.addNode(new BezierPath.Node(points[i].x, points[i].y));\r\n    }\r\n    bf.setClosed(true);\r\n    figure.add(bf);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5904,'createPolyline(java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createPolyline(java.awt.geom.Point2D$Double[],java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createPolyline(Point2D.Double[] points, Map<AttributeKey, Object> a) {\r\n    SVGPathFigure figure = new SVGPathFigure();\r\n    figure.removeAllChildren();\r\n    SVGBezierFigure bf = new SVGBezierFigure();\r\n    for (int i = 0; i < (points.length); i++) {\r\n        bf.addNode(new BezierPath.Node(points[i].x, points[i].y));\r\n    }\r\n    figure.add(bf);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5905,'createRadialGradient(double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createRadialGradient(double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Gradient createRadialGradient(double cx, double cy, double fx, double fy, double r, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform tx) {\r\n    return new RadialGradient(cx, cy, fx, fy, r, stopOffsets, stopColors, stopOpacities, isRelativeToFigureBounds, tx);\r\n}'),(5906,'createRect(double,double,double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createRect(double,double,double,double,double,double,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createRect(double x, double y, double w, double h, double rx, double ry, Map<AttributeKey, Object> a) {\r\n    SVGRectFigure figure = new SVGRectFigure();\r\n    figure.setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    figure.setArc(rx, ry);\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5907,'createText(java.awt.geom.Point2D$Double[],double[],javax.swing.text.StyledDocument,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createText(java.awt.geom.Point2D$Double[],double[],javax.swing.text.StyledDocument,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createText(Point2D.Double[] coordinates, double[] rotates, StyledDocument text, Map<AttributeKey, Object> a) {\r\n    SVGTextFigure figure = new SVGTextFigure();\r\n    figure.setCoordinates(coordinates);\r\n    figure.setRotates(rotates);\r\n    try {\r\n        figure.setText(text.getText(0, text.getLength()));\r\n    } catch (BadLocationException e) {\r\n        InternalError ex = new InternalError(e.getMessage());\r\n        ex.initCause(e);\r\n        throw ex;\r\n    }\r\n    figure.setAttributes(a);\r\n    return figure;\r\n}'),(5908,'createTextArea(double,double,double,double,javax.swing.text.StyledDocument,java.util.Map)','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory.createTextArea(double,double,double,double,javax.swing.text.StyledDocument,java.util.Map)','607','org.jhotdraw.samples.svg.io.DefaultSVGFigureFactory','public Figure createTextArea(double x, double y, double w, double h, StyledDocument doc, Map<AttributeKey, Object> attributes) {\r\n    SVGTextAreaFigure figure = new SVGTextAreaFigure();\r\n    figure.setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    try {\r\n        figure.setText(doc.getText(0, doc.getLength()));\r\n    } catch (BadLocationException e) {\r\n        InternalError ex = new InternalError(e.getMessage());\r\n        ex.initCause(e);\r\n        throw ex;\r\n    }\r\n    figure.setAttributes(attributes);\r\n    return figure;\r\n}'),(5909,'-init-()','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.-init-()','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * Creates a new instance.\r\n */\r\npublic ImageMapOutputFormat() {\r\n}'),(5910,'createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    write(buf, figures);\r\n    return new InputStreamTransferable(new DataFlavor(\"text/html\", \"HTML Image Map\"), buf.toByteArray());\r\n}'),(5911,'getFileExtension()','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.getFileExtension()','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','public String getFileExtension() {\r\n    return \"html\";\r\n}'),(5912,'getFileFilter()','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.getFileFilter()','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(\"HTML Image Map\", \"html\");\r\n}'),(5913,'getOutputFormatAccessory()','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.getOutputFormatAccessory()','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','public JComponent getOutputFormatAccessory() {\r\n    return null;\r\n}'),(5914,'write(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(5915,'write(java.io.OutputStream,java.util.List)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,java.util.List)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * All other write methods delegate their work to here.\r\n */\r\npublic void write(OutputStream out, List<Figure> figures) throws IOException {\r\n    Rectangle2D.Double drawingRect = null;\r\n    for (Figure f : figures) {\r\n        if (drawingRect == null) {\r\n            drawingRect = f.getBounds();\r\n        } else {\r\n            drawingRect.add(f.getBounds());\r\n        }\r\n    }\r\n    AffineTransform drawingTransform = new AffineTransform();\r\n    drawingTransform.translate((-(Math.min(0, drawingRect.x))), (-(Math.min(0, drawingRect.y))));\r\n    write(out, figures, drawingTransform, new Dimension(((int) ((Math.abs(drawingRect.x)) + (drawingRect.width))), ((int) ((Math.abs(drawingRect.y)) + (drawingRect.height)))));\r\n}'),(5916,'write(java.io.OutputStream,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * Writes the figures to the specified output stream.\r\n * This method applies the specified drawingTransform to the drawing, and draws\r\n * it on an image of the specified getChildCount.\r\n *\r\n * All other write methods delegate their work to here.\r\n */\r\npublic void write(OutputStream out, List<Figure> figures, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    this.drawingTransform = (drawingTransform == null) ? new AffineTransform() : drawingTransform;\r\n    this.bounds = (imageSize == null) ? new Rectangle(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE) : new Rectangle(0, 0, imageSize.width, imageSize.height);\r\n    XMLElement document = new XMLElement(\"map\");\r\n    // Note: Image map elements need to be written from front to back\r\n    for (Figure f : new ReversedList<Figure>(figures)) {\r\n        writeElement(document, f);\r\n    }\r\n    // Strip AREA elements with \"nohref\" attributes from the end of the\r\n    // map\r\n    if (!(isIncludeNohref)) {\r\n        for (int i = (document.getChildrenCount()) - 1; i >= 0; i--) {\r\n            XMLElement child = ((XMLElement) (document.getChildAtIndex(i)));\r\n            if (child.hasAttribute(\"nohref\")) {\r\n                document.removeChildAtIndex(i);\r\n            }\r\n        }\r\n    }\r\n    // Write XML content\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(out, \"UTF-8\"));\r\n    // new XMLWriter(writer).write(document);\r\n    for (Object o : document.getChildren()) {\r\n        XMLElement child = ((XMLElement) (o));\r\n        new XMLWriter(writer).write(child);\r\n    }\r\n    // Flush writer\r\n    writer.flush();\r\n}'),(5917,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing.getChildren());\r\n}'),(5918,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * Writes the drawing to the specified output stream.\r\n * This method applies the specified drawingTransform to the drawing, and draws\r\n * it on an image of the specified getChildCount.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    write(out, drawing.getChildren(), drawingTransform, imageSize);\r\n}'),(5919,'writeCircleAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Ellipse2D$Double)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeCircleAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Ellipse2D$Double)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and ellipse.\r\n *\r\n * @return Returns true, if the circle is inside of the image bounds.\r\n */\r\nprivate boolean writeCircleAttributes(IXMLElement elem, SVGFigure f, Ellipse2D.Double ellipse) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    if ((((t.getType()) & ((AffineTransform.TYPE_UNIFORM_SCALE) | (AffineTransform.TYPE_TRANSLATION))) == (t.getType())) && ((ellipse.width) == (ellipse.height))) {\r\n        Point2D.Double start = new Point2D.Double(ellipse.x, ellipse.y);\r\n        Point2D.Double end = new Point2D.Double(((ellipse.x) + (ellipse.width)), ((ellipse.y) + (ellipse.height)));\r\n        t.transform(start, start);\r\n        t.transform(end, end);\r\n        ellipse.x = Math.min(start.x, end.x);\r\n        ellipse.y = Math.min(start.y, end.y);\r\n        ellipse.width = Math.abs(((start.x) - (end.x)));\r\n        ellipse.height = Math.abs(((start.y) - (end.y)));\r\n        elem.setAttribute(\"shape\", \"circle\");\r\n        elem.setAttribute(\"coords\", ((((((int) ((ellipse.x) + ((ellipse.width) / 2.0))) + \",\") + ((int) ((ellipse.y) + ((ellipse.height) / 2.0)))) + \",\") + ((int) ((ellipse.width) / 2.0))));\r\n        writeHrefAttribute(elem, f);\r\n        return bounds.intersects(ellipse.getBounds());\r\n    } else {\r\n        return writePolyAttributes(elem, f, ((Shape) (ellipse)));\r\n    }\r\n}'),(5920,'writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','protected void writeElement(IXMLElement parent, Figure f) throws IOException {\r\n    if (f instanceof SVGEllipseFigure) {\r\n        writeEllipseElement(parent, ((SVGEllipseFigure) (f)));\r\n    } else\r\n        if (f instanceof SVGGroupFigure) {\r\n            writeGElement(parent, ((SVGGroupFigure) (f)));\r\n        } else\r\n            if (f instanceof SVGImageFigure) {\r\n                writeImageElement(parent, ((SVGImageFigure) (f)));\r\n            } else\r\n                if (f instanceof SVGPathFigure) {\r\n                    SVGPathFigure path = ((SVGPathFigure) (f));\r\n                    if ((path.getChildCount()) == 1) {\r\n                        BezierFigure bezier = ((BezierFigure) (path.getChild(0)));\r\n                        boolean isLinear = true;\r\n                        for (int i = 0, n = bezier.getNodeCount(); i < n; i++) {\r\n                            if ((bezier.getNode(i).getMask()) != 0) {\r\n                                isLinear = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isLinear) {\r\n                            if (bezier.isClosed()) {\r\n                                writePolygonElement(parent, path);\r\n                            } else {\r\n                                if ((bezier.getNodeCount()) == 2) {\r\n                                    writeLineElement(parent, path);\r\n                                } else {\r\n                                    writePolylineElement(parent, path);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            writePathElement(parent, path);\r\n                        }\r\n                    } else {\r\n                        writePathElement(parent, path);\r\n                    }\r\n                } else\r\n                    if (f instanceof SVGRectFigure) {\r\n                        writeRectElement(parent, ((SVGRectFigure) (f)));\r\n                    } else\r\n                        if (f instanceof SVGTextFigure) {\r\n                            writeTextElement(parent, ((SVGTextFigure) (f)));\r\n                        } else\r\n                            if (f instanceof SVGTextAreaFigure) {\r\n                                writeTextAreaElement(parent, ((SVGTextAreaFigure) (f)));\r\n                            } else {\r\n                                System.out.println((\"Unable to write: \" + f));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(5921,'writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeEllipseElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    Rectangle2D.Double r = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    Ellipse2D.Double ellipse = new Ellipse2D.Double(((r.x) - grow), ((r.y) - grow), ((r.width) + grow), ((r.height) + grow));\r\n    if (writeCircleAttributes(elem, f, ellipse)) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5922,'writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeGElement(IXMLElement parent, SVGGroupFigure f) throws IOException {\r\n    // Note: Image map elements need to be written from front to back\r\n    for (Figure child : new ReversedList<Figure>(f.getChildren())) {\r\n        writeElement(parent, child);\r\n    }\r\n}'),(5923,'writeHrefAttribute(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeHrefAttribute(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeHrefAttribute(IXMLElement elem, SVGFigure f) {\r\n    if (((SVGAttributeKeys.LINK.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n        elem.setAttribute(\"href\", SVGAttributeKeys.LINK.get(f));\r\n        elem.setAttribute(\"title\", SVGAttributeKeys.LINK.get(f));\r\n        elem.setAttribute(\"alt\", SVGAttributeKeys.LINK.get(f));\r\n        if (((SVGAttributeKeys.LINK_TARGET.get(f)) != null) && ((SVGAttributeKeys.LINK_TARGET.get(f).trim().length()) > 0)) {\r\n            elem.setAttribute(\"target\", SVGAttributeKeys.LINK_TARGET.get(f));\r\n        }\r\n    } else {\r\n        elem.setAttribute(\"nohref\", \"true\");\r\n    }\r\n}'),(5924,'writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeImageElement(IXMLElement parent, SVGImageFigure f) {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    writeRectAttributes(elem, f, rect);\r\n    parent.addChild(elem);\r\n}'),(5925,'writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeLineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(new Line2D.Double(f.getStartPoint(), f.getEndPoint())))) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5926,'writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writePathElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    GrowStroke growStroke = new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f))));\r\n    BasicStroke basicStroke = new BasicStroke(((float) (AttributeKeys.getStrokeTotalWidth(f))));\r\n    for (Figure child : f.getChildren()) {\r\n        SVGBezierFigure bezier = ((SVGBezierFigure) (child));\r\n        IXMLElement elem = parent.createElement(\"area\");\r\n        if (bezier.isClosed()) {\r\n            writePolyAttributes(elem, f, growStroke.createStrokedShape(bezier.getBezierPath()));\r\n        } else {\r\n            writePolyAttributes(elem, f, basicStroke.createStrokedShape(bezier.getBezierPath()));\r\n        }\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5927,'writePolyAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.Shape)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolyAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.Shape)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and shape.\r\n *\r\n * @return Returns true, if the polygon is inside of the image bounds.\r\n */\r\nprivate boolean writePolyAttributes(IXMLElement elem, SVGFigure f, Shape shape) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    float[] coords = new float[6];\r\n    GeneralPath path = new GeneralPath();\r\n    for (PathIterator i = shape.getPathIterator(t, 1.5F); !(i.isDone()); i.next()) {\r\n        switch (i.currentSegment(coords)) {\r\n            case PathIterator.SEG_MOVETO :\r\n                if ((buf.length()) != 0) {\r\n                    throw new IllegalArgumentException((\"Illegal shape \" + shape));\r\n                }\r\n                if ((buf.length()) != 0) {\r\n                    buf.append(,);\r\n                }\r\n                buf.append(((int) (coords[0])));\r\n                buf.append(,);\r\n                buf.append(((int) (coords[1])));\r\n                path.moveTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_LINETO :\r\n                if ((buf.length()) != 0) {\r\n                    buf.append(,);\r\n                }\r\n                buf.append(((int) (coords[0])));\r\n                buf.append(,);\r\n                buf.append(((int) (coords[1])));\r\n                path.lineTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_CLOSE :\r\n                path.closePath();\r\n                break;\r\n            default :\r\n                throw new InternalError((\"Illegal segment type \" + (i.currentSegment(coords))));\r\n        }\r\n    }\r\n    elem.setAttribute(\"shape\", \"poly\");\r\n    elem.setAttribute(\"coords\", buf.toString());\r\n    writeHrefAttribute(elem, f);\r\n    return path.intersects(new Rectangle2D.Float(bounds.x, bounds.y, bounds.width, bounds.height));\r\n}'),(5928,'writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writePolygonElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(f.getChild(0).getBezierPath()))) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5929,'writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writePolylineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new BasicStroke(((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(f.getChild(0).getBezierPath()))) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5930,'writeRectAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Rectangle2D$Double)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeRectAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Rectangle2D$Double)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and rectangle.\r\n *\r\n * @return Returns true, if the rect is inside of the image bounds.\r\n */\r\nprivate boolean writeRectAttributes(IXMLElement elem, SVGFigure f, Rectangle2D.Double rect) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    if (((t.getType()) & ((AffineTransform.TYPE_UNIFORM_SCALE) | (AffineTransform.TYPE_TRANSLATION))) == (t.getType())) {\r\n        Point2D.Double start = new Point2D.Double(rect.x, rect.y);\r\n        Point2D.Double end = new Point2D.Double(((rect.x) + (rect.width)), ((rect.y) + (rect.height)));\r\n        t.transform(start, start);\r\n        t.transform(end, end);\r\n        Rectangle r = new Rectangle(((int) (Math.min(start.x, end.x))), ((int) (Math.min(start.y, end.y))), ((int) (Math.abs(((start.x) - (end.x))))), ((int) (Math.abs(((start.y) - (end.y))))));\r\n        elem.setAttribute(\"shape\", \"rect\");\r\n        elem.setAttribute(\"coords\", (((((((r.x) + \",\") + (r.y)) + \",\") + ((r.x) + (r.width))) + \",\") + ((r.y) + (r.height))));\r\n        writeHrefAttribute(elem, f);\r\n        return bounds.intersects(r);\r\n    } else {\r\n        return writePolyAttributes(elem, f, ((Shape) (rect)));\r\n    }\r\n}'),(5931,'writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeRectElement(IXMLElement parent, SVGRectFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    boolean isContained;\r\n    if (((f.getArcHeight()) == 0) && ((f.getArcWidth()) == 0)) {\r\n        Rectangle2D.Double rect = f.getBounds();\r\n        double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n        rect.x -= grow;\r\n        rect.y -= grow;\r\n        rect.width += grow;\r\n        rect.height += grow;\r\n        isContained = writeRectAttributes(elem, f, rect);\r\n    } else {\r\n        isContained = writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(new RoundRectangle2D.Double(f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getArcWidth(), f.getArcHeight())));\r\n    }\r\n    if (isContained) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5932,'writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeTextAreaElement(IXMLElement parent, SVGTextAreaFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    rect.x -= grow;\r\n    rect.y -= grow;\r\n    rect.width += grow;\r\n    rect.height += grow;\r\n    if (writeRectAttributes(elem, f, rect)) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5933,'writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)','org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)','608','org.jhotdraw.samples.svg.io.ImageMapOutputFormat','private void writeTextElement(IXMLElement parent, SVGTextFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    rect.x -= grow;\r\n    rect.y -= grow;\r\n    rect.width += grow;\r\n    rect.height += grow;\r\n    if (writeRectAttributes(elem, f, rect)) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(5934,'createCircle(double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createCircle(double,double,double,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createCircle(double cx, double cy, double r, Map<AttributeKey, Object> attributes);'),(5935,'createEllipse(double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createEllipse(double,double,double,double,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createEllipse(double cx, double cy, double rx, double ry, Map<AttributeKey, Object> attributes);'),(5936,'createG(java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createG(java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public CompositeFigure createG(Map<AttributeKey, Object> attributes);'),(5937,'createImage(double,double,double,double,byte[],java.awt.image.BufferedImage,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createImage(double,double,double,double,byte[],java.awt.image.BufferedImage,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','/**\r\n * Creates a Figure from an image element.\r\n *\r\n * @param x\r\n * 		The x coordinate.\r\n * @param y\r\n * 		The y coordinate.\r\n * @param width\r\n * 		The width.\r\n * @param height\r\n * 		The height.\r\n * @param imageData\r\n * 		Holds the image data. Can be null, if the buffered image\r\n * 		has not been created from a file.\r\n * @param bufferedImage\r\n * 		Holds the buffered image. Can be null, if the\r\n * 		image data has not been interpreted.\r\n * @param attributes\r\n * 		Figure attributes.\r\n */\r\npublic Figure createImage(double x, double y, double width, double height, byte[] imageData, BufferedImage bufferedImage, Map<AttributeKey, Object> attributes);'),(5938,'createLine(double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createLine(double,double,double,double,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createLine(double x1, double y1, double x2, double y2, Map<AttributeKey, Object> attributes);'),(5939,'createLinearGradient(double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createLinearGradient(double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Gradient createLinearGradient(double x1, double y1, double x2, double y2, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform tx);'),(5940,'createPath(org.jhotdraw.geom.BezierPath[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createPath(org.jhotdraw.geom.BezierPath[],java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createPath(BezierPath[] beziers, Map<AttributeKey, Object> attributes);'),(5941,'createPolygon(java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createPolygon(java.awt.geom.Point2D$Double[],java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createPolygon(Point2D.Double[] points, Map<AttributeKey, Object> attributes);'),(5942,'createPolyline(java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createPolyline(java.awt.geom.Point2D$Double[],java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createPolyline(Point2D.Double[] points, Map<AttributeKey, Object> attributes);'),(5943,'createRadialGradient(double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createRadialGradient(double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Gradient createRadialGradient(double cx, double cy, double fx, double fy, double r, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform tx);'),(5944,'createRect(double,double,double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createRect(double,double,double,double,double,double,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createRect(double x, double y, double width, double height, double rx, double ry, Map<AttributeKey, Object> attributes);'),(5945,'createText(java.awt.geom.Point2D$Double[],double[],javax.swing.text.StyledDocument,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createText(java.awt.geom.Point2D$Double[],double[],javax.swing.text.StyledDocument,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createText(Point2D.Double[] coordinates, double[] rotate, StyledDocument text, Map<AttributeKey, Object> attributes);'),(5946,'createTextArea(double,double,double,double,javax.swing.text.StyledDocument,java.util.Map)','org.jhotdraw.samples.svg.io.SVGFigureFactory.createTextArea(double,double,double,double,javax.swing.text.StyledDocument,java.util.Map)','610','org.jhotdraw.samples.svg.io.SVGFigureFactory','public Figure createTextArea(double x, double y, double w, double h, StyledDocument doc, Map<AttributeKey, Object> attributes);'),(5947,'-init-()','org.jhotdraw.samples.svg.io.SVGInputFormat.-init-()','612','org.jhotdraw.samples.svg.io.SVGInputFormat','Viewport() {\r\n}'),(5948,'-init-(org.jhotdraw.samples.svg.io.SVGFigureFactory)','org.jhotdraw.samples.svg.io.SVGInputFormat.-init-(org.jhotdraw.samples.svg.io.SVGFigureFactory)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public SVGInputFormat(SVGFigureFactory factory) {\r\n    this.factory = factory;\r\n}'),(5949,'flattenStyles(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.flattenStyles(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Flattens all CSS styles.\r\n * Styles defined in a \"style\" attribute and in CSS rules are converted\r\n * into attributes with the same name.\r\n */\r\nprivate void flattenStyles(IXMLElement elem) throws IOException {\r\n    if (((((elem.getName()) != null) && (elem.getName().equals(\"style\"))) && (readAttribute(elem, \"type\", \"\").equals(\"text/css\"))) && ((elem.getContent()) != null)) {\r\n        CSSParser cssParser = new CSSParser();\r\n        cssParser.parse(elem.getContent(), styleManager);\r\n    } else {\r\n        if (((elem.getNamespace()) == null) || (elem.getNamespace().equals(SVGConstants.SVG_NAMESPACE))) {\r\n            String style = readAttribute(elem, \"style\", null);\r\n            if (style != null) {\r\n                for (String styleProperty : style.split(\";\")) {\r\n                    String[] stylePropertyElements = styleProperty.split(\":\");\r\n                    if (((stylePropertyElements.length) == 2) && (!(elem.hasAttribute(stylePropertyElements[0].trim(), SVGConstants.SVG_NAMESPACE)))) {\r\n                        // if (DEBUG) System.out.println(\"flatten:\"+Arrays.toString(stylePropertyElements));\r\n                        elem.setAttribute(stylePropertyElements[0].trim(), SVGConstants.SVG_NAMESPACE, stylePropertyElements[1].trim());\r\n                    }\r\n                }\r\n            }\r\n            styleManager.applyStylesTo(elem);\r\n            for (IXMLElement node : elem.getChildren()) {\r\n                if (node instanceof IXMLElement) {\r\n                    IXMLElement child = ((IXMLElement) (node));\r\n                    flattenStyles(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(5950,'getFileFilter()','org.jhotdraw.samples.svg.io.SVGInputFormat.getFileFilter()','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(\"Scalable Vector Graphics (SVG)\", \"svg\");\r\n}'),(5951,'getInputFormatAccessory()','org.jhotdraw.samples.svg.io.SVGInputFormat.getInputFormatAccessory()','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public JComponent getInputFormatAccessory() {\r\n    return null;\r\n}'),(5952,'identifyElements(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.identifyElements(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Puts all elments with an \"id\" or an \"xml:id\" attribute into the\r\n * hashtable {@code identifiedElements}.\r\n */\r\nprivate void identifyElements(IXMLElement elem) {\r\n    identifiedElements.put(elem.getAttribute(\"id\"), elem);\r\n    identifiedElements.put(elem.getAttribute(\"xml:id\"), elem);\r\n    for (IXMLElement child : elem.getChildren()) {\r\n        identifyElements(child);\r\n    }\r\n}'),(5953,'initStorageContext(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.initStorageContext(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','private void initStorageContext(IXMLElement root) {\r\n    identifiedElements = new HashMap<String, IXMLElement>();\r\n    identifyElements(root);\r\n    elementObjects = new HashMap<IXMLElement, Object>();\r\n    viewportStack = new Stack<SVGInputFormat.Viewport>();\r\n    viewportStack.push(new SVGInputFormat.Viewport());\r\n    styleManager = new StyleManager();\r\n}'),(5954,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.samples.svg.io.SVGInputFormat.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return (flavor.getPrimaryType().equals(\"image\")) && (flavor.getSubType().equals(\"svg+xml\"));\r\n}'),(5955,'read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = ((InputStream) (t.getTransferData(new DataFlavor(\"image/svg+xml\", \"Image SVG\"))));\r\n        read(in, drawing, false);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(5956,'read(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(5957,'read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    this.url = file.toURL();\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    this.url = null;\r\n}'),(5958,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * This is the main reading method.\r\n *\r\n * @param in\r\n * 		The input stream.\r\n * @param drawing\r\n * 		The drawing to which this method adds figures.\r\n * @param replace\r\n * 		Whether attributes on the drawing object\r\n * 		should by changed by this method. Set this to false, when reading individual\r\n * 		images from the clipboard.\r\n */\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    long start = System.currentTimeMillis();\r\n    this.figures = new LinkedList<Figure>();\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    // Search for the first svg element in the XML document\r\n    // in preorder sequence\r\n    IXMLElement svg = document;\r\n    Stack<Iterator<IXMLElement>> stack = new Stack<Iterator<IXMLElement>>();\r\n    LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();\r\n    ll.add(document);\r\n    stack.push(ll.iterator());\r\n    while ((!(stack.empty())) && (stack.peek().hasNext())) {\r\n        Iterator<IXMLElement> iter = stack.peek();\r\n        IXMLElement node = iter.next();\r\n        Iterator<IXMLElement> children = ((node.getChildren()) == null) ? null : node.getChildren().iterator();\r\n        if (!(iter.hasNext())) {\r\n            stack.pop();\r\n        }\r\n        if ((children != null) && (children.hasNext())) {\r\n            stack.push(children);\r\n        }\r\n        if ((((node.getName()) != null) && (node.getName().equals(\"svg\"))) && (((node.getNamespace()) == null) || (node.getNamespace().equals(SVGConstants.SVG_NAMESPACE)))) {\r\n            svg = node;\r\n            break;\r\n        }\r\n    } \r\n    if ((((svg.getName()) == null) || (!(svg.getName().equals(\"svg\")))) || (((svg.getNamespace()) != null) && (!(svg.getNamespace().equals(SVGConstants.SVG_NAMESPACE))))) {\r\n        throw new IOException((\"svg element expected: \" + (svg.getName())));\r\n    }\r\n    // long end1 = System.currentTimeMillis();\r\n    // Flatten CSS Styles\r\n    initStorageContext(document);\r\n    flattenStyles(svg);\r\n    // long end2 = System.currentTimeMillis();\r\n    readElement(svg);\r\n    long end = System.currentTimeMillis();\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat elapsed:\" + (end - start)));\r\n    }\r\n    /* if (DEBUG) System.out.println(\"SVGInputFormat read:\"+(end1-start));\n    if (DEBUG) System.out.println(\"SVGInputFormat flatten:\"+(end2-end1));\n    if (DEBUG) System.out.println(\"SVGInputFormat build:\"+(end-end2));\n     */\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n    if (replace) {\r\n        SVGInputFormat.Viewport viewport = viewportStack.firstElement();\r\n        SVGAttributeKeys.VIEWPORT_FILL.basicSet(drawing, SVGAttributeKeys.VIEWPORT_FILL.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_FILL_OPACITY.basicSet(drawing, SVGAttributeKeys.VIEWPORT_FILL_OPACITY.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_HEIGHT.basicSet(drawing, SVGAttributeKeys.VIEWPORT_HEIGHT.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_WIDTH.basicSet(drawing, SVGAttributeKeys.VIEWPORT_WIDTH.get(viewport.attributes));\r\n    }\r\n}'),(5959,'read(java.net.URL,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.net.URL,org.jhotdraw.draw.Drawing,boolean)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','public void read(URL url, Drawing drawing, boolean replace) throws IOException {\r\n    this.url = url;\r\n    InputStream in = null;\r\n    try {\r\n        in = url.openStream();\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    this.url = null;\r\n}'),(5960,'readAElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readAElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"a\" element.\r\n */\r\nprivate Figure readAElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    CompositeFigure g = factory.createG(a);\r\n    String href = readAttribute(elem, \"xlink:href\", null);\r\n    if (href == null) {\r\n        href = readAttribute(elem, \"href\", null);\r\n    }\r\n    String target = readAttribute(elem, \"target\", null);\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat.readAElement href=\" + href));\r\n    }\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            Figure childFigure = readElement(child);\r\n            // skip invisible elements\r\n            if ((readAttribute(child, \"visibility\", \"visible\").equals(\"visible\")) && (!(readAttribute(child, \"display\", \"inline\").equals(\"none\")))) {\r\n                if (childFigure != null) {\r\n                    g.basicAdd(childFigure);\r\n                }\r\n            }\r\n            if (childFigure != null) {\r\n                SVGAttributeKeys.LINK.basicSet(childFigure, href);\r\n                SVGAttributeKeys.LINK_TARGET.basicSet(childFigure, target);\r\n            } else {\r\n                if (SVGInputFormat.DEBUG) {\r\n                    System.out.println(\"SVGInputFormat <a> has no child figure\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (g.getChildCount()) == 1 ? g.getChild(0) : g;\r\n}'),(5961,'readAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.readAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an attribute that is not inherited, unless its value is \"inherit\".\r\n */\r\nprivate String readAttribute(IXMLElement elem, String attributeName, String defaultValue) {\r\n    if (elem.hasAttribute(attributeName, SVGConstants.SVG_NAMESPACE)) {\r\n        String value = elem.getAttribute(attributeName, SVGConstants.SVG_NAMESPACE, null);\r\n        if (value.equals(\"inherit\")) {\r\n            return readAttribute(elem.getParent(), attributeName, defaultValue);\r\n        } else {\r\n            return value;\r\n        }\r\n    } else\r\n        if (elem.hasAttribute(attributeName)) {\r\n            String value = elem.getAttribute(attributeName, null);\r\n            if (value.equals(\"inherit\")) {\r\n                return readAttribute(elem.getParent(), attributeName, defaultValue);\r\n            } else {\r\n                return value;\r\n            }\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n\r\n}'),(5962,'readCircleElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readCircleElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"circle\" element.\r\n */\r\nprivate Figure readCircleElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    double cx = toWidth(elem, readAttribute(elem, \"cx\", \"0\"));\r\n    double cy = toHeight(elem, readAttribute(elem, \"cy\", \"0\"));\r\n    double r = toWidth(elem, readAttribute(elem, \"r\", \"0\"));\r\n    Figure figure = factory.createCircle(cx, cy, r, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5963,'readCoreAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readCoreAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads core attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#CoreAttribute\n */\r\nprivate void readCoreAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    // read \"id\" or \"xml:id\"\r\n    // identifiedElements.put(elem.getAttribute(\"id\"), elem);\r\n    // identifiedElements.put(elem.getAttribute(\"xml:id\"), elem);\r\n    // XXX - Add\r\n    // xml:base\r\n    // xml:lang\r\n    // xml:space\r\n    // class\r\n}'),(5964,'readDefsElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readDefsElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"defs\" element.\r\n */\r\nprivate void readDefsElement(IXMLElement elem) throws IOException {\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            Figure childFigure = readElement(child);\r\n        }\r\n    }\r\n}'),(5965,'readElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG element of any kind.\r\n *\r\n * @return Returns the Figure, if the SVG element represents a Figure.\r\nReturns null in all other cases.\r\n */\r\nprivate Figure readElement(IXMLElement elem) throws IOException {\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((((\"SVGInputFormat.readElement \" + (elem.getName())) + \" line:\") + (elem.getLineNr())));\r\n    }\r\n    Figure f = null;\r\n    if (((elem.getNamespace()) == null) || (elem.getNamespace().equals(SVGConstants.SVG_NAMESPACE))) {\r\n        String name = elem.getName();\r\n        if (name == null) {\r\n            if (SVGInputFormat.DEBUG) {\r\n                System.err.println((\"SVGInputFormat warning: skipping nameless element at line \" + (elem.getLineNr())));\r\n            }\r\n        } else\r\n            if (name.equals(\"a\")) {\r\n                f = readAElement(elem);\r\n            } else\r\n                if (name.equals(\"circle\")) {\r\n                    f = readCircleElement(elem);\r\n                } else\r\n                    if (name.equals(\"defs\")) {\r\n                        readDefsElement(elem);\r\n                        f = null;\r\n                    } else\r\n                        if (name.equals(\"ellipse\")) {\r\n                            f = readEllipseElement(elem);\r\n                        } else\r\n                            if (name.equals(\"g\")) {\r\n                                f = readGElement(elem);\r\n                            } else\r\n                                if (name.equals(\"image\")) {\r\n                                    f = readImageElement(elem);\r\n                                } else\r\n                                    if (name.equals(\"line\")) {\r\n                                        f = readLineElement(elem);\r\n                                    } else\r\n                                        if (name.equals(\"linearGradient\")) {\r\n                                            readLinearGradientElement(elem);\r\n                                            f = null;\r\n                                        } else\r\n                                            if (name.equals(\"path\")) {\r\n                                                f = readPathElement(elem);\r\n                                            } else\r\n                                                if (name.equals(\"polygon\")) {\r\n                                                    f = readPolygonElement(elem);\r\n                                                } else\r\n                                                    if (name.equals(\"polyline\")) {\r\n                                                        f = readPolylineElement(elem);\r\n                                                    } else\r\n                                                        if (name.equals(\"radialGradient\")) {\r\n                                                            readRadialGradientElement(elem);\r\n                                                            f = null;\r\n                                                        } else\r\n                                                            if (name.equals(\"rect\")) {\r\n                                                                f = readRectElement(elem);\r\n                                                            } else\r\n                                                                if (name.equals(\"solidColor\")) {\r\n                                                                    readSolidColorElement(elem);\r\n                                                                    f = null;\r\n                                                                } else\r\n                                                                    if (name.equals(\"svg\")) {\r\n                                                                        f = readSVGElement(elem);\r\n                                                                        // f = readGElement(elem);\r\n                                                                    } else\r\n                                                                        if (name.equals(\"switch\")) {\r\n                                                                            f = readSwitchElement(elem);\r\n                                                                        } else\r\n                                                                            if (name.equals(\"text\")) {\r\n                                                                                f = readTextElement(elem);\r\n                                                                            } else\r\n                                                                                if (name.equals(\"textArea\")) {\r\n                                                                                    f = readTextAreaElement(elem);\r\n                                                                                } else\r\n                                                                                    if (name.equals(\"title\")) {\r\n                                                                                        // FIXME - Implement reading of title element\r\n                                                                                        // f = readTitleElement(elem);\r\n                                                                                    } else\r\n                                                                                        if (name.equals(\"use\")) {\r\n                                                                                            f = readUseElement(elem);\r\n                                                                                        } else\r\n                                                                                            if (name.equals(\"style\")) {\r\n                                                                                                // Nothing to do, style elements have been already\r\n                                                                                                // processed in method flattenStyles\r\n                                                                                            } else {\r\n                                                                                                if (SVGInputFormat.DEBUG) {\r\n                                                                                                    System.out.println(((\"SVGInputFormat not implemented for <\" + name) + \">\"));\r\n                                                                                                }\r\n                                                                                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    if (f instanceof SVGFigure) {\r\n        if (((SVGFigure) (f)).isEmpty()) {\r\n            // if (DEBUG) System.out.println(\"Empty figure \"+f);\r\n            return null;\r\n        }\r\n    } else\r\n        if (f != null) {\r\n            if (SVGInputFormat.DEBUG) {\r\n                System.out.println((\"SVGInputFormat warning: not an SVGFigure \" + f));\r\n            }\r\n        }\r\n\r\n    return f;\r\n}'),(5966,'readEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"ellipse\" element.\r\n */\r\nprivate Figure readEllipseElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    double cx = toWidth(elem, readAttribute(elem, \"cx\", \"0\"));\r\n    double cy = toHeight(elem, readAttribute(elem, \"cy\", \"0\"));\r\n    double rx = toWidth(elem, readAttribute(elem, \"rx\", \"0\"));\r\n    double ry = toHeight(elem, readAttribute(elem, \"ry\", \"0\"));\r\n    Figure figure = factory.createEllipse(cx, cy, rx, ry, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5967,'readFontAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGInputFormat.readFontAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads font attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#Font\n */\r\nprivate void readFontAttributes(IXMLElement elem, Map<AttributeKey, Object> a) throws IOException {\r\n    String value;\r\n    double doubleValue;\r\n    // font-family\r\n    // Value:  	[[ <family-name> |\r\n    // <generic-family> ],]* [<family-name> |\r\n    // <generic-family>] | inherit\r\n    // Initial:  	depends on user agent\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"font-family\", \"Dialog\");\r\n    AttributeKeys.FONT_FACE.set(a, new Font(value, Font.PLAIN, 12));\r\n    // font-getChildCount\r\n    // Value:  	<absolute-getChildCount> | <relative-getChildCount> |\r\n    // <length> | inherit\r\n    // Initial:  	medium\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes, the computed value is inherited\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Absolute length\r\n    doubleValue = readInheritFontSizeAttribute(elem, \"font-size\", \"medium\");\r\n    AttributeKeys.FONT_SIZE.set(a, doubleValue);\r\n    // font-style\r\n    // Value:  	normal | italic | oblique | inherit\r\n    // Initial:  	normal\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"font-style\", \"normal\");\r\n    AttributeKeys.FONT_ITALIC.set(a, value.equals(\"italic\"));\r\n    // font-variant\r\n    // Value:  	normal | small-caps | inherit\r\n    // Initial:  	normal\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	no\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"font-variant\", \"normal\");\r\n    // if (DEBUG) System.out.println(\"font-variant=\"+value);\r\n    // font-weight\r\n    // Value:  	normal | bold | bolder | lighter | 100 | 200 | 300\r\n    // | 400 | 500 | 600 | 700 | 800 | 900 | inherit\r\n    // Initial:  	normal\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 one of the legal numeric values, non-numeric\r\n    // values shall be converted to numeric values according to the rules\r\n    // defined below.\r\n    value = readInheritAttribute(elem, \"font-weight\", \"normal\");\r\n    AttributeKeys.FONT_BOLD.set(a, ((((((((value.equals(\"bold\")) || (value.equals(\"bolder\"))) || (value.equals(\"400\"))) || (value.equals(\"500\"))) || (value.equals(\"600\"))) || (value.equals(\"700\"))) || (value.equals(\"800\"))) || (value.equals(\"900\"))));\r\n    // Note: text-decoration is an SVG 1.1 feature\r\n    // text-decoration\r\n    // Value:  	none | [ underline || overline || line-through || blink ] | inherit\r\n    // Initial:  	none\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	no (see prose)\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    value = readAttribute(elem, \"text-decoration\", \"none\");\r\n    AttributeKeys.FONT_UNDERLINE.set(a, value.equals(\"underline\"));\r\n}'),(5968,'readGElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readGElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"g\" element.\r\n */\r\nprivate Figure readGElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    CompositeFigure g = factory.createG(a);\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            Figure childFigure = readElement(child);\r\n            // skip invisible elements\r\n            if ((readAttribute(child, \"visibility\", \"visible\").equals(\"visible\")) && (!(readAttribute(child, \"display\", \"inline\").equals(\"none\")))) {\r\n                if (childFigure != null) {\r\n                    g.basicAdd(childFigure);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    readTransformAttribute(elem, a);\r\n    if ((AttributeKeys.TRANSFORM.get(a)) != null) {\r\n        g.transform(AttributeKeys.TRANSFORM.get(a));\r\n    }\r\n    return g;\r\n}'),(5969,'readGraphicsAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.io.SVGInputFormat.readGraphicsAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads graphics attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#GraphicsAttribute\n */\r\nprivate void readGraphicsAttributes(IXMLElement elem, Figure f) throws IOException {\r\n    Object value;\r\n    // display\r\n    // Value:  	 inline | block | list-item |\r\n    // run-in | compact | marker |\r\n    // table | inline-table | table-row-group | table-header-group |\r\n    // table-footer-group | table-row | table-column-group | table-column |\r\n    // table-cell | table-caption | none | inherit\r\n    // Initial:  	 inline\r\n    // Applies to:  	 svg , g , switch , a , foreignObject ,\r\n    // graphics elements (including the text content block elements) and text\r\n    // sub-elements (for example, tspan and a )\r\n    // Inherited:  	 no\r\n    // Percentages:  	 N/A\r\n    // Media:  	 all\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readAttribute(elem, \"display\", \"inline\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented display=\" + value));\r\n    }\r\n    // image-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 images\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"image-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented image-rendering=\" + value));\r\n    }\r\n    // pointer-events\r\n    // Value:  	boundingBox | visiblePainted | visibleFill | visibleStroke | visible |\r\n    // painted | fill | stroke | all | none | inherit\r\n    // Initial:  	visiblePainted\r\n    // Applies to:  	graphics elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"pointer-events\", \"visiblePainted\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented pointer-events=\" + value));\r\n    }\r\n    // shape-rendering\r\n    // Value:  	 auto | optimizeSpeed | crispEdges |\r\n    // geometricPrecision | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 shapes\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"shape-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented shape-rendering=\" + value));\r\n    }\r\n    // text-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeLegibility |\r\n    // geometricPrecision | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	text content block elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"text-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented text-rendering=\" + value));\r\n    }\r\n    // vector-effect\r\n    // Value:  	 non-scaling-stroke | none | inherit\r\n    // Initial:  	 none\r\n    // Applies to:  	 graphics elements\r\n    // Inherited:  	 no\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readAttribute(elem, \"vector-effect\", \"none\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented vector-effect=\" + value));\r\n    }\r\n    // visibility\r\n    // Value:  	 visible | hidden | collapse | inherit\r\n    // Initial:  	 visible\r\n    // Applies to:  	 graphics elements (including the text content block\r\n    // elements) and text sub-elements (for example, tspan and a )\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"visibility\", null);\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented visibility=\" + value));\r\n    }\r\n}'),(5970,'readImageElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readImageElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"image\" element.\r\n */\r\nprivate Figure readImageElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    double x = toNumber(elem, readAttribute(elem, \"x\", \"0\"));\r\n    double y = toNumber(elem, readAttribute(elem, \"y\", \"0\"));\r\n    double w = toWidth(elem, readAttribute(elem, \"width\", \"0\"));\r\n    double h = toHeight(elem, readAttribute(elem, \"height\", \"0\"));\r\n    String href = readAttribute(elem, \"xlink:href\", null);\r\n    if (href == null) {\r\n        href = readAttribute(elem, \"href\", null);\r\n    }\r\n    byte[] imageData = null;\r\n    if (href != null) {\r\n        if (href.startsWith(\"data:\")) {\r\n            int semicolonPos = href.indexOf(;);\r\n            if (semicolonPos != (-1)) {\r\n                if ((href.indexOf(\";base64,\")) == semicolonPos) {\r\n                    imageData = Base64.decode(href.substring((semicolonPos + 8)));\r\n                } else {\r\n                    throw new IOException((\"Unsupported encoding in data href in image element:\" + href));\r\n                }\r\n            } else {\r\n                throw new IOException((\"Unsupported data href in image element:\" + href));\r\n            }\r\n        } else {\r\n            URL imageUrl = new URL(url, href);\r\n            // Check whether the imageURL is an SVG image.\r\n            // Load it as a group.\r\n            if (imageUrl.getFile().endsWith(\"svg\")) {\r\n                SVGInputFormat svgImage = new SVGInputFormat(factory);\r\n                Drawing svgDrawing = new DefaultDrawing();\r\n                svgImage.read(imageUrl, svgDrawing, true);\r\n                CompositeFigure svgImageGroup = factory.createG(a);\r\n                for (Figure f : svgDrawing.getChildren()) {\r\n                    svgImageGroup.add(f);\r\n                }\r\n                svgImageGroup.setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n                return svgImageGroup;\r\n            }\r\n            // Read the image data from the URL into a byte array\r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            byte[] buf = new byte[512];\r\n            int len = 0;\r\n            InputStream in = null;\r\n            try {\r\n                in = imageUrl.openStream();\r\n                while ((len = in.read(buf)) > 0) {\r\n                    bout.write(buf, 0, len);\r\n                } \r\n                imageData = bout.toByteArray();\r\n            } catch (FileNotFoundException e) {\r\n                // Use empty image\r\n            } finally {\r\n                if (in != null) {\r\n                    in.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Create a buffered image from the image data\r\n    BufferedImage bufferedImage = null;\r\n    if (imageData != null) {\r\n        try {\r\n            bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));\r\n        } catch (IIOException e) {\r\n            System.err.println(\"SVGInputFormat warning: skipped unsupported image format.\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    // Delete the image data in case of failure\r\n    if (bufferedImage == null) {\r\n        imageData = null;\r\n        // if (DEBUG) System.out.println(\"FAILED:\"+imageUrl);\r\n    }\r\n    // Create a figure from the image data and the buffered image.\r\n    Figure figure = factory.createImage(x, y, w, h, imageData, bufferedImage, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5971,'readInheritAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.readInheritAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an attribute that is inherited.\r\n */\r\nprivate String readInheritAttribute(IXMLElement elem, String attributeName, String defaultValue) {\r\n    if (elem.hasAttribute(attributeName, SVGConstants.SVG_NAMESPACE)) {\r\n        String value = elem.getAttribute(attributeName, SVGConstants.SVG_NAMESPACE, null);\r\n        if (value.equals(\"inherit\")) {\r\n            return readInheritAttribute(elem.getParent(), attributeName, defaultValue);\r\n        } else {\r\n            return value;\r\n        }\r\n    } else\r\n        if (elem.hasAttribute(attributeName)) {\r\n            String value = elem.getAttribute(attributeName);\r\n            if (value.equals(\"inherit\")) {\r\n                return readInheritAttribute(elem.getParent(), attributeName, defaultValue);\r\n            } else {\r\n                return value;\r\n            }\r\n        } else\r\n            if (((elem.getParent()) != null) && (((elem.getParent().getNamespace()) == null) || (elem.getParent().getNamespace().equals(SVGConstants.SVG_NAMESPACE)))) {\r\n                return readInheritAttribute(elem.getParent(), attributeName, defaultValue);\r\n            } else {\r\n                return defaultValue;\r\n            }\r\n\r\n\r\n}'),(5972,'readInheritColorAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.readInheritColorAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a color attribute that is inherited.\r\n * This is similar to {@code readInheritAttribute}, but takes care of the\r\n * \"currentColor\" magic attribute value.\r\n */\r\nprivate String readInheritColorAttribute(IXMLElement elem, String attributeName, String defaultValue) {\r\n    String value = null;\r\n    if (elem.hasAttribute(attributeName, SVGConstants.SVG_NAMESPACE)) {\r\n        value = elem.getAttribute(attributeName, SVGConstants.SVG_NAMESPACE, null);\r\n        if (value.equals(\"inherit\")) {\r\n            return readInheritColorAttribute(elem.getParent(), attributeName, defaultValue);\r\n        }\r\n    } else\r\n        if (elem.hasAttribute(attributeName)) {\r\n            value = elem.getAttribute(attributeName);\r\n            if (value.equals(\"inherit\")) {\r\n                return readInheritColorAttribute(elem.getParent(), attributeName, defaultValue);\r\n            }\r\n        } else\r\n            if (((elem.getParent()) != null) && (((elem.getParent().getNamespace()) == null) || (elem.getParent().getNamespace().equals(SVGConstants.SVG_NAMESPACE)))) {\r\n                value = readInheritColorAttribute(elem.getParent(), attributeName, defaultValue);\r\n            } else {\r\n                value = defaultValue;\r\n            }\r\n\r\n\r\n    if (((value != null) && (value.toLowerCase().equals(\"currentcolor\"))) && (!(attributeName.equals(\"color\")))) {\r\n        // Lets do some magic stuff for \"currentColor\" attribute value\r\n        value = readInheritColorAttribute(elem, \"color\", \"defaultValue\");\r\n    }\r\n    return value;\r\n}'),(5973,'readInheritFontSizeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.readInheritFontSizeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a font size attribute that is inherited.\r\n * As specified by\r\n * http://www.w3.org/TR/SVGMobile12/text.html#FontPropertiesUsedBySVG\r\n * http://www.w3.org/TR/2006/CR-xsl11-20060220/#font-getChildCount\r\n */\r\nprivate double readInheritFontSizeAttribute(IXMLElement elem, String attributeName, String defaultValue) throws IOException {\r\n    String value = null;\r\n    if (elem.hasAttribute(attributeName, SVGConstants.SVG_NAMESPACE)) {\r\n        value = elem.getAttribute(attributeName, SVGConstants.SVG_NAMESPACE, null);\r\n    } else\r\n        if (elem.hasAttribute(attributeName)) {\r\n            value = elem.getAttribute(attributeName, null);\r\n        } else\r\n            if (((elem.getParent()) != null) && (((elem.getParent().getNamespace()) == null) || (elem.getParent().getNamespace().equals(SVGConstants.SVG_NAMESPACE)))) {\r\n                return readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue);\r\n            } else {\r\n                value = defaultValue;\r\n            }\r\n\r\n\r\n    if (value.equals(\"inherit\")) {\r\n        return readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue);\r\n    } else\r\n        if (SVGConstants.SVG_ABSOLUTE_FONT_SIZES.containsKey(value)) {\r\n            return SVGConstants.SVG_ABSOLUTE_FONT_SIZES.get(value);\r\n        } else\r\n            if (SVGConstants.SVG_RELATIVE_FONT_SIZES.containsKey(value)) {\r\n                return (SVGConstants.SVG_RELATIVE_FONT_SIZES.get(value)) * (readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue));\r\n            } else\r\n                if (value.endsWith(\"%\")) {\r\n                    double factor = Double.valueOf(value.substring(0, ((value.length()) - 1)));\r\n                    return factor * (readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue));\r\n                } else {\r\n                    // return toScaledNumber(elem, value);\r\n                    return toNumber(elem, value);\r\n                }\r\n\r\n\r\n\r\n}'),(5974,'readLineAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readLineAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads line and polyline attributes.\r\n */\r\nprivate void readLineAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    Object objectValue;\r\n    String value;\r\n    double doubleValue;\r\n    // color\r\n    // Value:  	<color> | inherit\r\n    // Initial:  	 depends on user agent\r\n    // Applies to:  	None. Indirectly affects other properties via currentColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified <color> value, except inherit\r\n    // \r\n    // value = readInheritAttribute(elem, \"color\", \"black\");\r\n    // if (DEBUG) System.out.println(\"color=\"+value);\r\n    // color-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 container elements , graphics elements and animateColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    // \r\n    // value = readInheritAttribute(elem, \"color-rendering\", \"auto\");\r\n    // if (DEBUG) System.out.println(\"color-rendering=\"+value);\r\n    // fill\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 black\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value or absolute IRI\r\n    objectValue = toPaint(elem, readInheritColorAttribute(elem, \"fill\", \"none\"));\r\n    if (objectValue instanceof Color) {\r\n        AttributeKeys.FILL_COLOR.set(a, ((Color) (objectValue)));\r\n    } else\r\n        if (objectValue instanceof Gradient) {\r\n            SVGAttributeKeys.FILL_GRADIENT.setClone(a, ((Gradient) (objectValue)));\r\n        } else\r\n            if (objectValue == null) {\r\n                AttributeKeys.FILL_COLOR.set(a, null);\r\n            } else {\r\n                AttributeKeys.FILL_COLOR.set(a, null);\r\n                if (SVGInputFormat.DEBUG) {\r\n                    System.out.println((\"SVGInputFormat not implemented  fill=\" + objectValue));\r\n                }\r\n            }\r\n\r\n\r\n    // fill-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"fill-opacity\", \"1\");\r\n    SVGAttributeKeys.FILL_OPACITY.set(a, toDouble(elem, ((String) (objectValue)), 1.0, 0.0, 1.0));\r\n    // fill-rule\r\n    // Value:	 nonzero | evenodd | inherit\r\n    // Initial: 	 nonzero\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"fill-rule\", \"nonzero\");\r\n    AttributeKeys.WINDING_RULE.set(a, SVGConstants.SVG_FILL_RULES.get(value));\r\n    // stroke\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value\r\n    // or absolute IRI\r\n    objectValue = toPaint(elem, readInheritColorAttribute(elem, \"stroke\", \"black\"));\r\n    if (objectValue instanceof Color) {\r\n        AttributeKeys.STROKE_COLOR.set(a, ((Color) (objectValue)));\r\n    } else\r\n        if (objectValue instanceof Gradient) {\r\n            SVGAttributeKeys.STROKE_GRADIENT.setClone(a, ((Gradient) (objectValue)));\r\n        } else\r\n            if (objectValue == null) {\r\n                AttributeKeys.STROKE_COLOR.set(a, null);\r\n            } else {\r\n                AttributeKeys.STROKE_COLOR.set(a, null);\r\n                if (SVGInputFormat.DEBUG) {\r\n                    System.out.println((\"SVGInputFormat not implemented  stroke=\" + objectValue));\r\n                }\r\n            }\r\n\r\n\r\n    // stroke-dasharray\r\n    // Value:  	 none | <dasharray> | inherit\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes (non-additive)\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-dasharray\", \"none\");\r\n    if (!(value.equals(\"none\"))) {\r\n        String[] values = SVGInputFormat.toWSOrCommaSeparatedArray(value);\r\n        double[] dashes = new double[values.length];\r\n        for (int i = 0; i < (values.length); i++) {\r\n            dashes[i] = toNumber(elem, values[i]);\r\n        }\r\n        AttributeKeys.STROKE_DASHES.set(a, dashes);\r\n    }\r\n    // stroke-dashoffset\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 0\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toNumber(elem, readInheritAttribute(elem, \"stroke-dashoffset\", \"0\"));\r\n    AttributeKeys.STROKE_DASH_PHASE.set(a, doubleValue);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.set(a, false);\r\n    // stroke-linecap\r\n    // Value:  	 butt | round | square | inherit\r\n    // Initial:  	 butt\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-linecap\", \"butt\");\r\n    AttributeKeys.STROKE_CAP.set(a, SVGConstants.SVG_STROKE_LINECAPS.get(value));\r\n    // stroke-linejoin\r\n    // Value:  	 miter | round | bevel | inherit\r\n    // Initial:  	 miter\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-linejoin\", \"miter\");\r\n    AttributeKeys.STROKE_JOIN.set(a, SVGConstants.SVG_STROKE_LINEJOINS.get(value));\r\n    // stroke-miterlimit\r\n    // Value:  	 <miterlimit> | inherit\r\n    // Initial:  	 4\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toDouble(elem, readInheritAttribute(elem, \"stroke-miterlimit\", \"4\"), 4.0, 1.0, Double.MAX_VALUE);\r\n    AttributeKeys.STROKE_MITER_LIMIT.set(a, doubleValue);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.set(a, false);\r\n    // stroke-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"stroke-opacity\", \"1\");\r\n    SVGAttributeKeys.STROKE_OPACITY.set(a, toDouble(elem, ((String) (objectValue)), 1.0, 0.0, 1.0));\r\n    // stroke-width\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toNumber(elem, readInheritAttribute(elem, \"stroke-width\", \"1\"));\r\n    AttributeKeys.STROKE_WIDTH.set(a, doubleValue);\r\n}'),(5975,'readLineElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readLineElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"line\" element.\r\n */\r\nprivate Figure readLineElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readLineAttributes(elem, a);\r\n    // Because line elements are single lines and thus are geometrically\r\n    // one-dimensional, they have no interior; thus, line elements are\r\n    // never filled (see the fill property).\r\n    if (((AttributeKeys.FILL_COLOR.get(a)) != null) && ((AttributeKeys.STROKE_COLOR.get(a)) == null)) {\r\n        AttributeKeys.STROKE_COLOR.set(a, AttributeKeys.FILL_COLOR.get(a));\r\n    }\r\n    if (((SVGAttributeKeys.FILL_GRADIENT.get(a)) != null) && ((SVGAttributeKeys.STROKE_GRADIENT.get(a)) == null)) {\r\n        SVGAttributeKeys.STROKE_GRADIENT.set(a, SVGAttributeKeys.FILL_GRADIENT.get(a));\r\n    }\r\n    AttributeKeys.FILL_COLOR.set(a, null);\r\n    SVGAttributeKeys.FILL_GRADIENT.set(a, null);\r\n    double x1 = toNumber(elem, readAttribute(elem, \"x1\", \"0\"));\r\n    double y1 = toNumber(elem, readAttribute(elem, \"y1\", \"0\"));\r\n    double x2 = toNumber(elem, readAttribute(elem, \"x2\", \"0\"));\r\n    double y2 = toNumber(elem, readAttribute(elem, \"y2\", \"0\"));\r\n    Figure figure = factory.createLine(x1, y1, x2, y2, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5976,'readLinearGradientElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readLinearGradientElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"linearGradient\" element.\r\n */\r\nprivate void readLinearGradientElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    double x1 = toLength(elem, readAttribute(elem, \"x1\", \"0\"), 0.01);\r\n    double y1 = toLength(elem, readAttribute(elem, \"y1\", \"0\"), 0.01);\r\n    double x2 = toLength(elem, readAttribute(elem, \"x2\", \"1\"), 0.01);\r\n    double y2 = toLength(elem, readAttribute(elem, \"y2\", \"0\"), 0.01);\r\n    boolean isRelativeToFigureBounds = readAttribute(elem, \"gradientUnits\", \"objectBoundingBox\").equals(\"objectBoundingBox\");\r\n    ArrayList<IXMLElement> stops = elem.getChildrenNamed(\"stop\", SVGConstants.SVG_NAMESPACE);\r\n    if ((stops.size()) == 0) {\r\n        stops = elem.getChildrenNamed(\"stop\");\r\n    }\r\n    if ((stops.size()) == 0) {\r\n        // FIXME - Implement xlink support throughouth SVGInputFormat\r\n        String xlink = readAttribute(elem, \"xlink:href\", \"\");\r\n        if ((xlink.startsWith(\"#\")) && ((identifiedElements.get(xlink.substring(1))) != null)) {\r\n            stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed(\"stop\", SVGConstants.SVG_NAMESPACE);\r\n            if ((stops.size()) == 0) {\r\n                stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed(\"stop\");\r\n            }\r\n        }\r\n    }\r\n    if ((stops.size()) == 0) {\r\n        if (SVGInputFormat.DEBUG) {\r\n            System.out.println((\"SVGInpuFormat: Warning no stops in linearGradient \" + elem));\r\n        }\r\n    }\r\n    double[] stopOffsets = new double[stops.size()];\r\n    Color[] stopColors = new Color[stops.size()];\r\n    double[] stopOpacities = new double[stops.size()];\r\n    for (int i = 0; i < (stops.size()); i++) {\r\n        IXMLElement stopElem = stops.get(i);\r\n        String offsetStr = readAttribute(stopElem, \"offset\", \"0\");\r\n        if (offsetStr.endsWith(\"%\")) {\r\n            stopOffsets[i] = (toDouble(stopElem, offsetStr.substring(0, ((offsetStr.length()) - 1)), 0, 0, 100)) / 100.0;\r\n        } else {\r\n            stopOffsets[i] = toDouble(stopElem, offsetStr, 0, 0, 1);\r\n        }\r\n        // stop-color\r\n        // Value:  	currentColor | <color> | inherit\r\n        // Initial:  	black\r\n        // Applies to:  	 stop elements\r\n        // Inherited:  	no\r\n        // Percentages:  	N/A\r\n        // Media:  	visual\r\n        // Animatable:  	yes\r\n        // Computed value:  	 Specified <color> value, except i\r\n        stopColors[i] = toColor(stopElem, readAttribute(stopElem, \"stop-color\", \"black\"));\r\n        if ((stopColors[i]) == null) {\r\n            stopColors[i] = new Color(0, true);\r\n            // throw new IOException(\"stop color missing in \"+stopElem);\r\n        }\r\n        // stop-opacity\r\n        // Value:  	<opacity-value> | inherit\r\n        // Initial:  	1\r\n        // Applies to:  	 stop elements\r\n        // Inherited:  	no\r\n        // Percentages:  	N/A\r\n        // Media:  	visual\r\n        // Animatable:  	yes\r\n        // Computed value:  	 Specified value, except inherit\r\n        stopOpacities[i] = toDouble(stopElem, readAttribute(stopElem, \"stop-opacity\", \"1\"), 1, 0, 1);\r\n    }\r\n    AffineTransform tx = SVGInputFormat.toTransform(elem, readAttribute(elem, \"gradientTransform\", \"none\"));\r\n    Gradient gradient = factory.createLinearGradient(x1, y1, x2, y2, stopOffsets, stopColors, stopOpacities, isRelativeToFigureBounds, tx);\r\n    elementObjects.put(elem, gradient);\r\n}'),(5977,'readOpacityAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGInputFormat.readOpacityAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads object/group opacity as described in\nhttp://www.w3.org/TR/SVGMobile12/painting.html#groupOpacity\n */\r\nprivate void readOpacityAttribute(IXMLElement elem, Map<AttributeKey, Object> a) throws IOException {\r\n    // opacity\r\n    // Value:  	<opacity-value> | inherit\r\n    // Initial:  	1\r\n    // Applies to:  	 image element\r\n    // Inherited:  	no\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    // <opacity-value>\r\n    // The uniform opacity setting must be applied across an entire object.\r\n    // Any values outside the range 0.0 (fully transparent) to 1.0\r\n    // (fully opaque) shall be clamped to this range.\r\n    // (See Clamping values which are restricted to a particular range.)\r\n    double value = toDouble(elem, readAttribute(elem, \"opacity\", \"1\"), 1, 0, 1);\r\n    SVGAttributeKeys.OPACITY.set(a, value);\r\n}'),(5978,'readPathElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readPathElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"path\" element.\r\n */\r\nprivate Figure readPathElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    BezierPath[] beziers = toPath(elem, readAttribute(elem, \"d\", \"\"));\r\n    Figure figure = factory.createPath(beziers, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5979,'readPolygonElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readPolygonElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"polygon\" element.\r\n */\r\nprivate Figure readPolygonElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    Point2D.Double[] points = toPoints(elem, readAttribute(elem, \"points\", \"\"));\r\n    Figure figure = factory.createPolygon(points, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5980,'readPolylineElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readPolylineElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"polyline\" element.\r\n */\r\nprivate Figure readPolylineElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readLineAttributes(elem, a);\r\n    Point2D.Double[] points = toPoints(elem, readAttribute(elem, \"points\", \"\"));\r\n    Figure figure = factory.createPolyline(points, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5981,'readRadialGradientElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readRadialGradientElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"radialGradient\" element.\r\n */\r\nprivate void readRadialGradientElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    double cx = toLength(elem, readAttribute(elem, \"cx\", \"0.5\"), 0.01);\r\n    double cy = toLength(elem, readAttribute(elem, \"cy\", \"0.5\"), 0.01);\r\n    double fx = toLength(elem, readAttribute(elem, \"fx\", readAttribute(elem, \"cx\", \"0.5\")), 0.01);\r\n    double fy = toLength(elem, readAttribute(elem, \"fy\", readAttribute(elem, \"cy\", \"0.5\")), 0.01);\r\n    double r = toLength(elem, readAttribute(elem, \"r\", \"0.5\"), 0.01);\r\n    boolean isRelativeToFigureBounds = readAttribute(elem, \"gradientUnits\", \"objectBoundingBox\").equals(\"objectBoundingBox\");\r\n    ArrayList<IXMLElement> stops = elem.getChildrenNamed(\"stop\", SVGConstants.SVG_NAMESPACE);\r\n    if ((stops.size()) == 0) {\r\n        stops = elem.getChildrenNamed(\"stop\");\r\n    }\r\n    if ((stops.size()) == 0) {\r\n        // FIXME - Implement xlink support throughout SVGInputFormat\r\n        String xlink = readAttribute(elem, \"xlink:href\", \"\");\r\n        if ((xlink.startsWith(\"#\")) && ((identifiedElements.get(xlink.substring(1))) != null)) {\r\n            stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed(\"stop\", SVGConstants.SVG_NAMESPACE);\r\n            if ((stops.size()) == 0) {\r\n                stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed(\"stop\");\r\n            }\r\n        }\r\n    }\r\n    double[] stopOffsets = new double[stops.size()];\r\n    Color[] stopColors = new Color[stops.size()];\r\n    double[] stopOpacities = new double[stops.size()];\r\n    for (int i = 0; i < (stops.size()); i++) {\r\n        IXMLElement stopElem = stops.get(i);\r\n        String offsetStr = readAttribute(stopElem, \"offset\", \"0\");\r\n        if (offsetStr.endsWith(\"%\")) {\r\n            stopOffsets[i] = (toDouble(stopElem, offsetStr.substring(0, ((offsetStr.length()) - 1)), 0, 0, 100)) / 100.0;\r\n        } else {\r\n            stopOffsets[i] = toDouble(stopElem, offsetStr, 0, 0, 1);\r\n        }\r\n        // stop-color\r\n        // Value:  	currentColor | <color> | inherit\r\n        // Initial:  	black\r\n        // Applies to:  	 stop elements\r\n        // Inherited:  	no\r\n        // Percentages:  	N/A\r\n        // Media:  	visual\r\n        // Animatable:  	yes\r\n        // Computed value:  	 Specified <color> value, except i\r\n        stopColors[i] = toColor(stopElem, readAttribute(stopElem, \"stop-color\", \"black\"));\r\n        if ((stopColors[i]) == null) {\r\n            stopColors[i] = new Color(0, true);\r\n            // throw new IOException(\"stop color missing in \"+stopElem);\r\n        }\r\n        // stop-opacity\r\n        // Value:  	<opacity-value> | inherit\r\n        // Initial:  	1\r\n        // Applies to:  	 stop elements\r\n        // Inherited:  	no\r\n        // Percentages:  	N/A\r\n        // Media:  	visual\r\n        // Animatable:  	yes\r\n        // Computed value:  	 Specified value, except inherit\r\n        stopOpacities[i] = toDouble(stopElem, readAttribute(stopElem, \"stop-opacity\", \"1\"), 1, 0, 1);\r\n    }\r\n    AffineTransform tx = SVGInputFormat.toTransform(elem, readAttribute(elem, \"gradientTransform\", \"none\"));\r\n    Gradient gradient = factory.createRadialGradient(cx, cy, fx, fy, r, stopOffsets, stopColors, stopOpacities, isRelativeToFigureBounds, tx);\r\n    elementObjects.put(elem, gradient);\r\n}'),(5982,'readRectElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readRectElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"rect\" element.\r\n */\r\nprivate Figure readRectElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    double x = toNumber(elem, readAttribute(elem, \"x\", \"0\"));\r\n    double y = toNumber(elem, readAttribute(elem, \"y\", \"0\"));\r\n    double w = toWidth(elem, readAttribute(elem, \"width\", \"0\"));\r\n    double h = toHeight(elem, readAttribute(elem, \"height\", \"0\"));\r\n    String rxValue = readAttribute(elem, \"rx\", \"none\");\r\n    String ryValue = readAttribute(elem, \"ry\", \"none\");\r\n    if (rxValue.equals(\"none\")) {\r\n        rxValue = ryValue;\r\n    }\r\n    if (ryValue.equals(\"none\")) {\r\n        ryValue = rxValue;\r\n    }\r\n    double rx = toNumber(elem, (rxValue.equals(\"none\") ? \"0\" : rxValue));\r\n    double ry = toNumber(elem, (ryValue.equals(\"none\") ? \"0\" : ryValue));\r\n    Figure figure = factory.createRect(x, y, w, h, rx, ry, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5983,'readSVGElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readSVGElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"svg\" element.\r\n */\r\nprivate Figure readSVGElement(IXMLElement elem) throws IOException {\r\n    // Establish a new viewport\r\n    SVGInputFormat.Viewport viewport = new SVGInputFormat.Viewport();\r\n    String widthValue = readAttribute(elem, \"width\", \"100%\");\r\n    String heightValue = readAttribute(elem, \"height\", \"100%\");\r\n    viewport.width = toWidth(elem, widthValue);\r\n    viewport.height = toHeight(elem, heightValue);\r\n    if (readAttribute(elem, \"viewBox\", \"none\").equals(\"none\")) {\r\n        viewport.viewBox.width = viewport.width;\r\n        viewport.viewBox.height = viewport.height;\r\n    } else {\r\n        String[] viewBoxValues = SVGInputFormat.toWSOrCommaSeparatedArray(readAttribute(elem, \"viewBox\", \"none\"));\r\n        viewport.viewBox.x = toNumber(elem, viewBoxValues[0]);\r\n        viewport.viewBox.y = toNumber(elem, viewBoxValues[1]);\r\n        viewport.viewBox.width = toNumber(elem, viewBoxValues[2]);\r\n        viewport.viewBox.height = toNumber(elem, viewBoxValues[3]);\r\n        // FIXME - Calculate percentages\r\n        if ((widthValue.indexOf(%)) > 0) {\r\n            viewport.width = viewport.viewBox.width;\r\n        }\r\n        if ((heightValue.indexOf(%)) > 0) {\r\n            viewport.height = viewport.viewBox.height;\r\n        }\r\n    }\r\n    if ((viewportStack.size()) == 1) {\r\n        // We always preserve the aspect ratio for to the topmost SVG element.\r\n        // This is not compliant, but looks much better.\r\n        viewport.isPreserveAspectRatio = true;\r\n    } else {\r\n        viewport.isPreserveAspectRatio = !(readAttribute(elem, \"preserveAspectRatio\", \"none\").equals(\"none\"));\r\n    }\r\n    viewport.widthPercentFactor = (viewport.viewBox.width) / 100.0;\r\n    viewport.heightPercentFactor = (viewport.viewBox.height) / 100.0;\r\n    viewport.numberFactor = Math.min(((viewport.width) / (viewport.viewBox.width)), ((viewport.height) / (viewport.viewBox.height)));\r\n    AffineTransform viewBoxTransform = new AffineTransform();\r\n    viewBoxTransform.translate((((-(viewport.viewBox.x)) * (viewport.width)) / (viewport.viewBox.width)), (((-(viewport.viewBox.y)) * (viewport.height)) / (viewport.viewBox.height)));\r\n    if (viewport.isPreserveAspectRatio) {\r\n        double factor = Math.min(((viewport.width) / (viewport.viewBox.width)), ((viewport.height) / (viewport.viewBox.height)));\r\n        viewBoxTransform.scale(factor, factor);\r\n    } else {\r\n        viewBoxTransform.scale(((viewport.width) / (viewport.viewBox.width)), ((viewport.height) / (viewport.viewBox.height)));\r\n    }\r\n    viewportStack.push(viewport);\r\n    readViewportAttributes(elem, viewportStack.firstElement().attributes);\r\n    // Read the figures\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            Figure childFigure = readElement(child);\r\n            // skip invisible elements\r\n            if ((readAttribute(child, \"visibility\", \"visible\").equals(\"visible\")) && (!(readAttribute(child, \"display\", \"inline\").equals(\"none\")))) {\r\n                if (childFigure != null) {\r\n                    childFigure.transform(viewBoxTransform);\r\n                    figures.add(childFigure);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    viewportStack.pop();\r\n    return null;\r\n}'),(5984,'readShapeAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readShapeAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads shape attributes.\r\n */\r\nprivate void readShapeAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    Object objectValue;\r\n    String value;\r\n    double doubleValue;\r\n    // color\r\n    // Value:  	<color> | inherit\r\n    // Initial:  	 depends on user agent\r\n    // Applies to:  	None. Indirectly affects other properties via currentColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified <color> value, except inherit\r\n    // \r\n    // value = readInheritAttribute(elem, \"color\", \"black\");\r\n    // if (DEBUG) System.out.println(\"color=\"+value);\r\n    // color-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 container elements , graphics elements and animateColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    // \r\n    // value = readInheritAttribute(elem, \"color-rendering\", \"auto\");\r\n    // if (DEBUG) System.out.println(\"color-rendering=\"+value);\r\n    // fill\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 black\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value or absolute IRI\r\n    objectValue = toPaint(elem, readInheritColorAttribute(elem, \"fill\", \"black\"));\r\n    if (objectValue instanceof Color) {\r\n        AttributeKeys.FILL_COLOR.set(a, ((Color) (objectValue)));\r\n    } else\r\n        if (objectValue instanceof Gradient) {\r\n            SVGAttributeKeys.FILL_GRADIENT.setClone(a, ((Gradient) (objectValue)));\r\n        } else\r\n            if (objectValue == null) {\r\n                AttributeKeys.FILL_COLOR.set(a, null);\r\n            } else {\r\n                AttributeKeys.FILL_COLOR.set(a, null);\r\n                if (SVGInputFormat.DEBUG) {\r\n                    System.out.println((\"SVGInputFormat not implemented  fill=\" + objectValue));\r\n                }\r\n            }\r\n\r\n\r\n    // fill-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"fill-opacity\", \"1\");\r\n    SVGAttributeKeys.FILL_OPACITY.set(a, toDouble(elem, ((String) (objectValue)), 1.0, 0.0, 1.0));\r\n    // fill-rule\r\n    // Value:	 nonzero | evenodd | inherit\r\n    // Initial: 	 nonzero\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"fill-rule\", \"nonzero\");\r\n    AttributeKeys.WINDING_RULE.set(a, SVGConstants.SVG_FILL_RULES.get(value));\r\n    // stroke\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value\r\n    // or absolute IRI\r\n    objectValue = toPaint(elem, readInheritColorAttribute(elem, \"stroke\", \"none\"));\r\n    if (objectValue instanceof Color) {\r\n        AttributeKeys.STROKE_COLOR.set(a, ((Color) (objectValue)));\r\n    } else\r\n        if (objectValue instanceof Gradient) {\r\n            SVGAttributeKeys.STROKE_GRADIENT.setClone(a, ((Gradient) (objectValue)));\r\n        } else\r\n            if (objectValue == null) {\r\n                AttributeKeys.STROKE_COLOR.set(a, null);\r\n            } else {\r\n                AttributeKeys.STROKE_COLOR.set(a, null);\r\n                if (SVGInputFormat.DEBUG) {\r\n                    System.out.println((\"SVGInputFormat not implemented  stroke=\" + objectValue));\r\n                }\r\n            }\r\n\r\n\r\n    // stroke-dasharray\r\n    // Value:  	 none | <dasharray> | inherit\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes (non-additive)\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-dasharray\", \"none\");\r\n    if (!(value.equals(\"none\"))) {\r\n        String[] values = SVGInputFormat.toWSOrCommaSeparatedArray(value);\r\n        double[] dashes = new double[values.length];\r\n        for (int i = 0; i < (values.length); i++) {\r\n            dashes[i] = toNumber(elem, values[i]);\r\n        }\r\n        AttributeKeys.STROKE_DASHES.set(a, dashes);\r\n    }\r\n    // stroke-dashoffset\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 0\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toNumber(elem, readInheritAttribute(elem, \"stroke-dashoffset\", \"0\"));\r\n    AttributeKeys.STROKE_DASH_PHASE.set(a, doubleValue);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.set(a, false);\r\n    // stroke-linecap\r\n    // Value:  	 butt | round | square | inherit\r\n    // Initial:  	 butt\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-linecap\", \"butt\");\r\n    AttributeKeys.STROKE_CAP.set(a, SVGConstants.SVG_STROKE_LINECAPS.get(value));\r\n    // stroke-linejoin\r\n    // Value:  	 miter | round | bevel | inherit\r\n    // Initial:  	 miter\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-linejoin\", \"miter\");\r\n    AttributeKeys.STROKE_JOIN.set(a, SVGConstants.SVG_STROKE_LINEJOINS.get(value));\r\n    // stroke-miterlimit\r\n    // Value:  	 <miterlimit> | inherit\r\n    // Initial:  	 4\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toDouble(elem, readInheritAttribute(elem, \"stroke-miterlimit\", \"4\"), 4.0, 1.0, Double.MAX_VALUE);\r\n    AttributeKeys.STROKE_MITER_LIMIT.set(a, doubleValue);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.set(a, false);\r\n    // stroke-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"stroke-opacity\", \"1\");\r\n    SVGAttributeKeys.STROKE_OPACITY.set(a, toDouble(elem, ((String) (objectValue)), 1.0, 0.0, 1.0));\r\n    // stroke-width\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toNumber(elem, readInheritAttribute(elem, \"stroke-width\", \"1\"));\r\n    AttributeKeys.STROKE_WIDTH.set(a, doubleValue);\r\n}'),(5985,'readSolidColorElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readSolidColorElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads solid color attributes. */\r\nprivate void readSolidColorElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    // solid-color\r\n    // Value:	 currentColor | <color> | inherit\r\n    // Initial:	 black\r\n    // Applies to:	 solidColor elements\r\n    // Inherited:	 no\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    // Computed value:  	 Specified <color> value, except inherit\r\n    Color color = toColor(elem, readAttribute(elem, \"solid-color\", \"black\"));\r\n    // solid-opacity\r\n    // Value:	<opacity-value> | inherit\r\n    // Initial:	 1\r\n    // Applies to:	 solidColor elements\r\n    // Inherited:	 no\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    double opacity = toDouble(elem, readAttribute(elem, \"solid-opacity\", \"1\"), 1, 0, 1);\r\n    if (opacity != 1) {\r\n        color = new Color(((((int) (255 * opacity)) << 24) | (16777215 & (color.getRGB()))), true);\r\n    }\r\n    elementObjects.put(elem, color);\r\n}'),(5986,'readSwitchElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readSwitchElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Evaluates an SVG \"switch\" element.\r\n */\r\nprivate Figure readSwitchElement(IXMLElement elem) throws IOException {\r\n    for (IXMLElement node : elem.getChildren()) {\r\n        if (node instanceof IXMLElement) {\r\n            IXMLElement child = ((IXMLElement) (node));\r\n            String[] requiredFeatures = SVGInputFormat.toWSOrCommaSeparatedArray(readAttribute(child, \"requiredFeatures\", \"\"));\r\n            String[] requiredExtensions = SVGInputFormat.toWSOrCommaSeparatedArray(readAttribute(child, \"requiredExtensions\", \"\"));\r\n            String[] systemLanguage = SVGInputFormat.toWSOrCommaSeparatedArray(readAttribute(child, \"systemLanguage\", \"\"));\r\n            String[] requiredFormats = SVGInputFormat.toWSOrCommaSeparatedArray(readAttribute(child, \"requiredFormats\", \"\"));\r\n            String[] requiredFonts = SVGInputFormat.toWSOrCommaSeparatedArray(readAttribute(child, \"requiredFonts\", \"\"));\r\n            boolean isMatch;\r\n            isMatch = (((SVGInputFormat.supportedFeatures.containsAll(Arrays.asList(requiredFeatures))) && ((requiredExtensions.length) == 0)) && ((requiredFormats.length) == 0)) && ((requiredFonts.length) == 0);\r\n            if (isMatch && ((systemLanguage.length) > 0)) {\r\n                isMatch = false;\r\n                Locale locale = Locale.getDefault();\r\n                for (String lng : systemLanguage) {\r\n                    int p = lng.indexOf(-);\r\n                    if (p == (-1)) {\r\n                        if (locale.getLanguage().equals(lng)) {\r\n                            isMatch = true;\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        if ((locale.getLanguage().equals(lng.substring(0, p))) && (locale.getCountry().toLowerCase().equals(lng.substring((p + 1))))) {\r\n                            isMatch = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isMatch) {\r\n                Figure figure = readElement(child);\r\n                if ((readAttribute(child, \"visibility\", \"visible\").equals(\"visible\")) && (!(readAttribute(child, \"display\", \"inline\").equals(\"none\")))) {\r\n                    return figure;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(5987,'readTSpanElement(org.jhotdraw.samples.svg.io.IXMLElement,javax.swing.text.DefaultStyledDocument)','org.jhotdraw.samples.svg.io.SVGInputFormat.readTSpanElement(org.jhotdraw.samples.svg.io.IXMLElement,javax.swing.text.DefaultStyledDocument)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"tspan\" element.\r\n */\r\nprivate void readTSpanElement(IXMLElement elem, DefaultStyledDocument doc) throws IOException {\r\n    try {\r\n        if ((elem.getContent()) != null) {\r\n            doc.insertString(doc.getLength(), toText(elem, elem.getContent()), null);\r\n        } else {\r\n            for (IXMLElement node : elem.getChildren()) {\r\n                if (node instanceof IXMLElement) {\r\n                    IXMLElement child = ((IXMLElement) (node));\r\n                    if (((node.getName()) != null) && (node.getName().equals(\"tspan\"))) {\r\n                        readTSpanElement(((IXMLElement) (node)), doc);\r\n                    } else {\r\n                        if (SVGInputFormat.DEBUG) {\r\n                            System.out.println((\"SVGInputFormat unknown text node \" + (node.getName())));\r\n                        }\r\n                    }\r\n                } else {\r\n                    if ((node.getName()) == null) {\r\n                        doc.insertString(doc.getLength(), toText(elem, node.getContent()), null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (BadLocationException e) {\r\n        InternalError ex = new InternalError(e.getMessage());\r\n        ex.initCause(e);\r\n        throw ex;\r\n    }\r\n}'),(5988,'readTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"textArea\" element.\r\n */\r\nprivate Figure readTextAreaElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    readFontAttributes(elem, a);\r\n    readTextAttributes(elem, a);\r\n    readTextFlowAttributes(elem, a);\r\n    double x = toNumber(elem, readAttribute(elem, \"x\", \"0\"));\r\n    double y = toNumber(elem, readAttribute(elem, \"y\", \"0\"));\r\n    // XXX - Handle \"auto\" width and height\r\n    double w = toWidth(elem, readAttribute(elem, \"width\", \"0\"));\r\n    double h = toHeight(elem, readAttribute(elem, \"height\", \"0\"));\r\n    DefaultStyledDocument doc = new DefaultStyledDocument();\r\n    try {\r\n        if ((elem.getContent()) != null) {\r\n            doc.insertString(0, toText(elem, elem.getContent()), null);\r\n        } else {\r\n            for (IXMLElement node : elem.getChildren()) {\r\n                if ((node.getName()) == null) {\r\n                    doc.insertString(doc.getLength(), toText(elem, node.getContent()), null);\r\n                } else\r\n                    if (node.getName().equals(\"tbreak\")) {\r\n                        doc.insertString(doc.getLength(), \"\n\", null);\r\n                    } else\r\n                        if (node.getName().equals(\"tspan\")) {\r\n                            readTSpanElement(((IXMLElement) (node)), doc);\r\n                        } else {\r\n                            if (SVGInputFormat.DEBUG) {\r\n                                System.out.println((\"SVGInputFormat unknown  text node \" + (node.getName())));\r\n                            }\r\n                        }\r\n\r\n\r\n            }\r\n        }\r\n    } catch (BadLocationException e) {\r\n        InternalError ex = new InternalError(e.getMessage());\r\n        ex.initCause(e);\r\n        throw ex;\r\n    }\r\n    Figure figure = factory.createTextArea(x, y, w, h, doc, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5989,'readTextAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGInputFormat.readTextAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads text attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#Text\n */\r\nprivate void readTextAttributes(IXMLElement elem, Map<AttributeKey, Object> a) throws IOException {\r\n    Object value;\r\n    // text-anchor\r\n    // Value:  	start | middle | end | inherit\r\n    // Initial:  	start\r\n    // Applies to:  	text IXMLElement\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"text-anchor\", \"start\");\r\n    if ((SVGConstants.SVG_TEXT_ANCHORS.get(value)) != null) {\r\n        SVGAttributeKeys.TEXT_ANCHOR.set(a, SVGConstants.SVG_TEXT_ANCHORS.get(value));\r\n    }\r\n    // display-align\r\n    // Value:  	auto | before | center | after | inherit\r\n    // Initial:  	auto\r\n    // Applies to:  	textArea\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"display-align\", \"auto\");\r\n    // XXX - Implement me properly\r\n    if (!(value.equals(\"auto\"))) {\r\n        if (value.equals(\"center\")) {\r\n            SVGAttributeKeys.TEXT_ANCHOR.set(a, SVGAttributeKeys.TextAnchor.MIDDLE);\r\n        } else\r\n            if (value.equals(\"before\")) {\r\n                SVGAttributeKeys.TEXT_ANCHOR.set(a, SVGAttributeKeys.TextAnchor.END);\r\n            }\r\n\r\n    }\r\n    // text-align\r\n    // Value:	 start | end | center | inherit\r\n    // Initial:	 start\r\n    // Applies to:	 textArea elements\r\n    // Inherited:	 yes\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    value = readInheritAttribute(elem, \"text-align\", \"start\");\r\n    // XXX - Implement me properly\r\n    if (!(value.equals(\"start\"))) {\r\n        SVGAttributeKeys.TEXT_ALIGN.set(a, SVGConstants.SVG_TEXT_ALIGNS.get(value));\r\n    }\r\n}'),(5990,'readTextElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readTextElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"text\" element.\r\n */\r\nprivate Figure readTextElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a);\r\n    readShapeAttributes(elem, a);\r\n    readFontAttributes(elem, a);\r\n    readTextAttributes(elem, a);\r\n    String[] xStr = SVGInputFormat.toCommaSeparatedArray(readAttribute(elem, \"x\", \"0\"));\r\n    String[] yStr = SVGInputFormat.toCommaSeparatedArray(readAttribute(elem, \"y\", \"0\"));\r\n    Point2D.Double[] coordinates = new Point2D.Double[Math.max(xStr.length, yStr.length)];\r\n    double lastX = 0;\r\n    double lastY = 0;\r\n    for (int i = 0; i < (coordinates.length); i++) {\r\n        if ((xStr.length) > i) {\r\n            try {\r\n                lastX = toNumber(elem, xStr[i]);\r\n            } catch (NumberFormatException ex) {\r\n            }\r\n        }\r\n        if ((yStr.length) > i) {\r\n            try {\r\n                lastY = toNumber(elem, yStr[i]);\r\n            } catch (NumberFormatException ex) {\r\n            }\r\n        }\r\n        coordinates[i] = new Point2D.Double(lastX, lastY);\r\n    }\r\n    String[] rotateStr = SVGInputFormat.toCommaSeparatedArray(readAttribute(elem, \"rotate\", \"\"));\r\n    double[] rotate = new double[rotateStr.length];\r\n    for (int i = 0; i < (rotateStr.length); i++) {\r\n        try {\r\n            rotate[i] = toDouble(elem, rotateStr[i]);\r\n        } catch (NumberFormatException ex) {\r\n            rotate[i] = 0;\r\n        }\r\n    }\r\n    DefaultStyledDocument doc = new DefaultStyledDocument();\r\n    try {\r\n        if ((elem.getContent()) != null) {\r\n            doc.insertString(0, toText(elem, elem.getContent()), null);\r\n        } else {\r\n            for (IXMLElement node : elem.getChildren()) {\r\n                if ((node.getName()) == null) {\r\n                    doc.insertString(0, toText(elem, node.getContent()), null);\r\n                } else\r\n                    if (node.getName().equals(\"tspan\")) {\r\n                        readTSpanElement(((IXMLElement) (node)), doc);\r\n                    } else {\r\n                        if (SVGInputFormat.DEBUG) {\r\n                            System.out.println(((\"SVGInputFormat unsupported text node <\" + (node.getName())) + \">\"));\r\n                        }\r\n                    }\r\n\r\n            }\r\n        }\r\n    } catch (BadLocationException e) {\r\n        InternalError ex = new InternalError(e.getMessage());\r\n        ex.initCause(e);\r\n        throw ex;\r\n    }\r\n    Figure figure = factory.createText(coordinates, rotate, doc, a);\r\n    elementObjects.put(elem, figure);\r\n    return figure;\r\n}'),(5991,'readTextFlowAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readTextFlowAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads text flow attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#TextFlow\n */\r\nprivate void readTextFlowAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    Object value;\r\n    // line-increment\r\n    // Value:  	auto | <number> | inherit\r\n    // Initial:  	auto\r\n    // Applies to:  	textArea\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"line-increment\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented line-increment=\" + value));\r\n    }\r\n}'),(5992,'readTransformAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readTransformAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads the transform attribute as specified in\nhttp://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute\n */\r\nprivate void readTransformAttribute(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    String value;\r\n    value = readAttribute(elem, \"transform\", \"none\");\r\n    if (!(value.equals(\"none\"))) {\r\n        AttributeKeys.TRANSFORM.set(a, SVGInputFormat.toTransform(elem, value));\r\n    }\r\n}'),(5993,'readUseElement(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGInputFormat.readUseElement(org.jhotdraw.samples.svg.io.IXMLElement)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads an SVG \"use\" element.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate Figure readUseElement(IXMLElement elem) throws IOException {\r\n    HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();\r\n    readCoreAttributes(elem, a);\r\n    HashMap<AttributeKey, Object> a2 = new HashMap<AttributeKey, Object>();\r\n    readTransformAttribute(elem, a);\r\n    readOpacityAttribute(elem, a2);\r\n    readUseShapeAttributes(elem, a2);\r\n    readFontAttributes(elem, a2);\r\n    String href = readAttribute(elem, \"xlink:href\", null);\r\n    if ((href != null) && (href.startsWith(\"#\"))) {\r\n        IXMLElement refElem = identifiedElements.get(href.substring(1));\r\n        if (refElem == null) {\r\n            if (SVGInputFormat.DEBUG) {\r\n                System.out.println((\"SVGInputFormat couldnt find href for <use> element:\" + href));\r\n            }\r\n        } else {\r\n            Object obj = readElement(refElem);\r\n            if (obj instanceof Figure) {\r\n                Figure figure = ((Figure) (((Figure) (obj)).clone()));\r\n                for (Map.Entry<AttributeKey, Object> entry : a2.entrySet()) {\r\n                    figure.setAttribute(entry.getKey(), entry.getValue());\r\n                }\r\n                AffineTransform tx = ((AttributeKeys.TRANSFORM.get(a)) == null) ? new AffineTransform() : AttributeKeys.TRANSFORM.get(a);\r\n                double x = toNumber(elem, readAttribute(elem, \"x\", \"0\"));\r\n                double y = toNumber(elem, readAttribute(elem, \"y\", \"0\"));\r\n                tx.translate(x, y);\r\n                figure.transform(tx);\r\n                return figure;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}'),(5994,'readUseShapeAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readUseShapeAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads shape attributes for the SVG \"use\" element. */\r\nprivate void readUseShapeAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    Object objectValue;\r\n    String value;\r\n    double doubleValue;\r\n    // color\r\n    // Value:  	<color> | inherit\r\n    // Initial:  	 depends on user agent\r\n    // Applies to:  	None. Indirectly affects other properties via currentColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified <color> value, except inherit\r\n    // \r\n    // value = readInheritAttribute(elem, \"color\", \"black\");\r\n    // if (DEBUG) System.out.println(\"color=\"+value);\r\n    // color-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 container elements , graphics elements and animateColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    // \r\n    // value = readInheritAttribute(elem, \"color-rendering\", \"auto\");\r\n    // if (DEBUG) System.out.println(\"color-rendering=\"+value);\r\n    // fill\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 black\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value or absolute IRI\r\n    objectValue = readInheritColorAttribute(elem, \"fill\", null);\r\n    if (objectValue != null) {\r\n        objectValue = toPaint(elem, ((String) (objectValue)));\r\n        if (objectValue instanceof Color) {\r\n            AttributeKeys.FILL_COLOR.set(a, ((Color) (objectValue)));\r\n        } else\r\n            if (objectValue instanceof Gradient) {\r\n                SVGAttributeKeys.FILL_GRADIENT.set(a, ((Gradient) (objectValue)));\r\n            } else\r\n                if (objectValue == null) {\r\n                    AttributeKeys.FILL_COLOR.set(a, null);\r\n                } else {\r\n                    AttributeKeys.FILL_COLOR.set(a, null);\r\n                    if (SVGInputFormat.DEBUG) {\r\n                        System.out.println((\"SVGInputFormat not implemented  fill=\" + objectValue));\r\n                    }\r\n                }\r\n\r\n\r\n    }\r\n    // fill-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"fill-opacity\", null);\r\n    if (objectValue != null) {\r\n        SVGAttributeKeys.FILL_OPACITY.set(a, toDouble(elem, ((String) (objectValue)), 1.0, 0.0, 1.0));\r\n    }\r\n    // fill-rule\r\n    // Value:	 nonzero | evenodd | inherit\r\n    // Initial: 	 nonzero\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"fill-rule\", null);\r\n    if (value != null) {\r\n        AttributeKeys.WINDING_RULE.set(a, SVGConstants.SVG_FILL_RULES.get(value));\r\n    }\r\n    // stroke\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value\r\n    // or absolute IRI\r\n    objectValue = toPaint(elem, readInheritColorAttribute(elem, \"stroke\", null));\r\n    if (objectValue != null) {\r\n        if (objectValue instanceof Color) {\r\n            AttributeKeys.STROKE_COLOR.set(a, ((Color) (objectValue)));\r\n        } else\r\n            if (objectValue instanceof Gradient) {\r\n                SVGAttributeKeys.STROKE_GRADIENT.set(a, ((Gradient) (objectValue)));\r\n            }\r\n\r\n    }\r\n    // stroke-dasharray\r\n    // Value:  	 none | <dasharray> | inherit\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes (non-additive)\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-dasharray\", null);\r\n    if ((value != null) && (!(value.equals(\"none\")))) {\r\n        String[] values = SVGInputFormat.toCommaSeparatedArray(value);\r\n        double[] dashes = new double[values.length];\r\n        for (int i = 0; i < (values.length); i++) {\r\n            dashes[i] = toNumber(elem, values[i]);\r\n        }\r\n        AttributeKeys.STROKE_DASHES.set(a, dashes);\r\n    }\r\n    // stroke-dashoffset\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 0\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"stroke-dashoffset\", null);\r\n    if (objectValue != null) {\r\n        doubleValue = toNumber(elem, ((String) (objectValue)));\r\n        AttributeKeys.STROKE_DASH_PHASE.set(a, doubleValue);\r\n        AttributeKeys.IS_STROKE_DASH_FACTOR.set(a, false);\r\n    }\r\n    // stroke-linecap\r\n    // Value:  	 butt | round | square | inherit\r\n    // Initial:  	 butt\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-linecap\", null);\r\n    if (value != null) {\r\n        AttributeKeys.STROKE_CAP.set(a, SVGConstants.SVG_STROKE_LINECAPS.get(value));\r\n    }\r\n    // stroke-linejoin\r\n    // Value:  	 miter | round | bevel | inherit\r\n    // Initial:  	 miter\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"stroke-linejoin\", null);\r\n    if (value != null) {\r\n        AttributeKeys.STROKE_JOIN.set(a, SVGConstants.SVG_STROKE_LINEJOINS.get(value));\r\n    }\r\n    // stroke-miterlimit\r\n    // Value:  	 <miterlimit> | inherit\r\n    // Initial:  	 4\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"stroke-miterlimit\", null);\r\n    if (objectValue != null) {\r\n        doubleValue = toDouble(elem, ((String) (objectValue)), 4.0, 1.0, Double.MAX_VALUE);\r\n        AttributeKeys.STROKE_MITER_LIMIT.set(a, doubleValue);\r\n        AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.set(a, false);\r\n    }\r\n    // stroke-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"stroke-opacity\", null);\r\n    if (objectValue != null) {\r\n        SVGAttributeKeys.STROKE_OPACITY.set(a, toDouble(elem, ((String) (objectValue)), 1.0, 0.0, 1.0));\r\n    }\r\n    // stroke-width\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    objectValue = readInheritAttribute(elem, \"stroke-width\", null);\r\n    if (objectValue != null) {\r\n        doubleValue = toNumber(elem, ((String) (objectValue)));\r\n        AttributeKeys.STROKE_WIDTH.set(a, doubleValue);\r\n    }\r\n}'),(5995,'readViewportAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','org.jhotdraw.samples.svg.io.SVGInputFormat.readViewportAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.HashMap)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Reads viewport attributes. */\r\nprivate void readViewportAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {\r\n    Object value;\r\n    Double doubleValue;\r\n    // width of the viewport\r\n    value = readAttribute(elem, \"width\", null);\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((((\"SVGInputFormat READ viewport w/h factors:\" + (viewportStack.peek().widthPercentFactor)) + \",\") + (viewportStack.peek().heightPercentFactor)));\r\n    }\r\n    if (value != null) {\r\n        doubleValue = toLength(elem, ((String) (value)), viewportStack.peek().widthPercentFactor);\r\n        SVGAttributeKeys.VIEWPORT_WIDTH.set(a, doubleValue);\r\n    }\r\n    // height of the viewport\r\n    value = readAttribute(elem, \"height\", null);\r\n    if (value != null) {\r\n        doubleValue = toLength(elem, ((String) (value)), viewportStack.peek().heightPercentFactor);\r\n        SVGAttributeKeys.VIEWPORT_HEIGHT.set(a, doubleValue);\r\n    }\r\n    // viewport-fill\r\n    // Value:	 \"none\" | <color> | inherit\r\n    // Initial:	 none\r\n    // Applies to:	viewport-creating elements\r\n    // Inherited:	 no\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    // Computed value:  	 \"none\" or specified <color> value, except inherit\r\n    value = toPaint(elem, readInheritColorAttribute(elem, \"viewport-fill\", \"none\"));\r\n    if ((value == null) || (value instanceof Color)) {\r\n        SVGAttributeKeys.VIEWPORT_FILL.set(a, ((Color) (value)));\r\n    }\r\n    // viewport-fill-opacity\r\n    // Value:	<opacity-value> | inherit\r\n    // Initial:	 1.0\r\n    // Applies to:	viewport-creating elements\r\n    // Inherited:	 no\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    doubleValue = toDouble(elem, readAttribute(elem, \"viewport-fill-opacity\", \"1.0\"));\r\n    SVGAttributeKeys.VIEWPORT_FILL_OPACITY.set(a, doubleValue);\r\n}'),(5996,'toColor(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toColor(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a color style attribute. This can be a Color or null.\r\n * FIXME - Doesnt support url(...) colors yet.\r\n */\r\nprivate Color toColor(IXMLElement elem, String value) throws IOException {\r\n    String str = value;\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    str = str.trim().toLowerCase();\r\n    if (str.equals(\"currentcolor\")) {\r\n        String currentColor = readInheritAttribute(elem, \"color\", \"black\");\r\n        if ((currentColor == null) || (currentColor.trim().toLowerCase().equals(\"currentColor\"))) {\r\n            return null;\r\n        } else {\r\n            return toColor(elem, currentColor);\r\n        }\r\n    } else\r\n        if (SVGConstants.SVG_COLORS.containsKey(str)) {\r\n            return SVGConstants.SVG_COLORS.get(str);\r\n        } else\r\n            if ((str.startsWith(\"#\")) && ((str.length()) == 7)) {\r\n                return new Color(Integer.decode(str));\r\n            } else\r\n                if ((str.startsWith(\"#\")) && ((str.length()) == 4)) {\r\n                    // Three digits hex value\r\n                    int th = Integer.decode(str);\r\n                    return new Color(((((((th & 15) | ((th & 15) << 4)) | ((th & 240) << 4)) | ((th & 240) << 8)) | ((th & 3840) << 8)) | ((th & 3840) << 12)));\r\n                } else\r\n                    if (str.startsWith(\"rgb\")) {\r\n                        try {\r\n                            StringTokenizer tt = new StringTokenizer(str, \"() ,\");\r\n                            tt.nextToken();\r\n                            String r = tt.nextToken();\r\n                            String g = tt.nextToken();\r\n                            String b = tt.nextToken();\r\n                            Color c = new Color((r.endsWith(\"%\") ? ((int) ((Integer.decode(r.substring(0, ((r.length()) - 1)))) * 2.55)) : Integer.decode(r)), (g.endsWith(\"%\") ? ((int) ((Integer.decode(g.substring(0, ((g.length()) - 1)))) * 2.55)) : Integer.decode(g)), (b.endsWith(\"%\") ? ((int) ((Integer.decode(b.substring(0, ((b.length()) - 1)))) * 2.55)) : Integer.decode(b)));\r\n                            return c;\r\n                        } catch (Exception e) {\r\n                            if (SVGInputFormat.DEBUG) {\r\n                                System.out.println((\"SVGInputFormat.toColor illegal RGB value \" + str));\r\n                            }\r\n                            return null;\r\n                        }\r\n                    } else\r\n                        if (str.startsWith(\"url\")) {\r\n                            // FIXME - Implement me\r\n                            if (SVGInputFormat.DEBUG) {\r\n                                System.out.println((\"SVGInputFormat.toColor not implemented for \" + str));\r\n                            }\r\n                            return null;\r\n                        } else {\r\n                            return null;\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n}'),(5997,'toCommaSeparatedArray(java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toCommaSeparatedArray(java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a String array.\r\n * The values are separated by commas with optional white space.\r\n */\r\npublic static String[] toCommaSeparatedArray(String str) throws IOException {\r\n    return str.split(\"\\s*,\\s*\");\r\n}'),(5998,'toDouble(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toDouble(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a double attribute.\r\n */\r\nprivate double toDouble(IXMLElement elem, String value) throws IOException {\r\n    return toDouble(elem, value, 0, Double.MIN_VALUE, Double.MAX_VALUE);\r\n}'),(5999,'toDouble(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,double,double,double)','org.jhotdraw.samples.svg.io.SVGInputFormat.toDouble(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,double,double,double)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a double attribute.\r\n */\r\nprivate double toDouble(IXMLElement elem, String value, double defaultValue, double min, double max) throws IOException {\r\n    try {\r\n        double d = Double.valueOf(value);\r\n        return Math.max(Math.min(d, max), min);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n        /* IOException ex = new IOException(elem.getTagName()+\"@\"+elem.getLineNr()+\" \"+e.getMessage());\n        ex.initCause(e);\n        throw ex;\n         */\r\n    }\r\n}'),(6000,'toHeight(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toHeight(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a height.\r\n * http://www.w3.org/TR/SVGMobile12/types.html#DataTypeLength\r\n */\r\nprivate double toHeight(IXMLElement elem, String str) throws IOException {\r\n    // XXX - Compute yPercentFactor from viewport\r\n    return toLength(elem, str, viewportStack.peek().heightPercentFactor);\r\n}'),(6001,'toLength(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,double)','org.jhotdraw.samples.svg.io.SVGInputFormat.toLength(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,double)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a length.\r\n * http://www.w3.org/TR/SVGMobile12/types.html#DataTypeLength\r\n */\r\nprivate double toLength(IXMLElement elem, String str, double percentFactor) throws IOException {\r\n    double scaleFactor = 1.0;\r\n    if (((str == null) || ((str.length()) == 0)) || (str.equals(\"none\"))) {\r\n        return 0.0;\r\n    }\r\n    if (str.endsWith(\"%\")) {\r\n        str = str.substring(0, ((str.length()) - 1));\r\n        scaleFactor = percentFactor;\r\n    } else\r\n        if (str.endsWith(\"px\")) {\r\n            str = str.substring(0, ((str.length()) - 2));\r\n        } else\r\n            if (str.endsWith(\"pt\")) {\r\n                str = str.substring(0, ((str.length()) - 2));\r\n                scaleFactor = 1.25;\r\n            } else\r\n                if (str.endsWith(\"pc\")) {\r\n                    str = str.substring(0, ((str.length()) - 2));\r\n                    scaleFactor = 15;\r\n                } else\r\n                    if (str.endsWith(\"mm\")) {\r\n                        str = str.substring(0, ((str.length()) - 2));\r\n                        scaleFactor = 3.543307;\r\n                    } else\r\n                        if (str.endsWith(\"cm\")) {\r\n                            str = str.substring(0, ((str.length()) - 2));\r\n                            scaleFactor = 35.43307;\r\n                        } else\r\n                            if (str.endsWith(\"in\")) {\r\n                                str = str.substring(0, ((str.length()) - 2));\r\n                                scaleFactor = 90;\r\n                            } else\r\n                                if (str.endsWith(\"em\")) {\r\n                                    str = str.substring(0, ((str.length()) - 2));\r\n                                    // XXX - This doesnt work\r\n                                    scaleFactor = toLength(elem, readAttribute(elem, \"font-size\", \"0\"), percentFactor);\r\n                                } else {\r\n                                    scaleFactor = 1.0;\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (Double.parseDouble(str)) * scaleFactor;\r\n}'),(6002,'toNumber(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toNumber(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a number.\r\n * http://www.w3.org/TR/SVGMobile12/types.html#DataTypeNumber\r\n */\r\nprivate double toNumber(IXMLElement elem, String str) throws IOException {\r\n    return toLength(elem, str, viewportStack.peek().numberFactor);\r\n}'),(6003,'toPaint(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toPaint(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a paint style attribute. This can be a Color or a Gradient or null.\r\n * XXX - Doesnt support url(...) colors yet.\r\n */\r\nprivate Object toPaint(IXMLElement elem, String value) throws IOException {\r\n    String str = value;\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    str = str.trim().toLowerCase();\r\n    if (str.equals(\"none\")) {\r\n        return null;\r\n    } else\r\n        if (str.equals(\"currentcolor\")) {\r\n            String currentColor = readInheritAttribute(elem, \"color\", \"black\");\r\n            if ((currentColor == null) || (currentColor.trim().toLowerCase().equals(\"currentColor\"))) {\r\n                return null;\r\n            } else {\r\n                return toPaint(elem, currentColor);\r\n            }\r\n        } else\r\n            if (SVGConstants.SVG_COLORS.containsKey(str)) {\r\n                return SVGConstants.SVG_COLORS.get(str);\r\n            } else\r\n                if ((str.startsWith(\"#\")) && ((str.length()) == 7)) {\r\n                    return new Color(Integer.decode(str));\r\n                } else\r\n                    if ((str.startsWith(\"#\")) && ((str.length()) == 4)) {\r\n                        // Three digits hex value\r\n                        int th = Integer.decode(str);\r\n                        return new Color(((((((th & 15) | ((th & 15) << 4)) | ((th & 240) << 4)) | ((th & 240) << 8)) | ((th & 3840) << 8)) | ((th & 3840) << 12)));\r\n                    } else\r\n                        if (str.startsWith(\"rgb\")) {\r\n                            try {\r\n                                StringTokenizer tt = new StringTokenizer(str, \"() ,\");\r\n                                tt.nextToken();\r\n                                String r = tt.nextToken();\r\n                                String g = tt.nextToken();\r\n                                String b = tt.nextToken();\r\n                                Color c = new Color((r.endsWith(\"%\") ? ((int) ((Double.parseDouble(r.substring(0, ((r.length()) - 1)))) * 2.55)) : Integer.decode(r)), (g.endsWith(\"%\") ? ((int) ((Double.parseDouble(g.substring(0, ((g.length()) - 1)))) * 2.55)) : Integer.decode(g)), (b.endsWith(\"%\") ? ((int) ((Double.parseDouble(b.substring(0, ((b.length()) - 1)))) * 2.55)) : Integer.decode(b)));\r\n                                return c;\r\n                            } catch (Exception e) {\r\n                                System.out.println((\"SVGInputFormat.toPaint illegal RGB value \" + str));\r\n                                e.printStackTrace();\r\n                                return null;\r\n                            }\r\n                        } else\r\n                            if (str.startsWith(\"url(\")) {\r\n                                String href = value.substring(4, ((value.length()) - 1));\r\n                                if ((identifiedElements.containsKey(href.substring(1))) && (elementObjects.containsKey(identifiedElements.get(href.substring(1))))) {\r\n                                    Object obj = elementObjects.get(identifiedElements.get(href.substring(1)));\r\n                                    return obj;\r\n                                }\r\n                                // XXX - Implement me\r\n                                if (SVGInputFormat.DEBUG) {\r\n                                    System.out.println((\"SVGInputFormat.toPaint not implemented for \" + href));\r\n                                }\r\n                                return null;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(6004,'toPath(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toPath(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a BezierPath array.\r\n * as specified in http://www.w3.org/TR/SVGMobile12/paths.html#PathDataBNF\r\n *\r\n * Also supports elliptical arc commands a and A as specified in\r\n * http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\r\n */\r\nprivate BezierPath[] toPath(IXMLElement elem, String str) throws IOException {\r\n    LinkedList<BezierPath> paths = new LinkedList<BezierPath>();\r\n    BezierPath path = null;\r\n    Point2D.Double p = new Point2D.Double();\r\n    Point2D.Double c1 = new Point2D.Double();\r\n    Point2D.Double c2 = new Point2D.Double();\r\n    StreamPosTokenizer tt;\r\n    if ((toPathTokenizer) == null) {\r\n        tt = new StreamPosTokenizer(new StringReader(str));\r\n        tt.resetSyntax();\r\n        tt.parseNumbers();\r\n        tt.parseExponents();\r\n        tt.parsePlusAsNumber();\r\n        tt.whitespaceChars(0,  );\r\n        tt.whitespaceChars(,, ,);\r\n        toPathTokenizer = tt;\r\n    } else {\r\n        tt = toPathTokenizer;\r\n        tt.setReader(new StringReader(str));\r\n    }\r\n    char nextCommand = M;\r\n    char command = M;\r\n    Commands : while ((tt.nextToken()) != (StreamPosTokenizer.TT_EOF)) {\r\n        if ((tt.ttype) > 0) {\r\n            command = ((char) (tt.ttype));\r\n        } else {\r\n            command = nextCommand;\r\n            tt.pushBack();\r\n        }\r\n        BezierPath.Node node;\r\n        switch (command) {\r\n            case M :\r\n                // absolute-moveto x y\r\n                if (path != null) {\r\n                    paths.add(path);\r\n                }\r\n                path = new BezierPath();\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for M at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for M at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.moveTo(p.x, p.y);\r\n                nextCommand = L;\r\n                break;\r\n            case m :\r\n                // relative-moveto dx dy\r\n                if (path != null) {\r\n                    paths.add(path);\r\n                }\r\n                path = new BezierPath();\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for m at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for m at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.moveTo(p.x, p.y);\r\n                nextCommand = l;\r\n                break;\r\n            case Z :\r\n            case z :\r\n                // close path\r\n                p.x = path.get(0).x[0];\r\n                p.y = path.get(0).y[0];\r\n                // If the last point and the first point are the same, we\r\n                // can merge them\r\n                if ((path.size()) > 1) {\r\n                    BezierPath.Node first = path.get(0);\r\n                    BezierPath.Node last = path.get(((path.size()) - 1));\r\n                    if (((first.x[0]) == (last.x[0])) && ((first.y[0]) == (last.y[0]))) {\r\n                        if (((last.mask) & (BezierPath.C1_MASK)) != 0) {\r\n                            first.mask |= BezierPath.C1_MASK;\r\n                            first.x[1] = last.x[1];\r\n                            first.y[1] = last.y[1];\r\n                        }\r\n                        path.remove(((path.size()) - 1));\r\n                    }\r\n                }\r\n                path.setClosed(true);\r\n                break;\r\n            case L :\r\n                // absolute-lineto x y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for L at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for L at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = L;\r\n                break;\r\n            case l :\r\n                // relative-lineto dx dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for l at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for l at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = l;\r\n                break;\r\n            case H :\r\n                // absolute-horizontal-lineto x\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for H at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = H;\r\n                break;\r\n            case h :\r\n                // relative-horizontal-lineto dx\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for h at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = h;\r\n                break;\r\n            case V :\r\n                // absolute-vertical-lineto y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for V at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = V;\r\n                break;\r\n            case v :\r\n                // relative-vertical-lineto dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for v at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.lineTo(p.x, p.y);\r\n                nextCommand = v;\r\n                break;\r\n            case C :\r\n                // absolute-curveto x1 y1 x2 y2 x y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x1 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y1 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x2 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y2 coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for C at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = C;\r\n                break;\r\n            case c :\r\n                // relative-curveto dx1 dy1 dx2 dy2 dx dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx1 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy1 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx2 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy2 coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for c at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = c;\r\n                break;\r\n            case S :\r\n                // absolute-shorthand-curveto x2 y2 x y\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x2 coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y2 coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for S at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = S;\r\n                break;\r\n            case s :\r\n                // relative-shorthand-curveto dx2 dy2 dx dy\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx2 coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy2 coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c2.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for s at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\r\n                nextCommand = s;\r\n                break;\r\n            case Q :\r\n                // absolute-quadto x1 y1 x y\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x1 coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y1 coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for Q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = Q;\r\n                break;\r\n            case q :\r\n                // relative-quadto dx1 dy1 dx dy\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx1 coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.x = (p.x) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy1 coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                c1.y = (p.y) + (tt.nval);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for q at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = q;\r\n                break;\r\n            case T :\r\n                // absolute-shorthand-quadto x y\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"x coordinate missing for T at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x = tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"y coordinate missing for T at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y = tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = T;\r\n                break;\r\n            case t :\r\n                // relative-shorthand-quadto dx dy\r\n                node = path.get(((path.size()) - 1));\r\n                c1.x = ((node.x[0]) * 2.0) - (node.x[1]);\r\n                c1.y = ((node.y[0]) * 2.0) - (node.y[1]);\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dx coordinate missing for t at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.x += tt.nval;\r\n                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                    throw new IOException((((\"dy coordinate missing for t at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                }\r\n                p.y += tt.nval;\r\n                path.quadTo(c1.x, c1.y, p.x, p.y);\r\n                nextCommand = s;\r\n                break;\r\n            case A :\r\n                {\r\n                    // absolute-elliptical-arc rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"rx coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    // If rX or rY have negative signs, these are dropped;\r\n                    // the absolute value is used instead.\r\n                    double rx = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"ry coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double ry = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x-axis-rotation missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double xAxisRotation = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"large-arc-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean largeArcFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"sweep-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean sweepFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.x = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"y coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.y = tt.nval;\r\n                    path.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p.x, p.y);\r\n                    nextCommand = A;\r\n                    break;\r\n                }\r\n            case a :\r\n                {\r\n                    // absolute-elliptical-arc rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"rx coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    // If rX or rY have negative signs, these are dropped;\r\n                    // the absolute value is used instead.\r\n                    double rx = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"ry coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double ry = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x-axis-rotation missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    double xAxisRotation = tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"large-arc-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean largeArcFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"sweep-flag missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    boolean sweepFlag = (tt.nval) != 0;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"x coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.x += tt.nval;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((\"y coordinate missing for A at position \" + (tt.getStartPosition())) + \" in \") + str));\r\n                    }\r\n                    p.y += tt.nval;\r\n                    path.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p.x, p.y);\r\n                    nextCommand = a;\r\n                    break;\r\n                }\r\n            default :\r\n                if (SVGInputFormat.DEBUG) {\r\n                    System.out.println((((\"SVGInputFormat.toPath aborting after illegal path command: \" + command) + \" found in path \") + str));\r\n                }\r\n                break Commands;\r\n                // throw new IOException(\"Illegal command: \"+command);\r\n        }\r\n    } \r\n    if (path != null) {\r\n        paths.add(path);\r\n    }\r\n    return paths.toArray(new BezierPath[paths.size()]);\r\n}'),(6005,'toPoints(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toPoints(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a Point2D.Double array.\r\n * as specified in http://www.w3.org/TR/SVGMobile12/shapes.html#PointsBNF\r\n */\r\nprivate Point2D.Double[] toPoints(IXMLElement elem, String str) throws IOException {\r\n    StringTokenizer tt = new StringTokenizer(str, \" ,\");\r\n    Point2D.Double[] points = new Point2D.Double[(tt.countTokens()) / 2];\r\n    for (int i = 0; i < (points.length); i++) {\r\n        points[i] = new Point2D.Double(toNumber(elem, tt.nextToken()), toNumber(elem, tt.nextToken()));\r\n    }\r\n    return points;\r\n}'),(6006,'toText(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toText(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Reads a text attribute.\r\n * This method takes the \"xml:space\" attribute into account.\r\n * http://www.w3.org/TR/SVGMobile12/text.html#WhiteSpace\r\n */\r\nprivate String toText(IXMLElement elem, String value) throws IOException {\r\n    String space = readInheritAttribute(elem, \"xml:space\", \"default\");\r\n    if (space.equals(\"default\")) {\r\n        return value.trim().replaceAll(\"\\s++\", \" \");\r\n    } else {\r\n        return value;\r\n    }\r\n}'),(6007,'toTransform(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toTransform(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/* Converts an SVG transform attribute value into an AffineTransform\nas specified in\nhttp://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute\n */\r\npublic static AffineTransform toTransform(IXMLElement elem, String str) throws IOException {\r\n    AffineTransform t = new AffineTransform();\r\n    if ((str != null) && (!(str.equals(\"none\")))) {\r\n        StreamPosTokenizer tt = new StreamPosTokenizer(new StringReader(str));\r\n        tt.resetSyntax();\r\n        tt.wordChars(a, z);\r\n        tt.wordChars(A, Z);\r\n        tt.wordChars((128 + 32), 255);\r\n        tt.whitespaceChars(0,  );\r\n        tt.whitespaceChars(,, ,);\r\n        tt.parseNumbers();\r\n        tt.parseExponents();\r\n        while ((tt.nextToken()) != (StreamPosTokenizer.TT_EOF)) {\r\n            if ((tt.ttype) != (StreamPosTokenizer.TT_WORD)) {\r\n                throw new IOException((\"Illegal transform \" + str));\r\n            }\r\n            String type = tt.sval;\r\n            if ((tt.nextToken()) != () {\r\n                throw new IOException((\"( not found in transform \" + str));\r\n            }\r\n            if (type.equals(\"matrix\")) {\r\n                double[] m = new double[6];\r\n                for (int i = 0; i < 6; i++) {\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((((((((\"Matrix value \" + i) + \" not found in transform \") + str) + \" token:\") + (tt.ttype)) + \" \") + (tt.sval)));\r\n                    }\r\n                    m[i] = tt.nval;\r\n                }\r\n                t.concatenate(new AffineTransform(m));\r\n            } else\r\n                if (type.equals(\"translate\")) {\r\n                    double tx;\r\n                    double ty;\r\n                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                        throw new IOException((\"X-translation value not found in transform \" + str));\r\n                    }\r\n                    tx = tt.nval;\r\n                    if ((tt.nextToken()) == (StreamPosTokenizer.TT_NUMBER)) {\r\n                        ty = tt.nval;\r\n                    } else {\r\n                        tt.pushBack();\r\n                        ty = 0;\r\n                    }\r\n                    t.translate(tx, ty);\r\n                } else\r\n                    if (type.equals(\"scale\")) {\r\n                        double sx;\r\n                        double sy;\r\n                        if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                            throw new IOException((\"X-scale value not found in transform \" + str));\r\n                        }\r\n                        sx = tt.nval;\r\n                        if ((tt.nextToken()) == (StreamPosTokenizer.TT_NUMBER)) {\r\n                            sy = tt.nval;\r\n                        } else {\r\n                            tt.pushBack();\r\n                            sy = sx;\r\n                        }\r\n                        t.scale(sx, sy);\r\n                    } else\r\n                        if (type.equals(\"rotate\")) {\r\n                            double angle;\r\n                            double cx;\r\n                            double cy;\r\n                            if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                throw new IOException((\"Angle value not found in transform \" + str));\r\n                            }\r\n                            angle = tt.nval;\r\n                            if ((tt.nextToken()) == (StreamPosTokenizer.TT_NUMBER)) {\r\n                                cx = tt.nval;\r\n                                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                    throw new IOException((\"Y-center value not found in transform \" + str));\r\n                                }\r\n                                cy = tt.nval;\r\n                            } else {\r\n                                tt.pushBack();\r\n                                cx = cy = 0;\r\n                            }\r\n                            t.rotate(((angle * (Math.PI)) / 180.0), cx, cy);\r\n                        } else\r\n                            if (type.equals(\"skewX\")) {\r\n                                double angle;\r\n                                if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                    throw new IOException((\"Skew angle not found in transform \" + str));\r\n                                }\r\n                                angle = tt.nval;\r\n                                t.concatenate(new AffineTransform(1, 0, Math.tan(((angle * (Math.PI)) / 180)), 1, 0, 0));\r\n                            } else\r\n                                if (type.equals(\"skewY\")) {\r\n                                    double angle;\r\n                                    if ((tt.nextToken()) != (StreamPosTokenizer.TT_NUMBER)) {\r\n                                        throw new IOException((\"Skew angle not found in transform \" + str));\r\n                                    }\r\n                                    angle = tt.nval;\r\n                                    t.concatenate(new AffineTransform(1, Math.tan(((angle * (Math.PI)) / 180)), 0, 1, 0, 0));\r\n                                } else\r\n                                    if (type.equals(\"ref\")) {\r\n                                        System.err.println((\"SVGInputFormat warning: ignored ref(...) transform attribute in element \" + elem));\r\n                                        while (((tt.nextToken()) != )) && ((tt.ttype) != (StreamPosTokenizer.TT_EOF))) {\r\n                                            // ignore tokens between brackets\r\n                                        } \r\n                                        tt.pushBack();\r\n                                    } else {\r\n                                        throw new IOException((((((\"Unknown transform \" + type) + \" in \") + str) + \" in element \") + elem));\r\n                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n            if ((tt.nextToken()) != )) {\r\n                throw new IOException((\") not found in transform \" + str));\r\n            }\r\n        } \r\n    }\r\n    return t;\r\n}'),(6008,'toWSOrCommaSeparatedArray(java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toWSOrCommaSeparatedArray(java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a String array.\r\n * The values are separated by whitespace or by commas with optional white\r\n * space.\r\n */\r\npublic static String[] toWSOrCommaSeparatedArray(String str) throws IOException {\r\n    String[] result = str.split(\"(\\s*,\\s*|\\s+)\");\r\n    if (((result.length) == 1) && (result[0].equals(\"\"))) {\r\n        return new String[0];\r\n    } else {\r\n        return result;\r\n    }\r\n}'),(6009,'toWidth(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','org.jhotdraw.samples.svg.io.SVGInputFormat.toWidth(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String)','612','org.jhotdraw.samples.svg.io.SVGInputFormat','/**\r\n * Returns a value as a width.\r\n * http://www.w3.org/TR/SVGMobile12/types.html#DataTypeLength\r\n */\r\nprivate double toWidth(IXMLElement elem, String str) throws IOException {\r\n    // XXX - Compute xPercentFactor from viewport\r\n    return toLength(elem, str, viewportStack.peek().widthPercentFactor);\r\n}'),(6010,'-init-()','org.jhotdraw.samples.svg.io.SVGInputFormat$Viewport.-init-()','611','org.jhotdraw.samples.svg.io.SVGInputFormat$Viewport','Viewport() {\r\n}'),(6011,'toString()','org.jhotdraw.samples.svg.io.SVGInputFormat$Viewport.toString()','611','org.jhotdraw.samples.svg.io.SVGInputFormat$Viewport','public String toString() {\r\n    return ((((((((\"widthPercentFactor:\" + (widthPercentFactor)) + \";\") + \"heightPercentFactor:\") + (heightPercentFactor)) + \";\") + \"numberFactor:\") + (numberFactor)) + \";\") + (attributes);\r\n}'),(6012,'-init-()','org.jhotdraw.samples.svg.io.SVGOutputFormat.-init-()','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGOutputFormat() {\r\n}'),(6013,'createCircle(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createCircle(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createCircle(IXMLElement doc, double cx, double cy, double r, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"circle\");\r\n    writeAttribute(elem, \"cx\", cx, 0.0);\r\n    writeAttribute(elem, \"cy\", cy, 0.0);\r\n    writeAttribute(elem, \"r\", r, 0.0);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6014,'createEllipse(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createEllipse(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createEllipse(IXMLElement doc, double cx, double cy, double rx, double ry, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"ellipse\");\r\n    writeAttribute(elem, \"cx\", cx, 0.0);\r\n    writeAttribute(elem, \"cy\", cy, 0.0);\r\n    writeAttribute(elem, \"rx\", rx, 0.0);\r\n    writeAttribute(elem, \"ry\", ry, 0.0);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6015,'createG(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createG(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createG(IXMLElement doc, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"g\");\r\n    writeOpacityAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6016,'createImage(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,byte[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createImage(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,byte[],java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createImage(IXMLElement doc, double x, double y, double w, double h, byte[] imageData, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"image\");\r\n    writeAttribute(elem, \"x\", x, 0.0);\r\n    writeAttribute(elem, \"y\", y, 0.0);\r\n    writeAttribute(elem, \"width\", w, 0.0);\r\n    writeAttribute(elem, \"height\", h, 0.0);\r\n    writeAttribute(elem, \"xlink:href\", (\"data:image;base64,\" + (Base64.encodeBytes(imageData))), \"\");\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6017,'createLine(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createLine(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createLine(IXMLElement doc, double x1, double y1, double x2, double y2, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"line\");\r\n    writeAttribute(elem, \"x1\", x1, 0.0);\r\n    writeAttribute(elem, \"y1\", y1, 0.0);\r\n    writeAttribute(elem, \"x2\", x2, 0.0);\r\n    writeAttribute(elem, \"y2\", y2, 0.0);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6018,'createLinearGradient(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createLinearGradient(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createLinearGradient(IXMLElement doc, double x1, double y1, double x2, double y2, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform transform) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"linearGradient\");\r\n    writeAttribute(elem, \"x1\", SVGOutputFormat.toNumber(x1), \"0\");\r\n    writeAttribute(elem, \"y1\", SVGOutputFormat.toNumber(y1), \"0\");\r\n    writeAttribute(elem, \"x2\", SVGOutputFormat.toNumber(x2), \"1\");\r\n    writeAttribute(elem, \"y2\", SVGOutputFormat.toNumber(y2), \"0\");\r\n    writeAttribute(elem, \"gradientUnits\", (isRelativeToFigureBounds ? \"objectBoundingBox\" : \"userSpaceOnUse\"), \"objectBoundingBox\");\r\n    writeAttribute(elem, \"gradientTransform\", SVGOutputFormat.toTransform(transform), \"none\");\r\n    for (int i = 0; i < (stopOffsets.length); i++) {\r\n        IXMLElement stop = new XMLElement(\"stop\");\r\n        writeAttribute(stop, \"offset\", SVGOutputFormat.toNumber(stopOffsets[i]), null);\r\n        writeAttribute(stop, \"stop-color\", SVGOutputFormat.toColor(stopColors[i]), null);\r\n        writeAttribute(stop, \"stop-opacity\", SVGOutputFormat.toNumber(stopOpacities[i]), \"1\");\r\n        elem.addChild(stop);\r\n    }\r\n    return elem;\r\n}'),(6019,'createPath(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.geom.BezierPath[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createPath(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.geom.BezierPath[],java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createPath(IXMLElement doc, BezierPath[] beziers, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"path\");\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    writeAttribute(elem, \"d\", SVGOutputFormat.toPath(beziers), null);\r\n    return elem;\r\n}'),(6020,'createPolygon(org.jhotdraw.samples.svg.io.IXMLElement,java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createPolygon(org.jhotdraw.samples.svg.io.IXMLElement,java.awt.geom.Point2D$Double[],java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createPolygon(IXMLElement doc, Point2D.Double[] points, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"polygon\");\r\n    writeAttribute(elem, \"points\", SVGOutputFormat.toPoints(points), null);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6021,'createPolyline(org.jhotdraw.samples.svg.io.IXMLElement,java.awt.geom.Point2D$Double[],java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createPolyline(org.jhotdraw.samples.svg.io.IXMLElement,java.awt.geom.Point2D$Double[],java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createPolyline(IXMLElement doc, Point2D.Double[] points, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"polyline\");\r\n    writeAttribute(elem, \"points\", SVGOutputFormat.toPoints(points), null);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6022,'createRadialGradient(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createRadialGradient(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,double,double[],java.awt.Color[],double[],boolean,java.awt.geom.AffineTransform)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createRadialGradient(IXMLElement doc, double cx, double cy, double fx, double fy, double r, double[] stopOffsets, Color[] stopColors, double[] stopOpacities, boolean isRelativeToFigureBounds, AffineTransform transform) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"radialGradient\");\r\n    writeAttribute(elem, \"cx\", SVGOutputFormat.toNumber(cx), \"0.5\");\r\n    writeAttribute(elem, \"cy\", SVGOutputFormat.toNumber(cy), \"0.5\");\r\n    writeAttribute(elem, \"fx\", SVGOutputFormat.toNumber(fx), SVGOutputFormat.toNumber(cx));\r\n    writeAttribute(elem, \"fy\", SVGOutputFormat.toNumber(fy), SVGOutputFormat.toNumber(cy));\r\n    writeAttribute(elem, \"r\", SVGOutputFormat.toNumber(r), \"0.5\");\r\n    writeAttribute(elem, \"gradientUnits\", (isRelativeToFigureBounds ? \"objectBoundingBox\" : \"userSpaceOnUse\"), \"objectBoundingBox\");\r\n    writeAttribute(elem, \"gradientTransform\", SVGOutputFormat.toTransform(transform), \"none\");\r\n    for (int i = 0; i < (stopOffsets.length); i++) {\r\n        IXMLElement stop = new XMLElement(\"stop\");\r\n        writeAttribute(stop, \"offset\", SVGOutputFormat.toNumber(stopOffsets[i]), null);\r\n        writeAttribute(stop, \"stop-color\", SVGOutputFormat.toColor(stopColors[i]), null);\r\n        writeAttribute(stop, \"stop-opacity\", SVGOutputFormat.toNumber(stopOpacities[i]), \"1\");\r\n        elem.addChild(stop);\r\n    }\r\n    return elem;\r\n}'),(6023,'createRect(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,double,double,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createRect(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,double,double,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createRect(IXMLElement doc, double x, double y, double width, double height, double rx, double ry, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"rect\");\r\n    writeAttribute(elem, \"x\", x, 0.0);\r\n    writeAttribute(elem, \"y\", y, 0.0);\r\n    writeAttribute(elem, \"width\", width, 0.0);\r\n    writeAttribute(elem, \"height\", height, 0.0);\r\n    writeAttribute(elem, \"rx\", rx, 0.0);\r\n    writeAttribute(elem, \"ry\", ry, 0.0);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    return elem;\r\n}'),(6024,'createText(org.jhotdraw.samples.svg.io.IXMLElement,java.awt.geom.Point2D$Double[],double[],javax.swing.text.StyledDocument,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createText(org.jhotdraw.samples.svg.io.IXMLElement,java.awt.geom.Point2D$Double[],double[],javax.swing.text.StyledDocument,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createText(IXMLElement doc, Point2D.Double[] coordinates, double[] rotate, StyledDocument text, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"text\");\r\n    StringBuilder bufX = new StringBuilder();\r\n    StringBuilder bufY = new StringBuilder();\r\n    for (int i = 0; i < (coordinates.length); i++) {\r\n        if (i != 0) {\r\n            bufX.append(,);\r\n            bufY.append(,);\r\n        }\r\n        bufX.append(SVGOutputFormat.toNumber(coordinates[i].getX()));\r\n        bufY.append(SVGOutputFormat.toNumber(coordinates[i].getY()));\r\n    }\r\n    StringBuilder bufR = new StringBuilder();\r\n    if (rotate != null) {\r\n        for (int i = 0; i < (rotate.length); i++) {\r\n            if (i != 0) {\r\n                bufR.append(,);\r\n            }\r\n            bufR.append(SVGOutputFormat.toNumber(rotate[i]));\r\n        }\r\n    }\r\n    writeAttribute(elem, \"x\", bufX.toString(), \"0\");\r\n    writeAttribute(elem, \"y\", bufY.toString(), \"0\");\r\n    writeAttribute(elem, \"rotate\", bufR.toString(), \"\");\r\n    String str;\r\n    try {\r\n        str = text.getText(0, text.getLength());\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    elem.setContent(str);\r\n    writeShapeAttributes(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    writeFontAttributes(elem, attributes);\r\n    return elem;\r\n}'),(6025,'createTextArea(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,javax.swing.text.StyledDocument,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createTextArea(org.jhotdraw.samples.svg.io.IXMLElement,double,double,double,double,javax.swing.text.StyledDocument,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected IXMLElement createTextArea(IXMLElement doc, double x, double y, double w, double h, StyledDocument text, Map<AttributeKey, Object> attributes) throws IOException {\r\n    IXMLElement elem = doc.createElement(\"textArea\");\r\n    writeAttribute(elem, \"x\", SVGOutputFormat.toNumber(x), \"0\");\r\n    writeAttribute(elem, \"y\", SVGOutputFormat.toNumber(y), \"0\");\r\n    writeAttribute(elem, \"width\", SVGOutputFormat.toNumber(w), \"0\");\r\n    writeAttribute(elem, \"height\", SVGOutputFormat.toNumber(h), \"0\");\r\n    String str;\r\n    try {\r\n        str = text.getText(0, text.getLength());\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    String[] lines = str.split(\"\n\");\r\n    for (int i = 0; i < (lines.length); i++) {\r\n        if (i != 0) {\r\n            elem.addChild(doc.createElement(\"tbreak\"));\r\n        }\r\n        IXMLElement contentElement = doc.createElement(null);\r\n        contentElement.setContent(lines[i]);\r\n        elem.addChild(contentElement);\r\n    }\r\n    writeShapeAttributes(elem, attributes);\r\n    writeTransformAttribute(elem, attributes);\r\n    writeOpacityAttribute(elem, attributes);\r\n    writeFontAttributes(elem, attributes);\r\n    return elem;\r\n}'),(6026,'createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','org.jhotdraw.samples.svg.io.SVGOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    write(buf, drawing, figures);\r\n    return new InputStreamTransferable(new DataFlavor(SVGConstants.SVG_MIMETYPE, \"Image SVG\"), buf.toByteArray());\r\n}'),(6027,'getFileExtension()','org.jhotdraw.samples.svg.io.SVGOutputFormat.getFileExtension()','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public String getFileExtension() {\r\n    return \"svg\";\r\n}'),(6028,'getFileFilter()','org.jhotdraw.samples.svg.io.SVGOutputFormat.getFileFilter()','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(\"Scalable Vector Graphics (SVG)\", \"svg\");\r\n}'),(6029,'getId(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGOutputFormat.getId(org.jhotdraw.samples.svg.io.IXMLElement)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/**\r\n * Gets a unique ID for the specified element.\r\n */\r\npublic String getId(IXMLElement element) {\r\n    if (identifiedElements.containsKey(element)) {\r\n        return identifiedElements.get(element);\r\n    } else {\r\n        String id = Integer.toString(((nextId)++), Character.MAX_RADIX);\r\n        identifiedElements.put(element, id);\r\n        return id;\r\n    }\r\n}'),(6030,'getOutputFormatAccessory()','org.jhotdraw.samples.svg.io.SVGOutputFormat.getOutputFormatAccessory()','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public JComponent getOutputFormatAccessory() {\r\n    return null;\r\n}'),(6031,'initStorageContext(org.jhotdraw.samples.svg.io.IXMLElement)','org.jhotdraw.samples.svg.io.SVGOutputFormat.initStorageContext(org.jhotdraw.samples.svg.io.IXMLElement)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','private void initStorageContext(IXMLElement root) {\r\n    identifiedElements = new HashMap<IXMLElement, String>();\r\n    gradientToIDMap = new HashMap<Gradient, String>();\r\n}'),(6032,'isPrettyPrint()','org.jhotdraw.samples.svg.io.SVGOutputFormat.isPrettyPrint()','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public boolean isPrettyPrint() {\r\n    return isPrettyPrint;\r\n}'),(6033,'setPrettyPrint(boolean)','org.jhotdraw.samples.svg.io.SVGOutputFormat.setPrettyPrint(boolean)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public void setPrettyPrint(boolean newValue) {\r\n    isPrettyPrint = newValue;\r\n}'),(6034,'toColor(java.awt.Color)','org.jhotdraw.samples.svg.io.SVGOutputFormat.toColor(java.awt.Color)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public static String toColor(Color color) {\r\n    if (color == null) {\r\n        return \"none\";\r\n    }\r\n    String value;\r\n    value = \"000000\" + (Integer.toHexString(color.getRGB()));\r\n    value = \"#\" + (value.substring(((value.length()) - 6)));\r\n    if ((((value.charAt(1)) == (value.charAt(2))) && ((value.charAt(3)) == (value.charAt(4)))) && ((value.charAt(5)) == (value.charAt(6)))) {\r\n        value = ((\"#\" + (value.charAt(1))) + (value.charAt(3))) + (value.charAt(5));\r\n    }\r\n    return value;\r\n}'),(6035,'toNumber(double)','org.jhotdraw.samples.svg.io.SVGOutputFormat.toNumber(double)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/**\r\n * Returns a double array as a number attribute value.\r\n */\r\npublic static String toNumber(double number) {\r\n    String str = (SVGOutputFormat.isFloatPrecision) ? Float.toString(((float) (number))) : Double.toString(number);\r\n    if (str.endsWith(\".0\")) {\r\n        str = str.substring(0, ((str.length()) - 2));\r\n    }\r\n    return str;\r\n}'),(6036,'toPath(org.jhotdraw.geom.BezierPath[])','org.jhotdraw.samples.svg.io.SVGOutputFormat.toPath(org.jhotdraw.geom.BezierPath[])','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/**\r\n * Returns a value as a SVG Path attribute.\r\n * as specified in http://www.w3.org/TR/SVGMobile12/paths.html#PathDataBNF\r\n */\r\npublic static String toPath(BezierPath[] paths) {\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int j = 0; j < (paths.length); j++) {\r\n        BezierPath path = paths[j];\r\n        if ((path.size()) == 0) {\r\n            // nothing to do\r\n        } else\r\n            if ((path.size()) == 1) {\r\n                BezierPath.Node current = path.get(0);\r\n                buf.append(\"M \");\r\n                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                buf.append( );\r\n                buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                // buf.append(\" L \");\r\n                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                buf.append( );\r\n                buf.append(SVGOutputFormat.toNumber(((current.y[0]) + 1)));\r\n            } else {\r\n                BezierPath.Node previous;\r\n                BezierPath.Node current;\r\n                previous = current = path.get(0);\r\n                buf.append(\"M \");\r\n                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                buf.append( );\r\n                buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                char nextCommand = L;\r\n                for (int i = 1, n = path.size(); i < n; i++) {\r\n                    previous = current;\r\n                    current = path.get(i);\r\n                    if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            if (nextCommand != L) {\r\n                                buf.append(\" L \");\r\n                                nextCommand = L;\r\n                            } else {\r\n                                buf.append( );\r\n                            }\r\n                            buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                        } else {\r\n                            if (nextCommand != Q) {\r\n                                buf.append(\" Q \");\r\n                                nextCommand = Q;\r\n                            } else {\r\n                                buf.append( );\r\n                            }\r\n                            buf.append(SVGOutputFormat.toNumber(current.x[1]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.y[1]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                        }\r\n                    } else {\r\n                        if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                            if (nextCommand != Q) {\r\n                                buf.append(\" Q \");\r\n                                nextCommand = Q;\r\n                            } else {\r\n                                buf.append( );\r\n                            }\r\n                            buf.append(SVGOutputFormat.toNumber(previous.x[2]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(previous.y[2]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                        } else {\r\n                            if (nextCommand != C) {\r\n                                buf.append(\" C \");\r\n                                nextCommand = C;\r\n                            } else {\r\n                                buf.append( );\r\n                            }\r\n                            buf.append(SVGOutputFormat.toNumber(previous.x[2]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(previous.y[2]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.x[1]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.y[1]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                            buf.append( );\r\n                            buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                        }\r\n                    }\r\n                }\r\n                if (path.isClosed()) {\r\n                    if ((path.size()) > 1) {\r\n                        previous = path.get(((path.size()) - 1));\r\n                        current = path.get(0);\r\n                        if (((previous.mask) & (BezierPath.C2_MASK)) == 0) {\r\n                            if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                                if (nextCommand != L) {\r\n                                    buf.append(\" L \");\r\n                                    nextCommand = L;\r\n                                } else {\r\n                                    buf.append( );\r\n                                }\r\n                                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                            } else {\r\n                                if (nextCommand != Q) {\r\n                                    buf.append(\" Q \");\r\n                                    nextCommand = Q;\r\n                                } else {\r\n                                    buf.append( );\r\n                                }\r\n                                buf.append(SVGOutputFormat.toNumber(current.x[1]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.y[1]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                            }\r\n                        } else {\r\n                            if (((current.mask) & (BezierPath.C1_MASK)) == 0) {\r\n                                if (nextCommand != Q) {\r\n                                    buf.append(\" Q \");\r\n                                    nextCommand = Q;\r\n                                } else {\r\n                                    buf.append( );\r\n                                }\r\n                                buf.append(SVGOutputFormat.toNumber(previous.x[2]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(previous.y[2]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                            } else {\r\n                                if (nextCommand != C) {\r\n                                    buf.append(\" C \");\r\n                                    nextCommand = C;\r\n                                } else {\r\n                                    buf.append( );\r\n                                }\r\n                                buf.append(SVGOutputFormat.toNumber(previous.x[2]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(previous.y[2]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.x[1]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.y[1]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.x[0]));\r\n                                buf.append( );\r\n                                buf.append(SVGOutputFormat.toNumber(current.y[0]));\r\n                            }\r\n                        }\r\n                    }\r\n                    buf.append(\" Z\");\r\n                    nextCommand = u0000;\r\n                }\r\n            }\r\n\r\n    }\r\n    return buf.toString();\r\n}'),(6037,'toPoints(java.awt.geom.Point2D$Double[])','org.jhotdraw.samples.svg.io.SVGOutputFormat.toPoints(java.awt.geom.Point2D$Double[])','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/**\r\n * Returns a Point2D.Double array as a Points attribute value.\r\n * as specified in http://www.w3.org/TR/SVGMobile12/shapes.html#PointsBNF\r\n */\r\npublic static String toPoints(Point2D.Double[] points) throws IOException {\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int i = 0; i < (points.length); i++) {\r\n        if (i != 0) {\r\n            buf.append(\", \");\r\n        }\r\n        buf.append(SVGOutputFormat.toNumber(points[i].x));\r\n        buf.append(,);\r\n        buf.append(SVGOutputFormat.toNumber(points[i].y));\r\n    }\r\n    return buf.toString();\r\n}'),(6038,'toTransform(java.awt.geom.AffineTransform)','org.jhotdraw.samples.svg.io.SVGOutputFormat.toTransform(java.awt.geom.AffineTransform)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/* Converts an AffineTransform into an SVG transform attribute value as specified in\nhttp://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute\n */\r\npublic static String toTransform(AffineTransform t) throws IOException {\r\n    StringBuilder buf = new StringBuilder();\r\n    switch (t.getType()) {\r\n        case AffineTransform.TYPE_IDENTITY :\r\n            buf.append(\"none\");\r\n            break;\r\n        case AffineTransform.TYPE_TRANSLATION :\r\n            // translate(<tx> [<ty>]), specifies a translation by tx and ty.\r\n            // If <ty> is not provided, it is assumed to be zero.\r\n            buf.append(\"translate(\");\r\n            buf.append(SVGOutputFormat.toNumber(t.getTranslateX()));\r\n            if ((t.getTranslateY()) != 0.0) {\r\n                buf.append( );\r\n                buf.append(SVGOutputFormat.toNumber(t.getTranslateY()));\r\n            }\r\n            buf.append());\r\n            break;\r\n            /* case AffineTransform.TYPE_GENERAL_ROTATION :\n            case AffineTransform.TYPE_QUADRANT_ROTATION :\n            case AffineTransform.TYPE_MASK_ROTATION :\n            // rotate(<rotate-angle> [<cx> <cy>]), specifies a rotation by\n            // <rotate-angle> degrees about a given point.\n            // If optional parameters <cx> and <cy> are not supplied, the\n            // rotate is about the origin of the current user coordinate\n            // system. The operation corresponds to the matrix\n            // [cos(a) sin(a) -sin(a) cos(a) 0 0].\n            // If optional parameters <cx> and <cy> are supplied, the rotate\n            // is about the point (<cx>, <cy>). The operation represents the\n            // equivalent of the following specification:\n            // translate(<cx>, <cy>) rotate(<rotate-angle>)\n            // translate(-<cx>, -<cy>).\n            buf.append(\"rotate(\");\n            buf.append(toNumber(t.getScaleX()));\n            buf.append());\n            break;\n             */\r\n        case AffineTransform.TYPE_UNIFORM_SCALE :\r\n            // scale(<sx> [<sy>]), specifies a scale operation by sx\r\n            // and sy. If <sy> is not provided, it is assumed to be equal\r\n            // to <sx>.\r\n            buf.append(\"scale(\");\r\n            buf.append(SVGOutputFormat.toNumber(t.getScaleX()));\r\n            buf.append());\r\n            break;\r\n        case AffineTransform.TYPE_GENERAL_SCALE :\r\n        case AffineTransform.TYPE_MASK_SCALE :\r\n            // scale(<sx> [<sy>]), specifies a scale operation by sx\r\n            // and sy. If <sy> is not provided, it is assumed to be equal\r\n            // to <sx>.\r\n            buf.append(\"scale(\");\r\n            buf.append(SVGOutputFormat.toNumber(t.getScaleX()));\r\n            buf.append( );\r\n            buf.append(SVGOutputFormat.toNumber(t.getScaleY()));\r\n            buf.append());\r\n            break;\r\n        default :\r\n            // matrix(<a> <b> <c> <d> <e> <f>), specifies a transformation\r\n            // in the form of a transformation matrix of six values.\r\n            // matrix(a,b,c,d,e,f) is equivalent to applying the\r\n            // transformation matrix [a b c d e f].\r\n            buf.append(\"matrix(\");\r\n            double[] matrix = new double[6];\r\n            t.getMatrix(matrix);\r\n            for (int i = 0; i < (matrix.length); i++) {\r\n                if (i != 0) {\r\n                    buf.append( );\r\n                }\r\n                buf.append(SVGOutputFormat.toNumber(matrix[i]));\r\n            }\r\n            buf.append());\r\n            break;\r\n    }\r\n    return buf.toString();\r\n}'),(6039,'write(java.io.File,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(6040,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing, drawing.getChildren());\r\n}'),(6041,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)','org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/**\r\n * All other write methods delegate their work to here.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures) throws IOException {\r\n    document = new XMLElement(\"svg\", SVGConstants.SVG_NAMESPACE);\r\n    document.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n    document.setAttribute(\"version\", \"1.2\");\r\n    document.setAttribute(\"baseProfile\", \"tiny\");\r\n    writeViewportAttributes(document, drawing.getAttributes());\r\n    initStorageContext(document);\r\n    defs = new XMLElement(\"defs\");\r\n    document.addChild(defs);\r\n    for (Figure f : figures) {\r\n        writeElement(document, f);\r\n    }\r\n    // Write XML prolog\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(out, \"UTF-8\"));\r\n    writer.println(\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\");\r\n    // Write XML content\r\n    XMLWriter xmlWriter = new XMLWriter(writer);\r\n    xmlWriter.write(document, isPrettyPrint);\r\n    // Flush writer\r\n    writer.flush();\r\n}'),(6042,'writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,double,double)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,double,double)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeAttribute(IXMLElement elem, String name, double value, double defaultValue) {\r\n    writeAttribute(elem, name, SVGConstants.SVG_NAMESPACE, value, defaultValue);\r\n}'),(6043,'writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String,double,double)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String,double,double)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeAttribute(IXMLElement elem, String name, String namespace, double value, double defaultValue) {\r\n    if (value != defaultValue) {\r\n        elem.setAttribute(name, SVGOutputFormat.toNumber(value));\r\n    }\r\n}'),(6044,'writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String,java.lang.String)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeAttribute(IXMLElement elem, String name, String value, String defaultValue) {\r\n    writeAttribute(elem, name, SVGConstants.SVG_NAMESPACE, value, defaultValue);\r\n}'),(6045,'writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.lang.String,java.lang.String,java.lang.String,java.lang.String)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeAttribute(IXMLElement elem, String name, String namespace, String value, String defaultValue) {\r\n    if (!(value.equals(defaultValue))) {\r\n        elem.setAttribute(name, value);\r\n    }\r\n}'),(6046,'writeCircleElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeCircleElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeCircleElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    parent.addChild(createCircle(document, ((f.getX()) + ((f.getWidth()) / 2.0)), ((f.getY()) + ((f.getHeight()) / 2.0)), ((f.getWidth()) / 2.0), f.getAttributes()));\r\n}'),(6047,'writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeElement(IXMLElement parent, Figure f) throws IOException {\r\n    // Write link attribute as encosing \"a\" element\r\n    if (((SVGAttributeKeys.LINK.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n        IXMLElement aElement = parent.createElement(\"a\");\r\n        aElement.setAttribute(\"xlink:href\", SVGAttributeKeys.LINK.get(f));\r\n        if (((SVGAttributeKeys.LINK_TARGET.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n            aElement.setAttribute(\"target\", SVGAttributeKeys.LINK_TARGET.get(f));\r\n        }\r\n        parent.addChild(aElement);\r\n        parent = aElement;\r\n    }\r\n    // Write the actual element\r\n    if (f instanceof SVGEllipseFigure) {\r\n        SVGEllipseFigure ellipse = ((SVGEllipseFigure) (f));\r\n        if ((ellipse.getWidth()) == (ellipse.getHeight())) {\r\n            writeCircleElement(parent, ellipse);\r\n        } else {\r\n            writeEllipseElement(parent, ellipse);\r\n        }\r\n    } else\r\n        if (f instanceof SVGGroupFigure) {\r\n            writeGElement(parent, ((SVGGroupFigure) (f)));\r\n        } else\r\n            if (f instanceof SVGImageFigure) {\r\n                writeImageElement(parent, ((SVGImageFigure) (f)));\r\n            } else\r\n                if (f instanceof SVGPathFigure) {\r\n                    SVGPathFigure path = ((SVGPathFigure) (f));\r\n                    if ((path.getChildCount()) == 1) {\r\n                        BezierFigure bezier = ((BezierFigure) (path.getChild(0)));\r\n                        boolean isLinear = true;\r\n                        for (int i = 0, n = bezier.getNodeCount(); i < n; i++) {\r\n                            if ((bezier.getNode(i).getMask()) != 0) {\r\n                                isLinear = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isLinear) {\r\n                            if (bezier.isClosed()) {\r\n                                writePolygonElement(parent, path);\r\n                            } else {\r\n                                if ((bezier.getNodeCount()) == 2) {\r\n                                    writeLineElement(parent, path);\r\n                                } else {\r\n                                    writePolylineElement(parent, path);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            writePathElement(parent, path);\r\n                        }\r\n                    } else {\r\n                        writePathElement(parent, path);\r\n                    }\r\n                } else\r\n                    if (f instanceof SVGRectFigure) {\r\n                        writeRectElement(parent, ((SVGRectFigure) (f)));\r\n                    } else\r\n                        if (f instanceof SVGTextFigure) {\r\n                            writeTextElement(parent, ((SVGTextFigure) (f)));\r\n                        } else\r\n                            if (f instanceof SVGTextAreaFigure) {\r\n                                writeTextAreaElement(parent, ((SVGTextAreaFigure) (f)));\r\n                            } else {\r\n                                System.out.println((\"Unable to write: \" + f));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(6048,'writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeEllipseElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    parent.addChild(createEllipse(document, ((f.getX()) + ((f.getWidth()) / 2.0)), ((f.getY()) + ((f.getHeight()) / 2.0)), ((f.getWidth()) / 2.0), ((f.getHeight()) / 2.0), f.getAttributes()));\r\n}'),(6049,'writeFontAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeFontAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/* Writes font attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#Font\n */\r\nprivate void writeFontAttributes(IXMLElement elem, Map<AttributeKey, Object> a) throws IOException {\r\n    String value;\r\n    double doubleValue;\r\n    // font-family\r\n    // Value:  	[[ <family-name> |\r\n    // <generic-family> ],]* [<family-name> |\r\n    // <generic-family>] | inherit\r\n    // Initial:  	depends on user agent\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"font-family\", AttributeKeys.FONT_FACE.get(a).getFontName(), \"Dialog\");\r\n    // font-getChildCount\r\n    // Value:  	<absolute-getChildCount> | <relative-getChildCount> |\r\n    // <length> | inherit\r\n    // Initial:  	medium\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes, the computed value is inherited\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Absolute length\r\n    writeAttribute(elem, \"font-size\", AttributeKeys.FONT_SIZE.get(a), 0.0);\r\n    // font-style\r\n    // Value:  	normal | italic | oblique | inherit\r\n    // Initial:  	normal\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"font-style\", (AttributeKeys.FONT_ITALIC.get(a) ? \"italic\" : \"normal\"), \"normal\");\r\n    // font-variant\r\n    // Value:  	normal | small-caps | inherit\r\n    // Initial:  	normal\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	no\r\n    // Computed value:  	 Specified value, except inherit\r\n    // XXX - Implement me\r\n    writeAttribute(elem, \"font-variant\", \"normal\", \"normal\");\r\n    // font-weight\r\n    // Value:  	normal | bold | bolder | lighter | 100 | 200 | 300\r\n    // | 400 | 500 | 600 | 700 | 800 | 900 | inherit\r\n    // Initial:  	normal\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 one of the legal numeric values, non-numeric\r\n    // values shall be converted to numeric values according to the rules\r\n    // defined below.\r\n    writeAttribute(elem, \"font-weight\", (AttributeKeys.FONT_BOLD.get(a) ? \"bold\" : \"normal\"), \"normal\");\r\n    // Note: text-decoration is an SVG 1.1 feature\r\n    // text-decoration\r\n    // Value:  	none | [ underline || overline || line-through || blink ] | inherit\r\n    // Initial:  	none\r\n    // Applies to:  	text content elements\r\n    // Inherited:  	no (see prose)\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    writeAttribute(elem, \"text-decoration\", (AttributeKeys.FONT_UNDERLINE.get(a) ? \"underline\" : \"none\"), \"none\");\r\n}'),(6050,'writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeGElement(IXMLElement parent, SVGGroupFigure f) throws IOException {\r\n    IXMLElement elem = createG(document, f.getAttributes());\r\n    for (Figure child : f.getChildren()) {\r\n        writeElement(elem, child);\r\n    }\r\n    parent.addChild(elem);\r\n}'),(6051,'writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeImageElement(IXMLElement parent, SVGImageFigure f) throws IOException {\r\n    parent.addChild(createImage(document, f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getImageData(), f.getAttributes()));\r\n}'),(6052,'writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeLineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    BezierFigure bezier = ((BezierFigure) (f.getChild(0)));\r\n    parent.addChild(createLine(document, bezier.getNode(0).x[0], bezier.getNode(0).y[0], bezier.getNode(1).x[0], bezier.getNode(1).y[0], f.getAttributes()));\r\n}'),(6053,'writeOpacityAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeOpacityAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/* Writes the opacity attribute. */\r\nprotected void writeOpacityAttribute(IXMLElement elem, Map<AttributeKey, Object> f) throws IOException {\r\n    // opacity\r\n    // Value:  	<opacity-value> | inherit\r\n    // Initial:  	1\r\n    // Applies to:  	 image element\r\n    // Inherited:  	no\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    // <opacity-value>\r\n    // The uniform opacity setting must be applied across an entire object.\r\n    // Any values outside the range 0.0 (fully transparent) to 1.0\r\n    // (fully opaque) shall be clamped to this range.\r\n    // (See Clamping values which are restricted to a particular range.)\r\n    writeAttribute(elem, \"opacity\", SVGAttributeKeys.OPACITY.get(f), 1.0);\r\n}'),(6054,'writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writePathElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0; i < (beziers.length); i++) {\r\n        beziers[i] = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n    }\r\n    parent.addChild(createPath(document, beziers, f.getAttributes()));\r\n}'),(6055,'writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writePolygonElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    LinkedList<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0, n = f.getChildCount(); i < n; i++) {\r\n        BezierPath bezier = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n        for (BezierPath.Node node : bezier) {\r\n            points.add(new Point2D.Double(node.x[0], node.y[0]));\r\n        }\r\n    }\r\n    parent.addChild(createPolygon(document, points.toArray(new Point2D.Double[points.size()]), f.getAttributes()));\r\n}'),(6056,'writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writePolylineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    LinkedList<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0, n = f.getChildCount(); i < n; i++) {\r\n        BezierPath bezier = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n        for (BezierPath.Node node : bezier) {\r\n            points.add(new Point2D.Double(node.x[0], node.y[0]));\r\n        }\r\n    }\r\n    parent.addChild(createPolyline(document, points.toArray(new Point2D.Double[points.size()]), f.getAttributes()));\r\n}'),(6057,'writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeRectElement(IXMLElement parent, SVGRectFigure f) throws IOException {\r\n    parent.addChild(createRect(document, f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getArcWidth(), f.getArcHeight(), f.getAttributes()));\r\n}'),(6058,'writeShapeAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeShapeAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','// ------------\r\n// Attributes\r\n// ------------\r\n/* Writes shape attributes. */\r\nprotected void writeShapeAttributes(IXMLElement elem, Map<AttributeKey, Object> f) throws IOException {\r\n    Color color;\r\n    String value;\r\n    int intValue;\r\n    // color\r\n    // Value:  	<color> | inherit\r\n    // Initial:  	 depends on user agent\r\n    // Applies to:  	None. Indirectly affects other properties via currentColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified <color> value, except inherit\r\n    // \r\n    // Nothing to do: Attribute color is not needed.\r\n    // color-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 container elements , graphics elements and animateColor\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    // \r\n    // Nothing to do: Attribute color-rendering is not needed.\r\n    // fill\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 black\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value or absolute IRI\r\n    Gradient gradient = SVGAttributeKeys.FILL_GRADIENT.get(f);\r\n    if (gradient != null) {\r\n        String id;\r\n        if (gradientToIDMap.containsKey(gradient)) {\r\n            id = gradientToIDMap.get(gradient);\r\n        } else {\r\n            IXMLElement gradientElem;\r\n            if (gradient instanceof LinearGradient) {\r\n                LinearGradient lg = ((LinearGradient) (gradient));\r\n                gradientElem = createLinearGradient(document, lg.getX1(), lg.getY1(), lg.getX2(), lg.getY2(), lg.getStopOffsets(), lg.getStopColors(), lg.getStopOpacities(), lg.isRelativeToFigureBounds(), lg.getTransform());\r\n            } else {\r\n                RadialGradient rg = ((RadialGradient) (gradient));\r\n                gradientElem = createRadialGradient(document, rg.getCX(), rg.getCY(), rg.getFX(), rg.getFY(), rg.getR(), rg.getStopOffsets(), rg.getStopColors(), rg.getStopOpacities(), rg.isRelativeToFigureBounds(), rg.getTransform());\r\n            }\r\n            id = getId(gradientElem);\r\n            gradientElem.setAttribute(\"id\", \"xml\", id);\r\n            defs.addChild(gradientElem);\r\n            gradientToIDMap.put(gradient, id);\r\n        }\r\n        writeAttribute(elem, \"fill\", ((\"url(#\" + id) + \")\"), \"#000\");\r\n    } else {\r\n        writeAttribute(elem, \"fill\", SVGOutputFormat.toColor(AttributeKeys.FILL_COLOR.get(f)), \"#000\");\r\n    }\r\n    // fill-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"fill-opacity\", SVGAttributeKeys.FILL_OPACITY.get(f), 1.0);\r\n    // fill-rule\r\n    // Value:	 nonzero | evenodd | inherit\r\n    // Initial: 	 nonzero\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    if ((AttributeKeys.WINDING_RULE.get(f)) != (AttributeKeys.WindingRule.NON_ZERO)) {\r\n        writeAttribute(elem, \"fill-rule\", \"evenodd\", \"nonzero\");\r\n    }\r\n    // stroke\r\n    // Value:  	<paint> | inherit (See Specifying paint)\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 \"none\", system paint, specified <color> value\r\n    // or absolute IRI\r\n    gradient = SVGAttributeKeys.STROKE_GRADIENT.get(f);\r\n    if (gradient != null) {\r\n        String id;\r\n        if (gradientToIDMap.containsKey(gradient)) {\r\n            id = gradientToIDMap.get(gradient);\r\n        } else {\r\n            IXMLElement gradientElem;\r\n            if (gradient instanceof LinearGradient) {\r\n                LinearGradient lg = ((LinearGradient) (gradient));\r\n                gradientElem = createLinearGradient(document, lg.getX1(), lg.getY1(), lg.getX2(), lg.getY2(), lg.getStopOffsets(), lg.getStopColors(), lg.getStopOpacities(), lg.isRelativeToFigureBounds(), lg.getTransform());\r\n            } else {\r\n                RadialGradient rg = ((RadialGradient) (gradient));\r\n                gradientElem = createRadialGradient(document, rg.getCX(), rg.getCY(), rg.getFX(), rg.getFY(), rg.getR(), rg.getStopOffsets(), rg.getStopColors(), rg.getStopOpacities(), rg.isRelativeToFigureBounds(), rg.getTransform());\r\n            }\r\n            id = getId(gradientElem);\r\n            gradientElem.setAttribute(\"id\", \"xml\", id);\r\n            defs.addChild(gradientElem);\r\n            gradientToIDMap.put(gradient, id);\r\n        }\r\n        writeAttribute(elem, \"stroke\", ((\"url(#\" + id) + \")\"), \"none\");\r\n    } else {\r\n        writeAttribute(elem, \"stroke\", SVGOutputFormat.toColor(AttributeKeys.STROKE_COLOR.get(f)), \"none\");\r\n    }\r\n    // stroke-dasharray\r\n    // Value:  	 none | <dasharray> | inherit\r\n    // Initial:  	 none\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes (non-additive)\r\n    // Computed value:  	 Specified value, except inherit\r\n    double[] dashes = AttributeKeys.STROKE_DASHES.get(f);\r\n    if (dashes != null) {\r\n        StringBuilder buf = new StringBuilder();\r\n        for (int i = 0; i < (dashes.length); i++) {\r\n            if (i != 0) {\r\n                buf.append(,);\r\n            }\r\n            buf.append(SVGOutputFormat.toNumber(dashes[i]));\r\n        }\r\n        writeAttribute(elem, \"stroke-dasharray\", buf.toString(), null);\r\n    }\r\n    // stroke-dashoffset\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 0\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"stroke-dashoffset\", AttributeKeys.STROKE_DASH_PHASE.get(f), 0.0);\r\n    // stroke-linecap\r\n    // Value:  	 butt | round | square | inherit\r\n    // Initial:  	 butt\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"stroke-linecap\", SVGOutputFormat.strokeLinecapMap.get(AttributeKeys.STROKE_CAP.get(f)), \"butt\");\r\n    // stroke-linejoin\r\n    // Value:  	 miter | round | bevel | inherit\r\n    // Initial:  	 miter\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"stroke-linejoin\", SVGOutputFormat.strokeLinejoinMap.get(AttributeKeys.STROKE_JOIN.get(f)), \"miter\");\r\n    // stroke-miterlimit\r\n    // Value:  	 <miterlimit> | inherit\r\n    // Initial:  	 4\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"stroke-miterlimit\", AttributeKeys.STROKE_MITER_LIMIT.get(f), 4.0);\r\n    // stroke-opacity\r\n    // Value:  	 <opacity-value> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"stroke-opacity\", SVGAttributeKeys.STROKE_OPACITY.get(f), 1.0);\r\n    // stroke-width\r\n    // Value:  	<length> | inherit\r\n    // Initial:  	 1\r\n    // Applies to:  	 shapes and text content elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"stroke-width\", AttributeKeys.STROKE_WIDTH.get(f), 1.0);\r\n}'),(6059,'writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeTextAreaElement(IXMLElement parent, SVGTextAreaFigure f) throws IOException {\r\n    DefaultStyledDocument styledDoc = new DefaultStyledDocument();\r\n    try {\r\n        styledDoc.insertString(0, f.getText(), null);\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    Rectangle2D.Double bounds = f.getBounds();\r\n    parent.addChild(createTextArea(document, bounds.x, bounds.y, bounds.width, bounds.height, styledDoc, f.getAttributes()));\r\n}'),(6060,'writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','protected void writeTextElement(IXMLElement parent, SVGTextFigure f) throws IOException {\r\n    DefaultStyledDocument styledDoc = new DefaultStyledDocument();\r\n    try {\r\n        styledDoc.insertString(0, f.getText(), null);\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    parent.addChild(createText(document, f.getCoordinates(), f.getRotates(), styledDoc, f.getAttributes()));\r\n}'),(6061,'writeTransformAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTransformAttribute(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/* Writes the transform attribute as specified in\nhttp://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute\n */\r\nprotected void writeTransformAttribute(IXMLElement elem, Map<AttributeKey, Object> a) throws IOException {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.get(a);\r\n    if (t != null) {\r\n        writeAttribute(elem, \"transform\", SVGOutputFormat.toTransform(t), \"none\");\r\n    }\r\n}'),(6062,'writeViewportAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','org.jhotdraw.samples.svg.io.SVGOutputFormat.writeViewportAttributes(org.jhotdraw.samples.svg.io.IXMLElement,java.util.Map)','613','org.jhotdraw.samples.svg.io.SVGOutputFormat','/* Writes viewport attributes. */\r\nprivate void writeViewportAttributes(IXMLElement elem, Map<AttributeKey, Object> a) throws IOException {\r\n    Object value;\r\n    Double doubleValue;\r\n    if (((SVGAttributeKeys.VIEWPORT_WIDTH.get(a)) != null) && ((SVGAttributeKeys.VIEWPORT_HEIGHT.get(a)) != null)) {\r\n        // width of the viewport\r\n        writeAttribute(elem, \"width\", SVGOutputFormat.toNumber(SVGAttributeKeys.VIEWPORT_WIDTH.get(a)), null);\r\n        // height of the viewport\r\n        writeAttribute(elem, \"height\", SVGOutputFormat.toNumber(SVGAttributeKeys.VIEWPORT_HEIGHT.get(a)), null);\r\n    }\r\n    // viewport-fill\r\n    // Value:	 \"none\" | <color> | inherit\r\n    // Initial:	 none\r\n    // Applies to:	viewport-creating elements\r\n    // Inherited:	 no\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    // Computed value:  	 \"none\" or specified <color> value, except inherit\r\n    writeAttribute(elem, \"viewport-fill\", SVGOutputFormat.toColor(SVGAttributeKeys.VIEWPORT_FILL.get(a)), \"none\");\r\n    // viewport-fill-opacity\r\n    // Value:	<opacity-value> | inherit\r\n    // Initial:	 1.0\r\n    // Applies to:	viewport-creating elements\r\n    // Inherited:	 no\r\n    // Percentages:	 N/A\r\n    // Media:	 visual\r\n    // Animatable:	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    writeAttribute(elem, \"viewport-fill-opacity\", SVGAttributeKeys.VIEWPORT_FILL_OPACITY.get(a), 1.0);\r\n}'),(6063,'-init-()','org.jhotdraw.samples.svg.io.SVGZInputFormat.-init-()','614','org.jhotdraw.samples.svg.io.SVGZInputFormat','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGZInputFormat() {\r\n}'),(6064,'getFileFilter()','org.jhotdraw.samples.svg.io.SVGZInputFormat.getFileFilter()','614','org.jhotdraw.samples.svg.io.SVGZInputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(\"Scalable Vector Graphics (SVG, SVGZ)\", new String[]{ \"svg\", \"svgz\" });\r\n}'),(6065,'read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','org.jhotdraw.samples.svg.io.SVGZInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)','614','org.jhotdraw.samples.svg.io.SVGZInputFormat','@Override\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream bin = (in instanceof BufferedInputStream) ? ((BufferedInputStream) (in)) : new BufferedInputStream(in);\r\n    bin.mark(2);\r\n    int magic = ((bin.read()) & 255) | (((bin.read()) & 255) << 8);\r\n    bin.reset();\r\n    if (magic == (GZIPInputStream.GZIP_MAGIC)) {\r\n        super.read(new GZIPInputStream(bin), drawing, replace);\r\n    } else {\r\n        super.read(bin, drawing, replace);\r\n    }\r\n}'),(6066,'-init-()','org.jhotdraw.samples.svg.io.SVGZOutputFormat.-init-()','615','org.jhotdraw.samples.svg.io.SVGZOutputFormat','/**\r\n * Creates a new instance.\r\n */\r\npublic SVGZOutputFormat() {\r\n}'),(6067,'getFileExtension()','org.jhotdraw.samples.svg.io.SVGZOutputFormat.getFileExtension()','615','org.jhotdraw.samples.svg.io.SVGZOutputFormat','public String getFileExtension() {\r\n    return \"svgz\";\r\n}'),(6068,'getFileFilter()','org.jhotdraw.samples.svg.io.SVGZOutputFormat.getFileFilter()','615','org.jhotdraw.samples.svg.io.SVGZOutputFormat','public FileFilter getFileFilter() {\r\n    return new ExtensionFileFilter(\"Compressed Scalable Vector Graphics (SVGZ)\", \"svgz\");\r\n}'),(6069,'write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','org.jhotdraw.samples.svg.io.SVGZOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)','615','org.jhotdraw.samples.svg.io.SVGZOutputFormat','@Override\r\npublic void write(OutputStream out, Drawing drawing) throws IOException {\r\n    GZIPOutputStream gout = new GZIPOutputStream(out);\r\n    super.write(gout, drawing, drawing.getChildren());\r\n    gout.finish();\r\n}'),(6070,'-init-()','org.jhotdraw.samples.teddy.CharacterSetAccessory.-init-()','616','org.jhotdraw.samples.teddy.CharacterSetAccessory','/**\r\n * Creates a new instance.\r\n */\r\npublic CharacterSetAccessory() {\r\n    if (UIManager.getLookAndFeel().getID().toLowerCase().equals(\"aqua\")) {\r\n        initComponents();\r\n    } else {\r\n        initComponentsWin();\r\n    }\r\n    String selectedItem = CharacterSetAccessory.prefs.get(\"characterSet\", \"UTF-8\");\r\n    charSetCombo.setModel(new DefaultComboBoxModel(new String[]{ selectedItem }));\r\n    charSetCombo.setSelectedItem(selectedItem);\r\n    charSetCombo.setEnabled(false);\r\n    fetchAvailableCharSets();\r\n    String lineSeparator = CharacterSetAccessory.prefs.get(\"lineSeparator\", \"\n\");\r\n    if (lineSeparator.equals(\"\r\")) {\r\n        lineSepCombo.setSelectedIndex(0);\r\n    } else\r\n        if (lineSeparator.equals(\"\n\")) {\r\n            lineSepCombo.setSelectedIndex(1);\r\n        } else\r\n            if (lineSeparator.equals(\"\r\n\")) {\r\n                lineSepCombo.setSelectedIndex(2);\r\n            }\r\n\r\n\r\n}'),(6071,'fetchAvailableCharSets()','org.jhotdraw.samples.teddy.CharacterSetAccessory.fetchAvailableCharSets()','616','org.jhotdraw.samples.teddy.CharacterSetAccessory','public void fetchAvailableCharSets() {\r\n    if ((CharacterSetAccessory.availableCharSets) == null) {\r\n        new Worker() {\r\n            public Object construct() {\r\n                SortedMap<String, Charset> sm = Charset.availableCharsets();\r\n                LinkedList<String> list = new LinkedList<String>();\r\n                for (String key : sm.keySet()) {\r\n                    if (!(key.startsWith(\"x-\"))) {\r\n                        list.add(key);\r\n                    }\r\n                }\r\n                CharacterSetAccessory.availableCharSets = list.toArray();\r\n                Arrays.sort(CharacterSetAccessory.availableCharSets);\r\n                return null;\r\n            }\r\n\r\n            public void finished(Object value) {\r\n                Object selectedItem = charSetCombo.getSelectedItem();\r\n                charSetCombo.setModel(new DefaultComboBoxModel(CharacterSetAccessory.availableCharSets));\r\n                charSetCombo.setSelectedItem(selectedItem);\r\n                charSetCombo.setEnabled(true);\r\n            }\r\n        }.start();\r\n    } else {\r\n        Object selectedItem = charSetCombo.getSelectedItem();\r\n        charSetCombo.setModel(new DefaultComboBoxModel(CharacterSetAccessory.availableCharSets));\r\n        charSetCombo.setSelectedItem(selectedItem);\r\n        charSetCombo.setEnabled(true);\r\n    }\r\n}'),(6072,'getCharacterSet()','org.jhotdraw.samples.teddy.CharacterSetAccessory.getCharacterSet()','616','org.jhotdraw.samples.teddy.CharacterSetAccessory','public String getCharacterSet() {\r\n    CharacterSetAccessory.prefs.put(\"characterSet\", ((String) (charSetCombo.getSelectedItem())));\r\n    return ((String) (charSetCombo.getSelectedItem()));\r\n}'),(6073,'getLineSeparator()','org.jhotdraw.samples.teddy.CharacterSetAccessory.getLineSeparator()','616','org.jhotdraw.samples.teddy.CharacterSetAccessory','public String getLineSeparator() {\r\n    String lineSeparator;\r\n    switch (charSetCombo.getSelectedIndex()) {\r\n        case 0 :\r\n        default :\r\n            lineSeparator = \"\n\";\r\n            break;\r\n        case 1 :\r\n            lineSeparator = \"\r\";\r\n            break;\r\n        case 2 :\r\n            lineSeparator = \"\r\n\";\r\n            break;\r\n    }\r\n    CharacterSetAccessory.prefs.put(\"lineSeparator\", lineSeparator);\r\n    return lineSeparator;\r\n}'),(6074,'initComponents()','org.jhotdraw.samples.teddy.CharacterSetAccessory.initComponents()','616','org.jhotdraw.samples.teddy.CharacterSetAccessory','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    charSetLabel = new JLabel();\r\n    charSetCombo = new JComboBox();\r\n    lineSepLabel = new JLabel();\r\n    lineSepCombo = new JComboBox();\r\n    setBorder(BorderFactory.createTitledBorder(\"\"));\r\n    charSetLabel.setText(\"Character Set:\");\r\n    charSetCombo.setModel(new DefaultComboBoxModel(new String[]{ \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\r\n    lineSepLabel.setText(\"Line Separator:\");\r\n    lineSepCombo.setModel(new DefaultComboBoxModel(new String[]{ \"CR\", \"LF\", \"CR LF\" }));\r\n    GroupLayout layout = new GroupLayout(this);\r\n    this.setLayout(layout);\r\n    layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(layout.createSequentialGroup().add(charSetLabel).addPreferredGap(RELATED).add(charSetCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).addPreferredGap(UNRELATED).add(lineSepLabel).addPreferredGap(RELATED).add(lineSepCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)));\r\n    layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(charSetLabel).add(charSetCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).add(lineSepLabel).add(lineSepCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout));\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(6075,'initComponentsWin()','org.jhotdraw.samples.teddy.CharacterSetAccessory.initComponentsWin()','616','org.jhotdraw.samples.teddy.CharacterSetAccessory','private void initComponentsWin() {\r\n    charSetLabel = new JLabel();\r\n    charSetCombo = new JComboBox();\r\n    lineSepLabel = new JLabel();\r\n    lineSepCombo = new JComboBox();\r\n    setBorder(BorderFactory.createTitledBorder(\"\"));\r\n    charSetLabel.setText(\"Character Set:\");\r\n    charSetCombo.setModel(new DefaultComboBoxModel(new String[]{ \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\r\n    lineSepLabel.setText(\"Line Separator:\");\r\n    lineSepCombo.setModel(new DefaultComboBoxModel(new String[]{ \"CR\", \"LF\", \"CR LF\" }));\r\n    GroupLayout layout = new GroupLayout(this);\r\n    this.setLayout(layout);\r\n    layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(charSetLabel).add(charSetCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).add(lineSepLabel).add(lineSepCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout));\r\n    layout.setVerticalGroup(layout.createSequentialGroup().add(charSetLabel).add(charSetCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).addPreferredGap(UNRELATED).add(lineSepLabel).add(lineSepCombo, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout));\r\n}'),(6076,'-init-(java.awt.Frame,boolean)','org.jhotdraw.samples.teddy.FindDialog.-init-(java.awt.Frame,boolean)','617','org.jhotdraw.samples.teddy.FindDialog','/**\r\n * Creates new form FindDialog\r\n */\r\nprivate FindDialog(Frame parent, boolean modal) {\r\n    super(parent, modal);\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.teddy.Labels\");\r\n    initComponents();\r\n    buttonPanel.setBorder(new EmptyBorder(0, (-5), 0, (-5)));\r\n    setAlwaysOnTop(true);\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    PreferencesUtil.installFramePrefsHandler(prefs, \"find\", this);\r\n    modeCombo.setModel(new DefaultComboBoxModel(new Object[]{ labels.getString(\"find.contains.text\"), labels.getString(\"find.startsWith.text\"), labels.getString(\"find.word.text\") }));\r\n    ignoreCaseCheck.setSelected(prefs.getBoolean(\"find.ignoreCase\", true));\r\n    wrapAroundCheck.setSelected(prefs.getBoolean(\"find.wrapAround\", true));\r\n    modeCombo.setSelectedIndex(Math.min(0, Math.max(((modeCombo.getModel().getSize()) - 1), prefs.getInt(\"find.mode\", 0))));\r\n    getRootPane().setDefaultButton(nextButton);\r\n    InputMap im = new InputMap();\r\n    LookAndFeel.loadKeyBindings(im, new String[]{ \"shift ENTER\", DefaultEditorKit.insertBreakAction, \"alt ENTER\", DefaultEditorKit.insertBreakAction, \"ENTER\", JTextField.notifyAction });\r\n    im.setParent(findField.getInputMap(JComponent.WHEN_FOCUSED));\r\n    findField.setInputMap(JComponent.WHEN_FOCUSED, im);\r\n    im = new InputMap();\r\n    LookAndFeel.loadKeyBindings(im, new String[]{ \"shift ENTER\", DefaultEditorKit.insertBreakAction, \"alt ENTER\", DefaultEditorKit.insertBreakAction, \"ENTER\", JTextField.notifyAction });\r\n    im.setParent(replaceField.getInputMap(JComponent.WHEN_FOCUSED));\r\n    replaceField.setInputMap(JComponent.WHEN_FOCUSED, im);\r\n    pack();\r\n}'),(6077,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.teddy.FindDialog.-init-(org.jhotdraw.app.Application)','617','org.jhotdraw.samples.teddy.FindDialog','/**\r\n * Creates new form FindDialog\r\n */\r\npublic FindDialog(Application app) {\r\n    this(null, false);\r\n    this.app = app;\r\n}'),(6078,'-init-()','org.jhotdraw.samples.teddy.FindDialog.-init-()','617','org.jhotdraw.samples.teddy.FindDialog','1() {\r\n}'),(6079,'ignoreCasePerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.ignoreCasePerformed(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void ignoreCasePerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_ignoreCasePerformed\r\n    if ((prefs) != null) {\r\n        prefs.putBoolean(\"find.ignoreCase\", ignoreCaseCheck.isSelected());\r\n    }\r\n}// GEN-LAST:event_ignoreCasePerformed\r\n'),(6080,'initComponents()','org.jhotdraw.samples.teddy.FindDialog.initComponents()','617','org.jhotdraw.samples.teddy.FindDialog','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    GridBagConstraints gridBagConstraints;\r\n    findLabel = new JLabel();\r\n    replaceLabel = new JLabel();\r\n    buttonPanel = new JPanel();\r\n    replaceAllButton = new JButton();\r\n    replaceButton = new JButton();\r\n    replaceAndFindButton = new JButton();\r\n    previousButton = new JButton();\r\n    nextButton = new JButton();\r\n    optionsPanel = new JPanel();\r\n    ignoreCaseCheck = new JCheckBox();\r\n    wrapAroundCheck = new JCheckBox();\r\n    modeCombo = new JComboBox();\r\n    findScrollPane = new JScrollPane();\r\n    findField = new JTextArea();\r\n    replaceScrollPane = new JScrollPane();\r\n    replaceField = new JTextArea();\r\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    setTitle(\"Find\");\r\n    findLabel.setText(labels.getString(\"find.findLabel.text\"));// NOI18N\r\n\r\n    replaceLabel.setText(labels.getString(\"find.replaceWithLabel.text\"));// NOI18N\r\n\r\n    buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 0));\r\n    replaceAllButton.setText(labels.getString(\"find.replaceAll.text\"));// NOI18N\r\n\r\n    replaceAllButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            replaceAll(evt);\r\n        }\r\n    });\r\n    buttonPanel.add(replaceAllButton);\r\n    replaceButton.setText(labels.getString(\"find.replace.text\"));// NOI18N\r\n\r\n    replaceButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            replace(evt);\r\n        }\r\n    });\r\n    buttonPanel.add(replaceButton);\r\n    replaceAndFindButton.setText(labels.getString(\"find.replaceAndFind.text\"));// NOI18N\r\n\r\n    replaceAndFindButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            replaceAndFind(evt);\r\n        }\r\n    });\r\n    buttonPanel.add(replaceAndFindButton);\r\n    previousButton.setText(labels.getString(\"find.previous.text\"));// NOI18N\r\n\r\n    previousButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            previous(evt);\r\n        }\r\n    });\r\n    buttonPanel.add(previousButton);\r\n    nextButton.setText(labels.getString(\"find.next.text\"));// NOI18N\r\n\r\n    nextButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            next(evt);\r\n        }\r\n    });\r\n    buttonPanel.add(nextButton);\r\n    optionsPanel.setLayout(new GridBagLayout());\r\n    ignoreCaseCheck.setText(labels.getString(\"find.ignoreCase.text\"));// NOI18N\r\n\r\n    ignoreCaseCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            ignoreCasePerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.anchor = GridBagConstraints.EAST;\r\n    gridBagConstraints.weightx = 1.0;\r\n    optionsPanel.add(ignoreCaseCheck, gridBagConstraints);\r\n    wrapAroundCheck.setText(labels.getString(\"find.wrapAround.text\"));// NOI18N\r\n\r\n    wrapAroundCheck.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            wrapAroundPerformed(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.insets = new Insets(0, 10, 0, 0);\r\n    optionsPanel.add(wrapAroundCheck, gridBagConstraints);\r\n    modeCombo.setModel(new DefaultComboBoxModel(new String[]{ \"Contains\", \"Starts with\", \"Word\" }));\r\n    modeCombo.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent evt) {\r\n            modeChanged(evt);\r\n        }\r\n    });\r\n    gridBagConstraints = new GridBagConstraints();\r\n    gridBagConstraints.insets = new Insets(0, 10, 0, 0);\r\n    optionsPanel.add(modeCombo, gridBagConstraints);\r\n    findField.setLineWrap(true);\r\n    findField.setRows(2);\r\n    findScrollPane.setViewportView(findField);\r\n    replaceField.setLineWrap(true);\r\n    replaceField.setRows(2);\r\n    replaceScrollPane.setViewportView(replaceField);\r\n    GroupLayout layout = new GroupLayout(getContentPane());\r\n    getContentPane().setLayout(layout);\r\n    layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(layout.createSequentialGroup().addContainerGap().add(buttonPanel, org.jdesktop.layout.GroupLayout, 684, Short.MAX_VALUE)).add(layout.createSequentialGroup().add(11, 11, 11).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(replaceLabel).add(findLabel)).addPreferredGap(RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(optionsPanel, org.jdesktop.layout.GroupLayout, 600, Short.MAX_VALUE).add(replaceScrollPane).add(findScrollPane)))).addContainerGap()));\r\n    layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(findLabel).add(findScrollPane, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)).addPreferredGap(RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout).add(replaceLabel).add(replaceScrollPane, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout)).addPreferredGap(RELATED).add(optionsPanel, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).add(14, 14, 14).add(buttonPanel, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout, org.jdesktop.layout.GroupLayout).addContainerGap(30, Short.MAX_VALUE)));\r\n    pack();\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(6081,'modeChanged(java.awt.event.ItemEvent)','org.jhotdraw.samples.teddy.FindDialog.modeChanged(java.awt.event.ItemEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void modeChanged(ItemEvent evt) {\r\n    // GEN-FIRST:event_modeChanged\r\n    if ((prefs) != null) {\r\n        prefs.putInt(\"find.mode\", modeCombo.getSelectedIndex());\r\n    }\r\n}// GEN-LAST:event_modeChanged\r\n'),(6082,'next(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.next(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void next(ActionEvent evt) {\r\n    // GEN-FIRST:event_next\r\n    TeddyView view = ((TeddyView) (app.getActiveView()));\r\n    if (view != null) {\r\n        updateMatcher();\r\n        if ((matcher) != null) {\r\n            int pos = matcher.findNext(view.getSelectionEnd());\r\n            if ((pos == (-1)) && (wrapAroundCheck.isSelected())) {\r\n                pos = matcher.findNext(0);\r\n            }\r\n            if (pos == (-1)) {\r\n                getToolkit().beep();\r\n            } else {\r\n                view.select(pos, ((matcher.getFindString().length()) + pos));\r\n            }\r\n        }\r\n    }\r\n}// GEN-LAST:event_next\r\n'),(6083,'previous(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.previous(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void previous(ActionEvent evt) {\r\n    // GEN-FIRST:event_previous\r\n    TeddyView view = ((TeddyView) (app.getActiveView()));\r\n    if (view != null) {\r\n        updateMatcher();\r\n        if ((matcher) != null) {\r\n            matcher.setStartIndex(((view.getSelectionStart()) - 1));\r\n            int pos = matcher.findPrevious();\r\n            if ((pos == (-1)) && (wrapAroundCheck.isSelected())) {\r\n                pos = matcher.findPrevious(view.getDocument().getLength());\r\n            }\r\n            if (pos == (-1)) {\r\n                getToolkit().beep();\r\n            } else {\r\n                view.select(pos, ((matcher.getFindString().length()) + pos));\r\n            }\r\n        }\r\n    }\r\n}// GEN-LAST:event_previous\r\n'),(6084,'replace(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.replace(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void replace(ActionEvent evt) {\r\n    // GEN-FIRST:event_replace\r\n    TeddyView view = ((TeddyView) (app.getActiveView()));\r\n    if (view != null) {\r\n        CompositeEdit edit = new CompositeEdit(\"Replace\");\r\n        view.fireEdit(edit);\r\n        view.replaceRange(replaceField.getText(), view.getSelectionStart(), view.getSelectionEnd());\r\n        view.fireEdit(edit);\r\n    }\r\n}// GEN-LAST:event_replace\r\n'),(6085,'replaceAll(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.replaceAll(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void replaceAll(ActionEvent evt) {\r\n    // GEN-FIRST:event_replaceAll\r\n    TeddyView view = ((TeddyView) (app.getActiveView()));\r\n    if (view != null) {\r\n        updateMatcher();\r\n        if ((matcher) != null) {\r\n            int pos = matcher.findNext((wrapAroundCheck.isSelected() ? 0 : view.getSelectionEnd()));\r\n            if (pos == (-1)) {\r\n                getToolkit().beep();\r\n            } else {\r\n                CompositeEdit edit = new CompositeEdit(\"Replace All\");\r\n                view.fireEdit(edit);\r\n                view.select(pos, ((matcher.getFindString().length()) + pos));\r\n                do {\r\n                    view.replaceRange(replaceField.getText(), pos, (pos + (matcher.getFindString().length())));\r\n                    pos = matcher.findNext((pos + (replaceField.getText().length())));\r\n                } while (pos != (-1) );\r\n                view.fireEdit(edit);\r\n            }\r\n        }\r\n    }\r\n}// GEN-LAST:event_replaceAll\r\n'),(6086,'replaceAndFind(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.replaceAndFind(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void replaceAndFind(ActionEvent evt) {\r\n    // GEN-FIRST:event_replaceAndFind\r\n    TeddyView view = ((TeddyView) (app.getActiveView()));\r\n    if (view != null) {\r\n        CompositeEdit edit = new CompositeEdit(\"Replace And Find\");\r\n        view.fireEdit(edit);\r\n        view.replaceRange(replaceField.getText(), view.getSelectionStart(), view.getSelectionEnd());\r\n        next(evt);\r\n        view.fireEdit(edit);\r\n    }\r\n}// GEN-LAST:event_replaceAndFind\r\n'),(6087,'updateMatcher()','org.jhotdraw.samples.teddy.FindDialog.updateMatcher()','617','org.jhotdraw.samples.teddy.FindDialog','private void updateMatcher() {\r\n    TeddyView view = ((TeddyView) (app.getActiveView()));\r\n    if (view != null) {\r\n        MatchType matchType;\r\n        switch (modeCombo.getSelectedIndex()) {\r\n            case 0 :\r\n                matchType = MatchType.CONTAINS;\r\n                break;\r\n            case 1 :\r\n                matchType = MatchType.STARTS_WITH;\r\n                break;\r\n            case 2 :\r\n            default :\r\n                matchType = MatchType.FULL_WORD;\r\n                break;\r\n        }\r\n        matcher = new Matcher(view.getDocument(), findField.getText(), (!(ignoreCaseCheck.isSelected())), matchType);\r\n    } else {\r\n        matcher = null;\r\n    }\r\n}'),(6088,'wrapAroundPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.FindDialog.wrapAroundPerformed(java.awt.event.ActionEvent)','617','org.jhotdraw.samples.teddy.FindDialog','private void wrapAroundPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_wrapAroundPerformed\r\n    if ((prefs) != null) {\r\n        prefs.putBoolean(\"find.wrapAround\", wrapAroundCheck.isSelected());\r\n    }\r\n}// GEN-LAST:event_wrapAroundPerformed\r\n'),(6089,'-init-()','org.jhotdraw.samples.teddy.JEditorArea.-init-()','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Creates a new instance.\r\n */\r\npublic JEditorArea() {\r\n    setEditorKit(new StyledEditorKit());\r\n    initComponents();\r\n}'),(6090,'getLineOfOffset(int)','org.jhotdraw.samples.teddy.JEditorArea.getLineOfOffset(int)','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Translates an offset into the components text to a\r\n * line number.\r\n *\r\n * @param offset\r\n * 		the offset >= 0\r\n * @return the line number >= 0\r\n * @exception BadLocationException thrown if the offset is\r\nless than zero or greater than the document length.\r\n */\r\npublic int getLineOfOffset(int offset) throws BadLocationException {\r\n    Document doc = getDocument();\r\n    if (offset < 0) {\r\n        throw new BadLocationException(\"Cant translate offset to line\", (-1));\r\n    } else\r\n        if (offset > (doc.getLength())) {\r\n            throw new BadLocationException(\"Cant translate offset to line\", ((doc.getLength()) + 1));\r\n        } else {\r\n            Element map = getDocument().getDefaultRootElement();\r\n            return map.getElementIndex(offset);\r\n        }\r\n\r\n}'),(6091,'getLineStartOffset(int)','org.jhotdraw.samples.teddy.JEditorArea.getLineStartOffset(int)','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Determines the offset of the start of the given line.\r\n *\r\n * @param line\r\n * 		the line number to translate >= 0\r\n * @return the offset >= 0\r\n * @exception BadLocationException thrown if the line is\r\nless than zero or greater or equal to the number of\r\nlines contained in the document (as reported by\r\ngetLineCount).\r\n */\r\npublic int getLineStartOffset(int line) throws BadLocationException {\r\n    Document doc = getDocument();\r\n    Element map = doc.getDefaultRootElement();\r\n    int lineCount = map.getElementCount();\r\n    // int lineCount = getLineCount();\r\n    if (line < 0) {\r\n        throw new BadLocationException(\"Negative line\", (-1));\r\n    } else\r\n        if (line >= lineCount) {\r\n            throw new BadLocationException(\"No such line\", ((doc.getLength()) + 1));\r\n        } else {\r\n            Element lineElem = map.getElement(line);\r\n            return lineElem.getStartOffset();\r\n        }\r\n\r\n}'),(6092,'getLineWrap()','org.jhotdraw.samples.teddy.JEditorArea.getLineWrap()','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Gets the line-wrapping policy of the text area.  If set\r\n * to true the lines will be wrapped if they are too long\r\n * to fit within the allocated width.  If set to false,\r\n * the lines will always be unwrapped.\r\n *\r\n * @return if lines will be wrapped\r\n */\r\npublic boolean getLineWrap() {\r\n    return wrap;\r\n}'),(6093,'getScrollableTracksViewportWidth()','org.jhotdraw.samples.teddy.JEditorArea.getScrollableTracksViewportWidth()','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Returns true if a viewport should always force the width of this\r\n * Scrollable to match the width of the viewport.  This is implemented\r\n * to return true if the line wrapping policy is true, and false\r\n * if lines are not being wrapped.\r\n *\r\n * @return true if a viewport should force the Scrollables width\r\nto match its own.\r\n */\r\npublic boolean getScrollableTracksViewportWidth() {\r\n    return wrap;\r\n}'),(6094,'getStyledEditorKit()','org.jhotdraw.samples.teddy.JEditorArea.getStyledEditorKit()','618','org.jhotdraw.samples.teddy.JEditorArea','public StyledEditorKit getStyledEditorKit() {\r\n    return ((StyledEditorKit) (getEditorKit()));\r\n}'),(6095,'initComponents()','org.jhotdraw.samples.teddy.JEditorArea.initComponents()','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n}'),(6096,'rebuildView()','org.jhotdraw.samples.teddy.JEditorArea.rebuildView()','618','org.jhotdraw.samples.teddy.JEditorArea','public void rebuildView() {\r\n    revalidate();\r\n    repaint();\r\n}'),(6097,'replaceRange(java.lang.String,int,int)','org.jhotdraw.samples.teddy.JEditorArea.replaceRange(java.lang.String,int,int)','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Replaces text from the indicated start to end position with the\r\n * new text specified.  Does nothing if the model is null.  Simply\r\n * does a delete if the new string is null or empty.\r\n * <p>\r\n * This method is thread safe, although most Swing methods\r\n * are not. Please see\r\n * <A HREF=\"http://java.sun.com/products/jfc/swingdoc-archive/threads.html\">Threads\r\n * and Swing</A> for more information.\r\n *\r\n * @param str\r\n * 		the text to use as the replacement\r\n * @param start\r\n * 		the start position >= 0\r\n * @param end\r\n * 		the end position >= start\r\n * @exception IllegalArgumentException  if part of the range is an\r\ninvalid position in the model\r\n */\r\npublic void replaceRange(String str, int start, int end) {\r\n    if (end < start) {\r\n        throw new IllegalArgumentException(\"end before start\");\r\n    }\r\n    Document doc = getDocument();\r\n    if (doc != null) {\r\n        try {\r\n            if (doc instanceof AbstractDocument) {\r\n                ((AbstractDocument) (doc)).replace(start, (end - start), str, null);\r\n            } else {\r\n                doc.remove(start, (end - start));\r\n                doc.insertString(start, str, null);\r\n            }\r\n        } catch (BadLocationException e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n}'),(6098,'setLineWrap(boolean)','org.jhotdraw.samples.teddy.JEditorArea.setLineWrap(boolean)','618','org.jhotdraw.samples.teddy.JEditorArea','/**\r\n * Sets the line-wrapping policy of the text area.  If set\r\n * to true the lines will be wrapped if they are too long\r\n * to fit within the allocated width.  If set to false,\r\n * the lines will always be unwrapped.  A <code>PropertyChange</code>\r\n * event (\"lineWrap\") is fired when the policy is changed.\r\n * By default this property is false.\r\n *\r\n * @param newValue\r\n * 		indicates if lines should be wrapped\r\n * @see #getLineWrap\r\n */\r\npublic void setLineWrap(boolean newValue) {\r\n    boolean oldValue = wrap;\r\n    if (oldValue != newValue) {\r\n        this.wrap = newValue;\r\n        firePropertyChange(\"lineWrap\", oldValue, newValue);\r\n        rebuildView();\r\n    }\r\n}'),(6099,'-init-()','org.jhotdraw.samples.teddy.Main.-init-()','619','org.jhotdraw.samples.teddy.Main','Main() {\r\n}'),(6100,'main(java.lang.String[])','org.jhotdraw.samples.teddy.Main.main(java.lang.String[])','619','org.jhotdraw.samples.teddy.Main','/**\r\n * Launches the application.\r\n *\r\n * @param args\r\n * 		the command line arguments\r\n */\r\npublic static void main(String[] args) {\r\n    TeddyApplicationModel tam = new TeddyApplicationModel();\r\n    tam.setCopyright(Main.COPYRIGHT);\r\n    tam.setName(Main.NAME);\r\n    tam.setViewClassName(\"org.jhotdraw.samples.teddy.TeddyView\");\r\n    tam.setVersion(Main.class.getPackage().getImplementationVersion());\r\n    Application app;\r\n    if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"mac os x\")) {\r\n        app = new DefaultOSXApplication();\r\n    } else\r\n        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {\r\n            app = new DefaultMDIApplication();\r\n        } else {\r\n            app = new DefaultSDIApplication();\r\n        }\r\n\r\n    app.setModel(tam);\r\n    app.launch(args);\r\n}'),(6101,'-init-()','org.jhotdraw.samples.teddy.TeddyApplicationModel.-init-()','620','org.jhotdraw.samples.teddy.TeddyApplicationModel','/**\r\n * Creates a new instance.\r\n */\r\npublic TeddyApplicationModel() {\r\n}'),(6102,'createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.teddy.TeddyApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)','620','org.jhotdraw.samples.teddy.TeddyApplicationModel','@Override\r\npublic List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.teddy.Labels\");\r\n    JMenu m;\r\n    JCheckBoxMenuItem cbmi;\r\n    mb.add(createEditMenu(a, p));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineWrapAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineWrapAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineNumbersAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineNumbersAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleStatusBarAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleStatusBarAction.ID));\r\n    m.add(cbmi);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(6103,'createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.teddy.TeddyApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)','620','org.jhotdraw.samples.teddy.TeddyApplicationModel','/**\r\n * Creates toolbars for the application.\r\n * This class returns an empty list - we dont want toolbars in a text editor.\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    return Collections.emptyList();\r\n}'),(6104,'initApplication(org.jhotdraw.app.Application)','org.jhotdraw.samples.teddy.TeddyApplicationModel.initApplication(org.jhotdraw.app.Application)','620','org.jhotdraw.samples.teddy.TeddyApplicationModel','@Override\r\npublic void initApplication(Application a) {\r\n    putAction(FindAction.ID, new FindAction(a));\r\n    putAction(ToggleLineWrapAction.ID, new ToggleLineWrapAction(a));\r\n    putAction(ToggleStatusBarAction.ID, new ToggleStatusBarAction(a));\r\n    putAction(ToggleLineNumbersAction.ID, new ToggleLineNumbersAction(a));\r\n    putAction(PrintAction.ID, null);\r\n}'),(6105,'initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','org.jhotdraw.samples.teddy.TeddyApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)','620','org.jhotdraw.samples.teddy.TeddyApplicationModel','@Override\r\npublic void initView(Application a, View p) {\r\n}'),(6106,'-init-()','org.jhotdraw.samples.teddy.TeddyView.-init-()','622','org.jhotdraw.samples.teddy.TeddyView','EditorPanel() {\r\n}'),(6107,'caretUpdate(javax.swing.event.CaretEvent)','org.jhotdraw.samples.teddy.TeddyView.caretUpdate(javax.swing.event.CaretEvent)','622','org.jhotdraw.samples.teddy.TeddyView','private void caretUpdate(CaretEvent evt) {\r\n    try {\r\n        int pos = editor.getCaretPosition();\r\n        int line = getLineOfOffset(pos);\r\n        int lineStartOffset = getLineStartOffset(line);\r\n        caretInfoLabel.setText((((line + 1) + \":\") + ((pos - lineStartOffset) + 1)));\r\n    } catch (BadLocationException e) {\r\n        caretInfoLabel.setText(e.toString());\r\n    }\r\n}'),(6108,'clear()','org.jhotdraw.samples.teddy.TeddyView.clear()','622','org.jhotdraw.samples.teddy.TeddyView','public void clear() {\r\n    final Document newDocument = createDocument();\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                editor.getDocument().removeUndoableEditListener(undoManager);\r\n                editor.setDocument(newDocument);\r\n                editor.getDocument().addUndoableEditListener(undoManager);\r\n                setHasUnsavedChanges(false);\r\n            }\r\n        });\r\n    } catch (InvocationTargetException ex) {\r\n        ex.printStackTrace();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}'),(6109,'createDocument()','org.jhotdraw.samples.teddy.TeddyView.createDocument()','622','org.jhotdraw.samples.teddy.TeddyView','protected StyledDocument createDocument() {\r\n    DefaultStyledDocument doc = new DefaultStyledDocument();\r\n    doc.setParagraphAttributes(0, 1, ((StyledEditorKit) (editor.getEditorKit())).getInputAttributes(), true);\r\n    return doc;\r\n}'),(6110,'createEditor()','org.jhotdraw.samples.teddy.TeddyView.createEditor()','622','org.jhotdraw.samples.teddy.TeddyView','protected JTextPane createEditor() {\r\n    return new JTextPane();\r\n}'),(6111,'fireEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.samples.teddy.TeddyView.fireEdit(javax.swing.undo.UndoableEdit)','622','org.jhotdraw.samples.teddy.TeddyView','public void fireEdit(UndoableEdit edit) {\r\n    undoManager.addEdit(edit);\r\n}'),(6112,'getAccessory()','org.jhotdraw.samples.teddy.TeddyView.getAccessory()','622','org.jhotdraw.samples.teddy.TeddyView','private CharacterSetAccessory getAccessory() {\r\n    if ((characterSetAccessory) == null) {\r\n        characterSetAccessory = new CharacterSetAccessory();\r\n    }\r\n    return characterSetAccessory;\r\n}'),(6113,'getDocument()','org.jhotdraw.samples.teddy.TeddyView.getDocument()','622','org.jhotdraw.samples.teddy.TeddyView','public Document getDocument() {\r\n    return editor.getDocument();\r\n}'),(6114,'getLineCount()','org.jhotdraw.samples.teddy.TeddyView.getLineCount()','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Determines the number of lines contained in the area.\r\n *\r\n * @return the number of lines > 0\r\n */\r\npublic int getLineCount() {\r\n    Element map = getDocument().getDefaultRootElement();\r\n    return map.getElementCount();\r\n}'),(6115,'getLineOfOffset(int)','org.jhotdraw.samples.teddy.TeddyView.getLineOfOffset(int)','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Accessor for text area.\r\n * This is used by Actions that need ot act on the text area of the View.\r\n */\r\npublic int getLineOfOffset(int offset) throws BadLocationException {\r\n    // return editor.getLineOfOffset(offset);\r\n    Document doc = getDocument();\r\n    if (offset < 0) {\r\n        throw new BadLocationException(\"Cant translate offset to line\", (-1));\r\n    } else\r\n        if (offset > (doc.getLength())) {\r\n            throw new BadLocationException(\"Cant translate offset to line\", ((doc.getLength()) + 1));\r\n        } else {\r\n            Element map = getDocument().getDefaultRootElement();\r\n            return map.getElementIndex(offset);\r\n        }\r\n\r\n}'),(6116,'getLineStartOffset(int)','org.jhotdraw.samples.teddy.TeddyView.getLineStartOffset(int)','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Accessor for text area.\r\n * This is used by Actions that need ot act on the text area of the View.\r\n */\r\npublic int getLineStartOffset(int line) throws BadLocationException {\r\n    // return editor.getLineStartOffset(line);\r\n    int lineCount = getLineCount();\r\n    if (line < 0) {\r\n        throw new BadLocationException(\"Negative line\", (-1));\r\n    } else\r\n        if (line >= lineCount) {\r\n            throw new BadLocationException(\"No such line\", ((getDocument().getLength()) + 1));\r\n        } else {\r\n            Element map = getDocument().getDefaultRootElement();\r\n            Element lineElem = map.getElement(line);\r\n            return lineElem.getStartOffset();\r\n        }\r\n\r\n}'),(6117,'getOpenChooser()','org.jhotdraw.samples.teddy.TeddyView.getOpenChooser()','622','org.jhotdraw.samples.teddy.TeddyView','@Override\r\npublic JFileChooser getOpenChooser() {\r\n    JFileChooser chooser = super.getOpenChooser();\r\n    chooser.setAccessory(getAccessory());\r\n    return chooser;\r\n}'),(6118,'getSaveChooser()','org.jhotdraw.samples.teddy.TeddyView.getSaveChooser()','622','org.jhotdraw.samples.teddy.TeddyView','@Override\r\npublic JFileChooser getSaveChooser() {\r\n    JFileChooser chooser = super.getSaveChooser();\r\n    chooser.setAccessory(getAccessory());\r\n    return chooser;\r\n}'),(6119,'getSelectionEnd()','org.jhotdraw.samples.teddy.TeddyView.getSelectionEnd()','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Accessor for text area.\r\n * This is used by Actions that need ot act on the project text area.\r\n */\r\npublic int getSelectionEnd() {\r\n    return editor.getSelectionEnd();\r\n}'),(6120,'getSelectionStart()','org.jhotdraw.samples.teddy.TeddyView.getSelectionStart()','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Accessor for text area.\r\n * This is used by Actions that need ot act on the text area of the View.\r\n */\r\npublic int getSelectionStart() {\r\n    return editor.getSelectionStart();\r\n}'),(6121,'init()','org.jhotdraw.samples.teddy.TeddyView.init()','622','org.jhotdraw.samples.teddy.TeddyView','public void init() {\r\n    initComponents();\r\n    editor = createEditor();\r\n    editorViewport = new TeddyView.EditorPanel();\r\n    editorViewport.setEditor(editor);\r\n    scrollPane.setViewportView(editorViewport);\r\n    editor.addCaretListener(new CaretListener() {\r\n        public void caretUpdate(CaretEvent evt) {\r\n            TeddyView.this.caretUpdate(evt);\r\n        }\r\n    });\r\n    scrollPane.getViewport().setBackground(editor.getBackground());\r\n    scrollPane.getViewport().addMouseListener(new MouseAdapter() {\r\n        @Override\r\n        public void mousePressed(MouseEvent evt) {\r\n            editor.requestFocus();\r\n        }\r\n    });\r\n    Font font = getFont();\r\n    MutableAttributeSet attrs = ((StyledEditorKit) (editor.getEditorKit())).getInputAttributes();\r\n    StyleConstants.setFontFamily(attrs, font.getFamily());\r\n    StyleConstants.setFontSize(attrs, font.getSize());\r\n    StyleConstants.setItalic(attrs, (((font.getStyle()) & (Font.ITALIC)) != 0));\r\n    StyleConstants.setBold(attrs, (((font.getStyle()) & (Font.BOLD)) != 0));\r\n    // Init preferences\r\n    statusBar.setVisible(TeddyView.prefs.getBoolean(\"statusBarVisible\", false));\r\n    editorViewport.setLineWrap(TeddyView.prefs.getBoolean(\"lineWrap\", true));\r\n    NumberedEditorKit editorKit = new NumberedEditorKit();\r\n    ((NumberedViewFactory) (editorKit.getViewFactory())).setLineNumbersVisible(TeddyView.prefs.getBoolean(\"lineNumbersVisible\", false));\r\n    editor.setEditorKit(editorKit);\r\n    editor.setDocument(createDocument());\r\n    setPreferredSize(new Dimension(400, 400));\r\n    undoManager = new UndoRedoManager();\r\n    editor.getDocument().addUndoableEditListener(undoManager);\r\n    undoManager.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            setHasUnsavedChanges(undoManager.hasSignificantEdits());\r\n        }\r\n    });\r\n    initActions();\r\n}'),(6122,'initActions()','org.jhotdraw.samples.teddy.TeddyView.initActions()','622','org.jhotdraw.samples.teddy.TeddyView','private void initActions() {\r\n    putAction(UndoAction.ID, undoManager.getUndoAction());\r\n    putAction(RedoAction.ID, undoManager.getRedoAction());\r\n}'),(6123,'initComponents()','org.jhotdraw.samples.teddy.TeddyView.initComponents()','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * This method is called from within the constructor to\r\n * initialize the form.\r\n * WARNING: Do NOT modify this code. The content of this method is\r\n * always regenerated by the Form Editor.\r\n */\r\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\nprivate void initComponents() {\r\n    statusBar = new JPanel();\r\n    caretInfoLabel = new JLabel();\r\n    scrollPane = new JScrollPane();\r\n    setLayout(new BorderLayout());\r\n    statusBar.setLayout(new BorderLayout());\r\n    caretInfoLabel.setFont(new Font(\"Lucida Grande\", 0, 11));\r\n    caretInfoLabel.setText(\"1:1\");\r\n    caretInfoLabel.setBorder(BorderFactory.createEmptyBorder(1, 3, 0, 3));\r\n    statusBar.add(caretInfoLabel, BorderLayout.CENTER);\r\n    add(statusBar, BorderLayout.SOUTH);\r\n    scrollPane.setBorder(null);\r\n    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\r\n    add(scrollPane, BorderLayout.CENTER);\r\n}// </editor-fold>//GEN-END:initComponents\r\n'),(6124,'isLineNumbersVisible()','org.jhotdraw.samples.teddy.TeddyView.isLineNumbersVisible()','622','org.jhotdraw.samples.teddy.TeddyView','public boolean isLineNumbersVisible() {\r\n    NumberedViewFactory viewFactory = ((NumberedViewFactory) (editor.getEditorKit().getViewFactory()));\r\n    return viewFactory.isLineNumbersVisible();\r\n}'),(6125,'isLineWrap()','org.jhotdraw.samples.teddy.TeddyView.isLineWrap()','622','org.jhotdraw.samples.teddy.TeddyView','public boolean isLineWrap() {\r\n    return editorViewport.getLineWrap();\r\n}'),(6126,'isStatusBarVisible()','org.jhotdraw.samples.teddy.TeddyView.isStatusBarVisible()','622','org.jhotdraw.samples.teddy.TeddyView','public boolean isStatusBarVisible() {\r\n    return statusBar.isVisible();\r\n}'),(6127,'read(java.io.File)','org.jhotdraw.samples.teddy.TeddyView.read(java.io.File)','622','org.jhotdraw.samples.teddy.TeddyView','public void read(File f) throws IOException {\r\n    read(f, getAccessory().getCharacterSet());\r\n}'),(6128,'read(java.io.File,java.lang.String)','org.jhotdraw.samples.teddy.TeddyView.read(java.io.File,java.lang.String)','622','org.jhotdraw.samples.teddy.TeddyView','public void read(File f, String characterSet) throws IOException {\r\n    final Document doc = readDocument(f, characterSet);\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                editor.getDocument().removeUndoableEditListener(undoManager);\r\n                editor.setDocument(doc);\r\n                doc.addUndoableEditListener(undoManager);\r\n                undoManager.discardAllEdits();\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        // ignore\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(6129,'readDocument(java.io.File,java.lang.String)','org.jhotdraw.samples.teddy.TeddyView.readDocument(java.io.File,java.lang.String)','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Reads a document from a file using the specified character set.\r\n */\r\nprivate Document readDocument(File f, String characterSet) throws IOException {\r\n    ProgressMonitorInputStream pin = new ProgressMonitorInputStream(this, (\"Reading \" + (f.getName())), new FileInputStream(f));\r\n    BufferedReader in = new BufferedReader(new InputStreamReader(pin, characterSet));\r\n    try {\r\n        // PlainDocument doc = new PlainDocument();\r\n        StyledDocument doc = createDocument();\r\n        MutableAttributeSet attrs = ((StyledEditorKit) (editor.getEditorKit())).getInputAttributes();\r\n        String line;\r\n        boolean isFirst = true;\r\n        while ((line = in.readLine()) != null) {\r\n            if (isFirst) {\r\n                isFirst = false;\r\n            } else {\r\n                doc.insertString(doc.getLength(), \"\n\", attrs);\r\n            }\r\n            doc.insertString(doc.getLength(), line, attrs);\r\n        } \r\n        return doc;\r\n    } catch (BadLocationException e) {\r\n        throw new IOException(e.getMessage());\r\n    } catch (OutOfMemoryError e) {\r\n        System.err.println(\"out of memory!\");\r\n        throw new IOException(\"Out of memory.\");\r\n    } finally {\r\n        in.close();\r\n    }\r\n}'),(6130,'replaceRange(java.lang.String,int,int)','org.jhotdraw.samples.teddy.TeddyView.replaceRange(java.lang.String,int,int)','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Accessor for text area.\r\n * This is used by Actions that need to act on the text area of the View.\r\n */\r\npublic void replaceRange(String str, int start, int end) {\r\n    // editor.replaceRange(str, start, end);\r\n    if (end < start) {\r\n        throw new IllegalArgumentException(\"end before start\");\r\n    }\r\n    Document doc = getDocument();\r\n    if (doc != null) {\r\n        try {\r\n            if (doc instanceof AbstractDocument) {\r\n                ((AbstractDocument) (doc)).replace(start, (end - start), str, null);\r\n            } else {\r\n                doc.remove(start, (end - start));\r\n                doc.insertString(start, str, null);\r\n            }\r\n        } catch (BadLocationException e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n}'),(6131,'select(int,int)','org.jhotdraw.samples.teddy.TeddyView.select(int,int)','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Accessor for text area.\r\n * This is used by Actions that need ot act on the text area of the View.\r\n */\r\npublic void select(int start, int end) {\r\n    editor.select(start, end);\r\n    try {\r\n        editor.scrollRectToVisible(editor.modelToView(start));\r\n    } catch (BadLocationException e) {\r\n        e.printStackTrace();\r\n    }\r\n}'),(6132,'setEnabled(boolean)','org.jhotdraw.samples.teddy.TeddyView.setEnabled(boolean)','622','org.jhotdraw.samples.teddy.TeddyView','public void setEnabled(boolean newValue) {\r\n    super.setEnabled(newValue);\r\n    editor.setEnabled(newValue);\r\n    scrollPane.setEnabled(newValue);\r\n}'),(6133,'setLineNumbersVisible(boolean)','org.jhotdraw.samples.teddy.TeddyView.setLineNumbersVisible(boolean)','622','org.jhotdraw.samples.teddy.TeddyView','public void setLineNumbersVisible(boolean newValue) {\r\n    NumberedViewFactory viewFactory = ((NumberedViewFactory) (editor.getEditorKit().getViewFactory()));\r\n    boolean oldValue = viewFactory.isLineNumbersVisible();\r\n    if (oldValue != newValue) {\r\n        viewFactory.setLineNumbersVisible(newValue);\r\n        TeddyView.prefs.putBoolean(\"lineNumbersVisible\", newValue);\r\n        firePropertyChange(\"lineNumbersVisible\", oldValue, newValue);\r\n        editor.revalidate();\r\n        editor.repaint();\r\n    }\r\n}'),(6134,'setLineWrap(boolean)','org.jhotdraw.samples.teddy.TeddyView.setLineWrap(boolean)','622','org.jhotdraw.samples.teddy.TeddyView','public void setLineWrap(boolean newValue) {\r\n    boolean oldValue = editorViewport.getLineWrap();\r\n    editorViewport.setLineWrap(newValue);\r\n    TeddyView.prefs.putBoolean(\"lineWrap\", newValue);\r\n    firePropertyChange(\"lineWrap\", oldValue, newValue);\r\n}'),(6135,'setStatusBarVisible(boolean)','org.jhotdraw.samples.teddy.TeddyView.setStatusBarVisible(boolean)','622','org.jhotdraw.samples.teddy.TeddyView','public void setStatusBarVisible(boolean newValue) {\r\n    boolean oldValue = statusBar.isVisible();\r\n    statusBar.setVisible(newValue);\r\n    TeddyView.prefs.putBoolean(\"statusBarVisible\", newValue);\r\n    firePropertyChange(\"statusBarVisible\", oldValue, newValue);\r\n}'),(6136,'write(java.io.File)','org.jhotdraw.samples.teddy.TeddyView.write(java.io.File)','622','org.jhotdraw.samples.teddy.TeddyView','public void write(File f) throws IOException {\r\n    write(f, getAccessory().getCharacterSet(), getAccessory().getLineSeparator());\r\n}'),(6137,'write(java.io.File,java.lang.String,java.lang.String)','org.jhotdraw.samples.teddy.TeddyView.write(java.io.File,java.lang.String,java.lang.String)','622','org.jhotdraw.samples.teddy.TeddyView','public void write(File f, String characterSet, String lineSeparator) throws IOException {\r\n    writeDocument(editor.getDocument(), f, characterSet, lineSeparator);\r\n    try {\r\n        SwingUtilities.invokeAndWait(new Runnable() {\r\n            public void run() {\r\n                undoManager.setHasSignificantEdits(false);\r\n            }\r\n        });\r\n    } catch (InterruptedException e) {\r\n        // ignore\r\n    } catch (InvocationTargetException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(6138,'writeDocument(javax.swing.text.Document,java.io.File,java.lang.String,java.lang.String)','org.jhotdraw.samples.teddy.TeddyView.writeDocument(javax.swing.text.Document,java.io.File,java.lang.String,java.lang.String)','622','org.jhotdraw.samples.teddy.TeddyView','/**\r\n * Writes a document into a file using the specified character set.\r\n */\r\nprivate void writeDocument(Document doc, File f, String characterSet, String lineSeparator) throws IOException {\r\n    LFWriter out = new LFWriter(new OutputStreamWriter(new FileOutputStream(f), characterSet));\r\n    out.setLineSeparator(lineSeparator);\r\n    try {\r\n        String sequence;\r\n        for (int i = 0; i < (doc.getLength()); i += 256) {\r\n            out.write(doc.getText(i, Math.min(256, ((doc.getLength()) - i))));\r\n        }\r\n    } catch (BadLocationException e) {\r\n        throw new IOException(e.getMessage());\r\n    } finally {\r\n        out.close();\r\n        undoManager.discardAllEdits();\r\n    }\r\n}'),(6139,'-init-()','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.-init-()','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','EditorPanel() {\r\n}'),(6140,'getLineWrap()','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.getLineWrap()','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public boolean getLineWrap() {\r\n    return isLineWrap;\r\n}'),(6141,'getPreferredScrollableViewportSize()','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.getPreferredScrollableViewportSize()','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public Dimension getPreferredScrollableViewportSize() {\r\n    // System.out.println(\"EditorViewport: \"+editor.getPreferredScrollableViewportSize());\r\n    return editor.getPreferredScrollableViewportSize();\r\n}'),(6142,'getScrollableBlockIncrement(java.awt.Rectangle,int,int)','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.getScrollableBlockIncrement(java.awt.Rectangle,int,int)','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {\r\n    return editor.getScrollableBlockIncrement(visibleRect, orientation, direction);\r\n}'),(6143,'getScrollableTracksViewportHeight()','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.getScrollableTracksViewportHeight()','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public boolean getScrollableTracksViewportHeight() {\r\n    return editor.getScrollableTracksViewportHeight();\r\n}'),(6144,'getScrollableTracksViewportWidth()','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.getScrollableTracksViewportWidth()','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public boolean getScrollableTracksViewportWidth() {\r\n    return isLineWrap;\r\n}'),(6145,'getScrollableUnitIncrement(java.awt.Rectangle,int,int)','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.getScrollableUnitIncrement(java.awt.Rectangle,int,int)','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {\r\n    return editor.getScrollableUnitIncrement(visibleRect, orientation, direction);\r\n}'),(6146,'setEditor(javax.swing.text.JTextComponent)','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.setEditor(javax.swing.text.JTextComponent)','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public void setEditor(JTextComponent newValue) {\r\n    editor = newValue;\r\n    removeAll();\r\n    setLayout(new BorderLayout());\r\n    add(editor);\r\n    setBackground(UIManager.getColor(\"TextField.background\"));\r\n    setOpaque(true);\r\n}'),(6147,'setLineWrap(boolean)','org.jhotdraw.samples.teddy.TeddyView$EditorPanel.setLineWrap(boolean)','621','org.jhotdraw.samples.teddy.TeddyView$EditorPanel','public void setLineWrap(boolean newValue) {\r\n    isLineWrap = newValue;\r\n    editor.revalidate();\r\n    editor.repaint();\r\n}'),(6148,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.teddy.action.FindAction.-init-(org.jhotdraw.app.Application)','623','org.jhotdraw.samples.teddy.action.FindAction','/**\r\n * Creates a new instance.\r\n */\r\npublic FindAction(Application app) {\r\n    this.app = app;\r\n    labels.configureAction(this, FindAction.ID);\r\n}'),(6149,'-init-()','org.jhotdraw.samples.teddy.action.FindAction.-init-()','623','org.jhotdraw.samples.teddy.action.FindAction','1() {\r\n}'),(6150,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.action.FindAction.actionPerformed(java.awt.event.ActionEvent)','623','org.jhotdraw.samples.teddy.action.FindAction','public void actionPerformed(ActionEvent e) {\r\n    if ((findDialog) == null) {\r\n        findDialog = new FindDialog(app);\r\n        if ((app) instanceof DefaultOSXApplication) {\r\n            findDialog.addWindowListener(new WindowAdapter() {\r\n                @Override\r\n                public void windowClosing(WindowEvent evt) {\r\n                    if ((findDialog) != null) {\r\n                        ((DefaultOSXApplication) (app)).removePalette(findDialog);\r\n                        findDialog.setVisible(false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    findDialog.setVisible(true);\r\n    if ((app) instanceof DefaultOSXApplication) {\r\n        ((DefaultOSXApplication) (app)).addPalette(findDialog);\r\n    }\r\n}'),(6151,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction.-init-(org.jhotdraw.app.Application)','624','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleLineNumbersAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleLineNumbersAction.ID);\r\n    setPropertyName(\"lineNumbersVisible\");\r\n}'),(6152,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction.actionPerformed(java.awt.event.ActionEvent)','624','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction','public void actionPerformed(ActionEvent e) {\r\n    getActiveView().setLineNumbersVisible((!(getActiveView().isLineNumbersVisible())));\r\n}'),(6153,'getActiveView()','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction.getActiveView()','624','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction','@Override\r\npublic TeddyView getActiveView() {\r\n    return ((TeddyView) (super.getActiveView()));\r\n}'),(6154,'updateView()','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction.updateView()','624','org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction','@Override\r\nprotected void updateView() {\r\n    putValue(Actions.SELECTED_KEY, (((getActiveView()) != null) && (getActiveView().isLineNumbersVisible())));\r\n}'),(6155,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction.-init-(org.jhotdraw.app.Application)','625','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleLineWrapAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleLineWrapAction.ID);\r\n    setPropertyName(\"lineWrap\");\r\n}'),(6156,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction.actionPerformed(java.awt.event.ActionEvent)','625','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction','public void actionPerformed(ActionEvent e) {\r\n    getActiveView().setLineWrap((!(getActiveView().isLineWrap())));\r\n}'),(6157,'getActiveView()','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction.getActiveView()','625','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction','public TeddyView getActiveView() {\r\n    return ((TeddyView) (super.getActiveView()));\r\n}'),(6158,'updateView()','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction.updateView()','625','org.jhotdraw.samples.teddy.action.ToggleLineWrapAction','protected void updateView() {\r\n    putValue(Actions.SELECTED_KEY, (((getActiveView()) != null) && (getActiveView().isLineWrap())));\r\n}'),(6159,'-init-(org.jhotdraw.app.Application)','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction.-init-(org.jhotdraw.app.Application)','626','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction','/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleStatusBarAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleStatusBarAction.ID);\r\n    setPropertyName(\"statusBarVisible\");\r\n}'),(6160,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction.actionPerformed(java.awt.event.ActionEvent)','626','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction','public void actionPerformed(ActionEvent e) {\r\n    getActiveView().setStatusBarVisible((!(getActiveView().isStatusBarVisible())));\r\n}'),(6161,'getActiveView()','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction.getActiveView()','626','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction','@Override\r\npublic TeddyView getActiveView() {\r\n    return ((TeddyView) (super.getActiveView()));\r\n}'),(6162,'updateView()','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction.updateView()','626','org.jhotdraw.samples.teddy.action.ToggleStatusBarAction','@Override\r\nprotected void updateView() {\r\n    putValue(Actions.SELECTED_KEY, (((getActiveView()) != null) && (getActiveView().isStatusBarVisible())));\r\n}'),(6163,'-init-(java.io.Writer)','org.jhotdraw.samples.teddy.io.LFWriter.-init-(java.io.Writer)','627','org.jhotdraw.samples.teddy.io.LFWriter','/**\r\n * Create a new line-numbering writer.\r\n */\r\npublic LFWriter(Writer out) {\r\n    super(out);\r\n    lineSeparator = ((String) (System.getProperty(\"line.separator\")));\r\n}'),(6164,'getLineSeparator()','org.jhotdraw.samples.teddy.io.LFWriter.getLineSeparator()','627','org.jhotdraw.samples.teddy.io.LFWriter','/**\r\n * Gets the line separator of the println() methods.\r\n */\r\npublic String getLineSeparator() {\r\n    return lineSeparator;\r\n}'),(6165,'setLineSeparator(java.lang.String)','org.jhotdraw.samples.teddy.io.LFWriter.setLineSeparator(java.lang.String)','627','org.jhotdraw.samples.teddy.io.LFWriter','/**\r\n * Sets the line separator for the println() methods.\r\n */\r\npublic void setLineSeparator(String lineSeparator) {\r\n    this.lineSeparator = lineSeparator;\r\n}'),(6166,'write(char[],int,int)','org.jhotdraw.samples.teddy.io.LFWriter.write(char[],int,int)','627','org.jhotdraw.samples.teddy.io.LFWriter','/**\r\n * Write a portion of an array of characters.\r\n *\r\n * @param cbuf\r\n * 		Buffer of characters to be written\r\n * @param off\r\n * 		Offset from which to start reading characters\r\n * @param len\r\n * 		Number of characters to be written\r\n * @exception IOException  If an I/O error occurs\r\n */\r\npublic void write(char[] cbuf, int off, int len) throws IOException {\r\n    int end = off + len;\r\n    for (int i = off; i < end; i++) {\r\n        switch (cbuf[i]) {\r\n            case \r :\r\n                out.write(cbuf, off, (i - off));\r\n                off = i + 1;\r\n                out.write(lineSeparator);\r\n                skipLF = true;\r\n                break;\r\n            case \n :\r\n                out.write(cbuf, off, (i - off));\r\n                off = i + 1;\r\n                if (skipLF) {\r\n                    skipLF = false;\r\n                } else {\r\n                    out.write(lineSeparator);\r\n                }\r\n                break;\r\n            default :\r\n                skipLF = false;\r\n                break;\r\n        }\r\n    }\r\n    if (off < end)\r\n        out.write(cbuf, off, (end - off));\r\n\r\n}'),(6167,'write(int)','org.jhotdraw.samples.teddy.io.LFWriter.write(int)','627','org.jhotdraw.samples.teddy.io.LFWriter','/**\r\n * Write a single character.\r\n *\r\n * @exception IOException  If an I/O error occurs\r\n */\r\npublic void write(int c) throws IOException {\r\n    switch (c) {\r\n        case \r :\r\n            out.write(lineSeparator);\r\n            skipLF = true;\r\n            break;\r\n        case \n :\r\n            if (!(skipLF))\r\n                out.write(lineSeparator);\r\n\r\n            skipLF = false;\r\n            break;\r\n        default :\r\n            out.write(c);\r\n            skipLF = false;\r\n            break;\r\n    }\r\n}'),(6168,'write(java.lang.String,int,int)','org.jhotdraw.samples.teddy.io.LFWriter.write(java.lang.String,int,int)','627','org.jhotdraw.samples.teddy.io.LFWriter','/**\r\n * Write a portion of a string.\r\n *\r\n * @param str\r\n * 		String to be written\r\n * @param off\r\n * 		Offset from which to start reading characters\r\n * @param len\r\n * 		Number of characters to be written\r\n * @exception IOException  If an I/O error occurs\r\n */\r\npublic void write(String str, int off, int len) throws IOException {\r\n    write(str.toCharArray(), off, len);\r\n}'),(6169,'-init-()','org.jhotdraw.samples.teddy.regex.MatchType.-init-()','628','org.jhotdraw.samples.teddy.regex.MatchType','private MatchType() {\r\n}'),(6170,'-init-(javax.swing.text.Document,java.lang.String)','org.jhotdraw.samples.teddy.regex.Matcher.-init-(javax.swing.text.Document,java.lang.String)','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Creates a new instance of Matcher which\r\n * performs a case sensitive search.\r\n *\r\n * @param document\r\n * 		The document to be examined\r\n * @param findString\r\n * 		The string to be searched.\r\n */\r\npublic Matcher(Document document, String findString) {\r\n    this(document, findString, true, MatchType.CONTAINS);\r\n}'),(6171,'-init-(javax.swing.text.Document,java.lang.String,boolean,org.jhotdraw.samples.teddy.regex.MatchType)','org.jhotdraw.samples.teddy.regex.Matcher.-init-(javax.swing.text.Document,java.lang.String,boolean,org.jhotdraw.samples.teddy.regex.MatchType)','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Creates a new instance of Matcher\r\n *\r\n * @param document\r\n * 		The document to be examined\r\n * @param findString\r\n * 		The string to be searched.\r\n * @param matchCase\r\n * 		Set to true for case sensitive search.\r\n * @param matchType\r\n * 		Sets the match type.\r\n */\r\npublic Matcher(Document document, String findString, boolean matchCase, MatchType matchType) {\r\n    this.document = document;\r\n    this.findString = findString;\r\n    startIndex = 0;\r\n    // Convert to chars for efficiency\r\n    if (matchCase) {\r\n        matchLowerCase = matchUpperCase = findString.toCharArray();\r\n    } else {\r\n        matchUpperCase = findString.toUpperCase().toCharArray();\r\n        matchLowerCase = findString.toLowerCase().toCharArray();\r\n    }\r\n    this.matchType = matchType;\r\n}'),(6172,'findNext()','org.jhotdraw.samples.teddy.regex.Matcher.findNext()','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Attempts to find the next subsequence of the\r\n * input sequence that matches the pattern.\r\n * <p>\r\n * This method starts at the beginning of\r\n * the input sequence or, if a previous invocation\r\n * of the method was successful and the matcher has not\r\n * since been reset, at the first character not matched by\r\n * the previous match.\r\n *\r\n * @return the index of the first occurrence of the search string,\r\nstarting at the specified offset, or -1 if no occurrence was found.\r\n */\r\npublic int findNext() {\r\n    // Dont match empty strings and dont match if we are at the end of the document.\r\n    if (((findString.length()) == 0) || (((document.getLength()) - (findString.length())) < (startIndex))) {\r\n        return -1;\r\n    }\r\n    try {\r\n        int nextMatch = 0;// index of next matching character\r\n\r\n        // Iterate through all segments of the document starting from offset\r\n        Segment text = new Segment();\r\n        text.setPartialReturn(true);\r\n        int offset = startIndex;\r\n        int nleft = (document.getLength()) - (startIndex);\r\n        while (nleft > 0) {\r\n            document.getText(offset, nleft, text);\r\n            // Iterate through the characters in the current segment\r\n            char next = text.first();\r\n            for (text.first(); next != (Segment.DONE); next = text.next()) {\r\n                // Check if the current character matches with the next\r\n                // search character.\r\n                char current = text.current();\r\n                if ((current == (matchUpperCase[nextMatch])) || (current == (matchLowerCase[nextMatch]))) {\r\n                    nextMatch++;\r\n                    // Did we match all search characters?\r\n                    if (nextMatch == (matchLowerCase.length)) {\r\n                        int foundIndex = ((((text.getIndex()) - (text.getBeginIndex())) + offset) - (matchLowerCase.length)) + 1;\r\n                        if ((matchType) == (MatchType.CONTAINS)) {\r\n                            return foundIndex;\r\n                            // break; <- never reached\r\n                        } else\r\n                            if ((matchType) == (MatchType.STARTS_WITH)) {\r\n                                if (!(isWordChar((foundIndex - 1)))) {\r\n                                    return foundIndex;\r\n                                }\r\n                            } else\r\n                                if ((matchType) == (MatchType.FULL_WORD)) {\r\n                                    if ((!(isWordChar((foundIndex - 1)))) && (!(isWordChar((foundIndex + (matchLowerCase.length)))))) {\r\n                                        return foundIndex;\r\n                                    }\r\n                                }\r\n\r\n\r\n                        nextMatch = 0;\r\n                    }\r\n                } else {\r\n                    nextMatch = 0;\r\n                }\r\n            }\r\n            // Move forward to the next segment\r\n            nleft -= text.count;\r\n            offset += text.count;\r\n        } \r\n        return -1;\r\n    } catch (BadLocationException e) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n}'),(6173,'findNext(int)','org.jhotdraw.samples.teddy.regex.Matcher.findNext(int)','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Resets this matcher and then attempts to find the next\r\n * subsequence of the input sequence that matches the pattern,\r\n * starting at the specified index.\r\n *\r\n * @param startIndex\r\n * 		the index from which to start the search.\r\n * @return the index of the first occurrence of the search string,\r\nstarting at the specified offset, or -1 if no occurrence was found.\r\n */\r\npublic int findNext(int startIndex) {\r\n    this.startIndex = startIndex;\r\n    return findNext();\r\n}'),(6174,'findPrevious()','org.jhotdraw.samples.teddy.regex.Matcher.findPrevious()','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Attempts to find the previous subsequence of the\r\n * input sequence that matches the pattern.\r\n * <p>\r\n * This method starts at the beginning of\r\n * the input sequence or, if a previous invocation\r\n * of the method was successful and the matcher has not\r\n * since been reset, at the first character not matched by\r\n * the previous match.\r\n *\r\n * @return the index of the first occurrence of the search string,\r\nstarting at the specified offset, or -1 if no occurrence was found.\r\n */\r\npublic int findPrevious() {\r\n    // Dont match empty strings and dont match if we are at the beginning of the document.\r\n    if (((findString.length()) == 0) || ((startIndex) < ((findString.length()) - 1))) {\r\n        // System.out.println(\"too close to start\");\r\n        return -1;\r\n    }\r\n    try {\r\n        int nextMatch = (matchLowerCase.length) - 1;// index of next matching character\r\n\r\n        // For simplicity, we request all text of the document in a single\r\n        // segment.\r\n        Segment text = new Segment();\r\n        text.setPartialReturn(false);\r\n        document.getText(0, ((startIndex) + 1), text);\r\n        // Iterate through the characters in the current segment\r\n        char previous = text.last();\r\n        // System.out.println(\"previus isch \"+previous);\r\n        for (text.last(); previous != (Segment.DONE); previous = text.previous()) {\r\n            // Check if the current character matches with the next\r\n            // search character.\r\n            char current = text.current();\r\n            if ((current == (matchUpperCase[nextMatch])) || (current == (matchLowerCase[nextMatch]))) {\r\n                nextMatch--;\r\n                // System.out.println(\"matched \"+nextMatch);\r\n                // Did we match all search characters?\r\n                if (nextMatch == (-1)) {\r\n                    int foundIndex = (text.getIndex()) - (text.getBeginIndex());\r\n                    // System.out.println(\"found index:\"+foundIndex);\r\n                    if ((matchType) == (MatchType.CONTAINS)) {\r\n                        return foundIndex;\r\n                    } else\r\n                        if ((matchType) == (MatchType.STARTS_WITH)) {\r\n                            if (!(isWordChar((foundIndex - 1)))) {\r\n                                return foundIndex;\r\n                            }\r\n                        } else\r\n                            if ((matchType) == (MatchType.FULL_WORD)) {\r\n                                if ((!(isWordChar((foundIndex - 1)))) && (!(isWordChar((foundIndex + (matchLowerCase.length)))))) {\r\n                                    return foundIndex;\r\n                                }\r\n                            }\r\n\r\n\r\n                    nextMatch = (matchLowerCase.length) - 1;\r\n                }\r\n            } else {\r\n                nextMatch = (matchLowerCase.length) - 1;\r\n            }\r\n        }\r\n        return -1;\r\n    } catch (BadLocationException e) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n}'),(6175,'findPrevious(int)','org.jhotdraw.samples.teddy.regex.Matcher.findPrevious(int)','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Resets this matcher and then attempts to find the previous\r\n * subsequence of the input sequence that matches the pattern,\r\n * starting at the specified index.\r\n *\r\n * @param startIndex\r\n * 		the index from which to start the search.\r\n * @return the index of the first occurrence of the search string,\r\nstarting at the specified offset, or -1 if no occurrence was found.\r\n */\r\npublic int findPrevious(int startIndex) {\r\n    this.startIndex = startIndex;\r\n    return findPrevious();\r\n}'),(6176,'getFindString()','org.jhotdraw.samples.teddy.regex.Matcher.getFindString()','629','org.jhotdraw.samples.teddy.regex.Matcher','public String getFindString() {\r\n    return findString;\r\n}'),(6177,'getMatchType()','org.jhotdraw.samples.teddy.regex.Matcher.getMatchType()','629','org.jhotdraw.samples.teddy.regex.Matcher','public MatchType getMatchType() {\r\n    return matchType;\r\n}'),(6178,'isMatchCase()','org.jhotdraw.samples.teddy.regex.Matcher.isMatchCase()','629','org.jhotdraw.samples.teddy.regex.Matcher','public boolean isMatchCase() {\r\n    return (matchLowerCase) == (matchUpperCase);\r\n}'),(6179,'isWordChar(int)','org.jhotdraw.samples.teddy.regex.Matcher.isWordChar(int)','629','org.jhotdraw.samples.teddy.regex.Matcher','private boolean isWordChar(int index) {\r\n    try {\r\n        char ch = document.getText(index, 1).charAt(0);\r\n        return Character.isLetterOrDigit(ch);\r\n    } catch (BadLocationException e) {\r\n        return false;\r\n    }\r\n}'),(6180,'reset()','org.jhotdraw.samples.teddy.regex.Matcher.reset()','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Resets the startIndex of the matcher to 0.\r\n */\r\npublic void reset() {\r\n    startIndex = 0;\r\n}'),(6181,'setStartIndex(int)','org.jhotdraw.samples.teddy.regex.Matcher.setStartIndex(int)','629','org.jhotdraw.samples.teddy.regex.Matcher','/**\r\n * Sets the start index for the findNext(), findPrevious() methods.\r\n */\r\npublic void setStartIndex(int newValue) {\r\n    startIndex = newValue;\r\n}'),(6182,'-init-()','org.jhotdraw.samples.teddy.text.NumberedEditorKit.-init-()','630','org.jhotdraw.samples.teddy.text.NumberedEditorKit','NumberedEditorKit() {\r\n}'),(6183,'getViewFactory()','org.jhotdraw.samples.teddy.text.NumberedEditorKit.getViewFactory()','630','org.jhotdraw.samples.teddy.text.NumberedEditorKit','@Override\r\npublic ViewFactory getViewFactory() {\r\n    if ((viewFactory) == null) {\r\n        viewFactory = new NumberedViewFactory();\r\n    }\r\n    return viewFactory;\r\n}'),(6184,'-init-(javax.swing.text.Element,org.jhotdraw.samples.teddy.text.NumberedViewFactory)','org.jhotdraw.samples.teddy.text.NumberedParagraphView.-init-(javax.swing.text.Element,org.jhotdraw.samples.teddy.text.NumberedViewFactory)','631','org.jhotdraw.samples.teddy.text.NumberedParagraphView','public NumberedParagraphView(Element e, NumberedViewFactory viewFactory) {\r\n    super(e);\r\n    this.viewFactory = viewFactory;\r\n}'),(6185,'getLeftInset()','org.jhotdraw.samples.teddy.text.NumberedParagraphView.getLeftInset()','631','org.jhotdraw.samples.teddy.text.NumberedParagraphView','/**\r\n * Gets the left inset.\r\n *\r\n * @return the inset >= 0\r\n */\r\nprotected short getLeftInset() {\r\n    short left = super.getLeftInset();\r\n    return viewFactory.isLineNumbersVisible() ? ((short) (left + (NumberedParagraphView.NUMBERS_WIDTH))) : left;\r\n}'),(6186,'paintChild(java.awt.Graphics,java.awt.Rectangle,int)','org.jhotdraw.samples.teddy.text.NumberedParagraphView.paintChild(java.awt.Graphics,java.awt.Rectangle,int)','631','org.jhotdraw.samples.teddy.text.NumberedParagraphView','public void paintChild(Graphics g, Rectangle r, int n) {\r\n    super.paintChild(g, r, n);\r\n    if (viewFactory.isLineNumbersVisible()) {\r\n        if (n == 0) {\r\n            g.setColor(Color.gray);\r\n            int lineAscent = g.getFontMetrics().getAscent();\r\n            g.setFont(NumberedParagraphView.numberFont);\r\n            int numberAscent = g.getFontMetrics().getAscent();\r\n            int lineNumber = getDocument().getDefaultRootElement().getElementIndex(getStartOffset());\r\n            int numberX = (r.x) - (getLeftInset());\r\n            // int numberY = r.y + g.getFontMetrics().getAscent();\r\n            int numberY = (r.y) + lineAscent;\r\n            g.drawString(Integer.toString((lineNumber + 1)), numberX, numberY);\r\n        }\r\n    }\r\n}'),(6187,'-init-()','org.jhotdraw.samples.teddy.text.NumberedViewFactory.-init-()','632','org.jhotdraw.samples.teddy.text.NumberedViewFactory','NumberedViewFactory() {\r\n}'),(6188,'create(javax.swing.text.Element)','org.jhotdraw.samples.teddy.text.NumberedViewFactory.create(javax.swing.text.Element)','632','org.jhotdraw.samples.teddy.text.NumberedViewFactory','public View create(Element elem) {\r\n    String kind = elem.getName();\r\n    if (kind != null)\r\n        if (kind.equals(AbstractDocument.ContentElementName)) {\r\n            return new LabelView(elem);\r\n        } else\r\n            if (kind.equals(AbstractDocument.ParagraphElementName)) {\r\n                // if (isLineNumbersVisible()) {\r\n                return new NumberedParagraphView(elem, this);\r\n                // } else {\r\n                // return new ParagraphView(elem);\r\n                // }\r\n            } else\r\n                if (kind.equals(AbstractDocument.SectionElementName)) {\r\n                    return new BoxView(elem, View.Y_AXIS);\r\n                } else\r\n                    if (kind.equals(StyleConstants.ComponentElementName)) {\r\n                        return new ComponentView(elem);\r\n                    } else\r\n                        if (kind.equals(StyleConstants.IconElementName)) {\r\n                            return new IconView(elem);\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    // default to text display\r\n    return new LabelView(elem);\r\n}'),(6189,'isLineNumbersVisible()','org.jhotdraw.samples.teddy.text.NumberedViewFactory.isLineNumbersVisible()','632','org.jhotdraw.samples.teddy.text.NumberedViewFactory','public boolean isLineNumbersVisible() {\r\n    return isLineNumbersVisible;\r\n}'),(6190,'setLineNumbersVisible(boolean)','org.jhotdraw.samples.teddy.text.NumberedViewFactory.setLineNumbersVisible(boolean)','632','org.jhotdraw.samples.teddy.text.NumberedViewFactory','public void setLineNumbersVisible(boolean newValue) {\r\n    boolean oldValue = isLineNumbersVisible;\r\n    isLineNumbersVisible = newValue;\r\n}'),(6191,'-init-()','org.jhotdraw.text.ColorFormatter.-init-()','634','org.jhotdraw.text.ColorFormatter','Format() {\r\n}'),(6192,'-init-(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)','org.jhotdraw.text.ColorFormatter.-init-(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)','634','org.jhotdraw.text.ColorFormatter','public ColorFormatter(ColorFormatter.Format outputFormat, boolean allowsNullValue, boolean isAdaptive) {\r\n    this.outputFormat = outputFormat;\r\n    this.allowsNullValue = allowsNullValue;\r\n    this.isAdaptive = isAdaptive;\r\n    // Retrieve last used input format from preferences\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    try {\r\n        lastUsedInputFormat = ColorFormatter.Format.valueOf(prefs.get(\"ColorFormatter.lastUsedInputFormat\", ColorFormatter.Format.RGB_HEX.name()));\r\n    } catch (IllegalArgumentException e) {\r\n        // leave lastUsedInputFormat as null\r\n    }\r\n    if (isAdaptive && ((lastUsedInputFormat) != null)) {\r\n        this.outputFormat = lastUsedInputFormat;\r\n    }\r\n    setOverwriteMode(false);\r\n}'),(6193,'createFormatterFactory()','org.jhotdraw.text.ColorFormatter.createFormatterFactory()','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Convenience method for creating a formatter factory with a\r\n * {@code ColorFormatter}.\r\n * Uses the RGB_INTEGER format, allows null values and is adaptive.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory() {\r\n    return ColorFormatter.createFormatterFactory(ColorFormatter.Format.RGB_INTEGER, true, true);\r\n}'),(6194,'createFormatterFactory(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)','org.jhotdraw.text.ColorFormatter.createFormatterFactory(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Convenience method for creating a formatter factory with a\r\n * 8@code ColorFormatter}.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory(ColorFormatter.Format outputFormat, boolean allowsNullValue, boolean isAdaptive) {\r\n    return new DefaultFormatterFactory(new ColorFormatter(outputFormat, allowsNullValue, isAdaptive));\r\n}'),(6195,'getAllowsNullValue()','org.jhotdraw.text.ColorFormatter.getAllowsNullValue()','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Returns true, if null value is allowed.\r\n */\r\npublic boolean getAllowsNullValue() {\r\n    return allowsNullValue;\r\n}'),(6196,'getLastUsedInputFormat()','org.jhotdraw.text.ColorFormatter.getLastUsedInputFormat()','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Gets the last used input format.\r\n */\r\npublic ColorFormatter.Format getLastUsedInputFormat() {\r\n    return lastUsedInputFormat;\r\n}'),(6197,'getOutputFormat()','org.jhotdraw.text.ColorFormatter.getOutputFormat()','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Gets the output format.\r\n */\r\npublic ColorFormatter.Format getOutputFormat() {\r\n    return outputFormat;\r\n}'),(6198,'isAdaptive()','org.jhotdraw.text.ColorFormatter.isAdaptive()','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Returns true, if the color formatter is adaptive.\r\n */\r\npublic boolean isAdaptive() {\r\n    return isAdaptive;\r\n}'),(6199,'setAdaptive(boolean)','org.jhotdraw.text.ColorFormatter.setAdaptive(boolean)','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Sets whether the color formatter adaptively selects its output\r\n * format depending on the last input format used by the user.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setAdaptive(boolean newValue) {\r\n    isAdaptive = newValue;\r\n    if (newValue && ((lastUsedInputFormat) != null)) {\r\n        outputFormat = lastUsedInputFormat;\r\n    }\r\n}'),(6200,'setAllowsNullValue(boolean)','org.jhotdraw.text.ColorFormatter.setAllowsNullValue(boolean)','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Sets whether a null value is allowed.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setAllowsNullValue(boolean newValue) {\r\n    allowsNullValue = newValue;\r\n}'),(6201,'setLastUsedInputFormat(org.jhotdraw.text.ColorFormatter$Format)','org.jhotdraw.text.ColorFormatter.setLastUsedInputFormat(org.jhotdraw.text.ColorFormatter$Format)','634','org.jhotdraw.text.ColorFormatter','private void setLastUsedInputFormat(ColorFormatter.Format newValue) {\r\n    lastUsedInputFormat = newValue;\r\n    if (isAdaptive) {\r\n        outputFormat = lastUsedInputFormat;\r\n    }\r\n    prefs.put(\"ColorFormatter.lastUsedInputFormat\", newValue.name());\r\n}'),(6202,'setOutputFormat(org.jhotdraw.text.ColorFormatter$Format)','org.jhotdraw.text.ColorFormatter.setOutputFormat(org.jhotdraw.text.ColorFormatter$Format)','634','org.jhotdraw.text.ColorFormatter','/**\r\n * Sets the output format.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setOutputFormat(ColorFormatter.Format newValue) {\r\n    if (newValue == null) {\r\n        throw new NullPointerException(\"outputFormat may not be null\");\r\n    }\r\n    outputFormat = newValue;\r\n}'),(6203,'stringToValue(java.lang.String)','org.jhotdraw.text.ColorFormatter.stringToValue(java.lang.String)','634','org.jhotdraw.text.ColorFormatter','@Override\r\npublic Object stringToValue(String str) throws ParseException {\r\n    // Handle null and empty case\r\n    if ((str == null) || ((str.trim().length()) == 0)) {\r\n        if (allowsNullValue) {\r\n            return null;\r\n        } else {\r\n            throw new ParseException(\"Null value is not allowed.\", 0);\r\n        }\r\n    }\r\n    // Format RGB_HEX\r\n    Matcher matcher = ColorFormatter.rgbHexPattern.matcher(str);\r\n    if (matcher.matches()) {\r\n        setLastUsedInputFormat(ColorFormatter.Format.RGB_HEX);\r\n        try {\r\n            String group1 = matcher.group(1);\r\n            if ((group1.length()) == 3) {\r\n                return new Color(// \r\n                Integer.parseInt(((((((\"\" + (group1.charAt(0))) + (group1.charAt(0)))// \r\n                 + (group1.charAt(1))) + (group1.charAt(1)))// \r\n                 + (group1.charAt(2))) + (group1.charAt(2))), 16));\r\n            } else\r\n                if ((group1.length()) == 6) {\r\n                    return new Color(Integer.parseInt(group1, 16));\r\n                } else {\r\n                    throw new ParseException(\"Hex color must have 3 or 6 digits.\", 1);\r\n                }\r\n\r\n        } catch (NumberFormatException nfe) {\r\n            ParseException pe = new ParseException(str, 0);\r\n            pe.initCause(nfe);\r\n            throw pe;\r\n        }\r\n    }\r\n    // Format RGB_INTEGER\r\n    matcher = ColorFormatter.rgbIntegerPattern.matcher(str);\r\n    if (matcher.matches()) {\r\n        setLastUsedInputFormat(ColorFormatter.Format.RGB_INTEGER);\r\n        try {\r\n            return // \r\n            // \r\n            // \r\n            new Color(Integer.parseInt(matcher.group(1)), Integer.parseInt(matcher.group(2)), Integer.parseInt(matcher.group(3)));\r\n        } catch (NumberFormatException nfe) {\r\n            ParseException pe = new ParseException(str, 0);\r\n            pe.initCause(nfe);\r\n            throw pe;\r\n        } catch (IllegalArgumentException iae) {\r\n            ParseException pe = new ParseException(str, 0);\r\n            pe.initCause(iae);\r\n            throw pe;\r\n        }\r\n    }\r\n    throw new ParseException(str, 0);\r\n}'),(6204,'valueToString(java.lang.Object)','org.jhotdraw.text.ColorFormatter.valueToString(java.lang.Object)','634','org.jhotdraw.text.ColorFormatter','@Override\r\npublic String valueToString(Object value) throws ParseException {\r\n    String str = null;\r\n    if (value == null) {\r\n        if (allowsNullValue) {\r\n            str = \"\";\r\n        } else {\r\n            throw new ParseException(\"Null value is not allowed.\", 0);\r\n        }\r\n    } else {\r\n        if (!(value instanceof Color)) {\r\n            throw new ParseException((\"Value is not a color \" + value), 0);\r\n        }\r\n        Color c = ((Color) (value));\r\n        switch (outputFormat) {\r\n            case RGB_HEX :\r\n                str = \"000000\" + (Integer.toHexString(((c.getRGB()) & 16777215)));\r\n                str = \"#\" + (str.substring(((str.length()) - 6)));\r\n                break;\r\n            case RGB_INTEGER :\r\n                str = ((((c.getRed()) + \",\") + (c.getGreen())) + \",\") + (c.getBlue());\r\n                break;\r\n        }\r\n    }\r\n    return str;\r\n}'),(6205,'-init-()','org.jhotdraw.text.ColorFormatter$Format.-init-()','633','org.jhotdraw.text.ColorFormatter$Format','Format() {\r\n}'),(6206,'-init-()','org.jhotdraw.text.FontFormatter.-init-()','635','org.jhotdraw.text.FontFormatter','public FontFormatter() {\r\n    this(true);\r\n}'),(6207,'-init-(boolean)','org.jhotdraw.text.FontFormatter.-init-(boolean)','635','org.jhotdraw.text.FontFormatter','public FontFormatter(boolean allowsNullValue) {\r\n    this.allowsNullValue = allowsNullValue;\r\n    setOverwriteMode(false);\r\n}'),(6208,'createFormatterFactory()','org.jhotdraw.text.FontFormatter.createFormatterFactory()','635','org.jhotdraw.text.FontFormatter','/**\r\n * Convenience method for creating a formatter factory with a\r\n * {@code FontFormatter}.\r\n * Uses the RGB_INTEGER format and disallows null values.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory() {\r\n    return FontFormatter.createFormatterFactory(false);\r\n}'),(6209,'createFormatterFactory(boolean)','org.jhotdraw.text.FontFormatter.createFormatterFactory(boolean)','635','org.jhotdraw.text.FontFormatter','/**\r\n * Convenience method for creating a formatter factory with a\r\n * 8@code FontFormatter}.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory(boolean allowsNullValue) {\r\n    return new DefaultFormatterFactory(new FontFormatter(allowsNullValue));\r\n}'),(6210,'getAllowsNullValue()','org.jhotdraw.text.FontFormatter.getAllowsNullValue()','635','org.jhotdraw.text.FontFormatter','/**\r\n * Returns true, if null value is allowed.\r\n */\r\npublic boolean getAllowsNullValue() {\r\n    return allowsNullValue;\r\n}'),(6211,'setAllowsNullValue(boolean)','org.jhotdraw.text.FontFormatter.setAllowsNullValue(boolean)','635','org.jhotdraw.text.FontFormatter','/**\r\n * Sets whether a null value is allowed.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setAllowsNullValue(boolean newValue) {\r\n    allowsNullValue = newValue;\r\n}'),(6212,'stringToValue(java.lang.String)','org.jhotdraw.text.FontFormatter.stringToValue(java.lang.String)','635','org.jhotdraw.text.FontFormatter','@Override\r\npublic Object stringToValue(String str) throws ParseException {\r\n    // Handle null and empty case\r\n    if ((str == null) || ((str.trim().length()) == 0)) {\r\n        if (allowsNullValue) {\r\n            return null;\r\n        } else {\r\n            throw new ParseException(\"Null value is not allowed.\", 0);\r\n        }\r\n    }\r\n    Font f = Font.decode(str);\r\n    if (f == null) {\r\n        throw new ParseException(str, 0);\r\n    }\r\n    String fontName = f.getFontName();\r\n    if ((!(fontName.equals(str))) && (!(fontName.equals((str + \"-Derived\"))))) {\r\n        throw new ParseException(str, 0);\r\n    }\r\n    return f;\r\n}'),(6213,'valueToString(java.lang.Object)','org.jhotdraw.text.FontFormatter.valueToString(java.lang.Object)','635','org.jhotdraw.text.FontFormatter','@Override\r\npublic String valueToString(Object value) throws ParseException {\r\n    String str = null;\r\n    if (value == null) {\r\n        if (allowsNullValue) {\r\n            str = \"\";\r\n        } else {\r\n            throw new ParseException(\"Null value is not allowed.\", 0);\r\n        }\r\n    } else {\r\n        if (!(value instanceof Font)) {\r\n            throw new ParseException((\"Value is not a font \" + value), 0);\r\n        }\r\n        Font f = ((Font) (value));\r\n        str = f.getFontName();\r\n    }\r\n    return str;\r\n}'),(6214,'-init-()','org.jhotdraw.text.JavaNumberFormatter.-init-()','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Creates a <code>NumberFormatter</code> with the a default\r\n * <code>NumberFormat</code> instance obtained from\r\n * <code>NumberFormat.getNumberInstance()</code>.\r\n */\r\npublic JavaNumberFormatter() {\r\n    super();\r\n}'),(6215,'-init-(double,double,double)','org.jhotdraw.text.JavaNumberFormatter.-init-(double,double,double)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Creates a NumberFormatter with the specified Format instance.\r\n */\r\npublic JavaNumberFormatter(double min, double max, double scaleFactor) {\r\n    this(min, max, scaleFactor, false, true);\r\n}'),(6216,'-init-(double,double,double,boolean,boolean)','org.jhotdraw.text.JavaNumberFormatter.-init-(double,double,double,boolean,boolean)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Creates a NumberFormatter with the specified Format instance.\r\n */\r\npublic JavaNumberFormatter(double min, double max, double scaleFactor, boolean allowsNullValue, boolean appendsDotZero) {\r\n    super();\r\n    setMinimum(min);\r\n    setMaximum(max);\r\n    setScaleFactor(scaleFactor);\r\n    setAllowsNullValue(allowsNullValue);\r\n    setAppendsDotZero(appendsDotZero);\r\n    setOverwriteMode(false);\r\n}'),(6217,'createFormatterFactory(double,double,double)','org.jhotdraw.text.JavaNumberFormatter.createFormatterFactory(double,double,double)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Convenience method for creating a formatter factory with a\r\n * {@code ScalableNumberFormatter} and a Java-style DecimalFormat.\r\n * Doesnt allow null values and doesnt append \".0\" to double and float values.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory(double min, double max, double scaleFactor) {\r\n    return JavaNumberFormatter.createFormatterFactory(min, max, scaleFactor, false, false);\r\n}'),(6218,'createFormatterFactory(double,double,double,boolean,boolean)','org.jhotdraw.text.JavaNumberFormatter.createFormatterFactory(double,double,double,boolean,boolean)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Convenience method for creating a formatter factory with a\r\n * {@code ScalableNumberFormatter} and a Java-style DecimalFormat.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory(double min, double max, double scaleFactor, boolean allowsNullValue, boolean appendsDotZero) {\r\n    return new DefaultFormatterFactory(new JavaNumberFormatter(min, max, scaleFactor, allowsNullValue, appendsDotZero));\r\n}'),(6219,'getAllowsNullValue()','org.jhotdraw.text.JavaNumberFormatter.getAllowsNullValue()','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns true if null values are allowed.\r\n */\r\npublic boolean getAllowsNullValue() {\r\n    return allowsNullValue;\r\n}'),(6220,'getAppendsDotZero()','org.jhotdraw.text.JavaNumberFormatter.getAppendsDotZero()','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns true if null values are allowed.\r\n */\r\npublic boolean getAppendsDotZero() {\r\n    return appendsDotZero;\r\n}'),(6221,'getMaximum()','org.jhotdraw.text.JavaNumberFormatter.getMaximum()','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns the maximum permissible value.\r\n *\r\n * @return Maximum legal value that can be input\r\n */\r\npublic Comparable getMaximum() {\r\n    return max;\r\n}'),(6222,'getMinimum()','org.jhotdraw.text.JavaNumberFormatter.getMinimum()','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns the minimum permissible value.\r\n *\r\n * @return Minimum legal value that can be input\r\n */\r\npublic Comparable getMinimum() {\r\n    return min;\r\n}'),(6223,'getScaleFactor()','org.jhotdraw.text.JavaNumberFormatter.getScaleFactor()','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns the scale factor of the number formatter.\r\n */\r\npublic double getScaleFactor() {\r\n    return scaleFactor;\r\n}'),(6224,'isValidValue(java.lang.Object,boolean)','org.jhotdraw.text.JavaNumberFormatter.isValidValue(java.lang.Object,boolean)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns true if <code>value</code> is between the min/max.\r\n *\r\n * @param wantsCCE\r\n * 		If false, and a ClassCastException is thrown in\r\n * 		comparing the values, the exception is consumed and\r\n * 		false is returned.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nboolean isValidValue(Object value, boolean wantsCCE) {\r\n    Comparable min = getMinimum();\r\n    try {\r\n        if ((min != null) && ((min.compareTo(value)) > 0)) {\r\n            return false;\r\n        }\r\n    } catch (ClassCastException cce) {\r\n        if (wantsCCE) {\r\n            throw cce;\r\n        }\r\n        return false;\r\n    }\r\n    Comparable max = getMaximum();\r\n    try {\r\n        if ((max != null) && ((max.compareTo(value)) < 0)) {\r\n            return false;\r\n        }\r\n    } catch (ClassCastException cce) {\r\n        if (wantsCCE) {\r\n            throw cce;\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(6225,'setAllowsNullValue(boolean)','org.jhotdraw.text.JavaNumberFormatter.setAllowsNullValue(boolean)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Allows/Disallows null values.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setAllowsNullValue(boolean newValue) {\r\n    allowsNullValue = newValue;\r\n}'),(6226,'setAppendsDotZero(boolean)','org.jhotdraw.text.JavaNumberFormatter.setAppendsDotZero(boolean)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Specifies whether \".0\" is appended to double and float\r\n * values. By default this is true.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setAppendsDotZero(boolean newValue) {\r\n    appendsDotZero = newValue;\r\n}'),(6227,'setMaximum(java.lang.Comparable)','org.jhotdraw.text.JavaNumberFormatter.setMaximum(java.lang.Comparable)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Sets the maximum permissible value. If the <code>valueClass</code> has\r\n * not been specified, and <code>max</code> is non null, the\r\n * <code>valueClass</code> will be set to that of the class of\r\n * <code>max</code>.\r\n *\r\n * @param max\r\n * 		Maximum legal value that can be input\r\n * @see #setValueClass\r\n */\r\npublic void setMaximum(Comparable max) {\r\n    if (((getValueClass()) == null) && (max != null)) {\r\n        setValueClass(max.getClass());\r\n    }\r\n    this.max = max;\r\n}'),(6228,'setMinimum(java.lang.Comparable)','org.jhotdraw.text.JavaNumberFormatter.setMinimum(java.lang.Comparable)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Sets the minimum permissible value. If the <code>valueClass</code> has\r\n * not been specified, and <code>minimum</code> is non null, the\r\n * <code>valueClass</code> will be set to that of the class of\r\n * <code>minimum</code>.\r\n *\r\n * @param minimum\r\n * 		Minimum legal value that can be input\r\n * @see #setValueClass\r\n */\r\npublic void setMinimum(Comparable minimum) {\r\n    if (((getValueClass()) == null) && (minimum != null)) {\r\n        setValueClass(minimum.getClass());\r\n    }\r\n    min = minimum;\r\n}'),(6229,'setScaleFactor(double)','org.jhotdraw.text.JavaNumberFormatter.setScaleFactor(double)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Changes the scale factor of the number formatter.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setScaleFactor(double newValue) {\r\n    scaleFactor = newValue;\r\n}'),(6230,'stringToValue(java.lang.String)','org.jhotdraw.text.JavaNumberFormatter.stringToValue(java.lang.String)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns the <code>Object</code> representation of the\r\n * <code>String</code> <code>text</code>.\r\n *\r\n * @param text\r\n * 		<code>String</code> to convert\r\n * @return <code>Object</code> representation of text\r\n * @throws ParseException\r\n * 		if there is an error in the conversion\r\n */\r\n@Override\r\npublic Object stringToValue(String text) throws ParseException {\r\n    if (((text == null) || ((text.length()) == 0)) && (getAllowsNullValue())) {\r\n        return null;\r\n    }\r\n    Class valueClass = getValueClass();\r\n    Object value;\r\n    if (valueClass != null) {\r\n        try {\r\n            if (valueClass == (Integer.class)) {\r\n                int v = Integer.parseInt(text);\r\n                v = ((int) (v / (scaleFactor)));\r\n                value = new Integer(v);\r\n            } else\r\n                if (valueClass == (Long.class)) {\r\n                    long v = Long.parseLong(text);\r\n                    v = ((long) (v / (scaleFactor)));\r\n                    value = new Long(v);\r\n                } else\r\n                    if (valueClass == (Float.class)) {\r\n                        float v = Float.parseFloat(text);\r\n                        v = ((float) (v / (scaleFactor)));\r\n                        value = new Float(v);\r\n                    } else\r\n                        if (valueClass == (Double.class)) {\r\n                            double v = Double.parseDouble(text);\r\n                            v = ((double) (v / (scaleFactor)));\r\n                            value = new Double(v);\r\n                        } else\r\n                            if (valueClass == (Byte.class)) {\r\n                                byte v = Byte.parseByte(text);\r\n                                v = ((byte) (v / (scaleFactor)));\r\n                                value = new Byte(v);\r\n                            } else\r\n                                if (valueClass == (Short.class)) {\r\n                                    short v = Short.parseShort(text);\r\n                                    v = ((short) (v / (scaleFactor)));\r\n                                    value = new Short(v);\r\n                                } else {\r\n                                    throw new ParseException((\"Unsupported value class \" + valueClass), 0);\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n        } catch (NumberFormatException e) {\r\n            throw new ParseException(e.getMessage(), 0);\r\n        }\r\n    } else {\r\n        throw new ParseException((\"Unsupported value class \" + valueClass), 0);\r\n    }\r\n    try {\r\n        if (!(isValidValue(value, true))) {\r\n            throw new ParseException(\"Value not within min/max range\", 0);\r\n        }\r\n    } catch (ClassCastException cce) {\r\n        throw new ParseException((\"Class cast exception comparing values: \" + cce), 0);\r\n    }\r\n    return value;\r\n}'),(6231,'valueToString(java.lang.Object)','org.jhotdraw.text.JavaNumberFormatter.valueToString(java.lang.Object)','636','org.jhotdraw.text.JavaNumberFormatter','/**\r\n * Returns a String representation of the Object <code>value</code>.\r\n * This invokes <code>format</code> on the current <code>Format</code>.\r\n *\r\n * @throws ParseException\r\n * 		if there is an error in the conversion\r\n * @param value\r\n * 		Value to convert\r\n * @return String representation of value\r\n */\r\n@Override\r\npublic String valueToString(Object value) throws ParseException {\r\n    if ((value == null) && (allowsNullValue)) {\r\n        return \"\";\r\n    }\r\n    if (value instanceof Double) {\r\n        double v = ((Double) (value)).doubleValue();\r\n        v *= scaleFactor;\r\n        String str = Double.toString(v);\r\n        if ((!(appendsDotZero)) && (str.endsWith(\".0\"))) {\r\n            str = str.substring(0, ((str.length()) - 2));\r\n        }\r\n        return str;\r\n    } else\r\n        if (value instanceof Float) {\r\n            float v = ((Float) (value)).floatValue();\r\n            v = ((float) (v * (scaleFactor)));\r\n            String str = Float.toString(v);\r\n            if ((appendsDotZero) && (str.endsWith(\".0\"))) {\r\n                str = str.substring(0, ((str.length()) - 2));\r\n            }\r\n            return str;\r\n        } else\r\n            if (value instanceof Long) {\r\n                long v = ((Long) (value)).longValue();\r\n                v = ((long) (v * (scaleFactor)));\r\n                return Long.toString(v);\r\n            } else\r\n                if (value instanceof Integer) {\r\n                    int v = ((Integer) (value)).intValue();\r\n                    v = ((int) (v * (scaleFactor)));\r\n                    return Integer.toString(v);\r\n                } else\r\n                    if (value instanceof Byte) {\r\n                        byte v = ((Byte) (value)).byteValue();\r\n                        v = ((byte) (v * (scaleFactor)));\r\n                        return Byte.toString(v);\r\n                    } else\r\n                        if (value instanceof Short) {\r\n                            short v = ((Short) (value)).shortValue();\r\n                            v = ((short) (v * (scaleFactor)));\r\n                            return Short.toString(v);\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    throw new ParseException((\"Value is of unsupported class \" + value), 0);\r\n}'),(6232,'-init-()','org.jhotdraw.undo.CompositeEdit.-init-()','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Creates new CompositeEdit.\r\n * Which uses CompoundEdit.getPresentatioName.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getPresentationName()\r\n */\r\npublic CompositeEdit() {\r\n    isSignificant = true;\r\n}'),(6233,'-init-(boolean)','org.jhotdraw.undo.CompositeEdit.-init-(boolean)','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Creates new CompositeEdit.\r\n * Which uses CompoundEdit.getPresentatioName.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getPresentationName()\r\n */\r\npublic CompositeEdit(boolean isSignificant) {\r\n    this.isSignificant = isSignificant;\r\n}'),(6234,'-init-(java.lang.String)','org.jhotdraw.undo.CompositeEdit.-init-(java.lang.String)','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Creates new CompositeEdit.\r\n * Which uses the given presentation name.\r\n * If the presentation name is null, then CompoundEdit.getPresentatioName\r\n * is used.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getPresentationName()\r\n */\r\npublic CompositeEdit(String presentationName) {\r\n    this.presentationName = presentationName;\r\n    isSignificant = true;\r\n}'),(6235,'-init-(java.lang.String,boolean)','org.jhotdraw.undo.CompositeEdit.-init-(java.lang.String,boolean)','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Creates new CompositeEdit.\r\n * Which uses the given presentation name.\r\n * If the presentation name is null, then CompoundEdit.getPresentatioName\r\n * is used.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getPresentationName()\r\n */\r\npublic CompositeEdit(String presentationName, boolean isSignificant) {\r\n    this.presentationName = presentationName;\r\n    this.isSignificant = isSignificant;\r\n}'),(6236,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.undo.CompositeEdit.addEdit(javax.swing.undo.UndoableEdit)','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * If this edit is inProgress, accepts anEdit and returns\r\n * true.\r\n *\r\n * <p>The last edit added to this CompositeEdit is given a\r\n * chance to addEdit(anEdit). If it refuses (returns false), anEdit is\r\n * given a chance to replaceEdit the last edit. If anEdit returns\r\n * false here, it is added to edits.</p>\r\n *\r\n * <p>If the CompositeEdit is added to itself, then method end()\r\n * is called, and true is returned.</p>\r\n */\r\npublic boolean addEdit(UndoableEdit anEdit) {\r\n    if (anEdit == (this)) {\r\n        end();\r\n        return true;\r\n    } else\r\n        if ((isInProgress()) && (anEdit instanceof CompositeEdit)) {\r\n            return true;\r\n        } else {\r\n            return super.addEdit(anEdit);\r\n        }\r\n\r\n}'),(6237,'getPresentationName()','org.jhotdraw.undo.CompositeEdit.getPresentationName()','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Returns the presentation name.\r\n * If the presentation name is null, then CompoundEdit.getPresentatioName\r\n * is returned.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getPresentationName()\r\n */\r\npublic String getPresentationName() {\r\n    return (presentationName) != null ? presentationName : super.getPresentationName();\r\n}'),(6238,'getRedoPresentationName()','org.jhotdraw.undo.CompositeEdit.getRedoPresentationName()','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Returns the redo presentation name.\r\n * If the presentation name is null, then CompoundEdit.getRedoPresentationName\r\n * is returned.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getRedoPresentationName()\r\n */\r\npublic String getRedoPresentationName() {\r\n    return (presentationName) != null ? ((UndoRedoManager.getLabels().getString(\"edit.redo.text\")) + \" \") + (presentationName) : super.getRedoPresentationName();\r\n}'),(6239,'getUndoPresentationName()','org.jhotdraw.undo.CompositeEdit.getUndoPresentationName()','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Returns the undo presentation name.\r\n * If the presentation name is null, then CompoundEdit.getUndoPresentationName\r\n * is returned.\r\n *\r\n * @see javax.swing.undo.CompoundEdit#getUndoPresentationName()\r\n */\r\npublic String getUndoPresentationName() {\r\n    return (presentationName) != null ? ((UndoRedoManager.getLabels().getString(\"edit.undo.text\")) + \" \") + (presentationName) : super.getUndoPresentationName();\r\n}'),(6240,'isSignificant()','org.jhotdraw.undo.CompositeEdit.isSignificant()','637','org.jhotdraw.undo.CompositeEdit','/**\r\n * Returns false if this edit is insignificant - for example one\r\n * that maintains the users selection, but does not change\r\n * any model state.\r\n */\r\npublic boolean isSignificant() {\r\n    return isSignificant ? super.isSignificant() : false;\r\n    // return isSignificant;\r\n}'),(6241,'setSignificant(boolean)','org.jhotdraw.undo.CompositeEdit.setSignificant(boolean)','637','org.jhotdraw.undo.CompositeEdit','public void setSignificant(boolean newValue) {\r\n    isSignificant = newValue;\r\n}'),(6242,'setVerbose(boolean)','org.jhotdraw.undo.CompositeEdit.setVerbose(boolean)','637','org.jhotdraw.undo.CompositeEdit','public void setVerbose(boolean b) {\r\n    isVerbose = b;\r\n}'),(6243,'-init-()','org.jhotdraw.undo.NonUndoableEdit.-init-()','638','org.jhotdraw.undo.NonUndoableEdit','/**\r\n * Creates a new instance.\r\n */\r\npublic NonUndoableEdit() {\r\n}'),(6244,'canRedo()','org.jhotdraw.undo.NonUndoableEdit.canRedo()','638','org.jhotdraw.undo.NonUndoableEdit','public boolean canRedo() {\r\n    return false;\r\n}'),(6245,'canUndo()','org.jhotdraw.undo.NonUndoableEdit.canUndo()','638','org.jhotdraw.undo.NonUndoableEdit','public boolean canUndo() {\r\n    return false;\r\n}'),(6246,'-init-()','org.jhotdraw.undo.UndoRedoManager.-init-()','641','org.jhotdraw.undo.UndoRedoManager','1() {\r\n}'),(6247,'addEdit(javax.swing.undo.UndoableEdit)','org.jhotdraw.undo.UndoRedoManager.addEdit(javax.swing.undo.UndoableEdit)','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * If inProgress, inserts anEdit at indexOfNextAdd, and removes\r\n * any old edits that were at indexOfNextAdd or later. The die\r\n * method is called on each edit that is removed is sent, in the\r\n * reverse of the order the edits were added. Updates\r\n * indexOfNextAdd.\r\n *\r\n * <p>If not inProgress, acts as a CompoundEdit</p>\r\n *\r\n * <p>Regardless of inProgress, if undoOrRedoInProgress,\r\n * calls die on each edit that is sent.</p>\r\n *\r\n * @see CompoundEdit#end\r\n * @see CompoundEdit#addEdit\r\n */\r\npublic boolean addEdit(UndoableEdit anEdit) {\r\n    if (UndoRedoManager.DEBUG)\r\n        System.out.println((\"UndoRedoManager.add \" + anEdit));\r\n\r\n    if (undoOrRedoInProgress) {\r\n        anEdit.die();\r\n        return true;\r\n    }\r\n    boolean success = super.addEdit(anEdit);\r\n    updateActions();\r\n    if ((success && (anEdit.isSignificant())) && ((editToBeUndone()) == anEdit)) {\r\n        setHasSignificantEdits(true);\r\n    }\r\n    return success;\r\n}'),(6248,'addPropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.undo.UndoRedoManager.addPropertyChangeListener(java.beans.PropertyChangeListener)','641','org.jhotdraw.undo.UndoRedoManager','public void addPropertyChangeListener(PropertyChangeListener listener) {\r\n    propertySupport.addPropertyChangeListener(listener);\r\n}'),(6249,'addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','org.jhotdraw.undo.UndoRedoManager.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','641','org.jhotdraw.undo.UndoRedoManager','public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {\r\n    propertySupport.addPropertyChangeListener(propertyName, listener);\r\n}'),(6250,'discardAllEdits()','org.jhotdraw.undo.UndoRedoManager.discardAllEdits()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Discards all edits.\r\n */\r\npublic void discardAllEdits() {\r\n    super.discardAllEdits();\r\n    updateActions();\r\n    setHasSignificantEdits(false);\r\n}'),(6251,'firePropertyChange(java.lang.String,boolean,boolean)','org.jhotdraw.undo.UndoRedoManager.firePropertyChange(java.lang.String,boolean,boolean)','641','org.jhotdraw.undo.UndoRedoManager','protected void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(6252,'firePropertyChange(java.lang.String,int,int)','org.jhotdraw.undo.UndoRedoManager.firePropertyChange(java.lang.String,int,int)','641','org.jhotdraw.undo.UndoRedoManager','protected void firePropertyChange(String propertyName, int oldValue, int newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(6253,'firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','org.jhotdraw.undo.UndoRedoManager.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)','641','org.jhotdraw.undo.UndoRedoManager','protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {\r\n    propertySupport.firePropertyChange(propertyName, oldValue, newValue);\r\n}'),(6254,'getLabels()','org.jhotdraw.undo.UndoRedoManager.getLabels()','641','org.jhotdraw.undo.UndoRedoManager','public static ResourceBundleUtil getLabels() {\r\n    if ((UndoRedoManager.labels) == null) {\r\n        UndoRedoManager.labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.undo.Labels\");\r\n    }\r\n    return UndoRedoManager.labels;\r\n}'),(6255,'getRedoAction()','org.jhotdraw.undo.UndoRedoManager.getRedoAction()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Gets the redo action for use as a Redo menu item.\r\n */\r\npublic Action getRedoAction() {\r\n    return redoAction;\r\n}'),(6256,'getUndoAction()','org.jhotdraw.undo.UndoRedoManager.getUndoAction()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Gets the undo action for use as an Undo menu item.\r\n */\r\npublic Action getUndoAction() {\r\n    return undoAction;\r\n}'),(6257,'hasSignificantEdits()','org.jhotdraw.undo.UndoRedoManager.hasSignificantEdits()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Returns true if at least one significant UndoableEdit\r\n * has been added since the last call to discardAllEdits.\r\n */\r\npublic boolean hasSignificantEdits() {\r\n    return hasSignificantEdits;\r\n}'),(6258,'redo()','org.jhotdraw.undo.UndoRedoManager.redo()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Redoes the last undone edit event.\r\n * The UndoRedoManager ignores all incoming UndoableEdit events,\r\n * while redo is in progress.\r\n */\r\npublic void redo() throws CannotUndoException {\r\n    undoOrRedoInProgress = true;\r\n    try {\r\n        super.redo();\r\n    } finally {\r\n        undoOrRedoInProgress = false;\r\n        updateActions();\r\n    }\r\n}'),(6259,'removePropertyChangeListener(java.beans.PropertyChangeListener)','org.jhotdraw.undo.UndoRedoManager.removePropertyChangeListener(java.beans.PropertyChangeListener)','641','org.jhotdraw.undo.UndoRedoManager','public void removePropertyChangeListener(PropertyChangeListener listener) {\r\n    propertySupport.removePropertyChangeListener(listener);\r\n}'),(6260,'removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','org.jhotdraw.undo.UndoRedoManager.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)','641','org.jhotdraw.undo.UndoRedoManager','public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\r\n    propertySupport.removePropertyChangeListener(propertyName, listener);\r\n}'),(6261,'setHasSignificantEdits(boolean)','org.jhotdraw.undo.UndoRedoManager.setHasSignificantEdits(boolean)','641','org.jhotdraw.undo.UndoRedoManager','public void setHasSignificantEdits(boolean newValue) {\r\n    boolean oldValue = hasSignificantEdits;\r\n    hasSignificantEdits = newValue;\r\n    firePropertyChange(\"hasSignificantEdits\", oldValue, newValue);\r\n}'),(6262,'setLocale(java.util.Locale)','org.jhotdraw.undo.UndoRedoManager.setLocale(java.util.Locale)','641','org.jhotdraw.undo.UndoRedoManager','public void setLocale(Locale l) {\r\n    UndoRedoManager.labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.undo.Labels\", l);\r\n}'),(6263,'undo()','org.jhotdraw.undo.UndoRedoManager.undo()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Undoes the last edit event.\r\n * The UndoRedoManager ignores all incoming UndoableEdit events,\r\n * while undo is in progress.\r\n */\r\npublic void undo() throws CannotUndoException {\r\n    undoOrRedoInProgress = true;\r\n    try {\r\n        super.undo();\r\n    } finally {\r\n        undoOrRedoInProgress = false;\r\n        updateActions();\r\n    }\r\n}'),(6264,'undoOrRedo()','org.jhotdraw.undo.UndoRedoManager.undoOrRedo()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Undoes or redoes the last edit event.\r\n * The UndoRedoManager ignores all incoming UndoableEdit events,\r\n * while undo or redo is in progress.\r\n */\r\npublic void undoOrRedo() throws CannotRedoException, CannotUndoException {\r\n    undoOrRedoInProgress = true;\r\n    try {\r\n        super.undoOrRedo();\r\n    } finally {\r\n        undoOrRedoInProgress = false;\r\n        updateActions();\r\n    }\r\n}'),(6265,'updateActions()','org.jhotdraw.undo.UndoRedoManager.updateActions()','641','org.jhotdraw.undo.UndoRedoManager','/**\r\n * Updates the properties of the UndoAction\r\n * and of the RedoAction.\r\n */\r\nprivate void updateActions() {\r\n    String label;\r\n    if (UndoRedoManager.DEBUG)\r\n        System.out.println((((((\"UndoManager.updateActions \" + (editToBeUndone())) + \" canUndo=\") + (canUndo())) + \" canRedo=\") + (canRedo())));\r\n\r\n    if (canUndo()) {\r\n        undoAction.setEnabled(true);\r\n        label = getUndoPresentationName();\r\n    } else {\r\n        undoAction.setEnabled(false);\r\n        label = UndoRedoManager.labels.getString(\"edit.undo.text\");\r\n    }\r\n    undoAction.putValue(Action.NAME, label);\r\n    undoAction.putValue(Action.SHORT_DESCRIPTION, label);\r\n    if (canRedo()) {\r\n        redoAction.setEnabled(true);\r\n        label = getRedoPresentationName();\r\n    } else {\r\n        redoAction.setEnabled(false);\r\n        label = UndoRedoManager.labels.getString(\"edit.redo.text\");\r\n    }\r\n    redoAction.putValue(Action.NAME, label);\r\n    redoAction.putValue(Action.SHORT_DESCRIPTION, label);\r\n}'),(6266,'-init-()','org.jhotdraw.undo.UndoRedoManager$RedoAction.-init-()','639','org.jhotdraw.undo.UndoRedoManager$RedoAction','public RedoAction() {\r\n    UndoRedoManager.labels.configureAction(this, \"edit.redo\");\r\n    setEnabled(false);\r\n}'),(6267,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.undo.UndoRedoManager$RedoAction.actionPerformed(java.awt.event.ActionEvent)','639','org.jhotdraw.undo.UndoRedoManager$RedoAction','/**\r\n * Invoked when an action occurs.\r\n */\r\npublic void actionPerformed(ActionEvent evt) {\r\n    try {\r\n        redo();\r\n    } catch (CannotRedoException e) {\r\n        System.out.println((\"Cannot redo: \" + e));\r\n    }\r\n}'),(6268,'-init-()','org.jhotdraw.undo.UndoRedoManager$UndoAction.-init-()','640','org.jhotdraw.undo.UndoRedoManager$UndoAction','public UndoAction() {\r\n    UndoRedoManager.labels.configureAction(this, \"edit.undo\");\r\n    setEnabled(false);\r\n}'),(6269,'actionPerformed(java.awt.event.ActionEvent)','org.jhotdraw.undo.UndoRedoManager$UndoAction.actionPerformed(java.awt.event.ActionEvent)','640','org.jhotdraw.undo.UndoRedoManager$UndoAction','/**\r\n * Invoked when an action occurs.\r\n */\r\npublic void actionPerformed(ActionEvent evt) {\r\n    try {\r\n        undo();\r\n    } catch (CannotUndoException e) {\r\n        System.err.println((\"Cannot undo: \" + e));\r\n        e.printStackTrace();\r\n    }\r\n}'),(6270,'-init-()','org.jhotdraw.util.Images.-init-()','642','org.jhotdraw.util.Images','/**\r\n * Prevent instance creation.\r\n */\r\nprivate Images() {\r\n}'),(6271,'createImage(java.net.URL)','org.jhotdraw.util.Images.createImage(java.net.URL)','642','org.jhotdraw.util.Images','public static Image createImage(URL resource) {\r\n    Image image = Toolkit.getDefaultToolkit().createImage(resource);\r\n    return image;\r\n}'),(6272,'hasAlpha(java.awt.Image)','org.jhotdraw.util.Images.hasAlpha(java.awt.Image)','642','org.jhotdraw.util.Images','/**\r\n * This method returns true if the specified image has transparent pixels\r\n *\r\n * Code taken from the Java Developers Almanac 1.4\r\n * http://javaalmanac.com/egs/java.awt.image/HasAlpha.html\r\n */\r\npublic static boolean hasAlpha(Image image) {\r\n    // If buffered image, the color model is readily available\r\n    if (image instanceof BufferedImage) {\r\n        BufferedImage bimage = ((BufferedImage) (image));\r\n        return bimage.getColorModel().hasAlpha();\r\n    }\r\n    // Use a pixel grabber to retrieve the images color model;\r\n    // grabbing a single pixel is usually sufficient\r\n    PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);\r\n    try {\r\n        pg.grabPixels();\r\n    } catch (InterruptedException e) {\r\n    }\r\n    // Get the images color model\r\n    ColorModel cm = pg.getColorModel();\r\n    return cm.hasAlpha();\r\n}'),(6273,'toBufferedImage(java.awt.Image)','org.jhotdraw.util.Images.toBufferedImage(java.awt.Image)','642','org.jhotdraw.util.Images','public static BufferedImage toBufferedImage(Image image) {\r\n    if (image instanceof BufferedImage) {\r\n        return ((BufferedImage) (image));\r\n    }\r\n    // This code ensures that all the pixels in the image are loaded\r\n    image = new ImageIcon(image).getImage();\r\n    // Create a buffered image with a format thats compatible with the screen\r\n    BufferedImage bimage = null;\r\n    if (System.getProperty(\"java.version\").startsWith(\"1.4.1_\")) {\r\n        // Workaround for Java 1.4.1 on Mac OS X.\r\n        // For this JVM, we always create an ARGB image to prevent a class\r\n        // cast exception in\r\n        // sun.awt.image.BufImgSurfaceData.createData(BufImgSurfaceData.java:434)\r\n        // when we attempt to draw the buffered image.\r\n        bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);\r\n    } else {\r\n        // Determine if the image has transparent pixels; for this methods\r\n        // implementation, see e661 Determining If an Image Has Transparent Pixels\r\n        boolean hasAlpha;\r\n        try {\r\n            hasAlpha = Images.hasAlpha(image);\r\n        } catch (IllegalAccessError e) {\r\n            // If we cant determine this, we assume that we have an alpha,\r\n            // in order not to loose data.\r\n            hasAlpha = true;\r\n        }\r\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n        try {\r\n            // Determine the type of transparency of the new buffered image\r\n            int transparency = Transparency.OPAQUE;\r\n            if (hasAlpha) {\r\n                transparency = Transparency.TRANSLUCENT;\r\n            }\r\n            // Create the buffered image\r\n            GraphicsDevice gs = ge.getDefaultScreenDevice();\r\n            GraphicsConfiguration gc = gs.getDefaultConfiguration();\r\n            bimage = gc.createCompatibleImage(image.getWidth(null), image.getHeight(null), transparency);\r\n        } catch (Exception e) {\r\n            // } catch (HeadlessException e) {\r\n            // The system does not have a screen\r\n        }\r\n        if (bimage == null) {\r\n            // Create a buffered image using the default color model\r\n            int type = BufferedImage.TYPE_INT_RGB;\r\n            if (hasAlpha) {\r\n                type = BufferedImage.TYPE_INT_ARGB;\r\n            }\r\n            bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);\r\n        }\r\n    }\r\n    // Copy image to buffered image\r\n    Graphics g = bimage.createGraphics();\r\n    // Paint the image onto the buffered image\r\n    g.drawImage(image, 0, 0, null);\r\n    g.dispose();\r\n    return bimage;\r\n}'),(6274,'toBufferedImage(java.awt.image.RenderedImage)','org.jhotdraw.util.Images.toBufferedImage(java.awt.image.RenderedImage)','642','org.jhotdraw.util.Images','/**\r\n * Converts an Image to BufferedImage. If the Image is already a\r\n * BufferedImage, the same image is returned.\r\n *\r\n * @param rImg\r\n * 		An Image.\r\n * @return A BufferedImage.\r\n */\r\npublic static BufferedImage toBufferedImage(RenderedImage rImg) {\r\n    BufferedImage image;\r\n    if (rImg instanceof BufferedImage) {\r\n        image = ((BufferedImage) (rImg));\r\n    } else {\r\n        Raster r = rImg.getData();\r\n        WritableRaster wr = WritableRaster.createWritableRaster(r.getSampleModel(), null);\r\n        rImg.copyData(wr);\r\n        image = new BufferedImage(rImg.getColorModel(), wr, rImg.getColorModel().isAlphaPremultiplied(), null);\r\n    }\r\n    return image;\r\n}'),(6275,'-init-()','org.jhotdraw.util.LocaleUtil.-init-()','643','org.jhotdraw.util.LocaleUtil','/**\r\n * Creates a new instance.\r\n */\r\npublic LocaleUtil() {\r\n}'),(6276,'getDefault()','org.jhotdraw.util.LocaleUtil.getDefault()','643','org.jhotdraw.util.LocaleUtil','public static Locale getDefault() {\r\n    return (LocaleUtil.defaultLocale) == null ? Locale.getDefault() : LocaleUtil.defaultLocale;\r\n}'),(6277,'setDefault(java.util.Locale)','org.jhotdraw.util.LocaleUtil.setDefault(java.util.Locale)','643','org.jhotdraw.util.LocaleUtil','public static void setDefault(Locale newValue) {\r\n    LocaleUtil.defaultLocale = newValue;\r\n}'),(6278,'-init-()','org.jhotdraw.util.Methods.-init-()','644','org.jhotdraw.util.Methods','/**\r\n * Prevent instance creation.\r\n */\r\nprivate Methods() {\r\n}'),(6279,'invoke(java.lang.Object,java.lang.String)','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified accessible parameterless method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @return The return value of the method.\r\n * @return NoSuchMethodException if the method does not exist or is not\r\naccessible.\r\n */\r\npublic static Object invoke(Object obj, String methodName) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(obj, new Object[0]);\r\n        return result;\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6280,'invoke(java.lang.Object,java.lang.String,boolean)','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String,boolean)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static Object invoke(Object obj, String methodName, boolean newValue) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[]{ Boolean.TYPE });\r\n        return method.invoke(obj, new Object[]{ new Boolean(newValue) });\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6281,'invoke(java.lang.Object,java.lang.String,float)','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String,float)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static Object invoke(Object obj, String methodName, float newValue) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[]{ Float.TYPE });\r\n        return method.invoke(obj, new Object[]{ new Float(newValue) });\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6282,'invoke(java.lang.Object,java.lang.String,int)','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String,int)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static Object invoke(Object obj, String methodName, int newValue) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[]{ Integer.TYPE });\r\n        return method.invoke(obj, new Object[]{ new Integer(newValue) });\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6283,'invoke(java.lang.Object,java.lang.String,java.lang.Class,java.lang.Object)','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String,java.lang.Class,java.lang.Object)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static Object invoke(Object obj, String methodName, Class clazz, Object newValue) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[]{ clazz });\r\n        return method.invoke(obj, new Object[]{ newValue });\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6284,'invoke(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static Object invoke(Object obj, String methodName, Class[] clazz, Object... newValue) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, clazz);\r\n        return method.invoke(obj, newValue);\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(((e.getCause()) != null ? e.getCause() : e));\r\n        throw error;\r\n    }\r\n}'),(6285,'invoke(java.lang.Object,java.lang.String,java.lang.String)','org.jhotdraw.util.Methods.invoke(java.lang.Object,java.lang.String,java.lang.String)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified accessible method with a string parameter if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param stringParameter\r\n * 		The String parameter\r\n * @return The return value of the method or METHOD_NOT_FOUND.\r\n * @return NoSuchMethodException if the method does not exist or is not accessible.\r\n */\r\npublic static Object invoke(Object obj, String methodName, String stringParameter) throws NoSuchMethodException {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[]{ String.class });\r\n        Object result = method.invoke(obj, new Object[]{ stringParameter });\r\n        return result;\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6286,'invokeGetter(java.lang.Object,java.lang.String,boolean)','org.jhotdraw.util.Methods.invokeGetter(java.lang.Object,java.lang.String,boolean)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified getter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param defaultValue\r\n * 		This value is returned, if the method does not exist.\r\n * @return The value returned by the getter method or the default value.\r\n */\r\npublic static boolean invokeGetter(Object obj, String methodName, boolean defaultValue) {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(obj, new Object[0]);\r\n        return ((Boolean) (result)).booleanValue();\r\n    } catch (NoSuchMethodException e) {\r\n        return defaultValue;\r\n    } catch (IllegalAccessException e) {\r\n        return defaultValue;\r\n    } catch (InvocationTargetException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(6287,'invokeGetter(java.lang.Object,java.lang.String,int)','org.jhotdraw.util.Methods.invokeGetter(java.lang.Object,java.lang.String,int)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified getter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param defaultValue\r\n * 		This value is returned, if the method does not exist.\r\n * @return The value returned by the getter method or the default value.\r\n */\r\npublic static int invokeGetter(Object obj, String methodName, int defaultValue) {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(obj, new Object[0]);\r\n        return ((Integer) (result)).intValue();\r\n    } catch (NoSuchMethodException e) {\r\n        return defaultValue;\r\n    } catch (IllegalAccessException e) {\r\n        return defaultValue;\r\n    } catch (InvocationTargetException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(6288,'invokeGetter(java.lang.Object,java.lang.String,java.lang.Object)','org.jhotdraw.util.Methods.invokeGetter(java.lang.Object,java.lang.String,java.lang.Object)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified getter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param defaultValue\r\n * 		This value is returned, if the method does not exist.\r\n * @return The value returned by the getter method or the default value.\r\n */\r\npublic static Object invokeGetter(Object obj, String methodName, Object defaultValue) {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(obj, new Object[0]);\r\n        return result;\r\n    } catch (NoSuchMethodException e) {\r\n        return defaultValue;\r\n    } catch (IllegalAccessException e) {\r\n        return defaultValue;\r\n    } catch (InvocationTargetException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(6289,'invokeGetter(java.lang.Object,java.lang.String,long)','org.jhotdraw.util.Methods.invokeGetter(java.lang.Object,java.lang.String,long)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified getter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param defaultValue\r\n * 		This value is returned, if the method does not exist.\r\n * @return The value returned by the getter method or the default value.\r\n */\r\npublic static long invokeGetter(Object obj, String methodName, long defaultValue) {\r\n    try {\r\n        Method method = obj.getClass().getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(obj, new Object[0]);\r\n        return ((Long) (result)).longValue();\r\n    } catch (NoSuchMethodException e) {\r\n        return defaultValue;\r\n    } catch (IllegalAccessException e) {\r\n        return defaultValue;\r\n    } catch (InvocationTargetException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(6290,'invokeIfExists(java.lang.Object,java.lang.String)','org.jhotdraw.util.Methods.invokeIfExists(java.lang.Object,java.lang.String)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static void invokeIfExists(Object obj, String methodName) {\r\n    try {\r\n        Methods.invoke(obj, methodName);\r\n    } catch (NoSuchMethodException e) {\r\n        // ignore\r\n    }\r\n}'),(6291,'invokeIfExists(java.lang.Object,java.lang.String,boolean)','org.jhotdraw.util.Methods.invokeIfExists(java.lang.Object,java.lang.String,boolean)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static void invokeIfExists(Object obj, String methodName, boolean newValue) {\r\n    try {\r\n        Methods.invoke(obj, methodName, newValue);\r\n    } catch (NoSuchMethodException e) {\r\n        // ignore\r\n    }\r\n}'),(6292,'invokeIfExists(java.lang.Object,java.lang.String,float)','org.jhotdraw.util.Methods.invokeIfExists(java.lang.Object,java.lang.String,float)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static void invokeIfExists(Object obj, String methodName, float newValue) {\r\n    try {\r\n        Methods.invoke(obj, methodName, newValue);\r\n    } catch (NoSuchMethodException e) {\r\n        // ignore\r\n    }\r\n}'),(6293,'invokeIfExists(java.lang.Object,java.lang.String,java.lang.Class,java.lang.Object)','org.jhotdraw.util.Methods.invokeIfExists(java.lang.Object,java.lang.String,java.lang.Class,java.lang.Object)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static void invokeIfExists(Object obj, String methodName, Class clazz, Object newValue) {\r\n    try {\r\n        Methods.invoke(obj, methodName, clazz, newValue);\r\n    } catch (NoSuchMethodException e) {\r\n        // ignore\r\n    }\r\n}'),(6294,'invokeIfExistsWithEnum(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.util.Methods.invokeIfExistsWithEnum(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified setter method if it exists.\r\n *\r\n * @param obj\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n */\r\npublic static void invokeIfExistsWithEnum(Object obj, String methodName, String enumClassName, String enumValueName) {\r\n    try {\r\n        Class enumClass = Class.forName(enumClassName);\r\n        Object enumValue = Methods.invokeStatic(\"java.lang.Enum\", \"valueOf\", new Class[]{ Class.class, String.class }, new Object[]{ enumClass, enumValueName });\r\n        Methods.invoke(obj, methodName, enumClass, enumValue);\r\n    } catch (ClassNotFoundException e) {\r\n        // ignore\r\n        e.printStackTrace();\r\n    } catch (NoSuchMethodException e) {\r\n        // ignore\r\n        e.printStackTrace();\r\n    }\r\n}'),(6295,'invokeStatic(java.lang.Class,java.lang.String)','org.jhotdraw.util.Methods.invokeStatic(java.lang.Class,java.lang.String)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified accessible parameterless method if it exists.\r\n *\r\n * @param clazz\r\n * 		The class on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @return The return value of the method or METHOD_NOT_FOUND.\r\n * @return NoSuchMethodException if the method does not exist or is not accessible.\r\n */\r\npublic static Object invokeStatic(Class clazz, String methodName) throws NoSuchMethodException {\r\n    try {\r\n        Method method = clazz.getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(null, new Object[0]);\r\n        return result;\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6296,'invokeStatic(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object[])','org.jhotdraw.util.Methods.invokeStatic(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object[])','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified parameterless method if it exists.\r\n *\r\n * @param clazz\r\n * 		The class on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param types\r\n * 		The parameter types.\r\n * @param values\r\n * 		The parameter values.\r\n * @return The return value of the method.\r\n * @return NoSuchMethodException if the method does not exist or is not accessible.\r\n */\r\npublic static Object invokeStatic(Class clazz, String methodName, Class[] types, Object[] values) throws NoSuchMethodException {\r\n    try {\r\n        Method method = clazz.getMethod(methodName, types);\r\n        Object result = method.invoke(null, values);\r\n        return result;\r\n    } catch (IllegalAccessException e) {\r\n        throw new NoSuchMethodException((methodName + \" is not accessible\"));\r\n    } catch (InvocationTargetException e) {\r\n        // The method is not supposed to throw exceptions\r\n        throw new InternalError(e.getMessage());\r\n    }\r\n}'),(6297,'invokeStatic(java.lang.String,java.lang.String)','org.jhotdraw.util.Methods.invokeStatic(java.lang.String,java.lang.String)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified accessible parameterless method if it exists.\r\n *\r\n * @param clazz\r\n * 		The class on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @return The return value of the method.\r\n * @return NoSuchMethodException if the method does not exist or is not accessible.\r\n */\r\npublic static Object invokeStatic(String clazz, String methodName) throws NoSuchMethodException {\r\n    try {\r\n        return Methods.invokeStatic(Class.forName(clazz), methodName);\r\n    } catch (ClassNotFoundException e) {\r\n        throw new NoSuchMethodException(((\"class \" + clazz) + \" not found\"));\r\n    }\r\n}'),(6298,'invokeStatic(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[])','org.jhotdraw.util.Methods.invokeStatic(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[])','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified parameterless method if it exists.\r\n *\r\n * @param clazz\r\n * 		The class on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param types\r\n * 		The parameter types.\r\n * @param values\r\n * 		The parameter values.\r\n * @return The return value of the method.\r\n * @return NoSuchMethodException if the method does not exist or is not accessible.\r\n */\r\npublic static Object invokeStatic(String clazz, String methodName, Class[] types, Object[] values) throws NoSuchMethodException {\r\n    try {\r\n        return Methods.invokeStatic(Class.forName(clazz), methodName, types, values);\r\n    } catch (ClassNotFoundException e) {\r\n        throw new NoSuchMethodException(((\"class \" + clazz) + \" not found\"));\r\n    }\r\n}'),(6299,'invokeStatic(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.Object)','org.jhotdraw.util.Methods.invokeStatic(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.Object)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified parameterless method if it exists.\r\n *\r\n * @param clazz\r\n * 		The class on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param types\r\n * 		The parameter types.\r\n * @param values\r\n * 		The parameter values.\r\n * @param defaultValue\r\n * 		The default value.\r\n * @return The return value of the method or the default value if the method\r\ndoes not exist or is not accessible.\r\n */\r\npublic static Object invokeStatic(String clazz, String methodName, Class[] types, Object[] values, Object defaultValue) {\r\n    try {\r\n        return Methods.invokeStatic(Class.forName(clazz), methodName, types, values);\r\n    } catch (ClassNotFoundException e) {\r\n        return defaultValue;\r\n    } catch (NoSuchMethodException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(6300,'invokeStaticGetter(java.lang.Class,java.lang.String,boolean)','org.jhotdraw.util.Methods.invokeStaticGetter(java.lang.Class,java.lang.String,boolean)','644','org.jhotdraw.util.Methods','/**\r\n * Invokes the specified getter method if it exists.\r\n *\r\n * @param clazz\r\n * 		The object on which to invoke the method.\r\n * @param methodName\r\n * 		The name of the method.\r\n * @param defaultValue\r\n * 		This value is returned, if the method does not exist.\r\n * @return The value returned by the getter method or the default value.\r\n */\r\npublic static boolean invokeStaticGetter(Class clazz, String methodName, boolean defaultValue) {\r\n    try {\r\n        Method method = clazz.getMethod(methodName, new Class[0]);\r\n        Object result = method.invoke(null, new Object[0]);\r\n        return ((Boolean) (result)).booleanValue();\r\n    } catch (NoSuchMethodException e) {\r\n        return defaultValue;\r\n    } catch (IllegalAccessException e) {\r\n        return defaultValue;\r\n    } catch (InvocationTargetException e) {\r\n        return defaultValue;\r\n    }\r\n}'),(6301,'-init-(java.lang.String,java.util.Locale)','org.jhotdraw.util.ResourceBundleUtil.-init-(java.lang.String,java.util.Locale)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Creates a new ResouceBundleUtil which wraps\r\n * the provided resource bundle.\r\n */\r\npublic ResourceBundleUtil(String baseName, Locale locale) {\r\n    this.locale = locale;\r\n    this.baseName = baseName;\r\n    this.resource = ResourceBundle.getBundle(baseName, locale);\r\n}'),(6302,'configureAction(javax.swing.Action,java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.configureAction(javax.swing.Action,java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureAction(Action action, String argument) {\r\n    configureAction(action, argument, getBaseClass());\r\n}'),(6303,'configureAction(javax.swing.Action,java.lang.String,java.lang.Class)','org.jhotdraw.util.ResourceBundleUtil.configureAction(javax.swing.Action,java.lang.String,java.lang.Class)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureAction(Action action, String argument, Class baseClass) {\r\n    action.putValue(Action.NAME, getTextProperty(argument));\r\n    String shortDescription = getToolTipTextProperty(argument);\r\n    if ((shortDescription != null) && ((shortDescription.length()) > 0)) {\r\n        action.putValue(Action.SHORT_DESCRIPTION, shortDescription);\r\n    }\r\n    action.putValue(Action.ACCELERATOR_KEY, getAcceleratorProperty(argument));\r\n    action.putValue(Action.MNEMONIC_KEY, new Integer(getMnemonicProperty(argument)));\r\n    action.putValue(Action.SMALL_ICON, getIconProperty(argument, baseClass));\r\n}'),(6304,'configureButton(javax.swing.AbstractButton,java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.configureButton(javax.swing.AbstractButton,java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureButton(AbstractButton button, String argument) {\r\n    configureButton(button, argument, getBaseClass());\r\n}'),(6305,'configureButton(javax.swing.AbstractButton,java.lang.String,java.lang.Class)','org.jhotdraw.util.ResourceBundleUtil.configureButton(javax.swing.AbstractButton,java.lang.String,java.lang.Class)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureButton(AbstractButton button, String argument, Class baseClass) {\r\n    button.setText(getTextProperty(argument));\r\n    // button.setACCELERATOR_KEY, getAcceleratorProperty(argument));\r\n    // action.putValue(Action.MNEMONIC_KEY, new Integer(getMnemonicProperty(argument)));\r\n    button.setIcon(getIconProperty(argument, baseClass));\r\n    button.setToolTipText(getToolTipTextProperty(argument));\r\n}'),(6306,'configureMenu(javax.swing.JMenuItem,java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.configureMenu(javax.swing.JMenuItem,java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureMenu(JMenuItem menu, String argument) {\r\n    menu.setText(getTextProperty(argument));\r\n    if (!(menu instanceof JMenu)) {\r\n        menu.setAccelerator(getAcceleratorProperty(argument));\r\n    }\r\n    menu.setMnemonic(getMnemonicProperty(argument));\r\n    menu.setIcon(getIconProperty(argument, baseClass));\r\n}'),(6307,'configureToolBarButton(javax.swing.AbstractButton,java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.configureToolBarButton(javax.swing.AbstractButton,java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureToolBarButton(AbstractButton button, String argument) {\r\n    configureToolBarButton(button, argument, getBaseClass());\r\n}'),(6308,'configureToolBarButton(javax.swing.AbstractButton,java.lang.String,java.lang.Class)','org.jhotdraw.util.ResourceBundleUtil.configureToolBarButton(javax.swing.AbstractButton,java.lang.String,java.lang.Class)','645','org.jhotdraw.util.ResourceBundleUtil','public void configureToolBarButton(AbstractButton button, String argument, Class baseClass) {\r\n    Icon icon = getIconProperty(argument, baseClass);\r\n    if (icon != null) {\r\n        button.setIcon(getIconProperty(argument, baseClass));\r\n        button.setText(null);\r\n    } else {\r\n        button.setIcon(null);\r\n        button.setText(getTextProperty(argument));\r\n    }\r\n    button.setToolTipText(getToolTipTextProperty(argument));\r\n}'),(6309,'createMenuItem(javax.swing.Action,java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.createMenuItem(javax.swing.Action,java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','public JMenuItem createMenuItem(Action a, String baseName) {\r\n    JMenuItem mi = new JMenuItem();\r\n    mi.setAction(a);\r\n    configureMenu(mi, baseName);\r\n    return mi;\r\n}'),(6310,'format(java.lang.String,java.lang.Object[])','org.jhotdraw.util.ResourceBundleUtil.format(java.lang.String,java.lang.Object[])','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Returns a formatted string using java.util.Formatter().\r\n *\r\n * @param key\r\n * 		\r\n * @param arguments\r\n * 		\r\n * @return formatted String\r\n */\r\npublic String format(String key, Object... arguments) {\r\n    // return String.format(resource.getLocale(), getString(key), arguments);\r\n    return new Formatter(resource.getLocale()).format(getString(key), arguments).toString();\r\n}'),(6311,'generateFallbackKeys(java.lang.String,java.util.ArrayList)','org.jhotdraw.util.ResourceBundleUtil.generateFallbackKeys(java.lang.String,java.util.ArrayList)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Generates fallback keys by processing all property name modifiers\r\n * in the key.\r\n */\r\nprivate void generateFallbackKeys(String key, ArrayList<String> fallbackKeys) {\r\n    int p1 = key.indexOf(\"[$\");\r\n    if (p1 == (-1)) {\r\n        fallbackKeys.add(key);\r\n    } else {\r\n        int p2 = key.indexOf(], (p1 + 2));\r\n        if (p2 == (-1)) {\r\n            return;\r\n        }\r\n        String modifierKey = key.substring((p1 + 2), p2);\r\n        String[] modifierValues = ResourceBundleUtil.propertyNameModifiers.get(modifierKey);\r\n        if (modifierValues == null) {\r\n            modifierValues = new String[]{ \"default\" };\r\n        }\r\n        for (String mv : modifierValues) {\r\n            generateFallbackKeys((((key.substring(0, p1)) + mv) + (key.substring((p2 + 1)))), fallbackKeys);\r\n        }\r\n    }\r\n}'),(6312,'getAcceleratorProperty(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getAcceleratorProperty(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Gets a KeyStroke for a JavaBeans \"accelerator\" property from the ResourceBundle.\r\n * <BR>Convenience method.\r\n *\r\n * @param key\r\n * 		The key of the property. This method adds \".accelerator\" to the key.\r\n * @return <code>javax.swing.KeyStroke.getKeyStroke(value)</code>.\r\nReturns null if the property is missing.\r\n */\r\npublic KeyStroke getAcceleratorProperty(String key) {\r\n    KeyStroke ks = null;\r\n    try {\r\n        String s;\r\n        s = getStringRecursive((key + \".accelerator\"));\r\n        ks = (s == null) ? ((KeyStroke) (null)) : KeyStroke.getKeyStroke(s);\r\n    } catch (MissingResourceException e) {\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"] \"\") + key) + \".accelerator\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n    } catch (NoSuchElementException e) {\r\n    }\r\n    return ks;\r\n}'),(6313,'getBaseClass()','org.jhotdraw.util.ResourceBundleUtil.getBaseClass()','645','org.jhotdraw.util.ResourceBundleUtil','public Class getBaseClass() {\r\n    return baseClass;\r\n}'),(6314,'getBundle(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getBundle(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get the appropriate ResourceBundle subclass.\r\n *\r\n * @see java.util.ResourceBundle\r\n */\r\npublic static ResourceBundleUtil getBundle(String baseName) throws MissingResourceException {\r\n    return ResourceBundleUtil.getBundle(baseName, LocaleUtil.getDefault());\r\n}'),(6315,'getBundle(java.lang.String,java.util.Locale)','org.jhotdraw.util.ResourceBundleUtil.getBundle(java.lang.String,java.util.Locale)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get the appropriate ResourceBundle subclass.\r\n *\r\n * @see java.util.ResourceBundle\r\n */\r\npublic static ResourceBundleUtil getBundle(String baseName, Locale locale) throws MissingResourceException {\r\n    ResourceBundleUtil r;\r\n    r = new ResourceBundleUtil(baseName, locale);\r\n    return r;\r\n}'),(6316,'getFormatted(java.lang.String,java.lang.Object[])','org.jhotdraw.util.ResourceBundleUtil.getFormatted(java.lang.String,java.lang.Object[])','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Returns a formatted string using javax.text.MessageFormat.\r\n *\r\n * @param key\r\n * 		\r\n * @param arguments\r\n * 		\r\n * @return formatted String\r\n */\r\npublic String getFormatted(String key, Object... arguments) {\r\n    return MessageFormat.format(getString(key), arguments);\r\n}'),(6317,'getIconProperty(java.lang.String,java.lang.Class)','org.jhotdraw.util.ResourceBundleUtil.getIconProperty(java.lang.String,java.lang.Class)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get an image icon from the ResourceBundle.\r\n * <br>Convenience method .\r\n *\r\n * @param key\r\n * 		The key of the property. This method appends \".icon\" to the key.\r\n * @return The value of the property. Returns null\r\nif the property is missing.\r\n */\r\npublic ImageIcon getIconProperty(String key, Class baseClass) {\r\n    try {\r\n        String rsrcName = getStringRecursive((key + \".icon\"));\r\n        if (rsrcName.equals(\"\")) {\r\n            return null;\r\n        }\r\n        URL url = baseClass.getResource(rsrcName);\r\n        if ((ResourceBundleUtil.isVerbose) && (url == null)) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"].getIconProperty \"\") + key) + \".icon\" not found.\"));\r\n        }\r\n        return url == null ? null : new ImageIcon(url);\r\n    } catch (MissingResourceException e) {\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"].getIconProperty \"\") + key) + \".icon\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}'),(6318,'getInteger(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getInteger(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get an Integer from the ResourceBundle.\r\n * <br>Convenience method to save casting.\r\n *\r\n * @param key\r\n * 		The key of the property.\r\n * @return The value of the property. Returns -1\r\nif the property is missing.\r\n */\r\npublic Integer getInteger(String key) {\r\n    try {\r\n        return Integer.valueOf(getStringRecursive(key));\r\n    } catch (MissingResourceException e) {\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"] \"\") + key) + \"\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n        return new Integer((-1));\r\n    }\r\n}'),(6319,'getKeyStroke(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getKeyStroke(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get a KeyStroke from the ResourceBundle.\r\n * <BR>Convenience method.\r\n *\r\n * @param key\r\n * 		The key of the property.\r\n * @return <code>javax.swing.KeyStroke.getKeyStroke(value)</code>.\r\nReturns null if the property is missing.\r\n */\r\npublic KeyStroke getKeyStroke(String key) {\r\n    KeyStroke ks = null;\r\n    try {\r\n        String s = getStringRecursive(key);\r\n        ks = (s == null) ? ((KeyStroke) (null)) : KeyStroke.getKeyStroke(s);\r\n    } catch (NoSuchElementException e) {\r\n    }\r\n    return ks;\r\n}'),(6320,'getMnemonic(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getMnemonic(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get a Mnemonic from the ResourceBundle.\r\n * <br>Convenience method.\r\n *\r\n * @param key\r\n * 		The key of the property.\r\n * @return The first char of the value of the property.\r\nReturns \0 if the property is missing.\r\n */\r\npublic char getMnemonic(String key) {\r\n    String s = getStringRecursive(key);\r\n    return (s == null) || ((s.length()) == 0) ? u0000 : s.charAt(0);\r\n}'),(6321,'getMnemonicProperty(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getMnemonicProperty(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Gets a char for a JavaBeans \"mnemonic\" property from the ResourceBundle.\r\n * <br>Convenience method.\r\n *\r\n * @param key\r\n * 		The key of the property. This method appends \".mnemonic\" to the key.\r\n * @return The first char of the value of the property.\r\nReturns \0 if the property is missing.\r\n */\r\npublic char getMnemonicProperty(String key) {\r\n    String s;\r\n    try {\r\n        s = getStringRecursive((key + \".mnemonic\"));\r\n    } catch (MissingResourceException e) {\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"] \"\") + key) + \".mnemonic\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n        s = null;\r\n    }\r\n    return (s == null) || ((s.length()) == 0) ? u0000 : s.charAt(0);\r\n}'),(6322,'getString(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getString(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get a String from the ResourceBundle.\r\n * <br>Convenience method to save casting.\r\n *\r\n * @param key\r\n * 		The key of the property.\r\n * @return The value of the property. Returns the key\r\nif the property is missing.\r\n */\r\npublic String getString(String key) {\r\n    try {\r\n        String value = getStringRecursive(key);\r\n        // System.out.println(\"ResourceBundleUtil \"+baseName+\" get(\"+key+\"):\"+value);\r\n        return value;\r\n    } catch (MissingResourceException e) {\r\n        // System.out.println(\"ResourceBundleUtil \"+baseName+\" get(\"+key+\"):***MISSING***\");\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"] \"\") + key) + \"\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n        return key;\r\n    }\r\n}'),(6323,'getStringRecursive(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getStringRecursive(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Recursive part of the getString method.\r\n *\r\n * @param key\r\n * 		\r\n * @return \r\n * @throws java.util.MissingResourceException\r\n * 		\r\n */\r\nprivate String getStringRecursive(String key) throws MissingResourceException {\r\n    String value = resource.getString(key);\r\n    // Substitute placeholders in the value\r\n    for (int p1 = value.indexOf(\"${\"); p1 != (-1); p1 = value.indexOf(\"${\")) {\r\n        int p2 = value.indexOf(}, (p1 + 2));\r\n        if (p2 == (-1)) {\r\n            break;\r\n        }\r\n        String placeholderKey = value.substring((p1 + 2), p2);\r\n        ArrayList<String> fallbackKeys = new ArrayList<String>();\r\n        generateFallbackKeys(placeholderKey, fallbackKeys);\r\n        boolean resourceFound = false;\r\n        for (String fk : fallbackKeys) {\r\n            try {\r\n                value = ((value.substring(0, p1)) + (getStringRecursive(fk))) + (value.substring((p2 + 1)));\r\n                resourceFound = true;\r\n                break;\r\n            } catch (MissingResourceException e) {\r\n            }\r\n        }\r\n        if (resourceFound == false) {\r\n            throw new MissingResourceException(\"Resource not found.\", baseName, key);\r\n        }\r\n    }\r\n    return value;\r\n}'),(6324,'getTextProperty(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getTextProperty(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get a String for a JavaBeans \"text\" property from the ResourceBundle.\r\n * <br>Convenience method.\r\n *\r\n * @param key\r\n * 		The key of the property. This method appends \".text\" to the key.\r\n * @return The ToolTip. Returns null if no tooltip is defined.\r\n */\r\npublic String getTextProperty(String key) {\r\n    try {\r\n        String value = getStringRecursive((key + \".text\"));\r\n        return value;\r\n    } catch (MissingResourceException e) {\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"] \"\") + key) + \".text\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}'),(6325,'getToolTipTextProperty(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.getToolTipTextProperty(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Get a String for a JavaBeans \"toolTipText\" property from the ResourceBundle.\r\n * <br>Convenience method.\r\n *\r\n * @param key\r\n * 		The key of the property. This method appends \".toolTipText\" to the key.\r\n * @return The ToolTip. Returns null if no tooltip is defined.\r\n */\r\npublic String getToolTipTextProperty(String key) {\r\n    try {\r\n        String value = getStringRecursive((key + \".toolTipText\"));\r\n        return value;\r\n    } catch (MissingResourceException e) {\r\n        if (ResourceBundleUtil.isVerbose) {\r\n            System.err.println(((((\"Warning ResourceBundleUtil[\" + (baseName)) + \"] \"\") + key) + \".toolTipText\" not found.\"));\r\n            // e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}'),(6326,'getWrappedBundle()','org.jhotdraw.util.ResourceBundleUtil.getWrappedBundle()','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Returns the wrapped resource bundle.\r\n *\r\n * @return The wrapped resource bundle.\r\n */\r\npublic ResourceBundle getWrappedBundle() {\r\n    return resource;\r\n}'),(6327,'isVerbose()','org.jhotdraw.util.ResourceBundleUtil.isVerbose()','645','org.jhotdraw.util.ResourceBundleUtil','public static boolean isVerbose() {\r\n    return ResourceBundleUtil.isVerbose;\r\n}'),(6328,'putPropertyNameModifier(java.lang.String,java.lang.String[])','org.jhotdraw.util.ResourceBundleUtil.putPropertyNameModifier(java.lang.String,java.lang.String[])','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Puts a property name modifier along with a fallback chain.\r\n *\r\n * @param name\r\n * 		The name of the modifier.\r\n * @param fallbackChain\r\n * 		The fallback chain of the modifier.\r\n */\r\npublic static void putPropertyNameModifier(String name, String... fallbackChain) {\r\n    ResourceBundleUtil.propertyNameModifiers.put(name, fallbackChain);\r\n}'),(6329,'readObject(java.io.ObjectInputStream)','org.jhotdraw.util.ResourceBundleUtil.readObject(java.io.ObjectInputStream)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Read object from ObjectInputStream and re-establish ResourceBundle.\r\n */\r\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\r\n    // our \"pseudo-constructor\"\r\n    in.defaultReadObject();\r\n    // re-establish the \"resource\" variable\r\n    this.resource = ResourceBundle.getBundle(baseName, locale);\r\n}'),(6330,'removePropertyNameModifier(java.lang.String)','org.jhotdraw.util.ResourceBundleUtil.removePropertyNameModifier(java.lang.String)','645','org.jhotdraw.util.ResourceBundleUtil','/**\r\n * Removes a property name modifier.\r\n */\r\npublic static void removePropertyNameModifier(String name) {\r\n    ResourceBundleUtil.propertyNameModifiers.remove(name);\r\n}'),(6331,'setBaseClass(java.lang.Class)','org.jhotdraw.util.ResourceBundleUtil.setBaseClass(java.lang.Class)','645','org.jhotdraw.util.ResourceBundleUtil','public void setBaseClass(Class baseClass) {\r\n    this.baseClass = baseClass;\r\n}'),(6332,'setVerbose(boolean)','org.jhotdraw.util.ResourceBundleUtil.setVerbose(boolean)','645','org.jhotdraw.util.ResourceBundleUtil','public static void setVerbose(boolean newValue) {\r\n    ResourceBundleUtil.isVerbose = newValue;\r\n}'),(6333,'toString()','org.jhotdraw.util.ResourceBundleUtil.toString()','645','org.jhotdraw.util.ResourceBundleUtil','@Override\r\npublic String toString() {\r\n    return (((super.toString()) + \"[\") + (resource)) + \"]\";\r\n}'),(6334,'-init-(java.util.List)','org.jhotdraw.util.ReversedList.-init-(java.util.List)','646','org.jhotdraw.util.ReversedList','/**\r\n * Creates a new instance of ReversedList\r\n */\r\npublic ReversedList(List<T> target) {\r\n    this.target = target;\r\n}'),(6335,'get(int)','org.jhotdraw.util.ReversedList.get(int)','646','org.jhotdraw.util.ReversedList','public T get(int index) {\r\n    return target.get((((target.size()) - 1) - index));\r\n}'),(6336,'size()','org.jhotdraw.util.ReversedList.size()','646','org.jhotdraw.util.ReversedList','public int size() {\r\n    return target.size();\r\n}'),(6337,'-init-()','org.jhotdraw.util.prefs.PreferencesUtil.-init-()','647','org.jhotdraw.util.prefs.PreferencesUtil','/**\r\n * Creates a new instance.\r\n */\r\nprivate PreferencesUtil() {\r\n}'),(6338,'installFramePrefsHandler(java.util.prefs.Preferences,java.lang.String,java.awt.Window)','org.jhotdraw.util.prefs.PreferencesUtil.installFramePrefsHandler(java.util.prefs.Preferences,java.lang.String,java.awt.Window)','647','org.jhotdraw.util.prefs.PreferencesUtil','/**\r\n * Installs a frame preferences handler.\r\n * On first run, sets the window to its preferred size at the top left\r\n * corner of the screen.\r\n * On subsequent runs, sets the window the last size and location where\r\n * the user had placed it before.\r\n *\r\n * @param prefs\r\n * 		Preferences for storing/retrieving preferences values.\r\n * @param name\r\n * 		Base name of the preference.\r\n * @param window\r\n * 		The window for which to track preferences.\r\n */\r\npublic static void installFramePrefsHandler(final Preferences prefs, final String name, Window window) {\r\n    GraphicsConfiguration conf = window.getGraphicsConfiguration();\r\n    Rectangle screenBounds = conf.getBounds();\r\n    Insets screenInsets = window.getToolkit().getScreenInsets(conf);\r\n    screenBounds.x += screenInsets.left;\r\n    screenBounds.y += screenInsets.top;\r\n    screenBounds.width -= (screenInsets.left) + (screenInsets.right);\r\n    screenBounds.height -= (screenInsets.top) + (screenInsets.bottom);\r\n    Dimension preferredSize = window.getPreferredSize();\r\n    Dimension minSize = window.getMinimumSize();\r\n    Rectangle bounds = new Rectangle(prefs.getInt((name + \".x\"), 0), prefs.getInt((name + \".y\"), 0), Math.max(minSize.width, prefs.getInt((name + \".width\"), preferredSize.width)), Math.max(minSize.height, prefs.getInt((name + \".height\"), preferredSize.height)));\r\n    if (!(screenBounds.contains(bounds))) {\r\n        bounds.x = (screenBounds.x) + (((screenBounds.width) - (bounds.width)) / 2);\r\n        bounds.y = (screenBounds.y) + (((screenBounds.height) - (bounds.height)) / 2);\r\n        Rectangle.intersect(screenBounds, bounds, bounds);\r\n    }\r\n    window.setBounds(bounds);\r\n    window.addComponentListener(new ComponentAdapter() {\r\n        public void componentMoved(ComponentEvent evt) {\r\n            prefs.putInt((name + \".x\"), evt.getComponent().getX());\r\n            prefs.putInt((name + \".y\"), evt.getComponent().getY());\r\n        }\r\n\r\n        public void componentResized(ComponentEvent evt) {\r\n            prefs.putInt((name + \".width\"), evt.getComponent().getWidth());\r\n            prefs.putInt((name + \".height\"), evt.getComponent().getHeight());\r\n        }\r\n    });\r\n}'),(6339,'installInternalFramePrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JInternalFrame,javax.swing.JDesktopPane)','org.jhotdraw.util.prefs.PreferencesUtil.installInternalFramePrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JInternalFrame,javax.swing.JDesktopPane)','647','org.jhotdraw.util.prefs.PreferencesUtil','/**\r\n * Installs an intenal frame preferences handler.\r\n * On first run, sets the frame to its preferred size at the top left\r\n * corner of the desktop pane.\r\n * On subsequent runs, sets the frame the last size and location where\r\n * the user had placed it before.\r\n *\r\n * @param prefs\r\n * 		Preferences for storing/retrieving preferences values.\r\n * @param name\r\n * 		Base name of the preference.\r\n * @param window\r\n * 		The window for which to track preferences.\r\n */\r\npublic static void installInternalFramePrefsHandler(final Preferences prefs, final String name, JInternalFrame window, JDesktopPane desktop) {\r\n    Rectangle screenBounds = desktop.getBounds();\r\n    screenBounds.setLocation(0, 0);\r\n    Insets screenInsets = desktop.getInsets();\r\n    screenBounds.x += screenInsets.left;\r\n    screenBounds.y += screenInsets.top;\r\n    screenBounds.width -= (screenInsets.left) + (screenInsets.right);\r\n    screenBounds.height -= (screenInsets.top) + (screenInsets.bottom);\r\n    Dimension preferredSize = window.getPreferredSize();\r\n    Dimension minSize = window.getMinimumSize();\r\n    Rectangle bounds = new Rectangle(prefs.getInt((name + \".x\"), 0), prefs.getInt((name + \".y\"), 0), Math.max(minSize.width, prefs.getInt((name + \".width\"), preferredSize.width)), Math.max(minSize.height, prefs.getInt((name + \".height\"), preferredSize.height)));\r\n    if (!(screenBounds.contains(bounds))) {\r\n        bounds.x = (screenBounds.x) + (((screenBounds.width) - (bounds.width)) / 2);\r\n        bounds.y = (screenBounds.y) + (((screenBounds.height) - (bounds.height)) / 2);\r\n        Rectangle.intersect(screenBounds, bounds, bounds);\r\n    }\r\n    window.setBounds(bounds);\r\n    window.addComponentListener(new ComponentAdapter() {\r\n        public void componentMoved(ComponentEvent evt) {\r\n            prefs.putInt((name + \".x\"), evt.getComponent().getX());\r\n            prefs.putInt((name + \".y\"), evt.getComponent().getY());\r\n        }\r\n\r\n        public void componentResized(ComponentEvent evt) {\r\n            prefs.putInt((name + \".width\"), evt.getComponent().getWidth());\r\n            prefs.putInt((name + \".height\"), evt.getComponent().getHeight());\r\n        }\r\n    });\r\n}'),(6340,'installPalettePrefsHandler(java.util.prefs.Preferences,java.lang.String,java.awt.Window)','org.jhotdraw.util.prefs.PreferencesUtil.installPalettePrefsHandler(java.util.prefs.Preferences,java.lang.String,java.awt.Window)','647','org.jhotdraw.util.prefs.PreferencesUtil','/**\r\n * Installs a palette preferences handler.\r\n * On first run, sets the palette to its preferred location at the top left\r\n * corner of the screen.\r\n * On subsequent runs, sets the palette the last location where\r\n * the user had placed it before.\r\n *\r\n * @param prefs\r\n * 		Preferences for storing/retrieving preferences values.\r\n * @param name\r\n * 		Base name of the preference.\r\n * @param window\r\n * 		The window for which to track preferences.\r\n */\r\npublic static void installPalettePrefsHandler(final Preferences prefs, final String name, Window window) {\r\n    PreferencesUtil.installPalettePrefsHandler(prefs, name, window, 0);\r\n}'),(6341,'installPalettePrefsHandler(java.util.prefs.Preferences,java.lang.String,java.awt.Window,int)','org.jhotdraw.util.prefs.PreferencesUtil.installPalettePrefsHandler(java.util.prefs.Preferences,java.lang.String,java.awt.Window,int)','647','org.jhotdraw.util.prefs.PreferencesUtil','public static void installPalettePrefsHandler(final Preferences prefs, final String name, Window window, int x) {\r\n    GraphicsConfiguration conf = window.getGraphicsConfiguration();\r\n    Rectangle screenBounds = conf.getBounds();\r\n    Insets screenInsets = window.getToolkit().getScreenInsets(conf);\r\n    screenBounds.x += screenInsets.left;\r\n    screenBounds.y += screenInsets.top;\r\n    screenBounds.width -= (screenInsets.left) + (screenInsets.right);\r\n    screenBounds.height -= (screenInsets.top) + (screenInsets.bottom);\r\n    Dimension preferredSize = window.getPreferredSize();\r\n    Rectangle bounds = new Rectangle(prefs.getInt((name + \".x\"), (x + (screenBounds.x))), prefs.getInt((name + \".y\"), (0 + (screenBounds.y))), preferredSize.width, preferredSize.height);\r\n    if (!(screenBounds.contains(bounds))) {\r\n        bounds.x = screenBounds.x;\r\n        bounds.y = screenBounds.y;\r\n    }\r\n    window.setBounds(bounds);\r\n    window.addComponentListener(new ComponentAdapter() {\r\n        public void componentMoved(ComponentEvent evt) {\r\n            prefs.putInt((name + \".x\"), evt.getComponent().getX());\r\n            prefs.putInt((name + \".y\"), evt.getComponent().getY());\r\n        }\r\n    });\r\n}'),(6342,'installPrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JTabbedPane)','org.jhotdraw.util.prefs.PreferencesUtil.installPrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JTabbedPane)','647','org.jhotdraw.util.prefs.PreferencesUtil','public static void installPrefsHandler(Preferences prefs, String string, JTabbedPane tabbedPane) {\r\n    throw new UnsupportedOperationException(\"Not yet implemented\");\r\n}'),(6343,'installTabbedPanePrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JTabbedPane)','org.jhotdraw.util.prefs.PreferencesUtil.installTabbedPanePrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JTabbedPane)','647','org.jhotdraw.util.prefs.PreferencesUtil','/**\r\n * Installs a JTabbedPane preferences handler.\r\n * On first run, sets the JTabbedPane to its preferred tab.\r\n *\r\n * @param prefs\r\n * 		Preferences for storing/retrieving preferences values.\r\n * @param name\r\n * 		Base name of the preference.\r\n * @param tabbedPane\r\n * 		The JTabbedPane for which to track preferences.\r\n */\r\npublic static void installTabbedPanePrefsHandler(final Preferences prefs, final String name, final JTabbedPane tabbedPane) {\r\n    int selectedTab = prefs.getInt(name, 0);\r\n    try {\r\n        tabbedPane.setSelectedIndex(selectedTab);\r\n    } catch (IndexOutOfBoundsException e) {\r\n    }\r\n    tabbedPane.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            prefs.putInt(name, tabbedPane.getSelectedIndex());\r\n        }\r\n    });\r\n}'),(6344,'installToolBarPrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JToolBar)','org.jhotdraw.util.prefs.PreferencesUtil.installToolBarPrefsHandler(java.util.prefs.Preferences,java.lang.String,javax.swing.JToolBar)','647','org.jhotdraw.util.prefs.PreferencesUtil','/**\r\n * Installs a toolbar preferences handler.\r\n * On first run, sets the toolbar to BorderLayout.TOP.\r\n * On subsequent runs, set the toolbar to the last BorderLayout location.\r\n *\r\n * @param prefs\r\n * 		Preferences for storing/retrieving preferences values.\r\n * @param name\r\n * 		Base name of the preference.\r\n * @param toolbar\r\n * 		The JToolBar for which to track preferences.\r\n */\r\npublic static void installToolBarPrefsHandler(final Preferences prefs, final String name, JToolBar toolbar) {\r\n    new ToolBarPrefsHandler(toolbar, name, prefs);\r\n}'),(6345,'-init-(javax.swing.JToolBar,java.lang.String,java.util.prefs.Preferences)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.-init-(javax.swing.JToolBar,java.lang.String,java.util.prefs.Preferences)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public ToolBarPrefsHandler(JToolBar toolbar, String prefsPrefix, Preferences prefs) {\r\n    this.toolbar = toolbar;\r\n    this.prefsPrefix = prefsPrefix;\r\n    this.prefs = prefs;\r\n    String constraint = prefs.get((prefsPrefix + \".constraint\"), BorderLayout.NORTH);\r\n    int orientation = ((constraint.equals(BorderLayout.NORTH)) || (constraint.equals(BorderLayout.SOUTH))) ? JToolBar.HORIZONTAL : JToolBar.VERTICAL;\r\n    toolbar.setOrientation(orientation);\r\n    toolbar.getParent().add(constraint, toolbar);\r\n    toolbar.setVisible(prefs.getBoolean((prefsPrefix + \".visible\"), true));\r\n    /* if (prefs.getBoolean(prefsPrefix+\".isFloating\", false)) {\n    makeToolBarFloat();\n    }\n     */\r\n    toolbar.addComponentListener(this);\r\n    toolbar.addAncestorListener(this);\r\n}'),(6346,'ancestorAdded(javax.swing.event.AncestorEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.ancestorAdded(javax.swing.event.AncestorEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public void ancestorAdded(AncestorEvent event) {\r\n    locationChanged();\r\n}'),(6347,'ancestorMoved(javax.swing.event.AncestorEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.ancestorMoved(javax.swing.event.AncestorEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public void ancestorMoved(AncestorEvent event) {\r\n    if ((toolbar.getUI()) instanceof BasicToolBarUI) {\r\n        if (((BasicToolBarUI) (toolbar.getUI())).isFloating()) {\r\n            locationChanged();\r\n        }\r\n    }\r\n}'),(6348,'ancestorRemoved(javax.swing.event.AncestorEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.ancestorRemoved(javax.swing.event.AncestorEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public void ancestorRemoved(AncestorEvent event) {\r\n    if ((toolbar.getUI()) instanceof BasicToolBarUI) {\r\n        if (((BasicToolBarUI) (toolbar.getUI())).isFloating()) {\r\n            locationChanged();\r\n        }\r\n    }\r\n}'),(6349,'componentHidden(java.awt.event.ComponentEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.componentHidden(java.awt.event.ComponentEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','/* XXX - This does not work\nprivate void makeToolBarFloat() {\nBasicToolBarUI ui = (BasicToolBarUI) toolbar.getUI();\nWindow window = SwingUtilities.getWindowAncestor(toolbar);\nSystem.out.println(\"Window Ancestor:\"+window+\" instanceof Frame:\"+(window instanceof Frame));\nui.setFloating(true, new Point(\nprefs.getInt(prefsPrefix+\".floatingX\", 0),\nprefs.getInt(prefsPrefix+\".floatingY\", 0)\n));\nwindow = SwingUtilities.getWindowAncestor(toolbar);\nwindow.setLocation(\nprefs.getInt(prefsPrefix+\".floatingX\", 0),\nprefs.getInt(prefsPrefix+\".floatingY\", 0)\n);\nwindow.toFront();\n}\n */\r\npublic void componentHidden(ComponentEvent e) {\r\n    prefs.putBoolean(((prefsPrefix) + \".visible\"), false);\r\n}'),(6350,'componentMoved(java.awt.event.ComponentEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.componentMoved(java.awt.event.ComponentEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public void componentMoved(ComponentEvent e) {\r\n    locationChanged();\r\n}'),(6351,'componentResized(java.awt.event.ComponentEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.componentResized(java.awt.event.ComponentEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public void componentResized(ComponentEvent e) {\r\n    locationChanged();\r\n}'),(6352,'componentShown(java.awt.event.ComponentEvent)','org.jhotdraw.util.prefs.ToolBarPrefsHandler.componentShown(java.awt.event.ComponentEvent)','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','public void componentShown(ComponentEvent e) {\r\n    prefs.putBoolean(((prefsPrefix) + \".visible\"), true);\r\n}'),(6353,'locationChanged()','org.jhotdraw.util.prefs.ToolBarPrefsHandler.locationChanged()','648','org.jhotdraw.util.prefs.ToolBarPrefsHandler','private void locationChanged() {\r\n    // FIXME : use reflection to get hold of method isFloating.\r\n    if ((toolbar.getUI()) instanceof BasicToolBarUI) {\r\n        BasicToolBarUI ui = ((BasicToolBarUI) (toolbar.getUI()));\r\n        boolean floating = ui.isFloating();\r\n        prefs.putBoolean(((prefsPrefix) + \".isFloating\"), floating);\r\n        if (floating) {\r\n            Window window = SwingUtilities.getWindowAncestor(toolbar);\r\n            prefs.putInt(((prefsPrefix) + \".floatingX\"), window.getX());\r\n            prefs.putInt(((prefsPrefix) + \".floatingY\"), window.getY());\r\n        } else\r\n            if ((toolbar.getParent()) != null) {\r\n                int x = toolbar.getX();\r\n                int y = toolbar.getY();\r\n                Insets insets = toolbar.getParent().getInsets();\r\n                String constraint;\r\n                if ((x == (insets.left)) && (y == (insets.top))) {\r\n                    constraint = ((toolbar.getOrientation()) == (JToolBar.HORIZONTAL)) ? BorderLayout.NORTH : BorderLayout.WEST;\r\n                } else {\r\n                    constraint = ((toolbar.getOrientation()) == (JToolBar.HORIZONTAL)) ? BorderLayout.SOUTH : BorderLayout.EAST;\r\n                }\r\n                prefs.put(((prefsPrefix) + \".constraint\"), constraint);\r\n            }\r\n\r\n    } else {\r\n        if ((toolbar.getParent()) != null) {\r\n            int x = toolbar.getX();\r\n            int y = toolbar.getY();\r\n            Insets insets = toolbar.getParent().getInsets();\r\n            String constraint;\r\n            if ((x == (insets.left)) && (y == (insets.top))) {\r\n                constraint = ((toolbar.getOrientation()) == (JToolBar.HORIZONTAL)) ? BorderLayout.NORTH : BorderLayout.WEST;\r\n            } else {\r\n                constraint = ((toolbar.getOrientation()) == (JToolBar.HORIZONTAL)) ? BorderLayout.SOUTH : BorderLayout.EAST;\r\n            }\r\n            prefs.put(((prefsPrefix) + \".constraint\"), constraint);\r\n        }\r\n    }\r\n}'),(6354,'create(java.lang.String)','org.jhotdraw.xml.DOMFactory.create(java.lang.String)','649','org.jhotdraw.xml.DOMFactory','/**\r\n * Creates an object from the specified element name.\r\n */\r\npublic Object create(String name);'),(6355,'createEnum(java.lang.String,java.lang.String)','org.jhotdraw.xml.DOMFactory.createEnum(java.lang.String,java.lang.String)','649','org.jhotdraw.xml.DOMFactory','/**\r\n * Creates an enum from the specified element name.\r\n */\r\npublic Enum createEnum(String name, String value);'),(6356,'getEnumName(java.lang.Enum)','org.jhotdraw.xml.DOMFactory.getEnumName(java.lang.Enum)','649','org.jhotdraw.xml.DOMFactory','/**\r\n * Returns the element tag name for the specified Enum class.\r\n */\r\npublic String getEnumName(Enum o);'),(6357,'getEnumValue(java.lang.Enum)','org.jhotdraw.xml.DOMFactory.getEnumValue(java.lang.Enum)','649','org.jhotdraw.xml.DOMFactory','/**\r\n * Returns the enum tag name for the specified Enum instance.\r\n */\r\npublic String getEnumValue(Enum o);'),(6358,'getName(org.jhotdraw.xml.DOMStorable)','org.jhotdraw.xml.DOMFactory.getName(org.jhotdraw.xml.DOMStorable)','649','org.jhotdraw.xml.DOMFactory','/**\r\n * Returns the element name for the specified object.\r\n * Note: The element names \"string\", \"int\", \"float\", \"long\", \"double\",\r\n * \"boolean\", \"enum\" and \"null\"  are reserved and must not be returned by\r\n * this operation.\r\n */\r\npublic String getName(DOMStorable o);'),(6359,'closeElement()','org.jhotdraw.xml.DOMInput.closeElement()','650','org.jhotdraw.xml.DOMInput','/**\r\n * Closes the current element of the DOM Document.\r\n * The parent of the current element becomes the current element.\r\n *\r\n * @exception IllegalArgumentException if the provided tagName does\r\nnot match the tag name of the element.\r\n */\r\npublic void closeElement();'),(6360,'getAttribute(java.lang.String,boolean)','org.jhotdraw.xml.DOMInput.getAttribute(java.lang.String,boolean)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic boolean getAttribute(String name, boolean defaultValue);'),(6361,'getAttribute(java.lang.String,double)','org.jhotdraw.xml.DOMInput.getAttribute(java.lang.String,double)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic double getAttribute(String name, double defaultValue);'),(6362,'getAttribute(java.lang.String,int)','org.jhotdraw.xml.DOMInput.getAttribute(java.lang.String,int)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic int getAttribute(String name, int defaultValue);'),(6363,'getAttribute(java.lang.String,java.lang.String)','org.jhotdraw.xml.DOMInput.getAttribute(java.lang.String,java.lang.String)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic String getAttribute(String name, String defaultValue);'),(6364,'getElementCount()','org.jhotdraw.xml.DOMInput.getElementCount()','650','org.jhotdraw.xml.DOMInput','/**\r\n * Returns the number of child elements of the current element.\r\n */\r\npublic int getElementCount();'),(6365,'getElementCount(java.lang.String)','org.jhotdraw.xml.DOMInput.getElementCount(java.lang.String)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Returns the number of child elements with the specified tag name\r\n * of the current element.\r\n */\r\npublic int getElementCount(String tagName);'),(6366,'getInheritedAttribute(java.lang.String)','org.jhotdraw.xml.DOMInput.getInheritedAttribute(java.lang.String)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document and of\r\n * all parent DOM elements.\r\n */\r\npublic List<String> getInheritedAttribute(String name);'),(6367,'getTagName()','org.jhotdraw.xml.DOMInput.getTagName()','650','org.jhotdraw.xml.DOMInput','/**\r\n * Returns the tag name of the current element.\r\n */\r\npublic String getTagName();'),(6368,'getText()','org.jhotdraw.xml.DOMInput.getText()','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets the text of the current element of the DOM Document.\r\n */\r\npublic String getText();'),(6369,'getText(java.lang.String)','org.jhotdraw.xml.DOMInput.getText(java.lang.String)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Gets the text of the current element of the DOM Document.\r\n */\r\npublic String getText(String defaultValue);'),(6370,'openElement(int)','org.jhotdraw.xml.DOMInput.openElement(int)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Opens the element with the specified index and makes it the current node.\r\n */\r\npublic void openElement(int index) throws IOException;'),(6371,'openElement(java.lang.String)','org.jhotdraw.xml.DOMInput.openElement(java.lang.String)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Opens the last element with the specified name and makes it the current node.\r\n */\r\npublic void openElement(String tagName) throws IOException;'),(6372,'openElement(java.lang.String,int)','org.jhotdraw.xml.DOMInput.openElement(java.lang.String,int)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Opens the element with the specified name and index and makes it the\r\n * current node.\r\n */\r\npublic void openElement(String tagName, int index) throws IOException;'),(6373,'readObject()','org.jhotdraw.xml.DOMInput.readObject()','650','org.jhotdraw.xml.DOMInput','/**\r\n * Reads an object from the current element.\r\n */\r\npublic Object readObject() throws IOException;'),(6374,'readObject(int)','org.jhotdraw.xml.DOMInput.readObject(int)','650','org.jhotdraw.xml.DOMInput','/**\r\n * Reads an object from the current element.\r\n */\r\npublic Object readObject(int index) throws IOException;'),(6375,'addAttribute(java.lang.String,boolean)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,boolean)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, boolean value);'),(6376,'addAttribute(java.lang.String,boolean,boolean)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,boolean,boolean)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document if it is\r\n * different from the default value.\r\n */\r\npublic void addAttribute(String name, boolean value, boolean defaultValue);'),(6377,'addAttribute(java.lang.String,double)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,double)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, double value);'),(6378,'addAttribute(java.lang.String,double,double)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,double,double)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document if it is\r\n * different from the default value.\r\n */\r\npublic void addAttribute(String name, double value, double defaultValue);'),(6379,'addAttribute(java.lang.String,float)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,float)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, float value);'),(6380,'addAttribute(java.lang.String,float,float)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,float,float)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document if it is\r\n * different from the default value.\r\n */\r\npublic void addAttribute(String name, float value, float defaultValue);'),(6381,'addAttribute(java.lang.String,int)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,int)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, int value);'),(6382,'addAttribute(java.lang.String,int,int)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,int,int)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document if it is\r\n * different from the default value.\r\n */\r\npublic void addAttribute(String name, int value, int defaultValue);'),(6383,'addAttribute(java.lang.String,java.lang.String)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,java.lang.String)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, String value);'),(6384,'addAttribute(java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.xml.DOMOutput.addAttribute(java.lang.String,java.lang.String,java.lang.String)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document if it is\r\n * different from the default value.\r\n */\r\npublic void addAttribute(String name, String value, String defaultValue);'),(6385,'addComment(java.lang.String)','org.jhotdraw.xml.DOMOutput.addComment(java.lang.String)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds a comment to the current element of the DOM Document.\r\n */\r\npublic void addComment(String comment);'),(6386,'addText(java.lang.String)','org.jhotdraw.xml.DOMOutput.addText(java.lang.String)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds a text to current element of the DOM Document.\r\n * Note: Multiple consecutives texts will be merged.\r\n */\r\npublic void addText(String text);'),(6387,'closeElement()','org.jhotdraw.xml.DOMOutput.closeElement()','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Closes the current element of the DOM Document.\r\n * The parent of the current element becomes the current element.\r\n *\r\n * @exception IllegalArgumentException if the provided tagName does\r\nnot match the tag name of the element.\r\n */\r\npublic void closeElement();'),(6388,'getPrototype()','org.jhotdraw.xml.DOMOutput.getPrototype()','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Returns a prototype for the object currently being written.\r\n * This can be used, to reduce the amount of data written to DOMOutput.\r\n * For example, by not writing object attributes, which have the same values\r\n * as the prototype.\r\n */\r\npublic Object getPrototype();'),(6389,'openElement(java.lang.String)','org.jhotdraw.xml.DOMOutput.openElement(java.lang.String)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Adds a new element to the DOM Document and opens it.\r\n * The new element is added as a child to the current element in the DOM\r\n * document. Then it becomes the current element.\r\n * The element must be closed using closeElement.\r\n */\r\npublic void openElement(String tagName);'),(6390,'setDoctype(java.lang.String)','org.jhotdraw.xml.DOMOutput.setDoctype(java.lang.String)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Sets the doctype for the XML document.\r\n */\r\npublic void setDoctype(String doctype);'),(6391,'writeObject(java.lang.Object)','org.jhotdraw.xml.DOMOutput.writeObject(java.lang.Object)','651','org.jhotdraw.xml.DOMOutput','/**\r\n * Writes an object.\r\n */\r\npublic void writeObject(Object o) throws IOException;'),(6392,'read(org.jhotdraw.xml.DOMInput)','org.jhotdraw.xml.DOMStorable.read(org.jhotdraw.xml.DOMInput)','652','org.jhotdraw.xml.DOMStorable','public void read(DOMInput in) throws IOException;'),(6393,'write(org.jhotdraw.xml.DOMOutput)','org.jhotdraw.xml.DOMStorable.write(org.jhotdraw.xml.DOMOutput)','652','org.jhotdraw.xml.DOMStorable','public void write(DOMOutput out) throws IOException;'),(6394,'-init-()','org.jhotdraw.xml.DefaultDOMFactory.-init-()','653','org.jhotdraw.xml.DefaultDOMFactory','/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultDOMFactory() {\r\n}'),(6395,'addEnum(java.lang.String,java.lang.Enum)','org.jhotdraw.xml.DefaultDOMFactory.addEnum(java.lang.String,java.lang.Enum)','653','org.jhotdraw.xml.DefaultDOMFactory','/**\r\n * Adds an Enum value to the DOMFactory.\r\n */\r\npublic void addEnum(String value, Enum e) {\r\n    DefaultDOMFactory.enumToValueMap.put(e, value);\r\n    Set<Enum> enums;\r\n    if (DefaultDOMFactory.valueToEnumMap.containsKey(value)) {\r\n        enums = DefaultDOMFactory.valueToEnumMap.get(value);\r\n    } else {\r\n        enums = new HashSet<Enum>();\r\n        DefaultDOMFactory.valueToEnumMap.put(value, enums);\r\n    }\r\n    enums.add(e);\r\n}'),(6396,'addEnumClass(java.lang.String,java.lang.Class)','org.jhotdraw.xml.DefaultDOMFactory.addEnumClass(java.lang.String,java.lang.Class)','653','org.jhotdraw.xml.DefaultDOMFactory','/**\r\n * Adds an Enum class to the DOMFactory.\r\n */\r\npublic void addEnumClass(String name, Class c) {\r\n    DefaultDOMFactory.enumClassToNameMap.put(c, name);\r\n    DefaultDOMFactory.nameToEnumClassMap.put(name, c);\r\n}'),(6397,'addStorable(java.lang.String,org.jhotdraw.xml.DOMStorable)','org.jhotdraw.xml.DefaultDOMFactory.addStorable(java.lang.String,org.jhotdraw.xml.DOMStorable)','653','org.jhotdraw.xml.DefaultDOMFactory','/**\r\n * Adds a DOMStorable prototype to the DOMFactory.\r\n */\r\npublic void addStorable(String name, DOMStorable prototype) {\r\n    DefaultDOMFactory.nameToPrototypeMap.put(name, prototype);\r\n    DefaultDOMFactory.classToNameMap.put(prototype.getClass(), name);\r\n}'),(6398,'addStorableClass(java.lang.String,java.lang.Class)','org.jhotdraw.xml.DefaultDOMFactory.addStorableClass(java.lang.String,java.lang.Class)','653','org.jhotdraw.xml.DefaultDOMFactory','/**\r\n * Adds a DOMStorable class to the DOMFactory.\r\n */\r\npublic void addStorableClass(String name, Class c) {\r\n    DefaultDOMFactory.nameToPrototypeMap.put(name, c);\r\n    DefaultDOMFactory.classToNameMap.put(c, name);\r\n}'),(6399,'create(java.lang.String)','org.jhotdraw.xml.DefaultDOMFactory.create(java.lang.String)','653','org.jhotdraw.xml.DefaultDOMFactory','/**\r\n * Creates a DOMStorable object.\r\n */\r\npublic Object create(String name) {\r\n    Object o = DefaultDOMFactory.nameToPrototypeMap.get(name);\r\n    if (o == null) {\r\n        throw new IllegalArgumentException((\"Storable name not known to factory: \" + name));\r\n    }\r\n    if (o instanceof Class) {\r\n        try {\r\n            return ((Class) (o)).newInstance();\r\n        } catch (Exception e) {\r\n            IllegalArgumentException error = new IllegalArgumentException((\"Storable class not instantiable by factory: \" + name));\r\n            error.initCause(e);\r\n            throw error;\r\n        }\r\n    } else {\r\n        try {\r\n            return o.getClass().getMethod(\"clone\", ((Class[]) (null))).invoke(o, ((Object[]) (null)));\r\n        } catch (Exception e) {\r\n            IllegalArgumentException error = new IllegalArgumentException((\"Storable prototype not cloneable by factory. Name: \" + name));\r\n            error.initCause(e);\r\n            throw error;\r\n        }\r\n    }\r\n}'),(6400,'createEnum(java.lang.String,java.lang.String)','org.jhotdraw.xml.DefaultDOMFactory.createEnum(java.lang.String,java.lang.String)','653','org.jhotdraw.xml.DefaultDOMFactory','@SuppressWarnings(\"unchecked\")\r\npublic Enum createEnum(String name, String value) {\r\n    Class enumClass = DefaultDOMFactory.nameToEnumClassMap.get(name);\r\n    if (enumClass == null) {\r\n        throw new IllegalArgumentException((\"Enum name not known to factory:\" + name));\r\n    }\r\n    Set<Enum> enums = DefaultDOMFactory.valueToEnumMap.get(value);\r\n    if (enums == null) {\r\n        return Enum.valueOf(enumClass, value);\r\n    }\r\n    for (Enum e : enums) {\r\n        if ((e.getClass()) == enumClass) {\r\n            return e;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException((\"Enum value not known to factory:\" + value));\r\n}'),(6401,'getEnumName(java.lang.Enum)','org.jhotdraw.xml.DefaultDOMFactory.getEnumName(java.lang.Enum)','653','org.jhotdraw.xml.DefaultDOMFactory','public String getEnumName(Enum e) {\r\n    String name = DefaultDOMFactory.enumClassToNameMap.get(e.getClass());\r\n    if (name == null) {\r\n        throw new IllegalArgumentException((\"Enum class not known to factory:\" + (e.getClass())));\r\n    }\r\n    return name;\r\n}'),(6402,'getEnumValue(java.lang.Enum)','org.jhotdraw.xml.DefaultDOMFactory.getEnumValue(java.lang.Enum)','653','org.jhotdraw.xml.DefaultDOMFactory','public String getEnumValue(Enum e) {\r\n    return DefaultDOMFactory.enumToValueMap.containsKey(e) ? DefaultDOMFactory.enumToValueMap.get(e) : e.toString();\r\n}'),(6403,'getName(org.jhotdraw.xml.DOMStorable)','org.jhotdraw.xml.DefaultDOMFactory.getName(org.jhotdraw.xml.DOMStorable)','653','org.jhotdraw.xml.DefaultDOMFactory','public String getName(DOMStorable o) {\r\n    String name = DefaultDOMFactory.classToNameMap.get(o.getClass());\r\n    if (name == null) {\r\n        throw new IllegalArgumentException((((\"Storable class not known to factory. Storable:\" + o) + \" Factory:\") + (this.getClass())));\r\n    }\r\n    return name;\r\n}'),(6404,'-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)','org.jhotdraw.xml.JavaxDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)','654','org.jhotdraw.xml.JavaxDOMInput','public JavaxDOMInput(DOMFactory factory, InputStream in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        document = JavaxDOMInput.getBuilder().parse(in);\r\n        current = document;\r\n    } catch (SAXException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(6405,'-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)','org.jhotdraw.xml.JavaxDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)','654','org.jhotdraw.xml.JavaxDOMInput','public JavaxDOMInput(DOMFactory factory, Reader in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        document = JavaxDOMInput.getBuilder().parse(new InputSource(in));\r\n        current = document;\r\n    } catch (SAXException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(6406,'closeElement()','org.jhotdraw.xml.JavaxDOMInput.closeElement()','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Closes the current element of the DOM Document.\r\n * The parent of the current element becomes the current element.\r\n *\r\n * @exception IllegalArgumentException if the provided tagName does\r\nnot match the tag name of the element.\r\n */\r\npublic void closeElement() {\r\n    /* if (! ((Element) current).getTagName().equals(tagName)) {\n    throw new IllegalArgumentException(\"Attempt to close wrong element:\"+tagName +\"!=\"+((Element) current).getTagName());\n    }\n     */\r\n    current = current.getParentNode();\r\n}'),(6407,'getAttribute(java.lang.String,boolean)','org.jhotdraw.xml.JavaxDOMInput.getAttribute(java.lang.String,boolean)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic boolean getAttribute(String name, boolean defaultValue) {\r\n    String value = ((Element) (current)).getAttribute(name);\r\n    return (value.length()) == 0 ? defaultValue : Boolean.valueOf(value).booleanValue();\r\n}'),(6408,'getAttribute(java.lang.String,double)','org.jhotdraw.xml.JavaxDOMInput.getAttribute(java.lang.String,double)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic double getAttribute(String name, double defaultValue) {\r\n    String value = ((Element) (current)).getAttribute(name);\r\n    return (value.length()) == 0 ? defaultValue : Double.parseDouble(value);\r\n}'),(6409,'getAttribute(java.lang.String,int)','org.jhotdraw.xml.JavaxDOMInput.getAttribute(java.lang.String,int)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic int getAttribute(String name, int defaultValue) {\r\n    String value = ((Element) (current)).getAttribute(name);\r\n    return (value.length()) == 0 ? defaultValue : ((int) (Long.decode(value).intValue()));\r\n}'),(6410,'getAttribute(java.lang.String,java.lang.String)','org.jhotdraw.xml.JavaxDOMInput.getAttribute(java.lang.String,java.lang.String)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic String getAttribute(String name, String defaultValue) {\r\n    String value = ((Element) (current)).getAttribute(name);\r\n    return (value.length()) == 0 ? defaultValue : value;\r\n}'),(6411,'getBuilder()','org.jhotdraw.xml.JavaxDOMInput.getBuilder()','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Lazily create the document builder and keep a reference to it for\r\n * performance improvement.\r\n */\r\nprotected static DocumentBuilder getBuilder() throws IOException {\r\n    if ((JavaxDOMInput.documentBuilder) == null) {\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        factory.setNamespaceAware(true);\r\n        factory.setValidating(false);\r\n        factory.setXIncludeAware(false);\r\n        try {\r\n            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\r\n            JavaxDOMInput.documentBuilder = factory.newDocumentBuilder();\r\n        } catch (Exception ex) {\r\n            InternalError error = new InternalError(\"Unable to create DocumentBuilder\");\r\n            error.initCause(ex);\r\n            throw error;\r\n        }\r\n    }\r\n    return JavaxDOMInput.documentBuilder;\r\n}'),(6412,'getElementCount()','org.jhotdraw.xml.JavaxDOMInput.getElementCount()','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Returns the number of child elements of the current element.\r\n */\r\npublic int getElementCount() {\r\n    int count = 0;\r\n    NodeList list = current.getChildNodes();\r\n    for (int i = 0; i < (list.getLength()); i++) {\r\n        Node node = list.item(i);\r\n        if (node instanceof Element) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}'),(6413,'getElementCount(java.lang.String)','org.jhotdraw.xml.JavaxDOMInput.getElementCount(java.lang.String)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Returns the number of child elements with the specified tag name\r\n * of the current element.\r\n */\r\npublic int getElementCount(String tagName) {\r\n    int count = 0;\r\n    NodeList list = current.getChildNodes();\r\n    for (int i = 0; i < (list.getLength()); i++) {\r\n        Node node = list.item(i);\r\n        if ((node instanceof Element) && (((Element) (node)).getTagName().equals(tagName))) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}'),(6414,'getInheritedAttribute(java.lang.String)','org.jhotdraw.xml.JavaxDOMInput.getInheritedAttribute(java.lang.String)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document and of\r\n * all parent DOM elements.\r\n */\r\npublic List<String> getInheritedAttribute(String name) {\r\n    LinkedList<String> values = new LinkedList<String>();\r\n    Node node = current;\r\n    while (node != null) {\r\n        String value = ((String) (((Element) (node)).getAttribute(name)));\r\n        values.addFirst(value);\r\n        node = node.getParentNode();\r\n    } \r\n    return values;\r\n}'),(6415,'getTagName()','org.jhotdraw.xml.JavaxDOMInput.getTagName()','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Returns the tag name of the current element.\r\n */\r\npublic String getTagName() {\r\n    return ((Element) (current)).getTagName();\r\n}'),(6416,'getText()','org.jhotdraw.xml.JavaxDOMInput.getText()','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets the text of the current element of the DOM Document.\r\n */\r\npublic String getText() {\r\n    return getText(null);\r\n}'),(6417,'getText(java.lang.String)','org.jhotdraw.xml.JavaxDOMInput.getText(java.lang.String)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Gets the text of the current element of the DOM Document.\r\n */\r\npublic String getText(String defaultValue) {\r\n    if ((current.getChildNodes().getLength()) == 0)\r\n        return defaultValue;\r\n\r\n    StringBuilder buf = new StringBuilder();\r\n    JavaxDOMInput.getText(current, buf);\r\n    return buf.toString();\r\n}'),(6418,'getText(org.w3c.dom.Node,java.lang.StringBuilder)','org.jhotdraw.xml.JavaxDOMInput.getText(org.w3c.dom.Node,java.lang.StringBuilder)','654','org.jhotdraw.xml.JavaxDOMInput','private static void getText(Node n, StringBuilder buf) {\r\n    if ((n.getNodeValue()) != null)\r\n        buf.append(n.getNodeValue());\r\n\r\n    NodeList children = n.getChildNodes();\r\n    for (int i = 0; i < (children.getLength()); i++) {\r\n        JavaxDOMInput.getText(children.item(i), buf);\r\n    }\r\n}'),(6419,'openElement(int)','org.jhotdraw.xml.JavaxDOMInput.openElement(int)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Opens the element with the specified index and makes it the current node.\r\n */\r\npublic void openElement(int index) {\r\n    int count = 0;\r\n    NodeList list = current.getChildNodes();\r\n    int len = list.getLength();\r\n    for (int i = 0; i < len; i++) {\r\n        Node node = list.item(i);\r\n        if (node instanceof Element) {\r\n            if ((count++) == index) {\r\n                current = node;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}'),(6420,'openElement(java.lang.String)','org.jhotdraw.xml.JavaxDOMInput.openElement(java.lang.String)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Opens the last element with the specified name and makes it the current node.\r\n */\r\npublic void openElement(String tagName) {\r\n    int count = 0;\r\n    NodeList list = current.getChildNodes();\r\n    int len = list.getLength();\r\n    for (int i = 0; i < len; i++) {\r\n        Node node = list.item(i);\r\n        if ((node instanceof Element) && (((Element) (node)).getTagName().equals(tagName))) {\r\n            current = node;\r\n            return;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException((\"element not found:\" + tagName));\r\n}'),(6421,'openElement(java.lang.String,int)','org.jhotdraw.xml.JavaxDOMInput.openElement(java.lang.String,int)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Opens the element with the specified name and index and makes it the\r\n * current node.\r\n */\r\npublic void openElement(String tagName, int index) {\r\n    int count = 0;\r\n    NodeList list = current.getChildNodes();\r\n    int len = list.getLength();\r\n    for (int i = 0; i < len; i++) {\r\n        Node node = list.item(i);\r\n        if ((node instanceof Element) && (((Element) (node)).getTagName().equals(tagName))) {\r\n            if ((count++) == index) {\r\n                current = node;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    throw new IllegalArgumentException(((((\"no such child \" + tagName) + \"[\") + index) + \"]\"));\r\n}'),(6422,'readObject()','org.jhotdraw.xml.JavaxDOMInput.readObject()','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Reads an object from the current element.\r\n */\r\npublic Object readObject() throws IOException {\r\n    return readObject(0);\r\n}'),(6423,'readObject(int)','org.jhotdraw.xml.JavaxDOMInput.readObject(int)','654','org.jhotdraw.xml.JavaxDOMInput','/**\r\n * Reads an object from the current element.\r\n */\r\npublic Object readObject(int index) throws IOException {\r\n    openElement(index);\r\n    Object o;\r\n    String tagName = getTagName();\r\n    if (tagName.equals(\"null\")) {\r\n        o = null;\r\n    } else\r\n        if (tagName.equals(\"string\")) {\r\n            o = getText();\r\n        } else\r\n            if (tagName.equals(\"int\")) {\r\n                o = Integer.decode(getText());\r\n            } else\r\n                if (tagName.equals(\"long\")) {\r\n                    o = Long.decode(getText());\r\n                } else\r\n                    if (tagName.equals(\"float\")) {\r\n                        o = new Float(Float.parseFloat(getText()));\r\n                    } else\r\n                        if (tagName.equals(\"double\")) {\r\n                            o = new Double(Double.parseDouble(getText()));\r\n                        } else\r\n                            if (tagName.equals(\"boolean\")) {\r\n                                o = Boolean.valueOf(getText());\r\n                            } else\r\n                                if (tagName.equals(\"color\")) {\r\n                                    o = new Color(getAttribute(\"rgba\", 255));\r\n                                } else\r\n                                    if (tagName.equals(\"intArray\")) {\r\n                                        int[] a = new int[getElementCount()];\r\n                                        for (int i = 0; i < (a.length); i++) {\r\n                                            a[i] = ((Integer) (readObject(i))).intValue();\r\n                                        }\r\n                                        o = a;\r\n                                    } else\r\n                                        if (tagName.equals(\"floatArray\")) {\r\n                                            float[] a = new float[getElementCount()];\r\n                                            for (int i = 0; i < (a.length); i++) {\r\n                                                a[i] = ((Float) (readObject(i))).floatValue();\r\n                                            }\r\n                                            o = a;\r\n                                        } else\r\n                                            if (tagName.equals(\"doubleArray\")) {\r\n                                                double[] a = new double[getElementCount()];\r\n                                                for (int i = 0; i < (a.length); i++) {\r\n                                                    a[i] = ((Double) (readObject(i))).doubleValue();\r\n                                                }\r\n                                                o = a;\r\n                                            } else\r\n                                                if (tagName.equals(\"font\")) {\r\n                                                    o = new Font(getAttribute(\"name\", \"Dialog\"), getAttribute(\"style\", 0), getAttribute(\"size\", 0));\r\n                                                } else\r\n                                                    if (tagName.equals(\"enum\")) {\r\n                                                        o = factory.createEnum(getAttribute(\"type\", ((String) (null))), getText());\r\n                                                    } else {\r\n                                                        String ref = getAttribute(\"ref\", null);\r\n                                                        String id = getAttribute(\"id\", ref);\r\n                                                        // Keep track of objects which have an ID\r\n                                                        if (id == null) {\r\n                                                            o = factory.create(getTagName());\r\n                                                        } else\r\n                                                            if (idobjects.containsKey(id)) {\r\n                                                                o = idobjects.get(id);\r\n                                                            } else {\r\n                                                                o = factory.create(getTagName());\r\n                                                                idobjects.put(id, o);\r\n                                                            }\r\n\r\n                                                        if (ref == null) {\r\n                                                            if (o instanceof DOMStorable) {\r\n                                                                ((DOMStorable) (o)).read(this);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    closeElement();\r\n    return o;\r\n}'),(6424,'-init-(org.jhotdraw.xml.DOMFactory)','org.jhotdraw.xml.JavaxDOMOutput.-init-(org.jhotdraw.xml.DOMFactory)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Creates a new instance.\r\n */\r\npublic JavaxDOMOutput(DOMFactory factory) throws IOException {\r\n    this.factory = factory;\r\n}'),(6425,'addAttribute(java.lang.String,boolean)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,boolean)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, boolean value) {\r\n    ((Element) (current)).setAttribute(name, Boolean.toString(value));\r\n}'),(6426,'addAttribute(java.lang.String,boolean,boolean)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,boolean,boolean)','655','org.jhotdraw.xml.JavaxDOMOutput','public void addAttribute(String name, boolean value, boolean defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6427,'addAttribute(java.lang.String,double)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,double)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, double value) {\r\n    // Remove the awkard .0 at the end of each number\r\n    String str = Double.toString(value);\r\n    if (str.endsWith(\".0\"))\r\n        str = str.substring(0, ((str.length()) - 2));\r\n\r\n    ((Element) (current)).setAttribute(name, str);\r\n}'),(6428,'addAttribute(java.lang.String,double,double)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,double,double)','655','org.jhotdraw.xml.JavaxDOMOutput','public void addAttribute(String name, double value, double defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6429,'addAttribute(java.lang.String,float)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,float)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, float value) {\r\n    // Remove the awkard .0 at the end of each number\r\n    String str = Float.toString(value);\r\n    if (str.endsWith(\".0\"))\r\n        str = str.substring(0, ((str.length()) - 2));\r\n\r\n    ((Element) (current)).setAttribute(name, str);\r\n}'),(6430,'addAttribute(java.lang.String,float,float)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,float,float)','655','org.jhotdraw.xml.JavaxDOMOutput','public void addAttribute(String name, float value, float defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6431,'addAttribute(java.lang.String,int)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,int)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, int value) {\r\n    ((Element) (current)).setAttribute(name, Integer.toString(value));\r\n}'),(6432,'addAttribute(java.lang.String,int,int)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,int,int)','655','org.jhotdraw.xml.JavaxDOMOutput','public void addAttribute(String name, int value, int defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6433,'addAttribute(java.lang.String,java.lang.String)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,java.lang.String)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, String value) {\r\n    if (value != null) {\r\n        ((Element) (current)).setAttribute(name, value);\r\n    }\r\n}'),(6434,'addAttribute(java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.xml.JavaxDOMOutput.addAttribute(java.lang.String,java.lang.String,java.lang.String)','655','org.jhotdraw.xml.JavaxDOMOutput','public void addAttribute(String name, String value, String defaultValue) {\r\n    if (!(value.equals(defaultValue))) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6435,'addComment(java.lang.String)','org.jhotdraw.xml.JavaxDOMOutput.addComment(java.lang.String)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds a comment to the current element of the DOM Document.\r\n */\r\npublic void addComment(String comment) {\r\n    current.appendChild(document.createComment(comment));\r\n}'),(6436,'addText(java.lang.String)','org.jhotdraw.xml.JavaxDOMOutput.addText(java.lang.String)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Adds a text to current element of the DOM Document.\r\n * Note: Multiple consecutives texts will be merged.\r\n */\r\npublic void addText(String text) {\r\n    current.appendChild(document.createTextNode(text));\r\n}'),(6437,'closeElement()','org.jhotdraw.xml.JavaxDOMOutput.closeElement()','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Closes the current element of the DOM Document.\r\n * The parent of the current element becomes the current element.\r\n *\r\n * @exception IllegalArgumentException if the provided tagName does\r\nnot match the tag name of the element.\r\n */\r\npublic void closeElement() {\r\n    /* if (! ((Element) current).getName().equals(tagName)) {\n    throw new IllegalArgumentException(\"Attempt to close wrong element:\"+tagName +\"!=\"+((Element) current).getName());\n    }\n     */\r\n    current = current.getParentNode();\r\n}'),(6438,'getPrototype()','org.jhotdraw.xml.JavaxDOMOutput.getPrototype()','655','org.jhotdraw.xml.JavaxDOMOutput','public Object getPrototype() {\r\n    if ((prototypes) == null) {\r\n        prototypes = new HashMap<String, Object>();\r\n    }\r\n    if (!(prototypes.containsKey(current.getNodeName()))) {\r\n        prototypes.put(current.getNodeName(), factory.create(current.getNodeName()));\r\n    }\r\n    return prototypes.get(current.getNodeName());\r\n}'),(6439,'openElement(java.lang.String)','org.jhotdraw.xml.JavaxDOMOutput.openElement(java.lang.String)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Puts a new element into the DOM Document.\r\n * The new element is added as a child to the current element in the DOM\r\n * document. Then it becomes the current element.\r\n * The element must be closed using closeElement.\r\n */\r\npublic void openElement(String tagName) {\r\n    Element newElement = document.createElement(tagName);\r\n    current.appendChild(newElement);\r\n    current = newElement;\r\n}'),(6440,'reset()','org.jhotdraw.xml.JavaxDOMOutput.reset()','655','org.jhotdraw.xml.JavaxDOMOutput','protected void reset() throws IOException {\r\n    try {\r\n        objectids = new HashMap<Object, String>();\r\n        document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\r\n        current = document;\r\n    } catch (ParserConfigurationException e) {\r\n        IOException error = new IOException(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(6441,'save(java.io.OutputStream)','org.jhotdraw.xml.JavaxDOMOutput.save(java.io.OutputStream)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Writes the contents of the DOMOutput into the specified output stream.\r\n */\r\npublic void save(OutputStream out) throws IOException {\r\n    reset();\r\n    try {\r\n        if ((doctype) != null) {\r\n            OutputStreamWriter w = new OutputStreamWriter(out, \"UTF8\");\r\n            w.write(\"<!DOCTYPE \");\r\n            w.write(doctype);\r\n            w.write(\">\n\");\r\n            w.flush();\r\n        }\r\n        Transformer t = TransformerFactory.newInstance().newTransformer();\r\n        t.transform(new DOMSource(document), new StreamResult(out));\r\n    } catch (TransformerException e) {\r\n        IOException error = new IOException(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(6442,'save(java.io.Writer)','org.jhotdraw.xml.JavaxDOMOutput.save(java.io.Writer)','655','org.jhotdraw.xml.JavaxDOMOutput','/**\r\n * Writes the contents of the DOMOutput into the specified output stream.\r\n */\r\npublic void save(Writer out) throws IOException {\r\n    reset();\r\n    try {\r\n        if ((doctype) != null) {\r\n            out.write(\"<!DOCTYPE \");\r\n            out.write(doctype);\r\n            out.write(\">\n\");\r\n        }\r\n        Transformer t = TransformerFactory.newInstance().newTransformer();\r\n        t.transform(new DOMSource(document), new StreamResult(out));\r\n    } catch (TransformerException e) {\r\n        IOException error = new IOException(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(6443,'setDoctype(java.lang.String)','org.jhotdraw.xml.JavaxDOMOutput.setDoctype(java.lang.String)','655','org.jhotdraw.xml.JavaxDOMOutput','public void setDoctype(String doctype) {\r\n    this.doctype = doctype;\r\n}'),(6444,'writeObject(java.lang.Object)','org.jhotdraw.xml.JavaxDOMOutput.writeObject(java.lang.Object)','655','org.jhotdraw.xml.JavaxDOMOutput','public void writeObject(Object o) throws IOException {\r\n    if (o == null) {\r\n        openElement(\"null\");\r\n        closeElement();\r\n    } else\r\n        if (o instanceof DOMStorable) {\r\n            writeStorable(((DOMStorable) (o)));\r\n        } else\r\n            if (o instanceof String) {\r\n                openElement(\"string\");\r\n                addText(((String) (o)));\r\n                closeElement();\r\n            } else\r\n                if (o instanceof Integer) {\r\n                    openElement(\"int\");\r\n                    addText(o.toString());\r\n                    closeElement();\r\n                } else\r\n                    if (o instanceof Long) {\r\n                        openElement(\"long\");\r\n                        addText(o.toString());\r\n                        closeElement();\r\n                    } else\r\n                        if (o instanceof Double) {\r\n                            openElement(\"double\");\r\n                            addText(o.toString());\r\n                            closeElement();\r\n                        } else\r\n                            if (o instanceof Float) {\r\n                                openElement(\"float\");\r\n                                addText(o.toString());\r\n                                closeElement();\r\n                            } else\r\n                                if (o instanceof Boolean) {\r\n                                    openElement(\"boolean\");\r\n                                    addText(o.toString());\r\n                                    closeElement();\r\n                                } else\r\n                                    if (o instanceof Color) {\r\n                                        Color c = ((Color) (o));\r\n                                        openElement(\"color\");\r\n                                        addAttribute(\"rgba\", (\"#\" + (Integer.toHexString(c.getRGB()))));\r\n                                        closeElement();\r\n                                    } else\r\n                                        if (o instanceof int[]) {\r\n                                            openElement(\"intArray\");\r\n                                            int[] a = ((int[]) (o));\r\n                                            for (int i = 0; i < (a.length); i++) {\r\n                                                writeObject(new Integer(a[i]));\r\n                                            }\r\n                                            closeElement();\r\n                                        } else\r\n                                            if (o instanceof float[]) {\r\n                                                openElement(\"floatArray\");\r\n                                                float[] a = ((float[]) (o));\r\n                                                for (int i = 0; i < (a.length); i++) {\r\n                                                    writeObject(new Float(a[i]));\r\n                                                }\r\n                                                closeElement();\r\n                                            } else\r\n                                                if (o instanceof double[]) {\r\n                                                    openElement(\"doubleArray\");\r\n                                                    double[] a = ((double[]) (o));\r\n                                                    for (int i = 0; i < (a.length); i++) {\r\n                                                        writeObject(new Double(a[i]));\r\n                                                    }\r\n                                                    closeElement();\r\n                                                } else\r\n                                                    if (o instanceof Font) {\r\n                                                        Font f = ((Font) (o));\r\n                                                        openElement(\"font\");\r\n                                                        addAttribute(\"name\", f.getName());\r\n                                                        addAttribute(\"style\", f.getStyle());\r\n                                                        addAttribute(\"size\", f.getSize());\r\n                                                        closeElement();\r\n                                                    } else\r\n                                                        if (o instanceof Enum) {\r\n                                                            openElement(\"enum\");\r\n                                                            Enum e = ((Enum) (o));\r\n                                                            addAttribute(\"type\", factory.getEnumName(e));\r\n                                                            addText(factory.getEnumValue(e));\r\n                                                            closeElement();\r\n                                                        } else {\r\n                                                            throw new IllegalArgumentException((((\"unable to store: \" + o) + \" \") + (o.getClass())));\r\n                                                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(6445,'writeStorable(org.jhotdraw.xml.DOMStorable)','org.jhotdraw.xml.JavaxDOMOutput.writeStorable(org.jhotdraw.xml.DOMStorable)','655','org.jhotdraw.xml.JavaxDOMOutput','private void writeStorable(DOMStorable o) throws IOException {\r\n    String tagName = factory.getName(o);\r\n    if (tagName == null)\r\n        throw new IllegalArgumentException((\"no tag name for:\" + o));\r\n\r\n    openElement(tagName);\r\n    if (objectids.containsKey(o)) {\r\n        addAttribute(\"ref\", ((String) (objectids.get(o))));\r\n    } else {\r\n        String id = Integer.toString(objectids.size(), 16);\r\n        objectids.put(o, id);\r\n        addAttribute(\"id\", id);\r\n        o.write(this);\r\n    }\r\n    closeElement();\r\n}'),(6446,'-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)','org.jhotdraw.xml.NanoXMLDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)','656','org.jhotdraw.xml.NanoXMLDOMInput','public NanoXMLDOMInput(DOMFactory factory, InputStream in) throws IOException {\r\n    this(factory, new InputStreamReader(in, \"UTF8\"));\r\n}'),(6447,'-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)','org.jhotdraw.xml.NanoXMLDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)','656','org.jhotdraw.xml.NanoXMLDOMInput','public NanoXMLDOMInput(DOMFactory factory, Reader in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        IXMLParser parser = XMLParserFactory.createDefaultXMLParser();\r\n        IXMLReader reader = new StdXMLReader(in);\r\n        parser.setReader(reader);\r\n        document = new XMLElement();\r\n        current = ((XMLElement) (parser.parse()));\r\n        if ((current) != null) {\r\n            document.addChild(current);\r\n        }\r\n        current = document;\r\n    } catch (Exception e) {\r\n        IOException error = new IOException(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(6448,'closeElement()','org.jhotdraw.xml.NanoXMLDOMInput.closeElement()','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Closes the current element of the DOM Document.\r\n * The parent of the current element becomes the current element.\r\n *\r\n * @exception IllegalArgumentException if the provided tagName does\r\nnot match the tag name of the element.\r\n */\r\npublic void closeElement() {\r\n    current = ((XMLElement) (stack.pop()));\r\n}'),(6449,'getAttribute(java.lang.String,boolean)','org.jhotdraw.xml.NanoXMLDOMInput.getAttribute(java.lang.String,boolean)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic boolean getAttribute(String name, boolean defaultValue) {\r\n    String value = ((String) (current.getAttribute(name)));\r\n    return (value == null) || ((value.length()) == 0) ? defaultValue : Boolean.valueOf(value).booleanValue();\r\n}'),(6450,'getAttribute(java.lang.String,double)','org.jhotdraw.xml.NanoXMLDOMInput.getAttribute(java.lang.String,double)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic double getAttribute(String name, double defaultValue) {\r\n    String value = ((String) (current.getAttribute(name)));\r\n    return (value == null) || ((value.length()) == 0) ? defaultValue : Double.parseDouble(value);\r\n}'),(6451,'getAttribute(java.lang.String,int)','org.jhotdraw.xml.NanoXMLDOMInput.getAttribute(java.lang.String,int)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic int getAttribute(String name, int defaultValue) {\r\n    String value = ((String) (current.getAttribute(name)));\r\n    return (value == null) || ((value.length()) == 0) ? defaultValue : ((int) (Long.decode(value).intValue()));\r\n}'),(6452,'getAttribute(java.lang.String,java.lang.String)','org.jhotdraw.xml.NanoXMLDOMInput.getAttribute(java.lang.String,java.lang.String)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document.\r\n */\r\npublic String getAttribute(String name, String defaultValue) {\r\n    String value = ((String) (current.getAttribute(name)));\r\n    return (value == null) || ((value.length()) == 0) ? defaultValue : value;\r\n}'),(6453,'getElementCount()','org.jhotdraw.xml.NanoXMLDOMInput.getElementCount()','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Returns the number of child elements of the current element.\r\n */\r\npublic int getElementCount() {\r\n    return current.getChildrenCount();\r\n}'),(6454,'getElementCount(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMInput.getElementCount(java.lang.String)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Returns the number of child elements with the specified tag name\r\n * of the current element.\r\n */\r\npublic int getElementCount(String tagName) {\r\n    int count = 0;\r\n    ArrayList list = current.getChildren();\r\n    for (int i = 0; i < (list.size()); i++) {\r\n        XMLElement node = ((XMLElement) (list.get(i)));\r\n        if (node.getName().equals(tagName)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}'),(6455,'getInheritedAttribute(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMInput.getInheritedAttribute(java.lang.String)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets an attribute of the current element of the DOM Document and of\r\n * all parent DOM elements.\r\n */\r\npublic List<String> getInheritedAttribute(String name) {\r\n    LinkedList<String> values = new LinkedList<String>();\r\n    for (XMLElement node : stack) {\r\n        String value = ((String) (node.getAttribute(name)));\r\n        values.add(value);\r\n    }\r\n    String value = ((String) (current.getAttribute(name)));\r\n    values.add(value);\r\n    return values;\r\n}'),(6456,'getTagName()','org.jhotdraw.xml.NanoXMLDOMInput.getTagName()','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Returns the tag name of the current element.\r\n */\r\npublic String getTagName() {\r\n    return current.getName();\r\n}'),(6457,'getText()','org.jhotdraw.xml.NanoXMLDOMInput.getText()','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets the text of the current element of the DOM Document.\r\n */\r\npublic String getText() {\r\n    return getText(null);\r\n}'),(6458,'getText(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMInput.getText(java.lang.String)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Gets the text of the current element of the DOM Document.\r\n */\r\npublic String getText(String defaultValue) {\r\n    String value = current.getContent();\r\n    return value == null ? defaultValue : value;\r\n}'),(6459,'openElement(int)','org.jhotdraw.xml.NanoXMLDOMInput.openElement(int)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Opens the element with the specified index and makes it the current node.\r\n */\r\npublic void openElement(int index) {\r\n    stack.push(current);\r\n    ArrayList list = current.getChildren();\r\n    current = ((XMLElement) (list.get(index)));\r\n}'),(6460,'openElement(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMInput.openElement(java.lang.String)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Opens the last element with the specified name and makes it the current node.\r\n */\r\npublic void openElement(String tagName) throws IOException {\r\n    ArrayList list = current.getChildren();\r\n    for (int i = 0; i < (list.size()); i++) {\r\n        XMLElement node = ((XMLElement) (list.get(i)));\r\n        if (node.getName().equals(tagName)) {\r\n            stack.push(current);\r\n            current = node;\r\n            return;\r\n        }\r\n    }\r\n    throw new IOException((\"no such element:\" + tagName));\r\n}'),(6461,'openElement(java.lang.String,int)','org.jhotdraw.xml.NanoXMLDOMInput.openElement(java.lang.String,int)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Opens the element with the specified name and index and makes it the\r\n * current node.\r\n */\r\npublic void openElement(String tagName, int index) throws IOException {\r\n    int count = 0;\r\n    ArrayList list = current.getChildren();\r\n    for (int i = 0; i < (list.size()); i++) {\r\n        XMLElement node = ((XMLElement) (list.get(i)));\r\n        if (node.getName().equals(tagName)) {\r\n            if ((count++) == index) {\r\n                stack.push(current);\r\n                current = node;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    throw new IOException((((\"no such element:\" + tagName) + \" at index:\") + index));\r\n}'),(6462,'readObject()','org.jhotdraw.xml.NanoXMLDOMInput.readObject()','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Reads an object from the current element.\r\n */\r\npublic Object readObject() throws IOException {\r\n    return readObject(0);\r\n}'),(6463,'readObject(int)','org.jhotdraw.xml.NanoXMLDOMInput.readObject(int)','656','org.jhotdraw.xml.NanoXMLDOMInput','/**\r\n * Reads an object from the current element.\r\n */\r\npublic Object readObject(int index) throws IOException {\r\n    openElement(index);\r\n    Object o;\r\n    String tagName = getTagName();\r\n    if (tagName.equals(\"null\")) {\r\n        o = null;\r\n    } else\r\n        if (tagName.equals(\"string\")) {\r\n            o = getText();\r\n        } else\r\n            if (tagName.equals(\"int\")) {\r\n                o = Integer.decode(getText());\r\n            } else\r\n                if (tagName.equals(\"long\")) {\r\n                    o = Long.decode(getText());\r\n                } else\r\n                    if (tagName.equals(\"float\")) {\r\n                        o = new Float(Float.parseFloat(getText()));\r\n                    } else\r\n                        if (tagName.equals(\"double\")) {\r\n                            o = new Double(Double.parseDouble(getText()));\r\n                        } else\r\n                            if (tagName.equals(\"boolean\")) {\r\n                                o = Boolean.valueOf(getText());\r\n                            } else\r\n                                if (tagName.equals(\"color\")) {\r\n                                    o = new Color(getAttribute(\"rgba\", 255));\r\n                                } else\r\n                                    if (tagName.equals(\"intArray\")) {\r\n                                        int[] a = new int[getElementCount()];\r\n                                        for (int i = 0; i < (a.length); i++) {\r\n                                            a[i] = ((Integer) (readObject(i))).intValue();\r\n                                        }\r\n                                        o = a;\r\n                                    } else\r\n                                        if (tagName.equals(\"floatArray\")) {\r\n                                            float[] a = new float[getElementCount()];\r\n                                            for (int i = 0; i < (a.length); i++) {\r\n                                                a[i] = ((Float) (readObject(i))).floatValue();\r\n                                            }\r\n                                            o = a;\r\n                                        } else\r\n                                            if (tagName.equals(\"doubleArray\")) {\r\n                                                double[] a = new double[getElementCount()];\r\n                                                for (int i = 0; i < (a.length); i++) {\r\n                                                    a[i] = ((Double) (readObject(i))).doubleValue();\r\n                                                }\r\n                                                o = a;\r\n                                            } else\r\n                                                if (tagName.equals(\"font\")) {\r\n                                                    o = new Font(getAttribute(\"name\", \"Dialog\"), getAttribute(\"style\", 0), getAttribute(\"size\", 0));\r\n                                                } else\r\n                                                    if (tagName.equals(\"enum\")) {\r\n                                                        o = factory.createEnum(getAttribute(\"type\", ((String) (null))), getText());\r\n                                                    } else {\r\n                                                        String ref = getAttribute(\"ref\", null);\r\n                                                        String id = getAttribute(\"id\", ref);\r\n                                                        // Keep track of objects which have an ID\r\n                                                        if (id == null) {\r\n                                                            o = factory.create(getTagName());\r\n                                                        } else\r\n                                                            if (idobjects.containsKey(id)) {\r\n                                                                o = idobjects.get(id);\r\n                                                            } else {\r\n                                                                o = factory.create(getTagName());\r\n                                                                idobjects.put(id, o);\r\n                                                            }\r\n\r\n                                                        if (ref == null) {\r\n                                                            if (o instanceof DOMStorable) {\r\n                                                                ((DOMStorable) (o)).read(this);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    closeElement();\r\n    return o;\r\n}'),(6464,'-init-(org.jhotdraw.xml.DOMFactory)','org.jhotdraw.xml.NanoXMLDOMOutput.-init-(org.jhotdraw.xml.DOMFactory)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Creates a new instance.\r\n */\r\npublic NanoXMLDOMOutput(DOMFactory factory) {\r\n    this.factory = factory;\r\n    objectids = new HashMap<Object, String>();\r\n    document = new XMLElement();// new HashMap(), false, false);\r\n\r\n    current = document;\r\n    stack = new Stack<XMLElement>();\r\n    stack.push(current);\r\n}'),(6465,'addAttribute(java.lang.String,boolean)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,boolean)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, boolean value) {\r\n    current.setAttribute(name, new Boolean(value).toString());\r\n}'),(6466,'addAttribute(java.lang.String,boolean,boolean)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,boolean,boolean)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void addAttribute(String name, boolean value, boolean defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6467,'addAttribute(java.lang.String,double)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,double)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, double value) {\r\n    // Remove the awkard .0 at the end of each number\r\n    String str = Double.toString(value);\r\n    if (str.endsWith(\".0\"))\r\n        str = str.substring(0, ((str.length()) - 2));\r\n\r\n    current.setAttribute(name, str);\r\n}'),(6468,'addAttribute(java.lang.String,double,double)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,double,double)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void addAttribute(String name, double value, double defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6469,'addAttribute(java.lang.String,float)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,float)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, float value) {\r\n    // Remove the awkard .0 at the end of each number\r\n    String str = Float.toString(value);\r\n    if (str.endsWith(\".0\"))\r\n        str = str.substring(0, ((str.length()) - 2));\r\n\r\n    current.setAttribute(name, str);\r\n}'),(6470,'addAttribute(java.lang.String,float,float)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,float,float)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void addAttribute(String name, float value, float defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6471,'addAttribute(java.lang.String,int)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,int)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, int value) {\r\n    current.setAttribute(name, Integer.toString(value));\r\n}'),(6472,'addAttribute(java.lang.String,int,int)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,int,int)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void addAttribute(String name, int value, int defaultValue) {\r\n    if (value != defaultValue) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6473,'addAttribute(java.lang.String,java.lang.String)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,java.lang.String)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds an attribute to current element of the DOM Document.\r\n */\r\npublic void addAttribute(String name, String value) {\r\n    if (value != null) {\r\n        current.setAttribute(name, value);\r\n    }\r\n}'),(6474,'addAttribute(java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.xml.NanoXMLDOMOutput.addAttribute(java.lang.String,java.lang.String,java.lang.String)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void addAttribute(String name, String value, String defaultValue) {\r\n    if ((value != null) && (!(value.equals(defaultValue)))) {\r\n        addAttribute(name, value);\r\n    }\r\n}'),(6475,'addComment(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMOutput.addComment(java.lang.String)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds a comment to the current element of the DOM Document.\r\n */\r\npublic void addComment(String comment) {\r\n    // NanoXML does not support comments\r\n}'),(6476,'addText(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMOutput.addText(java.lang.String)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Adds a text to current element of the DOM Document.\r\n * Note: Multiple consecutives texts will be merged.\r\n */\r\npublic void addText(String text) {\r\n    String old = current.getContent();\r\n    if (old == null) {\r\n        current.setContent(text);\r\n    } else {\r\n        current.setContent((old + text));\r\n    }\r\n}'),(6477,'closeElement()','org.jhotdraw.xml.NanoXMLDOMOutput.closeElement()','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Closes the current element of the DOM Document.\r\n * The parent of the current element becomes the current element.\r\n *\r\n * @exception IllegalArgumentException if the provided tagName does\r\nnot match the tag name of the element.\r\n */\r\npublic void closeElement() {\r\n    current = ((XMLElement) (stack.pop()));\r\n}'),(6478,'getPrototype()','org.jhotdraw.xml.NanoXMLDOMOutput.getPrototype()','657','org.jhotdraw.xml.NanoXMLDOMOutput','public Object getPrototype() {\r\n    if ((prototypes) == null) {\r\n        prototypes = new HashMap<String, Object>();\r\n    }\r\n    if (!(prototypes.containsKey(current.getName()))) {\r\n        prototypes.put(current.getName(), factory.create(current.getName()));\r\n    }\r\n    return prototypes.get(current.getName());\r\n}'),(6479,'openElement(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMOutput.openElement(java.lang.String)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Puts a new element into the DOM Document.\r\n * The new element is added as a child to the current element in the DOM\r\n * document. Then it becomes the current element.\r\n * The element must be closed using closeElement.\r\n */\r\npublic void openElement(String tagName) {\r\n    XMLElement newElement = new XMLElement();// new HashMap(), false, false);\r\n\r\n    newElement.setName(tagName);\r\n    current.addChild(newElement);\r\n    stack.push(current);\r\n    current = newElement;\r\n}'),(6480,'print(java.io.PrintWriter)','org.jhotdraw.xml.NanoXMLDOMOutput.print(java.io.PrintWriter)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Prints the contents of the DOMOutput into the specified print writer.\r\n */\r\npublic void print(PrintWriter out) {\r\n    XMLWriter writer = new XMLWriter(out);\r\n    try {\r\n        // writer.write(document);\r\n        writer.write(((XMLElement) (document.getChildren().get(0))), true);\r\n    } catch (IOException e) {\r\n        InternalError error = new InternalError();\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    // ((XMLElement) document.getChildren().get(0)).print(out);\r\n}'),(6481,'save(java.io.OutputStream)','org.jhotdraw.xml.NanoXMLDOMOutput.save(java.io.OutputStream)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Writes the contents of the DOMOutput into the specified output stream.\r\n */\r\npublic void save(OutputStream out) throws IOException {\r\n    Writer w = new OutputStreamWriter(out, \"UTF8\");\r\n    save(w);\r\n    w.flush();\r\n}'),(6482,'save(java.io.Writer)','org.jhotdraw.xml.NanoXMLDOMOutput.save(java.io.Writer)','657','org.jhotdraw.xml.NanoXMLDOMOutput','/**\r\n * Writes the contents of the DOMOutput into the specified writer.\r\n */\r\npublic void save(Writer out) throws IOException {\r\n    if ((doctype) != null) {\r\n        out.write(\"<!DOCTYPE \");\r\n        out.write(doctype);\r\n        out.write(\">\n\");\r\n    }\r\n    XMLWriter writer = new XMLWriter(out);\r\n    writer.write(((XMLElement) (document.getChildren().get(0))));\r\n}'),(6483,'setDoctype(java.lang.String)','org.jhotdraw.xml.NanoXMLDOMOutput.setDoctype(java.lang.String)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void setDoctype(String doctype) {\r\n    this.doctype = doctype;\r\n}'),(6484,'writeObject(java.lang.Object)','org.jhotdraw.xml.NanoXMLDOMOutput.writeObject(java.lang.Object)','657','org.jhotdraw.xml.NanoXMLDOMOutput','public void writeObject(Object o) throws IOException {\r\n    if (o == null) {\r\n        openElement(\"null\");\r\n        closeElement();\r\n    } else\r\n        if (o instanceof DOMStorable) {\r\n            writeStorable(((DOMStorable) (o)));\r\n        } else\r\n            if (o instanceof String) {\r\n                openElement(\"string\");\r\n                addText(((String) (o)));\r\n                closeElement();\r\n            } else\r\n                if (o instanceof Integer) {\r\n                    openElement(\"int\");\r\n                    addText(o.toString());\r\n                    closeElement();\r\n                } else\r\n                    if (o instanceof Long) {\r\n                        openElement(\"long\");\r\n                        addText(o.toString());\r\n                        closeElement();\r\n                    } else\r\n                        if (o instanceof Double) {\r\n                            openElement(\"double\");\r\n                            // Remove the awkard .0 at the end of each number\r\n                            String str = o.toString();\r\n                            if (str.endsWith(\".0\"))\r\n                                str = str.substring(0, ((str.length()) - 2));\r\n\r\n                            addText(str);\r\n                            closeElement();\r\n                        } else\r\n                            if (o instanceof Float) {\r\n                                openElement(\"float\");\r\n                                // Remove the awkard .0 at the end of each number\r\n                                String str = o.toString();\r\n                                if (str.endsWith(\".0\"))\r\n                                    str = str.substring(0, ((str.length()) - 2));\r\n\r\n                                addText(str);\r\n                                closeElement();\r\n                            } else\r\n                                if (o instanceof Boolean) {\r\n                                    openElement(\"boolean\");\r\n                                    addText(o.toString());\r\n                                    closeElement();\r\n                                } else\r\n                                    if (o instanceof Color) {\r\n                                        Color c = ((Color) (o));\r\n                                        openElement(\"color\");\r\n                                        addAttribute(\"rgba\", (\"#\" + (Integer.toHexString(c.getRGB()))));\r\n                                        closeElement();\r\n                                    } else\r\n                                        if (o instanceof int[]) {\r\n                                            openElement(\"intArray\");\r\n                                            int[] a = ((int[]) (o));\r\n                                            for (int i = 0; i < (a.length); i++) {\r\n                                                writeObject(new Integer(a[i]));\r\n                                            }\r\n                                            closeElement();\r\n                                        } else\r\n                                            if (o instanceof float[]) {\r\n                                                openElement(\"floatArray\");\r\n                                                float[] a = ((float[]) (o));\r\n                                                for (int i = 0; i < (a.length); i++) {\r\n                                                    writeObject(new Float(a[i]));\r\n                                                }\r\n                                                closeElement();\r\n                                            } else\r\n                                                if (o instanceof double[]) {\r\n                                                    openElement(\"doubleArray\");\r\n                                                    double[] a = ((double[]) (o));\r\n                                                    for (int i = 0; i < (a.length); i++) {\r\n                                                        writeObject(new Double(a[i]));\r\n                                                    }\r\n                                                    closeElement();\r\n                                                } else\r\n                                                    if (o instanceof Font) {\r\n                                                        Font f = ((Font) (o));\r\n                                                        openElement(\"font\");\r\n                                                        addAttribute(\"name\", f.getName());\r\n                                                        addAttribute(\"style\", f.getStyle());\r\n                                                        addAttribute(\"size\", f.getSize());\r\n                                                        closeElement();\r\n                                                    } else\r\n                                                        if (o instanceof Enum) {\r\n                                                            openElement(\"enum\");\r\n                                                            Enum e = ((Enum) (o));\r\n                                                            addAttribute(\"type\", factory.getEnumName(e));\r\n                                                            addText(factory.getEnumValue(e));\r\n                                                            closeElement();\r\n                                                        } else {\r\n                                                            throw new IllegalArgumentException((((\"unable to store: \" + o) + \" \") + (o.getClass())));\r\n                                                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(6485,'writeStorable(org.jhotdraw.xml.DOMStorable)','org.jhotdraw.xml.NanoXMLDOMOutput.writeStorable(org.jhotdraw.xml.DOMStorable)','657','org.jhotdraw.xml.NanoXMLDOMOutput','private XMLElement writeStorable(DOMStorable o) throws IOException {\r\n    String tagName = factory.getName(o);\r\n    if (tagName == null)\r\n        throw new IllegalArgumentException((\"no tag name for:\" + o));\r\n\r\n    openElement(tagName);\r\n    XMLElement element = current;\r\n    if (objectids.containsKey(o)) {\r\n        addAttribute(\"ref\", ((String) (objectids.get(o))));\r\n    } else {\r\n        String id = Integer.toString(objectids.size(), 16);\r\n        objectids.put(o, id);\r\n        addAttribute(\"id\", id);\r\n        o.write(this);\r\n    }\r\n    closeElement();\r\n    return element;\r\n}'),(6486,'-init-()','org.jhotdraw.xml.QuickAndDirtyDOMFactory.-init-()','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','QuickAndDirtyDOMFactory() {\r\n}'),(6487,'create(java.lang.String)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.create(java.lang.String)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','public Object create(String name) {\r\n    name = unescape(name);\r\n    try {\r\n        return Class.forName(name).newInstance();\r\n    } catch (InstantiationException ex) {\r\n        IllegalArgumentException e = new IllegalArgumentException(((\"Class \" + name) + \" can not instantiate an object\"));\r\n        e.initCause(ex);\r\n        throw e;\r\n    } catch (IllegalAccessException ex) {\r\n        IllegalArgumentException e = new IllegalArgumentException(((\"Class \" + name) + \" is not public\"));\r\n        e.initCause(ex);\r\n        throw e;\r\n    } catch (ClassNotFoundException ex) {\r\n        IllegalArgumentException e = new IllegalArgumentException(((\"Class \" + name) + \" does not exist\"));\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(6488,'createEnum(java.lang.String,java.lang.String)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.createEnum(java.lang.String,java.lang.String)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','@SuppressWarnings(\"unchecked\")\r\npublic Enum createEnum(String name, String value) {\r\n    name = unescape(name);\r\n    Class enumClass;\r\n    try {\r\n        enumClass = Class.forName(name);\r\n    } catch (ClassNotFoundException ex) {\r\n        throw new IllegalArgumentException((\"Enum name not known to factory:\" + name));\r\n    }\r\n    if (enumClass == null) {\r\n        throw new IllegalArgumentException((\"Enum name not known to factory:\" + name));\r\n    }\r\n    return Enum.valueOf(enumClass, value);\r\n    // throw new IllegalArgumentException(\"Enum value not known to factory:\"+value);\r\n}'),(6489,'escape(java.lang.String)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.escape(java.lang.String)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','private String escape(String name) {\r\n    // Escape dollar characters by two full-stop characters\r\n    name = name.replaceAll(\"\\$\", \"..\");\r\n    return name;\r\n}'),(6490,'getEnumName(java.lang.Enum)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.getEnumName(java.lang.Enum)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','public String getEnumName(Enum o) {\r\n    return escape(o.getClass().getName());\r\n}'),(6491,'getEnumValue(java.lang.Enum)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.getEnumValue(java.lang.Enum)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','public String getEnumValue(Enum o) {\r\n    return o.name();\r\n}'),(6492,'getName(org.jhotdraw.xml.DOMStorable)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.getName(org.jhotdraw.xml.DOMStorable)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','public String getName(DOMStorable o) {\r\n    return escape(o.getClass().getName());\r\n}'),(6493,'unescape(java.lang.String)','org.jhotdraw.xml.QuickAndDirtyDOMFactory.unescape(java.lang.String)','658','org.jhotdraw.xml.QuickAndDirtyDOMFactory','private String unescape(String name) {\r\n    // Unescape dollar characters from two full-stop characters\r\n    name = name.replaceAll(\"\\.\\.\", Matcher.quoteReplacement(\"$\"));\r\n    return name;\r\n}'),(6494,'-init-(byte[],java.lang.String,java.lang.String)','org.jhotdraw.xml.XMLTransferable.-init-(byte[],java.lang.String,java.lang.String)','659','org.jhotdraw.xml.XMLTransferable','/**\r\n * Creates new XMLTransferable\r\n */\r\npublic XMLTransferable(byte[] data, String mimeType, String humanPresentableName) {\r\n    this.data = data;\r\n    this.flavor = new DataFlavor(mimeType, humanPresentableName);\r\n}'),(6495,'getTransferData(java.awt.datatransfer.DataFlavor)','org.jhotdraw.xml.XMLTransferable.getTransferData(java.awt.datatransfer.DataFlavor)','659','org.jhotdraw.xml.XMLTransferable','/**\r\n * Returns an object which represents the data to be transferred.  The class\r\n * of the object returned is defined by the representation class of the flavor.\r\n *\r\n * @param flavor\r\n * 		the requested flavor for the data\r\n * @see DataFlavor#getRepresentationClass\r\n * @exception IOException                if the data is no longer available\r\nin the requested flavor.\r\n * @exception UnsupportedFlavorException if the requested data flavor is\r\nnot supported.\r\n */\r\npublic Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n    if (this.flavor.equals(flavor)) {\r\n        return new ByteArrayInputStream(data);\r\n    } else {\r\n        throw new UnsupportedFlavorException(flavor);\r\n    }\r\n}'),(6496,'getTransferDataFlavors()','org.jhotdraw.xml.XMLTransferable.getTransferDataFlavors()','659','org.jhotdraw.xml.XMLTransferable','/**\r\n * Returns an array of DataFlavor objects indicating the flavors the data\r\n * can be provided in.  The array should be ordered according to preference\r\n * for providing the data (from most richly descriptive to least descriptive).\r\n *\r\n * @return an array of data flavors in which this data can be transferred\r\n */\r\npublic DataFlavor[] getTransferDataFlavors() {\r\n    return new DataFlavor[]{ flavor };\r\n}'),(6497,'isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','org.jhotdraw.xml.XMLTransferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)','659','org.jhotdraw.xml.XMLTransferable','/**\r\n * Returns whether or not the specified data flavor is supported for\r\n * this object.\r\n *\r\n * @param flavor\r\n * 		the requested flavor for the data\r\n * @return boolean indicating wjether or not the data flavor is supported\r\n */\r\npublic boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return this.flavor.equals(flavor);\r\n}'),(6498,'lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)','org.jhotdraw.xml.XMLTransferable.lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)','659','org.jhotdraw.xml.XMLTransferable','/**\r\n * Notifies this object that it is no longer the owner of\r\n * the contents of the clipboard.\r\n *\r\n * @param clipboard\r\n * 		the clipboard that is no longer owned\r\n * @param contents\r\n * 		the contents which this owner had placed on the clipboard\r\n */\r\npublic void lostOwnership(Clipboard clipboard, Transferable contents) {\r\n}'),(6499,'-init-()','org.jhotdraw.xml.css.CSSParser.-init-()','660','org.jhotdraw.xml.css.CSSParser','CSSParser() {\r\n}'),(6500,'parse(java.io.Reader,org.jhotdraw.xml.css.StyleManager)','org.jhotdraw.xml.css.CSSParser.parse(java.io.Reader,org.jhotdraw.xml.css.StyleManager)','660','org.jhotdraw.xml.css.CSSParser','public void parse(Reader css, StyleManager rm) throws IOException {\r\n    StreamTokenizer tt = new StreamTokenizer(css);\r\n    tt.resetSyntax();\r\n    tt.wordChars(a, z);\r\n    tt.wordChars(A, Z);\r\n    tt.wordChars(0, 9);\r\n    tt.wordChars((128 + 32), 255);\r\n    tt.whitespaceChars(0,  );\r\n    tt.commentChar(/);\r\n    tt.slashStarComments(true);\r\n    parseStylesheet(tt, rm);\r\n}'),(6501,'parse(java.lang.String,org.jhotdraw.xml.css.StyleManager)','org.jhotdraw.xml.css.CSSParser.parse(java.lang.String,org.jhotdraw.xml.css.StyleManager)','660','org.jhotdraw.xml.css.CSSParser','public void parse(String css, StyleManager rm) throws IOException {\r\n    parse(new StringReader(css), rm);\r\n}'),(6502,'parseDeclarationMap(java.io.StreamTokenizer)','org.jhotdraw.xml.css.CSSParser.parseDeclarationMap(java.io.StreamTokenizer)','660','org.jhotdraw.xml.css.CSSParser','private Map<String, String> parseDeclarationMap(StreamTokenizer tt) throws IOException {\r\n    HashMap<String, String> map = new HashMap<String, String>();\r\n    do {\r\n        // Parse key\r\n        StringBuilder key = new StringBuilder();\r\n        while (((((tt.nextToken()) != (StreamTokenizer.TT_EOF)) && ((tt.ttype) != })) && ((tt.ttype) != :)) && ((tt.ttype) != ;)) {\r\n            switch (tt.ttype) {\r\n                case StreamTokenizer.TT_WORD :\r\n                    key.append(tt.sval);\r\n                    break;\r\n                default :\r\n                    key.append(((char) (tt.ttype)));\r\n                    break;\r\n            }\r\n        } \r\n        if (((tt.ttype) == }) && ((key.length()) == 0)) {\r\n            break;\r\n        }\r\n        if ((tt.ttype) != :)\r\n            throw new IOException((\"Declaration : missing for \" + key));\r\n\r\n        // Parse value\r\n        StringBuilder value = new StringBuilder();\r\n        boolean needsWhitespace = false;\r\n        while ((((tt.nextToken()) != (StreamTokenizer.TT_EOF)) && ((tt.ttype) != ;)) && ((tt.ttype) != })) {\r\n            switch (tt.ttype) {\r\n                case StreamTokenizer.TT_WORD :\r\n                    if (needsWhitespace)\r\n                        value.append( );\r\n\r\n                    value.append(tt.sval);\r\n                    needsWhitespace = true;\r\n                    break;\r\n                default :\r\n                    value.append(((char) (tt.ttype)));\r\n                    needsWhitespace = false;\r\n                    break;\r\n            }\r\n        } \r\n        map.put(key.toString(), value.toString());\r\n        // System.out.println(\"  declaration: \"+key+\":\"+value);\r\n    } while (((tt.ttype) != }) && ((tt.ttype) != (StreamTokenizer.TT_EOF)) );\r\n    tt.pushBack();\r\n    return map;\r\n}'),(6503,'parseRuleset(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)','org.jhotdraw.xml.css.CSSParser.parseRuleset(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)','660','org.jhotdraw.xml.css.CSSParser','private void parseRuleset(StreamTokenizer tt, StyleManager rm) throws IOException {\r\n    // parse selector list\r\n    List<String> selectors = parseSelectorList(tt);\r\n    if ((tt.nextToken()) != {)\r\n        throw new IOException((\"Ruleset { missing for \" + selectors));\r\n\r\n    Map<String, String> declarations = parseDeclarationMap(tt);\r\n    if ((tt.nextToken()) != })\r\n        throw new IOException((\"Ruleset } missing for \" + selectors));\r\n\r\n    for (String selector : selectors) {\r\n        rm.add(new CSSRule(selector, declarations));\r\n        // System.out.println(\"CSSParser.add(\"+selector+\",\"+declarations);\r\n        /* for (Map.Entry<String,String> entry : declarations.entrySet()) {\n        rm.add(new CSSRule(selector, entry.getKey(), entry.getValue()));\n        }\n         */\r\n    }\r\n}'),(6504,'parseSelectorList(java.io.StreamTokenizer)','org.jhotdraw.xml.css.CSSParser.parseSelectorList(java.io.StreamTokenizer)','660','org.jhotdraw.xml.css.CSSParser','private List<String> parseSelectorList(StreamTokenizer tt) throws IOException {\r\n    LinkedList<String> list = new LinkedList<String>();\r\n    StringBuilder selector = new StringBuilder();\r\n    boolean needsWhitespace = false;\r\n    while (((tt.nextToken()) != (StreamTokenizer.TT_EOF)) && ((tt.ttype) != {)) {\r\n        switch (tt.ttype) {\r\n            case StreamTokenizer.TT_WORD :\r\n                if (needsWhitespace)\r\n                    selector.append( );\r\n\r\n                selector.append(tt.sval);\r\n                needsWhitespace = true;\r\n                break;\r\n            case , :\r\n                list.add(selector.toString());\r\n                selector.setLength(0);\r\n                needsWhitespace = false;\r\n                break;\r\n            default :\r\n                if (needsWhitespace)\r\n                    selector.append( );\r\n\r\n                selector.append(((char) (tt.ttype)));\r\n                needsWhitespace = false;\r\n                break;\r\n        }\r\n    } \r\n    if ((selector.length()) != 0) {\r\n        list.add(selector.toString());\r\n    }\r\n    tt.pushBack();\r\n    // System.out.println(\"selectors:\"+list);\r\n    return list;\r\n}'),(6505,'parseStylesheet(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)','org.jhotdraw.xml.css.CSSParser.parseStylesheet(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)','660','org.jhotdraw.xml.css.CSSParser','private void parseStylesheet(StreamTokenizer tt, StyleManager rm) throws IOException {\r\n    while ((tt.nextToken()) != (StreamTokenizer.TT_EOF)) {\r\n        tt.pushBack();\r\n        parseRuleset(tt, rm);\r\n    } \r\n}'),(6506,'-init-()','org.jhotdraw.xml.css.CSSRule.-init-()','662','org.jhotdraw.xml.css.CSSRule','SelectorType() {\r\n}'),(6507,'-init-(java.lang.String,java.lang.String)','org.jhotdraw.xml.css.CSSRule.-init-(java.lang.String,java.lang.String)','662','org.jhotdraw.xml.css.CSSRule','public CSSRule(String name, String value) {\r\n    properties = new HashMap<String, String>();\r\n    properties.put(name, value);\r\n}'),(6508,'-init-(java.lang.String,java.lang.String,java.lang.String)','org.jhotdraw.xml.css.CSSRule.-init-(java.lang.String,java.lang.String,java.lang.String)','662','org.jhotdraw.xml.css.CSSRule','public CSSRule(String selector, String propertyName, String propertyValue) {\r\n    setSelector(selector);\r\n    properties = new HashMap<String, String>();\r\n    properties.put(propertyName, propertyValue);\r\n}'),(6509,'-init-(java.lang.String,java.util.Map)','org.jhotdraw.xml.css.CSSRule.-init-(java.lang.String,java.util.Map)','662','org.jhotdraw.xml.css.CSSRule','public CSSRule(String selector, Map<String, String> properties) {\r\n    setSelector(selector);\r\n    this.properties = properties;\r\n}'),(6510,'apply(net.n3.nanoxml.IXMLElement)','org.jhotdraw.xml.css.CSSRule.apply(net.n3.nanoxml.IXMLElement)','662','org.jhotdraw.xml.css.CSSRule','public void apply(IXMLElement elem) {\r\n    for (Map.Entry<String, String> property : properties.entrySet()) {\r\n        if (!(elem.hasAttribute(property.getKey()))) {\r\n            elem.setAttribute(property.getKey(), property.getValue());\r\n        }\r\n    }\r\n}'),(6511,'apply(org.w3c.dom.Element)','org.jhotdraw.xml.css.CSSRule.apply(org.w3c.dom.Element)','662','org.jhotdraw.xml.css.CSSRule','public void apply(Element elem) {\r\n    for (Map.Entry<String, String> property : properties.entrySet()) {\r\n        if (!(elem.hasAttribute(property.getKey()))) {\r\n            elem.setAttribute(property.getKey(), property.getValue());\r\n        }\r\n    }\r\n}'),(6512,'matches(net.n3.nanoxml.IXMLElement)','org.jhotdraw.xml.css.CSSRule.matches(net.n3.nanoxml.IXMLElement)','662','org.jhotdraw.xml.css.CSSRule','public boolean matches(IXMLElement elem) {\r\n    boolean isMatch = false;\r\n    switch (type) {\r\n        case ALL :\r\n            isMatch = true;\r\n            break;\r\n        case ELEMENT_NAME :\r\n            {\r\n                String name = elem.getName();\r\n                isMatch = (name != null) && (name.equals(selector));\r\n                break;\r\n            }\r\n        case CLASS_ATTRIBUTE :\r\n            {\r\n                String value = elem.getAttribute(\"class\");\r\n                if (value != null) {\r\n                    String[] clazzes = value.split(\" \");\r\n                    for (String clazz : clazzes) {\r\n                        if (clazz.equals(selector)) {\r\n                            isMatch = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        case ID_ATTRIBUTE :\r\n            {\r\n                String name = elem.getAttribute(\"id\");\r\n                isMatch = (name != null) && (name.equals(selector));\r\n                break;\r\n            }\r\n    }\r\n    return isMatch;\r\n}'),(6513,'matches(org.w3c.dom.Element)','org.jhotdraw.xml.css.CSSRule.matches(org.w3c.dom.Element)','662','org.jhotdraw.xml.css.CSSRule','public boolean matches(Element elem) {\r\n    boolean isMatch = false;\r\n    switch (type) {\r\n        case ALL :\r\n            isMatch = true;\r\n            break;\r\n        case ELEMENT_NAME :\r\n            {\r\n                String name = elem.getLocalName();\r\n                isMatch = name.equals(selector);\r\n                break;\r\n            }\r\n        case CLASS_ATTRIBUTE :\r\n            {\r\n                String value = elem.getAttribute(\"class\");\r\n                if (value != null) {\r\n                    String[] clazzes = value.split(\" \");\r\n                    for (String clazz : clazzes) {\r\n                        if (clazz.equals(selector)) {\r\n                            isMatch = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        case ID_ATTRIBUTE :\r\n            {\r\n                String name = elem.getAttribute(\"id\");\r\n                isMatch = (name != null) && (name.equals(selector));\r\n                break;\r\n            }\r\n    }\r\n    return isMatch;\r\n}'),(6514,'setSelector(java.lang.String)','org.jhotdraw.xml.css.CSSRule.setSelector(java.lang.String)','662','org.jhotdraw.xml.css.CSSRule','public void setSelector(String selector) {\r\n    switch (selector.charAt(0)) {\r\n        case * :\r\n            type = CSSRule.SelectorType.ALL;\r\n            break;\r\n        case . :\r\n            type = CSSRule.SelectorType.CLASS_ATTRIBUTE;\r\n            break;\r\n        case # :\r\n            type = CSSRule.SelectorType.ID_ATTRIBUTE;\r\n            break;\r\n        default :\r\n            type = CSSRule.SelectorType.ELEMENT_NAME;\r\n            break;\r\n    }\r\n    this.selector = ((type) == (CSSRule.SelectorType.ELEMENT_NAME)) ? selector : selector.substring(1);\r\n}'),(6515,'toString()','org.jhotdraw.xml.css.CSSRule.toString()','662','org.jhotdraw.xml.css.CSSRule','public String toString() {\r\n    return ((\"CSSRule[\" + (selector)) + (properties)) + \"]\";\r\n}'),(6516,'-init-()','org.jhotdraw.xml.css.CSSRule$SelectorType.-init-()','661','org.jhotdraw.xml.css.CSSRule$SelectorType','SelectorType() {\r\n}'),(6517,'-init-()','org.jhotdraw.xml.css.StyleManager.-init-()','663','org.jhotdraw.xml.css.StyleManager','public StyleManager() {\r\n    rules = new ArrayList<CSSRule>();\r\n}'),(6518,'add(org.jhotdraw.xml.css.CSSRule)','org.jhotdraw.xml.css.StyleManager.add(org.jhotdraw.xml.css.CSSRule)','663','org.jhotdraw.xml.css.StyleManager','public void add(CSSRule rule) {\r\n    rules.add(rule);\r\n}'),(6519,'applyStylesTo(org.jhotdraw.xml.css.IXMLElement)','org.jhotdraw.xml.css.StyleManager.applyStylesTo(org.jhotdraw.xml.css.IXMLElement)','663','org.jhotdraw.xml.css.StyleManager','public void applyStylesTo(IXMLElement elem) {\r\n    for (CSSRule rule : new ReversedList<CSSRule>(rules)) {\r\n        if (rule.matches(elem)) {\r\n            // System.out.println(\"StyleManager applying \"+rule+\" to \"+elem);\r\n            rule.apply(elem);\r\n        }\r\n    }\r\n}'),(6520,'applyStylesTo(org.w3c.dom.Element)','org.jhotdraw.xml.css.StyleManager.applyStylesTo(org.w3c.dom.Element)','663','org.jhotdraw.xml.css.StyleManager','public void applyStylesTo(Element elem) {\r\n    for (CSSRule rule : rules) {\r\n        if (rule.matches(elem)) {\r\n            rule.apply(elem);\r\n        }\r\n    }\r\n}');
/*!40000 ALTER TABLE `methods` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-03-10  0:21:28
