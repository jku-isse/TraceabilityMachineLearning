-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: databaseitrust
-- ------------------------------------------------------
-- Server version	8.0.11

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `parameters`
--

DROP TABLE IF EXISTS `parameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parametername` varchar(200) DEFAULT NULL,
  `parametertype` varchar(200) DEFAULT NULL,
  `parameterclass` int(11) DEFAULT NULL,
  `classid` int(11) DEFAULT NULL,
  `classname` varchar(200) DEFAULT NULL,
  `methodid` int(11) DEFAULT NULL,
  `methodname` longtext,
  `isreturn` tinyint(4) NOT NULL,
  `sourcecode` longtext,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=515 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameters`
--

LOCK TABLES `parameters` WRITE;
/*!40000 ALTER TABLE `parameters` DISABLE KEYS */;
INSERT INTO `parameters` VALUES (1,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,5,'edu.ncsu.csc.itrust.DBBuilder',26,'edu.ncsu.csc.itrust.DBBuilder.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public DBBuilder(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(2,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,9,'edu.ncsu.csc.itrust.EmailUtil',51,'edu.ncsu.csc.itrust.EmailUtil.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public EmailUtil(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(3,'Email email','edu.ncsu.csc.itrust.beans.Email',251,9,'edu.ncsu.csc.itrust.EmailUtil',52,'edu.ncsu.csc.itrust.EmailUtil.sendEmail(edu.ncsu.csc.itrust.beans.Email)',0,'// DO NOT SEND REAL EMAILS!!!!!\r\n// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.\r\n// If you want to know how to send emails from Java, just Google it on your own time.\r\npublic void sendEmail(Email email) throws DBException {\r\n    factory.getFakeEmailDAO().sendEmailRecord(email);\r\n}'),(4,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',84,'edu.ncsu.csc.itrust.action.ActivityFeedAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic ActivityFeedAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}'),(5,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',85,'edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Pulls Action Phrase from the associated TransactionType Enum\r\n * Forms an English sentence with actor, action, and timestamp.\r\n *\r\n * @param actor\r\n * 		\r\n * @param timestamp\r\n * 		\r\n * @param code\r\n * 		\r\n * @return \r\n */\r\npublic String getMessageAsSentence(String actor, Timestamp timestamp, TransactionType code) {\r\n    String result = actor + \" \";\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (((code.getCode()) == (type.getCode())) && (type.isPatientViewable()))\r\n            result += type.getActionPhrase();\r\n\r\n    }\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"h:mma.\");\r\n    switch (ActivityFeedAction.recent(new Date(timestamp.getTime()))) {\r\n        case 0 :\r\n            result += \" today\";\r\n            break;\r\n        case 1 :\r\n            result += \" yesterday\";\r\n            break;\r\n        case 2 :\r\n            DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            result += \" on \" + (sdf.format(new Date(timestamp.getTime())));\r\n            break;\r\n    }\r\n    result += \" at \" + (formatter.format(timestamp));\r\n    return replaceNameWithYou(result);\r\n}'),(6,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,25,'edu.ncsu.csc.itrust.action.AddApptAction',94,'edu.ncsu.csc.itrust.action.AddApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public AddApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}'),(7,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,25,'edu.ncsu.csc.itrust.action.AddApptAction',95,'edu.ncsu.csc.itrust.action.AddApptAction.addAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'public String addAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis()))) {\r\n        return (\"The scheduled date of this Appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n    }\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.scheduleAppt(appt);\r\n        return (((\"Success: \" + (appt.getApptType())) + \" for \") + (appt.getDate())) + \" added\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(8,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',104,'edu.ncsu.csc.itrust.action.AddApptRequestAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public AddApptRequestAction(DAOFactory factory) {\r\n    aDAO = factory.getApptDAO();\r\n    arDAO = factory.getApptRequestDAO();\r\n    atDAO = factory.getApptTypeDAO();\r\n}'),(9,'ApptRequestBean bean','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',105,'edu.ncsu.csc.itrust.action.AddApptRequestAction.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'public String addApptRequest(ApptRequestBean bean) throws SQLException {\r\n    List<ApptBean> conflicts = aDAO.getAllHCPConflictsForAppt(bean.getRequestedAppt().getHcp(), bean.getRequestedAppt());\r\n    if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n        return \"The appointment you requested conflicts with other existing appointments.\";\r\n    }\r\n    arDAO.addApptRequest(bean);\r\n    return \"Your appointment request has been saved and is pending.\";\r\n}'),(10,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',107,'edu.ncsu.csc.itrust.action.AddApptRequestAction.getNextAvailableAppts(int,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getNextAvailableAppts(int num, ApptBean bean) throws SQLException {\r\n    List<ApptBean> appts = new ArrayList<ApptBean>(num);\r\n    for (int i = 0; i < num; i++) {\r\n        ApptBean b = new ApptBean();\r\n        b.setApptType(bean.getApptType());\r\n        b.setHcp(bean.getHcp());\r\n        b.setPatient(bean.getPatient());\r\n        b.setDate(new Timestamp(bean.getDate().getTime()));\r\n        List<ApptBean> conflicts = null;\r\n        do {\r\n            conflicts = aDAO.getAllHCPConflictsForAppt(b.getHcp(), b);\r\n            if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n                ApptBean lastConflict = conflicts.get(((conflicts.size()) - 1));\r\n                Timestamp afterConflict = endTime(lastConflict);\r\n                b.setDate(afterConflict);\r\n            }\r\n        } while ((conflicts != null) && (!(conflicts.isEmpty())) );\r\n        appts.add(b);\r\n        Timestamp nextTime = endTime(b);\r\n        bean.setDate(nextTime);\r\n    }\r\n    return appts;\r\n}'),(11,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',106,'edu.ncsu.csc.itrust.action.AddApptRequestAction.endTime(edu.ncsu.csc.itrust.beans.ApptBean)',0,'private Timestamp endTime(ApptBean bean) throws SQLException {\r\n    Timestamp d = new Timestamp(bean.getDate().getTime());\r\n    ApptTypeBean type = atDAO.getApptType(bean.getApptType());\r\n    d.setTime(((d.getTime()) + (((type.getDuration()) * 60) * 1000)));\r\n    return d;\r\n}'),(12,'AddDrugListAction.DrugStrategy uploadStrategy','edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',29,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(13,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(14,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(15,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,29,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',115,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;'),(16,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,29,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',115,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;'),(17,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,31,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy',119,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}'),(18,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,31,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy',119,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}'),(19,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,30,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy',117,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}'),(20,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,30,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy',117,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}'),(21,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,34,'edu.ncsu.csc.itrust.action.AddERespAction',124,'edu.ncsu.csc.itrust.action.AddERespAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddERespAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(22,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,34,'edu.ncsu.csc.itrust.action.AddERespAction',125,'edu.ncsu.csc.itrust.action.AddERespAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.ER);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.ER, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(23,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,36,'edu.ncsu.csc.itrust.action.AddHCPAction',129,'edu.ncsu.csc.itrust.action.AddHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(24,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,36,'edu.ncsu.csc.itrust.action.AddHCPAction',130,'edu.ncsu.csc.itrust.action.AddHCPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.HCP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.HCP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(25,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,38,'edu.ncsu.csc.itrust.action.AddLTAction',134,'edu.ncsu.csc.itrust.action.AddLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n */\r\npublic AddLTAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(26,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,38,'edu.ncsu.csc.itrust.action.AddLTAction',135,'edu.ncsu.csc.itrust.action.AddLTAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.LT);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.LT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(27,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,40,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction',139,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		Patient ID to be validated by the superclass, {@link PatientBaseAction}\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.factory = factory;\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n}'),(28,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,42,'edu.ncsu.csc.itrust.action.AddPHAAction',148,'edu.ncsu.csc.itrust.action.AddPHAAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddPHAAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(29,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,42,'edu.ncsu.csc.itrust.action.AddPHAAction',149,'edu.ncsu.csc.itrust.action.AddPHAAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.PHA);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.PHA, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(30,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,44,'edu.ncsu.csc.itrust.action.AddPatientAction',153,'edu.ncsu.csc.itrust.action.AddPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Just the factory and logged in MID\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n */\r\npublic AddPatientAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(31,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,44,'edu.ncsu.csc.itrust.action.AddPatientAction',154,'edu.ncsu.csc.itrust.action.AddPatientAction.addPatient(edu.ncsu.csc.itrust.beans.PatientBean)',0,'/**\r\n * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.\r\n *\r\n * @return the new MID of the patient\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic long addPatient(PatientBean p) throws DBException, FormValidationException {\r\n    new AddPatientValidator().validate(p);\r\n    long newMID = patientDAO.addEmptyPatient();\r\n    p.setMID(newMID);\r\n    String pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    return newMID;\r\n}'),(32,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,46,'edu.ncsu.csc.itrust.action.AddPatientFileAction',158,'edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Accepts the DAO factory and the CSV stream from the view and parses it.\r\n *\r\n * @param factory\r\n * 		The DAO factory\r\n * @param loggedInMID\r\n * 		The MID of the HCP\r\n * @param CSVStream\r\n * 		The CSV stream uploaded by the user\r\n * @throws CSVFormatException\r\n * 		\r\n * @throws AddPatientFileExceptionTest\r\n * 		\r\n */\r\npublic AddPatientFileAction(InputStream CSVStream, DAOFactory factory, long loggedInMID) throws AddPatientFileException, CSVFormatException {\r\n    if (factory != null) {\r\n        this.patientDAO = factory.getPatientDAO();\r\n        this.loggedInMID = loggedInMID;\r\n        this.authDAO = factory.getAuthDAO();\r\n    }\r\n    CSVParser parser = new CSVParser(CSVStream);\r\n    CSVHeader = parser.getHeader();\r\n    CSVData = parser.getData();\r\n    errors = parser.getErrors();\r\n    buildMappings(CSVHeader);\r\n    try {\r\n        createPatients();\r\n    } catch (DBException e) {\r\n        throw new AddPatientFileException(\"Database error while adding new patients!\");\r\n    }\r\n}'),(33,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',170,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person recording the patients data.\r\n * @param patientMID\r\n * 		The MID of the patient\r\n */\r\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}'),(34,'RemoteMonitoringDataBean rmdBean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',171,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.addRemoteMonitoringData(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'/**\r\n * Adds a patients telemedicine data to the database.\r\n *\r\n * @param weight\r\n * 		\r\n * @param pedometerReading\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addRemoteMonitoringData(RemoteMonitoringDataBean rmdBean) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(rmdBean);\r\n    String role;\r\n    if ((loggedInMID) == (patientMID)) {\r\n        role = \"self-reported\";\r\n    } else\r\n        if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n            role = \"case-manager\";\r\n        } else {\r\n            role = \"patient representative\";\r\n        }\r\n\r\n    // Store in DB\r\n    rmDAO.storePatientData(patientMID, rmdBean, role, loggedInMID);\r\n}'),(35,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,50,'edu.ncsu.csc.itrust.action.AddUAPAction',191,'edu.ncsu.csc.itrust.action.AddUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddUAPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(36,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,50,'edu.ncsu.csc.itrust.action.AddUAPAction',192,'edu.ncsu.csc.itrust.action.AddUAPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.UAP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.UAP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(37,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,52,'edu.ncsu.csc.itrust.action.ApptAction',196,'edu.ncsu.csc.itrust.action.ApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ApptAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptDAO = factory.getApptDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(38,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,52,'edu.ncsu.csc.itrust.action.ApptAction',198,'edu.ncsu.csc.itrust.action.ApptAction.getConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n * Driver method to get all appointment conflicts, used in jsp files\r\n *\r\n * @param mid\r\n * 		\r\n * @param appt\r\n * 		\r\n * @return \r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    return apptDAO.getAllHCPConflictsForAppt(mid, appt);\r\n}'),(39,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,54,'edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction',202,'edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Sets up defualts.\r\n *\r\n * @param factory\r\n * 		\r\n * @author Andy Meneely\r\n */\r\npublic ChangeSessionTimeoutAction(DAOFactory factory) {\r\n    this.accessDAO = factory.getAccessDAO();\r\n}'),(40,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,56,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction',209,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		The patient ID to be validated and used\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		This is thrown if a patient is added without any health records to be checked. Try to avoid\r\n * 		having this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\npublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}'),(41,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,58,'edu.ncsu.csc.itrust.action.DeclareHCPAction',216,'edu.ncsu.csc.itrust.action.DeclareHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAO factory to be used for generating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		This patient\r\n * @author Andy Meneely\r\n */\r\npublic DeclareHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(42,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',232,'edu.ncsu.csc.itrust.action.DrugInteractionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAO factory to be used for generating the DAOs for this action.\r\n */\r\npublic DrugInteractionAction(DAOFactory factory, long loggedInMID) {\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.validator = new DrugInteractionValidator();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(43,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,63,'edu.ncsu.csc.itrust.action.EditApptAction',245,'edu.ncsu.csc.itrust.action.EditApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}'),(44,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,63,'edu.ncsu.csc.itrust.action.EditApptAction',246,'edu.ncsu.csc.itrust.action.EditApptAction.editAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'/**\r\n * Updates an existing appointment\r\n *\r\n * @param appt\r\n * 		Appointment Bean containing the updated information\r\n * @return Message to be displayed\r\n * @throws FormValidationException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic String editAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis())))\r\n        return (\"The scheduled date of this appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.editAppt(appt);\r\n        return \"Success: Appointment changed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(45,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,63,'edu.ncsu.csc.itrust.action.EditApptAction',248,'edu.ncsu.csc.itrust.action.EditApptAction.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n * Removes an existing appointment\r\n *\r\n * @param appt\r\n * 		Appointment Bean containing the ID of the appointment to be removed.\r\n * @return Message to be displayed\r\n */\r\npublic String removeAppt(ApptBean appt) {\r\n    try {\r\n        apptDAO.removeAppt(appt);\r\n        return \"Success: Appointment removed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(46,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',256,'edu.ncsu.csc.itrust.action.EditApptTypeAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditApptTypeAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n}'),(47,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',257,'edu.ncsu.csc.itrust.action.EditApptTypeAction.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public String addApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName()))\r\n            return (\"Appointment Type: \" + (apptType.getName())) + \" already exists.\";\r\n\r\n    }\r\n    try {\r\n        if (apptTypeDAO.addApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(48,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',258,'edu.ncsu.csc.itrust.action.EditApptTypeAction.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public String editApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    int flag = 0;\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName())) {\r\n            flag = 1;\r\n            if ((a.getDuration()) == (apptType.getDuration()))\r\n                return (((\"Appointment Type: \" + (apptType.getName())) + \" already has a duration of \") + (apptType.getDuration())) + \" minutes.\";\r\n\r\n            break;\r\n        }\r\n    }\r\n    if (flag == 0) {\r\n        return (\"Appointment Type: \" + (apptType.getName())) + \" you are trying to update does not exist.\";\r\n    }\r\n    try {\r\n        if (apptTypeDAO.editApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" updated\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(49,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',268,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(50,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',269,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(51,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',270,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.addDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public void addDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.add(bean);\r\n}'),(52,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',272,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.editDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public void editDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.edit(bean);\r\n}'),(53,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',271,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.deleteDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public void deleteDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.remove(bean.getOvDiagnosisID());\r\n}'),(54,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',282,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory\r\n * 		The DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID\r\n * 		The user authorizing this action.\r\n * @param pidString\r\n * 		The patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(55,'HealthRecordForm hr','edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',288,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',283,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.addHealthRecord(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Adds a health record for the given patient\r\n *\r\n * @param pid\r\n * 		The patient record who is being edited.\r\n * @param hr\r\n * 		The filled out health record form to be added.\r\n * @return message - \"Information Recorded\" or exceptions message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException, iTrustException {\r\n    validator.validate(hr);\r\n    HealthRecord record = transferForm(pid, hr);\r\n    hrDAO.add(record);\r\n    return \"Information Recorded\";\r\n}'),(56,'HealthRecordForm form','edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',288,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',286,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * 		Patient of interest\r\n * @param form\r\n * 		Form to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}'),(57,'edu.ncsu.csc.itrust.beans.HealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',286,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',1,'/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * 		Patient of interest\r\n * @param form\r\n * 		Form to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}'),(58,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',293,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(59,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',294,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(60,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',295,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.addImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void addImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}'),(61,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',297,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.editImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void editImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}'),(62,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',296,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.deleteImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void deleteImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}'),(63,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',307,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(64,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',308,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(65,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',309,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public void addLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: choose lab tech if not assigned in bean\r\n    if (\"\".equals(bean.getStatus())) {\r\n        bean.setStatus(LabProcedureBean.In_Transit);\r\n    }\r\n    labProcedureDAO.addLabProcedure(bean);\r\n}'),(66,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',310,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}'),(67,'edu.ncsu.csc.itrust.beans.LabProcedureBean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',310,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)',1,'public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}'),(68,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',312,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.editLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public void editLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.updateLabProcedure(bean);\r\n}'),(69,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',311,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.deleteLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public void deleteLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.removeLabProcedure(bean.getProcedureID());\r\n}'),(70,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',333,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the HCP editing their monitoring list.\r\n */\r\npublic EditMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(71,'TelemedicineBean tBean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',334,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.addToList(long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Adds a patient to the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * 		the patient\r\n * @param permissions\r\n * 		Array indicating what data the patient is allowed to enter.\r\n * 		Ordered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.\r\n * @return true if added successfully. False if already in list.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean addToList(long patientMID, TelemedicineBean tBean) throws DBException {\r\n    return rmDAO.addPatientToList(patientMID, loggedInMID, tBean);\r\n}'),(72,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',342,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The patient who this action is performed on.\r\n * @param ovIDString\r\n * 		The ID of the office visit in play.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(73,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',343,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Create an OfficeVisitAction that is not yet associated with an actual\r\n * office visit.  When update() is called, it will be saved.  Until then,\r\n * any attempt to save prescriptions, procedures, lab procedures,\r\n * immunizations, or diagnoses will raise an exception.\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(74,'EditOfficeVisitForm form','edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',286,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',360,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateInformation(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)',0,'/**\r\n * Updates the office visit with information from the form passed in.  If\r\n * the office visit has not yet been saved, calling this method will save\r\n * it as well as make the sub actions able to be saved.\r\n *\r\n * @param form\r\n * 		information to update\r\n * @return \"success\" or exceptions message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(EditOfficeVisitForm form, boolean isERIncident) throws FormValidationException {\r\n    String confirm = \"\";\r\n    try {\r\n        updateOv(form, isERIncident);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(75,'TransactionType trans','edu.ncsu.csc.itrust.enums.TransactionType',490,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',352,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logOfficeVisitEvent(edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Helper that logs an office visit event.  The associated patient id, HCP\r\n * id, and office visit id are automatically included.\r\n *\r\n * @param trans\r\n * 		Transaction type for the log.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logOfficeVisitEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Office visit ID: \" + (getOvID())));\r\n}'),(76,'TransactionType trans','edu.ncsu.csc.itrust.enums.TransactionType',490,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',351,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logIncidentReportEvent(edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Helper that logs an ER incident.  The associated patient id, ER\r\n * id, and incident report id are automatically included.\r\n *\r\n * @param trans\r\n * 		Transaction type for the log.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logIncidentReportEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Incident Report ID: \" + (getOvID())));\r\n}'),(77,'EditOfficeVisitForm form','edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',286,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',361,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateOv(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)',0,'/**\r\n * Updates the office visit.\r\n *\r\n * @param form\r\n * 		form with all the information\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate void updateOv(EditOfficeVisitForm form, boolean isERIncident) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = getBean();\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    ov.setERIncident(isERIncident);\r\n    updateBean(ov);\r\n}'),(78,'OfficeVisitBean bean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',359,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateBean(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'/**\r\n * Update the office visit with the given data.  If the office visit has\r\n * not yet been saved, this will save it and reinitialize the sub actions.\r\n *\r\n * @param bean\r\n * 		The data with which to update the office visit.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate void updateBean(OfficeVisitBean bean) throws DBException, iTrustException {\r\n    if (isUnsaved()) {\r\n        // bean.getID() == -1\r\n        ovID = ovDAO.add(bean);\r\n        reinitializeSubActions();\r\n    } else {\r\n        ovDAO.update(bean);\r\n    }\r\n}'),(79,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,79,'edu.ncsu.csc.itrust.action.EditPHRAction',375,'edu.ncsu.csc.itrust.action.EditPHRAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the currently logged in user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.ndcodesDAO = factory.getNDCodesDAO();// NEW\r\n\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}'),(80,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',379,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has high blood pressure\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(81,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',380,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has high cholesterol\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has high cholesterol.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(82,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',377,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has diabetes\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has diabetes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(83,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',376,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has cancer\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has cancer.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(84,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',378,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has heart disease\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has heart disease.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(85,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',390,'edu.ncsu.csc.itrust.action.EditPHRAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member smokes\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member smokes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(86,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',387,'edu.ncsu.csc.itrust.action.EditPHRAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if the family member is dead and returns their cause of death if so\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return the cause of death if there is one; otherwise null\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}'),(87,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,82,'edu.ncsu.csc.itrust.action.EditPatientAction',405,'edu.ncsu.csc.itrust.action.EditPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n}'),(88,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,82,'edu.ncsu.csc.itrust.action.EditPatientAction',413,'edu.ncsu.csc.itrust.action.EditPatientAction.updateInformation(edu.ncsu.csc.itrust.beans.PatientBean)',0,'/**\r\n * Takes the information out of the PatientBean param and updates the patients information\r\n *\r\n * @param p\r\n * 		the new patient information\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void updateInformation(PatientBean p) throws FormValidationException, iTrustException {\r\n    p.setMID(pid);// for security reasons\r\n\r\n    validator.validate(p);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    emailutil.sendEmail(makeEmail());\r\n}'),(89,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',425,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient id as a string.\r\n * @param ovIDString\r\n * 		The office visit as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(90,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',426,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an non-existent office\r\n * visit.  Most methods will throw exceptions if built with this\r\n * constructor.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(91,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',427,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.addPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Add patient instructions to the office visit.\r\n *\r\n * @param bean\r\n * 		The instructions to add.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void addPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.add(bean);\r\n}'),(92,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',429,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.editPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Modify patient instruction in this office visit.\r\n *\r\n * @param bean\r\n * 		The instructions to modify\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void editPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.edit(bean);\r\n}'),(93,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',428,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.deletePatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Delete patient instructions from this office visit.\r\n *\r\n * @param bean\r\n * 		The instructions to delete.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void deletePatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.remove(bean.getId());\r\n}'),(94,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',431,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Verify the contents of the given instruction bean.\r\n *\r\n * @param bean\r\n * 		The instructions to check.\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException, iTrustException {\r\n    verifySaved();\r\n    PatientInstructionsBeanValidator validator = new PatientInstructionsBeanValidator();\r\n    validator.validate(bean);\r\n}'),(95,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,86,'edu.ncsu.csc.itrust.action.EditPersonnelAction',439,'edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user editing this personnel.\r\n * @param pidString\r\n * 		The ID of the user being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if ((editor == editing) && (pidlong != loggedInMID)) {\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    } else\r\n        if ((((editor == (Role.HCP)) && (editing == (Role.ADMIN))) || ((editor == (Role.UAP)) && (editing == (Role.HCP)))) || ((editor == (Role.ADMIN)) && (editing == (Role.UAP)))) {\r\n            throw new iTrustException(\"You are not authorized to edit this record!\");\r\n        }\r\n\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(96,'PersonnelBean personnelForm','edu.ncsu.csc.itrust.beans.PersonnelBean',270,86,'edu.ncsu.csc.itrust.action.EditPersonnelAction',440,'edu.ncsu.csc.itrust.action.EditPersonnelAction.updateInformation(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Takes information from the personnelForm param and updates the patient\r\n *\r\n * @param personnelForm\r\n * 		PersonnelBean with new information\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void updateInformation(PersonnelBean personnelForm) throws FormValidationException, iTrustException {\r\n    personnelForm.setMID(pid);\r\n    validator.validate(personnelForm);\r\n    personnelDAO.editPersonnel(personnelForm);\r\n}'),(97,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',449,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}'),(98,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',450,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * A prescription action that is part of an office visit that is not yet\r\n * saved.  All attempts to modify this action will throw exceptions.  Once\r\n * the office visit is saved, obtain a new EditPrescriptionsAction using\r\n * the four-argument constructor.  (This is done automatically by the\r\n * EditOfficeVisitAction class.)\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    init(factory);\r\n}'),(99,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',462,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.init(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'private void init(DAOFactory factory) {\r\n    psDAO = factory.getPrescriptionsDAO();\r\n    medDAO = factory.getNDCodesDAO();\r\n    interactionsDAO = factory.getDrugInteractionDAO();\r\n    allergyDAO = factory.getAllergyDAO();\r\n    rptDAO = factory.getPrescriptionReportDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    emailUtil = new EmailUtil(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n    prescriptionOverrideDAO = new PrescriptionOverrideDAO(factory);\r\n    loggingAction = new EventLoggingAction(factory);\r\n}'),(100,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',453,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkForAllergiesAndInteractions(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Checks the prescription bean for interactions, allergies, and legal\r\n * values.\r\n *\r\n * @param pres\r\n * 		The prescription bean.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate void checkForAllergiesAndInteractions(PrescriptionBean pres) throws iTrustException {\r\n    List<String> warnings = checkInteraction(pres);\r\n    warnings.addAll(checkAllergy(pres));\r\n    if (!(warnings.isEmpty())) {\r\n        PatientBean patient = patientDAO.getPatient(getPid());\r\n        PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n        loggingAction.logEvent(TransactionType.OVERRIDE_INTERACTION_WARNING, hcp.getMID(), patient.getMID(), (((pres.getMedication().getNDCode()) + \" Override: \") + (pres.getReasons().toString())));\r\n        if (validOverride(pres)) {\r\n            emailUtil.sendEmail(makeEmail(pres, warnings));\r\n        } else {\r\n            throw new PrescriptionWarningException(warnings);\r\n        }\r\n    }\r\n    if (\"\".equals(pres.getInstructions())) {\r\n        throw new PrescriptionFieldException(\"Instructions are required.\");\r\n    }\r\n}'),(101,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',464,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.validOverride(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Indicates if the prescription bean has a valid allergy/interaction\r\n * override.\r\n */\r\nprivate boolean validOverride(PrescriptionBean pres) {\r\n    return ((pres.getReasons()) != null) && ((pres.getReasons().size()) > 0);\r\n}'),(102,'PrescriptionBean newPrescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',459,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}'),(103,'PrescriptionBean oldPrescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',459,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}'),(104,'DrugInteractionBean bean','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',459,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}'),(105,'AllergyBean bean','edu.ncsu.csc.itrust.beans.AllergyBean',244,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',458,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatAllergyWarning(edu.ncsu.csc.itrust.beans.AllergyBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-allergy warning was detected.\r\n */\r\nprivate String formatAllergyWarning(AllergyBean bean) throws DBException {\r\n    return ((\"Allergy: \" + (bean.getDescription())) + \". First Found: \") + (new SimpleDateFormat(\"MM/dd/yyyy\").format(bean.getFirstFound()));\r\n}'),(106,'PrescriptionBean newPrescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',454,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkInteraction(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Checks to see if the given prescription has an interaction with any\r\n * other previously prescribed prescriptions.\r\n *\r\n * @param newPrescription\r\n * 		\r\n * @return A list of interaction warning messages.  The list is empty if no\r\ninteractions were detected.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate List<String> checkInteraction(PrescriptionBean newPrescription) throws iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        String startdate = needed.format(newPrescription.getStartDate());\r\n        String enddate = needed.format(newPrescription.getEndDate());\r\n        String drug = newPrescription.getMedication().getNDCode();\r\n        startdate = startdate.replaceAll(\"/\", \"-\");\r\n        enddate = enddate.replaceAll(\"/\", \"-\");\r\n        List<PrescriptionReportBean> prBeanList = rptDAO.byDate(getPid(), startdate, enddate);\r\n        List<DrugInteractionBean> dBeanList = interactionsDAO.getInteractions(drug);\r\n        for (PrescriptionReportBean prBean : prBeanList) {\r\n            String oldDrug = prBean.getPrescription().getMedication().getNDCode();\r\n            PrescriptionBean oldPrescription = prBean.getPrescription();\r\n            for (DrugInteractionBean dBean : dBeanList) {\r\n                String intDrug1 = dBean.getFirstDrug();\r\n                String intDrug2 = dBean.getSecondDrug();\r\n                if ((oldDrug.equals(intDrug1)) && (drug.equals(intDrug2))) {\r\n                    warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                } else\r\n                    if ((oldDrug.equals(intDrug2)) && (drug.equals(intDrug1))) {\r\n                        warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                    }\r\n\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}'),(107,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',452,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkAllergy(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Checks to see if the patient is allergic to the given prescription.\r\n *\r\n * @return A list of allergy warnings.  The list is empty if no allergies\r\nwere detected.\r\n * @throws iTrustException\r\n * 		\r\n * @throws PrescriptionWarningException\r\n * 		\r\n */\r\nprivate List<String> checkAllergy(PrescriptionBean pres) throws PrescriptionWarningException, iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(getPid());\r\n        MedicationBean medBean = pres.getMedication();\r\n        if (medBean != null) {\r\n            String newDrug = medBean.getNDCode();\r\n            for (AllergyBean allergyBean : allergyList) {\r\n                // Allergy: Aspirin. First Found: 12/20/2008.\r\n                if (newDrug.equals(allergyBean.getNDCode())) {\r\n                    warnings.add(formatAllergyWarning(allergyBean));\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}'),(108,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',456,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.editPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Edits an existing prescription in the database.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * 		The prescription bean that has been changed.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void editPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    psDAO.edit(pres);\r\n}'),(109,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',451,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.addPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Add a prescription to this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void addPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    long medID = psDAO.add(pres);\r\n    for (OverrideReasonBean reason : pres.getReasons()) {\r\n        reason.setPresID(medID);\r\n        prescriptionOverrideDAO.add(reason);\r\n    }\r\n}'),(110,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',455,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.deletePrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Delete a prescription from this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void deletePrescription(PrescriptionBean pres) throws DBException, iTrustException {\r\n    verifySaved();\r\n    psDAO.remove(pres.getId());\r\n    prescriptionOverrideDAO.remove(pres.getId());\r\n}'),(111,'EditPrescriptionsForm form','edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',287,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',457,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)',0,'/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * 		The form to convert.\r\n * @param defaultInstructions\r\n * 		The default value given in the instructions\r\n * 		field.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}'),(112,'edu.ncsu.csc.itrust.beans.PrescriptionBean','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',457,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)',1,'/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * 		The form to convert.\r\n * @param defaultInstructions\r\n * 		The default value given in the instructions\r\n * 		field.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}'),(113,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',463,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)',0,'/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}'),(114,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',463,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)',1,'/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}'),(115,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',481,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(116,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',482,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(117,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',483,'edu.ncsu.csc.itrust.action.EditProceduresAction.addProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void addProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}'),(118,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',485,'edu.ncsu.csc.itrust.action.EditProceduresAction.editProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void editProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}'),(119,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',484,'edu.ncsu.csc.itrust.action.EditProceduresAction.deleteProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void deleteProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}'),(120,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',495,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(121,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',496,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(122,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',497,'edu.ncsu.csc.itrust.action.EditReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Add a new referral to the database.  The id on the ReferralBean is\r\n * ignored.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void addReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.addReferral(bean);\n}\n */\r\n/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * 		The bean to edit.\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral from the database.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}'),(123,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',498,'edu.ncsu.csc.itrust.action.EditReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}'),(124,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',506,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the patient editing his/her representatives.\r\n * @param pidString\r\n * 		The MID of the representative in question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(125,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',519,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditSingleReferralAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    messageAction = new SendMessageAction(factory, hcpid);\r\n    this.hcpid = hcpid;\r\n}'),(126,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',520,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Add a new referral to the database.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void addReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"New referrals must be from the current HCP.\");\r\n    }\r\n    long id = referralDAO.addReferral(bean);\r\n    bean = referralDAO.getReferral(id);\r\n    sendReferralCreatedMessages(bean);\r\n}'),(127,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',522,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void editReferral(ReferralBean bean) throws iTrustException {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Edited referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.editReferral(bean);\r\n}'),(128,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',521,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.deleteReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Delete a referral from the database.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void deleteReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Deleted referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.removeReferral(bean.getId());\r\n    sendReferralCancelledMessages(bean);\r\n}'),(129,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',524,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}'),(130,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',525,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}'),(131,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',526,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPSpecialty(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public String getReceivingHCPSpecialty(ReferralBean bean) throws iTrustException {\r\n    String s = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    return s == null ? \"\" : s;\r\n}'),(132,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',523,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getOfficeVisitDate(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public String getOfficeVisitDate(ReferralBean bean) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(bean.getOvid()).getVisitDateStr();\r\n}'),(133,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',529,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCreatedMessages(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Send messages to the users associated with creating a referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void sendReferralCreatedMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(\"Referral information:\n\");\r\n    String senderSpecialty = personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty();\r\n    String receiverSpecialty = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    senderSpecialty = (senderSpecialty == null) ? \"no specialty\" : senderSpecialty;\r\n    receiverSpecialty = (receiverSpecialty == null) ? \"no specialty\" : receiverSpecialty;\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + senderSpecialty) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + receiverSpecialty) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean senderMsg = new MessageBean();\r\n    senderMsg.setFrom(bean.getSenderID());\r\n    senderMsg.setTo(bean.getSenderID());\r\n    senderMsg.setBody(body.toString());\r\n    senderMsg.setSubject(\"You Created a New Referral\");\r\n    senderMsg.setRead(0);\r\n    messageAction.sendMessage(senderMsg);\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"You Received a New Referral\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"You Received a New Referral\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}'),(134,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',528,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCancelledMessages(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Send messages to the users associated with canceling a referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void sendReferralCancelledMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(((\"The referral created on \" + (bean.getTimeStamp())) + \"has been deleted.\n\n\"));\r\n    body.append(\"The referral is reproduced here for your convienence:\n\");\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty())) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty())) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}'),(135,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,98,'edu.ncsu.csc.itrust.action.EmergencyReportAction',536,'edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at the emergency report.\r\n * @param pidString\r\n * 		The ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    emailutil.sendEmail(makeEmail());\r\n}'),(136,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',550,'edu.ncsu.csc.itrust.action.EventLoggingAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic EventLoggingAction(DAOFactory factory) {\r\n    this.transDAO = factory.getTransactionDAO();\r\n}'),(137,'TransactionType type','edu.ncsu.csc.itrust.enums.TransactionType',490,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',551,'edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}'),(138,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,102,'edu.ncsu.csc.itrust.action.FindExpertAction',555,'edu.ncsu.csc.itrust.action.FindExpertAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Constructor simply is used to initialize the DAOs\r\n *\r\n * @param factory\r\n * 		used to initialize DAOs\r\n */\r\npublic FindExpertAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    hospitalsDAO = new HospitalsDAO(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n}'),(139,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',565,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is viewing the calendar\r\n */\r\npublic GenerateCalendarAction(DAOFactory factory, long loggedInMID) {\r\n    a_action = new ViewMyApptsAction(factory, loggedInMID);\r\n    r_action = new ViewMyRecordsAction(factory, loggedInMID);\r\n    send = new ArrayList<ApptBean>();\r\n    apptTypeDAO = factory.getApptTypeDAO();\r\n}'),(140,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,106,'edu.ncsu.csc.itrust.action.GetUserNameAction',578,'edu.ncsu.csc.itrust.action.GetUserNameAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used for creating the DAOs for this action.\r\n */\r\npublic GetUserNameAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(141,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',585,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		MID of the person who is logged in\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    visitReminderDAO = factory.getVisitRemindersDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n}'),(142,'GetVisitRemindersAction.ReminderType type','edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType',108,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',590,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getVisitReminders(edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType)',0,'/**\r\n * Returns a list of VisitReminderReturnForms for the type passed in as a param\r\n *\r\n * @param type\r\n * 		the ReminderType\r\n * @return the list of VisitReminderReturnForms\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<VisitReminderReturnForm> getVisitReminders(GetVisitRemindersAction.ReminderType type) throws FormValidationException, iTrustException {\r\n    if (null == type)\r\n        throw new iTrustException(\"Reminder Type DNE\");\r\n\r\n    switch (type) {\r\n        case DIAGNOSED_CARE_NEEDERS :\r\n            return visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID);\r\n            // return stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));\r\n        case FLU_SHOT_NEEDERS :\r\n            return visitReminderDAO.getFluShotDelinquents(loggedInMID);\r\n        case IMMUNIZATION_NEEDERS :\r\n            return getImmunizationNeeders(loggedInMID);\r\n        default :\r\n            throw new iTrustException(\"Reminder Type DNE\");\r\n    }\r\n}'),(143,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,111,'edu.ncsu.csc.itrust.action.GroupReportAction',626,'edu.ncsu.csc.itrust.action.GroupReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n */\r\npublic GroupReportAction(DAOFactory factory) {\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    fDAO = factory.getFamilyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(144,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,111,'edu.ncsu.csc.itrust.action.GroupReportAction',629,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(145,'DemographicReportFilter.DemographicReportFilterType filterType','edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType',585,111,'edu.ncsu.csc.itrust.action.GroupReportAction',629,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(146,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,111,'edu.ncsu.csc.itrust.action.GroupReportAction',630,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(147,'MedicalReportFilter.MedicalReportFilterType filterType','edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType',588,111,'edu.ncsu.csc.itrust.action.GroupReportAction',630,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(148,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,111,'edu.ncsu.csc.itrust.action.GroupReportAction',631,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(149,'PersonnelReportFilter.PersonnelReportFilterType filterType','edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType',591,111,'edu.ncsu.csc.itrust.action.GroupReportAction',631,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(150,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',637,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.util.List)',0,'/**\r\n * Initializes the group report generator with a list of filters\r\n *\r\n * @param filters\r\n * 		List of filters to be used in the report\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, List<ReportFilter> filters) {\r\n    this.factory = factory;\r\n    this.filters = filters;\r\n    action = new GroupReportAction(factory);\r\n}'),(151,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',638,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,javax.servlet.http.HttpServletRequest)',0,'/**\r\n * Initializes the group report generator with a list of filters after parsing them\r\n *\r\n * @param filters\r\n * 		HttpServletRequest to grab and parse parameters from\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, HttpServletRequest request) {\r\n    this.factory = factory;\r\n    this.filters = new ArrayList<ReportFilter>();\r\n    parseFilters(request);\r\n    action = new GroupReportAction(factory);\r\n}'),(152,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,115,'edu.ncsu.csc.itrust.action.LabProcHCPAction',649,'edu.ncsu.csc.itrust.action.LabProcHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		MID for the logged in HCP\r\n */\r\npublic LabProcHCPAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n}'),(153,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',664,'edu.ncsu.csc.itrust.action.LabProcLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Setup\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		LT who is logged in\r\n */\r\npublic LabProcLTAction(DAOFactory factory, long loggedInMID) {\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    personDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(154,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',682,'edu.ncsu.csc.itrust.action.LabProcUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Setup\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		UAP who is logged in\r\n */\r\npublic LabProcUAPAction(DAOFactory factory, long loggedInMID) {\r\n    factory.getTransactionDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n    this.factory = factory;\r\n}'),(155,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',684,'edu.ncsu.csc.itrust.action.LabProcUAPAction.updateProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Updates a lab procedure\r\n *\r\n * @param b\r\n * 		the procedure to update\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException {\r\n    validator.validate(b);\r\n    // need to check if status is whats being changed - if new status!=old status send email\r\n    if (!(b.getStatus().equals(lpDAO.getLabProcedure(b.getProcedureID()).getStatus()))) {\r\n        new EmailUtil(factory).sendEmail(makeEmail(b));\r\n    }\r\n    lpDAO.updateLabProcedure(b);\r\n}'),(156,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',683,'edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * 		the procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}'),(157,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',683,'edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)',1,'/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * 		the procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}'),(158,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,121,'edu.ncsu.csc.itrust.action.LoginFailureAction',691,'edu.ncsu.csc.itrust.action.LoginFailureAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param ipAddr\r\n * 		The IP address of the user making the login attempt.\r\n */\r\npublic LoginFailureAction(DAOFactory factory, String ipAddr) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.ipAddr = ipAddr;\r\n    validCaptcha = false;\r\n    hasAttempts = false;\r\n}'),(159,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',704,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user managing hospitals.\r\n */\r\npublic ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalsDAO = factory.getHospitalsDAO();\r\n}'),(160,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',736,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n */\r\npublic MonitorAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.messenger = new SendMessageAction(factory, loggedInMID);\r\n}'),(161,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,128,'edu.ncsu.csc.itrust.action.MyDiagnosisAction',750,'edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up for defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n    this.prescriptionsDAO = factory.getPrescriptionsDAO();\r\n}'),(162,'HCPDiagnosisBean a','edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',254,127,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator',756,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)',0,'/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * 		the first HCP\r\n * @param b\r\n * 		the second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}'),(163,'HCPDiagnosisBean b','edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',254,127,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator',756,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)',0,'/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * 		the first HCP\r\n * @param b\r\n * 		the second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}'),(164,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',766,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PatientRoomAssignmentAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    wardDAO = new WardDAO(factory);\r\n}'),(165,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',768,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,long)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, long patientMID) throws DBException {\r\n    wardRoom.setOccupiedBy(patientMID);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}'),(166,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',767,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}'),(167,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',767,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}'),(168,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',769,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.removePatientFromRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,java.lang.String)',0,'public void removePatientFromRoom(WardRoomBean wardRoom, String reason) throws DBException {\r\n    long mid = wardRoom.getOccupiedBy();\r\n    wardDAO.checkOutPatientReason(mid, reason);\r\n    wardRoom.setOccupiedBy(null);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}'),(169,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',774,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates pidString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is making a prescription report.\r\n * @param pidString\r\n * 		The MID of the patient in question.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.prDAO = factory.getPrescriptionReportDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(170,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',793,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}'),(171,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',794,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor used to send e-mails only\r\n */\r\npublic ReportAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.validator = new AdverseEventValidator();\r\n}'),(172,'AdverseEventBean aeBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',796,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * 		\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}'),(173,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',796,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)',1,'/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * 		\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}'),(174,'AdverseEventBean aeBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',795,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'/**\r\n * Method used to add a report to the data base\r\n *\r\n * @param aeBean\r\n * 		The adverse event to add\r\n * @return a string for testing purposes only\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String addReport(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    try {\r\n        validator.validate(aeBean);\r\n    } catch (FormValidationException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        adverseEventDAO.addReport(aeBean, hcpID);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    /**\r\n     * Old code used to send a single e-mail. Keep for reference\r\n     * Email email = new Email();\r\n     * String senderName;\r\n     * String fromEmail;\r\n     * email.setFrom(\"noreply@itrust.com\");\r\n     * List<String> toList = new ArrayList<String>();\r\n     *\r\n     * PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n     * PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n     *\r\n     * toList.add(receiver.getEmail());\r\n     * senderName = sender.getFullName();\r\n     * fromEmail = sender.getEmail();\r\n     *\r\n     * email.setToList(toList);\r\n     * email.setFrom(fromEmail);\r\n     * email.setSubject(String.format(\"Adverse Event Report\"));\r\n     * email.setBody(String.format(\r\n     * \" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID()))\r\n     * + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\r\n     * \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\r\n     * ));\r\n     * emailer.sendEmail(email);\r\n     */\r\n    return \"\";\r\n}'),(175,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',806,'edu.ncsu.csc.itrust.action.ResetPasswordAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic ResetPasswordAction(DAOFactory factory) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.factory = factory;\r\n}'),(176,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',830,'edu.ncsu.csc.itrust.action.SearchUsersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is performing the search.\r\n */\r\npublic SearchUsersAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(177,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,142,'edu.ncsu.csc.itrust.action.SendMessageAction',850,'edu.ncsu.csc.itrust.action.SendMessageAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user sending the message.\r\n */\r\npublic SendMessageAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.emailVal = new EMailValidator();\r\n    this.messVal = new MessageValidator();\r\n}'),(178,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,142,'edu.ncsu.csc.itrust.action.SendMessageAction',857,'edu.ncsu.csc.itrust.action.SendMessageAction.sendMessage(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Sends a message\r\n *\r\n * @param mBean\r\n * 		message to be sent\r\n * @throws iTrustException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void sendMessage(MessageBean mBean) throws FormValidationException, iTrustException, SQLException {\r\n    messVal.validate(mBean);\r\n    emailVal.validate(mBean);\r\n    messageDAO.addMessage(mBean);\r\n    Email email = new Email();\r\n    String senderName;\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    if ((8999999999L < (mBean.getFrom())) && (8999999999L < (mBean.getTo()))) {\r\n        // when from and to are LHCPs\r\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n        toList.add(receiver.getEmail());\r\n        senderName = sender.getFullName();\r\n        fromEmail = sender.getEmail();\r\n        email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n    } else {\r\n        if (6999999999L < (mBean.getFrom())) {\r\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is any personnel and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is any personnel and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        } else {\r\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is patient and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is patient and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        }\r\n    }\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"A new message from %s\", senderName));\r\n    emailer.sendEmail(email);\r\n}'),(179,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,144,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction',867,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param rLoggedInMID\r\n * 		The MID of the user who is setting their security question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {\r\n    this.authDAO = factory.getAuthDAO();\r\n    loggedInMID = checkMID(rLoggedInMID);\r\n}'),(180,'SecurityQA a','edu.ncsu.csc.itrust.beans.SecurityQA',277,144,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction',870,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.updateInformation(edu.ncsu.csc.itrust.beans.SecurityQA)',0,'/**\r\n * Updates information in the database from the information held in the SecurityQA bean passed as a param\r\n *\r\n * @param a\r\n * 		SecurityQuestionBean that holds new information\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void updateInformation(SecurityQA a) throws Exception {\r\n    SecurityQAValidator sqav = new SecurityQAValidator();\r\n    sqav.validate(a);\r\n    authDAO.setSecurityQuestionAnswer(a.getQuestion(), a.getAnswer(), loggedInMID);\r\n}'),(181,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,146,'edu.ncsu.csc.itrust.action.SurveyAction',877,'edu.ncsu.csc.itrust.action.SurveyAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user taking the survey.\r\n */\r\npublic SurveyAction(DAOFactory factory, long loggedInMID) {\r\n    surveyDAO = factory.getSurveyDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(182,'SurveyBean surveyBean','edu.ncsu.csc.itrust.beans.SurveyBean',278,146,'edu.ncsu.csc.itrust.action.SurveyAction',878,'edu.ncsu.csc.itrust.action.SurveyAction.addSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,long)',0,'/**\r\n * Pass the OfficeVistBean along with SurveyBean\r\n *\r\n * @param surveyBean\r\n * 		contains data to be added to database\r\n * @param visitID\r\n * 		The Office Visit ID corresponding to this Survey.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {\r\n    surveyBean.setVisitID(visitID);// now set visit ID in the survey bean\r\n\r\n    surveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());\r\n}'),(183,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',880,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the administrator who is updating the CPTs.\r\n */\r\npublic UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {\r\n    this.cptDAO = factory.getCPTCodesDAO();\r\n}'),(184,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',881,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Adds a new cpt code (med procedure)\r\n *\r\n * @param proc\r\n * 		ProcedureBean that holds the new cpt code\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addCPTCode(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        if (cptDAO.addCPTCode(proc)) {\r\n            return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(185,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',883,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Updates a procedure with new information from the ProcedureBean\r\n *\r\n * @param proc\r\n * 		ProcedureBean with new information (but same CPT code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        int rows = updateCode(proc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found. To edit an actual code, \" + \"change the description and add a new code with the old description\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(186,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',882,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Updates the cpt code\r\n *\r\n * @param proc\r\n * 		the code to be updated\r\n * @return updated code\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateCode(ProcedureBean proc) throws DBException {\r\n    return cptDAO.updateCode(proc);\r\n}'),(187,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,148,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest',886,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'private String getAddCodeSuccessString(ProcedureBean proc) {\r\n    return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(188,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',894,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the person updating the hospitals.\r\n */\r\npublic UpdateHospitalListAction(DAOFactory factory, long performerID) {\r\n    this.hospDAO = factory.getHospitalsDAO();\r\n}'),(189,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',895,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Adds a hospital using the HospitalBean passed as a parameter\r\n *\r\n * @param hosp\r\n * 		the new hospital listing\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addHospital(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        if (hospDAO.addHospital(hosp)) {\r\n            return (((\"Success: \" + (hosp.getHospitalID())) + \" - \") + (hosp.getHospitalName())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(190,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',897,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateInformation(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a\r\n * parameter\r\n *\r\n * @param hosp\r\n * 		the new hospital information with the same hospital id\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        int rows = 0;\r\n        return 0 == (rows = updateHospital(hosp)) ? \"Error: Hospital not found.\" : (\"Success: \" + rows) + \" row(s) updated\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(191,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',896,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Updates hospital\r\n *\r\n * @param hosp\r\n * 		new information\r\n * @return id for the updated hospital\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateHospital(HospitalBean hosp) throws DBException {\r\n    return hospDAO.updateHospital(hosp);\r\n}'),(192,'HospitalBean proc','edu.ncsu.csc.itrust.beans.HospitalBean',258,150,'edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest',900,'edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.getAddHospitalSuccessString(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'private String getAddHospitalSuccessString(HospitalBean proc) {\r\n    return (((\"Success: \" + (proc.getHospitalID())) + \" - \") + (proc.getHospitalName())) + \" added\";\r\n}'),(193,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',911,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the person udpating the ICDs.\r\n */\r\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(194,'DiagnosisBean diagn','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',912,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * 		The new diagnosis (ICD code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addICDCode(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        if (icdDAO.addICDCode(diagn)) {\r\n            return (((\"Success: \" + (diagn.getICDCode())) + \" - \") + (diagn.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(195,'DiagnosisBean diagn','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',913,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Updates a diagnosis with new information from the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * 		new information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = icdDAO.updateCode(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(196,'DiagnosisBean proc','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,152,'edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest',915,'edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'private String getAddCodeSuccessString(DiagnosisBean proc) {\r\n    return (((\"Success: \" + (proc.getICDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(197,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',923,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic UpdateLOINCListAction(DAOFactory factory) {\r\n    lDAO = factory.getLOINCDAO();\r\n}'),(198,'LOINCbean diagn','edu.ncsu.csc.itrust.beans.LOINCbean',259,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',924,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.add(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Adds a new LOINC\r\n *\r\n * @param diagn\r\n * 		New LOINC\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String add(LOINCbean diagn) throws FormValidationException, iTrustException {\r\n    validator.validate(diagn);\r\n    List<LOINCbean> lblist = lDAO.getProcedures(diagn.getLabProcedureCode());\r\n    if (!(lblist.isEmpty())) {\r\n        throw new FormValidationException(\"Error: Code already exists.\");\r\n    }\r\n    lDAO.addLOINC(diagn);\r\n    return (\"Success: \" + (diagn.getLabProcedureCode())) + \" added\";\r\n}'),(199,'LOINCbean diagn','edu.ncsu.csc.itrust.beans.LOINCbean',259,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',927,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.updateInformation(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Updates a LOINC\r\n *\r\n * @param diagn\r\n * 		new information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(LOINCbean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = lDAO.update(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + (diagn.getLabProcedureCode())) + \" updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(200,'LOINCbean proc','edu.ncsu.csc.itrust.beans.LOINCbean',259,154,'edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest',929,'edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'private String getAddCodeSuccessString(LOINCbean proc) {\r\n    return (\"Success: \" + (proc.getLabProcedureCode())) + \" added\";\r\n}'),(201,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',943,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the user updating the ND lists.\r\n */\r\npublic UpdateNDCodeListAction(DAOFactory factory, long performerID) {\r\n    ndDAO = factory.getNDCodesDAO();\r\n}'),(202,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',944,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param med\r\n * 		The new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addNDCode(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        if (ndDAO.addNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(203,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',947,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Updates the ND Code with new information from the MedicationBean\r\n *\r\n * @param med\r\n * 		the MedicationBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        int rows = updateCode(med);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(204,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',946,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Medication information should already be validated\r\n *\r\n * @param med\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateCode(MedicationBean med) throws DBException {\r\n    return ndDAO.updateCode(med);\r\n}'),(205,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',945,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Removes a ND Code (prescription) from the list\r\n *\r\n * @param med\r\n * 		The ND Code to be removed\r\n * @return Status message\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String removeNDCode(MedicationBean med) throws DBException {\r\n    try {\r\n        if ((ndDAO.getNDCode(med.getNDCode())) == null) {\r\n            return \"Drug does not exist or already has been removed from the database.\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        if (ndDAO.removeNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" removed\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(206,'MedicationBean proc','edu.ncsu.csc.itrust.beans.MedicationBean',261,156,'edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest',950,'edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(207,'MedicationBean proc','edu.ncsu.csc.itrust.beans.MedicationBean',261,157,'edu.ncsu.csc.itrust.action.UpdateORCListActionTest',960,'edu.ncsu.csc.itrust.action.UpdateORCListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(208,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',967,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the user updating the ND lists.\r\n */\r\npublic UpdateReasonCodeListAction(DAOFactory factory, long performerID) {\r\n    orcDAO = factory.getORCodesDAO();\r\n}'),(209,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',968,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param orc\r\n * 		The new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addORCode(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        if (orcDAO.addORCode(orc)) {\r\n            return (((\"Success: \" + (orc.getORCode())) + \" - \") + (orc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(210,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',970,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Updates the ND Code with new information from the OverrideReasonBean\r\n *\r\n * @param orc\r\n * 		the OverrideReasonBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        int rows = updateCode(orc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(211,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',969,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Override Reason information should already be validated\r\n *\r\n * @param orc\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateCode(OverrideReasonBean orc) throws DBException {\r\n    return orcDAO.updateCode(orc);\r\n}'),(212,'MedicationBean proc','edu.ncsu.csc.itrust.beans.MedicationBean',261,159,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest',973,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(213,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,160,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction',980,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ViewAdverseEventAction(DAOFactory factory) {\r\n    this.adEventDAO = factory.getAdverseEventDAO();\r\n}'),(214,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',989,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.-init-(long,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ViewApptRequestsAction(long hcpid, DAOFactory factory) {\r\n    arDAO = factory.getApptRequestDAO();\r\n    aDAO = factory.getApptDAO();\r\n    pnDAO = factory.getPersonnelDAO();\r\n    this.hcpid = hcpid;\r\n    msgAction = new SendMessageAction(factory, hcpid);\r\n}'),(215,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',991,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}'),(216,'edu.ncsu.csc.itrust.beans.MessageBean','edu.ncsu.csc.itrust.beans.MessageBean',262,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',991,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',1,'private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}'),(217,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1000,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Constructor for the action. Initializes DAO fields\r\n *\r\n * @param factory\r\n * 		The sessions factory for DAOs\r\n */\r\npublic ViewDiagnosisStatisticsAction(DAOFactory factory) {\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.diagnosesDAO = factory.getDiagnosesDAO();\r\n}'),(218,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1026,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the expired prescriptions.\r\n */\r\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(219,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1028,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(220,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1028,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',1,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(221,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1036,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}'),(222,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,172,'edu.ncsu.csc.itrust.action.ViewMyApptsAction',1051,'edu.ncsu.csc.itrust.action.ViewMyApptsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(223,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,174,'edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction',1060,'edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewMyLabProceduresAction(DAOFactory factory, long loggedInMID) {\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    patient = loggedInMID;\r\n}'),(224,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1067,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is viewing their messages.\r\n */\r\npublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.referralDAO = factory.getReferralDAO();\r\n}'),(225,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1082,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.setRead(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Set the state of the MessageBean to read, after\r\n * it is read by a user.\r\n *\r\n * @param mBean\r\n * 		MessageBean to be read\r\n */\r\npublic void setRead(MessageBean mBean) {\r\n    try {\r\n        messageDAO.updateRead(mBean);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n}'),(226,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1100,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the records.\r\n */\r\npublic ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labDAO = factory.getLabProcedureDAO();\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.loincDAO = factory.getLOINCDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(227,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1104,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have high blood pressure\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(228,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1105,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have high cholesterol\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(229,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1102,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have diabetes\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(230,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1101,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have cancer\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(231,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1103,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have heart disease\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(232,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1125,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members smoke\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(233,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1114,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family member is dead, and if so, what their cause of death was\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return the cause of death for the family member\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}'),(234,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1156,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the HCP retrieving the patient data.\r\n */\r\npublic ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(235,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1170,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'// private DAOFactory factory;\r\n/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their report requests.\r\n */\r\npublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    // this.factory = factory;\r\n}'),(236,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1189,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class handles validating the loggedInMid and ovIDString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their office visits.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {\r\n    super(factory, String.valueOf(loggedInMID), ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n}'),(237,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1190,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * 		The MID of the representative viewing the records.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}'),(238,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,187,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction',1207,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Construct a ViewPatientInstructionsAction for a given patient.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewPatientInstructionsAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.instructionsDAO = new PatientInstructionsDAO(factory);\r\n    this.personnelDAO = new PersonnelDAO(factory);\r\n    this.ovDAO = new OfficeVisitDAO(factory);\r\n}'),(239,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,189,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction',1216,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the office visits.\r\n */\r\npublic ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    officevisitDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    visits = new ArrayList<PatientVisitBean>();\r\n}'),(240,'PatientBean pb','edu.ncsu.csc.itrust.beans.PatientBean',266,189,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction',1217,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.PatientInList(edu.ncsu.csc.itrust.beans.PatientBean,java.lang.String)',0,'/**\r\n * Checks to see if a patient is in the list of  visits\r\n *\r\n * @param pb\r\n * 		patient to check\r\n * @param date\r\n * 		date of the visit\r\n * @return True if the patient is in the list of visits.\r\n */\r\nprivate boolean PatientInList(PatientBean pb, String date) {\r\n    Iterator<PatientVisitBean> it = visits.iterator();\r\n    PatientVisitBean visitBean;\r\n    while (it.hasNext()) {\r\n        visitBean = it.next();\r\n        if (visitBean.getPatientName().equals(pb.getFullName())) {\r\n            if ((visitBean.getLastOVDateY().compareTo(date)) < 0) {\r\n                visitBean.setLastOVDate(date);\r\n            }\r\n            return true;\r\n        }\r\n    } \r\n    return false;\r\n}'),(241,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1225,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewPatientReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientID = patientID;\r\n}'),(242,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1228,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Get all referrals for a patient sorted by the given field and in the given direction.\r\n *\r\n * @param field\r\n * 		The name of the pseudo-field to sort by.\r\n * @param dir\r\n * 		The direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getPatientQuery(patientID).query(field, dir);\r\n}'),(243,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1231,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * 		\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}'),(244,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,193,'edu.ncsu.csc.itrust.action.ViewPersonnelAction',1239,'edu.ncsu.csc.itrust.action.ViewPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving personnel beans.\r\n */\r\npublic ViewPersonnelAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(245,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1247,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing prescription records.\r\n */\r\npublic ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(246,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1249,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(247,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1249,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',1,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(248,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,197,'edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction',1258,'edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the prescription renewals.\r\n */\r\npublic ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(249,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1266,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewReceivingReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.hcpID = patientID;\r\n}'),(250,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1271,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}'),(251,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1279,'edu.ncsu.csc.itrust.action.ViewReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the report.\r\n */\r\npublic ViewReportAction(DAOFactory factory, long loggedInMID) {\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(252,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1294,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewSentReferralsAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    this.hcpid = hcpid;\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(253,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1298,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Get all sent referrals sorted by the time they were created.\r\n *\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\n/* public List<VerboseReferralBean> getReferrals() throws DBException {\nreturn referralDAO.getSenderQuery(hcpid).query(\"timestamp\", SortDirection.DESCENDING);\n}\n */\r\n/**\r\n * Get all sent referrals sorted by the given field and in the given\r\n * direction.\r\n *\r\n * @param field\r\n * 		The name of the pseudo-field to sort by.\r\n * @param dir\r\n * 		The direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getSenderQuery(hcpid).query(field, dir);\r\n}'),(254,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1295,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}'),(255,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1296,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}'),(256,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1304,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving survey results.\r\n */\r\npublic ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {\r\n    surveyResultDAO = factory.getSurveyResultDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new SurveySearchValidator();\r\n}'),(257,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1305,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForHospital(edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'/**\r\n * Retrieves survey results for a whole hospital.\r\n *\r\n * @param bean\r\n * 		The SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    return surveyResultDAO.getSurveyResultsForHospital(bean.getHCPhospital(), bean.getHCPspecialty());\r\n}'),(258,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1306,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForZip(edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'/**\r\n * Retrieves survey results for a given zip code.\r\n *\r\n * @param bean\r\n * 		The SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    validator.validate(bean);\r\n    return surveyResultDAO.getSurveyResultsForZip(bean.getHCPzip(), bean.getHCPspecialty());\r\n}'),(259,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1312,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the visited HCPs.\r\n */\r\npublic ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {\r\n    patientMID = loggedInMID;\r\n    docDAO = factory.getPersonnelDAO();\r\n    visitDAO = factory.getOfficeVisitDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    // visits = new ArrayList<HCPVisitBean>();\r\n    declareAction = new DeclareHCPAction(factory, loggedInMID);\r\n}'),(260,'PersonnelBean pb','edu.ncsu.csc.itrust.beans.PersonnelBean',270,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1319,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)',0,'/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean that will be visited.\r\n * @param visitDate\r\n * 		The date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}'),(261,'edu.ncsu.csc.itrust.beans.HCPVisitBean','edu.ncsu.csc.itrust.beans.HCPVisitBean',256,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1319,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)',1,'/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean that will be visited.\r\n * @param visitDate\r\n * 		The date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}'),(262,'PersonnelBean pb','edu.ncsu.csc.itrust.beans.PersonnelBean',270,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1320,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean to check.\r\n * @param lastName\r\n * 		The last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * 		The specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * 		The zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(263,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1336,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}'),(264,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1337,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * An office visit that is initially unsaved.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hcpid = hcpid;\r\n}'),(265,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1339,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A database access object factory for supplying a runtime context.\r\n * @param pidString\r\n * 		The patients MID as a String, to be passed to the super constructor (for PatientBaseAction)\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		If any of the supplied parameters is incorrect or there is a DB problem.\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = checkOfficeVisitID(ovIDString);\r\n}'),(266,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1340,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Constructs an action that is initially unsaved.  Like the three-argument\r\n * constructor except that the office visit id is a sentinel value and does\r\n * not represent a valid office visit.\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = OfficeVisitBaseAction.UNSAVED_VISIT_ID;\r\n}'),(267,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,211,'edu.ncsu.csc.itrust.action.base.PatientBaseAction',1346,'edu.ncsu.csc.itrust.action.base.PatientBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A factory to create a database access object.\r\n * @param pidString\r\n * 		The patients ID to associate with this action.\r\n * @throws iTrustException\r\n * 		If the patients ID is incorrect or there is a DB problem.\r\n */\r\npublic PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPatientID(pidString);\r\n}'),(268,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,212,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction',1350,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A factory to create a database access object.\r\n * @param pidString\r\n * 		The personnels ID to associate with this action.\r\n * @throws iTrustException\r\n * 		If the personnels ID is incorrect or there is a DB problem.\r\n */\r\npublic PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPersonnelID(pidString);\r\n}'),(269,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,246,'edu.ncsu.csc.itrust.beans.ApptRequestBean',1531,'edu.ncsu.csc.itrust.beans.ApptRequestBean.setRequestedAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n *\r\n *\r\n * @param appt\r\n * 		\r\n */\r\npublic void setRequestedAppt(ApptBean appt) {\r\n    requestedAppt = appt;\r\n}'),(270,'Email other','edu.ncsu.csc.itrust.beans.Email',251,251,'edu.ncsu.csc.itrust.beans.Email',1574,'edu.ncsu.csc.itrust.beans.Email.equals(edu.ncsu.csc.itrust.beans.Email)',0,'private boolean equals(Email other) {\r\n    return (((from.equals(other.from)) && (subject.equals(other.subject))) && (body.equals(other.body))) && (listEquals(toList, other.toList));\r\n}'),(271,'HospitalBean other','edu.ncsu.csc.itrust.beans.HospitalBean',258,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1680,'edu.ncsu.csc.itrust.beans.HospitalBean.equals(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'private boolean equals(HospitalBean other) {\r\n    return (hospitalID.equals(other.hospitalID)) && (hospitalName.equals(other.hospitalName));\r\n}'),(272,'MedicationBean other','edu.ncsu.csc.itrust.beans.MedicationBean',261,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1756,'edu.ncsu.csc.itrust.beans.MedicationBean.equals(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private boolean equals(MedicationBean other) {\r\n    return (description.equals(other.description)) && (NDCode.equals(other.NDCode));\r\n}'),(273,'BloodType bloodType','edu.ncsu.csc.itrust.enums.BloodType',479,266,'edu.ncsu.csc.itrust.beans.PatientBean',1879,'edu.ncsu.csc.itrust.beans.PatientBean.setBloodType(edu.ncsu.csc.itrust.enums.BloodType)',0,'public void setBloodType(BloodType bloodType) {\r\n    this.bloodType = bloodType;\r\n}'),(274,'Ethnicity ethnicity','edu.ncsu.csc.itrust.enums.Ethnicity',481,266,'edu.ncsu.csc.itrust.beans.PatientBean',1893,'edu.ncsu.csc.itrust.beans.PatientBean.setEthnicity(edu.ncsu.csc.itrust.enums.Ethnicity)',0,'public void setEthnicity(Ethnicity ethnicity) {\r\n    this.ethnicity = ethnicity;\r\n}'),(275,'Gender gender','edu.ncsu.csc.itrust.enums.Gender',483,266,'edu.ncsu.csc.itrust.beans.PatientBean',1897,'edu.ncsu.csc.itrust.beans.PatientBean.setGender(edu.ncsu.csc.itrust.enums.Gender)',0,'public void setGender(Gender gender) {\r\n    this.gender = gender;\r\n}'),(276,'PatientBean o','edu.ncsu.csc.itrust.beans.PatientBean',266,266,'edu.ncsu.csc.itrust.beans.PatientBean',1828,'edu.ncsu.csc.itrust.beans.PatientBean.compareTo(edu.ncsu.csc.itrust.beans.PatientBean)',0,'public int compareTo(PatientBean o) {\r\n    return ((int) ((o.MID) - (this.MID)));\r\n}'),(277,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1956,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatient(edu.ncsu.csc.itrust.beans.PatientBean)',0,'public void setPatient(PatientBean patient) {\r\n    this.patient = patient;\r\n}'),(278,'Role role','edu.ncsu.csc.itrust.enums.Role',486,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1989,'edu.ncsu.csc.itrust.beans.PersonnelBean.setRole(edu.ncsu.csc.itrust.enums.Role)',0,'public void setRole(Role role) {\r\n}'),(279,'PrescriptionBean other','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2000,'edu.ncsu.csc.itrust.beans.PrescriptionBean.equals(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n *\r\n *\r\n * @param other\r\n * 		\r\n * @return \r\n */\r\nprivate boolean equals(PrescriptionBean other) {\r\n    return (((((((medication) == (other.medication)) || (((medication) != null) && (medication.equals(other.medication)))) && ((visitID) == (other.visitID))) && (startDateStr.equals(other.startDateStr))) && (endDateStr.equals(other.endDateStr))) && ((dosage) == (other.dosage))) && (instructions.equals(other.instructions));\r\n}'),(280,'OverrideReasonBean reason','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',1999,'edu.ncsu.csc.itrust.beans.PrescriptionBean.addReason(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public void addReason(OverrideReasonBean reason) {\r\n    if ((reasons) == null) {\r\n        reasons = new ArrayList<OverrideReasonBean>();\r\n    }\r\n    reasons.add(reason);\r\n}'),(281,'MedicationBean medication','edu.ncsu.csc.itrust.beans.MedicationBean',261,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2019,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setMedication(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'public void setMedication(MedicationBean medication) {\r\n    this.medication = medication;\r\n}'),(282,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,272,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean',2028,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'public void setPrescription(PrescriptionBean prescription) {\r\n    this.prescription = prescription;\r\n}'),(283,'OfficeVisitBean officeVisit','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,272,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean',2027,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setOfficeVisit(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'public void setOfficeVisit(OfficeVisitBean officeVisit) {\r\n    this.officeVisit = officeVisit;\r\n}'),(284,'ReferralBean other','edu.ncsu.csc.itrust.beans.ReferralBean',274,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2051,'edu.ncsu.csc.itrust.beans.ReferralBean.equals(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'private boolean equals(ReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}'),(285,'TransactionType tranactionType','edu.ncsu.csc.itrust.enums.TransactionType',490,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2193,'edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionType(edu.ncsu.csc.itrust.enums.TransactionType)',0,'public void setTransactionType(TransactionType tranactionType) {\r\n    this.transactionType = tranactionType;\r\n}'),(286,'VerboseReferralBean other','edu.ncsu.csc.itrust.beans.VerboseReferralBean',282,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2195,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals(edu.ncsu.csc.itrust.beans.VerboseReferralBean)',0,'private boolean equals(VerboseReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}'),(287,'WardBean other','edu.ncsu.csc.itrust.beans.WardBean',284,284,'edu.ncsu.csc.itrust.beans.WardBean',2234,'edu.ncsu.csc.itrust.beans.WardBean.equals(edu.ncsu.csc.itrust.beans.WardBean)',0,'private boolean equals(WardBean other) {\r\n    return ((wardID) == (other.wardID)) && (requiredSpecialty.equals(other.requiredSpecialty));\r\n}'),(288,'WardRoomBean other','edu.ncsu.csc.itrust.beans.WardRoomBean',285,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2244,'edu.ncsu.csc.itrust.beans.WardRoomBean.equals(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'private boolean equals(WardRoomBean other) {\r\n    return ((roomID) == (other.roomID)) && (roomName.equals(other.roomName));\r\n}'),(289,'VisitFlag vf1','edu.ncsu.csc.itrust.beans.VisitFlag',283,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2311,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm$1.compare(edu.ncsu.csc.itrust.beans.VisitFlag,edu.ncsu.csc.itrust.beans.VisitFlag)',0,'public int compare(VisitFlag vf1, VisitFlag vf2) {\r\n    return vf1.getType().compareToIgnoreCase(vf2.getType());\r\n}'),(290,'VisitFlag vf2','edu.ncsu.csc.itrust.beans.VisitFlag',283,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2311,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm$1.compare(edu.ncsu.csc.itrust.beans.VisitFlag,edu.ncsu.csc.itrust.beans.VisitFlag)',0,'public int compare(VisitFlag vf1, VisitFlag vf2) {\r\n    return vf1.getType().compareToIgnoreCase(vf2.getType());\r\n}'),(291,'VisitFlag flag','edu.ncsu.csc.itrust.beans.VisitFlag',283,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2304,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.addVisitFlag(edu.ncsu.csc.itrust.beans.VisitFlag)',0,'public void addVisitFlag(VisitFlag flag) {\r\n    if (null == (visitFlags))\r\n        visitFlags = new ArrayList<VisitFlag>();\r\n\r\n    visitFlags.add(flag);\r\n}'),(292,'AdverseEventBean bean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,290,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader',2320,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(293,'AllergyBean bean','edu.ncsu.csc.itrust.beans.AllergyBean',244,291,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader',2324,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AllergyBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(294,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,292,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader',2328,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {\r\n    ps.setString(1, bean.getApptType());\r\n    ps.setLong(2, bean.getPatient());\r\n    ps.setLong(3, bean.getHcp());\r\n    ps.setTimestamp(4, bean.getDate());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}'),(295,'ApptRequestBean bean','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,293,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader',2332,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, ApptRequestBean bean) throws SQLException {\r\n    PreparedStatement ps2 = loader.loadParameters(ps, bean.getRequestedAppt());\r\n    ps2.setBoolean(6, bean.isPending());\r\n    ps2.setBoolean(7, bean.isAccepted());\r\n    return ps2;\r\n}'),(296,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,294,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader',2336,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {\r\n    ps.setString(1, apptType.getName());\r\n    ps.setInt(2, apptType.getDuration());\r\n    return ps;\r\n}'),(297,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2344,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(298,'DrugInteractionBean bean','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,297,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader',2348,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(299,'OverrideReasonBean bean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,298,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader',2352,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    return null;\r\n}'),(300,'Email email','edu.ncsu.csc.itrust.beans.Email',251,299,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader',2356,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.Email)',0,'public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {\r\n    ps.setString(1, email.getToListStr());\r\n    ps.setString(2, email.getFrom());\r\n    ps.setString(3, email.getSubject());\r\n    ps.setString(4, email.getBody());\r\n    return ps;\r\n}'),(301,'FamilyMemberBean bean','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2360,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(302,'HealthRecord bean','edu.ncsu.csc.itrust.beans.HealthRecord',257,301,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader',2364,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), bean.getPatientID());\r\n    ps.setDouble((i++), bean.getHeight());\r\n    ps.setDouble((i++), bean.getWeight());\r\n    ps.setInt((i++), (bean.isSmoker() ? 1 : 0));\r\n    ps.setInt((i++), bean.getSmokingStatus());\r\n    ps.setInt((i++), bean.getBloodPressureN());\r\n    ps.setInt((i++), bean.getBloodPressureD());\r\n    ps.setInt((i++), bean.getCholesterolHDL());\r\n    ps.setInt((i++), bean.getCholesterolLDL());\r\n    ps.setInt((i++), bean.getCholesterolTri());\r\n    ps.setLong((i++), bean.getPersonnelID());\r\n    return ps;\r\n}'),(303,'HospitalBean bean','edu.ncsu.csc.itrust.beans.HospitalBean',258,302,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader',2368,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HospitalBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(304,'LOINCbean bean','edu.ncsu.csc.itrust.beans.LOINCbean',259,303,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader',2372,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LOINCbean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(305,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,304,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader',2376,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(306,'MedicationBean bean','edu.ncsu.csc.itrust.beans.MedicationBean',261,305,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader',2380,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MedicationBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(307,'MessageBean message','edu.ncsu.csc.itrust.beans.MessageBean',262,306,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader',2384,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MessageBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {\r\n    ps.setLong(1, message.getFrom());\r\n    ps.setLong(2, message.getTo());\r\n    ps.setString(3, message.getBody());\r\n    ps.setString(4, message.getSubject());\r\n    ps.setInt(5, message.getRead());\r\n    ps.setLong(6, message.getParentMessageId());\r\n    ps.setLong(7, message.getOriginalMessageId());\r\n    return ps;\r\n}'),(308,'OfficeVisitBean p','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,307,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader',2388,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(309,'OperationalProfile bean','edu.ncsu.csc.itrust.beans.OperationalProfile',264,308,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader',2392,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OperationalProfile)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(310,'OverrideReasonBean bean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,309,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader',2396,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(311,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,310,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader',2400,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadParameters(java.sql.PreparedStatement, java.lang.Object)\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, PatientInstructionsBean bean) throws SQLException {\r\n    ps.setLong(1, bean.getVisitID());\r\n    ps.setTimestamp(2, new Timestamp(bean.getModified().getTime()));\r\n    ps.setString(3, bean.getName());\r\n    ps.setString(4, bean.getUrl());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}'),(312,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2403,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadCommon(java.sql.ResultSet,edu.ncsu.csc.itrust.beans.PatientBean)',0,'private void loadCommon(ResultSet rs, PatientBean p) throws SQLException {\r\n    p.setMID(rs.getInt(\"MID\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setLastName(rs.getString(\"LastName\"));\r\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\r\n    if (dateOfBirth != null) {\r\n        p.setDateOfBirthStr(DATE_FORMAT.format(dateOfBirth));\r\n    }\r\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\r\n    if (dateOfDeath != null) {\r\n        p.setDateOfDeathStr(DATE_FORMAT.format(dateOfDeath));\r\n    }\r\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\r\n    p.setEmail(rs.getString(\"Email\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"City\"));\r\n    p.setState(rs.getString(\"State\"));\r\n    p.setZip(rs.getString(\"Zip\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setEmergencyName(rs.getString(\"eName\"));\r\n    p.setEmergencyPhone(rs.getString(\"ePhone\"));\r\n    p.setIcName(rs.getString(\"icName\"));\r\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\r\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\r\n    p.setIcCity(rs.getString(\"icCity\"));\r\n    p.setIcState(rs.getString(\"icState\"));\r\n    p.setIcZip(rs.getString(\"icZip\"));\r\n    p.setIcPhone(rs.getString(\"icPhone\"));\r\n    p.setIcID(rs.getString(\"icID\"));\r\n    p.setMotherMID(rs.getString(\"MotherMID\"));\r\n    p.setFatherMID(rs.getString(\"FatherMID\"));\r\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\r\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\r\n    p.setGenderStr(rs.getString(\"Gender\"));\r\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\r\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\r\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\r\n    p.setDirectionsToHome(rs.getString(\"DirectionsToHome\"));\r\n    p.setReligion(rs.getString(\"Religion\"));\r\n    p.setLanguage(rs.getString(\"Language\"));\r\n    p.setSpiritualPractices(rs.getString(\"SpiritualPractices\"));\r\n    p.setAlternateName(rs.getString(\"AlternateName\"));\r\n    Date dateOfDeactivation = rs.getDate(\"DateOfDeactivation\");\r\n    if (dateOfDeactivation != null) {\r\n        p.setDateOfDeactivationStr(DATE_FORMAT.format(dateOfDeactivation));\r\n    }\r\n}'),(313,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2405,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getEmail());\r\n    // ps.setString(i++, p.getSecurityQuestion());\r\n    // ps.setString(i++, p.getSecurityAnswer());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getEmergencyName());\r\n    ps.setString((i++), p.getEmergencyPhone());\r\n    ps.setString((i++), p.getIcName());\r\n    ps.setString((i++), p.getIcAddress1());\r\n    ps.setString((i++), p.getIcAddress2());\r\n    ps.setString((i++), p.getIcCity());\r\n    ps.setString((i++), p.getIcState());\r\n    ps.setString((i++), p.getIcZip());\r\n    ps.setString((i++), p.getIcPhone());\r\n    ps.setString((i++), p.getIcID());\r\n    Date date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfBirthStr()).getTime());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    ps.setDate((i++), date);\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeathStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeathStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    ps.setString((i++), p.getCauseOfDeath());\r\n    ps.setString((i++), p.getMotherMID());\r\n    ps.setString((i++), p.getFatherMID());\r\n    ps.setString((i++), p.getBloodType().getName());\r\n    ps.setString((i++), p.getEthnicity().getName());\r\n    ps.setString((i++), p.getGender().getName());\r\n    ps.setString((i++), p.getTopicalNotes());\r\n    ps.setString((i++), p.getCreditCardType());\r\n    ps.setString((i++), p.getCreditCardNumber());\r\n    ps.setString((i++), p.getDirectionsToHome());\r\n    ps.setString((i++), p.getReligion());\r\n    ps.setString((i++), p.getLanguage());\r\n    ps.setString((i++), p.getSpiritualPractices());\r\n    ps.setString((i++), p.getAlternateName());\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeactivationStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    } catch (NullPointerException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    return ps;\r\n}'),(314,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,312,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader',2410,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), p.getAMID());\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getSpecialty());\r\n    ps.setString((i++), p.getEmail());\r\n    return ps;\r\n}'),(315,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,313,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader',2414,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {\r\n    ps.setLong(1, pres.getVisitID());\r\n    ps.setString(2, pres.getMedication().getNDCode());\r\n    ps.setDate(3, new Date(pres.getStartDate().getTime()));\r\n    ps.setDate(4, new Date(pres.getEndDate().getTime()));\r\n    ps.setInt(5, pres.getDosage());\r\n    ps.setString(6, pres.getInstructions());\r\n    ps.setString(7, pres.getOverrideReasonOther());\r\n    return ps;\r\n}'),(316,'PrescriptionReportBean pres','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,314,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader',2418,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(317,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2423,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {\r\n    ps.setString(1, bean.getDescription());\r\n    return ps;\r\n}'),(318,'ReferralBean ref','edu.ncsu.csc.itrust.beans.ReferralBean',274,316,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader',2427,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {\r\n    ps.setLong(1, ref.getPatientID());\r\n    ps.setLong(2, ref.getSenderID());\r\n    ps.setLong(3, ref.getReceiverID());\r\n    ps.setString(4, ref.getReferralDetails());\r\n    ps.setLong(5, ref.getOvid());\r\n    ps.setBoolean(6, ref.isViewedByPatient());\r\n    ps.setBoolean(7, ref.isViewedByHCP());\r\n    ps.setInt(8, ref.getPriority());\r\n    return ps;\r\n}'),(319,'RemoteMonitoringDataBean bean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,317,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader',2431,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(320,'TelemedicineBean bean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,318,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader',2435,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, TelemedicineBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(321,'ReportRequestBean bean','edu.ncsu.csc.itrust.beans.ReportRequestBean',276,319,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader',2439,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReportRequestBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(322,'SurveyBean bean','edu.ncsu.csc.itrust.beans.SurveyBean',278,320,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader',2443,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(323,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,321,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader',2447,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(324,'TransactionBean bean','edu.ncsu.csc.itrust.beans.TransactionBean',281,322,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader',2451,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(325,'VerboseReferralBean ref','edu.ncsu.csc.itrust.beans.VerboseReferralBean',282,323,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader',2455,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.VerboseReferralBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, VerboseReferralBean ref) throws SQLException {\r\n    throw new RuntimeException(\"Not Implemented\");\r\n}'),(326,'VisitReminderReturnForm bean','edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',289,324,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader',2459,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm)',0,'public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(327,'WardBean bean','edu.ncsu.csc.itrust.beans.WardBean',284,325,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader',2463,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, WardBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(328,'WardRoomBean bean','edu.ncsu.csc.itrust.beans.WardRoomBean',285,326,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader',2467,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, WardRoomBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(329,'DiagnosisStatisticsBean DiagnosisBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2489,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * 		Health records for the patient being viewed.\r\n * @param name\r\n * 		Type of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeDiagnosisStatistics(DiagnosisStatisticsBean DiagnosisBean, String name) {\r\n    this.dsBean = DiagnosisBean;\r\n    this.diagnosisName = name;\r\n    values = new int[2];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (dsBean.getRegionStats()));\r\n}'),(330,'DiagnosisStatisticsBean avgBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2488,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}'),(331,'DiagnosisStatisticsBean dsBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2488,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}'),(332,'DiagnosisBean o1','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,346,'edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest',2618,'edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest$1.compare(edu.ncsu.csc.itrust.beans.DiagnosisBean,edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public int compare(DiagnosisBean o1, DiagnosisBean o2) {\r\n    return Long.valueOf(o1.getOvDiagnosisID()).compareTo(Long.valueOf(o2.getOvDiagnosisID()));\r\n}'),(333,'DiagnosisBean o2','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,346,'edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest',2618,'edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest$1.compare(edu.ncsu.csc.itrust.beans.DiagnosisBean,edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public int compare(DiagnosisBean o1, DiagnosisBean o2) {\r\n    return Long.valueOf(o1.getOvDiagnosisID()).compareTo(Long.valueOf(o2.getOvDiagnosisID()));\r\n}'),(334,'FamilyMemberBean o1','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,366,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest',2723,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}'),(335,'FamilyMemberBean o2','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,366,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest',2723,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}'),(336,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,381,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO',2818,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AccessDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(337,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2822,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AdverseEventDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.aeLoader = new AdverseEventBeanLoader();\r\n}'),(338,'AdverseEventBean aeBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2823,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean,long)',0,'/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * 		A bean representing the message to be added.\r\n * @throws SQLException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO adverseevents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \" + \"VALUES (?, ?, ?, ?, ?, ?)\"));\r\n        ps.setString(1, aeBean.getMID());\r\n        ps.setString(2, aeBean.getDrug());\r\n        ps.setString(3, aeBean.getCode());\r\n        ps.setString(4, aeBean.getDescription());\r\n        ps.setLong(5, hcpmid);\r\n        ps.setString(6, \"Active\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(339,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,383,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO',2832,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AllergyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(340,'AllergyBean allergy','edu.ncsu.csc.itrust.beans.AllergyBean',244,383,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO',2833,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.addAllergy(edu.ncsu.csc.itrust.beans.AllergyBean)',0,'/**\r\n * Adds an allergy to this patients list.\r\n *\r\n * @param allergy:\r\n * 		allergy bean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addAllergy(AllergyBean allergy) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO allergies(PatientID, Code, FirstFound, Description) VALUES (?,?,?,?)\");\r\n        ps.setLong(1, allergy.getPatientID());\r\n        ps.setString(2, allergy.getNDCode());\r\n        if ((allergy.getFirstFound()) == null) {\r\n            ps.setDate(3, null);\r\n        } else {\r\n            ps.setDate(3, new Date(allergy.getFirstFound().getTime()));\r\n        }\r\n        ps.setString(4, allergy.getDescription());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(341,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2835,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ApptDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n    this.abloader = new ApptBeanLoader();\r\n}'),(342,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2845,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.scheduleAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'public void scheduleAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointment (appt_type, patient_id, doctor_id, sched_date, comment) \" + \"VALUES (?, ?, ?, ?, ?)\"));\r\n    ps = this.abloader.loadParameters(ps, appt);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(343,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2836,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.editAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'public void editAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointment SET appt_type=?, sched_date=?, comment=? WHERE appt_id=?\");\r\n    ps.setString(1, appt.getApptType());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setString(3, appt.getComment());\r\n    ps.setInt(4, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(344,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2844,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'public void removeAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"DELETE FROM appointment WHERE appt_id=?\");\r\n    ps.setInt(1, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(345,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2840,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllHCPConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getAllHCPConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.doctor_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(346,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2841,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllPatientConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getAllPatientConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.patient_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(347,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2846,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ApptRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ApptRequestBeanLoader();\r\n}'),(348,'ApptRequestBean req','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2847,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n *\r\n * @param req\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void addApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"INSERT INTO appointmentrequests (appt_type, patient_id, doctor_id, sched_date, comment, pending, accepted) VALUES (?, ?, ?, ?, ?, ?, ?)\");\r\n    loader.loadParameters(stmt, req);\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}'),(349,'ApptRequestBean req','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2850,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.updateApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n *\r\n * @param req\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void updateApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"UPDATE appointmentrequests SET pending=?, accepted=? WHERE appt_id=?\");\r\n    stmt.setBoolean(1, req.isPending());\r\n    stmt.setBoolean(2, req.isAccepted());\r\n    stmt.setInt(3, req.getRequestedAppt().getApptID());\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}'),(350,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2851,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ApptTypeDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.atLoader = new ApptTypeBeanLoader();\r\n}'),(351,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2852,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public boolean addApptType(ApptTypeBean apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointmenttype (appt_type, duration) \" + \"VALUES (?, ?)\"));\r\n    this.atLoader.loadParameters(ps, apptType);\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}'),(352,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2853,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public boolean editApptType(ApptTypeBean apptType) throws DBException, SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointmenttype SET duration=? WHERE appt_type=?\");\r\n    ps.setInt(1, apptType.getDuration());\r\n    ps.setString(2, apptType.getName());\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}'),(353,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2856,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AuthDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(354,'Role role','edu.ncsu.csc.itrust.enums.Role',486,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2857,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)',0,'/**\r\n * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\r\n * Initially sets security question to a random set of characters, so that nobody should be able to guess\r\n * its value.\r\n *\r\n * @param mid\r\n * 		The users MID as a Long.\r\n * @param role\r\n * 		The role of the user as a Role enum {@link Role}\r\n * @param password\r\n * 		The password for the new user.\r\n * @return A string representing the newly added randomly-generated password.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String addUser(Long mid, Role role, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"INSERT INTO users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n        pstmt.setLong(1, mid);\r\n        String hashedPassword = DigestUtils.shaHex(password);\r\n        pstmt.setString(2, hashedPassword);\r\n        pstmt.setString(3, role.toString());\r\n        pstmt.setString(4, \"Enter the random password given in your account email\");\r\n        pstmt.setString(5, password);\r\n        pstmt.executeUpdate();\r\n        return password;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(355,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2875,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic CPTCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(356,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2876,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Adds a new CPT code, returns that it was added successfully\r\n *\r\n * @param proc\r\n * 		A ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO cptcodes (Code, Description, Attribute) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, proc.getCPTCode());\r\n        ps.setString(2, proc.getDescription());\r\n        ps.setString(3, proc.getAttribute());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(357,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2881,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Change the procedure description for a particular CPT code\r\n *\r\n * @param proc\r\n * 		A ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(ProcedureBean proc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE cptcodes SET Description = ?, Attribute = ? WHERE Code = ?\");\r\n        ps.setString(1, proc.getDescription());\r\n        ps.setString(2, proc.getAttribute());\r\n        ps.setString(3, proc.getCPTCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(358,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2882,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n */\r\npublic DiagnosesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(359,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2883,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.add(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovdiagnosis \" + \"(VisitID,ICDCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(360,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2884,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.edit(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * 		The newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // String statement = \"UPDATE ovdiagnosis \" +\r\n        // \"SET VisitID=?, ICDCode=? \" +\r\n        // \"WHERE ID=?\";\r\n        String statement = \"UPDATE ovdiagnosis \" + (\"SET VisitID=?, ICDCode=? \" + \"WHERE ID = ?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.setLong(3, bean.getOvDiagnosisID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(361,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2891,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugInteractionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    interactionLoader = new DrugInteractionBeanLoader();\r\n}'),(362,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2895,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugReactionOverrideCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(363,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2896,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Adds a new override reason code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param orc\r\n * 		The overridereason bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addORCode(OverrideReasonBean orc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO drugreactionoverridecodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, orc.getORCode());\r\n        ps.setString(2, orc.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(364,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2899,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Updates a particular codes description\r\n *\r\n * @param orc\r\n * 		A bean representing the particular override reason to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(OverrideReasonBean orc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE drugreactionoverridecodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, orc.getDescription());\r\n        ps.setString(2, orc.getORCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(365,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,392,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO',2900,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FakeEmailDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(366,'Email email','edu.ncsu.csc.itrust.beans.Email',251,392,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO',2904,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.sendEmailRecord(edu.ncsu.csc.itrust.beans.Email)',0,'/**\r\n * \"Send\" an email, which just inserts it into the database.\r\n *\r\n * @param email\r\n * 		The Email object to insert.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void sendEmailRecord(Email email) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO fakeemail (ToAddr, FromAddr, Subject, Body) \" + \"VALUES (?,?,?,?)\"));\r\n        emailBeanLoader.loadParameters(ps, email);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(367,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2905,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FamilyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(368,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,394,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO',2910,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HealthRecordsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(369,'HealthRecord record','edu.ncsu.csc.itrust.beans.HealthRecord',257,394,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO',2911,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.add(edu.ncsu.csc.itrust.beans.HealthRecord)',0,'/**\r\n * Adds a health record for a particular patient\r\n *\r\n * @param record\r\n * 		The HealthRecord object to insert.\r\n * @return A boolean indicating whether the insert was successful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean add(HealthRecord record) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO personalhealthinformation(PatientID,Height,Weight,\" + (\"Smoker,SmokingStatus,BloodPressureN,BloodPressureD,CholesterolHDL,CholesterolLDL,CholesterolTri,\" + \"HCPID) VALUES(?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        loader.loadParameters(ps, record);\r\n        int numInserted = ps.executeUpdate();\r\n        return numInserted == 1;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(370,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2913,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HospitalsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(371,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2914,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Adds a hospital\r\n *\r\n * @param hosp\r\n * 		The HospitalBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO hospitals (HospitalID, HospitalName, Address, City, State, Zip) \" + \"VALUES (?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getHospitalID());\r\n        ps.setString(2, hosp.getHospitalName());\r\n        ps.setString(3, hosp.getHospitalAddress());\r\n        ps.setString(4, hosp.getHospitalCity());\r\n        ps.setString(5, hosp.getHospitalState());\r\n        ps.setString(6, hosp.getHospitalZip());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Hospital already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(372,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2921,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Updates a particular hospitals description. Returns the number of rows affected (should be 1)\r\n *\r\n * @param hosp\r\n * 		The HospitalBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateHospital(HospitalBean hosp) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE hospitals SET HospitalName=?,Address=?,City=?,State=?,Zip=?\" + \"WHERE HospitalID = ?\"));\r\n        ps.setString(1, hosp.getHospitalName());\r\n        ps.setString(2, hosp.getHospitalAddress());\r\n        ps.setString(3, hosp.getHospitalCity());\r\n        ps.setString(4, hosp.getHospitalState());\r\n        ps.setString(5, hosp.getHospitalZip());\r\n        ps.setString(6, hosp.getHospitalID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(373,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2922,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ICDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(374,'DiagnosisBean diag','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2923,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Adds an ICD9CM code. Returns whether or not the change was made.\r\n *\r\n * @param diag\r\n * 		The DiagnosisBean representing the changes.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO icdcodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, diag.getICDCode());\r\n        ps.setString(2, diag.getDescription());\r\n        ps.setString(3, diag.getClassification());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(375,'DiagnosisBean diag','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2926,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Changes a the description of a particular code.\r\n *\r\n * @param diag\r\n * 		A DiagnosisBean representing the changes.\r\n * @return A boolean indicating the number of updated rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(DiagnosisBean diag) throws DBException {\r\n    int rows;\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE icdcodes SET Description = ?, Chronic = ?, URL = ? WHERE Code = ?\");\r\n        ps.setString(1, diag.getDescription());\r\n        ps.setString(2, diag.getClassification());\r\n        ps.setString(3, diag.getURL());\r\n        ps.setString(4, diag.getICDCode());\r\n        rows = ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return rows;\r\n}'),(376,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2927,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LOINCDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    LOINCLoader = new LOINCBeanLoader();\r\n}'),(377,'LOINCbean hosp','edu.ncsu.csc.itrust.beans.LOINCbean',259,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2928,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.addLOINC(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Adds a LOINC\r\n *\r\n * @param hosp\r\n * 		The LOINCbean representing the new code to be added.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void addLOINC(LOINCbean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loinc (LaboratoryProcedureCode, Component, KindOfProperty, TimeAspect, System, ScaleType, MethodType) \" + \"VALUES (?,?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getLabProcedureCode());\r\n        ps.setString(2, hosp.getComponent());\r\n        ps.setString(3, hosp.getKindOfProperty());\r\n        ps.setString(4, hosp.getTimeAspect());\r\n        ps.setString(5, hosp.getSystem());\r\n        ps.setString(6, hosp.getScaleType());\r\n        ps.setString(7, hosp.getMethodType());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: LOINC already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(378,'LOINCbean ov','edu.ncsu.csc.itrust.beans.LOINCbean',259,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2931,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.update(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Updates the information in LOINC.\r\n *\r\n * @param ov\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int update(LOINCbean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loinc SET Component=?, KindOfProperty=?, TimeAspect=?, System=?, ScaleType=?, MethodType=? WHERE LaboratoryProcedureCode=?\");\r\n        ps.setString(1, ov.getComponent());\r\n        ps.setString(2, ov.getKindOfProperty());\r\n        ps.setString(3, ov.getTimeAspect());\r\n        ps.setString(4, ov.getSystem());\r\n        ps.setString(5, ov.getScaleType());\r\n        ps.setString(6, ov.getMethodType());\r\n        ps.setString(7, ov.getLabProcedureCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(379,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2932,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LabProcedureDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    labProcedureLoader = new LabProcedureBeanLoader();\r\n}'),(380,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2933,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Inserts a lab procedure into the database.\r\n *\r\n * @param b\r\n * 		The LabProcedureBean to be inserted.\r\n * @return A long containing the ID of the newly inserted lab procedure bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO labprocedure \" + (((\"(PatientMID, LaboratoryProcedureCode, Status, Commentary, \" + \"Results, OfficeVisitID, Rights, LabTechID, PriorityCode, \") + \"NumericalResults, LowerBound, UpperBound) \") + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        ps.setLong(1, b.getPid());\r\n        ps.setString(2, b.getLoinc());\r\n        ps.setString(3, b.getStatus());\r\n        ps.setString(4, b.getCommentary());\r\n        ps.setString(5, b.getResults());\r\n        ps.setLong(6, b.getOvID());\r\n        ps.setString(7, b.getRights());\r\n        ps.setLong(8, b.getLTID());\r\n        ps.setInt(9, b.getPriorityCode());\r\n        ps.setString(10, b.getNumericalResult());\r\n        ps.setString(11, b.getLowerBound());\r\n        ps.setString(12, b.getUpperBound());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(381,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2959,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Updates an existing lab procedure.\r\n *\r\n * @param b\r\n * 		The LabProcedureBean representing the procedure to be updated.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void updateLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE labprocedure SET \" + (((\" Status = ?, Commentary = ?, Results = ?, UpdatedDate = ?, \" + \" LabTechID = ?, PriorityCode = ? , NumericalResults = ?, \") + \" LowerBound = ?, UpperBound = ? \") + \" WHERE LaboratoryProcedureID=?\")));\r\n        ps.setString(1, b.getStatus());\r\n        ps.setString(2, b.getCommentary());\r\n        ps.setString(3, b.getResults());\r\n        ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(5, b.getLTID());\r\n        ps.setInt(6, b.getPriorityCode());\r\n        ps.setString(7, b.getNumericalResult());\r\n        ps.setString(8, b.getLowerBound());\r\n        ps.setString(9, b.getUpperBound());\r\n        ps.setLong(10, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(382,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2954,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.markViewed(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Marks a lab procedure as viewed by the patient\r\n *\r\n * @param b\r\n * 		The LabProcedureBean representing the procedure to be marked as viewed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void markViewed(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET ViewedByPatient = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setBoolean(1, b.isViewedByPatient());\r\n        ps.setLong(2, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(383,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2960,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateRights(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Updates the rights of a user on a given lab procedure.\r\n *\r\n * @param b\r\n * 		The LabProcedureBean in question.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void updateRights(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Rights = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, b.getRights());\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(384,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2961,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic MessageDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.mbLoader = new MessageBeanLoader();\r\n}'),(385,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2962,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.addMessage(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * 		A bean representing the message to be added.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void addMessage(MessageBean mBean) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read, parent_msg_id, original_msg_id) \" + \"  VALUES (?, ?, NOW(), ?, ?, ?, ?, ?)\"));\r\n    this.mbLoader.loadParameters(ps, mBean);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(386,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2973,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.updateRead(edu.ncsu.csc.itrust.beans.MessageBean)',0,'public void updateRead(MessageBean mBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE message SET been_read=1 WHERE message_id=?\");\r\n        ps.setLong(1, mBean.getMessageId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(387,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2964,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessageID(edu.ncsu.csc.itrust.beans.MessageBean)',0,'public long getMessageID(MessageBean mBean) throws DBException {\r\n    return mBean.getMessageId();\r\n}'),(388,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2974,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic NDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(389,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2975,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Adds a new ND code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param med\r\n * 		The medication bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO ndcodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, med.getNDCode());\r\n        ps.setString(2, med.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(390,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2979,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Updates a particular codes description\r\n *\r\n * @param med\r\n * 		A bean representing the particular medication to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(MedicationBean med) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE ndcodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, med.getDescription());\r\n        ps.setString(2, med.getNDCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(391,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2978,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Removes a ND code, returns whether or not the change was made.\r\n *\r\n * @param med\r\n * 		The medication bean to be removed.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean removeNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ndcodes WHERE Code=?\");\r\n        ps.setString(1, med.getNDCode());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(392,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2980,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/* private PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();\nprivate PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();\nprivate ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);\n */\r\n/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic OfficeVisitDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(393,'OfficeVisitBean ov','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2981,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.add(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'/**\r\n * Adds an visit and return its ID\r\n *\r\n * @param ov\r\n * 		The OfficeVisitBean to be added.\r\n * @return A long indicating the unique ID for the office visit.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits (VisitDate, Notes, HCPID, PatientID, HospitalID, IsERIncident) VALUES (?,?,?,?,?,?)\");\r\n        setValues(ps, ov);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(394,'OfficeVisitBean ov','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2989,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.setValues(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {\r\n    ps.setDate(1, new Date(ov.getVisitDate().getTime()));\r\n    ps.setString(2, ov.getNotes());\r\n    ps.setLong(3, ov.getHcpID());\r\n    ps.setLong(4, ov.getPatientID());\r\n    ps.setString(5, ov.getHospitalID());\r\n    ps.setBoolean(6, ov.isERIncident());\r\n}'),(395,'OfficeVisitBean ov','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2990,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.update(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'/**\r\n * Updates the information in a particular office visit.\r\n *\r\n * @param ov\r\n * 		The Office Visit bean representing the changes.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void update(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE officevisits SET VisitDate=?, Notes=?, HCPID=?, \" + \"PatientID=?, HospitalID=? WHERE ID=?\"));\r\n        setValues(ps, ov);\r\n        ps.setLong(6, ov.getID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(396,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2991,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PatientDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.patientLoader = new PatientLoader();\r\n    this.personnelLoader = new PersonnelLoader();\r\n    this.diagnosisLoader = new DiagnosisBeanLoader(true);\r\n    this.prescriptionLoader = new PrescriptionBeanLoader();\r\n    this.procedureLoader = new ProcedureBeanLoader(true);\r\n}'),(397,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2998,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.editPatient(edu.ncsu.csc.itrust.beans.PatientBean,long)',0,'/**\r\n * Updates a patients information for the given MID\r\n *\r\n * @param p\r\n * 		The patient bean representing the new information for the patient.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editPatient(PatientBean p, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE patients SET firstName=?,lastName=?,email=?,\" + ((((((\"address1=?,address2=?,city=?,state=?,zip=?,phone=?,\" + \"eName=?,ePhone=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\") + \"ICState=?,iCZip=?,iCPhone=?,iCID=?,DateOfBirth=?,\") + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\") + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, \") + \"DirectionsToHome=?, Religion=?, Language=?, SpiritualPractices=?, \") + \"AlternateName=?, DateOfDeactivation=? WHERE MID=?\")));\r\n        patientLoader.loadParameters(ps, p);\r\n        ps.setLong(37, p.getMID());\r\n        ps.executeUpdate();\r\n        addHistory(p.getMID(), hcpid);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(398,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3020,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PatientInstructionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(399,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3021,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.add(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Add a new patient instructions record.\r\n *\r\n * @param bean\r\n * 		The instructions to add.\r\n * @return The id of the newly added instructions record.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO patientspecificinstructions \" + \"(VisitID,Modified,Name,URL,Comment) VALUES (?,?,?,?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps = loader.loadParameters(ps, bean);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(400,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3022,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.edit(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Edit an existing patient instructions record in the database.\r\n *\r\n * @param bean\r\n * 		The instruction to modify.\r\n * @return The id of the modified instruction.  This will be that same as the id given in the bean itself.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE patientspecificinstructions \" + (\"SET VisitID=?, Modified=?, Name=?, URL=?, Comment=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, bean);\r\n        ps.setLong(6, bean.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(401,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3026,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PersonnelDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    personnelLoader = new PersonnelLoader();\r\n    hospitalBeanLoader = new HospitalBeanLoader();\r\n}'),(402,'Role role','edu.ncsu.csc.itrust.enums.Role',486,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3034,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getNextID(edu.ncsu.csc.itrust.enums.Role)',0,'public long getNextID(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    // long newID = 9000000000L;\r\n    long minID = (role.getMidFirstDigit()) * 1000000000L;\r\n    minID = (minID == 0) ? 1 : minID;// Do not use 0 as an ID.\r\n\r\n    long maxID = minID + 999999998L;\r\n    long nextID = minID;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT MAX(users.mid) FROM users WHERE mid BETWEEN ? AND ?\");\r\n        ps.setLong(1, minID);\r\n        ps.setLong(2, maxID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            nextID = (rs.getLong(1)) + 1;\r\n            if (nextID < minID) {\r\n                nextID = minID;\r\n            }\r\n        }\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(403,'Role role','edu.ncsu.csc.itrust.enums.Role',486,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3027,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.addEmptyPersonnel(edu.ncsu.csc.itrust.enums.Role)',0,'/**\r\n * Adds an empty personnel, and returns the MID.\r\n *\r\n * @return A long indicating the new MID.\r\n * @param role\r\n * 		A {@link Role} enum indicating the personnels specific role.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long addEmptyPersonnel(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    long nextID = getNextID(role);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO personnel(MID, Role) VALUES(?,?)\");\r\n        ps.setString(1, (\"\" + nextID));\r\n        ps.setString(2, role.name());\r\n        ps.executeUpdate();\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        System.out.println(e.getMessage());\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(404,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3029,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.editPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Updates the demographics for a personnel.\r\n *\r\n * @param p\r\n * 		The personnel bean with the updated information.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editPersonnel(PersonnelBean p) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE personnel SET AMID=?,firstName=?,lastName=?,\" + (\"phone=?, address1=?,address2=?,city=?, state=?, zip=?, specialty=?, email=?\" + \" WHERE MID=?\")));\r\n        personnelLoader.loadParameters(ps, p);\r\n        ps.setLong(12, p.getMID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(405,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3038,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * 		The PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(406,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3038,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',1,'/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * 		The PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(407,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,405,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO',3041,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PrescriptionOverrideDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(408,'OverrideReasonBean pres','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,405,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO',3042,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.add(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(OverrideReasonBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovreactionoverride (OVMedicationID,OverrideCode) VALUES (?,?)\");\r\n        ps.setLong(1, pres.getPresID());\r\n        ps.setString(2, pres.getORCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(409,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3045,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PrescriptionReportDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(410,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3050,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PrescriptionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(411,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3051,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.add(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovmedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions,OverrideOther) VALUES (?,?,?,?,?,?,?)\");\r\n        loader.loadParameters(ps, pres);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(412,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3052,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.edit(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * 		The newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // ps = conn.prepareStatement(\"UPDATE OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)\");\r\n        String statement = \"UPDATE ovmedication \" + (\"SET VisitID=?, NDCode=?, StartDate=?, EndDate=?, Dosage=?, Instructions=?, OverrideOther=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, pres);\r\n        ps.setLong(8, pres.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(413,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3055,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n */\r\npublic ProceduresDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(414,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3056,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.add(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovprocedure \" + \"(VisitID,CPTCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(415,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3057,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.edit(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Edits an existing procedure bean.\r\n *\r\n * @param pres\r\n * 		The newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE ovprocedure \" + (\"SET VisitID=?, CPTCode=?\" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.setLong(3, bean.getOvProcedureID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(416,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3062,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReferralDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    referralLoader = new ReferralBeanLoader();\r\n    verboseLoader = new VerboseReferralBeanLoader();\r\n}'),(417,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3084,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Create a new ReferralListQuery object.\r\n *\r\n * @param factory\r\n * 		\r\n * @param userid\r\n * 		\r\n */\r\npublic ReferralListQuery(DAOFactory factory, long userid) {\r\n    this.factory = factory;\r\n    this.userid = userid;\r\n    // initialize lookup map\r\n    sortColumns = new HashMap<String, String>();\r\n    sortColumns.put(\"patientName\", \"CONCAT(patients.lastName,  , patients.firstName)\");\r\n    sortColumns.put(\"receiverName\", \"CONCAT(preceiver.lastName, preceiver.firstName)\");\r\n    sortColumns.put(\"senderName\", \"CONCAT(psender.lastName, psender.firstName)\");\r\n    sortColumns.put(\"timestamp\", \"referrals.timestamp\");\r\n    sortColumns.put(\"priority\", \"referrals.PriorityCode\");\r\n}'),(418,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,412,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery',3090,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public SenderReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(419,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,410,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery',3082,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReceiverReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(420,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,409,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery',3080,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public PatientReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(421,'ReferralBean r','edu.ncsu.csc.itrust.beans.ReferralBean',274,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3065,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Updates a given referral in the database.\r\n *\r\n * @param r\r\n * 		The referral to update.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\" + \"ReferralDetails=?,OVID=?,viewed_by_patient=?,viewed_by_HCP=?,PriorityCode=?  WHERE ID=?\"));\r\n        referralLoader.loadParameters(ps, r);\r\n        ps.setLong(9, r.getId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(422,'ReferralBean r','edu.ncsu.csc.itrust.beans.ReferralBean',274,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3064,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Adds a given referral to the database.\r\n *\r\n * @param r\r\n * 		The referral to add.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + (\"ReferralDetails,OVID,viewed_by_patient,viewed_by_HCP,PriorityCode,TimeStamp)  \" + \"VALUES (?,?,?,?,?,?,?,?,NOW())\")));\r\n        ps = referralLoader.loadParameters(ps, r);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(423,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3086,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.doquery(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * 		The pseudo-field name in which to sort.\r\n * @param dir\r\n * 		The direction of the desired sort (ascending or\r\n * 		descending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprotected List<VerboseReferralBean> doquery(String sortField, SortDirection dir) throws DBException {\r\n    String stmt = \"SELECT \" + (((((((((((((((\"CONCAT(psender.firstName, ,psender.lastName) AS senderName, \" + \"CONCAT(preceiver.firstName, ,preceiver.lastName) AS receiverName, \") + \"referrals.*, \") + \"officevisits.visitDate, \") + \"CONCAT(patients.firstName, ,patients.lastName) AS patientName \") + \"FROM \") + \"referrals, \") + \"personnel AS psender, \") + \"personnel AS preceiver, \") + \"patients, \") + \"officevisits \") + \"WHERE \") + \"referrals.SenderID=psender.mid \") + \"AND referrals.ReceiverID=preceiver.mid \") + \"AND referrals.PatientID=patients.mid \") + \"AND referrals.ovid=officevisits.id \");\r\n    stmt += String.format(\"AND %s = ? \", getUserField());\r\n    stmt += buildSort(sortField, dir);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(stmt);\r\n        ps.setLong(1, getUserId());\r\n        ResultSet rs = ps.executeQuery();\r\n        return verboseLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(424,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3089,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.query(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * 		The pseudo-field name in which to sort.\r\n * @param dir\r\n * 		The direction of the desired sort (ascending or\r\n * 		descending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> query(String sortField, SortDirection dir) throws DBException {\r\n    List<VerboseReferralBean> beans = doquery(sortField, dir);\r\n    return beans;\r\n}'),(425,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3085,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.buildSort(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).\r\n *\r\n * @param sortField\r\n * 		The pseudo-field to sort on.\r\n * @param dir\r\n * 		The sort direction.\r\n * @return A string which can be a part of an SQL query.\r\n */\r\nprotected String buildSort(String sortField, SortDirection dir) {\r\n    String sortexp = sortColumns.get(sortField);\r\n    return String.format(\" ORDER BY %s %s \", sortexp, dir);\r\n}'),(426,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3092,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RemoteMonitoringDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(427,'RemoteMonitoringDataBean bean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3101,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)',0,'/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param height\r\n * 		The height of the patient\r\n * @param weight\r\n * 		The weight of the patient\r\n * @param pedometerReading\r\n * 		The pedometer reading of the patient\r\n * @param reporterRole\r\n * 		The role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * 		The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(428,'TelemedicineBean tBean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3093,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Add a patient to the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param HCPMID\r\n * 		The MID of the HCP\r\n * @param tBean\r\n * 		The TelemedicineBean indicating what telemedicine data the patient is allowed to enter.\r\n * @return true if added successfully, false if already in list\r\n */\r\npublic boolean addPatientToList(long patientMID, long HCPMID, TelemedicineBean tBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n\r\n        String permissionPS = \"SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, Height, Weight, PedometerReading\";\r\n        ps = conn.prepareStatement(((\"INSERT INTO remotemonitoringlists(PatientMID, HCPMID, \" + permissionPS) + \") VALUES(?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.setBoolean(3, tBean.isSystolicBloodPressureAllowed());\r\n        ps.setBoolean(4, tBean.isDiastolicBloodPressureAllowed());\r\n        ps.setBoolean(5, tBean.isGlucoseLevelAllowed());\r\n        ps.setBoolean(6, tBean.isHeightAllowed());\r\n        ps.setBoolean(7, tBean.isWeightAllowed());\r\n        ps.setBoolean(8, tBean.isPedometerReadingAllowed());\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(429,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3103,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReportRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ReportRequestBeanLoader();\r\n}'),(430,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3109,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RiskDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(431,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3117,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.surveyLoader = new SurveyLoader();\r\n}'),(432,'SurveyBean surveyBean','edu.ncsu.csc.itrust.beans.SurveyBean',278,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3118,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.addCompletedSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,java.util.Date)',0,'/**\r\n * Insert survey data into database.\r\n *\r\n * @param surveyBean\r\n * 		The Bean representing the users responses which will be inserted.\r\n * @param date\r\n * 		The date the survey was completed.\r\n */\r\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovsurvey (VisitID, SurveyDate) VALUES (?,?)\");\r\n        ps.setLong(1, surveyBean.getVisitID());\r\n        ps.setTimestamp(2, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        if ((surveyBean.getWaitingRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set WaitingRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getExamRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set ExamRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getVisitSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set VisitSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getTreatmentSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set TreatmentSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(433,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,418,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO',3121,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyResultDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.loader = new SurveyResultBeanLoader();\r\n}'),(434,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3124,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic TransactionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(435,'TransactionType type','edu.ncsu.csc.itrust.enums.TransactionType',490,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3131,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long)',0,'/**\r\n * Log a transaction, just giving it the person who is logged in and the type\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n    logTransaction(type, loggedInMID, 0L, \"\");\r\n}'),(436,'TransactionType type','edu.ncsu.csc.itrust.enums.TransactionType',490,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3132,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(437,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,420,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO',3133,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic VisitRemindersDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(438,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3137,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic WardDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(439,'WardBean ward','edu.ncsu.csc.itrust.beans.WardBean',284,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3138,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWard(edu.ncsu.csc.itrust.beans.WardBean)',0,'/**\r\n * Adds a Ward\r\n *\r\n * @param ward\r\n * 		The WardBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addWard(WardBean ward) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO Wards (RequiredSpecialty, InHospital) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Ward already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(440,'WardBean ward','edu.ncsu.csc.itrust.beans.WardBean',284,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3154,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWard(edu.ncsu.csc.itrust.beans.WardBean)',0,'/**\r\n * Updates a particular wards information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param ward\r\n * 		The WardBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateWard(WardBean ward) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wards SET RequiredSpecialty=?, InHospital=? \" + \"WHERE WardID = ?\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        ps.setLong(3, ward.getWardID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(441,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3139,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'/**\r\n * Adds a WardRoom\r\n *\r\n * @param wardRoom\r\n * 		The WardRoomBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addWardRoom(WardRoomBean wardRoom) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO WardRooms (InWard, RoomName, Status) \" + \"VALUES (?,?,?)\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: WardRoom already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(442,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3155,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'/**\r\n * Updates a particular wardrooms information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * 		The WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateWardRoom(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardrooms SET InWard=?, RoomName=?, Status=? \" + \"WHERE RoomID = ?\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        ps.setLong(4, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(443,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3156,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoomOccupant(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'/**\r\n * Updates a particular wardrooms occupiedBy information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * 		The WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateWardRoomOccupant(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardRooms SET OccupiedBy=? \" + \"WHERE RoomID = ?\"));\r\n        if ((wardRoom.getOccupiedBy()) == null) {\r\n            ps.setNull(1, Types.BIGINT);\r\n        } else {\r\n            ps.setLong(1, wardRoom.getOccupiedBy());\r\n        }\r\n        ps.setLong(2, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(444,'PrescriptionReportBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,425,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest',3174,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'private void assertPrescription(PrescriptionReportBean prescription) {\r\n    assertEquals(\"009042407\", prescription.getPrescription().getMedication().getNDCode());\r\n    assertEquals(\"Tetracycline\", prescription.getPrescription().getMedication().getDescription());\r\n    assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    assertEquals(5, prescription.getPrescription().getDosage());\r\n    assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    assertEquals(\"10/11/2006\", prescription.getPrescription().getEndDateStr());\r\n    assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}'),(445,'PrescriptionReportBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,425,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest',3175,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription2(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'private void assertPrescription2(PrescriptionReportBean prescription) {\r\n    assertEquals(\"647641512\", prescription.getPrescription().getMedication().getNDCode());\r\n    assertEquals(\"Prioglitazone\", prescription.getPrescription().getMedication().getDescription());\r\n    assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    assertEquals(5, prescription.getPrescription().getDosage());\r\n    assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    assertEquals(\"10/11/2020\", prescription.getPrescription().getEndDateStr());\r\n    assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}'),(446,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,437,'edu.ncsu.csc.itrust.dao.patient.EditPatientTest',3240,'edu.ncsu.csc.itrust.dao.patient.EditPatientTest.assertIsPatient2(edu.ncsu.csc.itrust.beans.PatientBean)',0,'private void assertIsPatient2(PatientBean p) {\r\n    assertEquals(2L, p.getMID());\r\n    assertEquals(\"Andy\", p.getFirstName());\r\n    assertEquals(\"Programmer\", p.getLastName());\r\n    assertEquals(\"05/19/1984\", p.getDateOfBirthStr());\r\n    assertEquals(\"250.10\", p.getCauseOfDeath());\r\n    assertEquals(\"andy.programmer@gmail.com\", p.getEmail());\r\n    assertEquals(\"344 Bob Street\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"555-555-5555\", p.getPhone());\r\n    assertEquals(\"Mr Emergency\", p.getEmergencyName());\r\n    assertEquals(\"555-555-5551\", p.getEmergencyPhone());\r\n    assertEquals(\"IC\", p.getIcName());\r\n    assertEquals(\"Street1\", p.getIcAddress1());\r\n    assertEquals(\"Street2\", p.getIcAddress2());\r\n    assertEquals(\"City\", p.getIcCity());\r\n    assertEquals(\"PA\", p.getIcState());\r\n    assertEquals(\"19003-2715\", p.getIcZip());\r\n    assertEquals(\"555-555-5555\", p.getIcPhone());\r\n    assertEquals(\"1\", p.getIcID());\r\n    assertEquals(\"1\", p.getMotherMID());\r\n    assertEquals(\"0\", p.getFatherMID());\r\n    assertEquals(\"O-\", p.getBloodType().getName());\r\n    assertEquals(Ethnicity.Caucasian, p.getEthnicity());\r\n    assertEquals(Gender.Male, p.getGender());\r\n    assertEquals(\"This person is absolutely crazy. Do not touch them.\", p.getTopicalNotes());\r\n}'),(447,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,447,'edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest',3315,'edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.assertIsPersonnel2(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'private void assertIsPersonnel2(PersonnelBean p) {\r\n    assertEquals(8000000009L, p.getMID());\r\n    assertEquals(\"FirstUAP\", p.getFirstName());\r\n    assertEquals(\"LastUAP\", p.getLastName());\r\n    // assertEquals(\"opposite of yin\", p.getSecurityQuestion());\r\n    // assertEquals(\"yang\", p.getSecurityAnswer());\r\n    assertEquals(\"100 Ave\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"111-111-1111\", p.getPhone());\r\n}'),(448,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,476,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator',3505,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public TestDataGenerator(String projectHome, DAOFactory factory) {\r\n    this.DIR = projectHome + \"/sql/data\";\r\n    this.factory = factory;\r\n}'),(449,'ErrorList errorList','edu.ncsu.csc.itrust.exception.ErrorList',496,497,'edu.ncsu.csc.itrust.exception.FormValidationException',3719,'edu.ncsu.csc.itrust.exception.FormValidationException.-init-(edu.ncsu.csc.itrust.exception.ErrorList)',0,'/**\r\n * Constructor with error messages as a special ErrorList data type.\r\n *\r\n * @param errorList\r\n * 		An ErrorList object which contains the list of error messages.\r\n */\r\npublic FormValidationException(ErrorList errorList) {\r\n    this.errorList = errorList;\r\n}'),(450,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4263,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    fail(\"Event not logged as specified.\");\r\n}'),(451,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4264,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}'),(452,'DemographicReportFilter.DemographicReportFilterType filterType','edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType',585,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4268,'edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}'),(453,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4268,'edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}'),(454,'MedicalReportFilter.MedicalReportFilterType filterType','edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType',588,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4330,'edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(455,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4330,'edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(456,'PersonnelReportFilter.PersonnelReportFilterType filterType','edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType',591,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4358,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}'),(457,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4358,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}'),(458,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,595,'edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator',4380,'edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Given a factory and patient ID, and sets up a list of all risk checkers\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the necessary DAOs to perform the checks.\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {\r\n    riskCheckers = new ArrayList<RiskChecker>();\r\n    riskCheckers.add(new HeartDiseaseRisks(factory, pid));\r\n    riskCheckers.add(new Type1DiabetesRisks(factory, pid));\r\n    riskCheckers.add(new Type2DiabetesRisks(factory, pid));\r\n}'),(459,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,597,'edu.ncsu.csc.itrust.risk.HeartDiseaseRisks',4386,'edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(460,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,599,'edu.ncsu.csc.itrust.risk.RiskChecker',4394,'edu.ncsu.csc.itrust.risk.RiskChecker.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    this.factory = factory;\r\n    HealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);\r\n    if ((records.size()) > 0)\r\n        currentHealthRecord = records.get(0);\r\n    else\r\n        throw new NoHealthRecordsException();\r\n\r\n    patient = factory.getPatientDAO().getPatient(patientID);\r\n}'),(461,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,600,'edu.ncsu.csc.itrust.risk.Type1DiabetesRisks',4400,'edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(462,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,602,'edu.ncsu.csc.itrust.risk.Type2DiabetesRisks',4409,'edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(463,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,604,'edu.ncsu.csc.itrust.risk.factors.AgeFactor',4417,'edu.ncsu.csc.itrust.risk.factors.AgeFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,int)',0,'public AgeFactor(PatientBean patient, int age) {\r\n    this.age = age;\r\n    this.patient = patient;\r\n}'),(464,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,606,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor',4424,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])',0,'public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {\r\n    this.factory = factory;\r\n    this.patientID = mid;\r\n    this.icdCodes = icdCodes.clone();\r\n}'),(465,'HealthRecord currentHealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,608,'edu.ncsu.csc.itrust.risk.factors.CholesterolFactor',4436,'edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public CholesterolFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}'),(466,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,610,'edu.ncsu.csc.itrust.risk.factors.EthnicityFactor',4445,'edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Ethnicity[])',0,'public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {\r\n    this.atRisk = atRisks.clone();\r\n    this.patient = patient;\r\n}'),(467,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,612,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor',4454,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}'),(468,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,614,'edu.ncsu.csc.itrust.risk.factors.GenderFactor',4463,'edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)',0,'public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}'),(469,'Gender gender','edu.ncsu.csc.itrust.enums.Gender',483,614,'edu.ncsu.csc.itrust.risk.factors.GenderFactor',4463,'edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)',0,'public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}'),(470,'HealthRecord currentHealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,616,'edu.ncsu.csc.itrust.risk.factors.HypertensionFactor',4470,'edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public HypertensionFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}'),(471,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,620,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor',4489,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}'),(472,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,621,'edu.ncsu.csc.itrust.risk.factors.SmokingFactor',4492,'edu.ncsu.csc.itrust.risk.factors.SmokingFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public SmokingFactor(DAOFactory factory, long patientID) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n}'),(473,'HealthRecord currentHealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,623,'edu.ncsu.csc.itrust.risk.factors.WeightFactor',4501,'edu.ncsu.csc.itrust.risk.factors.WeightFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord,int)',0,'public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {\r\n    this.currentHealthRecord = currentHealthRecord;\r\n    this.bmiThreshold = bmiThreshold;\r\n}'),(474,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,626,'edu.ncsu.csc.itrust.server.SessionTimeoutListener',4513,'edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified\r\n * timeout limit.\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used.\r\n */\r\npublic SessionTimeoutListener(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(475,'TransactionType transType','edu.ncsu.csc.itrust.enums.TransactionType',490,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4636,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}'),(476,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4634,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}'),(477,'TransactionType transType','edu.ncsu.csc.itrust.enums.TransactionType',490,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4635,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    assertEquals(transType, trans.getTransactionType());\r\n    assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(478,'TransactionBean trans','edu.ncsu.csc.itrust.beans.TransactionBean',281,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4635,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    assertEquals(transType, trans.getTransactionType());\r\n    assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(479,'OkayBean other','edu.ncsu.csc.itrust.testutils.OkayBean',647,647,'edu.ncsu.csc.itrust.testutils.OkayBean',4640,'edu.ncsu.csc.itrust.testutils.OkayBean.equals(edu.ncsu.csc.itrust.testutils.OkayBean)',0,'private boolean equals(OkayBean other) {\r\n    return true;\r\n}'),(480,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4657,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(481,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4658,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(482,'TestBean bean','edu.ncsu.csc.itrust.testutils.TestBean',649,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4659,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.validate(edu.ncsu.csc.itrust.testutils.TestBean)',0,'@Override\r\npublic void validate(TestBean bean) throws FormValidationException {\r\n    throw new IllegalStateException(\"Mock object acts as a proxy to protected BeanValidator classes. Do not call this method\");\r\n}'),(483,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,652,'edu.ncsu.csc.itrust.validate.AddPatientValidator',4661,'edu.ncsu.csc.itrust.validate.AddPatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(484,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,653,'edu.ncsu.csc.itrust.validate.AddPersonnelValidator',4663,'edu.ncsu.csc.itrust.validate.AddPersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(485,'AdverseEventBean b','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,654,'edu.ncsu.csc.itrust.validate.AdverseEventValidator',4665,'edu.ncsu.csc.itrust.validate.AdverseEventValidator.validate(edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AdverseEventBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"comment\", b.getDescription(), ValidationFormat.ADVERSE_EVENT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(486,'AllergyBean m','edu.ncsu.csc.itrust.beans.AllergyBean',244,655,'edu.ncsu.csc.itrust.validate.AllergyBeanValidator',4667,'edu.ncsu.csc.itrust.validate.AllergyBeanValidator.validate(edu.ncsu.csc.itrust.beans.AllergyBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AllergyBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Allergy Description\", m.getDescription(), ValidationFormat.ALLERGY_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(487,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,656,'edu.ncsu.csc.itrust.validate.ApptBeanValidator',4669,'edu.ncsu.csc.itrust.validate.ApptBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptBean)',0,'@Override\r\npublic void validate(ApptBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((bean.getComment()) == null)\r\n        return;\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Comment\", bean.getComment(), ValidationFormat.APPT_COMMENT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(488,'ApptTypeBean a','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,657,'edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator',4671,'edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'@Override\r\npublic void validate(ApptTypeBean a) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Name\", a.getName(), ValidationFormat.APPT_TYPE_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Duration\", ((a.getDuration()) + \"\"), ValidationFormat.APPT_TYPE_DURATION, false));\r\n    if ((a.getDuration()) <= 0) {\r\n        errorList.addIfNotNull(\"Appointment duration must be greater than zero.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(489,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4677,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}'),(490,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4676,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param longValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(491,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4675,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param doubleValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(492,'Gender gen','edu.ncsu.csc.itrust.enums.Gender',483,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4678,'edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * 		\r\n * @param gen\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(493,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4678,'edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * 		\r\n * @param gen\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(494,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4680,'edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}'),(495,'DiagnosisBean d','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,660,'edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator',4694,'edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.validate(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DiagnosisBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ICD9CM Code\", d.getICDCode(), ValidationFormat.ICD9CM, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", d.getDescription(), ValidationFormat.ICD_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(496,'DrugInteractionBean d','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,661,'edu.ncsu.csc.itrust.validate.DrugInteractionValidator',4696,'edu.ncsu.csc.itrust.validate.DrugInteractionValidator.validate(edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DrugInteractionBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"FirstDrug\", d.getFirstDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"SecondDrug\", d.getSecondDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"description\", d.getDescription(), ValidationFormat.DRUG_INT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(497,'MessageBean m','edu.ncsu.csc.itrust.beans.MessageBean',262,662,'edu.ncsu.csc.itrust.validate.EMailValidator',4698,'edu.ncsu.csc.itrust.validate.EMailValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param m\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MessageBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", m.getBody(), ValidationFormat.EMAILS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(498,'EditOfficeVisitForm form','edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',286,663,'edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator',4700,'edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm)',0,'/* public EditOfficeVisitValidator(boolean validatePrescription) {\nthis.validatePrescription = validatePrescription;\n}\n */\r\n/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(EditOfficeVisitForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"HCP ID\", form.getHcpID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", form.getHospitalID(), ValidationFormat.HOSPITAL_ID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", form.getNotes(), ValidationFormat.NOTES, true));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", form.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Visit Date\", form.getVisitDate(), ValidationFormat.DATE, false));\r\n    /* if (validatePrescription) {\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE,\n    false));\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(),\n    ValidationFormat.NOTES, true));\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\n    if ((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\"\n    && (checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\") {\n    Date sd = null;\n    Date ed = null;\n    try {\n    sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\n    ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\n    String dateError = null;\n    if (sd.after(ed)) {\n    dateError = \"The start date of the prescription must be before the end date.\";\n    }\n    errorList.addIfNotNull(dateError);\n    } catch (ParseException e) {\n    errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\n    }\n\n    }\n    }\n     */\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(499,'EditPrescriptionsForm form','edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',287,664,'edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator',4702,'edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(EditPrescriptionsForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(), ValidationFormat.NOTES, false));\r\n    errorList.addIfNotNull((form.getInstructions().equals(defaultInstructions) ? \"Instructions: \" + (ValidationFormat.NOTES.getDescription()) : \"\"));\r\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\r\n    if (((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\") && ((checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\")) {\r\n        Date sd = null;\r\n        Date ed = null;\r\n        try {\r\n            sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\r\n            ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\r\n            String dateError = null;\r\n            if (sd.after(ed)) {\r\n                dateError = \"The start date of the prescription must be before the end date.\";\r\n            }\r\n            errorList.addIfNotNull(dateError);\r\n        } catch (ParseException e) {\r\n            errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(500,'HealthRecordForm bean','edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',288,665,'edu.ncsu.csc.itrust.validate.HealthRecordFormValidator',4704,'edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.validate(edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HealthRecordForm bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkInt(\"Systolic blood pressure\", bean.getBloodPressureN(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Diastolic blood pressure\", bean.getBloodPressureD(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol HDL\", bean.getCholesterolHDL(), 0, 89, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol LDL\", bean.getCholesterolLDL(), 0, 600, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol Triglycerides\", bean.getCholesterolTri(), 100, 600, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Height\", bean.getHeight(), ValidationFormat.Height, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Weight\", bean.getWeight(), ValidationFormat.Weight, false));\r\n    errorList.addIfNotNull(checkInt(\"Smoker\", bean.getIsSmoker(), 0, 10, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(501,'HospitalBean h','edu.ncsu.csc.itrust.beans.HospitalBean',258,666,'edu.ncsu.csc.itrust.validate.HospitalBeanValidator',4706,'edu.ncsu.csc.itrust.validate.HospitalBeanValidator.validate(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HospitalBean h) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", h.getHospitalID(), ValidationFormat.HOSPITAL_ID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital Name\", h.getHospitalName(), ValidationFormat.HOSPITAL_NAME, false));\r\n    if (!(h.getHospitalAddress().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Address\", h.getHospitalAddress(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(h.getHospitalCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital City\", h.getHospitalCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(h.getHospitalState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital State\", h.getHospitalState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(h.getHospitalZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Zip\", h.getHospitalZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}'),(502,'LOINCbean m','edu.ncsu.csc.itrust.beans.LOINCbean',259,667,'edu.ncsu.csc.itrust.validate.LOINCBeanValidator',4708,'edu.ncsu.csc.itrust.validate.LOINCBeanValidator.validate(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(LOINCbean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((((m.getLabProcedureCode()) == null) || ((m.getComponent()) == null)) || ((m.getKindOfProperty()) == null)) {\r\n        throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\r\n    }\r\n    errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(503,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,668,'edu.ncsu.csc.itrust.validate.LabProcedureValidator',4710,'edu.ncsu.csc.itrust.validate.LabProcedureValidator.validate(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\npublic void validate(LabProcedureBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"LOINC\", b.getLoinc(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Commentary\", b.getCommentary(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Results\", b.getResults(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Status\", b.getStatus(), ValidationFormat.LAB_STATUS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Rights\", b.getRights(), ValidationFormat.LAB_RIGHTS, false));\r\n    if (((b.getNumericalResult()) != null) && ((b.getNumericalResult().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getUpperBound()) != null) && ((b.getUpperBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getLowerBound()) != null) && ((b.getLowerBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(504,'MedicationBean m','edu.ncsu.csc.itrust.beans.MedicationBean',261,670,'edu.ncsu.csc.itrust.validate.MedicationBeanValidator',4714,'edu.ncsu.csc.itrust.validate.MedicationBeanValidator.validate(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MedicationBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ND Code\", m.getNDCode(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", m.getDescription(), ValidationFormat.ND_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(505,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,671,'edu.ncsu.csc.itrust.validate.MessageValidator',4716,'edu.ncsu.csc.itrust.validate.MessageValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)',0,'@Override\r\npublic void validate(MessageBean mBean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", mBean.getBody(), ValidationFormat.MESSAGES_BODY, false));\r\n    errorList.addIfNotNull(checkFormat(\"subject\", mBean.getSubject(), ValidationFormat.MESSAGES_SUBJECT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(506,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,672,'edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator',4718,'edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.validate(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(OverrideReasonBean orc) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Reason Code\", orc.getORCode(), ValidationFormat.ORC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", orc.getDescription(), ValidationFormat.OR_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(507,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,673,'edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator',4720,'edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Name\", bean.getName(), ValidationFormat.PATIENT_INSTRUCTIONS_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Comments\", bean.getComment(), ValidationFormat.PATIENT_INSTRUCTIONS_COMMENTS, false));\r\n    // The following checks URL length.\r\n    errorList.addIfNotNull(checkFormat(\"URL\", bean.getUrl(), ValidationFormat.PATIENT_INSTRUCTIONS_URL, false));\r\n    // The following checks URL format.\r\n    UrlValidator urlValidator = new UrlValidator();\r\n    if (!(urlValidator.isValid(bean.getUrl()))) {\r\n        errorList.addIfNotNull(\"URL: A valid URL is required.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(508,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,674,'edu.ncsu.csc.itrust.validate.PatientValidator',4722,'edu.ncsu.csc.itrust.validate.PatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)',0,'@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // First name, last name, and email are all required\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (!(p.getDateOfBirthStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE, false));\r\n    }\r\n    if (!(p.getDateOfDeathStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE, true));\r\n    }\r\n    try {\r\n        if ((\"\".equals(p.getDateOfDeathStr())) || ((p.getDateOfDeath()) == null)) {\r\n            if (!(p.getCauseOfDeath().equals(\"\"))) {\r\n                errorList.addIfNotNull(\"Cause of Death cannot be specified without Date of Death!\");\r\n            }\r\n        } else {\r\n            if (p.getDateOfDeath().before(p.getDateOfBirth()))\r\n                errorList.addIfNotNull(\"Death date cannot be before birth date!\");\r\n\r\n            if (p.getDateOfDeath().after(new Date())) {\r\n                errorList.addIfNotNull(\"Death date cannot be in the future!\");\r\n            }\r\n        }\r\n        if (p.getDateOfBirth().after(new Date())) {\r\n            errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n        }\r\n    } catch (NullPointerException e) {\r\n        // ignore this\r\n    }\r\n    if (!(p.getCauseOfDeath().isEmpty())) {\r\n        boolean deathCauseNull = (null == (p.getDateOfDeathStr())) || (p.getDateOfDeathStr().equals(\"\"));\r\n        errorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM, deathCauseNull));\r\n    }\r\n    if (!(p.getStreetAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getStreetAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getEmergencyName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getEmergencyPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getIcAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getIcAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getIcCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getIcState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getIcZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getIcPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(), ValidationFormat.INSURANCE_ID, false));\r\n    }\r\n    if (!(p.getMotherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getFatherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getTopicalNotes().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\r\n    }\r\n    /* This block was added for Theme 5 by Tyler Arehart */\r\n    if (!(p.getCreditCardNumber().isEmpty())) {\r\n        if (!((p.getCreditCardNumber().equals(\"\")) && (p.getCreditCardType().equals(\"\")))) {\r\n            String s = null;\r\n            CreditCardValidator c;\r\n            int type = -1;\r\n            if (p.getCreditCardType().equals(\"VISA\"))\r\n                type = CreditCardValidator.VISA;\r\n\r\n            if (p.getCreditCardType().equals(\"MASTERCARD\"))\r\n                type = CreditCardValidator.MASTERCARD;\r\n\r\n            if (p.getCreditCardType().equals(\"DISCOVER\"))\r\n                type = CreditCardValidator.DISCOVER;\r\n\r\n            if (p.getCreditCardType().equals(\"AMEX\"))\r\n                type = CreditCardValidator.AMEX;\r\n\r\n            if (type != (-1)) {\r\n                c = new CreditCardValidator(type);\r\n                if (!(c.isValid(p.getCreditCardNumber()))) {\r\n                    s = \"Credit Card Number\";\r\n                }\r\n            } else {\r\n                s = \"Credit Card Type\";\r\n            }\r\n            errorList.addIfNotNull(s);\r\n        }\r\n    }\r\n    if (!(p.getDirectionsToHome().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Directions to Home\", p.getDirectionsToHome(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getReligion().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Religion\", p.getReligion(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getLanguage().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Language\", p.getLanguage(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getSpiritualPractices().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Spiritual Practices\", p.getSpiritualPractices(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getAlternateName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Alternate Name\", p.getAlternateName(), ValidationFormat.NAME, true));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(509,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,675,'edu.ncsu.csc.itrust.validate.PersonnelValidator',4724,'edu.ncsu.csc.itrust.validate.PersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(510,'ProcedureBean p','edu.ncsu.csc.itrust.beans.ProcedureBean',273,676,'edu.ncsu.csc.itrust.validate.ProcedureBeanValidator',4726,'edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.validate(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ProcedureBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"CPT Code\", p.getCPTCode(), ValidationFormat.CPT, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", p.getDescription(), ValidationFormat.CPT_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(511,'ReferralBean p','edu.ncsu.csc.itrust.beans.ReferralBean',274,677,'edu.ncsu.csc.itrust.validate.ReferralBeanValidator',4728,'edu.ncsu.csc.itrust.validate.ReferralBeanValidator.validate(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ReferralBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", p.getReferralDetails(), ValidationFormat.REFERRAL_NOTES, false));\r\n    errorList.addIfNotNull(checkFormat(\"Priority\", Integer.toString(p.getPriority()), ValidationFormat.PRIORITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", p.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Receiver ID\", p.getReceiverID(), ValidationFormat.MID, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(512,'RemoteMonitoringDataBean m','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,678,'edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator',4730,'edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.validate(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(RemoteMonitoringDataBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // Skip validation if values were not submitted (0 or -1)\r\n    if (!(((m.getSystolicBloodPressure()) == 0) || ((m.getSystolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Systolic Blood Pressure\", (\"\" + (m.getSystolicBloodPressure())), ValidationFormat.SYSTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getDiastolicBloodPressure()) == 0) || ((m.getDiastolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Diastolic Blood Pressure\", (\"\" + (m.getDiastolicBloodPressure())), ValidationFormat.DIASTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getGlucoseLevel()) == 0) || ((m.getGlucoseLevel()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Glucose Level\", (\"\" + (m.getGlucoseLevel())), ValidationFormat.GLUCOSE_LEVEL, true));\r\n\r\n    if (!(((m.getPedometerReading()) == 0) || ((m.getPedometerReading()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Pedometer Reading\", (\"\" + (m.getPedometerReading())), ValidationFormat.PEDOMETER_READING, true));\r\n\r\n    if (!(((m.getHeight()) == 0) || ((m.getHeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Height\", (\"\" + (m.getHeight())), ValidationFormat.HEIGHT, true));\r\n\r\n    if (!(((m.getWeight()) == 0) || ((m.getWeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Weight\", (\"\" + (m.getWeight())), ValidationFormat.WEIGHT, true));\r\n\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}'),(513,'SecurityQA bean','edu.ncsu.csc.itrust.beans.SecurityQA',277,679,'edu.ncsu.csc.itrust.validate.SecurityQAValidator',4732,'edu.ncsu.csc.itrust.validate.SecurityQAValidator.validate(edu.ncsu.csc.itrust.beans.SecurityQA)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SecurityQA bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if (null == bean)\r\n        throw new FormValidationException(\"Null form\");\r\n\r\n    if (null == (bean.getConfirmAnswer()))\r\n        throw new FormValidationException(\"Confirm answer cannot be empty\");\r\n\r\n    if (!(bean.getAnswer().equals(bean.getConfirmAnswer())))\r\n        throw new FormValidationException(\"Security answers do not match\");\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Security Question\", bean.getQuestion(), ValidationFormat.QUESTION, false));\r\n    errorList.addIfNotNull(checkFormat(\"Security Answer\", bean.getAnswer(), ValidationFormat.ANSWER, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(514,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,680,'edu.ncsu.csc.itrust.validate.SurveySearchValidator',4734,'edu.ncsu.csc.itrust.validate.SurveySearchValidator.validate(edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SurveyResultBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", bean.getHCPzip(), ValidationFormat.ZIPCODE, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}');
/*!40000 ALTER TABLE `parameters` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-11-28 21:30:56
