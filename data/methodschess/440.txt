/**
 * Render this ply as a string.
 */
private final void computeStringRepresentation() {
    StringBuffer notation = new StringBuffer();
    if (!((getPly()) instanceof CastlingPly)) {
        // Start with the type of the piece, if it is not a pawn.
        if ((getPiece().getType()) != (Piece.PAWN)) {
            notation.append(getPieceTypeNotation(getPiece().getType()));
        }
        // Get this ply as a string.
        String plyString = getPly().toString();
        // If its a capture, indicate it with an x
        notation.append((isCapture() ? plyString.replace(-, x) : plyString));
        // If its a pawn transforming to a new piece type, append the new type.
        if ((getPly()) instanceof TransformationPly) {
            notation.append("=");
            notation.append(getPieceTypeNotation(((TransformationPly) (getPly())).getTypeAfterTransformation()));
        }
    } else {
        notation.append(getPly().toString());
    }
    // Add the check(-mate) signs.
    if (isCheckMate()) {
        notation.append(#);
    } else {
        if (isCheck()) {
            notation.append(+);
        }
    }
    // Convert the buffer to a string and store it.
    _stringRepresentation = notation.toString();
}