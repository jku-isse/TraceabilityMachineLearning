/**
 * Method for constructing the GUI
 */
private void jbInit() throws Exception {
    this.setTitle("JavaChess - Setup position");
    this.getContentPane().setLayout(gblContentPane);
    this.setSize(new Dimension(700, 650));
    this.addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent e) {
            this_windowClosing(e);
        }
    });
    bitBoard = new BitBoardImpl();
    // Hm:
    // gameController = new GameController( _game, _gameNotation, _engine, _board, _gameTimer);
    // boardRenderer = new ChessBoardRenderer2D( gameController, bitBoard );
    boardRenderer = new ChessBoardRenderer2D(null, bitBoard);
    // gameController.setRenderer( boardRenderer );
    this.jpBoard.setLayout(gblBoard);
    this.jpBoard.setPreferredSize(new Dimension(430, 430));
    jpBoard.addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
            jpBoard_mouseEntered(e);
        }

        public void mouseExited(MouseEvent e) {
            jpBoard_mouseExited(e);
        }
    });
    this.jpBoard.setMinimumSize(new Dimension(430, 430));
    jpCastling.setLayout(gblCastling);
    jpCastling.setBorder(BorderFactory.createLineBorder(Color.black));
    jlCastling.setText("Castling rights:");
    checkBoxWhiteShort.setText("White short (O-O)");
    checkBoxWhiteLong.setText("White long (O-O-O)");
    checkBoxBlackShort.setText("Black short (O-O)");
    checkBoxBlackLong.setText("Black long (O-O-O)");
    jpMoveRight.setLayout(gblMoveRight);
    jpMoveRight.setBorder(BorderFactory.createLineBorder(Color.black));
    jpMoveRight.setMinimumSize(new Dimension(135, 73));
    jpMoveRight.setPreferredSize(new Dimension(135, 73));
    jlMoveRight.setText("Move right:");
    jrbWhiteToMove.setText("White to move");
    jrbWhiteToMove.setSelected(true);
    jrbBlackToMove.setText("Black to move");
    jbClearBoard.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            jbClearBoard_actionPerformed(e);
        }
    });
    jbStartPosition.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            jbStartPosition_actionPerformed(e);
        }
    });
    bgMoveRight.add(jrbWhiteToMove);
    bgMoveRight.add(jrbBlackToMove);
    jpEnPassant.setLayout(gridBagLayout1);
    jlEnPassant.setText("EnPassant-Square:");
    jtEnPassant.setMinimumSize(new Dimension(108, 21));
    // Restrict the user input to 2 valid characters:
    jtEnPassant.setDocument(new StringTextDocument(1, 2));
    jtEnPassant.setPreferredSize(new Dimension(108, 21));
    jpEnPassant.setBorder(BorderFactory.createLineBorder(Color.black));
    jpEnPassant.setMinimumSize(new Dimension(135, 48));
    jpEnPassant.setPreferredSize(new Dimension(135, 48));
    jpMoveNumber.setLayout(gblMoveNumber);
    jlMoveNumber.setText("Move number:");
    jpMoveNumber.setBorder(BorderFactory.createLineBorder(Color.black));
    jpMoveNumber.setMinimumSize(new Dimension(135, 56));
    jpMoveNumber.setPreferredSize(new Dimension(135, 56));
    jtMoveNumber.setMinimumSize(new Dimension(108, 21));
    jtMoveNumber.setPreferredSize(new Dimension(108, 21));
    // Restrict the user input to 3 numbers:
    jtMoveNumber.setDocument(new StringTextDocument(2, 3));
    jpButtons.setLayout(gblButtons);
    jbOk.setToolTipText("Close dialog with current position");
    jbOk.setMnemonic(KeyEvent.VK_O);
    jbOk.setText("OK");
    jbOk.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            jbOk_actionPerformed(e);
        }
    });
    jbCancel.setToolTipText("Abort and back to former position/game");
    jbCancel.setText("Cancel");
    jbCancel.setMnemonic(KeyEvent.VK_C);
    jbCancel.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            jbCancel_actionPerformed(e);
        }
    });
    jbClearBoard.setToolTipText("Clears the complete board");
    jbClearBoard.setText("Clear board");
    jbClearBoard.setMnemonic(KeyEvent.VK_L);
    jbStartPosition.setToolTipText("Startup/Initial position");
    jbStartPosition.setText("Start position");
    jbStartPosition.setMnemonic(KeyEvent.VK_S);
    jpBoard.add(boardRenderer, new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
    this.getContentPane().add(jpPieces, new GridBagConstraints(0, 5, 2, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    jpBoard.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED, Color.white, Color.white, new Color(148, 145, 140), new Color(103, 101, 98)));
    this.getContentPane().add(jpBoard, new GridBagConstraints(0, 0, 1, 4, 1.0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(20, 20, 2, 2), 0, 0));
    this.getContentPane().add(jpButtons, new GridBagConstraints(0, 6, 2, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
    this.getContentPane().add(jpMoveRight, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(20, 20, 0, 20), 0, 0));
    jpMoveRight.add(jrbWhiteToMove, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 4, 0, 0), 0, 0));
    jpMoveRight.add(jrbBlackToMove, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 4, 0, 0), 0, 0));
    jpMoveRight.add(jlMoveRight, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(4, 4, 0, 0), 0, 0));
    jpButtons.add(jbOk, new GridBagConstraints(3, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 20), 0, 0));
    jpButtons.add(jbCancel, new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 20), 0, 0));
    jpButtons.add(jbStartPosition, new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 20, 0, 20), 0, 0));
    jpButtons.add(jbClearBoard, new GridBagConstraints(0, 0, 1, 1, 0.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 20, 0, 20), 0, 0));
    this.getContentPane().add(jpCastling, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(20, 20, 0, 20), 0, 0));
    jpCastling.add(checkBoxBlackLong, new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 4, 0, 0), 0, 0));
    jpCastling.add(checkBoxWhiteShort, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 4, 0, 0), 0, 0));
    jpCastling.add(checkBoxWhiteLong, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 4, 0, 0), 0, 0));
    jpCastling.add(checkBoxBlackShort, new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 4, 0, 0), 0, 0));
    jpCastling.add(jlCastling, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(4, 4, 10, 0), 0, 0));
    this.getContentPane().add(jpEnPassant, new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(20, 20, 0, 0), 0, 0));
    jpEnPassant.add(jtEnPassant, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 4, 4, 4), 0, 0));
    jpEnPassant.add(jlEnPassant, new GridBagConstraints(0, 0, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(4, 4, 0, 0), 0, 0));
    this.getContentPane().add(jpMoveNumber, new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(20, 20, 0, 0), 0, 0));
    jpMoveNumber.add(jtMoveNumber, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(4, 4, 4, 4), 0, 0));
    jpMoveNumber.add(jlMoveNumber, new GridBagConstraints(0, 0, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(4, 4, 4, 4), 0, 0));// Brett

}