/**
 * Compute a key for a board and a color.
 *
 * @param board
 * 		The current board.
 * @param white
 * 		Flag to indicate if white moves.
 * @return The zobrist key.
 */
public long computeKey(BitBoard board, boolean white) {
    long val = 0L;
    // Get a bitmask of the empty squares to speedup the
    // test for a piece on the square.
    long emptySquareMask = board.getEmptySquares();
    // Reuse the same position object for each square.
    Position curPosition = new PositionImpl(0);
    for (int square = 0; square < 64; square++) {
        if ((emptySquareMask & 1) == 0) {
            // If theres a piece on the square
            curPosition.setSquareIndex(square);
            Piece p = board.getPiece(curPosition);
            if (p != null) {
                val ^= _factors[p.getColor()][((p.getType()) - 1)][square];
            }
        }
        emptySquareMask >>>= 1;// Shift the mask to test for the next square.

    }
    if (!white) {
        val ^= _blackMoves;
    }
    return val;
}