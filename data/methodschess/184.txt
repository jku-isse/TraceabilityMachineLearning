/**
 * The main method of the search thread.
 */
public void run() {
    // setAnalyzedBoards( 0L);  // Is done in the permanent brain now.
    setSearchDepth(0);
    // Try to get a move from the permanent brain.
    PreComputedPly permanentBrainPly = (usePermanentBrain()) ? getPermanentBrain().getPlyForUserPly(_lastUserPly) : null;
    // If we actually have a precomputed ply, adjust the search parameters.
    if (permanentBrainPly != null) {
        _bestPly = permanentBrainPly.getPly();
        setSearchDepth(permanentBrainPly.getSearchDepth());// depth is increased before next search!

        if ((this._enginePanel) != null) {
            StringBuffer sOutput = new StringBuffer();
            sOutput.append("Best ply for search depth ");
            sOutput.append(getSearchDepth());
            sOutput.append(" is ");
            sOutput.append(_bestPly.getPly().toString());
            sOutput.append(" with score ");
            sOutput.append(_bestPly.getScore());
            this._enginePanel.modifyText(sOutput.toString());
        }
    }
    // The following search is rather inefficent at the moment, since we should try to get a principal variant
    // from a search, so we can presort the plies for the next search.
    do {
        increaseSearchDepth();
        AnalyzedPly searchDepthResult = null;
        try {
            searchDepthResult = startMinimaxAlphaBeta(isWhite());
        } catch (InterruptedException ignored) {
            // The search was just interrupted here, so we dont have to throw this exception...
            decreaseSearchDepth();// But the search depth is 1 too high.

        }
        if (searchDepthResult != null) {
            // The exception might not be the only case, where a null is returned, so keep
            // this additional test.
            if ((this._statusPanel) != null)
                this._statusPanel.setStatusText("Thinking...");

            _bestPly = searchDepthResult;
            if ((this._enginePanel) != null) {
                StringBuffer sOutput = new StringBuffer();
                sOutput.append("Best ply for search depth ");
                sOutput.append(getSearchDepth());
                sOutput.append(" is ");
                sOutput.append(_bestPly.getPly().toString());
                sOutput.append(" with score ");
                sOutput.append(_bestPly.getScore());
                this._enginePanel.modifyText(sOutput.toString());
            }
        }
        // If search depth 1 was completed and no valid ply was found,
        // it seems that the computer is checkmate and the search can be aborted.
    } while ((!(isSearchStop())) && ((_bestPly) != null) );
}