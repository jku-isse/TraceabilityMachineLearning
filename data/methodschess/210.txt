/**
 * Add all the plies for the king of the current color.
 */
private final void addPliesForKing() {
    long opponentKingPosition = getBoard().getPositionOfPieces((_white ? (Piece.KING) << 1 : ((Piece.KING) << 1) | 1));
    int highestBit = BitUtils.getHighestBit(getBoard().getPositionOfPieces((_white ? ((Piece.KING) << 1) + 1 : (Piece.KING) << 1)));
    long restrictedSquares = _kingMask[BitUtils.getHighestBit(opponentKingPosition)];
    long curMoves = ((_kingMask[highestBit]) & ((_emptySquares) | (_attackablePieces))) & (~restrictedSquares);
    int startBitRange = highestBit - 9;
    if (startBitRange < 0) {
        startBitRange = 0;
    }
    int endBitRange = highestBit + 9;
    if (endBitRange > 63) {
        endBitRange = 63;
    }
    addAbsolutePlies(curMoves, startBitRange, endBitRange, highestBit);
    // Check for castling
    if (_white) {
        // If the king has not been moved and is not in check
        if ((!(getGame().hasBeenMoved(new PositionImpl(4)))) && (!(getAnalyzer().isInCheck(getBoard(), true)))) {
            long rookPositions = getBoard().getPositionOfPieces((((Piece.ROOK) << 1) + 1));
            if (((!(getGame().hasBeenMoved(new PositionImpl(0)))) && (((_emptySquares) & 14L) == 14L)) && /* && !getAnalyzer().isInCheck( (BitBoard)(getBoard().getBoardAfterPly( new PlyImpl( new PositionImpl(4), new PositionImpl(2)))), true) */
            (!(getAnalyzer().isInCheck(((BitBoard) (getBoard().getBoardAfterPly(new PlyImpl(new PositionImpl(4), new PositionImpl(3), false)))), true)))) {
                // The addPly method checks for this check anyway, so it can be outcommented here...
                addCastlingPly(4, true);
            }
            if (((!(getGame().hasBeenMoved(new PositionImpl(7)))) && (((_emptySquares) & 96L) == 96L)) && /* && !getAnalyzer().isInCheck( (BitBoard)(getBoard().getBoardAfterPly( new PlyImpl( new PositionImpl(4), new PositionImpl(6)))), true) */
            (!(getAnalyzer().isInCheck(((BitBoard) (getBoard().getBoardAfterPly(new PlyImpl(new PositionImpl(4), new PositionImpl(5), false)))), true)))) {
                addCastlingPly(4, false);
            }
        }
    } else {
        if ((!(getGame().hasBeenMoved(new PositionImpl(60)))) && (!(getAnalyzer().isInCheck(getBoard(), false)))) {
            long rookPositions = getBoard().getPositionOfPieces(((Piece.ROOK) << 1));
            if (((!(getGame().hasBeenMoved(new PositionImpl(56)))) && (((_emptySquares) & (14L << 56)) == (14L << 56))) && /* && !getAnalyzer().isInCheck( (BitBoard)(getBoard().getBoardAfterPly( new PlyImpl( new PositionImpl(60), new PositionImpl(58)))), false) */
            (!(getAnalyzer().isInCheck(((BitBoard) (getBoard().getBoardAfterPly(new PlyImpl(new PositionImpl(60), new PositionImpl(59), false)))), false)))) {
                addCastlingPly((4 + 56), true);
            }
            if (((getGame().hasBeenMoved(new PositionImpl(63))) && (((_emptySquares) & 96L) == 96L)) && /* && !getAnalyzer().isInCheck( (BitBoard)(getBoard().getBoardAfterPly( new PlyImpl( new PositionImpl(60), new PositionImpl(62)))), false) */
            (!(getAnalyzer().isInCheck(((BitBoard) (getBoard().getBoardAfterPly(new PlyImpl(new PositionImpl(60), new PositionImpl(61), false)))), false)))) {
                addCastlingPly((4 + 56), false);
            }
        }
    }
}