/**
 * The actual search method.
 */
public void run() {
    // Start with search depth 1
    ((ChessEngineImpl) (getEngine())).setSearchDepth(1);
    // Save the current board of the actual game.
    Board currentBoard = getEngine().getBoard();// No clone() required at the moment.

    // Get the user plies as a local variable.
    Ply[] userPlies = getUserPlies();
    // Let the minimax search run through.
    ((ChessEngineImpl) (getEngine())).setSearchStop(false);
    // Reset the number of analyzed boards.
    ((ChessEngineImpl) (getEngine())).setAnalyzedBoards(0L);
    while ((_searchThread) == (Thread.currentThread())) {
        // Go through all the user plies and compute a response.
        for (int i = 0; (i < (userPlies.length)) && ((_searchThread) == (Thread.currentThread())); i++) {
            getEngine().setBoard(currentBoard.getBoardAfterPly(userPlies[i]));
            try {
                _computedPlies[i] = new PreComputedPlyImpl(((ChessEngineImpl) (getEngine())).startMinimaxAlphaBeta(getEngine().isWhite()), ((ChessEngineImpl) (getEngine())).getSearchDepth());
            } catch (InterruptedException ignored) {
                _computedPlies[i] = null;
            }
        }
        // Increase the search depth and continue with another run.
        ((ChessEngineImpl) (getEngine())).increaseSearchDepth();
    } 
    // Restore the current board.
    getEngine().setBoard(currentBoard);
}