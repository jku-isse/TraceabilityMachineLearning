/**
 * Try to push a new entry into the hashtable.
 *
 * @param entry
 * 		The new entry, that the hashtable might store.
 */
public final void pushEntry(PlyHashtableEntry ply) {
    // Compute and store the key for this ply.
    Long hashKey = new Long(ply.hashKey());
    // Check if this ply is not already in the hashtable
    PlyHashtableEntry oldEntry = ((PlyHashtableEntry) (_hashtable.get(hashKey)));
    if (oldEntry != null) {
        // There is a entry with the same key
        if ((oldEntry.getSearchDepth()) >= (ply.getSearchDepth())) {
            return;// This entry shouldnt be replaced.

        }
    } else {
        // Now we actually add a new entry to the table.
        // Check, if the hashtable has not exceeded its maximum capacity
        // and remove older entries, if necessary.
        while ((getSize()) >= (getMaximumSize())) {
            removeOldestEntry();
        } 
    }
    // Put the new ply into the hashtable
    _hashtable.put(hashKey, ply);
    // Append the new ply at the end of the list of plies.
    // ATTENTION: this will only work, if theres only _one_
    // ply for each key!
    _orderedList.add(hashKey);
}