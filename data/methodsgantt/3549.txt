private void writeTask(TransformerHandler handler, GanttTask task, CustomColumnsStorage customColumns) throws IOException, SAXException {
    if ((task.getTaskID()) == (-1)) {
        throw new IllegalArgumentException(("Is it a fake root task? Task=" + task));
    }
    AttributesImpl attrs = new AttributesImpl();
    addAttribute("id", String.valueOf(task.getTaskID()), attrs);
    addAttribute("name", task.getName(), attrs);
    if (task.colorDefined()) {
        addAttribute("color", ColorConvertion.getColor(task.getColor()), attrs);
    }
    if (task.shapeDefined()) {
        addAttribute("shape", task.getShape().getArray(), attrs);
    }
    addAttribute("meeting", Boolean.valueOf(task.isMilestone()).toString(), attrs);
    if (task.isProjectTask()) {
        addAttribute("project", Boolean.TRUE.toString(), attrs);
    }
    addAttribute("start", task.getStart().toXMLString(), attrs);
    addAttribute("duration", String.valueOf(task.getLength()), attrs);
    addAttribute("complete", String.valueOf(task.getCompletionPercentage()), attrs);
    if ((task.getThird()) != null) {
        addAttribute("thirdDate", task.getThird().toXMLString(), attrs);
        addAttribute("thirdDate-constraint", String.valueOf(task.getThirdDateConstraint()), attrs);
    }
    addAttribute("priority", String.valueOf(task.getPriority()), attrs);
    final String sWebLink = task.getWebLink();
    if (((sWebLink != null) && (!(sWebLink.equals("")))) && (!(sWebLink.equals("http://")))) {
        addAttribute("webLink", URLEncoder.encode(sWebLink, "ISO-8859-1"), attrs);
    }
    addAttribute("expand", String.valueOf(task.getExpand()), attrs);
    startElement("task", attrs, handler);
    if (((task.getNotes()) != null) && ((task.getNotes().length()) > 0)) {
        cdataElement("notes", task.getNotes(), attrs, handler);
        // fout.write(space2 + "<notes>");
        // fout.write("
"
        // + space2
        // + s
        // + correct(replaceAll(task.getNotes(), "
", "
"
        // + space2 + s)));
        // fout.write("
" + space2 + "</notes>
");
    }
    // use successors to write depends information
    final TaskDependency[] depsAsDependee = task.getDependenciesAsDependee().toArray();
    for (int i = 0; i < (depsAsDependee.length); i++) {
        TaskDependency next = depsAsDependee[i];
        addAttribute("id", String.valueOf(next.getDependant().getTaskID()), attrs);
        addAttribute("type", String.valueOf(next.getConstraint().getID()), attrs);
        addAttribute("difference", String.valueOf(next.getDifference()), attrs);
        addAttribute("hardness", next.getHardness().getIdentifier(), attrs);
        emptyElement("depend", attrs, handler);
    }
    CustomColumnsValues ccv = task.getCustomValues();
    for (/* <CustomColumn> */
    Iterator it = customColumns.getCustomColums().iterator(); it.hasNext();) {
        CustomColumn nextColumn = ((CustomColumn) (it.next()));
        final String name = nextColumn.getName();
        final String idc = nextColumn.getId();
        Object value = ccv.getValue(name);
        if ((GregorianCalendar.class.isAssignableFrom(nextColumn.getType())) && (value != null)) {
            value = DateParser.getIsoDate(((GanttCalendar) (value)).getTime());
        }
        addAttribute("taskproperty-id", idc, attrs);
        addAttribute("value", (value == null ? null : String.valueOf(value)), attrs);
        emptyElement("customproperty", attrs, handler);
    }
    // Write the child of the task
    if (task.getManager().getTaskHierarchy().hasNestedTasks(task)) {
        Task[] nestedTasks = task.getManager().getTaskHierarchy().getNestedTasks(task);
        for (int i = 0; i < (nestedTasks.length); i++) {
            writeTask(handler, ((GanttTask) (nestedTasks[i])), customColumns);
        }
    }
    // end of task section
    endElement("task", handler);
}