public GanttResourcePanel(final GanttProject prj, GanttTree2 tree, UIFacade uiFacade) {
    super();
    myUIFacade = uiFacade;
    myDeleteAssignmentAction = new DeleteAssignmentAction(prj.getProject().getHumanResourceManager(), ((AssignmentContext) (this)), prj);
    prj.addProjectEventListener(this);
    appli = prj;
    model = new ResourceTreeTableModel(appli.getHumanResourceManager(), prj.getTaskManager());
    table = new ResourceTreeTable(appli.getProject(), model);
    setLayout(new BorderLayout());
    GanttImagePanel but = new GanttImagePanel("big.png", 300, 42);
    myImagePanel = but;
    left = new JPanel(new BorderLayout());
    table.setRowHeight(20);
    left.add(but, "North");
    left.setBackground(new Color(102, 153, 153));
    scrollpane = new JScrollPane();
    setLayout(new BorderLayout());
    add(scrollpane, BorderLayout.CENTER);
    scrollpane.getViewport().add(table);
    scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
    vbar = table.getVerticalScrollBar();
    final JPanel jp = new JPanel(new BorderLayout());
    jp.add(vbar, BorderLayout.CENTER);
    // jp.setBorder(BorderFactory.createEmptyBorder(2,1,2,0));
    // jp.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
    jp.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
    jp.setVisible(false);
    vbar.addAdjustmentListener(new AdjustmentListener() {
        public void adjustmentValueChanged(AdjustmentEvent e) {
            if (((table.getSize().getHeight()) - 20) < (e.getAdjustable().getMaximum()))
                jp.setVisible(true);
            else
                jp.setVisible(false);

            repaint();
        }
    });
    left.add(jp, BorderLayout.WEST);
    vbar.addAdjustmentListener(new GanttResourcePanel.GanttAdjustmentListener());
    left.add(scrollpane, "Center");
    // A splitpane is use
    mySplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
    area = new ResourceLoadGraphicArea(prj, prj.getZoomManager()) {
        protected int getHeaderHeight() {
            return (myImagePanel.getHeight()) + (table.getTable().getTableHeader().getHeight());
        }

        public boolean isExpanded(ProjectResource pr) {
            return getResourceTreeTable().isExpanded(pr);
        }

        protected int getRowHeight() {
            return table.getRowHeight();
        }
    };
    prj.getZoomManager().addZoomListener(area.getZoomListener());
    area.getChartModel().setRowHeight(table.getRowHeight());
    if ((lang.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT)) {
        mySplitPane.setLeftComponent(left);
        mySplitPane.setRightComponent(area);
    } else {
        mySplitPane.setRightComponent(left);
        mySplitPane.setLeftComponent(area);
        mySplitPane.setDividerLocation(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) - (left.getPreferredSize().getWidth()))));
    }
    mySplitPane.setOneTouchExpandable(true);
    mySplitPane.setPreferredSize(new Dimension(800, 500));
    add(mySplitPane, BorderLayout.CENTER);
    scrollpane.getViewport().setBackground(new Color(1.0F, 1.0F, 1.0F));
    left.setBackground(new Color(1.0F, 1.0F, 1.0F));
    table.setBackground(new Color(1.0F, 1.0F, 1.0F));
    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    this.setBackground(new Color(0.0F, 0.0F, 0.0F));
    applyComponentOrientation(lang.getComponentOrientation());
    table.addKeyListener(prj);// callback for keyboard pressed

    // Add listener for mouse click
    MouseListener ml = new MouseAdapter() {
        public void mousePressed(MouseEvent e) {
            TreePath selPath = table.getTreeTable().getPathForLocation(e.getX(), e.getY());
            table.getTreeTable().getTree().setSelectionPath(selPath);
            handlePopupTrigger(e);
        }

        public void mouseReleased(MouseEvent e) {
            handlePopupTrigger(e);
        }

        public void mouseClicked(MouseEvent e) {
            e.consume();
            if (((e.getClickCount()) == 2) && ((e.getButton()) == (MouseEvent.BUTTON1))) {
                handleDoubleClick(e);
            } else {
                handlePopupTrigger(e);
            }
        }
    };
    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), "properties");
    table.getActionMap().put("properties", myPropertiesAction);
    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "delete");
    table.getActionMap().put("delete", myDeleteAssignmentAction);
    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(GPAction.getKeyStroke("newArtifact.shortcut"), "newHuman");
    table.getActionMap().put("newHuman", new AbstractAction() {
        public void actionPerformed(ActionEvent e) {
            prj.newHumanResource();
        }
    });
    if (!(prj.isOnlyViewer)) {
        table.addMouseListener(ml);
        table.getTreeTable().getParent().addMouseListener(ml);
    }
    myResourcePropertiesAction = new ResourcePropertiesAction(prj.getProject(), prj.getUIFacade());
    myContextListener = new ListSelectionListener() {
        public void valueChanged(ListSelectionEvent e) {
            myResourcePropertiesAction.setContext(getContext());
        }
    };
    table.getTable().getSelectionModel().addListSelectionListener(myContextListener);
}