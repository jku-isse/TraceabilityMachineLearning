public void nextTimeUnit(int unitIndex) {
    if (areUnitsAccepted) {
        // if (myRedlineOption.isChecked()
        // && myCurrentFrame.getUnitStart(myCurrentUnit, unitIndex)
        // .compareTo(myToday) <= 0
        // && myCurrentFrame.getUnitFinish(myCurrentUnit, unitIndex)
        // .compareTo(myToday) > 0) {
        // 
        // }
        Date unitStart = myCurrentFrame.getUnitStart(myCurrentUnit, unitIndex);
        DayTypeAlternance[] alternance = getChartModel().getDayTypeAlternance(myCurrentFrame, myCurrentUnit, unitIndex);
        ChartModelBase.Offset[] offsets = getChartModel().calculateOffsets(myCurrentFrame, myCurrentUnit, unitStart, getChartModel().getTimeUnitStack().getDefaultTimeUnit(), getChartModel().getBottomUnitWidth());
        if (myRedlineOption.isChecked()) {
            drawDateLine(unitStart, unitIndex, myToday, offsets, Color.RED, 2);
        }
        if (isProjectBoundariesOptionOn()) {
            drawDateLine(unitStart, unitIndex, projectStart, offsets, Color.BLUE, 0);
            drawDateLine(unitStart, unitIndex, projectEnd, offsets, Color.BLUE, 0);
        }
        // int posX = myPosX;
        // float delta = (float) getChartModel().getBottomUnitWidth()
        // / (float) alternance.length;
        // int width=0;
        int prevOffset = 0;
        // DayTypeAlternance next=null;
        for (int i = 0; i < (alternance.length); i++) {
            DayTypeAlternance next = alternance[i];
            int alternanceEndOffset = getChartModel().getBottomUnitWidth();
            for (int j = 0; j < (offsets.length); j++) {
                if (offsets[j].getOffsetEnd().equals(next.getEnd())) {
                    alternanceEndOffset = offsets[j].getOffsetPixels();
                    break;
                }
            }
            // System.err.println("[ChartGridImpl] nextTimeUnit(): lternance="+next);
            // int width = (int)(next.getDuration().getLength(myCurrentUnit)*getChartModel().getBottomUnitWidth());
            // posX = (int) (myPosX + delta * i);
            // nextPosX = i < alternance.length - 1 ? (int) (myPosX + delta
            // * (i + 1))
            // : myPosX + getChartModel().getBottomUnitWidth();
            // width = nextPosX - posX;
            if ((GPCalendar.DayType.WEEKEND) == (next.getDayType())) {
                // System.err.println("[ChartGridImpl] nextTimeUnit(): prevOffset="+prevOffset+" endOffset="+alternanceEndOffset);
                // System.err.println("[ChartGridImpl] nextTimeUnit(): end="+next.getEnd()+" offset="+alternanceEndOffset+" bottom width="+getChartModel().getBottomUnitWidth());
                GraphicPrimitiveContainer.Rectangle r = getPrimitiveContainer().createRectangle(((myPosX) + prevOffset), 0, (alternanceEndOffset - prevOffset), getHeight());
                r.setBackgroundColor(getConfig().getHolidayTimeBackgroundColor());
                r.setStyle("calendar.holiday");
                getPrimitiveContainer().bind(r, next.getDayType());
            }
            if ((GPCalendar.DayType.HOLIDAY) == (next.getDayType())) {
                GraphicPrimitiveContainer.Rectangle r = getPrimitiveContainer().createRectangle(((myPosX) + prevOffset), 0, alternanceEndOffset, getHeight());
                r.setBackgroundColor(getConfig().getPublicHolidayTimeBackgroundColor());
                r.setStyle("calendar.holiday");
                getPrimitiveContainer().bind(r, next.getDayType());
            }
            prevOffset = alternanceEndOffset;
            // posX = myPosX+width;
        }
        // 
        myPosX += getChartModel().getBottomUnitWidth();
    }
}