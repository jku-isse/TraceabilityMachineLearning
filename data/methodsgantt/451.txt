/**
 * Simple write information of tasks
 */
public void writeTask(Writer fout, DefaultMutableTreeNode node) {
    ArrayList lot = new ArrayList();
    try {
        GanttTask task = ((GanttTask) (node.getUserObject()));
        if ((task.getTaskID()) == (-1))
            throw new RuntimeException("A task can not has a number equal to -1");

        int id = task.getTaskID();
        /* if (id >= lot.size()) { return; } */
        boolean haschild = false;
        ArrayList child = myTree.getAllChildTask(node);
        if ((child.size()) != 0) {
            haschild = true;
        }
        // Writes data of task
        fout.write((((((s) + (s)) + "<previous-task id="") + (task.getTaskID()))// lots.indexOf(task.toString())
         + // +
        // //By
        // CL
        """));
        fout.write(((" start="" + (task.getStart().toXMLString())) + """));
        fout.write(((" duration="" + (task.getLength())) + """));
        fout.write(((" meeting="" + (task.isMilestone())) + """));
        fout.write(((" super="" + haschild) + """));
        fout.write("/>
");
        // Write the child of the task
        if (haschild) {
            for (int i = 0; i < (child.size()); i++) {
                Task task2 = ((Task) (((DefaultMutableTreeNode) (child.get(i))).getUserObject()));
                int newid = -1;// lot.lastIndexOf(task2);

                for (int j = 0; j < (lot.size()); j++) {
                    String a = task2.toString();
                    if (a == null)
                        System.out.println("nul");

                    String b = lot.get(j).toString();
                    if (a.equals(b)) {
                        newid = j;
                    }
                }
                writeTask(fout, ((DefaultMutableTreeNode) (child.get(i))));
            }
        }
        // end of task section
    } catch (Exception e) {
        if (!(GPLogger.log(e))) {
            e.printStackTrace(System.err);
        }
    }
}