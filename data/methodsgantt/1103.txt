/**
 * Return an image with the gantt chart
 */
public RenderedImage getRenderedImage(GanttExportSettings settings) {
    Date dateStart = ((settings.getStartDate()) == null) ? getStartDate() : settings.getStartDate();
    Date dateEnd = ((settings.getEndDate()) == null) ? getEndDate() : settings.getEndDate();
    if (dateStart.after(dateEnd)) {
        Date tmp = ((Date) (dateStart.clone()));
        dateStart = ((Date) (dateEnd.clone()));
        dateEnd = tmp;
    }
    TaskLength printedLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), dateStart, dateEnd);
    int chartWidth = ((int) (((printedLength.getLength(getViewState().getBottomTimeUnit())) + 1) * (getViewState().getBottomUnitWidth())));
    if (chartWidth < (getWidth())) {
        chartWidth = getWidth();
    }
    ResourceTreeImageGenerator resourceTreeGenerator = new ResourceTreeImageGenerator(getHumanResourceManager()) {
        protected boolean isAssignmentVisible(ResourceAssignment assignment) {
            AssignmentNode an = appli.getResourcePanel().getResourceTreeTableModel().getNodeForAssigment(assignment);
            return appli.getResourcePanel().getResourceTreeTable().isVisible(an);
        }

        protected int getRowHeight() {
            return ResourceLoadGraphicArea.this.getRowHeight();
        }
    };
    BufferedImage resourceTreeImage = resourceTreeGenerator.createImage();
    final int chartHeight = resourceTreeImage.getHeight();
    RenderedResourceChartImage renderedImage = new RenderedResourceChartImage(myChartModel, myChartImplementation, resourceTreeImage, chartWidth, chartHeight);
    return renderedImage;
}