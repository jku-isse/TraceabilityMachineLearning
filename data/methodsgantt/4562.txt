private void recalculateSupertaskSchedule(final Task supertask, final TaskContainmentHierarchyFacade containmentFacade) {
    Task[] nested = containmentFacade.getNestedTasks(supertask);
    if ((nested.length) == 0) {
        return;
    }
    GanttCalendar maxEnd = null;
    GanttCalendar minStart = null;
    for (int i = 0; i < (nested.length); i++) {
        Task nextNested = nested[i];
        GanttCalendar nextStart = nextNested.getStart();
        if ((minStart == null) || ((nextStart.compareTo(minStart)) < 0)) {
            minStart = nextStart;
        }
        GanttCalendar nextEnd = nextNested.getEnd();
        if ((maxEnd == null) || ((nextEnd.compareTo(maxEnd)) > 0)) {
            maxEnd = nextEnd;
        }
    }
    TaskMutator mutator = supertask.createMutator();
    if ((minStart.compareTo(supertask.getStart())) != 0) {
        // System.err.println("recalculating supertask="+supertask.getTaskID()+" start="+minStart);
        // modifyTaskStart(supertask, minStart);
        mutator.setStart(minStart);
        myModifiedTasks.add(supertask);
    }
    if ((maxEnd.compareTo(supertask.getEnd())) != 0) {
        // modifyTaskEnd(supertask, maxEnd);
        mutator.setEnd(maxEnd);
        myModifiedTasks.add(supertask);
    }
    mutator.commit();
}