private void addLoad(Date startDate, Date endDate, float load, List loads, /* <Load> */
Task t) {
    LoadDistribution.Load taskLoad = new LoadDistribution.Load(startDate, endDate, load, t);
    myTasksLoads.add(taskLoad);
    int idxStart = -1;
    float currentLoad = 0;
    if (startDate == null) {
        idxStart = 0;
    } else {
        for (int i = 1; i < (loads.size()); i++) {
            LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.get(i)));
            if ((startDate.compareTo(nextLoad.startDate)) >= 0) {
                currentLoad = ((LoadDistribution.Load) (loads.get(i))).load;
            }
            if ((startDate.compareTo(nextLoad.startDate)) > 0) {
                continue;
            }
            idxStart = i;
            if ((startDate.compareTo(nextLoad.startDate)) < 0) {
                loads.add(i, new LoadDistribution.Load(startDate, null, currentLoad, null));
            }
            break;
        }
    }
    if (idxStart == (-1)) {
        idxStart = loads.size();
        loads.add(new LoadDistribution.Load(startDate, null, 0, t));
    }
    int idxEnd = -1;
    if (endDate == null) {
        idxEnd = (loads.size()) - 1;
    } else {
        for (int i = idxStart; i < (loads.size()); i++) {
            LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.get(i)));
            if ((endDate.compareTo(nextLoad.startDate)) > 0) {
                nextLoad.load += load;
                continue;
            }
            idxEnd = i;
            if ((endDate.compareTo(nextLoad.startDate)) < 0) {
                LoadDistribution.Load prevLoad = ((LoadDistribution.Load) (loads.get((i - 1))));
                loads.add(i, new LoadDistribution.Load(endDate, null, ((prevLoad.load) - load), null));
            }
            break;
        }
    }
    if (idxEnd == (-1)) {
        idxEnd = loads.size();
        loads.add(new LoadDistribution.Load(endDate, null, 0, t));
    }
}