public void drop(DropTargetDropEvent dtde) {
    if (!(isDropAcceptable(dtde))) {
        dtde.rejectDrop();
        return;
    }
    // Prevent hover timer from doing an unwanted expandPath or
    // collapsePath
    hoverTimer.stop();
    dtde.acceptDrop(dtde.getDropAction());
    Transferable transferable = dtde.getTransferable();
    DataFlavor[] flavors = transferable.getTransferDataFlavors();
    for (int i = 0; i < (flavors.length); i++) {
        DataFlavor flavor = flavors[i];
        if (flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {
            try {
                Point pt = dtde.getLocation();
                DefaultMutableTreeNode target = ((DefaultMutableTreeNode) (treetable.getTree().getClosestPathForLocation(pt.x, pt.y).getLastPathComponent()));
                TreePath pathSource = ((TreePath) (transferable.getTransferData(flavor)));
                DefaultMutableTreeNode source = ((DefaultMutableTreeNode) (pathSource.getLastPathComponent()));
                TreePath pathNewChild = null;
                TreeNode sourceFather = source.getParent();
                int index = sourceFather.getIndex(source);
                source.removeFromParent();
                treeModel.nodesWereRemoved(sourceFather, new int[]{ index }, new Object[]{ source });
                ((GanttTreeTableModel) (treeModel)).insertNodeInto(source, target, 0);
                pathNewChild = new TreePath(((DefaultMutableTreeNode) (pathSource.getLastPathComponent())).getPath());
                if (pathNewChild != null) {
                    treetable.getTree().setSelectionPath(pathNewChild);// Mark

                    // this
                    // as
                    // the
                    // selected
                    // path
                    // in
                    // the
                    // tree
                }
                // refreshAllFather(source.getUserObject().toString());
                expandRefresh(source);
                forwardScheduling();
                area.repaint();
                appli.setAskForSave(true);
                break;// No need to check remaining flavors

            } catch (UnsupportedFlavorException ufe) {
                System.out.println(ufe);
                dtde.dropComplete(false);
                return;
            } catch (IOException ioe) {
                System.out.println(ioe);
                dtde.dropComplete(false);
                return;
            }
        }
    }
    dtde.dropComplete(true);
}