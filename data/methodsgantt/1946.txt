private GraphicPrimitiveContainer.Rectangle createRectangle(LinkedList offsets, /* <Offset> */
Date start, Date end, int ypos) {
    if ((start.after(getChartEndDate())) || ((end.compareTo(getChartStartDate())) <= 0)) {
        return null;
    }
    Date lastOffsetEnd = ((ChartModelBase.Offset) (offsets.getLast())).getOffsetEnd();
    if (end.after(lastOffsetEnd)) {
        end = lastOffsetEnd;
    }
    ArrayList copy = new ArrayList(offsets);
    ChartModelBase.Offset offsetBefore = null;
    ChartModelBase.Offset offsetAfter = null;
    LinkedList buffer = new LinkedList();
    while ((offsets.getFirst()) != null) {
        ChartModelBase.Offset offset = ((ChartModelBase.Offset) (offsets.getFirst()));
        if ((offset.getOffsetEnd().compareTo(start)) <= 0) {
            offsetBefore = offset;
            buffer.clear();
        }
        if ((offset.getOffsetEnd().compareTo(end)) >= 0) {
            offsetAfter = offset;
            if (offset.getOffsetEnd().after(end)) {
                offsets.addAll(0, buffer);
            }
            break;
        }
        buffer.addLast(offset);
        offsets.removeFirst();
    } 
    int rectStart;
    int rectEnd;
    if (offsetAfter == null) {
        rectEnd = getChartModel().getBounds().width;
    } else
        if (offsetAfter.getOffsetEnd().equals(end)) {
            rectEnd = offsetAfter.getOffsetPixels();
        } else {
            rectEnd = -1;
        }

    if (offsetBefore == null) {
        rectStart = 0;
    } else
        if (offsetBefore.getOffsetEnd().equals(start)) {
            rectStart = offsetBefore.getOffsetPixels();
        } else {
            rectStart = -1;
        }

    if ((rectStart == (-1)) || (rectEnd == (-1))) {
        return createRectangle(getDefaultOffsetsInRange(offsetBefore, offsetAfter), start, end, ypos);
    }
    GraphicPrimitiveContainer.Rectangle nextRect = getPrimitiveContainer().createRectangle(rectStart, ypos, (rectEnd - rectStart), getConfig().getRowHeight());
    return nextRect;
}