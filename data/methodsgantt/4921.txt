// public int _getUnitCount(TimeUnit unit) {
// if (unit.isConstructedFrom((TimeUnit)myLowestFrameable)) {
// UnitInfo info = calculateInfo(myHighestFrameable, myEndDate);
// if (unit==myHighestFrameable) {
// return info.myRoundedCount;
// }
// else if (unit.isConstructedFrom((TimeUnit)myHighestFrameable)) {
// int atomCount = unit.getAtomCount((TimeUnit)myHighestFrameable);
// return (info.myRoundedCount/atomCount) +
// (info.myRoundedCount%atomCount==0 ? 0 : 1);
// }
// else {
// int atomCount1 = ((TimeUnit)myHighestFrameable).getAtomCount(unit);
// int count = info.myTruncatedCount*atomCount1;
// if (info.myRoundedCount>info.myTruncatedCount) {
// UnitInfo lowestInfo = calculateInfo(myLowestFrameable, info.lastDate);
// int atomCount2 = unit.getAtomCount((TimeUnit)myLowestFrameable);
// count += lowestInfo.myRoundedCount/atomCount2 +
// (lowestInfo.myRoundedCount%atomCount2==0 ? 0 : 1);
// }
// return count;
// }
// }
// else {
// UnitInfo lowestInfo = calculateInfo(myLowestFrameable, myEndDate);
// int atomCount = ((TimeUnit)myLowestFrameable).getAtomCount(unit);
// return atomCount*lowestInfo.myRoundedCount;
// }
// }
// 
// private UnitInfo calculateInfo(DateFrameable frameable, Date date) {
// Date lastDate = date;
// int count = 0;
// for (;date.compareTo(myStartDate)>0; count++) {
// lastDate = date;
// date = frameable.jumpLeft(date);
// }
// int truncatedCount = date.compareTo(myStartDate)<0 ? count-1 : count;
// return new UnitInfo(truncatedCount, count, lastDate);
// }
// private Date shiftDate(Date currentDate, TimeUnit timeUnit, int
// unitCount) {
// Calendar c = (Calendar) myCalendar.clone();
// c.setTime(currentDate);
// int calendarField = getCalendarField(timeUnit);
// int currentValue = c.get(calendarField);
// clearFields(c, timeUnit);
// c.add(calendarField, unitCount);
// return c.getTime();
// }
// 
// private void clearFields(Calendar c, TimeUnit topUnit) {
// for (TimeUnit currentUnit = topUnit; currentUnit!=null; currentUnit =
// currentUnit.getDirectAtomUnit()) {
// int calendarField = getCalendarField(currentUnit);
// c.clear(calendarField);
// c.getTime();
// }
// }
// 
// private int getCalendarField(TimeUnit timeUnit) {
// Integer field = (Integer) ourUnit2field.get(timeUnit);
// return field.intValue();
// }
public Date getStartDate() {
    return myStartDate;
}