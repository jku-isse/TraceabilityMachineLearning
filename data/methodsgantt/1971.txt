/**
 * Copies an arbitrary rectangular region of the RenderedImage
 * into a caller-supplied WritableRaster.  The region to be
 * computed is determined by clipping the bounds of the supplied
 * WritableRaster against the bounds of the image.  The supplied
 * WritableRaster must have a SampleModel that is compatible with
 * that of the image.
 *
 * <p> If the raster argument is null, the entire image will
 * be copied into a newly-created WritableRaster with a SampleModel
 * that is compatible with that of the image.
 *
 * @param dest
 * 		a WritableRaster to hold the returned portion of
 * 		the image.
 * @return a reference to the supplied WritableRaster, or to a
new WritableRaster if the supplied one was null.
 */
public WritableRaster copyData(WritableRaster dest) {
    Rectangle bounds;
    Raster tile;
    if (dest == null) {
        bounds = getBounds();
        Point p = new Point(minX, minY);
        /* A SampleModel to hold the entire image. */
        SampleModel sm = sampleModel.createCompatibleSampleModel(width, height);
        dest = Raster.createWritableRaster(sm, p);
    } else {
        bounds = dest.getBounds();
    }
    int startX = XToTileX(bounds.x);
    int startY = YToTileY(bounds.y);
    int endX = XToTileX((((bounds.x) + (bounds.width)) - 1));
    int endY = YToTileY((((bounds.y) + (bounds.height)) - 1));
    for (int j = startY; j <= endY; j++) {
        for (int i = startX; i <= endX; i++) {
            tile = getTile(i, j);
            Rectangle intersectRect = bounds.intersection(tile.getBounds());
            Raster liveRaster = tile.createChild(intersectRect.x, intersectRect.y, intersectRect.width, intersectRect.height, intersectRect.x, intersectRect.y, null);
            /* WritableRaster.setDataElements takes into account of
            inRasters minX and minY and add these to x and y. Since
            liveRaster has the origin at the correct location, the
            following call should not again give these coordinates in
            places of x and y.
             */
            dest.setDataElements(0, 0, liveRaster);
        }
    }
    return dest;
}