/**
 * Constructor
 */
public GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {
    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);
    this.setBackground(Color.WHITE);
    myTaskManager = taskManager;
    myUndoManager = undoManager;
    // 
    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());
    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {
        public void optionsChanged() {
            repaint();
        }
    });
    getViewState().addStateListener(myChartModel);
    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());
    myTaskManager.addTaskListener(new TaskListenerAdapter() {
        private boolean isRepaintPending;

        public void taskScheduleChanged(TaskScheduleEvent e) {
            boolean needRepaint = !(isRepaintPending);
            isRepaintPending = true;
            adjustDependencies(((Task) (e.getSource())));
            if (needRepaint) {
                repaint();
                isRepaintPending = false;
            }
        }

        public void dependencyAdded(TaskDependencyEvent e) {
            adjustDependencies(e.getDependency().getDependee());
            repaint();
        }

        public void dependencyRemoved(TaskDependencyEvent e) {
            repaint();
        }

        private void adjustDependencies(Task task) {
            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();
            if (!(alg.isRunning())) {
                try {
                    alg.run(task);
                } catch (TaskDependencyException e) {
                    if (!(GPLogger.log(e))) {
                        e.printStackTrace(System.err);
                    }
                    getUIFacade().showErrorDialog(e);
                }
                // appli.setQuickSave (true);
            }
        }
    });
    // date = new GanttCalendar();
    // 
    // date.setDay(1);
    this.tree = ttree;
    margY = 0;
    appli = app;
    // creation of the different color use to paint
    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);
    myTableHeader = tree.getTreeTable().getTable().getTableHeader();
    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);
    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());
}