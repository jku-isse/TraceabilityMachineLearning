private void loadAllocation(Attributes attrs) throws FileFormatException {
    String aName;
    int taskId = 0;
    int resourceId = 0;
    float load = 0;
    boolean coordinator = false;
    String taskIdAsString = attrs.getValue("task-id");
    String resourceIdAsString = attrs.getValue("resource-id");
    String loadAsString = attrs.getValue("load");
    String coordinatorAsString = attrs.getValue("responsible");
    String rolePersistendIDString = attrs.getValue("function");
    if ((taskIdAsString == null) || (resourceIdAsString == null)) {
        throw new FileFormatException("Failed to load <allocation> tag: task or resource identifier is missing");
    }
    try {
        taskId = Integer.parseInt(taskIdAsString);
        resourceId = Integer.parseInt(resourceIdAsString);
        if (loadAsString != null) {
            load = Float.parseFloat(loadAsString);
        }
        if (coordinatorAsString != null) {
            coordinator = Boolean.valueOf(coordinatorAsString).booleanValue();
        }
    } catch (NumberFormatException e) {
        throw new FileFormatException("Failed to load <allocation> tag: one of attribute values is invalid", e);
    }
    // if no load is specified I assume 100% load
    // this should only be the case if old files
    // were loaded.
    if (load == 0) {
        load = 100;
    }
    HumanResource human = ((HumanResource) (getResourceManager().getById(resourceId)));
    if (human == null) {
        throw new FileFormatException((("Human resource with id=" + resourceId) + " not found"));
    }
    Task task = getTaskManager().getTask(taskId);
    if (task == null) {
        throw new FileFormatException((("Task with id=" + taskId) + " not found"));
    }
    // TaskMutator mutator = task.createMutator();
    // ResourceAssignment assignment = mutator.addResource(human);
    // assignment.setLoad(load);
    // mutator.commit();
    ResourceAssignment assignment = task.getAssignmentCollection().addAssignment(human);
    try {
        if (rolePersistendIDString != null)
            myLateAssigmnent2roleBinding.put(assignment, rolePersistendIDString);

    } catch (NumberFormatException e) {
        System.out.println(("ERROR in parsing XML File function id is not numeric: " + (e.toString())));
    }
    assignment.setLoad(load);
    assignment.setCoordinator(coordinator);
}