public void move(Task whatMove, Task whereMove) {
    DefaultMutableTreeNode targetNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whereMove)));
    DefaultMutableTreeNode movedNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whatMove)));
    if (movedNode != null) {
        TreePath movedPath = new TreePath(movedNode.getPath());
        boolean wasSelected = myTree.getJTree().getSelectionModel().isPathSelected(movedPath);
        if (wasSelected) {
            myTree.getJTree().getSelectionModel().removeSelectionPath(movedPath);
        }
        myTree.getModel().removeNodeFromParent(movedNode);
        myTree.getModel().insertNodeInto(movedNode, targetNode, targetNode.getChildCount());
        if (wasSelected) {
            movedPath = new TreePath(movedNode.getPath());
            myTree.getJTree().getSelectionModel().addSelectionPath(movedPath);
        }
    } else {
        myTree.addObjectWithExpand(whatMove, targetNode);
    }
    getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().run(whatMove);
    try {
        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();
    } catch (TaskDependencyException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
    }
}