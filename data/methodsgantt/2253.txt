FtpDocument(String urlAsString, StringOption ftpUser, StringOption ftpPassword) {
    assert urlAsString != null;
    try {
        URI url = new URI(urlAsString);
        String userInfo = url.getUserInfo();
        if ((userInfo == null) || (FtpDocument.EMPTY_STRING.equals(userInfo))) {
            StringBuffer buf = new StringBuffer();
            if ((ftpUser.getValue()) != null) {
                buf.append(ftpUser.getValue());
            }
            if ((ftpPassword.getValue()) != null) {
                buf.append(:).append(ftpPassword.getValue());
            }
            myURI = new URI("ftp", buf.toString(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getFragment());
        } else {
            myURI = url;
        }
        urlAsString = myURI.toString();
        myURI.toURL().openConnection().connect();
    } catch (URISyntaxException e) {
        if (!(GPLogger.log(e))) {
            e.printStackTrace(System.err);
        }
        throw new RuntimeException(("Failed to create FTP document addressed by URL=" + urlAsString), e);
    } catch (MalformedURLException e) {
        if (!(GPLogger.log(e))) {
            e.printStackTrace();
        }
        throw new RuntimeException(("Failed to create FTP document addressed by URL=" + urlAsString), e);
    } catch (IOException e) {
        if (!(GPLogger.log(e))) {
            e.printStackTrace();
        }
        throw new RuntimeException(("Failed to create FTP document addressed by URL=" + urlAsString), e);
    }
}