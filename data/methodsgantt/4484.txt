private void importData(Task importRoot, Task root, Map original2imported) {
    Task[] nested = importRoot.getManager().getTaskHierarchy().getNestedTasks(importRoot);
    for (int i = (nested.length) - 1; i >= 0; i--) {
        Task nextImported = createTask();
        registerTask(nextImported);
        nextImported.setName(nested[i].getName());
        nextImported.setStart(nested[i].getStart().Clone());
        nextImported.setDuration(nested[i].getDuration());
        nextImported.setMilestone(nested[i].isMilestone());
        nextImported.setColor(nested[i].getColor());
        nextImported.setShape(nested[i].getShape());
        nextImported.setCompletionPercentage(nested[i].getCompletionPercentage());
        nextImported.setNotes(nested[i].getNotes());
        nextImported.setTaskInfo(nested[i].getTaskInfo());
        nextImported.setExpand(nested[i].getExpand());
        if ((nested[i].getThird()) != null) {
            nextImported.setThirdDate(nested[i].getThird().Clone());
            nextImported.setThirdDateConstraint(nested[i].getThirdDateConstraint());
        }
        myCustomColumnStorage.processNewTask(nextImported);
        CustomColumnsValues customValues = nested[i].getCustomValues();
        Collection customColums = myCustomColumnStorage.getCustomColums();
        for (Iterator it = customColums.iterator(); it.hasNext();) {
            CustomColumn nextColumn = ((CustomColumn) (it.next()));
            Object value = customValues.getValue(nextColumn.getName());
            if (value != null) {
                try {
                    nextImported.getCustomValues().setValue(nextColumn.getName(), value);
                } catch (CustomColumnsException e) {
                    if (!(GPLogger.log(e))) {
                        e.printStackTrace(System.err);
                    }
                }
            }
        }
        // System.out.println ("Import : " + nextImported.getTaskID() + "
        // -->> " + nextImported.getName());
        original2imported.put(nested[i], nextImported);
        // nextImported.move(root);
        getTaskHierarchy().move(nextImported, root);
        importData(nested[i], nextImported, original2imported);
    }
}