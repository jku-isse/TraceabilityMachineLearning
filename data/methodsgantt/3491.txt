/**
 * get the task box.
 */
public GanttXFIGSaver.BoxObject task2box(GanttTask task, int depthval, int number, boolean isLeaf) {
    // boxObject: total box
    // boxObjectPct: black line in center of box object
    // min box width: 1.
    // object to return
    GanttXFIGSaver.BoxObject boxObject = new GanttXFIGSaver.BoxObject();
    if (isLeaf) {
        boxObject.sub_type = 2;// box

        boxObject.npoints = 5;
    } else {
        boxObject.sub_type = 3;// polygon

        boxObject.npoints = 7;
    }
    boxObject.depth = depthval;
    if (!isLeaf)
        boxObject.depth -= 2;
    // ?????

    // See BoxObject class for other default values
    // Construct box corners
    float boxLen = Math.max(1.0F, ((task.getLength()) * (scale)));
    float boxLenPct = Math.max(1.0F, ((boxLen * (task.getCompletionPercentage())) / 100.0F));
    float boxHeight = 1200.0F / 8.0F;
    float pLo = boxHeight * 0.25F;
    float pHi = boxHeight * 0.75F;
    float[] pointsPct = new float[]{ 0, pLo, boxLenPct, pLo, boxLenPct, pHi, 0, pHi, 0, pLo };
    if ((boxObject.sub_type) == 2) {
        boxObject.points = new float[10];
        boxObject.points[0] = 0;
        boxObject.points[1] = 0;
        boxObject.points[2] = boxLen;
        boxObject.points[3] = 0;
        boxObject.points[4] = boxLen;
        boxObject.points[5] = boxHeight;
        boxObject.points[6] = 0;
        boxObject.points[7] = boxHeight;
        boxObject.points[8] = 0;
        boxObject.points[9] = 0;
    } else {
        float boxLo = boxHeight / 4;
        boxObject.points = new float[14];
        boxObject.points[0] = 0;
        boxObject.points[1] = boxHeight;
        boxObject.points[2] = 0;
        boxObject.points[3] = 0;
        boxObject.points[4] = boxLen;
        boxObject.points[5] = 0;
        boxObject.points[6] = boxLen;
        boxObject.points[7] = boxHeight;// top bow

        boxObject.points[8] = boxLen;
        boxObject.points[9] = boxLo;
        boxObject.points[10] = 0;
        boxObject.points[11] = boxLo;
        boxObject.points[10] = 0;
        boxObject.points[13] = boxHeight;
    }
    int blen = boxObject.points.length;
    // shift to this row
    float xShift = 0;
    float yShift = ((1200.0F * 0.25F) * (((float) (number)) + 4)) + (1200.0F / 16.0F);
    /* boxObject.points(2:2:blen) += yShift; boxObject.points(1:2:blen) +=
    xShift;
     */
    for (int i = 1; i < blen; i += 2)
        boxObject.points[i] += yShift;

    for (int i = 0; i < blen; i += 2)
        boxObject.points[i] += xShift;

    // pointsPct(2:2:10) += yShift;
    // pointsPct(1:2:9) += xShift;
    // boxObjectPct = boxObject; // percent completed
    // boxObjectPct.points = pointsPct;
    // boxObjectPct.npoints = 5;
    // boxObjectPct.area_fill = 20;
    // boxObjectPct.fill_color = 0;
    // shift boxes by start date
    /* boxObject.points(1:2:blen) += task.start*boxScale; */
    for (int i = 0; i < blen; i += 2)
        boxObject.points[i] += (task.getStart().diff(dateShift)) * (scale);

    // boxObjectPct.points(1:2:9) += task.start*boxScale;
    // now shift again by text width (must be calculated and set in
    // task.boxindent)
    /* boxObject.points(1:2:blen) += task.boxindent; */
    for (int i = 0; i < blen; i += 2)
        boxObject.points[i] += (fTtextwidth) + 120;

    // boxObjectPct.points(1:2:9) += task.boxindent;
    // boxObjectPct.depth--;
    // fix angle brackets in polygon object
    /* if(boxObject.sub_type == 3) { angwid = min(60,boxLen/2);
    boxObject.points([9,11]) += [-angwid,angwid]; }
     */
    if ((boxObject.sub_type) == 3) {
        float angwid = Math.min(60, (boxLen / 2));
        boxObject.points[9] += -angwid;
        boxObject.points[11] += angwid;
    }
    return boxObject;
}