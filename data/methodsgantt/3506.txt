public boolean load(InputStream inStream) throws IOException {
    // Use an instance of ourselves as the SAX event handler
    myTaskManager.getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().setEnabled(false);
    myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().setEnabled(false);
    DefaultHandler handler = new GanttXMLOpen.GanttXMLParser();
    // Use the default (non-validating) parser
    SAXParserFactory factory = SAXParserFactory.newInstance();
    try {
        // Parse the input
        SAXParser saxParser;
        saxParser = factory.newSAXParser();
        saxParser.parse(inStream, handler);
    } catch (ParserConfigurationException e) {
        if (!(GPLogger.log(e))) {
            e.printStackTrace(System.err);
        }
        throw new IOException(e.getMessage());
    } catch (SAXException e) {
        if (!(GPLogger.log(e))) {
            e.printStackTrace(System.err);
        }
        throw new IOException(e.getMessage());
    }
    myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().setEnabled(true);
    myTaskManager.getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().setEnabled(true);
    // treePanel.refreshAllId(treePanel.getRoot());
    // treePanel.forwardScheduling();
    if (!(bMerge)) {
        myUIFacade.setViewIndex(viewIndex);
        myUIFacade.setGanttDividerLocation(ganttDividerLocation);
        if ((resourceDividerLocation) != 0)
            myUIFacade.setResourceDividerLocation(resourceDividerLocation);

    }
    return true;
}