/**
 * draw the panel
 */
public void paintComponent(Graphics g) {
    super.paintComponent(g);
    int sizex = getWidth();
    int sizey = getHeight();
    // Display the legend at top
    g.setColor(Color.white);
    g.fillRect(0, 0, sizex, sizey);
    // two colors uses
    Color gris = new Color(((float) (0.827)), ((float) (0.827)), ((float) (0.827)));
    Color bleu = new Color(((float) (0.29)), ((float) (0.349)), ((float) (0.643)));
    g.setColor(bleu);
    g.fillRect(0, 0, sizex, 15);
    String[] dayWeek = date.getDayWeekLanguage();
    g.setColor(Color.white);
    for (int i = 0; i < (dayWeek.length); i++) {
        String dw = dayWeek[((i + 1) % 7)];
        g.drawString(dw.substring(0, ((dw.length()) < 3 ? dw.length() : 3)), (((i * sizex) / 7) + 3), 12);
    }
    GanttCalendar tmpdate = date.Clone();
    TimeZone timeZone = tmpdate.getTimeZone();
    tmpdate.setDay(1);
    String d = tmpdate.getdayWeek();
    while (!(d.equals(language.getDay(1)))) {
        tmpdate.go(Calendar.DATE, (-1));
        d = tmpdate.getdayWeek();
    } 
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 7; j++) {
            if ((tmpdate.getMonth()) != (date.getMonth()))
                g.setColor(gris);
            else {
                if ((tmpdate.getDay()) == (date.getDay())) {
                    g.setColor(bleu);
                    g.fillRect((((j * sizex) / 7) - 1), (15 + (i * 15)), (sizex / 7), 15);
                    g.setColor(Color.white);
                } else
                    g.setColor(Color.black);

            }
            g.drawString(("" + (tmpdate.getDate())), (((j * sizex) / 7) + 4), ((30 + (i * 15)) - 3));
            tmpdate.go(Calendar.DATE, 1);
            if ((timeZone != null) && (timeZone.inDaylightTime(tmpdate.getTime()))) {
                tmpdate.add(Calendar.MILLISECOND, timeZone.getDSTSavings());
                timeZone = null;
            }
        }
    }
}