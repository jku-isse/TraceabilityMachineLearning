/**
 * Paste the node and its child node to current selected position
 */
public void pasteNode() {
    if ((cpNodesArrayList) != null) {
        final GanttTree2 gt2 = this;
        getUndoManager().undoableEdit("Paste", new Runnable() {
            public void run() {
                TaskNode current = ((TaskNode) (treetable.getTree().getLastSelectedPathComponent()));
                List tasksList = new ArrayList();
                if (current == null) {
                    current = rootNode;
                }
                boolean isAProjectTaskChild = false;
                DefaultMutableTreeNode father = ((DefaultMutableTreeNode) (current.getParent()));
                // if the task as a projectTask parent
                while (father != null) {
                    if (((Task) (father.getUserObject())).isProjectTask()) {
                        isAProjectTaskChild = true;
                    }
                    father = ((DefaultMutableTreeNode) (father.getParent()));
                } 
                mapOriginalIDCopyID = new HashMap();
                // copyID = new ArrayList ();
                // pasteID = new ArrayList ();
                TaskManagerImpl tmi = ((TaskManagerImpl) (getTaskManager()));
                int MaxID = tmi.getMaxID();
                // for(int i=0; i < cpNodesArrayList.size(); i++) {
                for (int i = (cpNodesArrayList.size()) - 1; i >= 0; i--) {
                    if (isAProjectTaskChild)
                        ((Task) (((TaskNode) (cpNodesArrayList.get(i))).getUserObject())).setProjectTask(false);

                    /* this will add new custom columns to the newly
                    created task.
                     */
                    TreeNode sel = getSelectedTaskNode();
                    TreeNode parent = null;
                    if (sel != null) {
                        parent = sel.getParent();
                        if (parent != null)
                            where = parent.getIndex(sel);

                    }
                    tasksList.add(((Task) (insertClonedNode((current == (rootNode) ? current : ((DefaultMutableTreeNode) (current.getParent()))), ((DefaultMutableTreeNode) (cpNodesArrayList.get(i))), ((where) + 1), true).getUserObject())));
                    (nbTasks)++;
                }
                if ((cpDependencies) != null) {
                    for (int i = 0; i < (cpDependencies.size()); i++) {
                        // for(int i=cpDependencies.size()-1; i >= 0; i--) {
                        TaskDependency td = ((TaskDependency) (cpDependencies.get(i)));
                        Task dependee = td.getDependee();
                        Task dependant = td.getDependant();
                        TaskDependencyConstraint constraint = td.getConstraint();
                        for (int j = 0; j < (allNodes.size()); j++) {
                            for (int k = 0; k < (allNodes.size()); k++) {
                                if ((dependant.equals(((Task) (((DefaultMutableTreeNode) (allNodes.get(j))).getUserObject())))) && (dependee.equals(((Task) (((DefaultMutableTreeNode) (allNodes.get(k))).getUserObject()))))) {
                                    try {
                                        TaskDependency newDependency = getTaskManager().getDependencyCollection().createDependency(getTaskManager().getTask(((Integer) (mapOriginalIDCopyID.get(new Integer(dependant.getTaskID())))).intValue()), getTaskManager().getTask(((Integer) (mapOriginalIDCopyID.get(new Integer(dependee.getTaskID())))).intValue()), getTaskManager().createConstraint(constraint.getID()));
                                        newDependency.setDifference(td.getDifference());
                                        newDependency.setHardness(td.getHardness());
                                    } catch (TaskDependencyException e) {
                                        myUIFacade.showErrorDialog(e);
                                    }
                                }
                            }
                        }
                    }
                }
                selectTasks(tasksList);
            }
        });
        appli.refreshProjectInfos();
    }
}