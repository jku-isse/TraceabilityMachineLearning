/**
 * Cut the current selected tree node
 */
public void cutSelectedNode() {
    final TreePath currentSelection = treetable.getTree().getSelectionPath();
    final DefaultMutableTreeNode[] cdmtn = getSelectedNodes();
    if (currentSelection != null) {
        getUndoManager().undoableEdit("Cut", new Runnable() {
            public void run() {
                cpNodesArrayList = new ArrayList();
                cpAllDependencies(cdmtn);
                GanttTask taskFather = null;
                DefaultMutableTreeNode father = null;
                DefaultMutableTreeNode current = null;
                for (int i = 0; i < (cdmtn.length); i++) {
                    current = getSelectedTaskNode();
                    if (current != null) {
                        cpNodesArrayList.add(((DefaultMutableTreeNode) (cdmtn[i])));
                        father = /* ttask */
                        getFatherNode(current);
                        where = father.getIndex(current);
                        removeCurrentNode(current);
                        current.setParent(father);
                        taskFather = ((GanttTask) (father.getUserObject()));
                        AdjustTaskBoundsAlgorithm alg = getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm();
                        alg.run(taskFather);
                        // taskFather.refreshDateAndAdvancement(this);
                        father.setUserObject(taskFather);
                    }
                }
                if ((father.getChildCount()) == 0)
                    ((Task) (father.getUserObject())).setProjectTask(false);

                if (taskFather != null) {
                    selectTask(taskFather, false);
                }
                area.repaint();
            }
        });
        appli.repaint();
    }
}