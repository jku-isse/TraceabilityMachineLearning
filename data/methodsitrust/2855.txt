/**
 * Return the number of failures from resetting a password, given an IP address.
 *
 * @param ipAddr
 * 		An IP address for the associated attempt as a String.
 * @return An int representing the number of failures.
 * @throws DBException
 * 		
 */
public int getResetPasswordFailures(String ipAddr) throws DBException {
    Connection conn = null;
    PreparedStatement ps = null;
    try {
        conn = factory.getConnection();
        ps = conn.prepareStatement("SELECT * FROM resetpasswordfailures WHERE IPADDRESS=?");
        ps.setString(1, ipAddr);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            // if were more than X minutes out, clear the failure count
            if (((System.currentTimeMillis()) - (rs.getTimestamp("lastFailure").getTime())) > (AuthDAO.LOGIN_TIMEOUT)) {
                updateResetFailuresToZero(ipAddr, conn);
                return 0;
            } else {
                return rs.getInt("failureCount");
            }
        } else {
            insertResetPasswordRow(ipAddr, 0, conn);
            return 0;
        }
    } catch (SQLException e) {
        e.printStackTrace();
        throw new DBException(e);
    } finally {
        DBUtil.closeConnection(conn, ps);
    }
}