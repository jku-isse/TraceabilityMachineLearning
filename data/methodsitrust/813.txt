/**
 * Resets the password for the given mid
 *
 * @param mid
 * 		of the user to have their password reset
 * @param role
 * 		what role the user has in iTrust
 * @param answer
 * 		answers to their security question
 * @param password
 * 		their password
 * @param confirmPassword
 * 		their password again
 * @param ipAddr
 * 		the ip address the request is coming from
 * @return status message
 * @throws FormValidationException
 * 		
 * @throws DBException
 * 		
 * @throws iTrustException
 * 		
 */
public String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {
    Role r = authDAO.getUserRole(mid);
    try {
        Role.parse(role);
    } catch (IllegalArgumentException e) {
        return "Invalid role";
    }
    if (r.equals(Role.ADMIN))
        return "This role cannot be changed here";

    if (!(r.equals(Role.parse(role))))
        return "Role mismatch";

    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {
        return "Too many retries";
    }
    try {
        validatePassword(password, confirmPassword);
        if (answer.equals(authDAO.getSecurityAnswer(mid))) {
            authDAO.resetPassword(mid, password);
            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));
            return "Password changed";
        } else {
            authDAO.recordResetPasswordFailure(ipAddr);
            return "Answer did not match";
        }
    } catch (DBException e) {
        return "Error in validation of security answer";
    }
}