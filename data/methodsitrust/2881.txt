/**
 * Gets a local zip code count and regional count of a specified diagnosis code
 *
 * @param icdCode
 * 		The diagnosis code
 * @param zipCode
 * 		The zip code to evaluate
 * @param lower
 * 		The starting date
 * @param upper
 * 		The ending date
 * @return A bean containing the local and regional counts
 * @throws DBException
 * 		
 */
public DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {
    Connection conn = null;
    PreparedStatement ps = null;
    DiagnosisStatisticsBean dsBean = null;
    try {
        conn = factory.getConnection();
        ps = conn.prepareStatement("SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? ");
        ps.setString(1, icdCode);
        ps.setString(2, zipCode);
        ps.setTimestamp(3, new Timestamp(lower.getTime()));
        // add 1 days worth to include the upper
        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));
        ResultSet rs = ps.executeQuery();
        rs.last();
        int local = rs.getRow();
        ps = conn.prepareStatement("SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? ");
        ps.setString(1, icdCode);
        ps.setString(2, ((zipCode.substring(0, 3)) + "%"));
        ps.setTimestamp(3, new Timestamp(lower.getTime()));
        // add 1 days worth to include the upper
        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));
        rs = ps.executeQuery();
        rs.last();
        int region = rs.getRow();
        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);
    } catch (SQLException e) {
        e.printStackTrace();
        throw new DBException(e);
    } finally {
        DBUtil.closeConnection(conn, ps);
    }
    return dsBean;
}