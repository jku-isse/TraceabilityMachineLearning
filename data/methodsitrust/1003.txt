/**
 * Gets the counts of local and regional diagnoses for the specified input
 *
 * @param lowerDate
 * 		The beginning date for the time range
 * @param upperDate
 * 		The ending date for the time range
 * @param icdCode
 * 		The diagnosis code to examine
 * @param zip
 * 		The zip code to examine
 * @return A bean containing the local and regional counts
 * @throws FormValidationException
 * 		
 * @throws DBException
 * 		
 * @throws iTrustException
 * 		
 */
public DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {
    DiagnosisStatisticsBean dsBean;
    try {
        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))
            return null;

        Date lower = new SimpleDateFormat("MM/dd/yyyy").parse(lowerDate);
        Date upper = new SimpleDateFormat("MM/dd/yyyy").parse(upperDate);
        if (lower.after(upper))
            throw new FormValidationException("Start date must be before end date!");

        if (!(zip.matches("([0-9]{5})|([0-9]{5}-[0-9]{4})")))
            throw new FormValidationException("Zip Code must be 5 digits!");

        boolean validCode = false;
        for (DiagnosisBean diag : getDiagnosisCodes()) {
            if (diag.getICDCode().equals(icdCode))
                validCode = true;

        }
        if (validCode == false) {
            throw new FormValidationException("ICDCode must be valid diagnosis!");
        }
        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);
    } catch (ParseException e) {
        throw new FormValidationException("Enter dates in MM/dd/yyyy");
    }
    return dsBean;
}