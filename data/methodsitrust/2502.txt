/**
 * This method parses the list of Adverse Event Beans to initialize the
 * chart dataset.
 *
 * @param Map
 * 		parameters passed from CeWolf (though not actually used locally)
 * @return A dataset containing information to be graphed
 * @throws DatasetProduceException
 * 		
 */
public Object produceDataset(Map params) throws DatasetProduceException {
    // The DefaultCategoryDataset is used for bar charts.
    // This dataset class may change based on the type of chart you wish to produce.
    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {
        /**
         *
         */
        private static final long serialVersionUID = 1L;

        /**
         *
         *
         * @see java.lang.Object#finalize()
         */
        @Override
        protected void finalize() throws Throwable {
            super.finalize();
        }
    };
    Calendar cur = Calendar.getInstance();
    int curQuarter = (cur.get(Calendar.MONTH)) / 3;
    for (HealthRecord hRecord : healthRecords) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(hRecord.getDateRecorded());
        int yearOfReport = cal.get(Calendar.YEAR);
        int monthOfReport = cal.get(Calendar.MONTH);
        int quarterOfReport = monthOfReport / 3;
        int quarter = (((historyLength) - (4 * ((cur.get(Calendar.YEAR)) - yearOfReport))) - (curQuarter - quarterOfReport)) - 1;
        // Skip entry if it is out of the history range.
        if (quarter < 0)
            continue;

        // Calculate the average for the quarter.
        double newValue = 0;
        if (codeName.equals("Height"))
            newValue = hRecord.getHeight();
        else
            if (codeName.equals("Weight"))
                newValue = hRecord.getWeight();
            else
                if (codeName.equals("BMI"))
                    newValue = ((hRecord.getWeight()) * 703) / ((hRecord.getHeight()) * (hRecord.getHeight()));



        values[quarter] = (((values[quarter]) * (numEntries[quarter])) + newValue) / ((numEntries[quarter]) + 1);
        (numEntries[quarter])++;
    }
    // For each month, add the monthly values to the dataset for
    // producing the chart.
    for (int i = 0; i < (historyLength); i++) {
        if ((values[i]) > 0) {
            dataset.addValue(values[i], codeName, quarters[i]);
        }
    }
    return dataset;
}