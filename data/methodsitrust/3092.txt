/**
 * Returns patient data for a given HCP
 *
 * @return 
 * @throws DBException
 * 		
 */
public List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) throws DBException {
    Connection conn = null;
    PreparedStatement ps = null;
    try {
        conn = factory.getConnection();
        ps = conn.prepareStatement("SELECT * FROM remotemonitoringlists WHERE HCPMID=? ORDER BY PatientMID");
        ps.setLong(1, loggedInMID);
        ResultSet patientRS = ps.executeQuery();
        ps = conn.prepareStatement("SELECT * FROM remotemonitoringdata WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC");
        ResultSet dataRS = ps.executeQuery();
        List<String> patientList = new ArrayList<String>();
        while (patientRS.next()) {
            patientList.add(((patientRS.getLong("PatientMID")) + ""));
        } 
        List<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);
        int i;
        int j;
        // Go through all patients and remove any that arent monitored by this HCP
        for (i = 0; i < (dataList.size()); i++) {
            if (!(patientList.contains(((dataList.get(i).getPatientMID()) + "")))) {
                dataList.remove(i);
                i--;
            }
        }
        // Add values in patient list with no data for today to list.
        boolean itsThere;
        for (i = 0; i < (patientList.size()); i++) {
            itsThere = false;
            for (j = 0; j < (dataList.size()); j++) {
                if (((dataList.get(j).getPatientMID()) + "").equals(patientList.get(i))) {
                    itsThere = true;
                    break;
                }
            }
            if (!itsThere) {
                dataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));
            }
        }
        return dataList;
    } catch (SQLException e) {
        e.printStackTrace();
        throw new DBException(e);
    } finally {
        DBUtil.closeConnection(conn, ps);
    }
}