/**
 * Returns all the survey data associated with a given hospital and a certain specialty.
 *
 * @param hospitalID
 * 		The unique ID of the iTrust hospital we are querying about.
 * @param specialty
 * 		A string representing the specialty we are interested in.
 * @return A java.util.List of SurveyResultBeans.
 * @throws DBException
 * 		
 */
public List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {
    Connection conn = null;
    PreparedStatement ps = null;
    StringBuffer sql = new StringBuffer();
    sql.append("select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, ");
    sql.append("h.hosid hospitalID, ");
    sql.append("avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, ");
    sql.append("avg(s.ExamRoomMinutes) AvgExamRoomMinutes, ");
    sql.append("avg(s.VisitSatisfaction) AvgVisitSatisfaction, ");
    sql.append("avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, ");
    sql.append("count(*) / ");
    sql.append("	(select count(*) from personnel p1, officevisits v1, hcpassignedhos h1 ");
    sql.append("	 where v1.hcpid = p1.mid ");
    sql.append("	 and v1.hcpid = h1.hcpid ");
    sql.append("	 and h1.hosid = ? ");
    sql.append("	 and p1.mid = p.mid) * 100 PercentSatisfactionResults ");
    sql.append("from ovsurvey s, personnel p, officevisits v, hcpassignedhos h ");
    sql.append("where s.visitid = v.id ");
    sql.append("and v.hcpid = p.mid ");
    sql.append("and v.hcpid = h.hcpid ");
    sql.append("and h.hosid = ? ");
    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))
        sql.append("and p.specialty = ?");

    sql.append("group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID ");
    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))
        sql.append(", p.specialty ");

    sql.append("order by p.mid ");
    try {
        conn = factory.getConnection();
        ps = conn.prepareStatement(sql.toString());
        ps.setString(1, hospitalID);
        ps.setString(2, hospitalID);
        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY))) {
            ps.setString(3, specialty);
        }
        return loader.loadList(ps.executeQuery());
    } catch (SQLException e) {
        e.printStackTrace();
        throw new DBException(e);
    } finally {
        DBUtil.closeConnection(conn, ps);
    }
}