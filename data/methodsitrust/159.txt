/**
 * Builds the mappings between the local arrays and the CSV file
 * Also checks for missing required, duplicate, and invalid fields
 *
 * @param CSVHeader
 * 		
 * @throws AddPatientFileExceptionTest
 * 		
 */
private void buildMappings(ArrayList<String> CSVHeader) throws AddPatientFileException {
    boolean valid;
    for (int i = 0; i < (CSVHeader.size()); i++) {
        valid = false;
        for (int j = 0; j < (requiredFields.length); j++) {
            if (CSVHeader.get(i).equalsIgnoreCase(requiredFields[j])) {
                if ((requiredFieldsMapping[j]) == null) {
                    valid = true;
                    requiredFieldsMapping[j] = i;
                } else {
                    throw new AddPatientFileException((("Duplicate field "" + (CSVHeader.get(i))) + ""!"));
                }
            }
        }
        for (int j = 0; j < (validFields.length); j++) {
            if (CSVHeader.get(i).equalsIgnoreCase(validFields[j])) {
                if ((validFieldsMapping[j]) == null) {
                    valid = true;
                    validFieldsMapping[j] = i;
                } else {
                    throw new AddPatientFileException((("Duplicate field "" + (CSVHeader.get(i))) + ""!"));
                }
            }
        }
        if (valid == false) {
            throw new AddPatientFileException((("Field "" + (CSVHeader.get(i))) + "" is invalid!"));
        }
    }
    for (int i = 0; i < (requiredFieldsMapping.length); i++) {
        if ((requiredFieldsMapping[i]) == null) {
            throw new AddPatientFileException((("Required field "" + (requiredFields[i])) + "" is missing!"));
        }
    }
}