/**
 * Returns a list of patients who need a visit for this HCP. This means:
 *
 * Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -
 * Circulatory-System Disease: [ 390.00 , 459.99 ]
 *
 * @param hcpid
 * 		The MID of the HCP in question.
 * @return A java.util.List of visit reminders.
 */
public List<VisitReminderReturnForm> getDiagnosedVisitNeeders(long hcpid) throws DBException {
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    try {
        conn = factory.getConnection();
        ps = conn.prepareStatement(("SELECT  hid, MID, lastName, firstName, phone, ICDcode, visitDate FROM " + ((((((((((((((((((((((((((((((((((((((((((((("(SELECT DISTINCT " + "  ? as hid, ") + "  p.MID as MID, ") + "  p.lastName, ") + "  p.firstName, ") + "  p.phone, ") + "  ovd.ICDcode ") + " FROM ") + "  patients p, ") + "  officevisits ov, ") + "  ovdiagnosis ovd ") + " WHERE ") + "  p.MID = ov.PatientID ") + " AND ") + "  p.DateOfDeath is null ") + " AND ") + "  ov.ID = ovd.VisitID ") + " AND ") + "  (") + "    ovd.ICDCode BETWEEN ? AND ? ") + "   OR ") + "    ovd.ICDCode BETWEEN ? AND ? ") + "   OR ") + "    ovd.ICDCode BETWEEN ? AND ? ") + "  ) ") + " AND ") + "  p.MID NOT IN ") + "   ( ") + "    SELECT p.MID FROM patients p, officevisits ov ") + "    WHERE ") + "     p.MID = ov.PatientID ") + "	 AND ") + "     ov.visitDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ") + "   ) ") + ") a ") + " INNER JOIN ") + "  ( ") + "   SELECT p.MID, MAX(ov.visitDate) as visitDate FROM patients p, officevisits ov ") + "   WHERE ") + "    p.MID = ov.PatientID ") + "   GROUP BY ") + "    p.mid ") + "  ) b ") + " USING(MID) ") + "ORDER BY ") + " lastName, firstName, MID, ICDcode ")));
        ps.setLong(1, hcpid);
        ps.setFloat(2, 250.0F);
        ps.setFloat(3, 250.99F);
        ps.setFloat(4, 390.0F);
        ps.setFloat(5, 459.99F);
        ps.setFloat(6, 493.0F);
        ps.setFloat(7, 493.99F);
        rs = ps.executeQuery();
        List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();
        VisitReminderReturnForm temp = null;
        VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();
        long lastId = -1;
        while (rs.next()) {
            if (lastId == (rs.getLong(2))) {
                patients.get(((patients.size()) - 1)).addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(6)));
            } else {
                lastId = rs.getLong(2);
                temp = loader.loadSingle(rs);
                temp.addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(6)));
                temp.addVisitFlag(new VisitFlag(VisitFlag.LAST_VISIT, rs.getString(7)));
                patients.add(temp);
            }
        } 
        return patients;
    } catch (SQLException e) {
        e.printStackTrace();
        throw new DBException(e);
    } finally {
        DBUtil.closeConnection(conn, ps);
    }
}