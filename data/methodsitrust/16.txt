/**
 * Parses the CSV file line-by-line.
 *
 * @param CSVScanner
 * 		A scanner to a CSV stream.
 * @throws CSVFormatException
 * 		
 */
private void parseCSV(Scanner CSVScanner) throws CSVFormatException {
    String currentLine;
    ArrayList<String> parsedLine = null;
    // The number of fields (columns) in the CSV file as determined by the number of headers
    int numFields = 0;
    // The current line number being processed (Used to report the line number of errors)
    int currentLineNumber = 1;
    // Attempt to read the first line (the header) from the file
    if (CSVScanner.hasNextLine()) {
        currentLine = CSVScanner.nextLine();
        CSVHeader = parseCSVLine(currentLine);
        numFields = CSVHeader.size();
        // If it does not exist (or if the file isnt a text file at all), the entire process fails
    } else {
        throw new CSVFormatException("File is not valid CSV file.");
    }
    // Read the file line-by-line and call the line parser for each line
    while (CSVScanner.hasNextLine()) {
        currentLineNumber++;
        currentLine = CSVScanner.nextLine();
        try {
            parsedLine = parseCSVLine(currentLine);
            // If the line doesnt have the right number of fields, it is ignored
            if ((parsedLine.size()) == numFields) {
                CSVData.add(parsedLine);
            } else {
                errors.addIfNotNull(("Field number mismatch on line " + currentLineNumber));
            }
            // If the line is otherwise invalid, it is also ignored
        } catch (CSVFormatException e) {
            errors.addIfNotNull((((e.getMessage()) + " on line ") + currentLineNumber));
        }
    } 
}