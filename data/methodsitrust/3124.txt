/**
 * The Most Thorough Fetch
 *
 * @param mid
 * 		MID of the logged in user
 * @param dlhcpID
 * 		MID of the users DLHCP
 * @param start
 * 		Index to start pulling entries from
 * @param range
 * 		Number of entries to retrieve
 * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry
 * @throws DBException
 * 		
 */
public List<TransactionBean> getTransactionsAffecting(long mid, long dlhcpID, Date start, int range) throws DBException {
    Connection conn = null;
    PreparedStatement ps = null;
    try {
        conn = factory.getConnection();
        ps = conn.prepareStatement((((((((("SELECT * FROM transactionlog WHERE ((timeLogged < ?) " + ("AND  (secondaryMID=? AND transactionCode " + "IN (")) + (TransactionType.patientViewableStr)) + ")) ") + "OR (loggedInMID=? AND transactionCode=?) ) ") + "AND NOT (loggedInMID=? AND transactionCode IN (")// exclude if DLHCP as specified in UC43
         + (TransactionType.dlhcpHiddenStr)) + ")) ") + "ORDER BY timeLogged DESC LIMIT 0,?"));
        ps.setString(2, (mid + ""));
        ps.setString(3, (mid + ""));
        ps.setInt(4, TransactionType.LOGIN_SUCCESS.getCode());
        ps.setTimestamp(1, new Timestamp(start.getTime()));
        ps.setLong(5, dlhcpID);
        ps.setInt(6, range);
        ResultSet rs = ps.executeQuery();
        List<TransactionBean> tbList = loader.loadList(rs);
        return tbList;
    } catch (SQLException e) {
        e.printStackTrace();
        throw new DBException(e);
    } finally {
        DBUtil.closeConnection(conn, ps);
    }
}