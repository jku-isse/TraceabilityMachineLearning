/**
 * Get a list of all HCPs visited and/or designated by by the current
 * user.  The list can optionally be filtered by the doctors last name,
 * specialty, or zip code.
 *
 * @param lastName
 * 		The last name (or a part of it) of the doctor to search
 * 		for, or null or an empty string to accept all doctors.
 * @param specialty
 * 		The specialty of the doctor to search for, or null or
 * 		an empty string to accept all doctors.
 * @param zip
 * 		The zip code of the doctor to search for, or null or an empty
 * 		string to accept all doctors.
 * @return A list of HCPVisitBeans where each represents one HCP that has
been visited or has been designated.
 * @throws iTrustException
 * 		
 */
private List<HCPVisitBean> getAllVisitedHCPs(String lastName, String specialty, String zip) throws iTrustException {
    // Visited HCPs in this case includes both HCPs visited *and* HCPs
    // designated by the patient.  These two groups are retrieved in
    // different ways, then combined.
    List<HCPVisitBean> visits = new ArrayList<HCPVisitBean>();
    try {
        List<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);
        // get most recent office visit for each provider
        LinkedHashMap<Long, OfficeVisitBean> mostRecentVisits = new LinkedHashMap<Long, OfficeVisitBean>();
        for (OfficeVisitBean ov : ovlist) {
            long id = ov.getHcpID();
            if (!(mostRecentVisits.containsKey(id))) {
                mostRecentVisits.put(id, ov);
            } else {
                OfficeVisitBean old = mostRecentVisits.get(id);
                Date ovDate = ov.getVisitDate();
                Date oldDate = old.getVisitDate();
                if (oldDate.before(ovDate)) {
                    mostRecentVisits.put(id, ov);
                }
            }
        }
        // Get visited HCPs.
        for (OfficeVisitBean ov : mostRecentVisits.values()) {
            long hcpid = ov.getHcpID();
            PersonnelBean pb = docDAO.getPersonnel(hcpid);
            if (matchPersonnel(pb, lastName, specialty, zip)) {
                HCPVisitBean visitBean = makeHCPVisitBean(pb, mostRecentVisits.get(hcpid).getVisitDateStr());
                visits.add(visitBean);
            }
        }
        // Get all designated HCPs.  Because a designated HCP may have been
        // visited, we will ensure the HCP is not already in the list.
        List<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);
        next : for (PersonnelBean pb : dhcps) {
            if (matchPersonnel(pb, lastName, specialty, zip)) {
                long hcpid = pb.getMID();
                // if HCP is already in visits list, skip here
                for (HCPVisitBean hv : visits) {
                    if ((hv.getHCPMID()) == hcpid) {
                        continue next;
                    }
                }
                String date = "";
                HCPVisitBean visitBean = makeHCPVisitBean(pb, date);
                visits.add(visitBean);
            }
        }
    } catch (DBException dbe) {
        throw new iTrustException(dbe.getMessage());
    }
    return visits;
}