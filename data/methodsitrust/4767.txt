public void testInvalidNumericalResults() throws Exception {
    LabProcedureValidator validator = new LabProcedureValidator();
    LabProcedureBean bean = new LabProcedureBean();
    bean.setCommentary("This is it");
    bean.setLoinc("00000-0");
    bean.setPid(1L);
    bean.statusPending();
    bean.allow();
    bean.setNumericalResult("123456789012345678901");// Too long

    try {
        validator.validate(bean);
        fail("Expected validation to fail.");
    } catch (FormValidationException e) {
        assertEquals(1, e.getErrorList().size());
        String expect = "Numerical Result: " + (ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH.getDescription());
        assertEquals(expect, e.getErrorList().get(0));
    }
    bean.setNumericalResult("-");// No digits

    try {
        validator.validate(bean);
        fail("Expected validation to fail.");
    } catch (FormValidationException e) {
        assertEquals(1, e.getErrorList().size());
        String expect = "Numerical Result: " + (ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT.getDescription());
        assertEquals(expect, e.getErrorList().get(0));
    }
    bean.setNumericalResult("1.2.3");// Extra decimal point

    try {
        validator.validate(bean);
        fail("Expected validation to fail.");
    } catch (FormValidationException e) {
        assertEquals(1, e.getErrorList().size());
        String expect = "Numerical Result: " + (ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT.getDescription());
        assertEquals(expect, e.getErrorList().get(0));
    }
    bean.setNumericalResult("1-2");// Sign in wrong location

    try {
        validator.validate(bean);
        fail("Expected validation to fail.");
    } catch (FormValidationException e) {
        assertEquals(1, e.getErrorList().size());
        String expect = "Numerical Result: " + (ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT.getDescription());
        assertEquals(expect, e.getErrorList().get(0));
    }
}