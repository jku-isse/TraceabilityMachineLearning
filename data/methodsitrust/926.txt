/**
 * Reads a LOINC data file line by line, looking for valid LOINC data to add to the database.
 *
 * @param data
 * 		an InputStream associated with the file to parse
 * @param ignoreDupData
 * 		false if existing in the database should be updated if new data exists in the file
 * @return a list of messages concerning the parsing of the file
 * @throws DBException
 * 		
 */
public List<String> parseLOINCFile(InputStream data, boolean ignoreDupData) throws DBException {
    ArrayList<String> results = new ArrayList<String>();
    BufferedReader buf = new BufferedReader(new InputStreamReader(data));
    String line = null;
    int linesInserted = 0;
    int dupDataSkipped = 0;
    int dupDataUpdated = 0;
    int lnum = 1;
    // Match for starting with a LOINC code: "NUMBERS AND DASHES"
    String labRegEx = "^"([\d-]*)"\t";
    Pattern req = Pattern.compile(labRegEx);
    try {
        while ((line = buf.readLine()) != null) {
            try {
                Matcher reqMatch = req.matcher(line);
                // The line must start with a LOINC code to be further processed
                boolean found = (((line.length()) > 0) && ((line.charAt(0)) == ")) && (reqMatch.find());
                if (!found) {
                    results.add(((("IGNORED LINE " + lnum) + ": ") + line));
                } else {
                    String[] beanInfo = new String[7];
                    // split the line along tabs
                    String[] parts = line.split("	");
                    // the line must have been split into at least 2 parts to continue
                    if ((parts != null) && (!(parts[0].equals(line)))) {
                        for (int i = 0; (i < (beanInfo.length)) && (i < (parts.length)); i++) {
                            // this was an empty field
                            if ((parts[i].length()) <= 2) {
                                beanInfo[i] = "";
                            } else
                                if (((parts[i].charAt(0)) != ") || ((parts[i].charAt(((parts[i].length()) - 1))) != ")) {
                                    // The first 7 fields of LOINC data must be surrounded by quotes. If they arent then its wrong.
                                    throw new FormValidationException("Bad LOINC data line. All fields must be surrounded by quotation marks.");
                                } else {
                                    // strip quotes
                                    beanInfo[i] = parts[i].substring(1, ((parts[i].length()) - 1));
                                }

                        }
                        LOINCbean bean = createBean(beanInfo);
                        boolean duplicate = false;
                        try {
                            add(bean);
                            // success
                            linesInserted++;
                        } catch (Exception e) {
                            if (!(e.getMessage().contains("Code already exists"))) {
                                results.add(((((("ERROR, LINE " + lnum) + ": ") + line) + " ") + (e.getMessage())));
                            } else {
                                duplicate = true;
                            }
                        }
                        if (duplicate) {
                            if (!ignoreDupData) {
                                String res = "";
                                res = updateInformation(bean);
                                if (res.contains("Error")) {
                                    throw new FormValidationException(res);
                                } else {
                                    // We updated some data
                                    dupDataUpdated++;
                                }
                            } else {
                                // We skipped a line
                                dupDataSkipped++;
                            }
                        }
                    }
                }
            } catch (FormValidationException e) {
                // If we got this we should report the line as an error
                results.add(((((("ERROR, LINE " + lnum) + ": ") + line) + " ") + (e.getMessage())));
            }
            lnum++;
        } 
    } catch (IOException e) {
        // this is an IO error and not a data error
        // treat it differently
        results.add(("ERROR: " + (e.getMessage())));
    }
    // No data was changed
    if ((linesInserted <= 0) && (dupDataUpdated <= 0)) {
        // Files are only invalid if we didnt add any new data nor update any existing data.
        if ((dupDataUpdated <= 0) && (dupDataSkipped <= 0)) {
            results.add("File invalid. No LOINC data added.");
        } else {
            // Otherwise, we just skipped existing data lines.
            results.add((("No new LOINC data added. " + dupDataSkipped) + " lines detected as duplicate data."));
        }
    } else {
        // Tell the user how many lines were updated/inserted.
        results.add((((("Successfully added " + linesInserted) + " lines of new LOINC data. Updated ") + dupDataUpdated) + " lines of existing LOINC data."));
    }
    return results;
}