/**
 * Determines if an Influenza Epidemic is happening
 *
 * @param curDateStr
 * 		a date in the currently evaluated week
 * @param zip
 * 		the zip code to analyze
 * @return whether or not there is an epidemic
 * @throws ParseException
 * 		
 * @throws DBException
 * 		
 */
public boolean isFluEpidemic(String curDateStr, String zip) throws DBException, ParseException {
    new SimpleDateFormat("MM/dd/yyyy").parse("01/04/1998");
    Date curDate = new SimpleDateFormat("MM/dd/yyyy").parse(curDateStr);
    Calendar cal = Calendar.getInstance();
    cal.setTime(curDate);
    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);
    double threshold = calcThreshold(weekOfYr);
    double thresholdL = calcThreshold((weekOfYr - 1));
    double thresholdN = calcThreshold((weekOfYr + 1));
    DiagnosisStatisticsBean dbNow = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());
    cal.add(Calendar.HOUR, ((-12) * 7));
    DiagnosisStatisticsBean dbLast = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());
    cal.add(Calendar.HOUR, ((2 * 12) * 7));
    DiagnosisStatisticsBean dbNext = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());
    double weekNow = ((double) (dbNow.getRegionStats()));
    double weekL = ((double) (dbLast.getRegionStats()));
    double weekN = ((double) (dbNext.getRegionStats()));
    if ((weekNow > threshold) && ((weekL > thresholdL) || (weekN > thresholdN))) {
        return true;
    } else {
        return false;
    }
}