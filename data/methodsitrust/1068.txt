/**
 * Gets a list of messages for a user based on their filter criteria.
 *
 * @param messages
 * 		List of all of a users MessageBeans
 * @param filter
 * 		String containing a users filter criteria.
 * @return a List of MessageBeans that meet the criteria of the filter.
 * @throws iTrustException
 * 		
 * @throws ParseException
 * 		
 */
public List<MessageBean> filterMessages(List<MessageBean> messages, String filter) throws iTrustException, ParseException {
    List<MessageBean> filtered = new ArrayList<MessageBean>();
    String[] f = filter.split(",", (-1));
    for (MessageBean m : messages) {
        /**
         * Check the sender filter field.
         * Exclude if this MessageBean does not match the
         * requested sender, if one is specified.
         */
        if (!(f[0].equals(""))) {
            if (!(this.getName(m.getFrom()).equalsIgnoreCase(f[0])))
                continue;

        }
        /**
         * Check the subject filter field.
         * Exclude if this MessageBean does not match the
         * requested subject, if one is specified.
         */
        if (!(f[1].equals(""))) {
            if (!(m.getSubject().equalsIgnoreCase(f[1])))
                continue;

        }
        /**
         * Check the body of the message for certain words.
         * Exclude if this MessageBean if it does not contain
         * those words in the message body.
         */
        if (!(f[2].equals(""))) {
            if ((!(m.getSubject().toLowerCase().contains(f[2].toLowerCase()))) && (!(m.getBody().toLowerCase().contains(f[2].toLowerCase()))))
                continue;

        }
        /**
         * Check the body of the message for certain words.
         * Exclude if this MessageBean if it does contain
         * those words in the message body.
         */
        if (!(f[3].equals(""))) {
            if ((m.getSubject().toLowerCase().contains(f[3].toLowerCase())) || (m.getBody().toLowerCase().contains(f[3].toLowerCase())))
                continue;

        }
        /**
         * Check the start date filter field.
         * Exclude if this MessageBean was not sent after
         * this date.
         */
        if (!(f[4].equals(""))) {
            DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
            Date s = format.parse(f[4]);
            if (s.after(m.getSentDate()))
                continue;

        }
        /**
         * Check the end date filter field.
         * Exclude if this MessageBean was not sent before
         * this date.
         */
        if (!(f[5].equals(""))) {
            DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
            Date s = format.parse(f[5]);
            Calendar c = Calendar.getInstance();
            c.setTime(s);
            c.add(Calendar.DAY_OF_MONTH, 1);
            s = c.getTime();
            if (s.before(m.getSentDate()))
                continue;

        }
        /**
         * If the message has not been eliminated by any
         * of the filter fields, add it to the new list
         * of messages.
         */
        filtered.add(m);
    }
    return filtered;
}