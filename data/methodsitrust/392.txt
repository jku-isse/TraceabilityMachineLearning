/**
 * Adds an allergy to the patients records
 *
 * @return "Allergy Added", exception message, a list of invalid fields, or "" (only if description is null)
 * @throws iTrustException
 * 		
 */
public String updateAllergies(long pid, String ndcode) throws FormValidationException, iTrustException {
    AllergyBean bean = new AllergyBean();
    bean.setPatientID(pid);
    bean.setNDCode(ndcode);
    bean.setDescription(ndcodesDAO.getNDCode(ndcode).getDescription());
    AllergyBeanValidator abv = new AllergyBeanValidator();
    abv.validate(bean);
    String patientName = patientDAO.getName(pid);
    List<AllergyBean> allergies = allergyDAO.getAllergies(pid);
    for (AllergyBean current : allergies) {
        if (current.getNDCode().equals(bean.getNDCode())) {
            return ((((("Allergy " + (bean.getNDCode())) + " - ") + (bean.getDescription())) + " has already been added for ") + patientName) + ".";
        }
    }
    allergyDAO.addAllergy(bean);
    emailutil.sendEmail(makeEmail());
    /* adding loop that checks for allergy conflicts. The loop runs through every prescription bean
    and checks for conflict.
     */
    List<PrescriptionBean> beansRx = patientDAO.getCurrentPrescriptions(pid);
    for (int i = 0; i < (beansRx.size()); i++) {
        if (beansRx.get(i).getMedication().getNDCode().equals(bean.getNDCode())) {
            return ((((("Medication " + (beansRx.get(i).getMedication().getNDCode())) + " - ") + (beansRx.get(i).getMedication().getDescription())) + " is currently prescribed to ") + patientName) + ".";
        }
    }
    return "Allergy Added";// If loop is successful, it will never reach here.

}