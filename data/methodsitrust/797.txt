/**
 * Method that sends exactly one e-mail to each MID in the list of Adverse Events
 *
 * @param aeList
 * 		The list of adverse Event Beans that need to be acted upon
 * @return EList The list of e-mails sent for testing purposes
 */
public Email sendMails(List<AdverseEventBean> aeList) throws DBException, FormValidationException, iTrustException {
    List<String> MIDlist = new ArrayList<String>();
    String patientID = "";
    for (AdverseEventBean beaner : aeList) {
        patientID = beaner.getMID();
        String newDesc = ((((" Drug: " + (beaner.getDrug())) + " (") + (beaner.getCode())) + ") Description: ") + (beaner.getDescription());
        beaner.setDescription(newDesc);
    }
    for (AdverseEventBean beano : aeList) {
        if (!(MIDlist.contains(beano.getPrescriber()))) {
            MIDlist.add(beano.getPrescriber());
        }
    }
    Email email = new Email();
    for (String num : MIDlist) {
        String message = (((" Patient: " + (patientDAO.getName(Long.parseLong(patientID)))) + " (MID ") + patientID) + ") Has Reported the following adverse event(s)";
        for (AdverseEventBean beano : aeList) {
            if (beano.getPrescriber().equals(num)) {
                message = message + (beano.getDescription());
            }
        }
        String fromEmail;
        email.setFrom("noreply@itrust.com");
        PatientBean sender = patientDAO.getPatient(loggedInMID);
        PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));
        List<String> toList = new ArrayList<String>();
        toList.add(receiver.getEmail());
        fromEmail = sender.getEmail();
        email.setToList(toList);
        email.setFrom(fromEmail);
        email.setSubject(String.format("Adverse Event Report(Prescription)"));
        email.setBody(message);
        emailer.sendEmail(email);
    }
    return email;
}