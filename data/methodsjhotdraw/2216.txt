/**
 * Creates a BufferedImage from the specified list of figures.
 *
 * @param drawing
 * 		The drawing.
 * @param figures
 * 		A list of figures of the drawing.
 * @param transform
 * 		The AffineTransform to be used when drawing
 * 		the figures.
 * @param imageSize
 * 		The width and height of the image.
 */
public BufferedImage toImage(Drawing drawing, List<Figure> figures, AffineTransform transform, Dimension imageSize) {
    // Create the buffered image and clear it
    Color background = AttributeKeys.CANVAS_FILL_COLOR.get(drawing);
    double opacity = AttributeKeys.CANVAS_FILL_OPACITY.get(drawing);
    if (background == null) {
        background = new Color(255, 255, 255, ((int) (255 * opacity)));
    } else {
        background = new Color(background.getRed(), background.getGreen(), background.getBlue(), ((int) ((background.getAlpha()) * opacity)));
    }
    BufferedImage buf = new BufferedImage(imageSize.width, imageSize.height, ((background.getAlpha()) == 255 ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB));
    Graphics2D g = buf.createGraphics();
    // Clear the buffered image with the background color
    Composite savedComposite = g.getComposite();
    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));
    g.setColor(background);
    g.fillRect(0, 0, buf.getWidth(), buf.getHeight());
    g.setComposite(savedComposite);
    // Draw the figures onto the buffered image
    setRenderingHints(g);
    g.transform(transform);
    for (Figure f : figures) {
        f.draw(g);
    }
    g.dispose();
    // Convert the image, if it does not have the specified image type
    if ((imageType) != (BufferedImage.TYPE_INT_ARGB)) {
        BufferedImage buf2 = new BufferedImage(buf.getWidth(), buf.getHeight(), imageType);
        g = buf2.createGraphics();
        setRenderingHints(g);
        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));
        g.drawImage(buf, 0, 0, null);
        g.dispose();
        buf.flush();
        buf = buf2;
    }
    return buf;
}