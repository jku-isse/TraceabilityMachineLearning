/**
 * Creates a color button, with an action region and a popup menu. The
 * button acts on attributes of the Drawing object in the current DrawingView
 * of the DrawingEditor.
 *
 * @param editor
 * 		The DrawingEditor.
 * @param attributeKey
 * 		The AttributeKey of the color.
 * @param swatches
 * 		A list with labeled colors containing the color palette
 * 		of the popup menu. The actual labels are retrieved from the supplied
 * 		resource bundle. This is usually a LinkedHashMap, so that the colors have
 * 		a predictable order.
 * @param columnCount
 * 		The number of columns of the color palette.
 * @param labelKey
 * 		The resource bundle key used for retrieving the icon and
 * 		the tooltip of the button.
 * @param labels
 * 		The resource bundle.
 * @param defaultAttributes
 * 		A set of attributes which are also applied to
 * 		the selected figures, when a color is selected. This can be used, to
 * 		set attributes that otherwise prevent the color from being shown. For
 * 		example, when the color attribute is set, we want the gradient attribute
 * 		of the Figure to be cleared.
 * @param colorShape
 * 		This shape is superimposed on the icon of the button.
 * 		The shape is drawn with the default color of the DrawingEditor.
 */
public static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {
    final JPopupButton popupButton = new JPopupButton();
    if (defaultAttributes == null) {
        defaultAttributes = new HashMap<AttributeKey, Object>();
    }
    popupButton.setColumnCount(columnCount, false);
    boolean hasNullColor = false;
    for (ColorIcon swatch : swatches) {
        DrawingAttributeAction a;
        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
        attributes.put(attributeKey, swatch.getColor());
        if ((swatch.getColor()) == null) {
            hasNullColor = true;
        }
        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));
        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());
    }
    // No color
    if (!hasNullColor) {
        DrawingAttributeAction a;
        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
        attributes.put(attributeKey, null);
        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty("attribute.color.noColor"), new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor")))));
        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));
    }
    // Color chooser
    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource("/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));
    Action a;
    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, "color", chooserIcon, defaultAttributes)));
    labels.configureToolBarButton(popupButton, labelKey);
    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));
    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);
    popupButton.setIcon(icon);
    popupButton.setDisabledIcon(icon);
    popupButton.setFocusable(false);
    if (editor != null) {
        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));
    }
    return popupButton;
}