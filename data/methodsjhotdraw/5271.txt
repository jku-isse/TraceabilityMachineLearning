/**
 * Reads the view from the specified file.
 */
public void read(File f) throws IOException {
    try {
        JFileChooser fc = getOpenChooser();
        final Drawing drawing = createDrawing();
        // We start with the selected file format in the file chooser,
        // and then try out all formats we can import.
        // We need to try out all formats, because the user may have
        // chosen to load a file without having used the file chooser.
        InputFormat selectedFormat = fileFilterInputFormatMap.get(fc.getFileFilter());
        boolean success = false;
        if (selectedFormat != null) {
            try {
                selectedFormat.read(f, drawing, true);
                success = true;
            } catch (Exception e) {
                e.printStackTrace();
                // try with the next input format
            }
        }
        if (!success) {
            for (InputFormat sfi : drawing.getInputFormats()) {
                if (sfi != selectedFormat) {
                    try {
                        sfi.read(f, drawing, true);
                        success = true;
                        break;
                    } catch (Exception e) {
                        // try with the next input format
                    }
                }
            }
        }
        if (!success) {
            ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");
            throw new IOException(labels.getFormatted("file.open.unsupportedFileFormat.message", f.getName()));
        }
        SwingUtilities.invokeAndWait(new Runnable() {
            public void run() {
                svgPanel.getDrawing().removeUndoableEditListener(undo);
                svgPanel.setDrawing(drawing);
                svgPanel.getDrawing().addUndoableEditListener(undo);
                undo.discardAllEdits();
            }
        });
    } catch (InterruptedException e) {
        InternalError error = new InternalError();
        e.initCause(e);
        throw error;
    } catch (InvocationTargetException e) {
        InternalError error = new InternalError();
        error.initCause(e);
        throw error;
    }
}