/**
 * Returns an array of all the objects currently registered
 * as <code><em>Foo</em>Listener</code>s
 * upon this model.
 * <code><em>Foo</em>Listener</code>s are registered using the
 * <code>add<em>Foo</em>Listener</code> method.
 *
 * <p>
 *
 * You can specify the <code>listenerType</code> argument
 * with a class literal,
 * such as
 * <code><em>Foo</em>Listener.class</code>.
 * For example, you can query a
 * <code>DefaultTreeModel</code> <code>m</code>
 * for its tree model listeners with the following code:
 *
 * <pre>TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));</pre>
 *
 * If no such listeners exist, this method returns an empty array.
 *
 * @param listenerType
 * 		the type of listeners requested; this parameter
 * 		should specify an interface that descends from
 * 		<code>java.util.EventListener</code>
 * @return an array of all objects registered as
<code><em>Foo</em>Listener</code>s on this component,
or an empty array if no such
listeners have been added
 * @exception ClassCastException if <code>listenerType</code>
doesnt specify a class or interface that implements
<code>java.util.EventListener</code>
 * @see #getTreeModelListeners
 * @since 1.3
 */
public <T extends EventListener> T[] getListeners(Class<T> listenerType) {
    return listenerList.getListeners(listenerType);
}