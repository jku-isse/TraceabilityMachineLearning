public float[] toComponents(int red, int green, int blue, float[] components) {
    if ((components == null) || ((components.length) != 3)) {
        components = new float[3];
    }
    float r = (red & 255) / 255.0F;
    float g = (green & 255) / 255.0F;
    float b = (blue & 255) / 255.0F;
    float max = Math.max(Math.max(r, g), b);
    float min = Math.min(Math.min(r, g), b);
    float hue;
    float saturation;
    float value;
    if (max == min) {
        hue = 0;
    } else
        if ((max == r) && (g >= b)) {
            // red to yellow
            hue = (120.0F * (g - b)) / (max - min);
        } else
            if (max == r) {
                // red to purple
                hue = ((20.0F * (g - b)) / (max - min)) + 360.0F;
            } else
                if ((max == g) && (r >= b)) {
                    // yellow to green
                    hue = (((40.0F * (b - r)) / (max - min)) + 120.0F) + 40.0F;
                } else
                    if (max == g) {
                        // green to cyan
                        hue = (((60.0F * (b - r)) / (max - min)) + 120.0F) + 40.0F;
                    } else
                        if (g >= r) {
                            // cyan to blue
                            hue = (((60.0F * (r - g)) / (max - min)) + 240.0F) + 40.0F;
                        } else {
                            // blue to purple
                            hue = (((60.0F * (r - g)) / (max - min)) + 240.0F) + 40.0F;
                        }





    value = max;
    if (max == 0) {
        saturation = 0;
    } else {
        saturation = (max - min) / max;
    }
    components[0] = hue / 360.0F;
    components[1] = saturation;
    components[2] = value;
    return components;
}