public static Stroke getStroke(Figure f) {
    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);
    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));
    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;
    double dashPhase = AttributeKeys.STROKE_DASH_PHASE.get(f);
    double[] ddashes = AttributeKeys.STROKE_DASHES.get(f);
    float[] dashes = null;
    boolean isAllZeroes = true;
    if (ddashes != null) {
        dashes = new float[ddashes.length];
        double dashSize = 0.0F;
        for (int i = 0; i < (dashes.length); i++) {
            dashes[i] = Math.max(0.0F, ((float) ((ddashes[i]) * dashFactor)));
            dashSize += dashes[i];
            if (isAllZeroes && ((dashes[i]) != 0)) {
                isAllZeroes = false;
            }
        }
        if (((dashes.length) % 2) == 1) {
            dashSize *= 2;
        }
        if (dashPhase < 0) {
            dashPhase = dashSize + (dashPhase % dashSize);
        }
    }
    if (isAllZeroes) {
        // dont draw dashes, if all values are 0.
        dashes = null;
    }
    switch (AttributeKeys.STROKE_TYPE.get(f)) {
        case BASIC :
        default :
            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));
            // not reached
        case DOUBLE :
            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));
            // not reached
    }
}