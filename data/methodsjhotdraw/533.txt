protected void generateLookupTables() {
    radials = new float[(w) * (h)];
    angulars = new float[(w) * (h)];
    alphas = new int[(w) * (h)];
    float radius = getRadius();
    // blend is used to create a linear alpha gradient of two extra pixels
    float blend = ((radius + 2.0F) / radius) - 1.0F;
    // Center of the color wheel circle
    int cx = (w) / 2;
    int cy = (h) / 2;
    for (int x = 0; x < (w); x++) {
        int kx = x - cx;// Kartesian coordinates of x

        int squarekx = kx * kx;// Square of kartesian x

        for (int y = 0; y < (h); y++) {
            int ky = cy - y;// Kartesian coordinates of y

            int index = x + (y * (w));
            radials[index] = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;
            if ((radials[index]) <= 1.0F) {
                alphas[index] = -16777216;
            } else {
                alphas[index] = ((int) (((blend - (Math.min(blend, ((radials[index]) - 1.0F)))) * 255) / blend)) << 24;
                radials[index] = 1.0F;
            }
            if ((alphas[index]) != 0) {
                angulars[index] = ((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0));
            }
        }
    }
    isLookupValid = true;
}