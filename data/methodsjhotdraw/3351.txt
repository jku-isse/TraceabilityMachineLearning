/**
 * Splits the digitized points into multiple segments at each corner point.
 * <p>
 * Corner points are both contained as the last point of a segment and
 * the first point of a subsequent segment.
 *
 * @param digitizedPoints
 * 		Digitized points
 * @param maxAngle
 * 		maximal angle in radians between the current point and its
 * 		predecessor and successor up to which the point does not break the
 * 		digitized list into segments. Recommended value 44° = 44 * 180d / Math.PI
 * @return Segments of digitized points, each segment having less than maximal
angle between points.
 */
public static ArrayList<ArrayList<Point2D.Double>> splitAtCorners(List<Point2D.Double> digitizedPoints, double maxAngle, double minDistance) {
    ArrayList<Integer> cornerIndices = Bezier.findCorners(digitizedPoints, maxAngle, minDistance);
    ArrayList<ArrayList<Point2D.Double>> segments = new ArrayList<ArrayList<Point2D.Double>>(((cornerIndices.size()) + 1));
    if ((cornerIndices.size()) == 0) {
        segments.add(new ArrayList<Point2D.Double>(digitizedPoints));
    } else {
        segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(0, ((cornerIndices.get(0)) + 1))));
        for (int i = 1; i < (cornerIndices.size()); i++) {
            segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(cornerIndices.get((i - 1)), ((cornerIndices.get(i)) + 1))));
        }
        segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(cornerIndices.get(((cornerIndices.size()) - 1)), digitizedPoints.size())));
    }
    return segments;
}