public Paint getPaint(Figure f, double opacity) {
    // No stops, like fill = none
    if ((stopColors.length) == 0) {
        return new Color(0, true);
    }
    // Compute colors and fractions for the paint
    Color[] colors = new Color[stopColors.length];
    float[] fractions = new float[stopColors.length];
    float previousFraction = 0;
    for (int i = 0; i < (stopColors.length); i++) {
        // Each fraction must be larger or equal the previous fraction.
        fractions[i] = Math.min(1.0F, Math.max(previousFraction, ((float) (stopOffsets[i]))));
        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);
        previousFraction = fractions[i];
    }
    // Compute the dimensions and transforms for the paint
    Point2D.Double p1;
    Point2D.Double p2;
    p1 = new Point2D.Double(x1, y1);
    p2 = new Point2D.Double(x2, y2);
    AffineTransform t = transform;
    if (isRelativeToFigureBounds) {
        t = ((AffineTransform) (t.clone()));
        Rectangle2D.Double bounds = f.getBounds();
        t.translate(bounds.x, bounds.y);
        t.scale(bounds.width, bounds.height);
    }
    // Construct a solid color, if only one stop color is given, or if
    // transform is not invertible
    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {
        return colors[0];
    }
    // Construct a gradient
    LinearGradientPaint gp;
    gp = new <org.apache.batik.ext.awt.LinearGradientPaint, org.apache.batik.ext.awt.LinearGradientPaint>LinearGradientPaint(p1, p2, fractions, colors, t);
    return gp;
}