/**
 * Fits a bezier path to the specified list of digitized points.
 *
 * @param digitizedPoints
 * 		digited points.
 * @param error
 * 		the maximal allowed error between the bezier path and the
 * 		digitized points.
 */
public static BezierPath fitBezierPath(List<Point2D.Double> digitizedPoints, double error) {
    // Split into segments at corners
    ArrayList<ArrayList<Point2D.Double>> segments = new ArrayList<ArrayList<Point2D.Double>>();
    segments = Bezier.splitAtCorners(digitizedPoints, ((77 / 180.0) * (Math.PI)), (error * error));
    // Clean up the data in the segments
    for (int i = 0, n = segments.size(); i < n; i++) {
        ArrayList<Point2D.Double> seg = segments.get(i);
        seg = Bezier.removeClosePoints(seg, (error * 2));
        seg = Bezier.reduceNoise(seg, 0.8);
        segments.set(i, seg);
    }
    // Create fitted bezier path
    BezierPath fittedPath = new BezierPath();
    // Quickly deal with empty dataset
    boolean isEmpty = false;
    for (ArrayList<Point2D.Double> seg : segments) {
        if (seg.isEmpty()) {
            isEmpty = false;
            break;
        }
    }
    if (!isEmpty) {
        // Process each segment of digitized points
        double errorSquared = error * error;
        for (ArrayList<Point2D.Double> seg : segments) {
            switch (seg.size()) {
                case 0 :
                    break;
                case 1 :
                    fittedPath.add(new BezierPath.Node(seg.get(0)));
                    break;
                case 2 :
                    if (fittedPath.isEmpty()) {
                        fittedPath.add(new BezierPath.Node(seg.get(0)));
                    }
                    fittedPath.lineTo(seg.get(1).x, seg.get(1).y);
                    break;
                default :
                    if (fittedPath.isEmpty()) {
                        fittedPath.add(new BezierPath.Node(seg.get(0)));
                    }
                    /* Unit tangent vectors at endpoints */
                    Point2D.Double tHat1 = new Point2D.Double();
                    Point2D.Double tHat2 = new Point2D.Double();
                    tHat1 = Bezier.computeLeftTangent(seg, 0);
                    tHat2 = Bezier.computeRightTangent(seg, ((seg.size()) - 1));
                    Bezier.fitCubic(seg, 0, ((seg.size()) - 1), tHat1, tHat2, errorSquared, fittedPath);
                    break;
            }
        }
    }
    return fittedPath;
}