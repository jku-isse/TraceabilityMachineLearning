/**
 * Creates a grid layout with the specified number of rows and
 * columns. All components in the layout are given equal size.
 * <p>
 * In addition, the horizontal and vertical gaps are set to the
 * specified values. Horizontal gaps are placed at the left and
 * right edges, and between each of the columns. Vertical gaps are
 * placed at the top and bottom edges, and between each of the rows.
 * <p>
 * One, but not both, of <code>rows</code> and <code>cols</code> can
 * be zero, which means that any number of objects can be placed in a
 * row or in a column.
 * <p>
 * All <code>VerticalGridLayout</code> constructors defer to this one.
 *
 * @param rows
 * 		the rows, with the value zero meaning
 * 		any number of rows
 * @param cols
 * 		the columns, with the value zero meaning
 * 		any number of columns
 * @param hgap
 * 		the horizontal gap
 * @param vgap
 * 		the vertical gap
 * @exception IllegalArgumentException  if the value of both
<code>rows</code> and <code>cols</code> is
set to zero
 */
public VerticalGridLayout(int rows, int cols, int hgap, int vgap, boolean isVertical) {
    if ((rows == 0) && (cols == 0)) {
        throw new IllegalArgumentException("rows and cols cannot both be zero");
    }
    this.rows = rows;
    this.cols = cols;
    this.hgap = hgap;
    this.vgap = vgap;
    this.isVertical = isVertical;
}