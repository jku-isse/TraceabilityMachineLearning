/**
 * Reads a &lt;style:graphic-properties&gt; element from the specified
 * XML element.
 * <p>
 *
 * @param elem
 * 		A &lt;style:graphic-properties&gt; element.
 */
private void readGraphicPropertiesElement(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {
    // The attribute draw:stroke specifies the style of the stroke on the current object. The value
    // none means that no stroke is drawn, and the value solid means that a solid stroke is drawn. If
    // the value is dash, the stroke referenced by the draw:stroke-dash property is drawn.
    if (elem.hasAttribute("stroke", ODGConstants.DRAWING_NAMESPACE)) {
        ODGAttributeKeys.STROKE_STYLE.set(a, ((ODGConstants.StrokeStyle) (elem.getAttribute("stroke", ODGConstants.DRAWING_NAMESPACE, ODGConstants.STROKE_STYLES, null))));
    }
    // The attribute svg:stroke-width specifies the width of the stroke on
    // the current object.
    if (elem.hasAttribute("stroke-width", ODGConstants.SVG_NAMESPACE)) {
        AttributeKeys.STROKE_WIDTH.set(a, toLength(elem.getAttribute("stroke-width", ODGConstants.SVG_NAMESPACE, null)));
    }
    // The attribute svg:stroke-color specifies the color of the stroke on
    // the current object.
    if (elem.hasAttribute("stroke-color", ODGConstants.SVG_NAMESPACE)) {
        AttributeKeys.STROKE_COLOR.set(a, toColor(elem.getAttribute("stroke-color", ODGConstants.SVG_NAMESPACE, null)));
    }
    // FIXME read draw:marker-start-width, draw:marker-start-center, draw:marker-end-width,
    // draw:marker-end-centre
    // The attribute draw:fill specifies the fill style for a graphic
    // object. Graphic objects that are not closed, such as a path without a
    // closepath at the end, will not be filled. The fill operation does not
    // automatically close all open subpaths by connecting the last point of
    // the subpath with the first point of the subpath before painting the
    // fill. The attribute has the following values:
    // • none:     the drawing object is not filled.
    // • solid:    the drawing object is filled with color specified by the
    // draw:fill-color attribute.
    // • bitmap:   the drawing object is filled with the bitmap specified
    // by the draw:fill-image-name attribute.
    // • gradient: the drawing object is filled with the gradient specified
    // by the draw:fill-gradient-name attribute.
    // • hatch:    the drawing object is filled with the hatch specified by
    // the draw:fill-hatch-name attribute.
    if (elem.hasAttribute("fill", ODGConstants.DRAWING_NAMESPACE)) {
        ODGAttributeKeys.FILL_STYLE.set(a, ((ODGConstants.FillStyle) (elem.getAttribute("fill", ODGConstants.DRAWING_NAMESPACE, ODGConstants.FILL_STYLES, null))));
    }
    // The attribute draw:fill-color specifies the color of the fill for a
    // graphic object. It is used only if the draw:fill attribute has the
    // value solid.
    if (elem.hasAttribute("fill-color", ODGConstants.DRAWING_NAMESPACE)) {
        AttributeKeys.FILL_COLOR.set(a, toColor(elem.getAttribute("fill-color", ODGConstants.DRAWING_NAMESPACE, null)));
    }
    // FIXME read fo:padding-top, fo:padding-bottom, fo:padding-left,
    // fo:padding-right
    // FIXME read draw:shadow, draw:shadow-offset-x, draw:shadow-offset-y,
    // draw:shadow-color
    for (IXMLElement child : elem.getChildren()) {
        String ns = child.getNamespace();
        String name = child.getName();
        // if (DEBUG) System.out.println("ODGStylesReader unsupported <"+elem.getName()+"> child <"+child.getName()+" ...>...</>");
    }
}