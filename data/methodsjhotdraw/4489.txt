/**
 * Initializes the applet DrawApplet
 */
public void init() {
    // Set look and feel
    // -----------------
    try {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (Throwable e) {
        // Do nothing.
        // If we cant set the desired look and feel, UIManager does
        // automaticaly the right thing for us.
    }
    // Display copyright info while we are loading the data
    // ----------------------------------------------------
    Container c = getContentPane();
    c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));
    String[] lines = getAppletInfo().split("
");// Strings.split(getAppletInfo(), 
);

    for (int i = 0; i < (lines.length); i++) {
        c.add(new JLabel(lines[i]));
    }
    // We load the data using a worker thread
    // --------------------------------------
    new Worker() {
        public Object construct() {
            Object result;
            try {
                if (((getParameter("data")) != null) && ((getParameter("data").length()) > 0)) {
                    NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), new StringReader(getParameter("data")));
                    result = domi.readObject(0);
                } else
                    if ((getParameter("datafile")) != null) {
                        InputStream in = null;
                        try {
                            URL url = new URL(getDocumentBase(), getParameter("datafile"));
                            in = url.openConnection().getInputStream();
                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), in);
                            result = domi.readObject(0);
                        } finally {
                            if (in != null)
                                in.close();

                        }
                    } else {
                        result = null;
                    }

            } catch (Throwable t) {
                result = t;
            }
            return result;
        }

        public void finished(Object result) {
            Container c = getContentPane();
            c.setLayout(new BorderLayout());
            c.removeAll();
            initComponents();
            if (result != null) {
                if (result instanceof Drawing) {
                    setDrawing(((Drawing) (result)));
                } else
                    if (result instanceof Throwable) {
                        getDrawing().add(new TextFigure(result.toString()));
                        ((Throwable) (result)).printStackTrace();
                    }

            }
            boolean isLiveConnect;
            try {
                Class.forName("netscape.javascript.JSObject");
                isLiveConnect = true;
            } catch (Throwable t) {
                isLiveConnect = false;
            }
            loadButton.setEnabled((isLiveConnect && ((getParameter("dataread")) != null)));
            saveButton.setEnabled((isLiveConnect && ((getParameter("datawrite")) != null)));
            if (isLiveConnect) {
                String methodName = getParameter("dataread");
                if ((methodName.indexOf(()) > 0) {
                    methodName = methodName.substring(0, ((methodName.indexOf(()) - 1));
                }
                JSObject win = JSObject.getWindow(DrawLiveConnectApplet.this);
                Object data = win.call(methodName, new Object[0]);
                if (data instanceof String) {
                    setData(((String) (data)));
                }
            }
            c.validate();
        }
    }.start();
}