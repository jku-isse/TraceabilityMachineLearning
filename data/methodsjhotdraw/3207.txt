protected void applySelectedFontToFigures() {
    final ArrayList<Figure> selectedFigures = new ArrayList<Figure>(getView().getSelectedFigures());
    final ArrayList<Object> restoreData = new ArrayList<Object>(selectedFigures.size());
    for (Figure figure : selectedFigures) {
        restoreData.add(figure.getAttributesRestoreData());
        key.set(figure, fontChooser.getSelectedFont());
    }
    getEditor().setDefaultAttribute(key, fontChooser.getSelectedFont());
    final Font undoValue = fontChooser.getSelectedFont();
    UndoableEdit edit = new AbstractUndoableEdit() {
        @Override
        public String getPresentationName() {
            return AttributeKeys.FONT_FACE.getPresentationName();
            /* String name = (String) getValue(Actions.UNDO_PRESENTATION_NAME_KEY);
            if (name == null) {
            name = (String) getValue(AbstractAction.NAME);
            }
            if (name == null) {
            ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
            name = labels.getString("attribute.text");
            }
            return name;
             */
        }

        @Override
        public void undo() {
            super.undo();
            Iterator<Object> iRestore = restoreData.iterator();
            for (Figure figure : selectedFigures) {
                figure.willChange();
                figure.restoreAttributesTo(iRestore.next());
                figure.changed();
            }
        }

        @Override
        public void redo() {
            super.redo();
            for (Figure figure : selectedFigures) {
                restoreData.add(figure.getAttributesRestoreData());
                figure.willChange();
                key.basicSet(figure, undoValue);
                figure.changed();
            }
        }
    };
    fireUndoableEditHappened(edit);
}