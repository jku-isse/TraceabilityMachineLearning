/**
 * Joins two segments into one if the given Point2D.Double hits a node
 * of the polyline.
 *
 * @return true if the two segments were joined.
 * @param join
 * 		a Point at a node on the bezier path
 * @param tolerance
 * 		a tolerance, tolerance should take into account
 * 		the line width, plus 2 divided by the zoom factor.
 */
@Override
public boolean joinSegments(Point2D.Double join, double tolerance) {
    // Apply inverse of transform to point
    if ((AttributeKeys.TRANSFORM.get(this)) != null) {
        try {
            join = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(join, new Point2D.Double())));
        } catch (NoninvertibleTransformException ex) {
            System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");
        }
    }
    int i = getBezierPath().findSegment(join, tolerance);
    if ((i != (-1)) && (i > 1)) {
        removeNode(i);
        return true;
    }
    return false;
}