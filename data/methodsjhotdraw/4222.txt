@Override
public void paintThumb(Graphics gr) {
    Graphics2D g = ((Graphics2D) (gr));
    Rectangle knobBounds = thumbRect;
    int w = knobBounds.width;
    int h = knobBounds.height;
    g.translate(knobBounds.x, knobBounds.y);
    float[] stops;
    Color[] stopColors;
    if (slider.isEnabled()) {
        g.setColor(slider.getBackground());
        if (slider.getModel().getValueIsAdjusting()) {
            stops = PaletteSliderUI.selectedStops;
            stopColors = PaletteSliderUI.selectedStopColors;
        } else {
            stops = PaletteSliderUI.enabledStops;
            stopColors = PaletteSliderUI.enabledStopColors;
        }
    } else {
        g.setColor(slider.getBackground().darker());
        stops = PaletteSliderUI.enabledStops;
        stopColors = PaletteSliderUI.enabledStopColors;
    }
    Boolean paintThumbArrowShape = ((Boolean) (slider.getClientProperty("Slider.paintThumbArrowShape")));
    if (((!(slider.getPaintTicks())) && (paintThumbArrowShape == null)) || (paintThumbArrowShape == (Boolean.FALSE))) {
        // "plain" version
        LinearGradientPaint lgp = new LinearGradientPaint(new Point2D.Float(2, 2), new Point2D.Float(2, ((2 + h) - 4)), stops, stopColors, REPEAT, LINEAR_RGB);
        g.setPaint(lgp);
        g.fillOval(2, 2, (w - 4), (h - 4));
        g.setColor(new Color(4473924));
        g.drawOval(1, 1, (w - 3), (h - 3));
    } else
        if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {
            int cw = w / 2;
            g.fillRect(1, 1, (w - 3), ((h - 1) - cw));
            Polygon p = new Polygon();
            p.addPoint(1, (h - cw));
            p.addPoint((cw - 1), (h - 1));
            p.addPoint((w - 2), ((h - 1) - cw));
            g.fillPolygon(p);
            g.setColor(getHighlightColor());
            g.drawLine(0, 0, (w - 2), 0);
            g.drawLine(0, 1, 0, ((h - 1) - cw));
            g.drawLine(0, (h - cw), (cw - 1), (h - 1));
            g.setColor(Color.black);
            g.drawLine((w - 1), 0, (w - 1), ((h - 2) - cw));
            g.drawLine((w - 1), ((h - 1) - cw), ((w - 1) - cw), (h - 1));
            g.setColor(getShadowColor());
            g.drawLine((w - 2), 1, (w - 2), ((h - 2) - cw));
            g.drawLine((w - 2), ((h - 1) - cw), ((w - 1) - cw), (h - 2));
        } else {
            // vertical
            int cw = h / 2;
            if (slider.getComponentOrientation().isLeftToRight()) {
                g.fillRect(1, 1, ((w - 1) - cw), (h - 3));
                Polygon p = new Polygon();
                p.addPoint(((w - cw) - 1), 0);
                p.addPoint((w - 1), cw);
                p.addPoint(((w - 1) - cw), (h - 2));
                g.fillPolygon(p);
                g.setColor(getHighlightColor());
                g.drawLine(0, 0, 0, (h - 2));
                // left
                g.drawLine(1, 0, ((w - 1) - cw), 0);
                // top
                g.drawLine(((w - cw) - 1), 0, (w - 1), cw);// top slant

                g.setColor(Color.black);
                g.drawLine(0, (h - 1), ((w - 2) - cw), (h - 1));
                // bottom
                g.drawLine(((w - 1) - cw), (h - 1), (w - 1), ((h - 1) - cw));// bottom slant

                g.setColor(getShadowColor());
                g.drawLine(1, (h - 2), ((w - 2) - cw), (h - 2));// bottom

                g.drawLine(((w - 1) - cw), (h - 2), (w - 2), ((h - cw) - 1));// bottom slant

            } else {
                g.fillRect(5, 1, ((w - 1) - cw), (h - 3));
                Polygon p = new Polygon();
                p.addPoint(cw, 0);
                p.addPoint(0, cw);
                p.addPoint(cw, (h - 2));
                g.fillPolygon(p);
                g.setColor(getHighlightColor());
                g.drawLine((cw - 1), 0, (w - 2), 0);// top

                g.drawLine(0, cw, cw, 0);// top slant

                g.setColor(Color.black);
                g.drawLine(0, ((h - 1) - cw), cw, (h - 1));// bottom slant

                g.drawLine(cw, (h - 1), (w - 1), (h - 1));// bottom

                g.setColor(getShadowColor());
                g.drawLine(cw, (h - 2), (w - 2), (h - 2));// bottom

                g.drawLine((w - 1), 1, (w - 1), (h - 2));// right

            }
        }

    g.translate((-(knobBounds.x)), (-(knobBounds.y)));
}