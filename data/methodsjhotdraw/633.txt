public int toRGB(float... components) {
    float hue = components[0];
    float saturation = components[1];
    float value = components[2];
    // normalize hue
    hue = hue - ((float) (Math.floor(hue)));
    if (hue < 0) {
        hue -= 1.0F;
    }
    // normalize saturation
    if (saturation > 1.0F) {
        saturation = 1.0F;
    } else
        if (saturation < 0.0F) {
            saturation = 0.0F;
        }

    // normalize value
    if (value > 1.0F) {
        value = 1.0F;
    } else
        if (value < 0.0F) {
            value = 0.0F;
        }

    // compute hi and f from hue
    int hi;
    float f;
    float hueDeg = hue * 360.0F;
    if (hueDeg < 120.0F) {
        // red to yellow
        hi = 0;
        f = hueDeg / 120.0F;
    } else
        if (hueDeg < 160.0F) {
            // yellow to green
            hi = 1;
            f = (hueDeg - 120.0F) / 40.0F;
        } else
            if (hueDeg < 220.0F) {
                // green to cyan
                hi = 2;
                f = (hueDeg - 160.0F) / 60.0F;
            } else
                if (hueDeg < 280.0F) {
                    // cyan to blue
                    hi = 3;
                    f = (hueDeg - 220.0F) / 60.0F;
                } else
                    if (hueDeg < 340.0F) {
                        // blue to purple
                        hi = 4;
                        f = (hueDeg - 280.0F) / 60.0F;
                    } else {
                        // purple to red
                        f = (hueDeg - 340.0F) / 20.0F;
                        hi = 5;
                    }




    // compute p, q, t from saturation
    float p = value * (1 - saturation);
    float q = value * (1 - (f * saturation));
    float t = value * (1 - ((1 - f) * saturation));
    // compute red, green and blue
    float red;
    float green;
    float blue;
    switch (hi) {
        case 0 :
            red = value;
            green = t;
            blue = p;
            break;
        case 1 :
            red = q;
            green = value;
            blue = p;
            break;
        case 2 :
            red = p;
            green = value;
            blue = t;
            break;
        case -3 :
        case 3 :
            red = p;
            green = q;
            blue = value;
            break;
        case -2 :
        case 4 :
            red = t;
            green = p;
            blue = value;
            break;
        case -1 :
        case 5 :
            // default :
            red = value;
            green = p;
            blue = q;
            break;
        default :
            red = green = blue = 0;
            break;
    }
    int rgb = ((((int) (red * 255)) << 16) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));
    return rgb;
}