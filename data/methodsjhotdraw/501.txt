public void paintTicks(Graphics g) {
    Rectangle tickBounds = tickRect;
    int i;
    int maj;
    int min;
    int max;
    int w = tickBounds.width;
    int h = tickBounds.height;
    int centerEffect;
    int tickHeight;
    /* g.setColor(slider.getBackground());
    g.fillRect(tickBounds.x, tickBounds.y, tickBounds.width, tickBounds.height);
     */
    g.setColor(ColorSliderUI.foreground);
    maj = slider.getMajorTickSpacing();
    min = slider.getMinorTickSpacing();
    if ((slider.getOrientation()) == (JSlider.HORIZONTAL)) {
        g.translate(0, tickBounds.y);
        int value = slider.getMinimum();
        int xPos = 0;
        if ((slider.getMinorTickSpacing()) > 0) {
            while (value <= (slider.getMaximum())) {
                xPos = xPositionForValue(value);
                paintMinorTickForHorizSlider(g, tickBounds, xPos);
                value += slider.getMinorTickSpacing();
            } 
        }
        if ((slider.getMajorTickSpacing()) > 0) {
            value = slider.getMinimum();
            while (value <= (slider.getMaximum())) {
                xPos = xPositionForValue(value);
                paintMajorTickForHorizSlider(g, tickBounds, xPos);
                value += slider.getMajorTickSpacing();
            } 
        }
        g.translate(0, (-(tickBounds.y)));
    } else {
        g.translate(tickBounds.x, 0);
        int value = slider.getMinimum();
        int yPos = 0;
        if ((slider.getMinorTickSpacing()) > 0) {
            int offset = 0;
            if (!(slider.getComponentOrientation().isLeftToRight())) {
                offset = (tickBounds.width) - ((tickBounds.width) / 2);
                g.translate(offset, 0);
            }
            while (value <= (slider.getMaximum())) {
                yPos = yPositionForValue(value);
                paintMinorTickForVertSlider(g, tickBounds, yPos);
                value += slider.getMinorTickSpacing();
            } 
            if (!(slider.getComponentOrientation().isLeftToRight())) {
                g.translate((-offset), 0);
            }
        }
        if ((slider.getMajorTickSpacing()) > 0) {
            value = slider.getMinimum();
            if (!(slider.getComponentOrientation().isLeftToRight())) {
                g.translate(2, 0);
            }
            while (value <= (slider.getMaximum())) {
                yPos = yPositionForValue(value);
                paintMajorTickForVertSlider(g, tickBounds, yPos);
                value += slider.getMajorTickSpacing();
            } 
            if (!(slider.getComponentOrientation().isLeftToRight())) {
                g.translate((-2), 0);
            }
        }
        g.translate((-(tickBounds.x)), 0);
    }
    /* g.setColor(Color.red);
    ((Graphics2D) g).draw(tickBounds);
     */
}