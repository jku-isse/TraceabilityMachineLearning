protected void generateDiscreteLookupTables() {
    radials = new float[(w) * (h)];
    angulars = new float[(w) * (h)];
    brights = new float[(w) * (h)];
    alphas = new int[(w) * (h)];
    float radius = getRadius();
    // blend is used to create a linear alpha gradient of two extra pixels
    float blend = ((radius + 2.0F) / radius) - 1.0F;
    // Center of the color wheel circle
    int cx = (w) / 2;
    int cy = (h) / 2;
    for (int x = 0; x < (w); x++) {
        int kx = x - cx;// Kartesian coordinates of x

        int squarekx = kx * kx;// Square of kartesian x

        for (int y = 0; y < (h); y++) {
            int ky = cy - y;// Kartesian coordinates of y

            int index = x + (y * (w));
            float r = ((float) (Math.sqrt((squarekx + (ky * ky))))) / radius;
            float sat = r;
            if (r <= 1.0F) {
                alphas[index] = -16777216;
                radials[index] = 1.0F;
                brights[index] = ((float) (Math.round(((1.0F - sat) * 12.0F)))) / 12.0F;
            } else {
                alphas[index] = ((int) (((blend - (Math.min(blend, (r - 1.0F)))) * 255) / blend)) << 24;
                radials[index] = 1.0F;
                brights[index] = 0.0F;
            }
            if ((alphas[index]) != 0) {
                angulars[index] = (Math.round((((float) (((Math.atan2(ky, kx)) / (Math.PI)) / 2.0)) * 12.0F))) / 12.0F;
            }
        }
    }
}