public int toRGB(float... components) {
    float hue = components[0];
    float saturation = components[1];
    float lightness = components[2];
    // normalize hue
    hue = hue - ((float) (Math.floor(hue)));
    if (hue < 0) {
        hue = 1.0F + hue;
    }
    // normalize saturation
    if (saturation > 1.0F) {
        saturation = 1.0F;
    } else
        if (saturation < 0.0F) {
            saturation = 0.0F;
        }

    // normalize value
    if (lightness > 1.0F) {
        lightness = 1.0F;
    } else
        if (lightness < 0.0F) {
            lightness = 0.0F;
        }

    float hueDeg = hue * 360.0F;
    if (hueDeg < 0) {
        hueDeg += 360.0F;
    }
    // compute hi and f from hue
    // float f;
    float hk = hue - ((float) (Math.floor(hue)));// / 360f;

    if (hueDeg < 120.0F) {
        // red to yellow
        hk /= 2.0F;
    } else
        if (hueDeg < 160.0F) {
            // yellow to green
            hk = (((hk - (120.0F / 360.0F)) * 3.0F) / 2.0F) + (60.0F / 360.0F);
        } else
            if (hueDeg < 220.0F) {
                // green to cyan
                hk = (hk - (160.0F / 360.0F)) + (120.0F / 360.0F);
            } else
                if (hueDeg < 280.0F) {
                    // cyan to blue
                    hk = (hk - (220.0F / 360.0F)) + (180.0F / 360.0F);
                } else
                    if (hueDeg < 340.0F) {
                        // blue to purple
                        hk = (hk - (280.0F / 360.0F)) + (240.0F / 360.0F);
                    } else {
                        // purple to red
                        hk = ((hk - (340.0F / 360.0F)) * 3.0F) + (300.0F / 360.0F);
                    }




    // compute p and q from saturation and lightness
    float q;
    if (lightness < 0.5F) {
        q = lightness * (1.0F + saturation);
    } else {
        q = (lightness + saturation) - (lightness * saturation);
    }
    float p = (2.0F * lightness) - q;
    // compute red, green and blue
    float red = hk + (1.0F / 3.0F);
    float green = hk;
    float blue = hk - (1.0F / 3.0F);
    if (red < 0) {
        red = red + 1.0F;
    }
    if (green < 0) {
        green = green + 1.0F;
    }
    if (blue < 0) {
        blue = blue + 1.0F;
    }
    if (red > 1) {
        red = red - 1.0F;
    }
    if (green > 1) {
        green = green - 1.0F;
    }
    if (blue > 1) {
        blue = blue - 1.0F;
    }
    if (red < (1.0F / 6.0F)) {
        red = p + (((q - p) * 6) * red);
    } else
        if (red < 0.5F) {
            red = q;
        } else
            if (red < (2.0F / 3.0F)) {
                red = p + (((q - p) * 6) * ((2.0F / 3.0F) - red));
            } else {
                red = p;
            }


    if (green < (1.0F / 6.0F)) {
        green = p + (((q - p) * 6) * green);
    } else
        if (green < 0.5F) {
            green = q;
        } else
            if (green < (2.0F / 3.0F)) {
                green = p + (((q - p) * 6) * ((2.0F / 3.0F) - green));
            } else {
                green = p;
            }


    if (blue < (1.0F / 6.0F)) {
        blue = p + (((q - p) * 6) * blue);
    } else
        if (blue < 0.5F) {
            blue = q;
        } else
            if (blue < (2.0F / 3.0F)) {
                blue = p + (((q - p) * 6) * ((2.0F / 3.0F) - blue));
            } else {
                blue = p;
            }


    // pack red, green and blue into 24-bit rgb
    int rgb = ((((int) (red * 255)) << 16) | (((int) (green * 255)) << 8)) | ((int) (blue * 255));
    return rgb;
}