/**
 * Returns a point on the edge of the bezier path which crosses the line
 * from the center of the bezier path to the specified point.
 * If no edge crosses the line, the nearest C0 control point is returned.
 */
public static Point2D.Double chop(Shape shape, Point2D.Double p) {
    Rectangle2D bounds = shape.getBounds2D();
    Point2D.Double ctr = new Point2D.Double(bounds.getCenterX(), bounds.getCenterY());
    // Chopped point
    double cx = -1;
    double cy = -1;
    double len = Double.MAX_VALUE;
    // Try for points along edge
    PathIterator i = shape.getPathIterator(new AffineTransform(), 1);
    double[] coords = new double[6];
    int type = i.currentSegment(coords);
    double prevX = coords[0];
    double prevY = coords[1];
    double moveToX = prevX;
    double moveToY = prevY;
    i.next();
    for (; !(i.isDone()); i.next()) {
        switch (i.currentSegment(coords)) {
            case PathIterator.SEG_MOVETO :
                moveToX = coords[0];
                moveToY = coords[1];
                break;
            case PathIterator.SEG_CLOSE :
                coords[0] = moveToX;
                coords[1] = moveToY;
                break;
        }
        Point2D.Double chop = Geom.intersect(prevX, prevY, coords[0], coords[1], p.x, p.y, ctr.x, ctr.y);
        if (chop != null) {
            double cl = Geom.length2(chop.x, chop.y, p.x, p.y);
            if (cl < len) {
                len = cl;
                cx = chop.x;
                cy = chop.y;
            }
        }
        prevX = coords[0];
        prevY = coords[1];
    }
    /* if (isClosed() && size() > 1) {
    Node first = get(0);
    Node last = get(size() - 1);
    Point2D.Double chop = Geom.intersect(
    first.x[0], first.y[0],
    last.x[0], last.y[0],
    p.x, p.y,
    ctr.x, ctr.y
    );
    if (chop != null) {
    double cl = Geom.length2(chop.x, chop.y, p.x, p.y);
    if (cl < len) {
    len = cl;
    cx = chop.x;
    cy = chop.y;
    }
    }
    }
     */
    // if none found, pick closest vertex
    if (len == (Double.MAX_VALUE)) {
        i = shape.getPathIterator(new AffineTransform(), 1);
        for (; !(i.isDone()); i.next()) {
            i.currentSegment(coords);
            double l = Geom.length2(ctr.x, ctr.y, coords[0], coords[1]);
            if (l < len) {
                len = l;
                cx = coords[0];
                cy = coords[1];
            }
        }
    }
    return new Point2D.Double(cx, cy);
}