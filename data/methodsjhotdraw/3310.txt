/**
 * Lays out the specified container using this layout.
 * <p>
 * This method reshapes the components in the specified target
 * container in order to satisfy the constraints of the
 * <code>VerticalGridLayout</code> object.
 * <p>
 * The grid layout manager determines the size of individual
 * components by dividing the free space in the container into
 * equal-sized portions according to the number of rows and columns
 * in the layout. The containers free space equals the containers
 * size minus any insets and any specified horizontal or vertical
 * gap. All components in a grid layout are given the same size.
 *
 * @param parent
 * 		the container in which to do the layout
 * @see java.awt.Container
 * @see java.awt.Container#doLayout
 */
public void layoutContainer(Container parent) {
    synchronized(parent.getTreeLock()) {
        Insets insets = parent.getInsets();
        int ncomponents = parent.getComponentCount();
        int nrows = rows;
        int ncols = cols;
        boolean ltr = parent.getComponentOrientation().isLeftToRight();
        if (ncomponents == 0) {
            return;
        }
        if (nrows > 0) {
            ncols = ((ncomponents + nrows) - 1) / nrows;
        } else {
            nrows = ((ncomponents + ncols) - 1) / ncols;
        }
        int w = (parent.getWidth()) - ((insets.left) + (insets.right));
        int h = (parent.getHeight()) - ((insets.top) + (insets.bottom));
        w = (w - ((ncols - 1) * (hgap))) / ncols;
        h = (h - ((nrows - 1) * (vgap))) / nrows;
        int i;
        if (ltr) {
            for (int c = 0, x = insets.left; c < ncols; c++ , x += w + (hgap)) {
                for (int r = 0, y = insets.top; r < nrows; r++ , y += h + (vgap)) {
                    if (isVertical) {
                        i = r + (c * nrows);
                    } else {
                        i = (r * ncols) + c;
                    }
                    if (i < ncomponents) {
                        parent.getComponent(i).setBounds(x, y, w, h);
                    }
                }
            }
        } else {
            for (int c = 0, x = ((parent.getWidth()) - (insets.right)) - w; c < ncols; c++ , x -= w + (hgap)) {
                for (int r = 0, y = insets.top; r < nrows; r++ , y += h + (vgap)) {
                    if (isVertical) {
                        i = r + (c * nrows);
                    } else {
                        i = (r * ncols) + c;
                    }
                    if (i < ncomponents) {
                        parent.getComponent(i).setBounds(x, y, w, h);
                    }
                }
            }
        }
    }
}