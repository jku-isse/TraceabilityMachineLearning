/**
 * Returns the preferred text size of the TextAreaFigure.
 * <p>
 * If you want to use this method to determine the bounds of the TextAreaFigure,
 * you need to add the insets of the TextAreaFigure to the size.
 *
 * @param maxWidth
 * 		the maximal width to use. Specify Double.MAX_VALUE
 * 		if you want the width to be unlimited.
 * @return width and height needed to lay out the text.
 */
public Dimension2DDouble getPreferredTextSize(double maxWidth) {
    Rectangle2D.Double textRect = new Rectangle2D.Double();
    if ((getText()) != null) {
        Font font = getFont();
        boolean isUnderlined = AttributeKeys.FONT_UNDERLINE.get(this);
        float leftMargin = 0;
        float rightMargin = ((float) (maxWidth)) - 1;
        float verticalPos = 0;
        float maxVerticalPos = Float.MAX_VALUE;
        if (leftMargin < rightMargin) {
            float tabWidth = ((float) ((getTabSize()) * (font.getStringBounds("m", getFontRenderContext()).getWidth())));
            float[] tabStops = new float[((int) ((textRect.width) / tabWidth))];
            for (int i = 0; i < (tabStops.length); i++) {
                tabStops[i] = ((float) ((textRect.x) + ((int) (tabWidth * (i + 1)))));
            }
            String[] paragraphs = getText().split("
");// Strings.split(getText(), 
);

            for (int i = 0; i < (paragraphs.length); i++) {
                if ((paragraphs[i].length()) == 0) {
                    paragraphs[i] = " ";
                }
                AttributedString as = new AttributedString(paragraphs[i]);
                as.addAttribute(TextAttribute.FONT, font);
                if (isUnderlined) {
                    as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);
                }
                int tabCount = (paragraphs[i].split("	").length) - 1;
                Rectangle2D.Double paragraphBounds = drawParagraph(null, as.getIterator(), verticalPos, maxVerticalPos, leftMargin, rightMargin, tabStops, tabCount);
                verticalPos = ((float) ((paragraphBounds.y) + (paragraphBounds.height)));
                textRect.add(paragraphBounds);
            }
        }
    }
    return new Dimension2DDouble(((-(Math.min(textRect.x, 0))) + (textRect.width)), ((-(Math.min(textRect.y, 0))) + (textRect.height)));
}