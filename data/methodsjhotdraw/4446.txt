/**
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
private void initComponents() {
    GridBagConstraints gridBagConstraints;
    hueGroup = new ButtonGroup();
    sysGroup = new ButtonGroup();
    scrollPane = new JScrollPane();
    disclosureButton = new JToggleButton();
    sysRGBToggle = new JToggleButton();
    sysRYBToggle = new JToggleButton();
    presetCombo = new JComboBox();
    mixerPanel = new JPanel();
    harmonicWheel = new JHarmonicColorWheel();
    customHueRadio = new JRadioButton();
    customHueLabel = new JLabel();
    customHueField = new JLifeFormattedTextField();
    customHueLabel2 = new JLabel();
    analogousRadio = new JRadioButton();
    analogousLabel1 = new JLabel();
    analogousField = new JLifeFormattedTextField();
    analogousLabel2 = new JLabel();
    primaryRadio = new JRadioButton();
    primaryLabel1 = new JLabel();
    primaryField = new JLifeFormattedTextField();
    primaryLabel2 = new JLabel();
    clashRadio = new JRadioButton();
    clashLabel1 = new JLabel();
    clashField = new JLifeFormattedTextField();
    clashLabel2 = new JLabel();
    triadRadio = new JRadioButton();
    triadLabel1 = new JLabel();
    triadField = new JLifeFormattedTextField();
    triadLabel2 = new JLabel();
    splitComplementaryRadio = new JRadioButton();
    splitComplementaryLabel1 = new JLabel();
    splitField = new JLifeFormattedTextField();
    splitComplementaryLabel2 = new JLabel();
    complementaryRadio = new JRadioButton();
    complementaryLabel1 = new JLabel();
    complementaryField = new JLifeFormattedTextField();
    complementaryLabel2 = new JLabel();
    achromaticCheck = new JCheckBox();
    achromaticLabel1 = new JLabel();
    achromaticField = new JLifeFormattedTextField();
    achromaticLabel2 = new JLabel();
    monochromaticCheck = new JCheckBox();
    monochromaticLabel1 = new JLabel();
    monochromaticField = new JLifeFormattedTextField();
    monochromaticLabel2 = new JLabel();
    saturationSlider = new JSlider();
    springPanel = new JPanel();
    setLayout(new GridBagLayout());
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    add(scrollPane, gridBagConstraints);
    disclosureButton.setSelected(true);
    disclosureButton.setText("Show Mixer");
    disclosureButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            mixerDisclosurePerformed(evt);
        }
    });
    add(disclosureButton, new GridBagConstraints());
    sysGroup.add(sysRGBToggle);
    sysRGBToggle.setSelected(true);
    sysRGBToggle.setText("RGB");
    sysRGBToggle.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            systemChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridy = 1;
    add(sysRGBToggle, gridBagConstraints);
    sysGroup.add(sysRYBToggle);
    sysRYBToggle.setText("RYB");
    sysRYBToggle.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            systemChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridy = 1;
    add(sysRYBToggle, gridBagConstraints);
    presetCombo.setEditable(true);
    presetCombo.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            presetPerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    add(presetCombo, gridBagConstraints);
    mixerPanel.setLayout(new GridBagLayout());
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    mixerPanel.add(harmonicWheel, gridBagConstraints);
    hueGroup.add(customHueRadio);
    customHueRadio.setText("Custom");
    customHueRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(customHueRadio, gridBagConstraints);
    customHueLabel.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(customHueLabel, gridBagConstraints);
    customHueField.setColumns(3);
    customHueField.setHorizontalAlignment(JTextField.RIGHT);
    customHueField.setText("30");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(customHueField, gridBagConstraints);
    customHueLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    customHueLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(customHueLabel2, gridBagConstraints);
    hueGroup.add(analogousRadio);
    analogousRadio.setSelected(true);
    analogousRadio.setText("Analogous");
    analogousRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(analogousRadio, gridBagConstraints);
    analogousLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(analogousLabel1, gridBagConstraints);
    analogousField.setColumns(3);
    analogousField.setEditable(false);
    analogousField.setHorizontalAlignment(JTextField.RIGHT);
    analogousField.setText("30");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(analogousField, gridBagConstraints);
    analogousLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    analogousLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(analogousLabel2, gridBagConstraints);
    hueGroup.add(primaryRadio);
    primaryRadio.setText("Primary");
    primaryRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(primaryRadio, gridBagConstraints);
    primaryLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(primaryLabel1, gridBagConstraints);
    primaryField.setColumns(3);
    primaryField.setEditable(false);
    primaryField.setHorizontalAlignment(JTextField.RIGHT);
    primaryField.setText("120");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(primaryField, gridBagConstraints);
    primaryLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    primaryLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(primaryLabel2, gridBagConstraints);
    hueGroup.add(clashRadio);
    clashRadio.setText("Clash");
    clashRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(clashRadio, gridBagConstraints);
    clashLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(clashLabel1, gridBagConstraints);
    clashField.setColumns(3);
    clashField.setEditable(false);
    clashField.setHorizontalAlignment(JTextField.RIGHT);
    clashField.setText("90");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(clashField, gridBagConstraints);
    clashLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    clashLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(clashLabel2, gridBagConstraints);
    hueGroup.add(triadRadio);
    triadRadio.setText("Triad");
    triadRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(triadRadio, gridBagConstraints);
    triadLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(triadLabel1, gridBagConstraints);
    triadField.setColumns(3);
    triadField.setEditable(false);
    triadField.setHorizontalAlignment(JTextField.RIGHT);
    triadField.setText("120");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(triadField, gridBagConstraints);
    triadLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    triadLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(triadLabel2, gridBagConstraints);
    hueGroup.add(splitComplementaryRadio);
    splitComplementaryRadio.setText("Split Complementary");
    splitComplementaryRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(splitComplementaryRadio, gridBagConstraints);
    splitComplementaryLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(splitComplementaryLabel1, gridBagConstraints);
    splitField.setColumns(3);
    splitField.setEditable(false);
    splitField.setHorizontalAlignment(JTextField.RIGHT);
    splitField.setText("150");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(splitField, gridBagConstraints);
    splitComplementaryLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    splitComplementaryLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(splitComplementaryLabel2, gridBagConstraints);
    hueGroup.add(complementaryRadio);
    complementaryRadio.setText("Complementary");
    complementaryRadio.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(complementaryRadio, gridBagConstraints);
    complementaryLabel1.setText("+");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(complementaryLabel1, gridBagConstraints);
    complementaryField.setColumns(3);
    complementaryField.setEditable(false);
    complementaryField.setHorizontalAlignment(JTextField.RIGHT);
    complementaryField.setText("180");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(complementaryField, gridBagConstraints);
    complementaryLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    complementaryLabel2.setText("°");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(complementaryLabel2, gridBagConstraints);
    achromaticCheck.setText("Achromatic");
    achromaticCheck.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(achromaticCheck, gridBagConstraints);
    achromaticLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(achromaticLabel1, gridBagConstraints);
    achromaticField.setColumns(3);
    achromaticField.setHorizontalAlignment(JTextField.RIGHT);
    achromaticField.setText("10");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(achromaticField, gridBagConstraints);
    achromaticLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    achromaticLabel2.setText("%");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(achromaticLabel2, gridBagConstraints);
    monochromaticCheck.setSelected(true);
    monochromaticCheck.setText("Monochromatic");
    monochromaticCheck.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ruleChangePerformed(evt);
        }
    });
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(monochromaticCheck, gridBagConstraints);
    monochromaticLabel1.setText("±");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(monochromaticLabel1, gridBagConstraints);
    monochromaticField.setColumns(3);
    monochromaticField.setHorizontalAlignment(JTextField.RIGHT);
    monochromaticField.setText("10");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(monochromaticField, gridBagConstraints);
    monochromaticLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    monochromaticLabel2.setText("%");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    mixerPanel.add(monochromaticLabel2, gridBagConstraints);
    saturationSlider.setOrientation(JSlider.VERTICAL);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.VERTICAL;
    mixerPanel.add(saturationSlider, gridBagConstraints);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.weighty = 1.0;
    mixerPanel.add(springPanel, gridBagConstraints);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    add(mixerPanel, gridBagConstraints);
}// </editor-fold>//GEN-END:initComponents
