/**
 * Reduces noise from the digitized points, by applying an approximation
 * of a gaussian filter to the data.
 * <p>
 * The filter does the following for each point P, with weight 0.5:
 * <p>
 * x[i] = 0.5*x[i] + 0.25*x[i-1] + 0.25*x[i+1];
 * y[i] = 0.5*y[i] + 0.25*y[i-1] + 0.25*y[i+1];
 *
 * @param digitizedPoints
 * 		Digitized points
 * @param weight
 * 		Weight of the current point
 * @return Digitized points with reduced noise.
 */
public static ArrayList<Point2D.Double> reduceNoise(List<Point2D.Double> digitizedPoints, double weight) {
    ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();
    if ((digitizedPoints.size()) > 0) {
        Point2D.Double prev = digitizedPoints.get(0);
        cleaned.add(prev);
        double pnWeight = (1.0 - weight) / 2.0;// weight of previous and next

        for (int i = 1, n = (digitizedPoints.size()) - 1; i < n; i++) {
            Point2D.Double cur = digitizedPoints.get(i);
            Point2D.Double next = digitizedPoints.get((i + 1));
            cleaned.add(new Point2D.Double(((((cur.x) * weight) + (pnWeight * (prev.x))) + (pnWeight * (next.x))), ((((cur.y) * weight) + (pnWeight * (prev.y))) + (pnWeight * (next.y)))));
            prev = cur;
        }
        if ((digitizedPoints.size()) > 1) {
            cleaned.add(digitizedPoints.get(((digitizedPoints.size()) - 1)));
        }
    }
    return cleaned;
}