/**
 * Return an instance of a class that implements the interface that contains
 * the declaration for <code>listenerMethod</code>.  In this new class,
 * <code>listenerMethod</code> will apply <code>target.targetMethod</code>
 * to the incoming Event.
 */
public static Object create(final Method listenerMethod, final Object target, final Method targetMethod) {
    /**
     * The implementation of the create method uses the Dynamic Proxy API
     * introduced in JDK 1.3.
     *
     * Create an instance of the DefaultInvoker and override the invoke
     * method to handle the invoking the targetMethod on the target.
     */
    InvocationHandler handler = new GenericListener.DefaultInvoker() {
        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            // Send all methods except for the targetMethod to
            // the superclass for handling.
            if (listenerMethod.equals(method)) {
                if ((targetMethod.getParameterTypes().length) == 0) {
                    // Special treatment for parameterless target methods:
                    return targetMethod.invoke(target, new Object[0]);
                } else {
                    // Regular treatment for target methods having the same
                    // argument list as the listener method.
                    return targetMethod.invoke(target, args);
                }
            } else {
                return super.invoke(proxy, method, args);
            }
        }
    };
    Class cls = listenerMethod.getDeclaringClass();
    ClassLoader cl = cls.getClassLoader();
    return Proxy.newProxyInstance(cl, new Class[]{ cls }, handler);
}