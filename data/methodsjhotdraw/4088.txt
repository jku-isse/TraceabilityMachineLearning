public static BufferedImage toBufferedImage(Image image) {
    if (image instanceof BufferedImage) {
        return ((BufferedImage) (image));
    }
    // This code ensures that all the pixels in the image are loaded
    image = new ImageIcon(image).getImage();
    // Create a buffered image with a format thats compatible with the screen
    BufferedImage bimage = null;
    if (System.getProperty("java.version").startsWith("1.4.1_")) {
        // Workaround for Java 1.4.1 on Mac OS X.
        // For this JVM, we always create an ARGB image to prevent a class
        // cast exception in
        // sun.awt.image.BufImgSurfaceData.createData(BufImgSurfaceData.java:434)
        // when we attempt to draw the buffered image.
        bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
    } else {
        // Determine if the image has transparent pixels; for this methods
        // implementation, see e661 Determining If an Image Has Transparent Pixels
        boolean hasAlpha;
        try {
            hasAlpha = Images.hasAlpha(image);
        } catch (IllegalAccessError e) {
            // If we cant determine this, we assume that we have an alpha,
            // in order not to loose data.
            hasAlpha = true;
        }
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        try {
            // Determine the type of transparency of the new buffered image
            int transparency = Transparency.OPAQUE;
            if (hasAlpha) {
                transparency = Transparency.TRANSLUCENT;
            }
            // Create the buffered image
            GraphicsDevice gs = ge.getDefaultScreenDevice();
            GraphicsConfiguration gc = gs.getDefaultConfiguration();
            bimage = gc.createCompatibleImage(image.getWidth(null), image.getHeight(null), transparency);
        } catch (Exception e) {
            // } catch (HeadlessException e) {
            // The system does not have a screen
        }
        if (bimage == null) {
            // Create a buffered image using the default color model
            int type = BufferedImage.TYPE_INT_RGB;
            if (hasAlpha) {
                type = BufferedImage.TYPE_INT_ARGB;
            }
            bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);
        }
    }
    // Copy image to buffered image
    Graphics g = bimage.createGraphics();
    // Paint the image onto the buffered image
    g.drawImage(image, 0, 0, null);
    g.dispose();
    return bimage;
    // My own implementation:
    /* if (image instanceof BufferedImage) {
    return (BufferedImage) image;
    } else {
    BufferedImage bufImg;
    Frame f = new Frame();
    f.pack();
    MediaTracker t = new MediaTracker(f);
    t.addImage(image, 0);
    try { t.waitForAll(); } catch (InterruptedException e) {}

    // Workaround for Java 1.4.1 on Mac OS X.
    if (System.getProperty("java.version").startsWith("1.4.1_")) {
    bufImg = new BufferedImage(image.getWidth(f), image.getHeight(f), BufferedImage.TYPE_INT_ARGB);
    } else {
    bufImg = GraphicsEnvironment
    .getLocalGraphicsEnvironment()
    .getDefaultScreenDevice()
    .getDefaultConfiguration()
    .createCompatibleImage(image.getWidth(null), image.getHeight(null), Transparency.TRANSLUCENT);
    }
    Graphics2D imgGraphics = bufImg.createGraphics();
    imgGraphics.drawImage(image, 0, 0, f);
    imgGraphics.dispose();
    f.dispose();
    return bufImg;
    }
     */
}