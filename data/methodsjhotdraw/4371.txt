/**
 * Serializes an object and returns the Base64-encoded
 * version of that serialized object. If the object
 * cannot be serialized or there is another error,
 * the method will return <tt>null</tt>.
 * <p>
 * Valid options:<pre>
 *   GZIP: gzip-compresses object before encoding it.
 *   DONT_BREAK_LINES: dont break lines at 76 characters
 *     <i>Note: Technically, this makes your encoding non-compliant.</i>
 * </pre>
 * <p>
 * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or
 * <p>
 * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>
 *
 * @param serializableObject
 * 		The object to encode
 * @param options
 * 		Specified options
 * @return The Base64-encoded object
 * @see Base64#GZIP
 * @see Base64#DONT_BREAK_LINES
 * @since 2.0
 */
public static String encodeObject(Serializable serializableObject, int options) {
    // Streams
    ByteArrayOutputStream baos = null;
    OutputStream b64os = null;
    ObjectOutputStream oos = null;
    GZIPOutputStream gzos = null;
    // Isolate options
    int gzip = options & (Base64.GZIP);
    int dontBreakLines = options & (Base64.DONT_BREAK_LINES);
    // end catch
    try {
        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream
        baos = new ByteArrayOutputStream();
        b64os = new Base64.OutputStream(baos, ((Base64.ENCODE) | dontBreakLines));
        // GZip?
        if (gzip == (Base64.GZIP)) {
            gzos = new GZIPOutputStream(b64os);
            oos = new ObjectOutputStream(gzos);
        } else// end if: gzip

            oos = new ObjectOutputStream(b64os);

        oos.writeObject(serializableObject);
    }// end try
     catch (IOException e) {
        e.printStackTrace();
        return null;
    } finally {
        try {
            oos.close();
        } catch (Exception e) {
        }
        try {
            gzos.close();
        } catch (Exception e) {
        }
        try {
            b64os.close();
        } catch (Exception e) {
        }
        try {
            baos.close();
        } catch (Exception e) {
        }
    }// end finally

    // Return value according to relevant encoding.
    try {
        return new String(baos.toByteArray(), Base64.PREFERRED_ENCODING);
    }// end try
     catch (UnsupportedEncodingException uue) {
        return new String(baos.toByteArray());
    }// end catch

}// end encode
